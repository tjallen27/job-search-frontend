function Auth(e,t){e.signupUrl=t+"/register",e.loginUrl=t+"/login"}function Router(e,t,n){n.html5Mode(!0),e.state("home",{url:"/",templateUrl:"js/views/static/home.html"}).state("printsIndex",{url:"/prints",templateUrl:"js/views/prints/index.html",controller:"PrintsIndexCtrl as printsIndex"}).state("printsNew",{url:"/prints/new",templateUrl:"js/views/prints/new.html",controller:"PrintsNewCtrl as printsNew"}).state("printsShow",{url:"/prints/:id",templateUrl:"js/views/prints/show.html",controller:"PrintsShowCtrl as printsShow"}).state("printsEdit",{url:"/prints/:id/edit",templateUrl:"js/views/prints/edit.html",controller:"PrintsEditCtrl as printsEdit"}).state("usersShow",{url:"/users/:id",templateUrl:"js/views/users/show.html",controller:"UsersShowCtrl as usersShow"}).state("login",{url:"/login",templateUrl:"js/views/auth/login.html",controller:"AuthCtrl as auth"}).state("register",{url:"/register",templateUrl:"js/views/auth/register.html",controller:"AuthCtrl as auth"}),t.otherwise("/")}function AuthCtrl(e,t){function n(){e.signup(i.user).then(function(){return t.go("login")})}function r(){e.login(i.credentials).then(function(){return t.go("printsIndex")})}var i=this;i.register=n,i.login=r}function MainCtrl(e,t,n){function r(){n.logout(),t.go("home")}var i=this;e.$on("$stateChangeSuccess",function(){i.stateHasChanged&&(i.message=null),i.stateHasChanged||(i.stateHasChanged=!0),i.isNavCollapsed=!0}),i.isAuthenticated=n.isAuthenticated,e.$on("error",function(e,n){i.stateHasChanged=!1,i.message=n.data.message,t.go("login")}),e.$on("$stateChangeSuccess",function(){i.stateHasChanged&&(i.message=null),i.stateHasChanged||(i.stateHasChanged=!0),n.getPayload()&&(i.currentUser=n.getPayload())});var o=["printsNew","printsEdit"];e.$on("$stateChangeStart",function(e,r){!n.isAuthenticated()&&o.includes(r.name)&&(e.preventDefault(),t.go("login"),i.message="You must be logged in to access this page."),i.pageName=r.name}),i.logout=r}function PaymentController(e,t){var n=this;n.card={},n.payee=null,n.amount=null,n.currency="gbp",n.paymentSuccessful=!1,n.pay=function(){Stripe.card.createToken(n.card,function(r,i){if(200===r){var o={card:n.card,token:i.id,amount:n.amount,currency:n.currency,payee:n.payee};e.post(t+"/payment",o).then(function(e){200===e.status?(n.paymentSuccessful=!0,document.getElementById("payment_modal").style.visibility="hidden"):n.paymentSuccessful=!1})}})},n.reset=function(){n.card={},n.payee="",n.amount=null,n.paymentSuccessful=!1,n.Form.$setPristine(!0),document.getElementsByTagName("form")[0].reset()}}function PrintsIndexCtrl(e,t,n){this.all=e.query()}function PrintsNewCtrl(e,t,n){function r(){e.save({print:i.print}).$promise.then(function(){return n.go("printsIndex")})}var i=this;i.print={medium:"Print"},i.users=t.query(),i.create=r}function PrintsShowCtrl(e,t,n,r,i,o){function a(){l.print.$remove().then(function(){return i.go("printsIndex")})}function s(){l.comment.print_id=l.print.id,l.comment.user_id=l.currentUser.id,n.save({comment:l.comment}).$promise.then(function(e){l.print.comments.push(e),l.comment={}})}function u(e){n.delete({id:e.id}).$promise.then(function(){var t=l.print.comments.indexOf(e);l.print.comments.splice(t,1)})}var l=this;o.getPayload()&&(l.currentUser=t.get({id:o.getPayload().id})),l.print=e.get(r),l.comment={},l.delete=a,l.addComment=s,l.deleteComment=u}function PrintsEditCtrl(e,t,n,r){function i(){e.update({id:o.print.id,print:o.print}).$promise.then(function(){return r.go("printsShow",{id:o.print.id})})}var o=this;e.get(n).$promise.then(function(e){o.print=e}),o.users=t.query(),o.update=i}function UsersIndexCtrl(e){this.all=e.query()}function UsersShowCtrl(e,t,n,r){function i(){o.user.$remove().then(function(){r.logout(),n.go("register")})}var o=this;o.user=e.get(t),o.delete=i}function base64(){var e=new FileReader;return{restrict:"A",require:"ngModel",link:function(t,n,r,i){e.onload=function(){i.$setViewValue(e.result)},n.on("change",function(t){var n=(t.target.files||t.dataTransfer.files)[0];e.readAsDataURL(n)})}}}function Comment(e,t){return new e(t+"/comments/:id",{id:"@id"},{update:{method:"PUT"}})}function Print(e,t){return new e(t+"/prints/:id",{id:"@id"},{update:{method:"PUT"}})}function User(e,t){return new e(t+"/users/:id",{id:"@id"},{update:{method:"PUT"}})}!function(e){"use strict";function t(e,t){return t=t||Error,function(){var n,r,i=arguments[0],o=arguments[1],a="["+(e?e+":":"")+i+"] ",s=W(arguments,2).map(function(e){return xe(e,Wr.objectMaxDepth)});for(a+=o.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1);return t<s.length?s[t]:e}),a+="\nhttp://errors.angularjs.org/1.6.4/"+(e?e+"/":"")+i,r=0,n="?";r<s.length;r++,n="&")a+=n+"p"+r+"="+encodeURIComponent(s[r]);return new t(a)}}function n(e){if(!w(e))return Wr;y(e.objectMaxDepth)&&(Wr.objectMaxDepth=r(e.objectMaxDepth)?e.objectMaxDepth:NaN)}function r(e){return k(e)&&e>0}function i(e){if(null==e||O(e))return!1;if(ci(e)||C(e)||Qr&&e instanceof Qr)return!0;var t="length"in Object(e)&&e.length;return k(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(D(e))for(r in e)"prototype"!==r&&"length"!==r&&"name"!==r&&e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else if(ci(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;r<a;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(x(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)Br.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++ui}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function c(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(w(a)||D(a))for(var s=Object.keys(a),u=0,p=s.length;u<p;u++){var d=s[u],f=a[d];n&&w(f)?S(f)?e[d]=new Date(f.valueOf()):E(f)?e[d]=new RegExp(f):f.nodeName?e[d]=f.cloneNode(!0):V(f)?e[d]=f.clone():(w(e[d])||(e[d]=ci(f)?[]:{}),c(e[d],[f],!0)):e[d]=f}}return l(e,r),e}function p(e){return c(e,ti.call(arguments,1),!1)}function d(e){return c(e,ti.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function h(e,t){return p(Object.create(e),t)}function m(){}function g(e){return e}function $(e){return function(){return e}}function v(e){return D(e.toString)&&e.toString!==ii}function b(e){return void 0===e}function y(e){return void 0!==e}function w(e){return null!==e&&"object"==typeof e}function x(e){return null!==e&&"object"==typeof e&&!oi(e)}function C(e){return"string"==typeof e}function k(e){return"number"==typeof e}function S(e){return"[object Date]"===ii.call(e)}function D(e){return"function"==typeof e}function E(e){return"[object RegExp]"===ii.call(e)}function O(e){return e&&e.window===e}function T(e){return e&&e.$evalAsync&&e.$watch}function A(e){return"[object File]"===ii.call(e)}function M(e){return"[object FormData]"===ii.call(e)}function P(e){return"[object Blob]"===ii.call(e)}function I(e){return"boolean"==typeof e}function N(e){return e&&D(e.then)}function U(e){return e&&k(e.length)&&pi.test(ii.call(e))}function j(e){return"[object ArrayBuffer]"===ii.call(e)}function V(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function z(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function R(e){return Yr(e.nodeName||e[0]&&e[0].nodeName)}function q(e,t){return-1!==Array.prototype.indexOf.call(e,t)}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function L(e,t,n){function i(e,t,n){if(--n<0)return"...";var r,i=t.$$hashKey;if(ci(e))for(var o=0,s=e.length;o<s;o++)t.push(a(e[o],n));else if(x(e))for(r in e)t[r]=a(e[r],n);else if(e&&"function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&(t[r]=a(e[r],n));else for(r in e)Br.call(e,r)&&(t[r]=a(e[r],n));return l(t,i),t}function a(e,t){if(!w(e))return e;var n=u.indexOf(e);if(-1!==n)return c[n];if(O(e)||T(e))throw ai("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,o=s(e);return void 0===o&&(o=ci(e)?[]:Object.create(oi(e)),r=!0),u.push(e),c.push(o),r?i(e,o,t):o}function s(e){switch(ii.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(a(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(!e.slice){var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}return e.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(D(e.cloneNode))return e.cloneNode(!0)}var u=[],c=[];if(n=r(n)?n:NaN,t){if(U(t)||j(t))throw ai("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw ai("cpi","Can't copy! Source and destination are identical.");return ci(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),u.push(e),c.push(t),i(e,t,n)}return a(e,n)}function _(e,t){return e===t||e!==e&&t!==t}function H(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o===a&&"object"===o){if(!ci(e)){if(S(e))return!!S(t)&&_(e.getTime(),t.getTime());if(E(e))return!!E(t)&&e.toString()===t.toString();if(T(e)||T(t)||O(e)||O(t)||ci(t)||S(t)||E(t))return!1;i=$e();for(r in e)if("$"!==r.charAt(0)&&!D(e[r])){if(!H(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&y(t[r])&&!D(t[r]))return!1;return!0}if(!ci(t))return!1;if((n=e.length)===t.length){for(r=0;r<n;r++)if(!H(e[r],t[r]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(ti.call(t,n))}function W(e,t){return ti.call(e,t||0)}function Y(e,t){var n=arguments.length>2?W(arguments,2):[];return!D(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function G(t,n){var r=n;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?r=void 0:O(n)?r="$WINDOW":n&&e.document===n?r="$DOCUMENT":T(n)&&(r="$SCOPE"),r}function K(e,t){if(!b(e))return k(t)||(t=t?2:null),JSON.stringify(e,G,t)}function J(e){return C(e)?JSON.parse(e):e}function Z(e,t){e=e.replace(gi,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return li(n)?t:n}function Q(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function X(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return Q(e,n*(Z(t,r)-r))}function ee(e){e=Qr(e).clone();try{e.empty()}catch(e){}var t=Qr("<div>").append(e).html();try{return e[0].nodeType===xi?Yr(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(e,t){return"<"+Yr(t)})}catch(e){return Yr(t)}}function te(e){try{return decodeURIComponent(e)}catch(e){}}function ne(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=te(r),y(r)&&(i=!y(i)||te(i),Br.call(t,r)?ci(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function re(e){var t=[];return o(e,function(e,n){ci(e)?o(e,function(e){t.push(oe(n,!0)+(!0===e?"":"="+oe(e,!0)))}):t.push(oe(n,!0)+(!0===e?"":"="+oe(e,!0)))}),t.length?t.join("&"):""}function ie(e){return oe(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function oe(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ae(e,t){var n,r,i=$i.length;for(r=0;r<i;++r)if(n=$i[r]+t,C(n=e.getAttribute(n)))return n;return null}function se(t,n){var r,i,a={};if(o($i,function(e){var n=e+"app";!r&&t.hasAttribute&&t.hasAttribute(n)&&(r=t,i=t.getAttribute(n))}),o($i,function(e){var n,o=e+"app";!r&&(n=t.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!vi)return void e.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");a.strictDi=null!==ae(r,"strict-di"),n(r,i?[i]:[],a)}}function ue(t,n,r){w(r)||(r={}),r=p({strictDi:!1},r);var i=function(){if(t=Qr(t),t.injector()){var i=t[0]===e.document?"document":ee(t);throw ai("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(e){e.value("$rootElement",t)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),n.unshift("ng");var o=ut(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;if(e&&a.test(e.name)&&(r.debugInfoEnabled=!0,e.name=e.name.replace(a,"")),e&&!s.test(e.name))return i();e.name=e.name.replace(s,""),si.resumeBootstrap=function(e){return o(e,function(e){n.push(e)}),i()},D(si.resumeDeferredBootstrap)&&si.resumeDeferredBootstrap()}function le(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ce(e){var t=si.element(e).injector();if(!t)throw ai("test","no injector found for element argument to getTestability");return t.get("$$testability")}function pe(e,t){return t=t||"_",e.replace(bi,function(e,n){return(n?t:"")+e.toLowerCase()})}function de(e,t,n){if(!e)throw ai("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function fe(e,t,n){return n&&ci(e)&&(e=e[e.length-1]),de(D(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function he(e,t){if("hasOwnProperty"===e)throw ai("badname","hasOwnProperty is not a valid {0} name",t)}function me(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;s<a;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&D(e)?Y(o,e):e}function ge(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Qr(ti.call(e,0,i))),t.push(n));return t||e}function $e(){return Object.create(null)}function ve(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=!v(e)||ci(e)||S(e)?K(e):e.toString()}return e}function be(e){function n(e,t,n){return e[t]||(e[t]=n())}var r=t("$injector"),i=t("ng"),o=n(e,"angular",Object);return o.$$minErr=o.$$minErr||t,n(o,"module",function(){var e={};return function(t,o,a){var s={};return function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)}(t,"module"),o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=u),function(){return r[n||"push"]([e,t,arguments]),d}}function n(e,n,r){return r||(r=u),function(i,o){return o&&D(o)&&(o.$$moduleName=t),r.push([e,n,arguments]),d}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",t);var u=[],l=[],c=[],p=e("$injector","invoke","push",l),d={_invokeQueue:u,_configBlocks:l,_runBlocks:c,info:function(e){if(y(e)){if(!w(e))throw i("aobj","Argument '{0}' must be an object","value");return s=e,this}return s},requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator",l),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:p,run:function(e){return c.push(e),this}};return a&&p(a),d})}})}function ye(e,t){if(ci(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(w(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function we(e,t){var n=[];return r(t)&&(e=L(e,null,t)),JSON.stringify(e,function(e,t){if(t=G(e,t),w(t)){if(n.indexOf(t)>=0)return"...";n.push(t)}return t})}function xe(e,t){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):b(e)?"undefined":"string"!=typeof e?we(e,t):e}function Ce(){return++Oi}function ke(e){return De(e.replace(Ai,"ms-"))}function Se(e,t){return t.toUpperCase()}function De(e){return e.replace(Ti,Se)}function Ee(e){return!Ni.test(e)}function Oe(e){var t=e.nodeType;return t===wi||!t||t===ki}function Te(e){for(var t in Ei[e.ng339])return!0;return!1}function Ae(e,t){var n,r,i,a,s=t.createDocumentFragment(),u=[];if(Ee(e))u.push(t.createTextNode(e));else{for(n=s.appendChild(t.createElement("div")),r=(Ui.exec(e)||["",""])[1].toLowerCase(),i=Vi[r]||Vi._default,n.innerHTML=i[1]+e.replace(ji,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=B(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(e){s.appendChild(e)}),s}function Me(t,n){n=n||e.document;var r;return(r=Ii.exec(t))?[n.createElement(r[1])]:(r=Ae(t,n))?r.childNodes:[]}function Pe(e,t){var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)}function Ie(e){if(e instanceof Ie)return e;var t;if(C(e)&&(e=di(e),t=!0),!(this instanceof Ie)){if(t&&"<"!==e.charAt(0))throw Pi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Ie(e)}t?_e(this,Me(e)):D(e)?Ke(e):_e(this,e)}function Ne(e){return e.cloneNode(!0)}function Ue(e,t){!t&&Oe(e)&&Qr.cleanData([e]),e.querySelectorAll&&Qr.cleanData(e.querySelectorAll("*"))}function je(e,t,n,r){if(y(r))throw Pi("offargs","jqLite#off() does not support the `selector` argument");var i=ze(e),a=i&&i.events,s=i&&i.handle;if(s)if(t){var u=function(t){var r=a[t];y(n)&&F(r||[],n),y(n)&&r&&r.length>0||(e.removeEventListener(t,s),delete a[t])};o(t.split(" "),function(e){u(e),Mi[e]&&u(Mi[e])})}else for(t in a)"$destroy"!==t&&e.removeEventListener(t,s),delete a[t]}function Ve(e,t){var n=e.ng339,r=n&&Ei[n];if(r){if(t)return void delete r.data[t];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),je(e)),delete Ei[n],e.ng339=void 0}}function ze(e,t){var n=e.ng339,r=n&&Ei[n];return t&&!r&&(e.ng339=n=Ce(),r=Ei[n]={events:{},data:{},handle:void 0}),r}function Re(e,t,n){if(Oe(e)){var r,i=y(n),o=!i&&t&&!w(t),a=!t,s=ze(e,!o),u=s&&s.data;if(i)u[De(t)]=n;else{if(a)return u;if(o)return u&&u[De(t)];for(r in t)u[De(r)]=t[r]}}}function qe(e,t){return!!e.getAttribute&&(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1}function Fe(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",di((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+di(t)+" "," ")))})}function Le(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=di(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",di(n))}}function _e(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function He(e,t){return Be(e,"$"+(t||"ngController")+"Controller")}function Be(e,t,n){e.nodeType===ki&&(e=e.documentElement);for(var r=ci(t)?t:[t];e;){for(var i=0,o=r.length;i<o;i++)if(y(n=Qr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===Si&&e.host}}function We(e){for(Ue(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ye(e,t){t||Ue(e);var n=e.parentNode;n&&n.removeChild(e)}function Ge(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Qr(n).on("load",t)}function Ke(t){function n(){e.document.removeEventListener("DOMContentLoaded",n),e.removeEventListener("load",n),t()}"complete"===e.document.readyState?e.setTimeout(t):(e.document.addEventListener("DOMContentLoaded",n),e.addEventListener("load",n))}function Je(e,t){var n=qi[t.toLowerCase()];return n&&Fi[R(e)]&&n}function Ze(e){return Li[e]}function Qe(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(b(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||Xe;o>1&&(i=ye(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Xe(e,t,n){n.call(e,t)}function et(e,t,n){var r=t.relatedTarget;r&&(r===e||zi.call(e,r))||n.call(e,t)}function tt(){this.$get=function(){return p(Ie,{hasClass:function(e,t){return e.attr&&(e=e[0]),qe(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Le(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Fe(e,t)}})}}function nt(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"===r||"object"===r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function rt(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function it(e){return Function.prototype.toString.call(e)}function ot(e){var t=it(e).replace(Ji,"");return t.match(Wi)||t.match(Yi)}function at(e){var t=ot(e);return t?"function("+(t[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function st(e,t,n){var r,i,a;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw C(n)&&n||(n=e.name||at(e)),Zi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=ot(e),o(i[1].split(Gi),function(e){e.replace(Ki,function(e,t,n){r.push(n)})})}e.$inject=r}}else ci(e)?(a=e.length-1,fe(e[a],"fn"),r=e.slice(0,a)):fe(e,"fn",!0);return r}function ut(e,t){function n(e){return function(t,n){if(!w(t))return e(t,n);o(t,s(e))}}function r(e,t){if(he(e,"service"),(D(t)||ci(t))&&(t=x.instantiate(t)),!t.$get)throw Zi("pget","Provider '{0}' must define $get factory method.",e);return y[e+m]=t}function i(e,t){return function(){var n=E.invoke(t,this);if(b(n))throw Zi("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function a(e,t,n){return r(e,{$get:!1!==n?i(e,t):t})}function u(e,t){return a(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return a(e,$(t),!1)}function c(e,t){he(e,"constant"),y[e]=t,k[e]=t}function p(e,t){var n=x.get(e+m),r=n.$get;n.$get=function(){var e=E.invoke(r,n);return E.invoke(t,null,{$delegate:e})}}function d(e){de(b(e)||ci(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=x.get(r[0]);i[r[1]].apply(i,r[2])}}if(!v.get(e)){v.set(e,!0);try{C(e)?(t=ei(e),E.modules[e]=t,n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):D(e)?n.push(x.invoke(e)):ci(e)?n.push(x.invoke(e)):fe(e,"module")}catch(t){throw ci(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1===t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),Zi("modulerr","Failed to instantiate module {0} due to:\n{1}",e,t.stack||t.message||t)}}}),n}function f(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw Zi("cdep","Circular dependency found: {0}",t+" <- "+g.join(" <- "));return e[t]}try{return g.unshift(t),e[t]=h,e[t]=n(t,r),e[t]}catch(n){throw e[t]===h&&delete e[t],n}finally{g.shift()}}function i(e,n,i){for(var o=[],a=ut.$$annotate(e,t,i),s=0,u=a.length;s<u;s++){var l=a[s];if("string"!=typeof l)throw Zi("itkn","Incorrect injection token! Expected service name as string, got {0}",l);o.push(n&&n.hasOwnProperty(l)?n[l]:r(l,i))}return o}function o(e){if(Zr||"function"!=typeof e)return!1;var t=e.$$ngIsClass;return I(t)||(t=e.$$ngIsClass=/^(?:class\b|constructor\()/.test(it(e))),t}function a(e,t,n,r){"string"==typeof n&&(r=n,n=null);var a=i(e,n,r);return ci(e)&&(e=e[e.length-1]),o(e)?(a.unshift(null),new(Function.prototype.bind.apply(e,a))):e.apply(t,a)}function s(e,t,n){var r=ci(e)?e[e.length-1]:e,o=i(e,t,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:ut.$$annotate,has:function(t){return y.hasOwnProperty(t+m)||e.hasOwnProperty(t)}}}t=!0===t;var h={},m="Provider",g=[],v=new Hi,y={$provide:{provider:n(r),factory:n(a),service:n(u),value:n(l),constant:n(c),decorator:p}},x=y.$injector=f(y,function(e,t){throw si.isString(t)&&g.push(t),Zi("unpr","Unknown provider: {0}",g.join(" <- "))}),k={},S=f(k,function(e,t){var n=x.get(e+m,t);return E.invoke(n.$get,n,void 0,e)}),E=S;y["$injector"+m]={$get:$(S)},E.modules=x.modules=$e();var O=d(e);return E=S.get("$injector"),E.strictDi=t,o(O,function(e){e&&E.invoke(e)}),E}function lt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){if("a"===R(e))return t=e,!0}),t}function o(){var e=s.yOffset;if(D(e))e=e();else if(V(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else k(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=C(e)?e:k(e)?e.toString():n.hash();var t;e?(t=u.getElementById(e))?a(t):(t=i(u.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var u=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Ge(function(){r.$evalAsync(s)})}),s}]}function ct(e,t){return e||t?e?t?(ci(e)&&(e=e.join(" ")),ci(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function pt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Xi)return n}}function dt(e){C(e)&&(e=e.split(" "));var t=$e();return o(e,function(e){e.length&&(t[e]=!0)}),t}function ft(e){return w(e)?e:{}}function ht(e,t,n,r){function i(e){try{e.apply(null,W(arguments,1))}finally{if(0===--$)for(;v.length;)try{v.pop()()}catch(e){n.error(e)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){k=null,l()}function u(){y=S(),y=b(y)?null:y,H(y,O)&&(y=O),O=y,w=y}function l(){var e=w;u(),x===c.url()&&e===y||(x=c.url(),w=y,o(D,function(e){e(c.url(),y)}))}var c=this,p=e.location,d=e.history,f=e.setTimeout,h=e.clearTimeout,g={};c.isMock=!1;var $=0,v=[];c.$$completeOutstandingRequest=i,c.$$incOutstandingRequestCount=function(){$++},c.notifyWhenNoOutstandingRequests=function(e){0===$?e():v.push(e)};var y,w,x=p.href,C=t.find("base"),k=null,S=r.history?function(){try{return d.state}catch(e){}}:m;u(),c.url=function(t,n,i){if(b(i)&&(i=null),p!==e.location&&(p=e.location),d!==e.history&&(d=e.history),t){var o=w===i;if(x===t&&(!r.history||o))return c;var s=x&&Kt(x)===Kt(t);return x=t,w=i,!r.history||s&&o?(s||(k=t),n?p.replace(t):s?p.hash=a(t):p.href=t,p.href!==t&&(k=t)):(d[n?"replaceState":"pushState"](i,"",t),u()),k&&(k=t),c}return k||p.href.replace(/%27/g,"'")},c.state=function(){return y};var D=[],E=!1,O=null;c.onUrlChange=function(t){return E||(r.history&&Qr(e).on("popstate",s),Qr(e).on("hashchange",s),E=!0),D.push(t),t},c.$$applicationDestroyed=function(){Qr(e).off("hashchange popstate",s)},c.$$checkUrlChange=l,c.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return $++,n=f(function(){delete g[n],i(e)},t||0),g[n]=!0,n},c.defer.cancel=function(e){return!!g[e]&&(delete g[e],h(e),i(m),!0)}}function mt(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new ht(e,r,t,n)}]}function gt(){this.$get=function(){function e(e,r){function i(e){e!==d&&(f?f===e&&(f=e.n):f=e,o(e.n,e.p),o(e,d),d=e,d.n=null)}function o(e,t){e!==t&&(e&&(e.p=t),t&&(t.n=e))}if(e in n)throw t("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=p({},r,{id:e}),u=$e(),l=r&&r.capacity||Number.MAX_VALUE,c=$e(),d=null,f=null;return n[e]={put:function(e,t){if(!b(t)){if(l<Number.MAX_VALUE){i(c[e]||(c[e]={key:e}))}return e in u||a++,u[e]=t,a>l&&this.remove(f.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;t===d&&(d=t.p),t===f&&(f=t.n),o(t.n,t.p),delete c[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=$e(),a=0,c=$e(),d=f=null},destroy:function(){u=null,s=null,c=null,delete n[e]},info:function(){return p({},s,{size:a})}}}var n={};return e.info=function(){var e={};return o(n,function(t,n){e[n]=t.info()}),e},e.get=function(e){return n[e]},e}}function $t(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function vt(){}function bt(t,n){function r(e,t,n){var r=$e();return o(e,function(e,i){if(e in E)return void(r[i]=E[e]);var o=e.match(/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/);if(!o)throw ao("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e,n?"controller bindings definition":"isolate scope definition");r[i]={mode:o[1][0],collection:"*"===o[2],optional:"?"===o[3],attrName:o[4]||i},o[4]&&(E[e]=r[i])}),r}function i(e,t){var n={isolateScope:null,bindToController:null};if(w(e.scope)&&(!0===e.bindToController?(n.bindToController=r(e.scope,t,!0),n.isolateScope={}):n.isolateScope=r(e.scope,t,!1)),w(e.bindToController)&&(n.bindToController=r(e.bindToController,t,!0)),n.bindToController&&!e.controller)throw ao("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);return n}function a(e){var t=e.charAt(0);if(!t||t!==Yr(t))throw ao("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw ao("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}function u(e){var t=e.require||e.controller&&e.name;return!ci(t)&&w(t)&&o(t,function(e,n){var r=e.match(k);e.substring(r[0].length)||(t[n]=r[0]+n)}),t}function l(e,t){if(e&&(!C(e)||!/[EACM]/.test(e)))throw ao("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",e,t);return e||"EA"}var c={},d="Directive",f=/^\s*directive:\s*([\w-]+)\s+(.*)$/,v=/(([\w-]+)(?::([^;]+))?;?)/,x=z("ngSrc,ngSrcset,src,srcset"),k=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,S=/^(on[a-z]+|formaction)$/,E=$e();this.directive=function e(n,r){return de(n,"name"),he(n,"directive"),C(n)?(a(n),de(r,"directiveFactory"),c.hasOwnProperty(n)||(c[n]=[],t.factory(n+d,["$injector","$exceptionHandler",function(e,t){var r=[];return o(c[n],function(i,o){try{var a=e.invoke(i);D(a)?a={compile:$(a)}:!a.compile&&a.link&&(a.compile=$(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=u(a),a.restrict=l(a.restrict,n),a.$$moduleName=i.$$moduleName,r.push(a)}catch(e){t(e)}}),r}])),c[n].push(r)):o(n,s(e)),this},this.component=function(e,t){function n(e){function n(t){return D(t)||ci(t)?function(n,r){return e.invoke(t,this,{$element:n,$attrs:r})}:t}var i=t.template||t.templateUrl?t.template:"",a={controller:r,controllerAs:kt(t.controller)||t.controllerAs||"$ctrl",template:n(i),templateUrl:n(t.templateUrl),transclude:t.transclude,scope:{},bindToController:t.bindings||{},restrict:"E",require:t.require};return o(t,function(e,t){"$"===t.charAt(0)&&(a[t]=e)}),a}var r=t.controller||function(){};return o(t,function(e,t){"$"===t.charAt(0)&&(n[t]=e,D(r)&&(r[t]=e))}),n.$inject=["$injector"],this.directive(e,n)},this.aHrefSanitizationWhitelist=function(e){return y(e)?(n.aHrefSanitizationWhitelist(e),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(n.imgSrcSanitizationWhitelist(e),this):n.imgSrcSanitizationWhitelist()};var O=!0;this.debugInfoEnabled=function(e){return y(e)?(O=e,this):O};var A=!1;this.preAssignBindingsEnabled=function(e){return y(e)?(A=e,this):A};var M=10;this.onChangesTtl=function(e){return arguments.length?(M=e,this):M};var P=!0;this.commentDirectivesEnabled=function(e){
return arguments.length?(P=e,this):P};var N=!0;this.cssClassDirectivesEnabled=function(e){return arguments.length?(N=e,this):N},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(t,n,r,a,s,u,l,$,E,U){function j(){try{if(!--Ae)throw ke=void 0,ao("infchng","{0} $onChanges() iterations reached. Aborting!\n",M);l.$apply(function(){for(var e=[],t=0,n=ke.length;t<n;++t)try{ke[t]()}catch(t){e.push(t)}if(ke=void 0,e.length)throw e})}finally{Ae++}}function V(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e}function z(e,t,n){De.innerHTML="<span "+t+">";var r=De.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}function q(e,t){try{e.addClass(t)}catch(e){}}function L(e,t,n,r,i){e instanceof Qr||(e=Qr(e));var o=G(e,t,e,n,r,i);L.$$addScopeClass(e);var a=null;return function(t,n,r){if(!e)throw ao("multilink","This element has already been linked.");de(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var s=r.parentBoundTranscludeFn,u=r.transcludeControllers,l=r.futureParentElement;s&&s.$$boundTransclude&&(s=s.$$boundTransclude),a||(a=B(l));var c;if(c="html"!==a?Qr(ge(a,Qr("<div>").append(e).html())):n?Ri.clone.call(e):e,u)for(var p in u)c.data("$"+p+"Controller",u[p].instance);return L.$$addScopeInfo(c,t),n&&n(c,t),o&&o(t,c,c,s),n||(e=o=null),c}}function B(e){var t=e&&e[0];return t&&"foreignobject"!==R(t)&&ii.call(t).match(/SVG/)?"svg":"html"}function G(e,t,n,r,i,o){function a(e,n,r,i){var o,a,s,u,l,c,p,d,m;if(f){var g=n.length;for(m=new Array(g),l=0;l<h.length;l+=3)p=h[l],m[p]=n[p]}else m=n;for(l=0,c=h.length;l<c;)s=m[h[l++]],o=h[l++],a=h[l++],o?(o.scope?(u=e.$new(),L.$$addScopeInfo(Qr(s),u)):u=e,d=o.transcludeOnThisElement?J(e,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&t?J(e,t):null,o(a,u,s,r,d)):a&&a(e,s.childNodes,void 0,i)}for(var s,u,l,c,p,d,f,h=[],m=ci(e)||e instanceof Qr,g=0;g<e.length;g++)s=new V,11===Zr&&K(e,g,m),u=Z(e[g],[],s,0===g?r:void 0,i),l=u.length?re(u,e[g],s,t,n,null,[],[],o):null,l&&l.scope&&L.$$addScopeClass(s.$$element),p=l&&l.terminal||!(c=e[g].childNodes)||!c.length?null:G(c,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:t),(l||p)&&(h.push(g,l,p),d=!0,f=f||l),o=null;return d?a:null}function K(e,t,n){var r,i=e[t],o=i.parentNode;if(i.nodeType===xi)for(;;){if(!(r=o?i.nextSibling:e[t+1])||r.nodeType!==xi)break;i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===e[t+1]&&e.splice(t+1,1)}}function J(e,t,n){function r(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=$e();for(var o in t.$$slots)t.$$slots[o]?i[o]=J(e,t.$$slots[o],n):i[o]=null;return r}function Z(e,t,n,r,i){var o,a,s,u=e.nodeType,l=n.$attr;switch(u){case wi:a=R(e),se(t,wt(a),"E",r,i);for(var c,p,d,f,h,m,g=e.attributes,$=0,b=g&&g.length;$<b;$++){var y=!1,x=!1;c=g[$],p=c.name,h=c.value,f=wt(p),m=Ue.test(f),m&&(p=p.replace(uo,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var k=f.match(je);k&&ue(k[1])&&(y=p,x=p.substr(0,p.length-5)+"end",p=p.substr(0,p.length-6)),d=wt(p.toLowerCase()),l[d]=p,!m&&n.hasOwnProperty(d)||(n[d]=h,Je(e,d)&&(n[d]=!0)),be(e,t,h,d,m),se(t,d,"A",r,i,y,x)}if("input"===a&&"hidden"===e.getAttribute("type")&&e.setAttribute("autocomplete","off"),!Te)break;if(s=e.className,w(s)&&(s=s.animVal),C(s)&&""!==s)for(;o=v.exec(s);)d=wt(o[2]),se(t,d,"C",r,i)&&(n[d]=di(o[3])),s=s.substr(o.index+o[0].length);break;case xi:me(t,e.nodeValue);break;case Ci:if(!Oe)break;Q(e,t,n,r,i)}return t.sort(fe),t}function Q(e,t,n,r,i){try{var o=f.exec(e.nodeValue);if(o){var a=wt(o[1]);se(t,a,"M",r,i)&&(n[a]=di(o[2]))}}catch(e){}}function X(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t))do{if(!e)throw ao("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType===wi&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0);else r.push(e);return Qr(r)}function te(e,t,n){return function(r,i,o,a,s){return i=X(i[0],t,n),e(r,i,o,a,s)}}function ne(e,t,n,r,i,o){var a;return e?L(t,n,r,i,o):function(){return a||(a=L(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function re(e,t,n,i,a,s,u,l,c){function d(e,t,n,r){e&&(n&&(e=te(e,n,r)),e.require=h.require,e.directiveName=m,(k===h||h.$$isolateScope)&&(e=we(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=te(t,n,r)),t.require=h.require,t.directiveName=m,(k===h||h.$$isolateScope)&&(t=we(t,{isolateScope:!0})),l.push(t))}function f(e,i,a,s,c){function d(e,t,n,r){var i;if(T(e)||(r=n,n=t,t=e,e=void 0),P&&(i=v),n||(n=P?E.parent():E),!r)return c(e,t,i,n,R);var o=c.$$slots[r];if(o)return o(e,t,i,n,R);if(b(o))throw ao("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,ee(E))}var f,h,m,g,$,v,y,E,O,M;t===a?(O=n,E=n.$$element):(E=Qr(a),O=new V(E,n)),$=i,k?g=i.$new(!0):x&&($=i.$parent),c&&(y=d,y.$$boundTransclude=c,y.isSlotFilled=function(e){return!!c.$$slots[e]}),C&&(v=oe(E,O,y,C,g,i,k)),k&&(L.$$addScopeInfo(E,g,!0,!(S&&(S===k||S===k.$$originalDirective))),L.$$addScopeClass(E,!0),g.$$isolateBindings=k.$$isolateBindings,M=Ce(i,O,g,g.$$isolateBindings,k),M.removeWatches&&g.$on("$destroy",M.removeWatches));for(var I in v){var N=C[I],U=v[I],j=N.$$bindings.bindToController;if(A){U.bindingInfo=j?Ce($,O,U.instance,j,N):{};var z=U();z!==U.instance&&(U.instance=z,E.data("$"+N.name+"Controller",z),U.bindingInfo.removeWatches&&U.bindingInfo.removeWatches(),U.bindingInfo=Ce($,O,U.instance,j,N))}else U.instance=U(),E.data("$"+N.name+"Controller",U.instance),U.bindingInfo=Ce($,O,U.instance,j,N)}for(o(C,function(e,t){var n=e.require;e.bindToController&&!ci(n)&&w(n)&&p(v[t].instance,ie(t,n,E,v))}),o(v,function(e){var t=e.instance;if(D(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){r(e)}if(D(t.$onInit))try{t.$onInit()}catch(e){r(e)}D(t.$doCheck)&&($.$watch(function(){t.$doCheck()}),t.$doCheck()),D(t.$onDestroy)&&$.$on("$destroy",function(){t.$onDestroy()})}),f=0,h=u.length;f<h;f++)m=u[f],xe(m,m.isolateScope?g:i,E,O,m.require&&ie(m.directiveName,m.require,E,v),y);var R=i;for(k&&(k.template||null===k.templateUrl)&&(R=g),e&&e(R,a.childNodes,void 0,c),f=l.length-1;f>=0;f--)m=l[f],xe(m,m.isolateScope?g:i,E,O,m.require&&ie(m.directiveName,m.require,E,v),y);o(v,function(e){var t=e.instance;D(t.$postLink)&&t.$postLink()})}c=c||{};for(var h,m,g,$,v,y=-Number.MAX_VALUE,x=c.newScopeDirective,C=c.controllerDirectives,k=c.newIsolateScopeDirective,S=c.templateDirective,E=c.nonTlbTranscludeDirective,O=!1,M=!1,P=c.hasElementTranscludeDirective,I=n.$$element=Qr(t),N=s,U=i,j=!1,z=!1,q=0,F=e.length;q<F;q++){h=e[q];var _=h.$$start,H=h.$$end;if(_&&(I=X(t,_,H)),g=void 0,y>h.priority)break;if(v=h.scope,v&&(h.templateUrl||(w(v)?(he("new/isolated scope",k||x,h,I),k=h):he("new/isolated scope",k,h,I)),x=x||h),m=h.name,!j&&(h.replace&&(h.templateUrl||h.template)||h.transclude&&!h.$$tlb)){for(var B,G=q+1;B=e[G++];)if(B.transclude&&!B.$$tlb||B.replace&&(B.templateUrl||B.template)){z=!0;break}j=!0}if(!h.templateUrl&&h.controller&&(C=C||$e(),he("'"+m+"' controller",C[m],h,I),C[m]=h),v=h.transclude)if(O=!0,h.$$tlb||(he("transclusion",E,h,I),E=h),"element"===v)P=!0,y=h.priority,g=I,I=n.$$element=Qr(L.$$createComment(m,n[m])),t=I[0],ye(a,W(g),t),g[0].$$parentNode=g[0].parentNode,U=ne(z,g,i,y,N&&N.name,{nonTlbTranscludeDirective:E});else{var K=$e();if(w(v)){g=[];var J=$e(),Q=$e();o(v,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,J[e]=t,K[t]=null,Q[t]=n}),o(I.contents(),function(e){var t=J[wt(R(e))];t?(Q[t]=!0,K[t]=K[t]||[],K[t].push(e)):g.push(e)}),o(Q,function(e,t){if(!e)throw ao("reqslot","Required transclusion slot `{0}` was not filled.",t)});for(var re in K)K[re]&&(K[re]=ne(z,K[re],i))}else g=Qr(Ne(t)).contents();I.empty(),U=ne(z,g,i,void 0,void 0,{needsNewScope:h.$$isolateScope||h.$$newScope}),U.$$slots=K}if(h.template)if(M=!0,he("template",S,h,I),S=h,v=D(h.template)?h.template(I,n):h.template,v=Ie(v),h.replace){if(N=h,g=Ee(v)?[]:Ct(ge(h.templateNamespace,di(v))),t=g[0],1!==g.length||t.nodeType!==wi)throw ao("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m,"");ye(a,I,t);var se={$attr:{}},ue=Z(t,[],se),pe=e.splice(q+1,e.length-(q+1));(k||x)&&ae(ue,k,x),e=e.concat(ue).concat(pe),le(n,se),F=e.length}else I.html(v);if(h.templateUrl)M=!0,he("template",S,h,I),S=h,h.replace&&(N=h),f=ce(e.splice(q,e.length-q),I,n,a,O&&U,u,l,{controllerDirectives:C,newScopeDirective:x!==h&&x,newIsolateScopeDirective:k,templateDirective:S,nonTlbTranscludeDirective:E}),F=e.length;else if(h.compile)try{$=h.compile(I,n,U);var de=h.$$originalDirective||h;D($)?d(null,Y(de,$),_,H):$&&d(Y(de,$.pre),Y(de,$.post),_,H)}catch(e){r(e,ee(I))}h.terminal&&(f.terminal=!0,y=Math.max(y,h.priority))}return f.scope=x&&!0===x.scope,f.transcludeOnThisElement=O,f.templateOnThisElement=M,f.transclude=U,c.hasElementTranscludeDirective=P,f}function ie(e,t,n,r){var i;if(C(t)){var a=t.match(k),s=t.substring(a[0].length),u=a[1]||a[3],l="?"===a[2];if("^^"===u?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var c="$"+s+"Controller";i=u?n.inheritedData(c):n.data(c)}if(!i&&!l)throw ao("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,e)}else if(ci(t)){i=[];for(var p=0,d=t.length;p<d;p++)i[p]=ie(e,t[p],n,r)}else w(t)&&(i={},o(t,function(t,o){i[o]=ie(e,t,n,r)}));return i||null}function oe(e,t,n,r,i,o,a){var s=$e();for(var l in r){var c=r[l],p={$scope:c===a||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},d=c.controller;"@"===d&&(d=t[c.name]);var f=u(d,p,!0,c.controllerAs);s[c.name]=f,e.data("$"+c.name+"Controller",f.instance)}return s}function ae(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=h(e[r],{$$isolateScope:t,$$newScope:n})}function se(e,n,r,o,a,s,u){if(n===a)return null;var l=null;if(c.hasOwnProperty(n))for(var p,f=t.get(n+d),m=0,g=f.length;m<g;m++)if(p=f[m],(b(o)||o>p.priority)&&-1!==p.restrict.indexOf(r)){if(s&&(p=h(p,{$$start:s,$$end:u})),!p.$$bindings){var $=p.$$bindings=i(p,p.name);w($.isolateScope)&&(p.$$isolateBindings=$.isolateScope)}e.push(p),l=p}return l}function ue(e){if(c.hasOwnProperty(e))for(var n,r=t.get(e+d),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function le(e,t){var n=t.$attr,r=e.$attr;o(e,function(r,i){"$"!==i.charAt(0)&&(t[i]&&t[i]!==r&&(r.length?r+=("style"===i?";":" ")+t[i]:r=t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,i){e.hasOwnProperty(i)||"$"===i.charAt(0)||(e[i]=t,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function ce(e,t,n,i,s,u,l,c){var p,d,f=[],m=t[0],g=e.shift(),$=h(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),v=D(g.templateUrl)?g.templateUrl(t,n):g.templateUrl,b=g.templateNamespace;return t.empty(),a(v).then(function(r){var a,h,y,x;if(r=Ie(r),g.replace){if(y=Ee(r)?[]:Ct(ge(b,di(r))),a=y[0],1!==y.length||a.nodeType!==wi)throw ao("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g.name,v);h={$attr:{}},ye(i,t,a);var C=Z(a,[],h);w(g.scope)&&ae(C,!0),e=C.concat(e),le(n,h)}else a=m,t.html(r);for(e.unshift($),p=re(e,a,n,s,t,g,u,l,c),o(i,function(e,n){e===a&&(i[n]=t[0])}),d=G(t[0].childNodes,s);f.length;){var k=f.shift(),S=f.shift(),D=f.shift(),E=f.shift(),O=t[0];if(!k.$$destroyed){if(S!==m){var T=S.className;c.hasElementTranscludeDirective&&g.replace||(O=Ne(a)),ye(D,Qr(S),O),q(Qr(O),T)}x=p.transcludeOnThisElement?J(k,p.transclude,E):E,p(d,k,O,i,x)}}f=null}).catch(function(e){e instanceof Error&&r(e)}),function(e,t,n,r,i){var o=i;t.$$destroyed||(f?f.push(t,n,r,o):(p.transcludeOnThisElement&&(o=J(t,p.transclude,i)),p(d,t,n,r,o)))}}function fe(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function he(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw ao("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,ee(r))}function me(e,t){var r=n(t,!0);r&&e.push({priority:0,compile:function(e){var t=e.parent(),n=!!t.length;return n&&L.$$addBindingClass(t),function(e,t){var i=t.parent();n||L.$$addBindingClass(i),L.$$addBindingInfo(i,r.expressions),e.$watch(r,function(e){t[0].nodeValue=e})}}})}function ge(t,n){switch(t=Yr(t||"html")){case"svg":case"math":var r=e.document.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function ve(e,t){if("srcdoc"===t)return $.HTML;var n=R(e);if("src"===t||"ngSrc"===t){if(-1===["img","video","audio","source","track"].indexOf(n))return $.RESOURCE_URL}else if("xlinkHref"===t||"form"===n&&"action"===t||"link"===n&&"href"===t)return $.RESOURCE_URL}function be(e,t,r,i,o){var a=ve(e,i),s=!o,u=x[i]||o,l=n(r,s,a,u);if(l){if("multiple"===i&&"select"===R(e))throw ao("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",ee(e));if(S.test(i))throw ao("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");t.push({priority:100,compile:function(){return{pre:function(e,t,o){var s=o.$$observers||(o.$$observers=$e()),c=o[i];c!==r&&(l=c&&n(c,!0,a,u),r=c),l&&(o[i]=l(e),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||e).$watch(l,function(e,t){"class"===i&&e!==t?o.$updateClass(e,t):o.$set(i,e)}))}}}})}}function ye(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;i<o;i++)if(t[i]===a){t[i++]=r;for(var l=i,c=l+s-1,p=t.length;l<p;l++,c++)c<p?t[l]=t[c]:delete t[l];t.length-=s-1,t.context===a&&(t.context=r);break}u&&u.replaceChild(r,a);var d=e.document.createDocumentFragment();for(i=0;i<s;i++)d.appendChild(n[i]);for(Qr.hasData(a)&&(Qr.data(r,Qr.data(a)),Qr(a).off("$destroy")),Qr.cleanData(d.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function we(e,t){return p(function(){return e.apply(null,arguments)},e,t)}function xe(e,t,n,i,o,a){try{e(t,n,i,o,a)}catch(e){r(e,ee(n))}}function Ce(e,t,r,i,a){function u(t,n,i){D(r.$onChanges)&&!_(n,i)&&(ke||(e.$$postDigest(j),ke=[]),c||(c={},ke.push(l)),c[t]&&(i=c[t].previousValue),c[t]=new yt(i,n))}function l(){r.$onChanges(c),c=void 0}var c,p=[],d={};return o(i,function(i,o){var l,c,f,h,g,$=i.attrName,v=i.optional,b=i.mode;switch(b){case"@":v||Br.call(t,$)||(r[o]=t[$]=void 0),g=t.$observe($,function(e){if(C(e)||I(e)){var t=r[o];u(o,e,t),r[o]=e}}),t.$$observers[$].$$scope=e,l=t[$],C(l)?r[o]=n(l)(e):I(l)&&(r[o]=l),d[o]=new yt(so,r[o]),p.push(g);break;case"=":if(!Br.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;c=s(t[$]),h=c.literal?H:_,f=c.assign||function(){throw l=r[o]=c(e),ao("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",t[$],$,a.name)},l=r[o]=c(e);var y=function(t){return h(t,r[o])||(h(t,l)?f(e,t=r[o]):r[o]=t),l=t};y.$stateful=!0,g=i.collection?e.$watchCollection(t[$],y):e.$watch(s(t[$],y),null,c.literal),p.push(g);break;case"<":if(!Br.call(t,$)){if(v)break;t[$]=void 0}if(v&&!t[$])break;c=s(t[$]);var w=c.literal,x=r[o]=c(e);d[o]=new yt(so,r[o]),g=e.$watch(c,function(e,t){if(t===e){if(t===x||w&&H(t,x))return;t=x}u(o,e,t),r[o]=e},w),p.push(g);break;case"&":if((c=t.hasOwnProperty($)?s(t[$]):m)===m&&v)break;r[o]=function(t){return c(e,t)}}}),{initialChanges:d,removeWatches:p.length&&function(){for(var e=0,t=p.length;e<t;++e)p[e]()}}}var ke,Se=/^\w/,De=e.document.createElement("div"),Oe=P,Te=N,Ae=M;V.prototype={$normalize:wt,$addClass:function(e){e&&e.length>0&&E.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&E.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=xt(e,t);n&&n.length&&E.addClass(this.$$element,n);var r=xt(t,e);r&&r.length&&E.removeClass(this.$$element,r)},$set:function(e,t,n,i){var a,s=this.$$element[0],u=Je(s,e),l=Ze(e),c=e;if(u?(this.$$element.prop(e,t),i=u):l&&(this[l]=t,c=l),this[e]=t,i?this.$attr[e]=i:(i=this.$attr[e])||(this.$attr[e]=i=pe(e,"-")),"a"===(a=R(this.$$element))&&("href"===e||"xlinkHref"===e)||"img"===a&&"src"===e)this[e]=t=U(t,"src"===e);else if("img"===a&&"srcset"===e&&y(t)){for(var p="",d=di(t),f=/\s/.test(d)?/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/:/(,)/,h=d.split(f),m=Math.floor(h.length/2),g=0;g<m;g++){var $=2*g;p+=U(di(h[$]),!0),p+=" "+di(h[$+1])}var v=di(h[2*g]).split(/\s/);p+=U(di(v[0]),!0),2===v.length&&(p+=" "+di(v[1])),this[e]=t=p}!1!==n&&(null===t||b(t)?this.$$element.removeAttr(i):Se.test(i)?this.$$element.attr(i,t):z(this.$$element[0],i,t));var w=this.$$observers;w&&o(w[c],function(e){try{e(t)}catch(e){r(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=$e()),i=r[e]||(r[e]=[]);return i.push(t),l.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||b(n[e])||t(n[e])}),function(){F(i,t)}}};var Me=n.startSymbol(),Pe=n.endSymbol(),Ie="{{"===Me&&"}}"===Pe?g:function(e){return e.replace(/\{\{/g,Me).replace(/}}/g,Pe)},Ue=/^ngAttr[A-Z]/,je=/^(.+)Start$/;return L.$$addBindingInfo=O?function(e,t){var n=e.data("$binding")||[];ci(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:m,L.$$addBindingClass=O?function(e){q(e,"ng-binding")}:m,L.$$addScopeInfo=O?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:m,L.$$addScopeClass=O?function(e,t){q(e,t?"ng-isolate-scope":"ng-scope")}:m,L.$$createComment=function(t,n){var r="";return O&&(r=" "+(t||"")+": ",n&&(r+=n+" ")),e.document.createComment(r)},L}]}function yt(e,t){this.previousValue=e,this.currentValue=t}function wt(e){return e.replace(uo,"").replace(lo,Se)}function xt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function Ct(e){e=Qr(e);var t=e.length;if(t<=1)return e;for(;t--;){var n=e[t];(n.nodeType===Ci||n.nodeType===xi&&""===n.nodeValue.trim())&&ni.call(e,t,1)}return e}function kt(e,t){if(t&&C(t))return t;if(C(e)){var n=po.exec(e);if(n)return n[3]}}function St(){var e={},n=!1;this.has=function(t){return e.hasOwnProperty(t)},this.register=function(t,n){he(t,"controller"),w(t)?p(e,t):e[t]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(e,n,r,i){if(!e||!w(e.$scope))throw t("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);e.$scope[n]=r}return function(t,a,s,u){var l,c,d,f;if(s=!0===s,u&&C(u)&&(f=u),C(t)){if(!(c=t.match(po)))throw co("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);if(d=c[1],f=f||c[3],!(t=e.hasOwnProperty(d)?e[d]:me(a.$scope,d,!0)||(n?me(i,d,!0):void 0)))throw co("ctrlreg","The controller with the name '{0}' is not registered.",d);fe(t,d,!0)}if(s){var h=(ci(t)?t[t.length-1]:t).prototype;return l=Object.create(h||null),f&&o(a,f,l,d||t.name),p(function(){var e=r.invoke(t,l,a,d);return e!==l&&(w(e)||D(e))&&(l=e,f&&o(a,f,l,d||t.name)),l},{instance:l,identifier:f})}return l=r.instantiate(t,a,d),f&&o(a,f,l,d||t.name),l}}]}function Dt(){this.$get=["$window",function(e){return Qr(e.document)}]}function Et(){this.$get=["$document","$rootScope",function(e,t){function n(){i=r.hidden}var r=e[0],i=r&&r.hidden;return e.on("visibilitychange",n),t.$on("$destroy",function(){e.off("visibilitychange",n)}),function(){return i}}]}function Ot(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function Tt(e){return w(e)?S(e)?e.toISOString():K(e):e}function At(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||b(e)||(ci(e)?o(e,function(e){t.push(oe(n)+"="+oe(Tt(e)))}):t.push(oe(n)+"="+oe(Tt(e))))}),t.join("&")}}}function Mt(){this.$get=function(){return function(e){function t(e,r,i){null===e||b(e)||(ci(e)?o(e,function(e,n){t(e,r+"["+(w(e)?n:"")+"]")}):w(e)&&!S(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(oe(r)+"="+oe(Tt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function Pt(e,t){if(C(e)){var n=e.replace(vo,"").trim();if(n){var r=t("Content-Type");if(r&&0===r.indexOf(ho)||It(n))try{e=J(n)}catch(t){throw bo("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',e,t)}}}return e}function It(e){var t=e.match(go);return t&&$o[t[0]].test(e)}function Nt(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=$e();return C(e)?o(e.split("\n"),function(e){n=e.indexOf(":"),t(Yr(di(e.substr(0,n))),di(e.substr(n+1)))}):w(e)&&o(e,function(e,n){t(Yr(n),di(e))}),r}function Ut(e){var t;return function(n){if(t||(t=Nt(e)),n){var r=t[Yr(n)];return void 0===r&&(r=null),r}return t}}function jt(e,t,n,r){return D(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function Vt(e){return 200<=e&&e<300}function zt(){var e=this.defaults={transformResponse:[Pt],transformRequest:[function(e){return!w(e)||A(e)||P(e)||M(e)?e:K(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ye(mo),put:ye(mo),patch:ye(mo)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},n=!1;this.useApplyAsync=function(e){return y(e)?(n=!!e,this):n};var r=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(i,a,s,u,l,c,d,f){function h(n){function r(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function a(){i.$$completeOutstandingRequest(m)}function s(e,t){var n,r={};return o(e,function(e,i){D(e)?null!=(n=e(t))&&(r[i]=n):r[i]=e}),r}function u(t){var n=t.headers,r=jt(t.data,Ut(n),void 0,t.transformRequest);return b(r)&&o(n,function(e,t){"content-type"===Yr(t)&&delete n[t]}),b(t.withCredentials)&&!b(e.withCredentials)&&(t.withCredentials=e.withCredentials),g(t,r).then(l,l)}function l(e){var t=p({},e);return t.data=jt(e.data,e.headers,e.status,h.transformResponse),Vt(e.status)?t:c.reject(t)}if(!w(n))throw t("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!C(f.valueOf(n.url)))throw t("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",n.url);var h=p({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer,jsonpCallbackParam:e.jsonpCallbackParam},n);h.headers=function(t){var n,r,i,o=e.headers,a=p({},t.headers);o=p({},o.common,o[Yr(t.method)]);e:for(n in o){r=Yr(n);for(i in a)if(Yr(i)===r)continue e;a[n]=o[n]}return s(a,ye(t))}(n),h.method=Gr(h.method),h.paramSerializer=C(h.paramSerializer)?d.get(h.paramSerializer):h.paramSerializer,i.$$incOutstandingRequestCount();var $=[],v=[],y=c.resolve(h);return o(k,function(e){(e.request||e.requestError)&&$.unshift(e.request,e.requestError),(e.response||e.responseError)&&v.push(e.response,e.responseError)}),y=r(y,$),y=y.then(u),y=r(y,v),y=y.finally(a)}function g(t,r){function i(e){if(e){var t={};return o(e,function(e,r){t[r]=function(t){function r(){e(t)}n?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),t}}function u(e,t,r,i){function o(){p(t,e,r,i)}g&&(Vt(e)?g.put(T,[e,t,Nt(r),i]):g.remove(T)),n?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function p(e,n,r,i){n=n>=-1?n:0,(Vt(n)?S.resolve:S.reject)({data:e,status:n,headers:Ut(r),config:t,statusText:i})}function d(e){p(e.data,e.status,ye(e.headers()),e.statusText)}function m(){var e=h.pendingRequests.indexOf(t);-1!==e&&h.pendingRequests.splice(e,1)}var g,k,S=c.defer(),D=S.promise,E=t.headers,O="jsonp"===Yr(t.method),T=t.url;if(O?T=f.getTrustedResourceUrl(T):C(T)||(T=f.valueOf(T)),T=$(T,t.paramSerializer(t.params)),O&&(T=v(T,t.jsonpCallbackParam)),h.pendingRequests.push(t),D.then(m,m),!t.cache&&!e.cache||!1===t.cache||"GET"!==t.method&&"JSONP"!==t.method||(g=w(t.cache)?t.cache:w(e.cache)?e.cache:x),g&&(k=g.get(T),y(k)?N(k)?k.then(d,d):ci(k)?p(k[1],k[0],ye(k[2]),k[3]):p(k,200,{},"OK"):g.put(T,D)),b(k)){var A=zn(t.url)?s()[t.xsrfCookieName||e.xsrfCookieName]:void 0;A&&(E[t.xsrfHeaderName||e.xsrfHeaderName]=A),a(t.method,T,r,u,E,t.timeout,t.withCredentials,t.responseType,i(t.eventHandlers),i(t.uploadEventHandlers))}return D}function $(e,t){return t.length>0&&(e+=(-1===e.indexOf("?")?"?":"&")+t),e}function v(e,t){if(/[&?][^=]+=JSON_CALLBACK/.test(e))throw bo("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',e);if(new RegExp("[&?]"+t+"=").test(e))throw bo("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',t,e);return e+=(-1===e.indexOf("?")?"?":"&")+t+"=JSON_CALLBACK"}var x=u("$http");e.paramSerializer=C(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var k=[];return o(r,function(e){k.unshift(C(e)?d.get(e):d.invoke(e))}),h.pendingRequests=[],function(e){o(arguments,function(e){h[e]=function(t,n){return h(p({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){o(arguments,function(e){h[e]=function(t,n,r){return h(p({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),h.defaults=e,h}]}function Rt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function qt(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return Ft(e,r,e.defer,t,n[0])}]}function Ft(e,t,n,r,i){function a(e,t,n){e=e.replace("JSON_CALLBACK",t);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";e&&("load"!==e.type||r.wasCalled(t)||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,u,l,c,p,d,f,h,m){function g(){w&&w(),x&&x.abort()}function $(e,t,r,i,o){y(k)&&n.cancel(k),w=x=null,e(t,r,i,o)}if(s=s||e.url(),"jsonp"===Yr(i))var v=r.createCallback(s),w=a(s,v,function(e,t){var n=200===e&&r.getResponse(v);$(l,e,n,"",t),r.removeCallback(v)});else{var x=t(i,s);x.open(i,s,!0),o(c,function(e,t){y(e)&&x.setRequestHeader(t,e)}),x.onload=function(){var e=x.statusText||"",t="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=t?200:"file"===Vn(s).protocol?404:0),$(l,n,t,x.getAllResponseHeaders(),e)};var C=function(){$(l,-1,null,null,"")};if(x.onerror=C,x.onabort=C,x.ontimeout=C,o(h,function(e,t){x.addEventListener(t,e)}),o(m,function(e,t){x.upload.addEventListener(t,e)}),d&&(x.withCredentials=!0),f)try{x.responseType=f}catch(e){if("json"!==f)throw e}x.send(b(u)?null:u)}if(p>0)var k=n(g,p);else N(p)&&p.then(g)}}function Lt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(d,e).replace(f,t)}function s(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function u(o,u,d,f){function h(e){try{return e=A(e),f&&!y(e)?e:ve(e)}catch(e){r(yo.interr(o,e))}}if(!o.length||-1===o.indexOf(e)){var m;if(!u){m=$(a(o)),m.exp=o,m.expressions=[],m.$$watchDelegate=s}return m}f=!!f;for(var g,v,w,x=0,C=[],k=[],S=o.length,E=[],O=[];x<S;){if(-1===(g=o.indexOf(e,x))||-1===(v=o.indexOf(t,g+l))){x!==S&&E.push(a(o.substring(x)));break}x!==g&&E.push(a(o.substring(x,g))),w=o.substring(g+l,v),C.push(w),k.push(n(w,h)),x=v+c,O.push(E.length),E.push("")}if(d&&E.length>1&&yo.throwNoconcat(o),!u||C.length){var T=function(e){for(var t=0,n=C.length;t<n;t++){if(f&&b(e[t]))return;E[O[t]]=e[t]}return E.join("")},A=function(e){return d?i.getTrusted(d,e):i.valueOf(e)};return p(function(e){var t=0,n=C.length,i=new Array(n);try{for(;t<n;t++)i[t]=k[t](e);return T(i)}catch(e){r(yo.interr(o,e))}},{exp:o,expressions:C,$$watchDelegate:function(e,t){var n;return e.$watchGroup(k,function(r,i){var o=T(r);D(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var l=e.length,c=t.length,d=new RegExp(e.replace(/./g,o),"g"),f=new RegExp(t.replace(/./g,o),"g");return u.startSymbol=function(){return e},u.endSymbol=function(){return t},u}]}function _t(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(e,t,n,r,i){function o(o,s,u,l){function c(){p?o.apply(null,d):o(m)}var p=arguments.length>4,d=p?W(arguments,4):[],f=t.setInterval,h=t.clearInterval,m=0,g=y(l)&&!l,$=(g?r:n).defer(),v=$.promise;return u=y(u)?u:0,v.$$intervalId=f(function(){g?i.defer(c):e.$evalAsync(c),$.notify(m++),u>0&&m>=u&&($.resolve(m),h(v.$$intervalId),delete a[v.$$intervalId]),g||e.$apply()},s),a[v.$$intervalId]=$,v}var a={};return o.cancel=function(e){return!!(e&&e.$$intervalId in a)&&(a[e.$$intervalId].promise.catch(m),a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0)},o}]}function Ht(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ie(t[n]);return t.join("/")}function Bt(e,t){var n=Vn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||Co[n.protocol]||null}function Wt(e,t){if(So.test(e))throw ko("badpath",'Invalid url "{0}".',e);var n="/"!==e.charAt(0);n&&(e="/"+e);var r=Vn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ne(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!==t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Yt(e,t){return e.slice(0,t.length)===t}function Gt(e,t){if(Yt(t,e))return t.substr(e.length)}function Kt(e){var t=e.indexOf("#");return-1===t?e:e.substr(0,t)}function Jt(e){return e.replace(/(#.+)|#$/,"$1")}function Zt(e){return e.substr(0,Kt(e).lastIndexOf("/")+1)}function Qt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Xt(e,t,n){this.$$html5=!0,n=n||"",Bt(e,this),this.$$parse=function(e){var n=Gt(t,e);if(!C(n))throw ko("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);Wt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=re(this.$$search),n=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return y(o=Gt(e,r))?(a=o,s=n&&y(o=Gt(n,o))?t+(Gt("/",o)||o):e+a):y(o=Gt(t,r))?s=t+o:t===r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function en(e,t,n){Bt(e,this),this.$$parse=function(r){var i,o=Gt(e,r)||Gt(t,r);b(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",b(o)&&(e=r,this.replace())):(i=Gt(n,o),b(i)&&(i=o)),Wt(i,this),this.$$path=function(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return Yt(t,n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}(this.$$path,i,e),this.$$compose()},this.$$compose=function(){var t=re(this.$$search),r=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(t,n){return Kt(e)===Kt(t)&&(this.$$parse(t),!0)}}function tn(e,t,n){this.$$html5=!0,en.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e===Kt(r)?o=r:(a=Gt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=re(this.$$search),r=this.$$hash?"#"+ie(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url,this.$$urlUpdatedByLocation=!0}}function nn(e){return function(){return this[e]}}function rn(e,t){return function(n){return b(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function on(){var e="!",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return y(t)?(e=t,this):e},this.html5Mode=function(e){return I(e)?(t.enabled=e,this):w(e)?(I(e.enabled)&&(t.enabled=e.enabled),I(e.requireBase)&&(t.requireBase=e.requireBase),(I(e.rewriteLinks)||C(e.rewriteLinks))&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){
function s(e,t,n){var i=l.url(),o=l.$$state;try{r.url(e,t,n),l.$$state=r.state()}catch(e){throw l.url(i),l.$$state=o,e}}function u(e,t){n.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}var l,c,p,d=r.baseHref(),f=r.url();if(t.enabled){if(!d&&t.requireBase)throw ko("nobase","$location in HTML5 mode requires a <base> tag to be present!");p=Qt(f)+(d||"/"),c=i.history?Xt:tn}else p=Kt(f),c=en;var h=Zt(p);l=new c(p,h,"#"+e),l.$$parseLinkUrl(f,f),l.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(e){var i=t.rewriteLinks;if(i&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!==e.which&&2!==e.button){for(var s=Qr(e.target);"a"!==R(s[0]);)if(s[0]===o[0]||!(s=s.parent())[0])return;if(!C(i)||!b(s.attr(i))){var u=s.prop("href"),c=s.attr("href")||s.attr("xlink:href");w(u)&&"[object SVGAnimatedString]"===u.toString()&&(u=Vn(u.animVal).href),m.test(u)||!u||s.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(u,c)&&(e.preventDefault(),l.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),Jt(l.absUrl())!==Jt(f)&&r.url(l.absUrl(),!0);var g=!0;return r.onUrlChange(function(e,t){if(!Yt(e,h))return void(a.location.href=e);n.$evalAsync(function(){var r,i=l.absUrl(),o=l.$$state;e=Jt(e),l.$$parse(e),l.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,l.absUrl()===e&&(r?(l.$$parse(i),l.$$state=o,s(i,!1,o)):(g=!1,u(i,o)))}),n.$$phase||n.$digest()}),n.$watch(function(){if(g||l.$$urlUpdatedByLocation){l.$$urlUpdatedByLocation=!1;var e=Jt(r.url()),t=Jt(l.absUrl()),o=r.state(),a=l.$$replace,c=e!==t||l.$$html5&&i.history&&o!==l.$$state;(g||c)&&(g=!1,n.$evalAsync(function(){var t=l.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,l.$$state,o).defaultPrevented;l.absUrl()===t&&(r?(l.$$parse(e),l.$$state=o):(c&&s(t,a,o===l.$$state?null:l.$$state),u(e,o)))}))}l.$$replace=!1}),l}]}function an(){var e=!0,t=this;this.debugEnabled=function(t){return y(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack&&a?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||m,a=!1;try{a=!!i.apply}catch(e){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}var a=Zr||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function sn(e){return e+""}function un(e,t){return void 0!==e?e:t}function ln(e,t){return void 0===e?t:void 0===t?e:e+t}function cn(e,t){return!e(t).$stateful}function pn(e,t){var n,r,i;switch(e.type){case Po.Program:n=!0,o(e.body,function(e){pn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case Po.Literal:e.constant=!0,e.toWatch=[];break;case Po.UnaryExpression:pn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case Po.BinaryExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case Po.LogicalExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case Po.ConditionalExpression:pn(e.test,t),pn(e.alternate,t),pn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case Po.Identifier:e.constant=!1,e.toWatch=[e];break;case Po.MemberExpression:pn(e.object,t),e.computed&&pn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case Po.CallExpression:i=!!e.filter&&cn(t,e.callee.name),n=i,r=[],o(e.arguments,function(e){pn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=i?r:[e];break;case Po.AssignmentExpression:pn(e.left,t),pn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case Po.ArrayExpression:n=!0,r=[],o(e.elements,function(e){pn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case Po.ObjectExpression:n=!0,r=[],o(e.properties,function(e){pn(e.value,t),n=n&&e.value.constant&&!e.computed,e.value.constant||r.push.apply(r,e.value.toWatch),e.computed&&(pn(e.key,t),e.key.constant||r.push.apply(r,e.key.toWatch))}),e.constant=n,e.toWatch=r;break;case Po.ThisExpression:case Po.LocalsExpression:e.constant=!1,e.toWatch=[]}}function dn(e){if(1===e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function fn(e){return e.type===Po.Identifier||e.type===Po.MemberExpression}function hn(e){if(1===e.body.length&&fn(e.body[0].expression))return{type:Po.AssignmentExpression,left:e.body[0].expression,right:{type:Po.NGValueParameter},operator:"="}}function mn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===Po.Literal||e.body[0].expression.type===Po.ArrayExpression||e.body[0].expression.type===Po.ObjectExpression)}function gn(e){return e.constant}function $n(e){this.$filter=e}function vn(e){this.$filter=e}function bn(e,t,n){this.ast=new Po(e,n),this.astCompiler=n.csp?new vn(t):new $n(t)}function yn(e){return D(e.valueOf)?e.valueOf():Oo.call(e)}function wn(){var e,t,n=$e(),r={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){r[e]=t},this.setIdentifierFns=function(n,r){return e=n,t=r,this},this.$get=["$filter",function(i){function a(e,t){var r,o,a;switch(typeof e){case"string":if(e=e.trim(),a=e,!(r=n[a])){":"===e.charAt(0)&&":"===e.charAt(1)&&(o=!0,e=e.substring(2));r=new bn(new Mo(h),i,h).parse(e),r.constant?r.$$watchDelegate=p:o?(r.oneTime=!0,r.$$watchDelegate=l):r.inputs&&(r.$$watchDelegate=u),n[a]=r}return d(r,t);case"function":return d(e,t);default:return d(m,t)}}function s(e,t,n){return null==e||null==t?e===t:!("object"==typeof e&&"object"==typeof(e=yn(e))&&!n)&&(e===t||e!==e&&t!==t)}function u(e,t,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],e.$watch(function(e){var t=a(e);return s(t,u,r.literal)||(o=r(e,void 0,void 0,[t]),u=t&&yn(t)),o},t,n,i)}for(var l=[],c=[],p=0,d=a.length;p<d;p++)l[p]=s,c[p]=null;return e.$watch(function(e){for(var t=!1,n=0,i=a.length;n<i;n++){var u=a[n](e);(t||(t=!s(u,l[n],r.literal)))&&(c[n]=u,l[n]=u&&yn(u))}return t&&(o=r(e,void 0,void 0,c)),o},t,n,i)}function l(e,t,n,r,i){function o(e){return r(e)}function a(e,n,r){l=e,D(t)&&t(e,n,r),p(e)&&r.$$postDigest(function(){p(l)&&s()})}var s,l,p=r.literal?c:y;return s=r.inputs?u(e,a,n,r,i):e.$watch(o,a,n)}function c(e){var t=!0;return o(e,function(e){y(e)||(t=!1)}),t}function p(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function d(e,t){function n(n,r,i,a){var s=o&&a?a[0]:e(n,r,i,a);return t(s,n,r)}function r(n,r,i,s){var u=o&&s?s[0]:e(n,r,i,s),l=t(u,n,r);return a(u)?l:u}if(!t)return e;var i=e.$$watchDelegate,o=!1,a=e.literal?c:y,s=e.oneTime?r:n;return s.literal=e.literal,s.oneTime=e.oneTime,o=!e.inputs,i&&i!==u?(s.$$watchDelegate=i,s.inputs=e.inputs):t.$stateful||(s.$$watchDelegate=u,s.inputs=e.inputs?e.inputs:[e]),s}var f=hi().noUnsafeEval,h={csp:f,literals:L(r),isIdentifierStart:D(e)&&e,isIdentifierContinue:D(t)&&t};return a}]}function xn(){var e=!0;this.$get=["$rootScope","$exceptionHandler",function(t,n){return kn(function(e){t.$evalAsync(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return y(t)?(e=t,this):e}}function Cn(){var e=!0;this.$get=["$browser","$exceptionHandler",function(t,n){return kn(function(e){t.defer(e)},n,e)}],this.errorOnUnhandledRejections=function(t){return y(t)?(e=t,this):e}}function kn(e,n,r){function i(){return new a}function a(){var e=this.promise=new s;this.resolve=function(t){d(e,t)},this.reject=function(t){h(e,t)},this.notify=function(t){g(e,t)}}function s(){this.$$state={status:0}}function u(t){var n,i,o;o=t.pending,t.processScheduled=!1,t.pending=void 0;try{for(var a=0,s=o.length;a<s;++a){t.pur=!0,i=o[a][0],n=o[a][t.status];try{D(n)?d(i,n(t.value)):1===t.status?d(i,t.value):h(i,t.value)}catch(e){h(i,e)}}}finally{--E,r&&0===E&&e(l)}}function l(){for(;!E&&O.length;){var e=O.shift();if(!e.pur){e.pur=!0;var t="Possibly unhandled rejection: "+xe(e.value);e.value instanceof Error?n(e.value,t):n(t)}}}function c(t){!r||t.pending||2!==t.status||t.pur||(0===E&&0===O.length&&e(l),O.push(t)),!t.processScheduled&&t.pending&&(t.processScheduled=!0,++E,e(function(){u(t)}))}function d(e,t){e.$$state.status||(t===e?m(e,S("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):f(e,t))}function f(e,t){function n(t){a||(a=!0,f(e,t))}function r(t){a||(a=!0,m(e,t))}function i(t){g(e,t)}var o,a=!1;try{(w(t)||D(t))&&(o=t.then),D(o)?(e.$$state.status=-1,o.call(t,n,r,i)):(e.$$state.value=t,e.$$state.status=1,c(e.$$state))}catch(e){r(e)}}function h(e,t){e.$$state.status||m(e,t)}function m(e,t){e.$$state.value=t,e.$$state.status=2,c(e.$$state)}function g(t,r){var i=t.$$state.pending;t.$$state.status<=0&&i&&i.length&&e(function(){for(var e,t,o=0,a=i.length;o<a;o++){t=i[o][0],e=i[o][3];try{g(t,D(e)?e(r):r)}catch(e){n(e)}}})}function $(e){var t=new s;return h(t,e),t}function v(e,t,n){var r=null;try{D(n)&&(r=n())}catch(e){return $(e)}return N(r)?r.then(function(){return t(e)},$):t(e)}function y(e,t,n,r){var i=new s;return d(i,e),i.then(t,n,r)}function x(e){var t=new s,n=0,r=ci(e)?[]:{};return o(e,function(e,i){n++,y(e).then(function(e){r[i]=e,--n||d(t,r)},function(e){h(t,e)})}),0===n&&d(t,r),t}function C(e){var t=i();return o(e,function(e){y(e).then(t.resolve,t.reject)}),t.promise}function k(e){function t(e){d(r,e)}function n(e){h(r,e)}if(!D(e))throw S("norslvr","Expected resolverFn, got '{0}'",e);var r=new s;return e(t,n),r}var S=t("$q",TypeError),E=0,O=[];p(s.prototype,{then:function(e,t,n){if(b(e)&&b(t)&&b(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&c(this.$$state),r},catch:function(e){return this.then(null,e)},finally:function(e,t){return this.then(function(t){return v(t,T,e)},function(t){return v(t,$,e)},t)}});var T=y;return k.prototype=s.prototype,k.defer=i,k.reject=$,k.when=y,k.resolve=T,k.all=x,k.race=C,k}function Sn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Dn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return t.prototype=e,t}var n=10,r=t("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(n=e),n},this.$get=["$exceptionHandler","$parse","$browser",function(t,l,c){function p(e){e.currentScope.$$destroyed=!0}function d(e){9===Zr&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function f(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function h(e){if(k.$$phase)throw r("inprog","{0} already in progress",k.$$phase);k.$$phase=e}function g(){k.$$phase=null}function $(e,t){do{e.$$watchersCount+=t}while(e=e.$parent)}function v(e,t,n){do{e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n]}while(e=e.$parent)}function y(){}function x(){for(;O.length;)try{O.shift()()}catch(e){t(e)}s=null}function C(){null===s&&(s=c.defer(function(){k.$apply(x)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!==this)&&r.$on("$destroy",p),r},$watch:function(e,t,n,r){var i=l(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:y,get:i,exp:r||e,eq:!!n};return a=null,D(t)||(u.fn=m),s||(s=o.$$watchers=[],s.$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,$(this,1),function(){var e=F(s,u);e>=0&&($(o,-1),e<s.$$digestWatchIndex&&s.$$digestWatchIndex--),a=null}},$watchGroup:function(e,t){function n(){u=!1,l?(l=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,u=!1,l=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(i,i,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s;if(!b(o)){if(w(o))if(i(o)){a!==f&&(a=f,g=a.length=0,p++),t=o.length,g!==t&&(p++,a.length=g=t);for(var u=0;u<t;u++)s=a[u],r=o[u],s!==s&&r!==r||s===r||(p++,a[u]=r)}else{a!==h&&(a=h={},g=0,p++),t=0;for(n in o)Br.call(o,n)&&(t++,r=o[n],s=a[n],n in a?s!==s&&r!==r||s===r||(p++,a[n]=r):(g++,a[n]=r,p++));if(g>t){p++;for(n in a)Br.call(o,n)||(g--,delete a[n])}}else a!==o&&(a=o,p++);return p}}function r(){if(m?(m=!1,t(o,o,u)):t(o,s,u),c)if(w(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)Br.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,c=t.length>1,p=0,d=l(e,n),f=[],h={},m=!0,g=0;return this.$watch(d,r)},$digest:function(){var e,i,o,u,l,p,d,f,m,$,v,b=n,w=this,C=[];h("$digest"),c.$$checkUrlChange(),this===k&&null!==s&&(c.defer.cancel(s),x()),a=null;do{d=!1,m=w;for(var O=0;O<S.length;O++){try{v=S[O],u=v.fn,u(v.scope,v.locals)}catch(e){t(e)}a=null}S.length=0;e:do{if(p=m.$$watchers)for(p.$$digestWatchIndex=p.length;p.$$digestWatchIndex--;)try{if(e=p[p.$$digestWatchIndex])if(l=e.get,(i=l(m))===(o=e.last)||(e.eq?H(i,o):li(i)&&li(o))){if(e===a){d=!1;break e}}else d=!0,a=e,e.last=e.eq?L(i,null):i,u=e.fn,u(i,o===y?i:o,m),b<5&&($=4-b,C[$]||(C[$]=[]),C[$].push({msg:D(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:i,oldVal:o}))}catch(e){t(e)}if(!(f=m.$$watchersCount&&m.$$childHead||m!==w&&m.$$nextSibling))for(;m!==w&&!(f=m.$$nextSibling);)m=m.$parent}while(m=f);if((d||S.length)&&!b--)throw g(),r("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",n,C)}while(d||S.length);for(g();T<E.length;)try{E[T++]()}catch(e){t(e)}E.length=T=0,c.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===k&&c.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var t in this.$$listenerCount)v(this,this.$$listenerCount[t],t);e&&e.$$childHead===this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail===this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=m,this.$on=this.$watch=this.$watchGroup=function(){return m},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){k.$$phase||S.length||c.defer(function(){S.length&&k.$digest()}),S.push({scope:this,fn:l(e),locals:t})},$$postDigest:function(e){E.push(e)},$apply:function(e){try{h("$apply");try{return this.$eval(e)}finally{g()}}catch(e){t(e)}finally{try{k.$digest()}catch(e){throw t(e),e}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&O.push(t),e=l(e),C()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do{r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++}while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,v(i,1,e))}},$emit:function(e,n){var r,i,o,a=[],s=this,u=!1,l={name:e,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){l.defaultPrevented=!0},defaultPrevented:!1},c=B([l],arguments,1);do{for(r=s.$$listeners[e]||a,l.currentScope=s,i=0,o=r.length;i<o;i++)if(r[i])try{r[i].apply(null,c)}catch(e){t(e)}else r.splice(i,1),i--,o--;if(u)return l.currentScope=null,l;s=s.$parent}while(s);return l.currentScope=null,l},$broadcast:function(e,n){var r=this,i=r,o=r,a={name:e,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[e])return a;for(var s,u,l,c=B([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[e]||[],u=0,l=s.length;u<l;u++)if(s[u])try{s[u].apply(null,c)}catch(e){t(e)}else s.splice(u,1),u--,l--;if(!(o=i.$$listenerCount[e]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var k=new f,S=k.$$asyncQueue=[],E=k.$$postDigestQueue=[],O=k.$$applyAsyncQueue=[],T=0;return k}]}function En(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=Vn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function On(e){return e.replace(Uo,Se)}function Tn(e){if("self"===e)return e;if(C(e)){if(e.indexOf("***")>-1)throw Io("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=fi(e).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+e+"$")}if(E(e))return new RegExp("^"+e.source+"$");throw Io("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function An(e){var t=[];return y(e)&&o(e,function(e){t.push(Tn(e))}),t}function Mn(){this.SCE_CONTEXTS=No;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=An(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=An(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?zn(t):!!e.exec(t.href)}function i(n){var i,o,a=Vn(n.toString()),s=!1;for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=p.hasOwnProperty(e)?p[e]:null;if(!n)throw Io("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||b(t)||""===t)return t;if("string"!=typeof t)throw Io("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof c?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||b(t)||""===t)return t;var n=p.hasOwnProperty(e)?p[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===No.RESOURCE_URL){if(i(t))return t;throw Io("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===No.HTML)return l(t);throw Io("unsafe","Attempting to use an unsafe value in a safe context.")}var l=function(e){throw Io("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(l=n.get("$sanitize"));var c=o(),p={};return p[No.HTML]=o(c),p[No.CSS]=o(c),p[No.URL]=o(c),p[No.JS]=o(c),p[No.RESOURCE_URL]=o(p[No.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Pn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&Zr<8)throw Io("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=ye(No);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=g),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(No,function(e,t){var n=Yr(t);r[On("parse_as_"+n)]=function(t){return i(e,t)},r[On("get_trusted_"+n)]=function(t){return a(e,t)},r[On("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function In(){this.$get=["$window","$document",function(e,t){var n={},r=e.nw&&e.nw.process,i=!r&&e.chrome&&(e.chrome.app&&e.chrome.app.runtime||!e.chrome.app&&e.chrome.runtime&&e.chrome.runtime.id),o=!i&&e.history&&e.history.pushState,a=f((/android (\d+)/.exec(Yr((e.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((e.navigator||{}).userAgent),u=t[0]||{},l=u.body&&u.body.style,c=!1,p=!1;return l&&(c=!!("transition"in l||"webkitTransition"in l),p=!!("animation"in l||"webkitAnimation"in l)),{history:!(!o||a<4||s),hasEvent:function(e){if("input"===e&&Zr)return!1;if(b(n[e])){var t=u.createElement("div");n[e]="on"+e in t}return n[e]},csp:hi(),transitions:c,animations:p,android:a}}]}function Nn(){var e;this.httpOptions=function(t){return t?(e=t,this):e},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(t,n,r,i,o){function a(s,u){function l(e){return u||(e=jo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,e.status,e.statusText),t(e)),i.reject(e)}a.totalPendingRequests++,C(s)&&!b(n.get(s))||(s=o.getTrustedResourceUrl(s));var c=r.defaults&&r.defaults.transformResponse;return ci(c)?c=c.filter(function(e){return e!==Pt}):c===Pt&&(c=null),r.get(s,p({cache:n,transformResponse:c},e)).finally(function(){a.totalPendingRequests--}).then(function(e){return n.put(s,e.data),e.data},l)}return a.totalPendingRequests=0,a}]}function Un(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=si.element(e).data("$binding");r&&o(r,function(r){if(n){new RegExp("(^|\\s)"+fi(t)+"(\\s|\\||$)").test(r)&&i.push(e)}else-1!==r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function jn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){D(o)||(u=s,s=o,o=m);var l,c=W(arguments,3),p=y(u)&&!u,d=(p?r:n).defer(),f=d.promise;return l=t.defer(function(){try{d.resolve(o.apply(null,c))}catch(e){d.reject(e),i(e)}finally{delete a[f.$$timeoutId]}p||e.$apply()},s),f.$$timeoutId=l,a[l]=d,f}var a={};return o.cancel=function(e){return!!(e&&e.$$timeoutId in a)&&(a[e.$$timeoutId].promise.catch(m),a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId))},o}]}function Vn(e){var t=e;return Zr&&(Vo.setAttribute("href",t),t=Vo.href),Vo.setAttribute("href",t),{href:Vo.href,protocol:Vo.protocol?Vo.protocol.replace(/:$/,""):"",host:Vo.host,search:Vo.search?Vo.search.replace(/^\?/,""):"",hash:Vo.hash?Vo.hash.replace(/^#/,""):"",hostname:Vo.hostname,port:Vo.port,pathname:"/"===Vo.pathname.charAt(0)?Vo.pathname:"/"+Vo.pathname}}function zn(e){var t=C(e)?Vn(e):e;return t.protocol===zo.protocol&&t.host===zo.host}function Rn(){this.$get=$(e)}function qn(e){function t(e){try{return e.cookie||""}catch(e){return""}}function n(e){try{return decodeURIComponent(e)}catch(t){return e}}var r=e[0]||{},i={},o="";return function(){var e,a,s,u,l,c=t(r);if(c!==o)for(o=c,e=o.split("; "),i={},s=0;s<e.length;s++)a=e[s],(u=a.indexOf("="))>0&&(l=n(a.substring(0,u)),b(i[l])&&(i[l]=n(a.substring(u+1))));return i}}function Fn(){this.$get=qn}function Ln(e){function t(r,i){if(w(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Yn),t("date",ur),t("filter",_n),t("json",lr),t("limitTo",cr),t("lowercase",Bo),t("number",Gn),t("orderBy",dr),t("uppercase",Wo)}function _n(){return function(e,n,r,o){if(!i(e)){if(null==e)return e;throw t("filter")("notarray","Expected array but received: {0}",e)}o=o||"$";var a,s,u=Wn(n);switch(u){case"function":a=n;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Hn(n,r,o,s);break;default:return e}return Array.prototype.filter.call(e,a)}}function Hn(e,t,n,r){var i=w(e)&&n in e;return!0===t?t=H:D(t)||(t=function(e,t){return!b(e)&&(null===e||null===t?e===t:!(w(t)||w(e)&&!v(e))&&(e=Yr(""+e),t=Yr(""+t),-1!==e.indexOf(t)))}),function(o){return i&&!w(o)?Bn(o,e[n],t,n,!1):Bn(o,e,t,n,r)}}function Bn(e,t,n,r,i,o){var a=Wn(e),s=Wn(t);if("string"===s&&"!"===t.charAt(0))return!Bn(e,t.substring(1),n,r,i);if(ci(e))return e.some(function(e){return Bn(e,t,n,r,i)});switch(a){case"object":var u;if(i){for(u in e)if(u.charAt&&"$"!==u.charAt(0)&&Bn(e[u],t,n,r,!0))return!0;return!o&&Bn(e,t,n,r,!1)}if("object"===s){for(u in t){var l=t[u];if(!D(l)&&!b(l)){var c=u===r;if(!Bn(c?e:e[u],l,n,r,c,c))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Wn(e){return null===e?"null":typeof e}function Yn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return b(n)&&(n=t.CURRENCY_SYM),b(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Zn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Gn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Zn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function Kn(e){var t,n,r,i,o,a=0;for((n=e.indexOf(qo))>-1&&(e=e.replace(qo,"")),(r=e.search(/e/i))>0?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;e.charAt(r)===Fo;r++);if(r===(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)===Fo;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return n>Ro&&(t=t.splice(0,Ro-1),a=n-1,n=1),{d:t,e:a,i:n}}function Jn(e,t,n,r){var i=e.d,o=i.length-e.i;t=b(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0){i.splice(Math.max(e.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var l=1;l<a;l++)i[l]=0}if(s>=5)if(a-1<0){for(var c=0;c>a;c--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var p=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);p&&(i.unshift(p),e.i++)}function Zn(e,t,n,r,i){if(!C(e)&&!k(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,u=Math.abs(e)+"",l="";if(a)l="∞";else{o=Kn(u),Jn(o,i,t.minFrac,t.maxFrac);var c=o.d,p=o.i,d=o.e,f=[];for(s=c.reduce(function(e,t){return e&&!t},!0);p<0;)c.unshift(0),p++;p>0?f=c.splice(p,c.length):(f=c,c=[0]);var h=[];for(c.length>=t.lgSize&&h.unshift(c.splice(-t.lgSize,c.length).join(""));c.length>t.gSize;)h.unshift(c.splice(-t.gSize,c.length).join(""));c.length&&h.unshift(c.join("")),l=h.join(n),f.length&&(l+=r+f.join("")),d&&(l+="e+"+d)}return e<0&&!s?t.negPre+l+t.negSuf:t.posPre+l+t.posSuf}function Qn(e,t,n,r){var i="";for((e<0||r&&e<=0)&&(r?e=1-e:(e=-e,i="-")),e=""+e;e.length<t;)e=Fo+e;return n&&(e=e.substr(e.length-t)),i+e}function Xn(e,t,n,r,i){return n=n||0,function(o){var a=o["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&-12===n&&(a=12),Qn(a,t,r,i)}}function er(e,t,n){return function(r,i){var o=r["get"+e]();return i[Gr((n?"STANDALONE":"")+(t?"SHORT":"")+e)][o]}}function tr(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Qn(Math[r>0?"floor":"ceil"](r/60),2)+Qn(Math.abs(r%60),2)}function nr(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(t<=4?5:12)-t)}function rr(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function ir(e){return function(t){var n=nr(t.getFullYear()),r=rr(t),i=+r-+n;return Qn(1+Math.round(i/6048e5),e)}}function or(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function ar(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function sr(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function ur(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=f(t[9]+t[10]),o=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var u=f(t[4]||0)-i,l=f(t[5]||0)-o,c=f(t[6]||0),p=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,l,c,p),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,C(n)&&(n=Ho.test(n)?f(n):t(n)),k(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;r;)s=_o.exec(r),s?(l=B(l,s,1),r=l.pop()):(l.push(r),r=null);var c=n.getTimezoneOffset();return i&&(c=Z(i,c),n=X(n,i,!0)),o(l,function(t){a=Lo[t],u+=a?a(n,e.DATETIME_FORMATS,c):"''"===t?"'":t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function lr(){return function(e,t){return b(t)&&(t=2),K(e,t)}}function cr(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):f(t),li(t)?e:(k(e)&&(e=e.toString()),i(e)?(n=!n||isNaN(n)?0:f(n),n=n<0?Math.max(0,e.length+n):n,t>=0?pr(e,n,n+t):0===n?pr(e,t,e.length):pr(e,Math.max(0,n+t),n)):e)}}function pr(e,t,n){return C(e)?e.slice(t,n):ti.call(e,t,n)}function dr(e){function n(t){return t.map(function(t){var n=1,r=g;if(D(t))r=t;else if(C(t)&&("+"!==t.charAt(0)&&"-"!==t.charAt(0)||(n="-"===t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(r=e(t),r.constant))){var i=r();r=function(e){return e[i]}}return{get:r,descending:n}})}function r(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function o(e){return D(e.valueOf)&&(e=e.valueOf(),r(e))?e:(v(e)&&(e=e.toString(),r(e)),e)}function a(e,t){var n=typeof e;return null===e?(n="string",e="null"):"object"===n&&(e=o(e)),{value:e,type:n,index:t}}function s(e,t){var n=0,r=e.type,i=t.type;if(r===i){var o=e.value,a=t.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(w(o)&&(o=e.index),w(a)&&(a=t.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(e,r,o,u){function l(e,t){return{value:e,tieBreaker:{value:t,type:"number",index:t},predicateValues:p.map(function(n){return a(n.get(e),t)})}}function c(e,t){for(var n=0,r=p.length;n<r;n++){var i=f(e.predicateValues[n],t.predicateValues[n]);if(i)return i*p[n].descending*d}return f(e.tieBreaker,t.tieBreaker)*d}if(null==e)return e;if(!i(e))throw t("orderBy")("notarray","Expected array but received: {0}",e);ci(r)||(r=[r]),0===r.length&&(r=["+"]);var p=n(r),d=o?-1:1,f=D(u)?u:s,h=Array.prototype.map.call(e,l);return h.sort(c),e=h.map(function(e){return e.value})}}function fr(e){return D(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function hr(e,t){e.$name=t}function mr(e,t,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(t.name||t.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=Ko,this.$$element=e,this.$$animate=r,gr(this)}function gr(e){e.$$classCache={},e.$$classCache[Aa]=!(e.$$classCache[Ta]=e.$$element.hasClass(Ta))}function $r(e){function t(e,t,n,r){e[t]||(e[t]={}),a(e[t],n,r)}function n(e,t,n,r){e[t]&&s(e[t],n,r),vr(e[t])&&(e[t]=void 0)}function r(e,t,n){n&&!e.$$classCache[t]?(e.$$animate.addClass(e.$$element,t),
e.$$classCache[t]=!0):!n&&e.$$classCache[t]&&(e.$$animate.removeClass(e.$$element,t),e.$$classCache[t]=!1)}function i(e,t,n){t=t?"-"+pe(t,"-"):"",r(e,Ta+t,!0===n),r(e,Aa+t,!1===n)}var o=e.clazz,a=e.set,s=e.unset;o.prototype.$setValidity=function(e,o,u){b(o)?t(this,"$pending",e,u):n(this,"$pending",e,u),I(o)?o?(s(this.$error,e,u),a(this.$$success,e,u)):(a(this.$error,e,u),s(this.$$success,e,u)):(s(this.$error,e,u),s(this.$$success,e,u)),this.$pending?(r(this,Jo,!0),this.$valid=this.$invalid=void 0,i(this,"",null)):(r(this,Jo,!1),this.$valid=vr(this.$error),this.$invalid=!this.$valid,i(this,"",this.$valid));var l;l=this.$pending&&this.$pending[e]?void 0:!this.$error[e]&&(!!this.$$success[e]||null),i(this,e,l),this.$$parentForm.$setValidity(e,l,this)}}function vr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function br(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function yr(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r)}function wr(e,t,n,r,i,o){var a=Yr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(){s=!0}),t.on("compositionend",function(){s=!1,l()})}var u,l=function(e){if(u&&(o.defer.cancel(u),u=null),!s){var i=t.val(),l=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=di(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,l)}};if(i.hasEvent("input"))t.on("input",l);else{var c=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||l(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&t<19||37<=t&&t<=40||c(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",c)}t.on("change",l),ua[a]&&r.$$hasNativeValidators&&a===n.type&&t.on(sa,function(e){if(!u){var t=this[Hr],n=t.badInput,r=t.typeMismatch;u=o.defer(function(){u=null,t.badInput===n&&t.typeMismatch===r||l(e)})}}),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function xr(e,t){if(S(e))return e;if(C(e)){oa.lastIndex=0;var n=oa.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,l=nr(r),c=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,l.getDate()+c,o,a,s,u)}}return NaN}function Cr(e,t){return function(n,r){var i,a;if(S(n))return n;if(C(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),ea.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function kr(e,t,n,r){return function(i,o,a,s,u,l,c){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return y(e)&&!S(e)?n(e)||void 0:e}Sr(i,o,a,s),wr(i,o,a,s,u,l);var f,h=s&&s.$options.getOption("timezone");if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var r=n(e,f);return h&&(r=X(r,h)),r}}),s.$formatters.push(function(e){if(e&&!S(e))throw Ia("datefmt","Expected `{0}` to be a date",e);return p(e)?(f=e,f&&h&&(f=X(f,h,!0)),c("date")(e,r,h)):(f=null,"")}),y(a.min)||a.ngMin){var m;s.$validators.min=function(e){return!p(e)||b(m)||n(e)>=m},a.$observe("min",function(e){m=d(e),s.$validate()})}if(y(a.max)||a.ngMax){var g;s.$validators.max=function(e){return!p(e)||b(g)||n(e)<=g},a.$observe("max",function(e){g=d(e),s.$validate()})}}}function Sr(e,t,n,r){var i=t[0];(r.$$hasNativeValidators=w(i.validity))&&r.$parsers.push(function(e){var n=t.prop(Hr)||{};return n.badInput||n.typeMismatch?void 0:e})}function Dr(e){e.$$parserName="number",e.$parsers.push(function(t){return e.$isEmpty(t)?null:ra.test(t)?parseFloat(t):void 0}),e.$formatters.push(function(t){if(!e.$isEmpty(t)){if(!k(t))throw Ia("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t})}function Er(e){return y(e)&&!k(e)&&(e=parseFloat(e)),li(e)?void 0:e}function Or(e){return(0|e)===e}function Tr(e){var t=e.toString(),n=t.indexOf(".");if(-1===n){if(-1<e&&e<1){var r=/e-(\d+)$/.exec(t);if(r)return Number(r[1])}return 0}return t.length-n-1}function Ar(e,t,n){var r=Number(e),i=!Or(r),o=!Or(t),a=!Or(n);if(i||o||a){var s=i?Tr(r):0,u=o?Tr(t):0,l=a?Tr(n):0,c=Math.max(s,u,l),p=Math.pow(10,c);r*=p,t*=p,n*=p,i&&(r=Math.round(r)),o&&(t=Math.round(t)),a&&(n=Math.round(n))}return(r-t)%n==0}function Mr(e,t,n,r,i,o){Sr(e,t,n,r),Dr(r),wr(e,t,n,r,i,o);var a,s;if((y(n.min)||n.ngMin)&&(r.$validators.min=function(e){return r.$isEmpty(e)||b(a)||e>=a},n.$observe("min",function(e){a=Er(e),r.$validate()})),(y(n.max)||n.ngMax)&&(r.$validators.max=function(e){return r.$isEmpty(e)||b(s)||e<=s},n.$observe("max",function(e){s=Er(e),r.$validate()})),y(n.step)||n.ngStep){var u;r.$validators.step=function(e,t){return r.$isEmpty(t)||b(u)||Ar(t,a||0,u)},n.$observe("step",function(e){u=Er(e),r.$validate()})}}function Pr(e,t,n,r,i,o){function a(e,r){t.attr(e,n[e]),n.$observe(e,r)}function s(e){if(p=Er(e),!li(r.$modelValue))if(c){var n=t.val();p>n&&(n=p,t.val(n)),r.$setViewValue(n)}else r.$validate()}function u(e){if(d=Er(e),!li(r.$modelValue))if(c){var n=t.val();d<n&&(t.val(d),n=d<p?p:d),r.$setViewValue(n)}else r.$validate()}function l(e){f=Er(e),li(r.$modelValue)||(c&&r.$viewValue!==t.val()?r.$setViewValue(t.val()):r.$validate())}Sr(e,t,n,r),Dr(r),wr(e,t,n,r,i,o);var c=r.$$hasNativeValidators&&"range"===t[0].type,p=c?0:void 0,d=c?100:void 0,f=c?1:void 0,h=t[0].validity,m=y(n.min),g=y(n.max),$=y(n.step),v=r.$render;r.$render=c&&y(h.rangeUnderflow)&&y(h.rangeOverflow)?function(){v(),r.$setViewValue(t.val())}:v,m&&(r.$validators.min=c?function(){return!0}:function(e,t){return r.$isEmpty(t)||b(p)||t>=p},a("min",s)),g&&(r.$validators.max=c?function(){return!0}:function(e,t){return r.$isEmpty(t)||b(d)||t<=d},a("max",u)),$&&(r.$validators.step=c?function(){return!h.stepMismatch}:function(e,t){return r.$isEmpty(t)||b(f)||Ar(t,p||0,f)},a("step",l))}function Ir(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||ta.test(n)}}function Nr(e,t,n,r,i,o){wr(e,t,n,r,i,o),br(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||na.test(n)}}function Ur(e,t,n,r){var i=!n.ngTrim||"false"!==di(n.ngTrim);b(n.name)&&t.attr("name",u());var o=function(e){var o;t[0].checked&&(o=n.value,i&&(o=di(o)),r.$setViewValue(o,e&&e.type))};t.on("click",o),r.$render=function(){var e=n.value;i&&(e=di(e)),t[0].checked=e===r.$viewValue},n.$observe("value",r.$render)}function jr(e,t,n,r,i){var o;if(y(r)){if(o=e(r),!o.constant)throw Ia("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function Vr(e,t,n,r,i,o,a,s){var u=jr(s,e,"ngTrueValue",n.ngTrueValue,!0),l=jr(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return H(e,u)}),r.$parsers.push(function(e){return e?u:l})}function zr(e,t){function n(e,t){if(!e||!e.length)return[];if(!t||!t.length)return e;var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i===t[o])continue e;n.push(i)}return n}function r(e){return e&&e.split(" ")}function i(e){var t=e;return ci(e)?t=e.map(i).join(" "):w(e)&&(t=Object.keys(e).filter(function(t){return e[t]}).join(" ")),t}e="ngClass"+e;var a;return["$parse",function(s){return{restrict:"AC",link:function(u,l,c){function p(e){e=h(r(e),1),c.$addClass(e)}function d(e){e=h(r(e),-1),c.$removeClass(e)}function f(e,t){var i=r(e),o=r(t),a=n(i,o),s=n(o,i),u=h(a,-1),l=h(s,1);c.$addClass(l),c.$removeClass(u)}function h(e,t){var n=[];return o(e,function(e){(t>0||v[e])&&(v[e]=(v[e]||0)+t,v[e]===+(t>0)&&n.push(e))}),n.join(" ")}function m(e){e===t?p($):d($),b=e}function g(e){C(e)||(e=i(e)),b===t&&f($,e),$=e}var $,v=l.data("$classCounts"),b=!0;v||(v=$e(),l.data("$classCounts",v)),"ngClass"!==e&&(a||(a=s("$index",function(e){return 1&e})),u.$watch(a,m)),u.$watch(s(c[e],i),g)}}}]}function Rr(e,t,n,r,i,o,a,s,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(e),this.$$parentForm=Ko,this.$options=Na,this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:e}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=t,gr(this),qr(this)}function qr(e){e.$$scope.$watch(function(t){var n=e.$$ngModelGet(t);if(n!==e.$modelValue&&(e.$modelValue===e.$modelValue||n===n)){e.$modelValue=e.$$rawModelValue=n,e.$$parserValid=void 0;for(var r=e.$formatters,i=r.length,o=n;i--;)o=r[i](o);e.$viewValue!==o&&(e.$$updateEmptyClasses(o),e.$viewValue=e.$$lastCommittedViewValue=o,e.$render(),e.$$runValidators(e.$modelValue,e.$viewValue,m))}return n})}function Fr(e){this.$$options=e}function Lr(e,t){o(t,function(t,n){y(e[n])||(e[n]=t)})}function _r(e,t){e.prop("selected",t),e.attr("selected",t)}var Hr="validity",Br=Object.prototype.hasOwnProperty,Wr={objectMaxDepth:5},Yr=function(e){return C(e)?e.toLowerCase():e},Gr=function(e){return C(e)?e.toUpperCase():e},Kr=function(e){return C(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Jr=function(e){return C(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Yr=Kr,Gr=Jr);var Zr,Qr,Xr,ei,ti=[].slice,ni=[].splice,ri=[].push,ii=Object.prototype.toString,oi=Object.getPrototypeOf,ai=t("ng"),si=e.angular||(e.angular={}),ui=0;Zr=e.document.documentMode;var li=Number.isNaN||function(e){return e!==e};m.$inject=[],g.$inject=[];var ci=Array.isArray,pi=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,di=function(e){return C(e)?e.trim():e},fi=function(e){return e.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},hi=function(){if(!y(hi.rules)){var t=e.document.querySelector("[ng-csp]")||e.document.querySelector("[data-ng-csp]");if(t){var n=t.getAttribute("ng-csp")||t.getAttribute("data-ng-csp");hi.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else hi.rules={noUnsafeEval:function(){try{return new Function(""),!1}catch(e){return!0}}(),noInlineStyle:!1}}return hi.rules},mi=function(){if(y(mi.name_))return mi.name_;var t,n,r,i,o=$i.length;for(n=0;n<o;++n)if(r=$i[n],t=e.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return mi.name_=i},gi=/:/g,$i=["ng-","data-ng-","ng:","x-ng-"],vi=function(t){var n=t.currentScript;if(!n)return!0;if(!(n instanceof e.HTMLScriptElement||n instanceof e.SVGScriptElement))return!1;var r=n.attributes;return[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")].every(function(e){if(!e)return!0;if(!e.value)return!1;var n=t.createElement("a");if(n.href=e.value,t.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}(e.document),bi=/[A-Z]/g,yi=!1,wi=1,xi=3,Ci=8,ki=9,Si=11,Di={full:"1.6.4",major:1,minor:6,dot:4,codeName:"phenomenal-footnote"};Ie.expando="ng339";var Ei=Ie.cache={},Oi=1;Ie._data=function(e){return this.cache[e[this.expando]]||{}};var Ti=/-([a-z])/g,Ai=/^-ms-/,Mi={mouseleave:"mouseout",mouseenter:"mouseover"},Pi=t("jqLite"),Ii=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Ni=/<|&#?\w+;/,Ui=/<([\w:-]+)/,ji=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Vi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Vi.optgroup=Vi.option,Vi.tbody=Vi.tfoot=Vi.colgroup=Vi.caption=Vi.thead,Vi.th=Vi.td;var zi=e.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Ri=Ie.prototype={ready:Ke,toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Qr(e>=0?this[e]:this[this.length+e])},length:0,push:ri,sort:[].sort,splice:[].splice},qi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){qi[Yr(e)]=e});var Fi={};o("input,select,option,textarea,button,form,details".split(","),function(e){Fi[e]=!0});var Li={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:Re,removeData:Ve,hasData:Te,cleanData:function(e){for(var t=0,n=e.length;t<n;t++)Ve(e[t])}},function(e,t){Ie[t]=e}),o({data:Re,inheritedData:Be,scope:function(e){return Qr.data(e,"$scope")||Be(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Qr.data(e,"$isolateScope")||Qr.data(e,"$isolateScopeNoTemplate")},controller:He,injector:function(e){return Be(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:qe,css:function(e,t,n){if(t=ke(t),!y(n))return e.style[t];e.style[t]=n},attr:function(e,t,n){var r,i=e.nodeType;if(i!==xi&&2!==i&&i!==Ci&&e.getAttribute){var o=Yr(t),a=qi[o];if(!y(n))return r=e.getAttribute(t),a&&null!==r&&(r=o),null===r?void 0:r;null===n||!1===n&&a?e.removeAttribute(t):e.setAttribute(t,a?o:n)}},prop:function(e,t,n){if(!y(n))return e[t];e[t]=n},text:function(){function e(e,t){if(b(t)){var n=e.nodeType;return n===wi||n===xi?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(b(t)){if(e.multiple&&"select"===R(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),n}return e.value}e.value=t},html:function(e,t){if(b(t))return e.innerHTML;Ue(e,!0),e.innerHTML=t},empty:We},function(e,t){Ie.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==We&&b(2===e.length&&e!==qe&&e!==He?t:n)){if(w(t)){for(r=0;r<o;r++)if(e===Re)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=b(a)?Math.min(o,1):o,u=0;u<s;u++){var l=e(this[u],t,n);a=a?a+l:l}return a}for(r=0;r<o;r++)e(this[r],t,n);return this}}),o({removeData:Ve,on:function(e,t,n,r){if(y(r))throw Pi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Oe(e)){var i=ze(e,!0),o=i.events,a=i.handle;a||(a=i.handle=Qe(e,o));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],u=s.length,l=function(t,r,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=r,"$destroy"===t||i||e.addEventListener(t,a)),s.push(n)};u--;)t=s[u],Mi[t]?(l(Mi[t],et),l(t,void 0,!0)):l(t)}},off:je,one:function(e,t,n){e=Qr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Ue(e),o(new Ie(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===wi&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===wi||n===Si){t=new Ie(t);for(var r=0,i=t.length;r<i;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===wi){var n=e.firstChild;o(new Ie(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){Pe(e,Qr(t).eq(0).clone()[0])},remove:Ye,detach:function(e){Ye(e,!0)},after:function(e,t){var n=e,r=e.parentNode;if(r){t=new Ie(t);for(var i=0,o=t.length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}}},addClass:Le,removeClass:Fe,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;b(r)&&(r=!qe(e,t)),(r?Le:Fe)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Si?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Ne,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,u=ze(e),l=u&&u.events,c=l&&l[s];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:m,type:s,target:e},t.type&&(r=p(r,t)),i=ye(c),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Ie.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;o<a;o++)b(i)?(i=e(this[o],t,n,r),y(i)&&(i=Qr(i))):_e(i,e(this[o],t,n,r));return y(i)?i:this}}),Ie.prototype.bind=Ie.prototype.on,Ie.prototype.unbind=Ie.prototype.off;var _i=Object.create(null);rt.prototype={_idx:function(e){return e===this._lastKey?this._lastIndex:(this._lastKey=e,this._lastIndex=this._keys.indexOf(e),this._lastIndex)},_transformKey:function(e){return li(e)?_i:e},get:function(e){e=this._transformKey(e);var t=this._idx(e);if(-1!==t)return this._values[t]},set:function(e,t){e=this._transformKey(e);var n=this._idx(e);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=e,this._values[n]=t},delete:function(e){e=this._transformKey(e);var t=this._idx(e);return-1!==t&&(this._keys.splice(t,1),this._values.splice(t,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var Hi=rt,Bi=[function(){this.$get=[function(){return Hi}]}],Wi=/^([^(]+?)=>/,Yi=/^[^(]*\(\s*([^)]*)\)/m,Gi=/,/,Ki=/^\s*(_?)(\S+?)\1\s*$/,Ji=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Zi=t("$injector");ut.$$annotate=st;var Qi=t("$animate"),Xi=1,eo=function(){this.$get=m},to=function(){var e=new Hi,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=C(t)?t.split(" "):ci(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=dt(t.attr("class")),i="",a="";o(n,function(e,t){e!==!!r[t]&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Le(e,i),a&&Fe(e,a)}),e.delete(t)}}),t.length=0}function s(n,o,s){var u=e.get(n)||{},l=i(u,o,!0),c=i(u,s,!1);(l||c)&&(e.set(n,u),t.push(n),1===t.length&&r.$$postDigest(a))}return{enabled:m,on:m,off:m,pin:m,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},no=["$provide",function(e){var t=this,n=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Qi("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(n=e instanceof RegExp?e:null)){if(new RegExp("[(\\s|\\/)]ng-animate[(\\s|\\/)]").test(n.toString()))throw n=null,Qi("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',"ng-animate")}return n},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=pt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Qr(r),i=i&&Qr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ft(o))},move:function(n,r,i,o){return r=r&&Qr(r),i=i&&Qr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ft(o))},leave:function(t,n){return e.push(t,"leave",ft(n),function(){t.remove()})},addClass:function(t,n,r){return r=ft(r),r.addClass=ct(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ft(r),r.removeClass=ct(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ft(i),i.addClass=ct(i.addClass,n),i.removeClass=ct(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ft(o),o.from=o.from?p(o.from,n):n,o.to=o.to?p(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=ct(o.tempClasses,i),e.push(t,"animate",o)}}}]}],ro=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},io=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(e,t,n,r,i){function a(e){this.setHost(e);var t=n(),o=function(e){i(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){r()?o(e):t(e)},this._state=0}return a.chain=function(e,t){function n(){if(r===e.length)return void t(!0);e[r](function(e){if(!1===e)return void t(!1);r++,n()})}var r=0;n()},a.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;o(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:m,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(o(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},oo=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=L(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},ao=t("$compile"),so=new vt;bt.$inject=["$provide","$$sanitizeUriProvider"],yt.prototype.isFirstChange=function(){return this.previousValue===so};var uo=/^((?:x|data)[:\-_])/i,lo=/[:\-_]+(.)/g,co=t("$controller"),po=/^(\S+)(\s+as\s+([\w$]+))?$/,fo=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Qr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},ho="application/json",mo={"Content-Type":ho+";charset=utf-8"},go=/^\[|^\{(?!\{)/,$o={"[":/]$/,"{":/}$/},vo=/^\)]\}',?\n/,bo=t("$http"),yo=si.$interpolateMinErr=t("$interpolate");yo.throwNoconcat=function(e){throw yo("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},yo.interr=function(e,t){return yo("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var wo=function(){this.$get=function(){function e(e){var t=function(e){t.data=e,t.called=!0};return t.id=e,t}var t=si.callbacks,n={};return{createCallback:function(r){var i="_"+(t.$$counter++).toString(36),o="angular.callbacks."+i,a=e(i);return n[o]=t[i]=a,o},wasCalled:function(e){return n[e].called},getResponse:function(e){return n[e].data},removeCallback:function(e){var r=n[e];delete t[r.id],delete n[e]}}}},xo=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,Co={http:80,https:443,ftp:21},ko=t("$location"),So=/^\s*[\\\/]{2,}/,Do={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:nn("$$absUrl"),url:function(e){if(b(e))return this.$$url;var t=xo.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:nn("$$protocol"),host:nn("$$host"),port:nn("$$port"),path:rn("$$path",function(e){return e=null!==e?e.toString():"","/"===e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(C(e)||k(e))e=e.toString(),this.$$search=ne(e);else{if(!w(e))throw ko("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=L(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:b(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:rn("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([tn,en,Xt],function(e){e.prototype=Object.create(Do),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Xt||!this.$$html5)throw ko("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=b(t)?null:t,this.$$urlUpdatedByLocation=!0,this}});var Eo=t("$parse"),Oo={}.constructor.prototype.valueOf,To=$e();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){To[e]=!0});var Ao={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Mo=function(e){this.options=e};Mo.prototype={constructor:Mo,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=To[t],o=To[n],a=To[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length&&this.text.charAt(this.index+t)},isNumber:function(e){return"0"<=e&&e<="9"&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||" "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&e<="z"||"A"<=e&&e<="Z"||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=y(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Eo("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Yr(this.text.charAt(this.index));if("."===n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{n+=Ao[o]||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var Po=function(e,t){this.lexer=e,this.options=t};Po.Program="Program",Po.ExpressionStatement="ExpressionStatement",Po.AssignmentExpression="AssignmentExpression",Po.ConditionalExpression="ConditionalExpression",Po.LogicalExpression="LogicalExpression",Po.BinaryExpression="BinaryExpression",Po.UnaryExpression="UnaryExpression",Po.CallExpression="CallExpression",Po.MemberExpression="MemberExpression",Po.Identifier="Identifier",Po.Literal="Literal",Po.ArrayExpression="ArrayExpression",Po.Property="Property",Po.ObjectExpression="ObjectExpression",Po.ThisExpression="ThisExpression",Po.LocalsExpression="LocalsExpression",Po.NGValueParameter="NGValueParameter",Po.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:Po.Program,body:e}},expressionStatement:function(){return{type:Po.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();if(this.expect("=")){if(!fn(e))throw Eo("lval","Trying to assign a value to a non l-value");e={type:Po.AssignmentExpression,left:e,right:this.assignment(),operator:"="}}return e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:Po.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:Po.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:Po.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:Po.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:Po.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:Po.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:Po.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:Po.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=L(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:Po.Literal,
value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:Po.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:Po.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:Po.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:Po.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do{e.push(this.filterChain())}while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:Po.Identifier,name:e.text}},constant:function(){return{type:Po.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Po.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:Po.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:Po.ObjectExpression,properties:t}},throwError:function(e,t){throw Eo("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Eo("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Eo("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:Po.ThisExpression},$locals:{type:Po.LocalsExpression}}},$n.prototype={compile:function(e){var t=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},pn(e,t.$filter);var n,r="";if(this.stage="assign",n=hn(e)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var a=dn(e.body);t.stage="inputs",o(a,function(e,n){var r="fn"+n;t.state[r]={vars:[],body:[],own:{}},t.state.computing=r;var i=t.nextId();t.recurse(e,i),t.return_(i),t.state.inputs.push(r),e.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(e);var s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",u=new Function("$filter","getStringValue","ifDefined","plus",s)(this.$filter,sn,un,ln);return this.state=this.stage=void 0,u},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,n,r,i,a){var s,u,l,c,p,d=this;if(r=r||m,!a&&y(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,n,r,i,!0));switch(e.type){case Po.Program:o(e.body,function(t,n){d.recurse(t.expression,void 0,void 0,function(e){u=e}),n!==e.body.length-1?d.current().body.push(u,";"):d.return_(u)});break;case Po.Literal:c=this.escape(e.value),this.assign(t,c),r(t||c);break;case Po.UnaryExpression:this.recurse(e.argument,void 0,void 0,function(e){u=e}),c=e.operator+"("+this.ifDefined(u,0)+")",this.assign(t,c),r(c);break;case Po.BinaryExpression:this.recurse(e.left,void 0,void 0,function(e){s=e}),this.recurse(e.right,void 0,void 0,function(e){u=e}),c="+"===e.operator?this.plus(s,u):"-"===e.operator?this.ifDefined(s,0)+e.operator+this.ifDefined(u,0):"("+s+")"+e.operator+"("+u+")",this.assign(t,c),r(c);break;case Po.LogicalExpression:t=t||this.nextId(),d.recurse(e.left,t),d.if_("&&"===e.operator?t:d.not(t),d.lazyRecurse(e.right,t)),r(t);break;case Po.ConditionalExpression:t=t||this.nextId(),d.recurse(e.test,t),d.if_(t,d.lazyRecurse(e.alternate,t),d.lazyRecurse(e.consequent,t)),r(t);break;case Po.Identifier:t=t||this.nextId(),n&&(n.context="inputs"===d.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),n.computed=!1,n.name=e.name),d.if_("inputs"===d.stage||d.not(d.getHasOwnProperty("l",e.name)),function(){d.if_("inputs"===d.stage||"s",function(){i&&1!==i&&d.if_(d.isNull(d.nonComputedMember("s",e.name)),d.lazyAssign(d.nonComputedMember("s",e.name),"{}")),d.assign(t,d.nonComputedMember("s",e.name))})},t&&d.lazyAssign(t,d.nonComputedMember("l",e.name))),r(t);break;case Po.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),t=t||this.nextId(),d.recurse(e.object,s,void 0,function(){d.if_(d.notNull(s),function(){e.computed?(u=d.nextId(),d.recurse(e.property,u),d.getStringValue(u),i&&1!==i&&d.if_(d.not(d.computedMember(s,u)),d.lazyAssign(d.computedMember(s,u),"{}")),c=d.computedMember(s,u),d.assign(t,c),n&&(n.computed=!0,n.name=u)):(i&&1!==i&&d.if_(d.isNull(d.nonComputedMember(s,e.property.name)),d.lazyAssign(d.nonComputedMember(s,e.property.name),"{}")),c=d.nonComputedMember(s,e.property.name),d.assign(t,c),n&&(n.computed=!1,n.name=e.property.name))},function(){d.assign(t,"undefined")}),r(t)},!!i);break;case Po.CallExpression:t=t||this.nextId(),e.filter?(u=d.filter(e.callee.name),l=[],o(e.arguments,function(e){var t=d.nextId();d.recurse(e,t),l.push(t)}),c=u+"("+l.join(",")+")",d.assign(t,c),r(t)):(u=d.nextId(),s={},l=[],d.recurse(e.callee,u,s,function(){d.if_(d.notNull(u),function(){o(e.arguments,function(t){d.recurse(t,e.constant?void 0:d.nextId(),void 0,function(e){l.push(e)})}),c=s.name?d.member(s.context,s.name,s.computed)+"("+l.join(",")+")":u+"("+l.join(",")+")",d.assign(t,c)},function(){d.assign(t,"undefined")}),r(t)}));break;case Po.AssignmentExpression:u=this.nextId(),s={},this.recurse(e.left,void 0,s,function(){d.if_(d.notNull(s.context),function(){d.recurse(e.right,u),c=d.member(s.context,s.name,s.computed)+e.operator+u,d.assign(t,c),r(t||c)})},1);break;case Po.ArrayExpression:l=[],o(e.elements,function(t){d.recurse(t,e.constant?void 0:d.nextId(),void 0,function(e){l.push(e)})}),c="["+l.join(",")+"]",this.assign(t,c),r(t||c);break;case Po.ObjectExpression:l=[],p=!1,o(e.properties,function(e){e.computed&&(p=!0)}),p?(t=t||this.nextId(),this.assign(t,"{}"),o(e.properties,function(e){e.computed?(s=d.nextId(),d.recurse(e.key,s)):s=e.key.type===Po.Identifier?e.key.name:""+e.key.value,u=d.nextId(),d.recurse(e.value,u),d.assign(d.member(t,s,e.computed),u)})):(o(e.properties,function(t){d.recurse(t.value,e.constant?void 0:d.nextId(),void 0,function(e){l.push(d.escape(t.key.type===Po.Identifier?t.key.name:""+t.key.value)+":"+e)})}),c="{"+l.join(",")+"}",this.assign(t,c)),r(t||c);break;case Po.ThisExpression:this.assign(t,"s"),r(t||"s");break;case Po.LocalsExpression:this.assign(t,"l"),r(t||"l");break;case Po.NGValueParameter:this.assign(t,"v"),r(t||"v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},isNull:function(e){return e+"==null"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){var n=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/;return n.test(t)?e+"."+t:e+'["'+t.replace(/[^$_a-zA-Z0-9]/g,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(C(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(k(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(void 0===e)return"undefined";throw Eo("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},vn.prototype={compile:function(e){var t=this;pn(e,t.$filter);var n,r;(n=hn(e))&&(r=this.recurse(n));var i,a=dn(e.body);a&&(i=[],o(a,function(e,n){var r=t.recurse(e);e.input=r,i.push(r),e.watchId=n}));var s=[];o(e.body,function(e){s.push(t.recurse(e.expression))});var u=0===e.body.length?m:1===e.body.length?s[0]:function(e,t){var n;return o(s,function(r){n=r(e,t)}),n};return r&&(u.assign=function(e,t,n){return r(e,n,t)}),i&&(u.inputs=i),u},recurse:function(e,t,n){var r,i,a,s=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case Po.Literal:return this.value(e.value,t);case Po.UnaryExpression:return i=this.recurse(e.argument),this["unary"+e.operator](i,t);case Po.BinaryExpression:case Po.LogicalExpression:return r=this.recurse(e.left),i=this.recurse(e.right),this["binary"+e.operator](r,i,t);case Po.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case Po.Identifier:return s.identifier(e.name,t,n);case Po.MemberExpression:return r=this.recurse(e.object,!1,!!n),e.computed||(i=e.property.name),e.computed&&(i=this.recurse(e.property)),e.computed?this.computedMember(r,i,t,n):this.nonComputedMember(r,i,t,n);case Po.CallExpression:return a=[],o(e.arguments,function(e){a.push(s.recurse(e))}),e.filter&&(i=this.$filter(e.callee.name)),e.filter||(i=this.recurse(e.callee,!0)),e.filter?function(e,n,r,o){for(var s=[],u=0;u<a.length;++u)s.push(a[u](e,n,r,o));var l=i.apply(void 0,s,o);return t?{context:void 0,name:void 0,value:l}:l}:function(e,n,r,o){var s,u=i(e,n,r,o);if(null!=u.value){for(var l=[],c=0;c<a.length;++c)l.push(a[c](e,n,r,o));s=u.value.apply(u.context,l)}return t?{value:s}:s};case Po.AssignmentExpression:return r=this.recurse(e.left,!0,1),i=this.recurse(e.right),function(e,n,o,a){var s=r(e,n,o,a),u=i(e,n,o,a);return s.context[s.name]=u,t?{value:u}:u};case Po.ArrayExpression:return a=[],o(e.elements,function(e){a.push(s.recurse(e))}),function(e,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](e,n,r,i));return t?{value:o}:o};case Po.ObjectExpression:return a=[],o(e.properties,function(e){e.computed?a.push({key:s.recurse(e.key),computed:!0,value:s.recurse(e.value)}):a.push({key:e.key.type===Po.Identifier?e.key.name:""+e.key.value,computed:!1,value:s.recurse(e.value)})}),function(e,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(e,n,r,i)]=a[s].value(e,n,r,i):o[a[s].key]=a[s].value(e,n,r,i);return t?{value:o}:o};case Po.ThisExpression:return function(e){return t?{value:e}:e};case Po.LocalsExpression:return function(e,n){return t?{value:n}:n};case Po.NGValueParameter:return function(e,n,r){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=y(a)?-a:-0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),l=ln(s,u);return n?{value:l}:l}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),l=(y(s)?s:0)-(y(u)?u:0);return n?{value:l}:l}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(e,t,n){return function(r,i,o,a){var s=i&&e in i?i:r;n&&1!==n&&s&&null==s[e]&&(s[e]={});var u=s?s[e]:void 0;return t?{context:s,name:e,value:u}:u}},computedMember:function(e,t,n,r){return function(i,o,a,s){var u,l,c=e(i,o,a,s);return null!=c&&(u=t(i,o,a,s),u=sn(u),r&&1!==r&&c&&!c[u]&&(c[u]={}),l=c[u]),n?{context:c,name:u,value:l}:l}},nonComputedMember:function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s);r&&1!==r&&u&&null==u[t]&&(u[t]={});var l=null!=u?u[t]:void 0;return n?{context:u,name:t,value:l}:l}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}},bn.prototype={constructor:bn,parse:function(e){var t=this.ast.ast(e),n=this.astCompiler.compile(t);return n.literal=mn(t),n.constant=gn(t),n}};var Io=t("$sce"),No={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Uo=/_([a-z])/g,jo=t("$compile"),Vo=e.document.createElement("a"),zo=Vn(e.location.href);qn.$inject=["$document"],Ln.$inject=["$provide"];var Ro=22,qo=".",Fo="0";Yn.$inject=["$locale"],Gn.$inject=["$locale"];var Lo={yyyy:Xn("FullYear",4,0,!1,!0),yy:Xn("FullYear",2,0,!0,!0),y:Xn("FullYear",1,0,!1,!0),MMMM:er("Month"),MMM:er("Month",!0),MM:Xn("Month",2,1),M:Xn("Month",1,1),LLLL:er("Month",!1,!0),dd:Xn("Date",2),d:Xn("Date",1),HH:Xn("Hours",2),H:Xn("Hours",1),hh:Xn("Hours",2,-12),h:Xn("Hours",1,-12),mm:Xn("Minutes",2),m:Xn("Minutes",1),ss:Xn("Seconds",2),s:Xn("Seconds",1),sss:Xn("Milliseconds",3),EEEE:er("Day"),EEE:er("Day",!0),a:or,Z:tr,ww:ir(2),w:ir(1),G:ar,GG:ar,GGG:ar,GGGG:sr},_o=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,Ho=/^-?\d+$/;ur.$inject=["$locale"];var Bo=$(Yr),Wo=$(Gr);dr.$inject=["$parse"];var Yo=$({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===ii.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Go={};o(qi,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!==e){var r=wt("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Go[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Li,function(e,t){Go[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(/^\/(.+)\/([a-z]*)$/);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=wt("ng-"+e);Go[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===ii.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){if(!t)return void("href"===e&&i.$set(a,null));i.$set(a,t),Zr&&o&&r.prop(o,i[a])})}}}});var Ko={$addControl:m,$$renameControl:hr,$removeControl:m,$setValidity:m,$setDirty:m,$setPristine:m,$setSubmitted:m},Jo="ng-pending";mr.$inject=["$element","$attrs","$scope","$animate","$interpolate"],mr.prototype={$rollbackViewValue:function(){o(this.$$controls,function(e){e.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(e){e.$commitViewValue()})},$addControl:function(e){he(e.$name,"input"),this.$$controls.push(e),e.$name&&(this[e.$name]=e),e.$$parentForm=this},$$renameControl:function(e,t){var n=e.$name;this[n]===e&&delete this[n],this[t]=e,e.$name=t},$removeControl:function(e){e.$name&&this[e.$name]===e&&delete this[e.$name],o(this.$pending,function(t,n){this.$setValidity(n,null,e)},this),o(this.$error,function(t,n){this.$setValidity(n,null,e)},this),o(this.$$success,function(t,n){this.$setValidity(n,null,e)},this),F(this.$$controls,e),e.$$parentForm=Ko},$setDirty:function(){this.$$animate.removeClass(this.$$element,Ma),this.$$animate.addClass(this.$$element,Pa),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Ma,Pa+" ng-submitted"),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(e){e.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(e){e.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,"ng-submitted"),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},$r({clazz:mr,set:function(e,t,n){var r=e[t];if(r){-1===r.indexOf(n)&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])}});var Zo=function(e){return["$timeout","$parse",function(t,n){function r(e){return""===e?n('this[""]').assign:n(e).assign||m}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:mr,compile:function(n,i){n.addClass(Ma).addClass(Ta);var o=i.name?"name":!(!e||!i.ngForm)&&"ngForm";return{pre:function(e,n,i,a){var s=a[0];if(!("action"in i)){var u=function(t){e.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),t.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){t(function(){n[0].removeEventListener("submit",u)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var l=o?r(s.$name):m;o&&(l(e,s),i.$observe(o,function(t){s.$name!==t&&(l(e,void 0),s.$$parentForm.$$renameControl(s,t),(l=r(s.$name))(e,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),l(e,void 0),p(s,Ko)})}}}}}]},Qo=Zo(),Xo=Zo(!0),ea=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,ta=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,na=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,ra=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,ia=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,oa=/^(\d{4,})-W(\d\d)$/,aa=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,sa="keydown wheel mousedown",ua=$e();o("date,datetime-local,month,time,week".split(","),function(e){ua[e]=!0});var la={text:yr,date:kr("date",/^(\d{4,})-(\d{2})-(\d{2})$/,Cr(/^(\d{4,})-(\d{2})-(\d{2})$/,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":kr("datetimelocal",ia,Cr(ia,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:kr("time",aa,Cr(aa,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:kr("week",oa,xr,"yyyy-Www"),month:kr("month",/^(\d{4,})-(\d\d)$/,Cr(/^(\d{4,})-(\d\d)$/,["yyyy","MM"]),"yyyy-MM"),number:Mr,url:Ir,email:Nr,radio:Ur,range:Pr,checkbox:Vr,hidden:m,button:m,submit:m,reset:m,file:m},ca=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(la[Yr(a.type)]||la.text)(i,o,a,s[0],t,e,n,r)}}}}],pa=/^(true|false|\d+)$/,da=function(){function e(e,t,n){var r=y(n)?n:9===Zr?"":null;e.prop("value",r),t.$set("value",n)}return{restrict:"A",priority:100,compile:function(t,n){return pa.test(n.ngValue)?function(t,n,r){e(n,r,t.$eval(r.ngValue))}:function(t,n,r){t.$watch(r.ngValue,function(t){e(n,r,t)})}}}},fa=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=ve(e)})}}}}],ha=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=b(e)?"":e})}}}}],ma=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(t){return e.valueOf(t)});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){var n=o(t);r.html(e.getTrustedHtml(n)||"")})}}}}],ga=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),$a=zr("",!0),va=zr("Odd",0),ba=zr("Even",1),ya=fr({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),wa=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],xa={},Ca={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=wt("ng-"+e);xa[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t]);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};Ca[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ka=["$animate","$compile",function(e,t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,l;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.$$createComment("end ngIf",i.ngIf),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),u&&(u.$destroy(),u=null),s&&(l=ge(s.clone),e.leave(l).done(function(e){!1!==e&&(l=null)}),s=null))})}}}],Sa=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:si.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,l,c){var p,d,f,h=0,m=function(){d&&(d.remove(),d=null),p&&(p.$destroy(),p=null),f&&(n.leave(f).done(function(e){!1!==e&&(d=null)}),d=f,f=null)};r.$watch(o,function(o){var u=function(e){!1===e||!y(s)||s&&!r.$eval(s)||t()},d=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&d===h){var t=r.$new();l.template=e;var s=c(t,function(e){m(),n.enter(e,null,i).done(u)});p=t,f=s,p.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||d===h&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),l.template=null)})}}}}],Da=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){if(ii.call(r[0]).match(/SVG/))return r.empty(),void t(Ae(o.template,e.document).childNodes)(n,function(e){r.append(e)},{futureParentElement:r});r.html(o.template),t(r.contents())(n)}}}],Ea=fr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Oa=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?di(i):i,u=function(e){if(!b(e)){var t=[];return e&&o(e.split(s),function(e){e&&t.push(a?di(e):e)}),t}};r.$parsers.push(u),r.$formatters.push(function(e){if(ci(e))return e.join(i)}),r.$isEmpty=function(e){return!e||!e.length}}}},Ta="ng-valid",Aa="ng-invalid",Ma="ng-pristine",Pa="ng-dirty",Ia=t("ngModel");Rr.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Rr.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var e=this.$$parse(this.$$attr.ngModel+"()"),t=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(t){var n=this.$$parsedNgModel(t);return D(n)&&(n=e(t)),n},this.$$ngModelSet=function(e,n){D(this.$$parsedNgModel(e))?t(e,{$$$p:n}):this.$$parsedNgModelAssign(e,n)}}else if(!this.$$parsedNgModel.assign)throw Ia("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,ee(this.$$element))},$render:m,$isEmpty:function(e){return b(e)||""===e||null===e||e!==e},$$updateEmptyClasses:function(e){this.$isEmpty(e)?(this.$$animate.removeClass(this.$$element,"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Pa),this.$$animate.addClass(this.$$element,Ma)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Ma),this.$$animate.addClass(this.$$element,Pa),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!li(this.$modelValue)){var e=this.$$lastCommittedViewValue,t=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(t,e,function(e){i||n===e||(o.$modelValue=e?t:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(e,t,n){function r(e,t){a===s.$$currentValidationRunId&&s.$setValidity(e,t)}function i(e){a===s.$$currentValidationRunId&&n(e)}this.$$currentValidationRunId++;var a=this.$$currentValidationRunId,s=this;return function(){var e=s.$$parserName||"parse";return b(s.$$parserValid)?(r(e,null),!0):(s.$$parserValid||(o(s.$validators,function(e,t){r(t,null)}),o(s.$asyncValidators,function(e,t){r(t,null)})),r(e,s.$$parserValid),s.$$parserValid)}()&&function(){var n=!0;return o(s.$validators,function(i,o){var a=Boolean(i(e,t));n=n&&a,r(o,a)}),!!n||(o(s.$asyncValidators,function(e,t){r(t,null)}),!1)}()?void function(){var n=[],a=!0;o(s.$asyncValidators,function(i,o){var s=i(e,t);if(!N(s))throw Ia("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",s);r(o,void 0),n.push(s.then(function(){r(o,!0)},function(){a=!1,r(o,!1)}))}),n.length?s.$$q.all(n).then(function(){i(a)},m):i(!0)}():void i(!1)},$commitViewValue:function(){var e=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==e||""===e&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(e),this.$$lastCommittedViewValue=e,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){function e(){r.$modelValue!==o&&r.$$writeModelToScope()}var t=this.$$lastCommittedViewValue,n=t,r=this;if(this.$$parserValid=!b(n)||void 0,this.$$parserValid)for(var i=0;i<this.$parsers.length;i++)if(n=this.$parsers[i](n),b(n)){this.$$parserValid=!1;break}li(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var o=this.$modelValue,a=this.$options.getOption("allowInvalid");this.$$rawModelValue=n,a&&(this.$modelValue=n,e()),this.$$runValidators(n,this.$$lastCommittedViewValue,function(t){a||(r.$modelValue=t?n:void 0,e())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(e){try{e()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(e,t){this.$viewValue=e,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(t)},$$debounceViewValueCommit:function(e){var t=this.$options.getOption("debounce");k(t[e])?t=t[e]:k(t.default)&&(t=t.default),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;t>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},t):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(e){this.$options=this.$options.createChild(e)}},$r({clazz:Rr,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]}});var Na,Ua=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Rr,priority:1,compile:function(t){return t.addClass(Ma).addClass("ng-untouched").addClass(Ta),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$options.getOption("updateOn")&&n.on(a.$options.getOption("updateOn"),function(e){a.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){a.$touched||(e.$$phase?t.$evalAsync(o):t.$apply(o))})}}}}}];Fr.prototype={getOption:function(e){return this.$$options[e]},createChild:function(e){var t=!1;return e=p({},e),o(e,function(n,r){"$inherit"===n?"*"===r?t=!0:(e[r]=this.$$options[r],"updateOn"===r&&(e.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(e.updateOnDefault=!1,e[r]=di(n.replace(/(\s+|^)default(\s+|$)/,function(){return e.updateOnDefault=!0," "})))},this),t&&(delete e["*"],Lr(e,this.$$options)),Lr(e,Na.$$options),new Fr(e)}},Na=new Fr({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var ja=function(){function e(e,t){this.$$attrs=e,this.$$scope=t}return e.$inject=["$attrs","$scope"],e.prototype={$onInit:function(){var e=this.parentCtrl?this.parentCtrl.$options:Na,t=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=e.createChild(t)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:e}
},Va=fr({terminal:!0,priority:1e3}),za=t("ngOptions"),Ra=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,qa=["$compile","$document","$parse",function(t,n,r){function a(e,t,n){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!l&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(Ra);if(!s)throw za("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,ee(t));var u=s[5]||s[7],l=s[6],c=/ as /.test(s[0])&&s[1],p=s[9],d=r(s[2]?s[1]:u),f=c&&r(c),h=f||d,m=p&&r(p),g=p?function(e,t){return m(n,t)}:function(e){return nt(e)},$=function(e,t){return g(e,C(e,t))},v=r(s[2]||s[1]),b=r(s[3]||""),y=r(s[4]||""),w=r(s[8]),x={},C=l?function(e,t){return x[l]=t,x[u]=e,x}:function(e){return x[u]=e,x};return{trackBy:p,getTrackByValue:$,getWatchables:r(w,function(e){var t=[];e=e||[];for(var r=a(e),i=r.length,o=0;o<i;o++){var u=e===r?o:r[o],l=e[u],c=C(l,u),p=g(l,c);if(t.push(p),s[2]||s[1]){var d=v(n,c);t.push(d)}if(s[4]){var f=y(n,c);t.push(f)}}return t}),getOptions:function(){for(var e=[],t={},r=w(n)||[],i=a(r),s=i.length,u=0;u<s;u++){var l=r===i?u:i[u],c=r[l],d=C(c,l),f=h(n,d),m=g(f,d),x=v(n,d),k=b(n,d),S=y(n,d),D=new o(m,f,x,k,S);e.push(D),t[m]=D}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[$(e)]},getViewValueFromOption:function(e){return p?L(e.viewValue):e.viewValue}}}}}function s(e,r,i,s){function c(e,t){var n=u.cloneNode(!1);t.appendChild(n),d(e,n)}function p(e){var t=x.getOptionFromViewValue(e),n=t&&t.element;return n&&!n.selected&&(n.selected=!0),t}function d(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),t.value=e.selectValue}function f(){var e=x&&h.readValue();if(x)for(var t=x.items.length-1;t>=0;t--){var n=x.items[t];Ye(y(n.group)?n.element.parentNode:n.element)}x=C.getOptions();var i={};if(w&&r.prepend(h.emptyOption),x.items.forEach(function(e){var t;y(e.group)?(t=i[e.group],t||(t=l.cloneNode(!1),k.appendChild(t),t.label=null===e.group?"null":e.group,i[e.group]=t),c(e,t)):c(e,k)}),r[0].appendChild(k),m.$render(),!m.$isEmpty(e)){var o=h.readValue();(C.trackBy||g?H(e,o):e===o)||(m.$setViewValue(o),m.$render())}}for(var h=s[0],m=s[1],g=i.multiple,$=0,v=r.children(),b=v.length;$<b;$++)if(""===v[$].value){h.hasEmptyOption=!0,h.emptyOption=v.eq($);break}var w=!!h.emptyOption;Qr(u.cloneNode(!1)).val("?");var x,C=a(i.ngOptions,r,e),k=n[0].createDocumentFragment();h.generateUnknownOptionValue=function(e){return"?"},g?(h.writeValue=function(e){var t=e&&e.map(p)||[];x.items.forEach(function(e){e.element.selected&&!q(t,e)&&(e.element.selected=!1)})},h.readValue=function(){var e=r.val()||[],t=[];return o(e,function(e){var n=x.selectValueMap[e];n&&!n.disabled&&t.push(x.getViewValueFromOption(n))}),t},C.trackBy&&e.$watchCollection(function(){if(ci(m.$viewValue))return m.$viewValue.map(function(e){return C.getTrackByValue(e)})},function(){m.$render()})):(h.writeValue=function(e){var t=x.selectValueMap[r.val()],n=x.getOptionFromViewValue(e);t&&t.element.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(h.removeUnknownOption(),h.unselectEmptyOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):w?h.selectEmptyOption():h.unknownOption.parent().length?h.updateUnknownOption(e):h.renderUnknownOption(e)},h.readValue=function(){var e=x.selectValueMap[r.val()];return e&&!e.disabled?(h.unselectEmptyOption(),h.removeUnknownOption(),x.getViewValueFromOption(e)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(m.$viewValue)},function(){m.$render()})),w&&(h.emptyOption.remove(),t(h.emptyOption)(e),h.emptyOption[0].nodeType===Ci?(h.hasEmptyOption=!1,h.registerOption=function(e,t){""===t.val()&&(h.hasEmptyOption=!0,h.emptyOption=t,h.emptyOption.removeClass("ng-scope"),m.$render(),t.on("$destroy",function(){h.hasEmptyOption=!1,h.emptyOption=void 0}))}):h.emptyOption.removeClass("ng-scope")),r.empty(),f(),e.$watchCollection(C.getWatchables,f)}var u=e.document.createElement("option"),l=e.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=m},post:s}}}],Fa=["$locale","$interpolate","$log",function(e,t,n){var r=/^when(Minus)?(.+)$/;return{link:function(i,a,s){function u(e){a.text(e||"")}var l,c=s.count,p=s.$attr.when&&a.attr(s.$attr.when),d=s.offset||0,f=i.$eval(p)||{},h={},g=t.startSymbol(),$=t.endSymbol(),v=g+c+"-"+d+$,y=si.noop;o(s,function(e,t){var n=r.exec(t);if(n){var i=(n[1]?"-":"")+Yr(n[2]);f[i]=a.attr(s.$attr[t])}}),o(f,function(e,n){h[n]=t(e.replace(/{}/g,v))}),i.$watch(c,function(t){var r=parseFloat(t),o=li(r);if(o||r in f||(r=e.pluralCat(r-d)),!(r===l||o&&li(l))){y();var a=h[r];b(a)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),y=m,u()):y=i.$watch(a,u),l=r}})}}}],La=["$parse","$animate","$compile",function(e,n,r){var a=t("ngRepeat"),s=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0==(1&t))},u=function(e){return e.clone[0]},l=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(t,c){var p=c.ngRepeat,d=r.$$createComment("end ngRepeat",p),f=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw a("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var h=f[1],m=f[2],g=f[3],$=f[4];if(!(f=h.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw a("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",h);var v=f[3]||f[1],b=f[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw a("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",g);var y,w,x,C,k={$id:nt};return $?y=e($):(x=function(e,t){return nt(t)},C=function(e){return e}),function(e,t,r,c,f){y&&(w=function(t,n,r){return b&&(k[b]=t),k[v]=n,k.$index=r,y(e,k)});var h=$e();e.$watchCollection(m,function(r){var c,m,$,y,k,S,D,E,O,T,A,M,P=t[0],I=$e();if(g&&(e[g]=r),i(r))O=r,E=w||x;else{E=w||C,O=[];for(var N in r)Br.call(r,N)&&"$"!==N.charAt(0)&&O.push(N)}for(y=O.length,A=new Array(y),c=0;c<y;c++)if(k=r===O?c:O[c],S=r[k],D=E(k,S,c),h[D])T=h[D],delete h[D],I[D]=T,A[c]=T;else{if(I[D])throw o(A,function(e){e&&e.scope&&(h[e.id]=e)}),a("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,D,S);A[c]={id:D,scope:void 0,clone:void 0},I[D]=!0}for(var U in h){if(T=h[U],M=ge(T.clone),n.leave(M),M[0].parentNode)for(c=0,m=M.length;c<m;c++)M[c].$$NG_REMOVED=!0;T.scope.$destroy()}for(c=0;c<y;c++)if(k=r===O?c:O[c],S=r[k],T=A[c],T.scope){$=P;do{$=$.nextSibling}while($&&$.$$NG_REMOVED);u(T)!==$&&n.move(ge(T.clone),null,P),P=l(T),s(T.scope,c,v,S,b,k,y)}else f(function(e,t){T.scope=t;var r=d.cloneNode(!1);e[e.length++]=r,n.enter(e,null,P),P=r,T.clone=e,I[T.id]=T,s(T.scope,c,v,S,b,k,y)});h=I})}}}}],_a=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ha=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ba=fr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Wa=["$animate","$compile",function(e,t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],l=[],c=[],p=[],d=function(e,t){return function(n){!1!==n&&e.splice(t,1)}};n.$watch(s,function(n){for(var r,i;c.length;)e.cancel(c.pop());for(r=0,i=p.length;r<i;++r){var s=ge(l[r].clone);p[r].$destroy();(c[r]=e.leave(s)).done(d(c,r))}l.length=0,p.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){p.push(i);var o=n.element;r[r.length++]=t.$$createComment("end ngSwitchWhen");var a={clone:r};l.push(a),e.enter(r,o.parent(),o)})})})}}}],Ya=fr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){o(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(e,t,n){return n[t-1]!==e}),function(e){r.cases["!"+e]=r.cases["!"+e]||[],r.cases["!"+e].push({transclude:i,element:t})})}}),Ga=fr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ka=t("ngTransclude"),Ja=["$compile",function(e){return{restrict:"EAC",terminal:!0,compile:function(t){var n=e(t.contents());return t.empty(),function(e,t,r,i,o){function a(e,n){e.length&&u(e)?t.append(e):(s(),n.$destroy())}function s(){n(e,function(e){t.append(e)})}function u(e){for(var t=0,n=e.length;t<n;t++){var r=e[t];if(r.nodeType!==xi||r.nodeValue.trim())return!0}}if(!o)throw Ka("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",ee(t));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var l=r.ngTransclude||r.ngTranscludeSlot;o(a,null,l),l&&!o.isSlotFilled(l)&&s()}}}}],Za=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"===n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Qa={$setViewValue:m,$render:m},Xa=["$element","$scope",function(t,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(e){u||(u=!0,n.$$postDigest(function(){n.$$destroyed||(u=!1,o.ngModelCtrl.$setViewValue(o.readValue()),e&&o.ngModelCtrl.$render())}))}var o=this,a=new Hi;o.selectValueMap={},o.ngModelCtrl=Qa,o.multiple=!1,o.unknownOption=Qr(e.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(e){var n=o.generateUnknownOptionValue(e);o.unknownOption.val(n),t.prepend(o.unknownOption),_r(o.unknownOption,!0),t.val(n)},o.updateUnknownOption=function(e){var n=o.generateUnknownOptionValue(e);o.unknownOption.val(n),_r(o.unknownOption,!0),t.val(n)},o.generateUnknownOptionValue=function(e){return"? "+nt(e)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(t.val(""),_r(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&o.emptyOption.removeAttr("selected")},n.$on("$destroy",function(){o.renderUnknownOption=m}),o.readValue=function(){var e=t.val(),n=e in o.selectValueMap?o.selectValueMap[e]:e;return o.hasOption(n)?n:null},o.writeValue=function(e){var n=t[0].options[t[0].selectedIndex];if(n&&_r(Qr(n),!1),o.hasOption(e)){o.removeUnknownOption();var r=nt(e);t.val(r in o.selectValueMap?r:e);var i=t[0].options[t[0].selectedIndex];_r(Qr(i),!0)}else null==e&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(e):o.renderUnknownOption(e)},o.addOption=function(e,t){if(t[0].nodeType!==Ci){he(e,'"option value"'),""===e&&(o.hasEmptyOption=!0,o.emptyOption=t);var n=a.get(e)||0;a.set(e,n+1),r()}},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.delete(e),""===e&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(e,t-1))},o.hasOption=function(e){return!!a.get(e)};var s=!1,u=!1;o.registerOption=function(e,t,n,a,s){if(n.$attr.ngValue){var u,l=NaN;n.$observe("value",function(e){var n,r=t.prop("selected");y(l)&&(o.removeOption(u),delete o.selectValueMap[l],n=!0),l=nt(e),u=e,o.selectValueMap[l]=e,o.addOption(e,t),t.attr("value",l),n&&r&&i()})}else a?n.$observe("value",function(e){o.readValue();var n,r=t.prop("selected");y(u)&&(o.removeOption(u),n=!0),u=e,o.addOption(e,t),n&&r&&i()}):s?e.$watch(s,function(e,r){n.$set("value",e);var a=t.prop("selected");r!==e&&o.removeOption(r),o.addOption(e,t),r&&a&&i()}):o.addOption(n.value,t);n.$observe("disabled",function(e){("true"===e||e&&t.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),t.on("$destroy",function(){var e=o.readValue(),t=n.value;o.removeOption(t),r(),(o.multiple&&e&&-1!==e.indexOf(t)||e===t)&&i(!0)})}}],es=function(){function e(e,t,n,r){var i=r[0],a=r[1];if(!a)return void(i.registerOption=m);if(i.ngModelCtrl=a,t.on("change",function(){i.removeUnknownOption(),e.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var e=[];return o(t.find("option"),function(t){if(t.selected&&!t.disabled){var n=t.value;e.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),e},i.writeValue=function(e){o(t.find("option"),function(t){var n=!!e&&(q(e,t.value)||q(e,i.selectValueMap[t.value]));n!==t.selected&&_r(Qr(t),n)})};var s,u=NaN;e.$watch(function(){u!==a.$viewValue||H(s,a.$viewValue)||(s=ye(a.$viewValue),a.$render()),u=a.$viewValue}),a.$isEmpty=function(e){return!e||0===e.length}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:Xa,priority:1,link:{pre:e,post:t}}},ts=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){var r,i;return y(n.ngValue)||(y(n.value)?r=e(n.value,!0):(i=e(t.text(),!0))||n.$set("value",t.text())),function(e,t,n){var o=t.parent(),a=o.data("$selectController")||o.parent().data("$selectController");a&&a.registerOption(e,t,n,r,i)}}}}],ns=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},rs=function(){return{restrict:"A",require:"?ngModel",link:function(e,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(e){if(C(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw t("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,e,ee(n));o=e||void 0,i.$validate()}),i.$validators.pattern=function(e,t){return i.$isEmpty(t)||b(o)||o.test(t)}}}}},is=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=f(e);i=li(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return i<0||r.$isEmpty(t)||t.length<=i}}}}},os=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};if(e.angular.bootstrap)return void(e.console&&console.log("WARNING: Tried to load angular more than once."));!function(){var t;if(!yi){var n=mi();Xr=b(n)?e.jQuery:n?e[n]:void 0,Xr&&Xr.fn.on?(Qr=Xr,p(Xr.fn,{scope:Ri.scope,isolateScope:Ri.isolateScope,controller:Ri.controller,injector:Ri.injector,inheritedData:Ri.inheritedData}),t=Xr.cleanData,Xr.cleanData=function(e){for(var n,r,i=0;null!=(r=e[i]);i++)(n=Xr._data(r,"events"))&&n.$destroy&&Xr(r).triggerHandler("$destroy");t(e)}):Qr=Ie,si.element=Qr,yi=!0}}(),function(r){p(r,{errorHandlingConfig:n,bootstrap:ue,copy:L,extend:p,merge:d,equals:H,element:Qr,forEach:o,injector:ut,noop:m,bind:Y,toJson:K,fromJson:J,identity:g,isUndefined:b,isDefined:y,isString:C,isFunction:D,isObject:w,isNumber:k,isElement:V,isArray:ci,version:Di,isDate:S,lowercase:Yr,uppercase:Gr,callbacks:{$$counter:0},getTestability:ce,reloadWithDebugInfo:le,$$minErr:t,$$csp:hi,$$encodeUriSegment:ie,$$encodeUriQuery:oe,$$stringify:ve}),ei=be(e),ei("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:En}),e.provider("$compile",bt).directive({a:Yo,input:ca,textarea:ca,form:Qo,script:Za,select:es,option:ts,ngBind:fa,ngBindHtml:ma,ngBindTemplate:ha,ngClass:$a,ngClassEven:ba,ngClassOdd:va,ngCloak:ya,ngController:wa,ngForm:Xo,ngHide:Ha,ngIf:ka,ngInclude:Sa,ngInit:Ea,ngNonBindable:Va,ngPluralize:Fa,ngRepeat:La,ngShow:_a,ngStyle:Ba,ngSwitch:Wa,ngSwitchWhen:Ya,ngSwitchDefault:Ga,ngOptions:qa,ngTransclude:Ja,ngModel:Ua,ngList:Oa,ngChange:ga,pattern:rs,ngPattern:rs,required:ns,ngRequired:ns,minlength:os,ngMinlength:os,maxlength:is,ngMaxlength:is,ngValue:da,ngModelOptions:ja}).directive({ngInclude:Da}).directive(Go).directive(xa),e.provider({$anchorScroll:lt,$animate:no,$animateCss:oo,$$animateJs:eo,$$animateQueue:to,$$AnimateRunner:io,$$animateAsyncRun:ro,$browser:mt,$cacheFactory:gt,$controller:St,$document:Dt,$$isDocumentHidden:Et,$exceptionHandler:Ot,$filter:Ln,$$forceReflow:fo,$interpolate:Lt,$interval:_t,$http:zt,$httpParamSerializer:At,$httpParamSerializerJQLike:Mt,$httpBackend:qt,$xhrFactory:Rt,$jsonpCallbacks:wo,$location:on,$log:an,$parse:wn,$rootScope:Dn,$q:xn,$$q:Cn,$sce:Pn,$sceDelegate:Mn,$sniffer:In,$templateCache:$t,$templateRequest:Nn,$$testability:Un,$timeout:jn,$window:Rn,$$rAF:Sn,$$jqLite:tt,$$Map:Bi,$$cookieReader:Fn})}]).info({angularVersion:"1.6.4"})}(si),si.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function n(e,n){var r=n;void 0===r&&(r=Math.min(t(e),3));var i=Math.pow(10,r);return{v:r,f:(e*i|0)%i}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var i=0|e,o=n(e,t);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),Qr(function(){se(e.document,ue)})}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(e,t,n){"use strict";function r(e,t){return B(new(B(function(){},{prototype:e})),t)}function i(e){return H(arguments,function(t){t!==e&&H(t,function(t,n){e.hasOwnProperty(n)||(e[n]=t)})}),e}function o(e,t){var n=[];for(var r in e.path){if(e.path[r]!==t.path[r])break;n.push(e.path[r])}return n}function a(e){if(Object.keys)return Object.keys(e);var t=[];return H(e,function(e,n){t.push(n)}),t}function s(e,t){if(Array.prototype.indexOf)return e.indexOf(t,Number(arguments[2])||0);var n=e.length>>>0,r=Number(arguments[2])||0;for(r=r<0?Math.ceil(r):Math.floor(r),r<0&&(r+=n);r<n;r++)if(r in e&&e[r]===t)return r;return-1}function u(e,t,n,r){var i,u=o(n,r),l={},c=[];for(var p in u)if(u[p]&&u[p].params&&(i=a(u[p].params),i.length))for(var d in i)s(c,i[d])>=0||(c.push(i[d]),l[i[d]]=e[i[d]]);return B({},l,t)}function l(e,t,n){if(!n){n=[];for(var r in e)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(e[o]!=t[o])return!1}return!0}function c(e,t){var n={};return H(e,function(e){n[e]=t[e]}),n}function p(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return H(n,function(n){n in e&&(t[n]=e[n])}),t}function d(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in e)-1==s(n,r)&&(t[r]=e[r]);return t}function f(e,t){var n=_(e),r=n?[]:{};return H(e,function(e,i){t(e,i)&&(r[n?r.length:i]=e)}),r}function h(e,t){var n=_(e)?[]:{};return H(e,function(e,r){n[r]=t(e,r)}),n}function m(e){return e.then(n,function(){})&&e}function g(e,t){var r=1,o=2,u={},l=[],c=u,p=B(e.when(u),{$$promises:u,$$values:u});this.study=function(u){function f(e,n){if(b[n]!==o){if(v.push(n),b[n]===r)throw v.splice(0,s(v,n)),new Error("Cyclic dependency: "+v.join(" -> "));if(b[n]=r,F(e))$.push(n,[function(){return t.get(e)}],l);else{var i=t.annotate(e);H(i,function(e){e!==n&&u.hasOwnProperty(e)&&f(u[e],e)}),$.push(n,e,i)}v.pop(),b[n]=o}}function h(e){return L(e)&&e.then&&e.$$promises}if(!L(u))throw new Error("'invocables' must be an object");var g=a(u||{}),$=[],v=[],b={};return H(u,f),u=v=b=null,function(r,o,a){function s(){--y||(w||i(b,o.$$values),f.$$values=b,f.$$promises=f.$$promises||!0,delete f.$$inheritedValues,l.resolve(b))}function u(e){f.$$failure=e,l.reject(e)}if(h(r)&&a===n&&(a=o,o=r,r=null),r){if(!L(r))throw new Error("'locals' must be an object")}else r=c;if(o){if(!h(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=p;var l=e.defer(),f=m(l.promise),v=f.$$promises={},b=B({},r),y=1+$.length/3,w=!1;if(m(f),R(o.$$failure))return u(o.$$failure),f;o.$$inheritedValues&&i(b,d(o.$$inheritedValues,g)),B(v,o.$$promises),o.$$values?(w=i(b,d(o.$$values,g)),f.$$inheritedValues=d(o.$$values,g),s()):(o.$$inheritedValues&&(f.$$inheritedValues=d(o.$$inheritedValues,g)),o.then(s,u));for(var x=0,C=$.length;x<C;x+=3)r.hasOwnProperty($[x])?s():function(n,i,o){function l(e){p.reject(e),u(e)}function c(){if(!R(f.$$failure))try{p.resolve(t.invoke(i,a,b)),p.promise.then(function(e){b[n]=e,s()},l)}catch(e){l(e)}}var p=e.defer(),d=0;H(o,function(e){v.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&(d++,v[e].then(function(t){b[e]=t,--d||c()},l))}),d||c(),v[n]=m(p.promise)}($[x],$[x+1],$[x+2]);return f}},this.resolve=function(e,t,n,r){return this.study(e)(t,n,r)}}function $(){var e=t.version.minor<3;this.shouldUnsafelyUseHttp=function(t){e=!!t},this.$get=["$http","$templateCache","$injector",function(t,n,r){return new v(t,n,r,e)}]}function v(e,t,n,r){this.fromConfig=function(e,t,n){return R(e.template)?this.fromString(e.template,t):R(e.templateUrl)?this.fromUrl(e.templateUrl,t):R(e.templateProvider)?this.fromProvider(e.templateProvider,t,n):null},this.fromString=function(e,t){return q(e)?e(t):e},this.fromUrl=function(i,o){return q(i)&&(i=i(o)),null==i?null:r?e.get(i,{cache:t,headers:{Accept:"text/html"}}).then(function(e){return e.data}):n.get("$templateRequest")(i)},this.fromProvider=function(e,t,r){return n.invoke(e,null,r||{params:t})}}function b(e,t,i){function o(t,n,r,i){if(g.push(t),h[t])return h[t];if(!/^\w+([-.]+\w+)*(?:\[\])?$/.test(t))throw new Error("Invalid parameter name '"+t+"' in pattern '"+e+"'");if(m[t])throw new Error("Duplicate parameter name '"+t+"' in pattern '"+e+"'");return m[t]=new G.Param(t,n,r,i),m[t]}function a(e,t,n,r){var i=["",""],o=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return o;switch(n){case!1:i=["(",")"+(r?"?":"")];break;case!0:o=o.replace(/\/$/,""),i=["(?:/(",")|/)?"];break;default:i=["("+n+"|",")?"]}return o+i[0]+t+i[1]}function s(i,o){var a,s,u,l,c;return a=i[2]||i[3],c=t.params[a],u=e.substring(d,i.index),s=o?i[4]:i[4]||("*"==i[1]?".*":null),s&&(l=G.type(s)||r(G.type("string"),{pattern:new RegExp(s,t.caseInsensitive?"i":n)})),{id:a,regexp:s,segment:u,type:l,cfg:c}}t=B({params:{}},L(t)?t:{});var u,l=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,c=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,p="^",d=0,f=this.segments=[],h=i?i.params:{},m=this.params=i?i.params.$$new():new G.ParamSet,g=[];this.source=e;for(var $,v,b;(u=l.exec(e))&&($=s(u,!1),!($.segment.indexOf("?")>=0));)v=o($.id,$.type,$.cfg,"path"),p+=a($.segment,v.type.pattern.source,v.squash,v.isOptional),f.push($.segment),d=l.lastIndex;b=e.substring(d);var y=b.indexOf("?");if(y>=0){var w=this.sourceSearch=b.substring(y);if(b=b.substring(0,y),this.sourcePath=e.substring(0,d+y),w.length>0)for(d=0;u=c.exec(w);)$=s(u,!0),v=o($.id,$.type,$.cfg,"search"),d=l.lastIndex}else this.sourcePath=e,this.sourceSearch="";p+=a(b)+(!1===t.strict?"/?":"")+"$",f.push(b),this.regexp=new RegExp(p,t.caseInsensitive?"i":n),this.prefix=f[0],this.$$paramNames=g}function y(e){B(this,e)}function w(){function e(e){return null!=e?e.toString().replace(/(~|\/)/g,function(e){return{"~":"~~","/":"~2F"}[e]}):e}function i(e){return null!=e?e.toString().replace(/(~~|~2F)/g,function(e){return{"~~":"~","~2F":"/"}[e]}):e}function o(){return{strict:m,caseInsensitive:d}}function u(e){return q(e)||_(e)&&q(e[e.length-1])}function l(){for(;x.length;){var e=x.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");t.extend($[e.name],p.invoke(e.def))}}function c(e){B(this,e||{})}G=this;var p,d=!1,m=!0,g=!1,$={},v=!0,x=[],C={string:{encode:e,decode:i,is:function(e){return null==e||!R(e)||"string"==typeof e},pattern:/[^\/]*/},int:{encode:e,decode:function(e){return parseInt(e,10)},is:function(e){return e!==n&&null!==e&&this.decode(e.toString())===e},pattern:/\d+/},bool:{encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:function(e){return!0===e||!1===e},pattern:/0|1/},date:{encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):n},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):n},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(e,t){return this.is(e)&&this.is(t)&&e.toISOString()===t.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:t.toJson,decode:t.fromJson,is:t.isObject,equals:t.equals,pattern:/[^\/]*/},any:{encode:t.identity,decode:t.identity,equals:t.equals,pattern:/.*/}};w.$$getDefaultValue=function(e){if(!u(e.value))return e.value;if(!p)throw new Error("Injectable functions cannot be called at configuration time");return p.invoke(e.value)},this.caseInsensitive=function(e){return R(e)&&(d=e),d},this.strictMode=function(e){return R(e)&&(m=e),m},this.defaultSquashPolicy=function(e){if(!R(e))return g;if(!0!==e&&!1!==e&&!F(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return g=e,e},this.compile=function(e,t){return new b(e,B(o(),t))},this.isMatcher=function(e){if(!L(e))return!1;var t=!0;return H(b.prototype,function(n,r){q(n)&&(t=t&&R(e[r])&&q(e[r]))}),t},this.type=function(e,t,n){if(!R(t))return $[e];if($.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return $[e]=new y(B({name:e},t)),n&&(x.push({name:e,def:n}),v||l()),this},H(C,function(e,t){$[t]=new y(B({name:t},e))}),$=r($,{}),this.$get=["$injector",function(e){return p=e,v=!1,l(),H(C,function(e,t){$[t]||($[t]=new y(e))}),this}],this.Param=function(e,r,i,o){function l(){if(!p)throw new Error("Injectable functions cannot be called at configuration time");var e=p.invoke(i.$$fn);if(null!==e&&e!==n&&!m.type.is(e))throw new Error("Default value ("+e+") for parameter '"+m.id+"' is not an instance of Type ("+m.type.name+")");return e}function c(e){function t(e){return function(t){return t.from===e}}return e=function(e){var n=h(f(m.replace,t(e)),function(e){return e.to});return n.length?n[0]:e}(e),R(e)?m.type.$normalize(e):l()}function d(){return"{Param:"+e+" "+r+" squash: '"+w+"' optional: "+b+"}"}var m=this;i=function(e){var t=L(e)?a(e):[];return-1===s(t,"value")&&-1===s(t,"type")&&-1===s(t,"squash")&&-1===s(t,"array")&&(e={value:e}),e.$$fn=u(e.value)?e.value:function(){return e.value},e}(i),r=function(n,r,i){if(n.type&&r)throw new Error("Param '"+e+"' has two type configurations.");return r||(n.type?t.isString(n.type)?$[n.type]:n.type instanceof y?n.type:new y(n.type):"config"===i?$.any:$.string)}(i,r,o);var v=function(){var t={array:"search"===o&&"auto"},n=e.match(/\[\]$/)?{array:!0}:{};return B(t,n,i).array}();r=v?r.$asArray(v,"search"===o):r,"string"!==r.name||v||"path"!==o||i.value!==n||(i.value="");var b=i.value!==n,w=function(e,t){var n=e.squash;if(!t||!1===n)return!1;if(!R(n)||null==n)return g;if(!0===n||F(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}(i,b),x=function(e,t,r,i){var o,a,u=[{from:"",to:r||t?n:""},{from:null,to:r||t?n:""}];return o=_(e.replace)?e.replace:[],F(i)&&o.push({from:i,to:n}),a=h(o,function(e){return e.from}),f(u,function(e){return-1===s(a,e.from)}).concat(o)}(i,v,b,w);B(this,{id:e,type:r,location:o,array:v,squash:w,replace:x,isOptional:b,value:c,dynamic:n,config:i,toString:d})},c.prototype={$$new:function(){return r(this,B(new c,{$$parent:this}))},$$keys:function(){for(var e=[],t=[],n=this,r=a(c.prototype);n;)t.push(n),n=n.$$parent;return t.reverse(),H(t,function(t){H(a(t),function(t){-1===s(e,t)&&-1===s(r,t)&&e.push(t)})}),e},$$values:function(e){var t={},n=this;return H(n.$$keys(),function(r){t[r]=n[r].value(e&&e[r])}),t},$$equals:function(e,t){var n=!0,r=this;return H(r.$$keys(),function(i){var o=e&&e[i],a=t&&t[i];r[i].type.equals(o,a)||(n=!1)}),n},$$validates:function(e){var r,i,o,a,s,u=this.$$keys();for(r=0;r<u.length&&(i=this[u[r]],(o=e[u[r]])!==n&&null!==o||!i.isOptional);r++){if(a=i.type.$normalize(o),!i.type.is(a))return!1;if(s=i.type.encode(a),t.isString(s)&&!i.type.pattern.exec(s))return!1}return!0},$$parent:n},this.ParamSet=c}function x(e,r){function i(e){var t=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);return null!=t?t[1].replace(/\\(.)/g,"$1"):""}function o(e,t){return e.replace(/\$(\$|\d{1,2})/,function(e,n){return t["$"===n?0:Number(n)]})}function a(e,t,n){if(!n)return!1;var r=e.invoke(t,t,{$match:n});return!R(r)||r}function s(r,i,o,a,s){function d(e,t,n){return"/"===g?e:t?g.slice(0,-1)+e:n?g.slice(1)+e:e}function f(e){function t(e){var t=e(o,r);return!!t&&(F(t)&&r.replace().url(t),!0)}if(!e||!e.defaultPrevented){m&&r.url();m=n;var i,a=l.length;for(i=0;i<a;i++)if(t(l[i]))return;c&&t(c)}}function h(){return u=u||i.$on("$locationChangeSuccess",f)}var m,g=a.baseHref(),$=r.url();return p||h(),{sync:function(){f()},listen:function(){return h()},update:function(e){if(e)return void($=r.url());r.url()!==$&&(r.url($),r.replace())},push:function(e,t,i){var o=e.format(t||{});null!==o&&t&&t["#"]&&(o+="#"+t["#"]),r.url(o),m=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var a=e.html5Mode();t.isObject(a)&&(a=a.enabled),a=a&&s.history;var u=n.format(i);if(o=o||{},a||null===u||(u="#"+e.hashPrefix()+u),null!==u&&i&&i["#"]&&(u+="#"+i["#"]),u=d(u,a,o.absolute),!o.absolute||!u)return u;var l=!a&&u?"/":"",c=r.port();return c=80===c||443===c?"":":"+c,[r.protocol(),"://",r.host(),c,l,u].join("")}}}var u,l=[],c=null,p=!1;this.rule=function(e){if(!q(e))throw new Error("'rule' must be a function");return l.push(e),this},this.otherwise=function(e){if(F(e)){var t=e;e=function(){return t}}else if(!q(e))throw new Error("'rule' must be a function")
;return c=e,this},this.when=function(e,t){var n,s=F(t);if(F(e)&&(e=r.compile(e)),!s&&!q(t)&&!_(t))throw new Error("invalid 'handler' in when()");var u={matcher:function(e,t){return s&&(n=r.compile(t),t=["$match",function(e){return n.format(e)}]),B(function(n,r){return a(n,t,e.exec(r.path(),r.search()))},{prefix:F(e.prefix)?e.prefix:""})},regex:function(e,t){if(e.global||e.sticky)throw new Error("when() RegExp must not be global or sticky");return s&&(n=t,t=["$match",function(e){return o(n,e)}]),B(function(n,r){return a(n,t,e.exec(r.path()))},{prefix:i(e)})}},l={matcher:r.isMatcher(e),regex:e instanceof RegExp};for(var c in l)if(l[c])return this.rule(u[c](e,t));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(e){e===n&&(e=!0),p=e},this.$get=s,s.$inject=["$location","$rootScope","$injector","$browser","$sniffer"]}function C(e,i){function o(e){return 0===e.indexOf(".")||0===e.indexOf("^")}function d(e,t){if(!e)return n;var r=F(e),i=r?e:e.name;if(o(i)){if(!t)throw new Error("No reference point given for path '"+i+"'");t=d(t);for(var a=i.split("."),s=0,u=a.length,l=t;s<u;s++)if(""!==a[s]||0!==s){if("^"!==a[s])break;if(!l.parent)throw new Error("Path '"+i+"' not valid for state '"+t.name+"'");l=l.parent}else l=t;a=a.slice(s).join("."),i=l.name+(l.name&&a?".":"")+a}var c=D[i];return!c||!r&&(r||c!==e&&c.self!==e)?n:c}function f(e,t){E[e]||(E[e]=[]),E[e].push(t)}function g(e){for(var t=E[e]||[];t.length;)$(t.shift())}function $(t){t=r(t,{self:t,resolve:t.resolve||{},toString:function(){return this.name}});var n=t.name;if(!F(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(D.hasOwnProperty(n))throw new Error("State '"+n+"' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):F(t.parent)?t.parent:L(t.parent)&&F(t.parent.name)?t.parent.name:"";if(i&&!D[i])return f(i,t.self);for(var o in T)q(T[o])&&(t[o]=T[o](t,T.$delegates[o]));return D[n]=t,!t[O]&&t.url&&e.when(t.url,["$match","$stateParams",function(e,n){S.$current.navigable==t&&l(e,n)||S.transitionTo(t,e,{inherit:!0,location:!1})}]),g(n),t}function v(e){return e.indexOf("*")>-1}function b(e){for(var t=e.split("."),n=S.$current.name.split("."),r=0,i=t.length;r<i;r++)"*"===t[r]&&(n[r]="*");return"**"===t[0]&&(n=n.slice(s(n,t[1])),n.unshift("**")),"**"===t[t.length-1]&&(n.splice(s(n,t[t.length-2])+1,Number.MAX_VALUE),n.push("**")),t.length==n.length&&n.join("")===t.join("")}function y(e,t){return F(e)&&!R(t)?T[e]:q(t)&&F(e)?(T[e]&&!T.$delegates[e]&&(T.$delegates[e]=T[e]),T[e]=t,this):this}function w(e,t){return L(e)?t=e:t.name=e,$(t),this}function x(e,i,o,s,l,p,f,g,$){function y(t,n,r,o){var a=e.$broadcast("$stateNotFound",t,n,r);if(a.defaultPrevented)return f.update(),A;if(!a.retry)return null;if(o.$retry)return f.update(),M;var s=S.transition=i.when(a.retry);return s.then(function(){return s!==S.transition?(e.$broadcast("$stateChangeCancel",t.to,t.toParams,n,r),E):(t.options.$retry=!0,S.transitionTo(t.to,t.toParams,t.options))},function(){return A}),f.update(),s}function w(e,n,r,a,u,p){function d(){var n=[];return H(e.views,function(r,i){var a=r.resolve&&r.resolve!==e.resolve?r.resolve:{};a.$template=[function(){return o.load(i,{view:r,locals:u.globals,params:f,notify:p.notify})||""}],n.push(l.resolve(a,u.globals,u.resolve,e).then(function(n){if(q(r.controllerProvider)||_(r.controllerProvider)){var o=t.extend({},a,u.globals);n.$$controller=s.invoke(r.controllerProvider,null,o)}else n.$$controller=r.controller;n.$$state=e,n.$$controllerAs=r.controllerAs,n.$$resolveAs=r.resolveAs,u[i]=n}))}),i.all(n).then(function(){return u.globals})}var f=r?n:c(e.params.$$keys(),n),h={$stateParams:f};u.resolve=l.resolve(e.resolve,h,u.resolve,e);var m=[u.resolve.then(function(e){u.globals=e})];return a&&m.push(a),i.all(m).then(d).then(function(e){return u})}var x=new Error("transition superseded"),E=m(i.reject(x)),T=m(i.reject(new Error("transition prevented"))),A=m(i.reject(new Error("transition aborted"))),M=m(i.reject(new Error("transition failed")));return k.locals={resolve:null,globals:{$stateParams:{}}},S={params:{},current:k.self,$current:k,transition:null},S.reload=function(e){return S.transitionTo(S.current,p,{reload:e||!0,inherit:!1,notify:!0})},S.go=function(e,t,n){return S.transitionTo(e,t,B({inherit:!0,relative:S.$current},n))},S.transitionTo=function(t,n,o){n=n||{},o=B({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var a,l=S.$current,h=S.params,g=l.path,$=d(t,o.relative),v=n["#"];if(!R($)){var b={to:t,toParams:n,options:o},D=y(b,l.self,h,o);if(D)return D;if(t=b.to,n=b.toParams,o=b.options,$=d(t,o.relative),!R($)){if(!o.relative)throw new Error("No such state '"+t+"'");throw new Error("Could not resolve '"+t+"' from state '"+o.relative+"'")}}if($[O])throw new Error("Cannot transition to abstract state '"+t+"'");if(o.inherit&&(n=u(p,n||{},S.$current,$)),!$.params.$$validates(n))return M;n=$.params.$$values(n),t=$;var A=t.path,P=0,I=A[P],N=k.locals,U=[];if(o.reload){if(F(o.reload)||L(o.reload)){if(L(o.reload)&&!o.reload.name)throw new Error("Invalid reload state object");var j=!0===o.reload?g[0]:d(o.reload);if(o.reload&&!j)throw new Error("No such reload state '"+(F(o.reload)?o.reload:o.reload.name)+"'");for(;I&&I===g[P]&&I!==j;)N=U[P]=I.locals,P++,I=A[P]}}else for(;I&&I===g[P]&&I.ownParams.$$equals(n,h);)N=U[P]=I.locals,P++,I=A[P];if(C(t,n,l,h,N,o))return v&&(n["#"]=v),S.params=n,W(S.params,p),W(c(t.params.$$keys(),p),t.locals.globals.$stateParams),o.location&&t.navigable&&t.navigable.url&&(f.push(t.navigable.url,n,{$$avoidResync:!0,replace:"replace"===o.location}),f.update(!0)),S.transition=null,i.when(S.current);if(n=c(t.params.$$keys(),n||{}),v&&(n["#"]=v),o.notify&&e.$broadcast("$stateChangeStart",t.self,n,l.self,h,o).defaultPrevented)return e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),null==S.transition&&f.update(),T;for(var V=i.when(N),z=P;z<A.length;z++,I=A[z])N=U[z]=r(N),V=w(I,n,I===t,V,N,o);var q=S.transition=V.then(function(){var r,i,a;if(S.transition!==q)return e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E;for(r=g.length-1;r>=P;r--)a=g[r],a.self.onExit&&s.invoke(a.self.onExit,a.self,a.locals.globals),a.locals=null;for(r=P;r<A.length;r++)i=A[r],i.locals=U[r],i.self.onEnter&&s.invoke(i.self.onEnter,i.self,i.locals.globals);return S.transition!==q?(e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E):(S.$current=t,S.current=t.self,S.params=n,W(S.params,p),S.transition=null,o.location&&t.navigable&&f.push(t.navigable.url,t.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&e.$broadcast("$stateChangeSuccess",t.self,n,l.self,h),f.update(!0),S.current)}).then(null,function(r){return r===x?E:S.transition!==q?(e.$broadcast("$stateChangeCancel",t.self,n,l.self,h),E):(S.transition=null,a=e.$broadcast("$stateChangeError",t.self,n,l.self,h,r),a.defaultPrevented||f.update(),i.reject(r))});return m(q),q},S.is=function(e,t,r){r=B({relative:S.$current},r||{});var i=d(e,r.relative);return R(i)?S.$current===i&&(!t||a(t).reduce(function(e,n){var r=i.params[n];return e&&!r||r.type.equals(p[n],t[n])},!0)):n},S.includes=function(e,t,r){if(r=B({relative:S.$current},r||{}),F(e)&&v(e)){if(!b(e))return!1;e=S.$current.name}var i=d(e,r.relative);if(!R(i))return n;if(!R(S.$current.includes[i.name]))return!1;if(!t)return!0;for(var o=a(t),s=0;s<o.length;s++){var u=o[s],l=i.params[u];if(l&&!l.type.equals(p[u],t[u]))return!1}return a(t).reduce(function(e,n){var r=i.params[n];return e&&!r||r.type.equals(p[n],t[n])},!0)},S.href=function(e,t,r){r=B({lossy:!0,inherit:!0,absolute:!1,relative:S.$current},r||{});var i=d(e,r.relative);if(!R(i))return null;r.inherit&&(t=u(p,t||{},S.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?f.href(o.url,c(i.params.$$keys().concat("#"),t||{}),{absolute:r.absolute}):null},S.get=function(e,t){if(0===arguments.length)return h(a(D),function(e){return D[e].self});var n=d(e,t||S.$current);return n&&n.self?n.self:null},S}function C(e,t,n,r,i,o){if(!o.reload&&e===n&&(i===n.locals||!1===e.self.reloadOnSearch&&function(e,t,n){function r(t){return"search"!=e.params[t].location}var i=e.params.$$keys().filter(r),o=p.apply({},[e.params].concat(i));return new G.ParamSet(o).$$equals(t,n)}(n,r,t)))return!0}var k,S,D={},E={},O="abstract",T={parent:function(e){if(R(e.parent)&&e.parent)return d(e.parent);var t=/^(.+)\.[^.]+$/.exec(e.name);return t?d(t[1]):k},data:function(e){return e.parent&&e.parent.data&&(e.data=e.self.data=r(e.parent.data,e.data)),e.data},url:function(e){var t=e.url,n={params:e.params||{}};if(F(t))return"^"==t.charAt(0)?i.compile(t.substring(1),n):(e.parent.navigable||k).url.concat(t,n);if(!t||i.isMatcher(t))return t;throw new Error("Invalid url '"+t+"' in state '"+e+"'")},navigable:function(e){return e.url?e:e.parent?e.parent.navigable:null},ownParams:function(e){var t=e.url&&e.url.params||new G.ParamSet;return H(e.params||{},function(e,n){t[n]||(t[n]=new G.Param(n,null,e,"config"))}),t},params:function(e){var t=p(e.ownParams,e.ownParams.$$keys());return e.parent&&e.parent.params?B(e.parent.params.$$new(),t):new G.ParamSet},views:function(e){var t={};return H(R(e.views)?e.views:{"":e},function(n,r){r.indexOf("@")<0&&(r+="@"+e.parent.name),n.resolveAs=n.resolveAs||e.resolveAs||"$resolve",t[r]=n}),t},path:function(e){return e.parent?e.parent.path.concat(e):[]},includes:function(e){var t=e.parent?B({},e.parent.includes):{};return t[e.name]=!0,t},$delegates:{}};k=$({name:"",url:"^",views:null,abstract:!0}),k.navigable=null,this.decorator=y,this.state=w,this.$get=x,x.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function k(){function e(e,t){return{load:function(e,n){var r;return n=B({template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}},n),n.view&&(r=t.fromConfig(n.view,n.params,n.locals)),r}}}this.$get=e,e.$inject=["$rootScope","$templateFactory"]}function S(){var e=!1;this.useAnchorScroll=function(){e=!0},this.$get=["$anchorScroll","$timeout",function(t,n){return e?t:function(e){return n(function(){e[0].scrollIntoView()},0,!1)}}]}function D(e,n,r,i,o){function a(e,n){if(l)return{enter:function(e,n,r){t.version.minor>2?l.enter(e,null,n).then(r):l.enter(e,null,n,r)},leave:function(e,n){t.version.minor>2?l.leave(e).then(n):l.leave(e,n)}};if(u){var r=u&&u(n,e);return{enter:function(e,t,n){r.enter(e,null,t),n()},leave:function(e,t){r.leave(e),t()}}}return function(){return{enter:function(e,t,n){t.after(e),n()},leave:function(e,t){e.remove(),t()}}}()}var s=function(){return n.has?function(e){return n.has(e)?n.get(e):null}:function(e){try{return n.get(e)}catch(e){return null}}}(),u=s("$animator"),l=s("$animate");return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,s,u){return function(n,s,l){function c(){if(d&&(d.remove(),d=null),h&&(h.$destroy(),h=null),f){var e=f.data("$uiViewAnim");v.leave(f,function(){e.$$animLeave.resolve(),d=null}),d=f,f=null}}function p(a){var p,d=O(n,l,s,i),b=d&&e.$current&&e.$current.locals[d];if(a||b!==m){p=n.$new(),m=e.$current.locals[d],p.$emit("$viewContentLoading",d);var y=u(p,function(e){var i=o.defer(),a=o.defer(),u={$animEnter:i.promise,$animLeave:a.promise,$$animLeave:a};e.data("$uiViewAnim",u),v.enter(e,s,function(){i.resolve(),h&&h.$emit("$viewContentAnimationEnded"),(t.isDefined($)&&!$||n.$eval($))&&r(e)}),c()});f=y,h=p,h.$emit("$viewContentLoaded",d),h.$eval(g)}}var d,f,h,m,g=l.onload||"",$=l.autoscroll,v=a(l,n);s.inheritedData("$uiView");n.$on("$stateChangeSuccess",function(){p(!1)}),p(!0)}}}}function E(e,n,r,i){return{restrict:"ECA",priority:-400,compile:function(o){var a=o.html();return o.empty?o.empty():o[0].innerHTML=null,function(o,s,u){var l=r.$current,c=O(o,u,s,i),p=l&&l.locals[c];if(!p)return s.html(a),void e(s.contents())(o);s.data("$uiView",{name:c,state:p.$$state}),s.html(p.$template?p.$template:a);var d=t.extend({},p);o[p.$$resolveAs]=d;var f=e(s.contents());if(p.$$controller){p.$scope=o,p.$element=s;var h=n(p.$$controller,p);p.$$controllerAs&&(o[p.$$controllerAs]=h,o[p.$$controllerAs][p.$$resolveAs]=d),q(h.$onInit)&&h.$onInit(),s.data("$ngControllerController",h),s.children().data("$ngControllerController",h)}f(o)}}}}function O(e,t,n,r){var i=r(t.uiView||t.name||"")(e),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function T(e,t){var n,r=e.match(/^\s*({[^}]*})\s*$/);if(r&&(e=t+"("+r[1]+")"),!(n=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/))||4!==n.length)throw new Error("Invalid state ref '"+e+"'");return{state:n[1],paramExpr:n[3]||null}}function A(e){var t=e.parent().inheritedData("$uiView");if(t&&t.state&&t.state.name)return t.state}function M(e){var t="[object SVGAnimatedString]"===Object.prototype.toString.call(e.prop("href")),n="FORM"===e[0].nodeName;return{attr:n?"action":t?"xlink:href":"href",isAnchor:"A"===e.prop("tagName").toUpperCase(),clickable:!n}}function P(e,t,n,r,i){return function(o){var a=o.which||o.button,s=i();if(!(a>1||o.ctrlKey||o.metaKey||o.shiftKey||e.attr("target"))){var u=n(function(){t.go(s.state,s.params,s.options)});o.preventDefault();var l=r.isAnchor&&!s.href?1:0;o.preventDefault=function(){l--<=0&&n.cancel(u)}}}}function I(e,t){return{relative:A(e)||t.$current,inherit:!0}}function N(e,n){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(r,i,o,a){var s,u=T(o.uiSref,e.current.name),l={state:u.state,href:null,params:null},c=M(i),p=a[1]||a[0],d=null;l.options=B(I(i,e),o.uiSrefOpts?r.$eval(o.uiSrefOpts):{});var f=function(n){n&&(l.params=t.copy(n)),l.href=e.href(u.state,l.params,l.options),d&&d(),p&&(d=p.$$addStateInfo(u.state,l.params)),null!==l.href&&o.$set(c.attr,l.href)};u.paramExpr&&(r.$watch(u.paramExpr,function(e){e!==l.params&&f(e)},!0),l.params=t.copy(r.$eval(u.paramExpr))),f(),c.clickable&&(s=P(i,e,n,c,function(){return l}),i[i.on?"on":"bind"]("click",s),r.$on("$destroy",function(){i[i.off?"off":"unbind"]("click",s)}))}}}function U(e,t){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,r,i,o){function a(t){d.state=t[0],d.params=t[1],d.options=t[2],d.href=e.href(d.state,d.params,d.options),f&&f(),l&&(f=l.$$addStateInfo(d.state,d.params)),d.href&&i.$set(u.attr,d.href)}var s,u=M(r),l=o[1]||o[0],c=[i.uiState,i.uiStateParams||null,i.uiStateOpts||null],p="["+c.map(function(e){return e||"null"}).join(", ")+"]",d={state:null,params:null,options:null,href:null},f=null;n.$watch(p,a,!0),a(n.$eval(p)),u.clickable&&(s=P(r,e,t,u,function(){return d}),r[r.on?"on":"bind"]("click",s),n.$on("$destroy",function(){r[r.off?"off":"unbind"]("click",s)}))}}}function j(e,t,n){return{restrict:"A",controller:["$scope","$element","$attrs","$timeout",function(t,r,i,o){function a(t,n,i){var o=e.get(t,A(r)),a=s(t,n),u={state:o||{name:t},params:n,hash:a};return m.push(u),g[a]=i,function(){var e=m.indexOf(u);-1!==e&&m.splice(e,1)}}function s(e,n){if(!F(e))throw new Error("state should be a string");return L(n)?e+Y(n):(n=t.$eval(n),L(n)?e+Y(n):e)}function u(){for(var e=0;e<m.length;e++)p(m[e].state,m[e].params)?l(r,g[m[e].hash]):c(r,g[m[e].hash]),d(m[e].state,m[e].params)?l(r,f):c(r,f)}function l(e,t){o(function(){e.addClass(t)})}function c(e,t){e.removeClass(t)}function p(t,n){return e.includes(t.name,n)}function d(t,n){return e.is(t.name,n)}var f,h,m=[],g={};f=n(i.uiSrefActiveEq||"",!1)(t);try{h=t.$eval(i.uiSrefActive)}catch(e){}h=h||n(i.uiSrefActive||"",!1)(t),L(h)&&H(h,function(n,r){if(F(n)){var i=T(n,e.current.name);a(i.state,t.$eval(i.paramExpr),r)}}),this.$$addStateInfo=function(e,t){if(!(L(h)&&m.length>0)){var n=a(e,t,h);return u(),n}},t.$on("$stateChangeSuccess",u),u()}]}}function V(e){var t=function(t,n){return e.is(t,n)};return t.$stateful=!0,t}function z(e){var t=function(t,n,r){return e.includes(t,n,r)};return t.$stateful=!0,t}var R=t.isDefined,q=t.isFunction,F=t.isString,L=t.isObject,_=t.isArray,H=t.forEach,B=t.extend,W=t.copy,Y=t.toJson;t.module("ui.router.util",["ng"]),t.module("ui.router.router",["ui.router.util"]),t.module("ui.router.state",["ui.router.router","ui.router.util"]),t.module("ui.router",["ui.router.state"]),t.module("ui.router.compat",["ui.router"]),g.$inject=["$q","$injector"],t.module("ui.router.util").service("$resolve",g),t.module("ui.router.util").provider("$templateFactory",$);var G;b.prototype.concat=function(e,t){var n={caseInsensitive:G.caseInsensitive(),strict:G.strictMode(),squash:G.defaultSquashPolicy()};return new b(this.sourcePath+e+this.sourceSearch,B(n,t),this)},b.prototype.toString=function(){return this.source},b.prototype.exec=function(e,t){var n=this.regexp.exec(e);if(!n)return null;t=t||{};var r,i,o,a=this.parameters(),s=a.length,u=this.segments.length-1,l={};if(u!==n.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");var c,p;for(r=0;r<u;r++){for(o=a[r],c=this.params[o],p=n[r+1],i=0;i<c.replace.length;i++)c.replace[i].from===p&&(p=c.replace[i].to);p&&!0===c.array&&(p=function(e){function t(e){return e.split("").reverse().join("")}function n(e){return e.replace(/\\-/g,"-")}return h(h(t(e).split(/-(?!\\)/),t),n).reverse()}(p)),R(p)&&(p=c.type.decode(p)),l[o]=c.value(p)}for(;r<s;r++){for(o=a[r],l[o]=this.params[o].value(t[o]),c=this.params[o],p=t[o],i=0;i<c.replace.length;i++)c.replace[i].from===p&&(p=c.replace[i].to);R(p)&&(p=c.type.decode(p)),l[o]=c.value(p)}return l},b.prototype.parameters=function(e){return R(e)?this.params[e]||null:this.$$paramNames},b.prototype.validates=function(e){return this.params.$$validates(e)},b.prototype.format=function(e){function t(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})}e=e||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(e))return null;var o,a=!1,s=n.length-1,u=r.length,l=n[0];for(o=0;o<u;o++){var c=o<s,p=r[o],d=i[p],f=d.value(e[p]),m=d.isOptional&&d.type.equals(d.value(),f),g=!!m&&d.squash,$=d.type.encode(f);if(c){var v=n[o+1],b=o+1===s;if(!1===g)null!=$&&(_($)?l+=h($,t).join("-"):l+=encodeURIComponent($)),l+=v;else if(!0===g){var y=l.match(/\/$/)?/\/?(.*)/:/(.*)/;l+=v.match(y)[1]}else F(g)&&(l+=g+v);b&&!0===d.squash&&"/"===l.slice(-1)&&(l=l.slice(0,-1))}else{if(null==$||m&&!1!==g)continue;if(_($)||($=[$]),0===$.length)continue;$=h($,encodeURIComponent).join("&"+p+"="),l+=(a?"&":"?")+p+"="+$,a=!0}}return l},y.prototype.is=function(e,t){return!0},y.prototype.encode=function(e,t){return e},y.prototype.decode=function(e,t){return e},y.prototype.equals=function(e,t){return e==t},y.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},y.prototype.pattern=/.*/,y.prototype.toString=function(){return"{Type:"+this.name+"}"},y.prototype.$normalize=function(e){return this.is(e)?e:this.decode(e)},y.prototype.$asArray=function(e,t){function r(e,t){function r(e,t){return function(){return e[t].apply(e,arguments)}}function i(e){return _(e)?e:R(e)?[e]:[]}function o(e){switch(e.length){case 0:return n;case 1:return"auto"===t?e[0]:e;default:return e}}function a(e){return!e}function s(e,t){return function(n){if(_(n)&&0===n.length)return n;n=i(n);var r=h(n,e);return!0===t?0===f(r,a).length:o(r)}}this.encode=s(r(e,"encode")),this.decode=s(r(e,"decode")),this.is=s(r(e,"is"),!0),this.equals=function(e){return function(t,n){var r=i(t),o=i(n);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!e(r[a],o[a]))return!1;return!0}}(r(e,"equals")),this.pattern=e.pattern,this.$normalize=s(r(e,"$normalize")),this.name=e.name,this.$arrayMode=t}if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new r(this,e)},t.module("ui.router.util").provider("$urlMatcherFactory",w),t.module("ui.router.util").run(["$urlMatcherFactory",function(e){}]),x.$inject=["$locationProvider","$urlMatcherFactoryProvider"],t.module("ui.router.router").provider("$urlRouter",x),C.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],t.module("ui.router.state").factory("$stateParams",function(){return{}}).constant("$state.runtime",{autoinject:!0}).provider("$state",C).run(["$injector",function(e){e.get("$state.runtime").autoinject&&e.get("$state")}]),k.$inject=[],t.module("ui.router.state").provider("$view",k),t.module("ui.router.state").provider("$uiViewScroll",S),D.$inject=["$state","$injector","$uiViewScroll","$interpolate","$q"],E.$inject=["$compile","$controller","$state","$interpolate"],t.module("ui.router.state").directive("uiView",D),t.module("ui.router.state").directive("uiView",E),N.$inject=["$state","$timeout"],U.$inject=["$state","$timeout"],j.$inject=["$state","$stateParams","$interpolate"],t.module("ui.router.state").directive("uiSref",N).directive("uiSrefActive",j).directive("uiSrefActiveEq",j).directive("uiState",U),V.$inject=["$state"],z.$inject=["$state"],t.module("ui.router.state").filter("isState",V).filter("includedByState",z)}(window,window.angular),function(e,t){"use strict";function n(e){return null!=e&&""!==e&&"hasOwnProperty"!==e&&a.test("."+e)}function r(e,r){if(!n(r))throw o("badmember",'Dotted member path "@{0}" is invalid.',r);for(var i=r.split("."),a=0,s=i.length;a<s&&t.isDefined(e);a++){var u=i[a];e=null!==e?e[u]:void 0}return e}function i(e,n){n=n||{},t.forEach(n,function(e,t){delete n[t]});for(var r in e)!e.hasOwnProperty(r)||"$"===r.charAt(0)&&"$"===r.charAt(1)||(n[r]=e[r]);return n}var o=t.$$minErr("$resource"),a=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;t.module("ngResource",["ng"]).info({angularVersion:"1.6.4"}).provider("$resource",function(){var e=this;this.defaults={stripTrailingSlashes:!0,cancellable:!1,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},delete:{method:"DELETE"}}},this.$get=["$http","$log","$q","$timeout",function(n,a,s,u){function l(t,n){this.template=t,this.defaults=f({},e.defaults,n),this.urlParams={}}function c(t,b,y,w){function x(e,t){var n={};return t=f({},b,t),d(t,function(t,i){$(t)&&(t=t(e)),n[i]=t&&t.charAt&&"@"===t.charAt(0)?r(e,t.substr(1)):t}),n}function C(e){return e.resource}function k(e){i(e||{},this)}var S=new l(t,w);return y=f({},e.defaults.actions,y),k.prototype.toJSON=function(){var e=f({},this);return delete e.$promise,delete e.$resolved,delete e.$cancelRequest,e},d(y,function(e,t){var r=!0===e.hasBody||!1!==e.hasBody&&/^(POST|PUT|PATCH)$/i.test(e.method),l=e.timeout,c=g(e.cancellable)?e.cancellable:S.defaults.cancellable;l&&!v(l)&&(a.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete e.timeout,l=null),k[t]=function(a,g,v,b){function y(e){z.catch(p),T.resolve(e)}var w,D,E,O={};switch(arguments.length){case 4:E=b,D=v;case 3:case 2:if(!$(g)){O=a,w=g,D=v;break}if($(a)){D=a,E=g;break}D=g,E=v;case 1:$(a)?D=a:r?w=a:O=a;break;case 0:break;default:throw o("badargs","Expected up to 4 arguments [params, data, success, error], got {0} arguments",arguments.length)}var T,A,M=this instanceof k,P=M?w:e.isArray?[]:new k(w),I={},N=e.interceptor&&e.interceptor.response||C,U=e.interceptor&&e.interceptor.responseError||void 0,j=!!E,V=!!U;d(e,function(e,t){switch(t){default:I[t]=h(e);break;case"params":case"isArray":case"interceptor":case"cancellable":}}),!M&&c&&(T=s.defer(),I.timeout=T.promise,l&&(A=u(T.resolve,l))),r&&(I.data=w),S.setUrlParams(I,f({},x(w,e.params||{}),O),e.url);var z=n(I).then(function(n){var r=n.data;if(r){if(m(r)!==!!e.isArray)throw o("badcfg","Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})",t,e.isArray?"array":"object",m(r)?"array":"object",I.method,I.url);if(e.isArray)P.length=0,d(r,function(e){"object"==typeof e?P.push(new k(e)):P.push(e)});else{var a=P.$promise;i(r,P),P.$promise=a}}return n.resource=P,n});return z=z.finally(function(){P.$resolved=!0,!M&&c&&(P.$cancelRequest=p,u.cancel(A),T=A=I.timeout=null)}),z=z.then(function(e){var t=N(e);return(D||p)(t,e.headers,e.status,e.statusText),t},j||V?function(e){return j&&!V&&z.catch(p),j&&E(e),V?U(e):s.reject(e)}:void 0),M?z:(P.$promise=z,P.$resolved=!1,c&&(P.$cancelRequest=y),P)},k.prototype["$"+t]=function(e,n,r){$(e)&&(r=n,n=e,e={});var i=k[t].call(this,e,this,n,r);return i.$promise||i}}),k.bind=function(e){var n=f({},b,e);return c(t,n,y,w)},k}var p=t.noop,d=t.forEach,f=t.extend,h=t.copy,m=t.isArray,g=t.isDefined,$=t.isFunction,v=t.isNumber,b=t.$$encodeUriQuery,y=t.$$encodeUriSegment;return l.prototype={setUrlParams:function(e,t,n){var r,i,a=this,s=n||a.template,u="",l=a.urlParams=Object.create(null);d(s.split(/\W/),function(e){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid parameter name.");!new RegExp("^\\d+$").test(e)&&e&&new RegExp("(^|[^\\\\]):"+e+"(\\W|$)").test(s)&&(l[e]={isQueryParamValue:new RegExp("\\?.*=:"+e+"(?:\\W|$)").test(s)})}),s=s.replace(/\\:/g,":"),s=s.replace(/^https?:\/\/\[[^\]]*][^\/]*/,function(e){return u=e,""}),t=t||{},d(a.urlParams,function(e,n){r=t.hasOwnProperty(n)?t[n]:a.defaults[n],g(r)&&null!==r?(i=e.isQueryParamValue?b(r,!0):y(r),s=s.replace(new RegExp(":"+n+"(\\W|$)","g"),function(e,t){return i+t})):s=s.replace(new RegExp("(/?):"+n+"(\\W|$)","g"),function(e,t,n){return"/"===n.charAt(0)?n:t+n})}),a.defaults.stripTrailingSlashes&&(s=s.replace(/\/+$/,"")||"/"),s=s.replace(/\/\.(?=\w+($|\?))/,"."),e.url=u+s.replace(/\/(\\|%5C)\./,"/."),d(t,function(t,n){a.urlParams[n]||(e.params=e.params||{},e.params[n]=t)})}},c}]})}(window,window.angular),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="checklist-model"),angular.module("checklist-model",[]).directive("checklistModel",["$parse","$compile",function(e,t){function n(e,t,n){if(angular.isArray(e))for(var r=e.length;r--;)if(n(e[r],t))return!0;return!1}function r(e,t,r){return e=angular.isArray(e)?e:[],n(e,t,r)||e.push(t),e}function i(e,t,n){if(angular.isArray(e))for(var r=e.length;r--;)if(n(e[r],t)){e.splice(r,1);break}return e}function o(o,a,s){function u(){b(),y(),w()}function l(){return s.checklistValue?e(s.checklistValue)(o.$parent):s.value}function c(e,t){var n=f(o.$parent);angular.isFunction(f.assign)&&(!0===t?f.assign(o.$parent,r(n,e,$)):f.assign(o.$parent,i(n,e,$)))}function p(e,t){if(m&&!1===m(o))return void c(l(),g(o));g.assign(o,n(e,l(),$))}var d=s.checklistModel;s.$set("checklistModel",null),t(a)(o),s.$set("checklistModel",d);var f=e(d),h=e(s.checklistChange),m=e(s.checklistBeforeChange),g=e(s.ngModel),$=function(e,t){return isNaN(e)||isNaN(t)?angular.equals(e,t):String(e)===String(t)};if(s.hasOwnProperty("checklistComparator"))if("."==s.checklistComparator[0]){var v=s.checklistComparator.substring(1);$=function(e,t){return e[v]===t[v]}}else $=e(s.checklistComparator)(o.$parent);var b=o.$watch(s.ngModel,function(e,t){if(e!==t){if(m&&!1===m(o))return void g.assign(o,n(f(o.$parent),l(),$));c(l(),e),h&&h(o)}}),y=o.$watch(l,function(e,t){if(e!=t&&angular.isDefined(t)&&!0===o[s.ngModel]){var n=f(o.$parent);f.assign(o.$parent,i(n,t,$)),f.assign(o.$parent,r(n,e,$))}},!0),w=o.$on("$destroy",u);angular.isFunction(o.$parent.$watchCollection)?o.$parent.$watchCollection(d,p):o.$parent.$watch(d,p,!0)}return{restrict:"A",priority:1e3,terminal:!0,scope:!0,compile:function(e,t){if(!t.checklistValue&&!t.value)throw"You should provide `value` or `checklist-value`.";return t.ngModel||t.$set("ngModel","checked"),o}}}]),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.satellizer=t()}(this,function(){"use strict";function e(e,t){if(/^(?:[a-z]+:)?\/\//i.test(t))return t;var n=[e,t].join("/");return function(e){return e.replace(/[\/]+/g,"/").replace(/\/\?/g,"?").replace(/\/\#/g,"#").replace(/\:\//g,"://")}(n)}function t(e){var t="https:"===e.protocol;return e.protocol+"//"+e.hostname+":"+(e.port||(t?"443":"80"))+(/^\//.test(e.pathname)?e.pathname:"/"+e.pathname)}function n(e){var t,n,r={};return angular.forEach((e||"").split("&"),function(e){e&&(n=e.split("="),t=decodeURIComponent(n[0]),r[t]=!angular.isDefined(n[1])||decodeURIComponent(n[1]))}),r}function r(e){var t;if("undefined"!=typeof module&&module.exports)try{t=require("buffer").Buffer}catch(e){}var n=String.fromCharCode,r=new RegExp(["[À-ß][-¿]","[à-ï][-¿]{2}","[ð-÷][-¿]{3}"].join("|"),"g"),i=function(e){switch(e.length){case 4:var t=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),r=t-65536;return n(55296+(r>>>10))+n(56320+(1023&r));case 3:return n((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return n((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},o=function(e){return e.replace(r,i)};return(t?function(e){return(e.constructor===t.constructor?e:new t(e,"base64")).toString()}:function(e){return o(atob(e))})(String(e).replace(/[-_]/g,function(e){return"-"===e?"+":"/"}).replace(/[^A-Za-z0-9\+\/]/g,""))}var i=function(){function e(){this.baseUrl="/",this.loginUrl="/auth/login",this.signupUrl="/auth/signup",this.unlinkUrl="/auth/unlink/",this.tokenName="token",this.tokenPrefix="satellizer",this.tokenHeader="Authorization",this.tokenType="Bearer",this.storageType="localStorage",this.tokenRoot=null,this.withCredentials=!1,this.providers={facebook:{name:"facebook",url:"/auth/facebook",authorizationEndpoint:"https://www.facebook.com/v2.5/dialog/oauth",redirectUri:window.location.origin+"/",requiredUrlParams:["display","scope"],scope:["email"],scopeDelimiter:",",display:"popup",oauthType:"2.0",popupOptions:{width:580,height:400}},google:{name:"google",url:"/auth/google",authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",redirectUri:window.location.origin,requiredUrlParams:["scope"],optionalUrlParams:["display","state"],scope:["profile","email"],scopePrefix:"openid",scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:452,height:633},state:function(){return encodeURIComponent(Math.random().toString(36).substr(2))}},github:{name:"github",url:"/auth/github",authorizationEndpoint:"https://github.com/login/oauth/authorize",redirectUri:window.location.origin,optionalUrlParams:["scope"],scope:["user:email"],scopeDelimiter:" ",oauthType:"2.0",popupOptions:{width:1020,height:618}},instagram:{name:"instagram",url:"/auth/instagram",authorizationEndpoint:"https://api.instagram.com/oauth/authorize",redirectUri:window.location.origin,requiredUrlParams:["scope"],scope:["basic"],scopeDelimiter:"+",oauthType:"2.0"},linkedin:{name:"linkedin",url:"/auth/linkedin",authorizationEndpoint:"https://www.linkedin.com/uas/oauth2/authorization",redirectUri:window.location.origin,requiredUrlParams:["state"],scope:["r_emailaddress"],scopeDelimiter:" ",state:"STATE",oauthType:"2.0",popupOptions:{width:527,height:582}},twitter:{name:"twitter",url:"/auth/twitter",authorizationEndpoint:"https://api.twitter.com/oauth/authenticate",redirectUri:window.location.origin,oauthType:"1.0",popupOptions:{width:495,height:645}},twitch:{name:"twitch",url:"/auth/twitch",authorizationEndpoint:"https://api.twitch.tv/kraken/oauth2/authorize",redirectUri:window.location.origin,requiredUrlParams:["scope"],scope:["user_read"],scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:500,height:560}},live:{name:"live",url:"/auth/live",authorizationEndpoint:"https://login.live.com/oauth20_authorize.srf",redirectUri:window.location.origin,requiredUrlParams:["display","scope"],scope:["wl.emails"],scopeDelimiter:" ",display:"popup",oauthType:"2.0",popupOptions:{width:500,height:560}},yahoo:{name:"yahoo",url:"/auth/yahoo",authorizationEndpoint:"https://api.login.yahoo.com/oauth2/request_auth",redirectUri:window.location.origin,scope:[],scopeDelimiter:",",oauthType:"2.0",popupOptions:{width:559,height:519}},bitbucket:{name:"bitbucket",url:"/auth/bitbucket",
authorizationEndpoint:"https://bitbucket.org/site/oauth2/authorize",redirectUri:window.location.origin+"/",requiredUrlParams:["scope"],scope:["email"],scopeDelimiter:" ",oauthType:"2.0",popupOptions:{width:1028,height:529}},spotify:{name:"spotify",url:"/auth/spotify",authorizationEndpoint:"https://accounts.spotify.com/authorize",redirectUri:window.location.origin,optionalUrlParams:["state"],requiredUrlParams:["scope"],scope:["user-read-email"],scopePrefix:"",scopeDelimiter:",",oauthType:"2.0",popupOptions:{width:500,height:530},state:function(){return encodeURIComponent(Math.random().toString(36).substr(2))}}},this.httpInterceptor=function(){return!0}}return Object.defineProperty(e,"getConstant",{get:function(){return new e},enumerable:!0,configurable:!0}),e}(),o=function(){function e(e){this.SatellizerConfig=e}return Object.defineProperty(e.prototype,"baseUrl",{get:function(){return this.SatellizerConfig.baseUrl},set:function(e){this.SatellizerConfig.baseUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loginUrl",{get:function(){return this.SatellizerConfig.loginUrl},set:function(e){this.SatellizerConfig.loginUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"signupUrl",{get:function(){return this.SatellizerConfig.signupUrl},set:function(e){this.SatellizerConfig.signupUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"unlinkUrl",{get:function(){return this.SatellizerConfig.unlinkUrl},set:function(e){this.SatellizerConfig.unlinkUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenRoot",{get:function(){return this.SatellizerConfig.tokenRoot},set:function(e){this.SatellizerConfig.tokenRoot=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenName",{get:function(){return this.SatellizerConfig.tokenName},set:function(e){this.SatellizerConfig.tokenName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenPrefix",{get:function(){return this.SatellizerConfig.tokenPrefix},set:function(e){this.SatellizerConfig.tokenPrefix=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenHeader",{get:function(){return this.SatellizerConfig.tokenHeader},set:function(e){this.SatellizerConfig.tokenHeader=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tokenType",{get:function(){return this.SatellizerConfig.tokenType},set:function(e){this.SatellizerConfig.tokenType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"withCredentials",{get:function(){return this.SatellizerConfig.withCredentials},set:function(e){this.SatellizerConfig.withCredentials=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"storageType",{get:function(){return this.SatellizerConfig.storageType},set:function(e){this.SatellizerConfig.storageType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"httpInterceptor",{get:function(){return this.SatellizerConfig.httpInterceptor},set:function(e){this.SatellizerConfig.httpInterceptor="function"==typeof e?e:function(){return e}},enumerable:!0,configurable:!0}),e.prototype.facebook=function(e){angular.extend(this.SatellizerConfig.providers.facebook,e)},e.prototype.google=function(e){angular.extend(this.SatellizerConfig.providers.google,e)},e.prototype.github=function(e){angular.extend(this.SatellizerConfig.providers.github,e)},e.prototype.instagram=function(e){angular.extend(this.SatellizerConfig.providers.instagram,e)},e.prototype.linkedin=function(e){angular.extend(this.SatellizerConfig.providers.linkedin,e)},e.prototype.twitter=function(e){angular.extend(this.SatellizerConfig.providers.twitter,e)},e.prototype.twitch=function(e){angular.extend(this.SatellizerConfig.providers.twitch,e)},e.prototype.live=function(e){angular.extend(this.SatellizerConfig.providers.live,e)},e.prototype.yahoo=function(e){angular.extend(this.SatellizerConfig.providers.yahoo,e)},e.prototype.bitbucket=function(e){angular.extend(this.SatellizerConfig.providers.bitbucket,e)},e.prototype.spotify=function(e){angular.extend(this.SatellizerConfig.providers.spotify,e)},e.prototype.oauth1=function(e){this.SatellizerConfig.providers[e.name]=angular.extend(e,{oauthType:"1.0"})},e.prototype.oauth2=function(e){this.SatellizerConfig.providers[e.name]=angular.extend(e,{oauthType:"2.0"})},e.prototype.$get=function(e,t,n){return{login:function(e,n){return t.login(e,n)},signup:function(e,n){return t.signup(e,n)},logout:function(){return e.logout()},authenticate:function(e,t){return n.authenticate(e,t)},link:function(e,t){return n.authenticate(e,t)},unlink:function(e,t){return n.unlink(e,t)},isAuthenticated:function(){return e.isAuthenticated()},getPayload:function(){return e.getPayload()},getToken:function(){return e.getToken()},setToken:function(t){return e.setToken({access_token:t})},removeToken:function(){return e.removeToken()},setStorageType:function(t){return e.setStorageType(t)}}},e.$inject=["SatellizerConfig"],e}();o.prototype.$get.$inject=["SatellizerShared","SatellizerLocal","SatellizerOAuth"];var a=function(){function e(e,t,n,r){this.$q=e,this.$window=t,this.SatellizerConfig=n,this.SatellizerStorage=r;var i=this.SatellizerConfig,o=i.tokenName,a=i.tokenPrefix;this.prefixedTokenName=a?[a,o].join("_"):o}return e.prototype.getToken=function(){return this.SatellizerStorage.get(this.prefixedTokenName)},e.prototype.getPayload=function(){var e=this.SatellizerStorage.get(this.prefixedTokenName);if(e&&3===e.split(".").length)try{var t=e.split(".")[1],n=t.replace("-","+").replace("_","/");return JSON.parse(r(n))}catch(e){}},e.prototype.setToken=function(e){var t,n=this.SatellizerConfig.tokenRoot,r=this.SatellizerConfig.tokenName,i=e&&e.access_token;if(i&&(angular.isObject(i)&&angular.isObject(i.data)?e=i:angular.isString(i)&&(t=i)),!t&&e){var o=n&&n.split(".").reduce(function(e,t){return e[t]},e.data);t=o?o[r]:e.data&&e.data[r]}t&&this.SatellizerStorage.set(this.prefixedTokenName,t)},e.prototype.removeToken=function(){this.SatellizerStorage.remove(this.prefixedTokenName)},e.prototype.isAuthenticated=function(){var e=this.SatellizerStorage.get(this.prefixedTokenName);if(e){if(3===e.split(".").length)try{var t=e.split(".")[1],n=t.replace("-","+").replace("_","/"),r=JSON.parse(this.$window.atob(n)).exp;if("number"==typeof r)return Math.round((new Date).getTime()/1e3)<r}catch(e){return!0}return!0}return!1},e.prototype.logout=function(){return this.SatellizerStorage.remove(this.prefixedTokenName),this.$q.when()},e.prototype.setStorageType=function(e){this.SatellizerConfig.storageType=e},e.$inject=["$q","$window","SatellizerConfig","SatellizerStorage"],e}(),s=function(){function t(e,t,n){this.$http=e,this.SatellizerConfig=t,this.SatellizerShared=n}return t.prototype.login=function(t,n){var r=this;return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.loginUrl),n.data=t||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n).then(function(e){return r.SatellizerShared.setToken(e),e})},t.prototype.signup=function(t,n){return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.signupUrl),n.data=t||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n)},t.$inject=["$http","SatellizerConfig","SatellizerShared"],t}(),u=function(){function e(e,t,n){this.$interval=e,this.$window=t,this.$q=n,this.popup=null,this.defaults={redirectUri:null}}return e.prototype.stringifyOptions=function(e){var t=[];return angular.forEach(e,function(e,n){t.push(n+"="+e)}),t.join(",")},e.prototype.open=function(e,t,n,r,i){var o=n.width||500,a=n.height||500,s=this.stringifyOptions({width:o,height:a,top:this.$window.screenY+(this.$window.outerHeight-a)/2.5,left:this.$window.screenX+(this.$window.outerWidth-o)/2}),u=this.$window.cordova||this.$window.navigator.userAgent.indexOf("CriOS")>-1?"_blank":t;if(this.popup=this.$window.open(e,u,s),this.popup&&this.popup.focus&&this.popup.focus(),!i)return this.$window.cordova?this.eventListener(r):("about:blank"===e&&(this.popup.location=e),this.polling(r))},e.prototype.polling=function(e){var r=this;return this.$q(function(i,o){var a=document.createElement("a");a.href=e;var s=t(a),u=r.$interval(function(){r.popup&&!r.popup.closed&&void 0!==r.popup.closed||(r.$interval.cancel(u),o(new Error("The popup window was closed")));try{if(t(r.popup.location)===s){if(r.popup.location.search||r.popup.location.hash){var e=n(r.popup.location.search.substring(1).replace(/\/$/,"")),a=n(r.popup.location.hash.substring(1).replace(/[\/$]/,"")),l=angular.extend({},e,a);l.error?o(new Error(l.error)):i(l)}else o(new Error("OAuth redirect has occurred but no query or hash parameters were found. They were either not set during the redirect, or were removed—typically by a routing library—before Satellizer could read it."));r.$interval.cancel(u),r.popup.close()}}catch(e){}},500)})},e.prototype.eventListener=function(e){var t=this;return this.$q(function(r,i){t.popup.addEventListener("loadstart",function(o){if(0===o.url.indexOf(e)){var a=document.createElement("a");if(a.href=o.url,a.search||a.hash){var s=n(a.search.substring(1).replace(/\/$/,"")),u=n(a.hash.substring(1).replace(/[\/$]/,"")),l=angular.extend({},s,u);l.error?i(new Error(l.error)):r(l),t.popup.close()}}}),t.popup.addEventListener("loaderror",function(){i(new Error("Authorization failed"))}),t.popup.addEventListener("exit",function(){i(new Error("The popup window was closed"))})})},e.$inject=["$interval","$window","$q"],e}(),l=function(){function t(e,t,n,r){this.$http=e,this.$window=t,this.SatellizerConfig=n,this.SatellizerPopup=r,this.defaults={name:null,url:null,authorizationEndpoint:null,scope:null,scopePrefix:null,scopeDelimiter:null,redirectUri:null,requiredUrlParams:null,defaultUrlParams:null,oauthType:"1.0",popupOptions:{width:null,height:null}}}return t.prototype.init=function(e,t){var n=this;angular.extend(this.defaults,e);var r=e.name,i=e.popupOptions,o=this.defaults.redirectUri;return this.$window.cordova||this.SatellizerPopup.open("about:blank",r,i,o,!0),this.getRequestToken().then(function(r){return n.openPopup(e,r).then(function(e){return n.exchangeForToken(e,t)})})},t.prototype.openPopup=function(e,t){var n=[e.authorizationEndpoint,this.buildQueryString(t.data)].join("?"),r=this.defaults.redirectUri;return this.$window.cordova?this.SatellizerPopup.open(n,e.name,e.popupOptions,r):(this.SatellizerPopup.popup.location=n,this.SatellizerPopup.polling(r))},t.prototype.getRequestToken=function(){var t=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(t,this.defaults)},t.prototype.exchangeForToken=function(t,n){var r=angular.extend({},n,t),i=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(i,r,{withCredentials:this.SatellizerConfig.withCredentials})},t.prototype.buildQueryString=function(e){var t=[];return angular.forEach(e,function(e,n){t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))}),t.join("&")},t.$inject=["$http","$window","SatellizerConfig","SatellizerPopup"],t}(),c=function(){function t(e,t,n,r,i,o,a){this.$http=e,this.$window=t,this.$timeout=n,this.$q=r,this.SatellizerConfig=i,this.SatellizerPopup=o,this.SatellizerStorage=a,this.defaults={name:null,url:null,clientId:null,authorizationEndpoint:null,redirectUri:null,scope:null,scopePrefix:null,scopeDelimiter:null,state:null,requiredUrlParams:null,defaultUrlParams:["response_type","client_id","redirect_uri"],responseType:"code",responseParams:{code:"code",clientId:"clientId",redirectUri:"redirectUri"},oauthType:"2.0",popupOptions:{width:null,height:null}}}return t.camelCase=function(e){return e.replace(/([\:\-\_]+(.))/g,function(e,t,n,r){return r?n.toUpperCase():n})},t.prototype.init=function(e,t){var n=this;return this.$q(function(r,i){angular.extend(n.defaults,e);var o=n.defaults.name+"_state",a=n.defaults,s=a.name,u=a.state,l=a.popupOptions,c=a.redirectUri,p=a.responseType;"function"==typeof u?n.SatellizerStorage.set(o,u()):"string"==typeof u&&n.SatellizerStorage.set(o,u);var d=[n.defaults.authorizationEndpoint,n.buildQueryString()].join("?");n.SatellizerPopup.open(d,s,l,c).then(function(e){return"token"!==p&&d?e.state&&e.state!==n.SatellizerStorage.get(o)?i(new Error("The value returned in the state parameter does not match the state value from your original authorization code request.")):void r(n.exchangeForToken(e,t)):r(e)}).catch(function(e){return i(e)})})},t.prototype.exchangeForToken=function(t,n){var r=this,i=angular.extend({},n);angular.forEach(this.defaults.responseParams,function(e,n){switch(n){case"code":i[e]=t.code;break;case"clientId":i[e]=r.defaults.clientId;break;case"redirectUri":i[e]=r.defaults.redirectUri;break;default:i[e]=t[n]}}),t.state&&(i.state=t.state);var o=this.SatellizerConfig.baseUrl?e(this.SatellizerConfig.baseUrl,this.defaults.url):this.defaults.url;return this.$http.post(o,i,{withCredentials:this.SatellizerConfig.withCredentials})},t.prototype.buildQueryString=function(){var e=this,n=[],r=["defaultUrlParams","requiredUrlParams","optionalUrlParams"];return angular.forEach(r,function(r){angular.forEach(e.defaults[r],function(r){var i=t.camelCase(r),o=angular.isFunction(e.defaults[r])?e.defaults[r]():e.defaults[i];if("redirect_uri"!==r||o){if("state"===r){var a=e.defaults.name+"_state";o=encodeURIComponent(e.SatellizerStorage.get(a))}"scope"===r&&Array.isArray(o)&&(o=o.join(e.defaults.scopeDelimiter),e.defaults.scopePrefix&&(o=[e.defaults.scopePrefix,o].join(e.defaults.scopeDelimiter))),n.push([r,o])}})}),n.map(function(e){return e.join("=")}).join("&")},t.$inject=["$http","$window","$timeout","$q","SatellizerConfig","SatellizerPopup","SatellizerStorage"],t}(),p=function(){function t(e,t,n,r,i,o,a,s,u,l){this.$http=e,this.$window=t,this.$timeout=n,this.$q=r,this.SatellizerConfig=i,this.SatellizerPopup=o,this.SatellizerStorage=a,this.SatellizerShared=s,this.SatellizerOAuth1=u,this.SatellizerOAuth2=l}return t.prototype.authenticate=function(e,t){var n=this;return this.$q(function(r,i){var o=n.SatellizerConfig.providers[e],a=null;switch(o.oauthType){case"1.0":a=new l(n.$http,n.$window,n.SatellizerConfig,n.SatellizerPopup);break;case"2.0":a=new c(n.$http,n.$window,n.$timeout,n.$q,n.SatellizerConfig,n.SatellizerPopup,n.SatellizerStorage);break;default:return i(new Error("Invalid OAuth Type"))}return a.init(o,t).then(function(e){o.url&&n.SatellizerShared.setToken(e),r(e)}).catch(function(e){i(e)})})},t.prototype.unlink=function(t,n){return void 0===n&&(n={}),n.url=n.url?n.url:e(this.SatellizerConfig.baseUrl,this.SatellizerConfig.unlinkUrl),n.data={provider:t}||n.data,n.method=n.method||"POST",n.withCredentials=n.withCredentials||this.SatellizerConfig.withCredentials,this.$http(n)},t.$inject=["$http","$window","$timeout","$q","SatellizerConfig","SatellizerPopup","SatellizerStorage","SatellizerShared","SatellizerOAuth1","SatellizerOAuth2"],t}(),d=function(){function e(e,t){this.$window=e,this.SatellizerConfig=t,this.memoryStore={}}return e.prototype.get=function(e){try{return this.$window[this.SatellizerConfig.storageType].getItem(e)}catch(t){return this.memoryStore[e]}},e.prototype.set=function(e,t){try{this.$window[this.SatellizerConfig.storageType].setItem(e,t)}catch(n){this.memoryStore[e]=t}},e.prototype.remove=function(e){try{this.$window[this.SatellizerConfig.storageType].removeItem(e)}catch(t){delete this.memoryStore[e]}},e.$inject=["$window","SatellizerConfig"],e}(),f=function(){function e(e,t,n){var r=this;this.SatellizerConfig=e,this.SatellizerShared=t,this.SatellizerStorage=n,this.request=function(e){if(e.skipAuthorization)return e;if(r.SatellizerShared.isAuthenticated()&&r.SatellizerConfig.httpInterceptor()){var t=r.SatellizerConfig.tokenPrefix?[r.SatellizerConfig.tokenPrefix,r.SatellizerConfig.tokenName].join("_"):r.SatellizerConfig.tokenName,n=r.SatellizerStorage.get(t);r.SatellizerConfig.tokenHeader&&r.SatellizerConfig.tokenType&&(n=r.SatellizerConfig.tokenType+" "+n),e.headers[r.SatellizerConfig.tokenHeader]=n}return e}}return e.Factory=function(t,n,r){return new e(t,n,r)},e.$inject=["SatellizerConfig","SatellizerShared","SatellizerStorage"],e}();f.Factory.$inject=["SatellizerConfig","SatellizerShared","SatellizerStorage"];var h=function(){function e(e){this.$httpProvider=e,e.interceptors.push(f.Factory)}return e.$inject=["$httpProvider"],e}();angular.module("satellizer",[]).provider("$auth",["SatellizerConfig",function(e){return new o(e)}]).constant("SatellizerConfig",i.getConstant).service("SatellizerShared",a).service("SatellizerLocal",s).service("SatellizerPopup",u).service("SatellizerOAuth",p).service("SatellizerOAuth2",c).service("SatellizerOAuth1",l).service("SatellizerStorage",d).service("SatellizerInterceptor",f).config(["$httpProvider",function(e){return new h(e)}]);return"satellizer"}),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.multiMap","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,r){var i=r.has("$animateCss")?r.get("$animateCss"):null;return{link:function(r,o,a){function s(e){return g?{width:e.scrollWidth+"px"}:{height:e.scrollHeight+"px"}}function u(){o.hasClass("collapse")&&o.hasClass("in")||t.resolve(d(r)).then(function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",css:{overflow:"hidden"},to:s(o[0])}).start().finally(l):e.addClass(o,"in",{css:{overflow:"hidden"},to:s(o[0])}).then(l)},angular.noop)}function l(){o.removeClass("collapsing").addClass("collapse").css($),f(r)}function c(){if(!o.hasClass("collapse")&&!o.hasClass("in"))return p();t.resolve(h(r)).then(function(){o.css(s(o[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:v}).start().finally(p):e.removeClass(o,"in",{to:v}).then(p)},angular.noop)}function p(){o.css(v),o.removeClass("collapsing").addClass("collapse"),m(r)}var d=n(a.expanding),f=n(a.expanded),h=n(a.collapsing),m=n(a.collapsed),g=!1,$={},v={};!function(){g=!!("horizontal"in a),g?($={width:""},v={width:"0"}):($={height:""},v={height:"0"}),r.$eval(a.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css($)}(),r.$watch(a.uibCollapse,function(e){e?c():u()})}}}]),angular.module("ui.bootstrap.tabindex",[]).directive("uibTabindexToggle",function(){return{restrict:"A",link:function(e,t,n){n.$observe("disabled",function(e){n.$set("tabindex",e?-1:null)})}}}),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse","ui.bootstrap.tabindex"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(r){(angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers)&&angular.forEach(this.groups,function(e){e!==r&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(n){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,r){t.addClass("panel"),r.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",function(n){t.toggleClass(e.openClass,!!n),n&&r.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,r,i){r.setHeading(i(e,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:"^uibAccordionGroup",link:function(e,t,n,r){e.$watch(function(){return r[n.uibAccordionTransclude]},function(e){if(e){var n=angular.element(t[0].querySelector("uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"));n.html(""),n.append(e)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$element","$attrs","$interpolate","$timeout",function(e,t,n,r,i){e.closeable=!!n.close,t.addClass("alert"),n.$set("role","alert"),e.closeable&&t.addClass("alert-dismissible");var o=angular.isDefined(n.dismissOnTimeout)?r(n.dismissOnTimeout)(e.$parent):null;o&&i(function(){e.close()},parseInt(o,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,scope:{close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,r,i){var o=i[0],a=i[1],s=e(r.uibUncheckable);n.find("input").css({display:"none"}),a.$render=function(){n.toggleClass(o.activeClass,angular.equals(a.$modelValue,t.$eval(r.uibBtnRadio)))},n.on(o.toggleEvent,function(){if(!r.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(r.uncheckable)||t.$apply(function(){a.$setViewValue(e?null:t.$eval(r.uibBtnRadio)),a.$render()})}}),r.uibUncheckable&&t.$watch(s,function(e){r.$set("uncheckable",e?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,r){function i(){return a(n.btnCheckboxTrue,!0)}function o(){return a(n.btnCheckboxFalse,!1)}function a(t,n){return angular.isDefined(t)?e.$eval(t):n}var s=r[0],u=r[1];t.find("input").css({display:"none"}),u.$render=function(){t.toggleClass(s.activeClass,angular.equals(u.$modelValue,i()))},t.on(s.toggleEvent,function(){n.disabled||e.$apply(function(){u.$setViewValue(t.hasClass(s.activeClass)?o():i()),u.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,r,i){function o(e){for(var t=0;t<m.length;t++)m[t].slide.active=t===e}function a(n,r,a){if(!v){if(angular.extend(n,{direction:a}),angular.extend(m[$].slide||{},{direction:a}),i.enabled(t)&&!e.$currentTransition&&m[r].element&&h.slides.length>1){m[r].element.data(g,n.direction);var s=h.getCurrentIndex();angular.isNumber(s)&&m[s].element&&m[s].element.data(g,n.direction),e.$currentTransition=!0,i.on("addClass",m[r].element,function(t,n){"close"===n&&(e.$currentTransition=null,i.off("addClass",t))})}e.active=n.index,$=n.index,o(r),c()}}function s(e){for(var t=0;t<m.length;t++)if(m[t].slide===e)return t}function u(){d&&(n.cancel(d),d=null)}function l(t){t.length||(e.$currentTransition=null)}function c(){u();var t=+e.interval;!isNaN(t)&&t>0&&(d=n(p,t))}function p(){var t=+e.interval;f&&!isNaN(t)&&t>0&&m.length?e.next():e.pause()}var d,f,h=this,m=h.slides=e.slides=[],g="uib-slideDirection",$=e.active,v=!1;t.addClass("carousel"),h.addSlide=function(t,n){m.push({slide:t,element:n}),m.sort(function(e,t){return+e.slide.index-+t.slide.index}),(t.index===e.active||1===m.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),$=t.index,e.active=t.index,o($),h.select(m[s(t)]),1===m.length&&e.play())},h.getCurrentIndex=function(){for(var e=0;e<m.length;e++)if(m[e].slide.index===$)return e},h.next=e.next=function(){var t=(h.getCurrentIndex()+1)%m.length;return 0===t&&e.noWrap()?void e.pause():h.select(m[t],"next")},h.prev=e.prev=function(){var t=h.getCurrentIndex()-1<0?m.length-1:h.getCurrentIndex()-1;return e.noWrap()&&t===m.length-1?void e.pause():h.select(m[t],"prev")},h.removeSlide=function(t){var n=s(t);m.splice(n,1),m.length>0&&$===n?n>=m.length?($=m.length-1,e.active=$,o($),h.select(m[m.length-1])):($=n,e.active=$,o($),h.select(m[n])):$>n&&($--,e.active=$),0===m.length&&($=null,e.active=null)},h.select=e.select=function(t,n){var r=s(t.slide);void 0===n&&(n=r>h.getCurrentIndex()?"next":"prev"),t.slide.index===$||e.$currentTransition||a(t.slide,r,n)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.isPrevDisabled=function(){return 0===e.active&&e.noWrap()},e.isNextDisabled=function(){return e.active===m.length-1&&e.noWrap()},e.pause=function(){e.noPause||(f=!1,u())},e.play=function(){f||(f=!0,c())},t.on("mouseenter",e.pause),t.on("mouseleave",e.play),e.$on("$destroy",function(){v=!0,u()}),e.$watch("noTransition",function(e){i.enabled(t,!e)}),e.$watch("interval",c),e.$watchCollection("slides",l),e.$watch("active",function(e){if(angular.isNumber(e)&&$!==e){for(var t=0;t<m.length;t++)if(m[t].slide.index===e){e=t;break}m[e]&&(o(e),h.select(m[e]),$=e)}})}]).directive("uibCarousel",function(){return{transclude:!0,controller:"UibCarouselController",controllerAs:"carousel",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",["$animate",function(e){return{require:"^uibCarousel",restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(t,n,r,i){n.addClass("item"),i.addSlide(t,n),t.$on("$destroy",function(){i.removeSlide(t)}),t.$watch("active",function(t){e[t?"addClass":"removeClass"](n,"active")})}}}]).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}return{beforeAddClass:function(n,r,i){if("active"===r){var o=!1,a=n.data("uib-slideDirection"),s="next"===a?"left":"right",u=t.bind(this,n,s+" "+a,i);return n.addClass(a),e(n,{addClass:s}).start().done(u),function(){o=!0}}i()},beforeRemoveClass:function(n,r,i){if("active"===r){var o=!1,a=n.data("uib-slideDirection"),s="next"===a?"left":"right",u=t.bind(this,n,s,i);return e(n,{addClass:s}).start().done(u),function(){o=!0}}i()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter","filterFilter",function(e,t,n,r,i){function o(e){return i(v,{key:e},!0)[0]}function a(e){var t=[],n=e.split(""),i=e.indexOf("'");if(i>-1){var o=!1;e=e.split("");for(var a=i;a<e.length;a++)o?("'"===e[a]&&(a+1<e.length&&"'"===e[a+1]?(e[a+1]="$",n[a+1]=""):(n[a]="",o=!1)),e[a]="$"):"'"===e[a]&&(e[a]="$",n[a]="",o=!0);e=e.join("")}return angular.forEach(v,function(r){var i=e.indexOf(r.key);if(i>-1){e=e.split(""),n[i]="("+r.regex+")",e[i]="$";for(var o=i+1,a=i+r.key.length;o<a;o++)n[o]="",e[o]="$";e=e.join(""),t.push({index:i,key:r.key,apply:r.apply,matcher:r.regex})}}),{regex:new RegExp("^"+n.join("")+"$"),map:r(t,"index")}}function s(e){for(var t,n,r=[],i=0;i<e.length;)if(angular.isNumber(n)){if("'"===e.charAt(i))(i+1>=e.length||"'"!==e.charAt(i+1))&&(r.push(u(e,n,i)),n=null);else if(i===e.length)for(;n<e.length;)t=l(e,n),r.push(t),n=t.endIdx;i++}else"'"!==e.charAt(i)?(t=l(e,i),r.push(t.parser),i=t.endIdx):(n=i,i++);return r}function u(e,t,n){return function(){return e.substr(t+1,n-t-1)}}function l(e,t){for(var n=e.substr(t),r=0;r<v.length;r++)if(new RegExp("^"+v[r].key).test(n)){var i=v[r];return{endIdx:t+i.key.length,parser:i.formatter}}return{endIdx:t+1,parser:function(){return n.charAt(0)}}}function c(e,t,n){return!(n<1)&&(1===t&&n>28?29===n&&(e%4==0&&e%100!=0||e%400==0):3!==t&&5!==t&&8!==t&&10!==t||n<31)}function p(e){return parseInt(e,10)}function d(e,t){return e&&t?g(e,t):e}function f(e,t){return e&&t?g(e,t,!0):e}function h(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function m(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function g(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return m(e,n*(h(t,r)-r))}var $,v;this.init=function(){$=t.id,this.parsers={},this.formatters={},v=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){e=+e,this.year=e<69?e+2e3:e+1900},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return/^[0-9]$/.test(e.getMonth())?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return/^[1-9]$/.test(e.getDate())?n(e,"dd"):n(e,"d")}},{key:"dd",
regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],r=t[2],i=t[3];this.hours+=p(n+r),this.minutes+=p(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}],angular.version.major>=1&&angular.version.minor>4&&v.push({key:"LLLL",regex:t.DATETIME_FORMATS.STANDALONEMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.STANDALONEMONTH.indexOf(e)},formatter:function(e){return n(e,"LLLL")}})},this.init(),this.getParser=function(e){var t=o(e);return t&&t.apply||null},this.overrideParser=function(e,t){var n=o(e);n&&angular.isFunction(t)&&(this.parsers={},n.apply=t)}.bind(this),this.filter=function(e,n){return angular.isDate(e)&&!isNaN(e)&&n?(n=t.DATETIME_FORMATS[n]||n,t.id!==$&&this.init(),this.formatters[n]||(this.formatters[n]=s(n)),this.formatters[n].reduce(function(t,n){return t+n(e)},"")):""},this.parse=function(n,r,i){if(!angular.isString(n)||!r)return n;r=t.DATETIME_FORMATS[r]||r,r=r.replace(/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,"\\$&"),t.id!==$&&this.init(),this.parsers[r]||(this.parsers[r]=a(r));var o=this.parsers[r],s=o.regex,u=o.map,l=n.match(s),p=!1;if(l&&l.length){var d,f;angular.isDate(i)&&!isNaN(i.getTime())?d={year:i.getFullYear(),month:i.getMonth(),date:i.getDate(),hours:i.getHours(),minutes:i.getMinutes(),seconds:i.getSeconds(),milliseconds:i.getMilliseconds()}:(i&&e.warn("dateparser:","baseDate is not a valid date"),d={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var h=1,m=l.length;h<m;h++){var g=u[h-1];"Z"===g.matcher&&(p=!0),g.apply&&g.apply.call(d,l[h])}var v=p?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,b=p?Date.prototype.setUTCHours:Date.prototype.setHours;return c(d.year,d.month,d.date)&&(!angular.isDate(i)||isNaN(i.getTime())||p?(f=new Date(0),v.call(f,d.year,d.month,d.date),b.call(f,d.hours||0,d.minutes||0,d.seconds||0,d.milliseconds||0)):(f=new Date(i),v.call(f,d.year,d.month,d.date),b.call(f,d.hours,d.minutes,d.seconds,d.milliseconds))),f}},this.toTimezone=d,this.fromTimezone=f,this.timezoneToOffset=h,this.addDateMinutes=m,this.convertTimezoneToLocal=g}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(n,r){function i(e,t,n){s.push(e),u.push({scope:e,element:t}),f.forEach(function(t,n){o(t,e)}),e.$on("$destroy",a)}function o(n,r){var i=n.match(t),o=r.$eval(i[1]),a=i[2],s=l[n];if(!s){var c=function(t){var n=null;u.some(function(e){if(e.scope.$eval(p)===t)return n=e,!0}),s.lastActivated!==n&&(s.lastActivated&&e.removeClass(s.lastActivated.element,o),n&&e.addClass(n.element,o),s.lastActivated=n)};l[n]=s={lastActivated:null,scope:r,watchFn:c,compareWithExp:a,watcher:r.$watch(a,c)}}s.watchFn(r.$eval(a))}function a(e){var t=e.targetScope,n=s.indexOf(t);if(s.splice(n,1),u.splice(n,1),s.length){var r=s[0];angular.forEach(l,function(e){e.scope===t&&(e.watcher=r.$watch(e.compareWithExp,e.watchFn),e.scope=r)})}else l={}}var s=[],u=[],l={},c=r.uibIsClass.match(/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/),p=c[2],d=c[1],f=d.split(",");return i}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",monthColumns:3,ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$element","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(e,t,n,r,i,o,a,s,u,l,c,p){function d(t){e.datepickerMode=t,e.datepickerOptions.datepickerMode=t}function f(t){var n;if(angular.version.minor<6)n=t.$options||e.datepickerOptions.ngModelOptions||u.ngModelOptions||{},n.getOption=function(e){return n[e]};else{var r=t.$options.getOption("timezone")||(e.datepickerOptions.ngModelOptions?e.datepickerOptions.ngModelOptions.timezone:null)||(u.ngModelOptions?u.ngModelOptions.timezone:null);n=t.$options.createChild(u.ngModelOptions).createChild(e.datepickerOptions.ngModelOptions).createChild(t.$options).createChild({timezone:r})}return n}var h=this,m={$setViewValue:angular.noop},g={},$=[];t.addClass("uib-datepicker"),n.$set("role","application"),e.datepickerOptions||(e.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","monthColumns","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:u.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":h[t]=angular.isDefined(e.datepickerOptions[t])?i(e.datepickerOptions[t])(e.$parent):u[t];break;case"monthColumns":case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":h[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:u[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?h.startingDay=e.datepickerOptions.startingDay:angular.isNumber(u.startingDay)?h.startingDay=u.startingDay:h.startingDay=(o.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.$watch("datepickerOptions."+t,function(e){e?angular.isDate(e)?h[t]=p.fromTimezone(new Date(e),g.getOption("timezone")):(l&&a.warn("Literal date support has been deprecated, please switch to date object usage"),h[t]=new Date(s(e,"medium"))):h[t]=u[t]?p.fromTimezone(new Date(u[t]),g.getOption("timezone")):null,h.refreshView()});break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch(function(){return e.datepickerOptions[t]},function(n){h[t]=e[t]=angular.isDefined(n)?n:e.datepickerOptions[t],("minMode"===t&&h.modes.indexOf(e.datepickerOptions.datepickerMode)<h.modes.indexOf(h[t])||"maxMode"===t&&h.modes.indexOf(e.datepickerOptions.datepickerMode)>h.modes.indexOf(h[t]))&&(e.datepickerMode=h[t],e.datepickerOptions.datepickerMode=h[t])}):h[t]=e[t]=u[t]||null}}),e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(n.disabled)||!1,angular.isDefined(n.ngDisabled)&&$.push(e.$parent.$watch(n.ngDisabled,function(t){e.disabled=t,h.refreshView()})),e.isActive=function(t){return 0===h.compare(t.date,h.activeDate)&&(e.activeDateId=t.uid,!0)},this.init=function(t){m=t,g=f(m),e.datepickerOptions.initDate?(h.activeDate=p.fromTimezone(e.datepickerOptions.initDate,g.getOption("timezone"))||new Date,e.$watch("datepickerOptions.initDate",function(e){e&&(m.$isEmpty(m.$modelValue)||m.$invalid)&&(h.activeDate=p.fromTimezone(e,g.getOption("timezone")),h.refreshView())})):h.activeDate=new Date;var n=m.$modelValue?new Date(m.$modelValue):new Date;this.activeDate=isNaN(n)?p.fromTimezone(new Date,g.getOption("timezone")):p.fromTimezone(n,g.getOption("timezone")),m.$render=function(){h.render()}},this.render=function(){if(m.$viewValue){var e=new Date(m.$viewValue);!isNaN(e)?this.activeDate=p.fromTimezone(e,g.getOption("timezone")):c||a.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=m.$viewValue?new Date(m.$viewValue):null;t=p.fromTimezone(t,g.getOption("timezone")),m.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var r=m.$viewValue?new Date(m.$viewValue):null;r=p.fromTimezone(r,g.getOption("timezone"));var i=new Date;i=p.fromTimezone(i,g.getOption("timezone"));var o=this.compare(t,i),a={date:t,label:p.filter(t,n),selected:r&&0===this.compare(t,r),disabled:this.isDisabled(t),past:o<0,current:0===o,future:o>0,customClass:this.customClass(t)||null};return r&&0===this.compare(t,r)&&(e.selectedDt=a),h.activeDate&&0===this.compare(a.date,h.activeDate)&&(e.activeDt=a),a},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===h.minMode){var n=m.$viewValue?p.fromTimezone(new Date(m.$viewValue),g.getOption("timezone")):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=p.toTimezone(n,g.getOption("timezone")),m.$setViewValue(n),m.$render()}else h.activeDate=t,d(h.modes[h.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode");e.$broadcast("uib:datepicker.focus")},e.move=function(e){var t=h.activeDate.getFullYear()+e*(h.step.years||0),n=h.activeDate.getMonth()+e*(h.step.months||0);h.activeDate.setFullYear(t,n,1),h.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===h.maxMode&&1===t||e.datepickerMode===h.minMode&&-1===t||(d(h.modes[h.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var v=function(){h.element[0].focus()};e.$on("uib:datepicker.focus",v),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),h.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(h.isDisabled(h.activeDate))return;e.select(h.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(h.handleKeyDown(n,t),h.refreshView()):e.toggleMode("up"===n?1:-1)},t.on("keydown",function(t){e.$apply(function(){e.keydown(t)})}),e.$on("$destroy",function(){for(;$.length;)$.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){function r(e,t){return 1!==t||e%4!=0||e%100==0&&e%400!=0?o[t]:29}function i(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}var o=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,r=new Array(t),i=new Date(e),o=0;o<t;)n=new Date(i),r[o++]=n,i.setDate(i.getDate()+1);return r},this._refreshView=function(){var t=this.activeDate.getFullYear(),r=this.activeDate.getMonth(),o=new Date(this.activeDate);o.setFullYear(t,r,1);var a=this.startingDay-o.getDay(),s=a>0?7-a:-a,u=new Date(o);s>0&&u.setDate(1-s);for(var l=this.getDates(u,42),c=0;c<42;c++)l[c]=angular.extend(this.createDateObject(l[c],this.formatDay),{secondary:l[c].getMonth()!==r,uid:e.uniqueId+"-"+c});e.labels=new Array(7);for(var p=0;p<7;p++)e.labels[p]={abbr:n(l[p].date,this.formatDayHeader),full:n(l[p].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(l,7),e.showWeeks){e.weekNumbers=[];for(var d=(11-this.startingDay)%7,f=e.rows.length,h=0;h<f;h++)e.weekNumbers.push(i(e.rows[h][d].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),r=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),r.setFullYear(t.getFullYear()),n-r},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var i=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(i,1),n=Math.min(r(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=r(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,r=new Array(12),i=this.activeDate.getFullYear(),o=0;o<12;o++)t=new Date(this.activeDate),t.setFullYear(i,o,1),r[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(r,this.monthColumns),e.yearHeaderColspan=this.monthColumns>3?this.monthColumns-2:1},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),r=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),r.setFullYear(t.getFullYear()),n-r},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=this.monthColumns;else if("right"===e)n+=1;else if("down"===e)n+=this.monthColumns;else if("pageup"===e||"pagedown"===e){var r=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(r)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){function r(e){return parseInt((e-1)/o,10)*o+1}var i,o;this.element=t,this.yearpickerInit=function(){i=this.yearColumns,o=this.yearRows*i,this.step={years:o}},this._refreshView=function(){for(var t,n=new Array(o),a=0,s=r(this.activeDate.getFullYear());a<o;a++)t=new Date(this.activeDate),t.setFullYear(s+a,0,1),n[a]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+a});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=this.split(n,i),e.columns=i},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=i:"right"===e?n+=1:"down"===e?n+=i:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*o:"home"===e?n=r(this.activeDate.getFullYear()):"end"===e&&(n=r(this.activeDate.getFullYear())+o-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],restrict:"A",controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,r){var i=r[0],o=r[1];i.init(o)}}}).directive("uibDaypicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],restrict:"A",controller:"UibDaypickerController",link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibMonthpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],restrict:"A",controller:"UibMonthpickerController",link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibYearpicker",function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],restrict:"A",controller:"UibYearpickerController",link:function(e,t,n,r){var i=r[0];angular.extend(i,r[1]),i.yearpickerInit(),i.refreshView()}}}),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,r,i={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},o={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},a=/(HTML|BODY)/;return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){n=this.getRawNode(n);for(var r=n.offsetParent||e[0].documentElement;r&&r!==e[0].documentElement&&function(e){return"static"===(t.getComputedStyle(e).position||"static")}(r);)r=r.offsetParent;return r||e[0].documentElement},scrollbarWidth:function(i){if(i){if(angular.isUndefined(r)){var o=e.find("body");o.addClass("uib-position-body-scrollbar-measure"),r=t.innerWidth-o[0].clientWidth,r=isFinite(r)?r:0,o.removeClass("uib-position-body-scrollbar-measure")}return r}if(angular.isUndefined(n)){var a=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(a),n=a[0].offsetWidth-a[0].clientWidth,n=isFinite(n)?n:0,a.remove()}return n},scrollbarPadding:function(e){e=this.getRawNode(e);var n=t.getComputedStyle(e),r=this.parseStyle(n.paddingRight),i=this.parseStyle(n.paddingBottom),o=this.scrollParent(e,!1,!0),s=this.scrollbarWidth(a.test(o.tagName));return{scrollbarWidth:s,widthOverflow:o.scrollWidth>o.clientWidth,right:r+s,originalRight:r,heightOverflow:o.scrollHeight>o.clientHeight,bottom:i+s,originalBottom:i}},isScrollable:function(e,n){e=this.getRawNode(e);var r=n?i.hidden:i.normal,o=t.getComputedStyle(e);return r.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,r,o){n=this.getRawNode(n);var a=r?i.hidden:i.normal,s=e[0].documentElement,u=t.getComputedStyle(n);if(o&&a.test(u.overflow+u.overflowY+u.overflowX))return n;var l="absolute"===u.position,c=n.parentElement||s;if(c===s||"fixed"===u.position)return s;for(;c.parentElement&&c!==s;){var p=t.getComputedStyle(c);if(l&&"static"!==p.position&&(l=!1),!l&&a.test(p.overflow+p.overflowY+p.overflowX))break;c=c.parentElement}return c},position:function(n,r){n=this.getRawNode(n);var i=this.offset(n);if(r){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var a=this.offsetParent(n),s={top:0,left:0};return a!==e[0].documentElement&&(s=this.offset(a),s.top+=a.clientTop-a.scrollTop,s.left+=a.clientLeft-a.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-s.top),left:Math.round(i.left-s.left)}},offset:function(n){n=this.getRawNode(n);var r=n.getBoundingClientRect();return{width:Math.round(angular.isNumber(r.width)?r.width:n.offsetWidth),height:Math.round(angular.isNumber(r.height)?r.height:n.offsetHeight),top:Math.round(r.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(r.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,r,i){n=this.getRawNode(n),i=!1!==i;var o=n.getBoundingClientRect(),a={top:0,left:0,bottom:0,right:0},s=r?e[0].documentElement:this.scrollParent(n),u=s.getBoundingClientRect();if(a.top=u.top+s.clientTop,a.left=u.left+s.clientLeft,s===e[0].documentElement&&(a.top+=t.pageYOffset,a.left+=t.pageXOffset),a.bottom=a.top+s.clientHeight,a.right=a.left+s.clientWidth,i){var l=t.getComputedStyle(s);a.top+=this.parseStyle(l.paddingTop),a.bottom-=this.parseStyle(l.paddingBottom),a.left+=this.parseStyle(l.paddingLeft),a.right-=this.parseStyle(l.paddingRight)}return{top:Math.round(o.top-a.top),bottom:Math.round(a.bottom-o.bottom),left:Math.round(o.left-a.left),right:Math.round(a.right-o.right)}},parsePlacement:function(e){var t=o.auto.test(e);return t&&(e=e.replace(o.auto,"")),e=e.split("-"),e[0]=e[0]||"top",o.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",o.secondary.test(e[1])||(e[1]="center"),e[2]=!!t,e},positionElements:function(e,n,r,i){e=this.getRawNode(e),n=this.getRawNode(n);var a=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),s=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");r=this.parsePlacement(r);var u=i?this.offset(e):this.position(e),l={top:0,left:0,placement:""};if(r[2]){var c=this.viewportOffset(e,i),p=t.getComputedStyle(n),d={width:a+Math.round(Math.abs(this.parseStyle(p.marginLeft)+this.parseStyle(p.marginRight))),height:s+Math.round(Math.abs(this.parseStyle(p.marginTop)+this.parseStyle(p.marginBottom)))};if(r[0]="top"===r[0]&&d.height>c.top&&d.height<=c.bottom?"bottom":"bottom"===r[0]&&d.height>c.bottom&&d.height<=c.top?"top":"left"===r[0]&&d.width>c.left&&d.width<=c.right?"right":"right"===r[0]&&d.width>c.right&&d.width<=c.left?"left":r[0],r[1]="top"===r[1]&&d.height-u.height>c.bottom&&d.height-u.height<=c.top?"bottom":"bottom"===r[1]&&d.height-u.height>c.top&&d.height-u.height<=c.bottom?"top":"left"===r[1]&&d.width-u.width>c.right&&d.width-u.width<=c.left?"right":"right"===r[1]&&d.width-u.width>c.left&&d.width-u.width<=c.right?"left":r[1],"center"===r[1])if(o.vertical.test(r[0])){var f=u.width/2-a/2;c.left+f<0&&d.width-u.width<=c.right?r[1]="left":c.right+f<0&&d.width-u.width<=c.left&&(r[1]="right")}else{var h=u.height/2-d.height/2;c.top+h<0&&d.height-u.height<=c.bottom?r[1]="top":c.bottom+h<0&&d.height-u.height<=c.top&&(r[1]="bottom")}}switch(r[0]){case"top":l.top=u.top-s;break;case"bottom":l.top=u.top+u.height;break;case"left":l.left=u.left-a;break;case"right":l.left=u.left+u.width}switch(r[1]){case"top":l.top=u.top;break;case"bottom":l.top=u.top+u.height-s;break;case"left":l.left=u.left;break;case"right":l.left=u.left+u.width-a;break;case"center":o.vertical.test(r[0])?l.left=u.left+u.width/2-a/2:l.top=u.top+u.height/2-s/2}return l.top=Math.round(l.top),l.left=Math.round(l.left),l.placement="center"===r[1]?r[0]:r[0]+"-"+r[1],l},adjustTop:function(e,t,n,r){if(-1!==e.indexOf("top")&&n!==r)return{top:t.top-r+"px"}},positionArrow:function(e,n){e=this.getRawNode(e);var r=e.querySelector(".tooltip-inner, .popover-inner");if(r){var i=angular.element(r).hasClass("tooltip-inner"),a=i?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(a){var s={top:"",bottom:"",left:"",right:""};if(n=this.parsePlacement(n),"center"===n[1])return void angular.element(a).css(s);var u="border-"+n[0]+"-width",l=t.getComputedStyle(a)[u],c="border-";o.vertical.test(n[0])?c+=n[0]+"-"+n[1]:c+=n[1]+"-"+n[0],c+="-radius";var p=t.getComputedStyle(i?r:e)[c];switch(n[0]){case"top":s.bottom=i?"0":"-"+l;break;case"bottom":s.top=i?"0":"-"+l;break;case"left":s.right=i?"0":"-"+l;break;case"right":s.left=i?"0":"-"+l}s[n[1]]=p,angular.element(a).css(s)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(e,t,n,r,i,o,a,s,u,l,c,p,d,f,h,m){function g(t){var n=p.parse(t,C,e.date);if(isNaN(n))for(var r=0;r<U.length;r++)if(n=p.parse(t,U[r],e.date),!isNaN(n))return n;return n}function $(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=g(e);if(!isNaN(t))return p.toTimezone(t,I.getOption("timezone"))}return I.getOption("allowInvalid")?e:void 0}function v(e,t){var r=e||t;return!n.ngRequired&&!r||(angular.isNumber(r)&&(r=new Date(r)),!r||(!(!angular.isDate(r)||isNaN(r))||!!angular.isString(r)&&!isNaN(g(r))))}function b(n){if(e.isOpen||!e.disabled){var r=N[0],i=t[0].contains(n.target),o=void 0!==r.contains&&r.contains(n.target);!e.isOpen||i||o||e.$apply(function(){e.isOpen=!1})}}function y(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!1}),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply(function(){e.isOpen=!0}))}function w(){if(e.isOpen){var r=angular.element(N[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:d.placement,o=l.positionElements(t,r,i,S);r.css({top:o.top+"px",left:o.left+"px"}),r.hasClass("uib-position-measure")&&r.removeClass("uib-position-measure")}}function x(e){var t;return angular.version.minor<6?(t=angular.isObject(e.$options)?e.$options:{timezone:null},t.getOption=function(e){return t[e]}):t=e.$options,t}var C,k,S,D,E,O,T,A,M,P,I,N,U,j=!1,V=[];this.init=function(i){if(P=i,I=x(P),k=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):d.closeOnDateSelection,S=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):d.appendToBody,D=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):d.onOpenFocus,E=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,O=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:d.datepickerTemplateUrl,U=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):d.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):d.showButtonBar,d.html5Types[n.type]?(C=d.html5Types[n.type],j=!0):(C=n.uibDatepickerPopup||d.datepickerPopup,n.$observe("uibDatepickerPopup",function(e,t){var n=e||d.datepickerPopup;if(n!==C&&(C=n,P.$modelValue=null,!C))throw new Error("uibDatepickerPopup must have a date format specified.")})),!C)throw new Error("uibDatepickerPopup must have a date format specified.");if(j&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");T=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),T.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":E}),A=angular.element(T.children()[0]),A.attr("template-url",O),e.datepickerOptions||(e.datepickerOptions={}),j&&"month"===n.type&&(e.datepickerOptions.datepickerMode="month",e.datepickerOptions.minMode="month"),A.attr("datepicker-options","datepickerOptions"),j?P.$formatters.push(function(t){return e.date=p.fromTimezone(t,I.getOption("timezone")),t}):(P.$$parserName="date",P.$validators.date=v,P.$parsers.unshift($),P.$formatters.push(function(t){return P.$isEmpty(t)?(e.date=t,t):(angular.isNumber(t)&&(t=new Date(t)),e.date=p.fromTimezone(t,I.getOption("timezone")),p.filter(e.date,C))})),P.$viewChangeListeners.push(function(){e.date=g(P.$viewValue)}),t.on("keydown",y),N=r(T)(e),T.remove(),S?s.find("body").append(N):t.after(N),e.$on("$destroy",function(){for(!0===e.isOpen&&(u.$$phase||e.$apply(function(){e.isOpen=!1})),N.remove(),t.off("keydown",y),s.off("click",b),M&&M.off("scroll",w),angular.element(a).off("resize",w);V.length;)V.shift()()})},e.getText=function(t){return e[t+"Text"]||d[t+"Text"]},e.isDisabled=function(t){"today"===t&&(t=p.fromTimezone(new Date,I.getOption("timezone")));var n={};return angular.forEach(["minDate","maxDate"],function(t){e.datepickerOptions[t]?angular.isDate(e.datepickerOptions[t])?n[t]=new Date(e.datepickerOptions[t]):(m&&i.warn("Literal date support has been deprecated, please switch to date object usage"),n[t]=new Date(c(e.datepickerOptions[t],"medium"))):n[t]=null}),e.datepickerOptions&&n.minDate&&e.compare(t,n.minDate)<0||n.maxDate&&e.compare(t,n.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){e.date=n;var r=e.date?p.filter(e.date,C):null;t.val(r),P.$setViewValue(r),k&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var r=new Date;angular.isDate(e.date)?(t=new Date(e.date),t.setFullYear(r.getFullYear(),r.getMonth(),r.getDate())):(t=p.fromTimezone(r,I.getOption("timezone")),t.setHours(0,0,0,0))}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&V.push(e.$parent.$watch(o(n.ngDisabled),function(t){e.disabled=t})),e.$watch("isOpen",function(r){r?e.disabled?e.isOpen=!1:f(function(){w(),D&&e.$broadcast("uib:datepicker.focus"),s.on("click",b);var r=n.popupPlacement?n.popupPlacement:d.placement;S||l.parsePlacement(r)[2]?(M=M||angular.element(l.scrollParent(t)))&&M.on("scroll",w):M=null,angular.element(a).on("resize",w)},0,!1):(s.off("click",b),M&&M.off("scroll",w),angular.element(a).off("resize",w))}),e.$on("uib:datepicker.mode",function(){f(w,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(e,t,n,r){var i=r[0];r[1].init(i)}}}).directive("uibDatepickerPopupWrap",function(){return{restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepickerPopup/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var r;return function(){var i=this,o=Array.prototype.slice.call(arguments);r&&e.cancel(r),r=e(function(){t.apply(i,o)},n)}}}]),angular.module("ui.bootstrap.multiMap",[]).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var r=e[t];if(r){var i=r.indexOf(n);-1!==i&&r.splice(i,1),r.length||delete e[t]}}}}}}),
angular.module("ui.bootstrap.dropdown",["ui.bootstrap.multiMap","ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope","$$multiMap",function(e,t,n){var r=null,i=n.createNew();this.isOnlyOpen=function(e,t){var n=i.get(t);if(n){if(n.reduce(function(t,n){return n.scope===e?n:t},{}))return 1===n.length}return!1},this.open=function(t,n,a){if(r||e.on("click",o),r&&r!==t&&(r.isOpen=!1),r=t,a){var s=i.get(a);if(s){-1===s.map(function(e){return e.scope}).indexOf(t)&&i.put(a,{scope:t})}else i.put(a,{scope:t})}},this.close=function(t,n,a){if(r===t&&(e.off("click",o),e.off("keydown",this.keybindFilter),r=null),a){var s=i.get(a);if(s){var u=s.reduce(function(e,n){return n.scope===t?n:e},{});u&&i.remove(a,u)}}};var o=function(e){if(r&&r.isOpen&&!(e&&"disabled"===r.getAutoClose()||e&&3===e.which)){var n=r.getToggleElement();if(!(e&&n&&n[0].contains(e.target))){var i=r.getDropdownElement();e&&"outsideClick"===r.getAutoClose()&&i&&i[0].contains(e.target)||(r.focusToggleElement(),r.isOpen=!1,t.$$phase||r.$apply())}}};this.keybindFilter=function(e){if(r){var t=r.getDropdownElement(),n=r.getToggleElement(),i=t&&t[0].contains(e.target),a=n&&n[0].contains(e.target);27===e.which?(e.stopPropagation(),r.focusToggleElement(),o()):r.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&r.isOpen&&(i||a)&&(e.preventDefault(),e.stopPropagation(),r.focusDropdownEntry(e.which))}}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,r,i,o,a,s,u,l,c){function p(){t.append(h.dropdownMenu)}var d,f,h=this,m=e.$new(),g=i.appendToOpenClass,$=i.openClass,v=angular.noop,b=n.onToggle?r(n.onToggle):angular.noop,y=!1,w=u.find("body");t.addClass("dropdown"),this.init=function(){n.isOpen&&(f=r(n.isOpen),v=f.assign,e.$watch(f,function(e){m.isOpen=!!e})),y=angular.isDefined(n.keyboardNav)},this.toggle=function(e){return m.isOpen=arguments.length?!!e:!m.isOpen,angular.isFunction(v)&&v(m,m.isOpen),m.isOpen},this.isOpen=function(){return m.isOpen},m.getToggleElement=function(){return h.toggleElement},m.getAutoClose=function(){return n.autoClose||"always"},m.getElement=function(){return t},m.isKeynavEnabled=function(){return y},m.focusDropdownEntry=function(e){var n=h.dropdownMenu?angular.element(h.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(h.selectedOption)?h.selectedOption=h.selectedOption===n.length-1?h.selectedOption:h.selectedOption+1:h.selectedOption=0;break;case 38:angular.isNumber(h.selectedOption)?h.selectedOption=0===h.selectedOption?0:h.selectedOption-1:h.selectedOption=n.length-1}n[h.selectedOption].focus()},m.getDropdownElement=function(){return h.dropdownMenu},m.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},m.$watch("isOpen",function(i,f){var y=null,x=!1;if(angular.isDefined(n.dropdownAppendTo)){var C=r(n.dropdownAppendTo)(m);C&&(y=angular.element(C))}if(angular.isDefined(n.dropdownAppendToBody)){!1!==r(n.dropdownAppendToBody)(m)&&(x=!0)}if(x&&!y&&(y=w),y&&h.dropdownMenu&&(i?(y.append(h.dropdownMenu),t.on("$destroy",p)):(t.off("$destroy",p),p())),y&&h.dropdownMenu){var k,S,D,E=s.positionElements(t,h.dropdownMenu,"bottom-left",!0),O=0;if(k={top:E.top+"px",display:i?"block":"none"},S=h.dropdownMenu.hasClass("dropdown-menu-right"),S?(k.left="auto",D=s.scrollbarPadding(y),D.heightOverflow&&D.scrollbarWidth&&(O=D.scrollbarWidth),k.right=window.innerWidth-O-(E.left+t.prop("offsetWidth"))+"px"):(k.left=E.left+"px",k.right="auto"),!x){var T=s.offset(y);k.top=E.top-T.top+"px",S?k.right=window.innerWidth-(E.left-T.left+t.prop("offsetWidth"))+"px":k.left=E.left-T.left+"px"}h.dropdownMenu.css(k)}var A=y||t,M=y?g:$,P=A.hasClass(M),I=o.isOnlyOpen(e,y);if(P===!i){var N;N=y?I?"removeClass":"addClass":i?"addClass":"removeClass",a[N](A,M).then(function(){angular.isDefined(i)&&i!==f&&b(e,{open:!!i})})}if(i)h.dropdownMenuTemplateUrl?c(h.dropdownMenuTemplateUrl).then(function(e){d=m.$new(),l(e.trim())(d,function(e){var t=e;h.dropdownMenu.replaceWith(t),h.dropdownMenu=t,u.on("keydown",o.keybindFilter)})}):u.on("keydown",o.keybindFilter),m.focusToggleElement(),o.open(m,t,y);else{if(o.close(m,t,y),h.dropdownMenuTemplateUrl){d&&d.$destroy();var U=angular.element('<ul class="dropdown-menu"></ul>');h.dropdownMenu.replaceWith(U),h.dropdownMenu=U}h.selectedOption=null}angular.isFunction(v)&&v(e,i)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(e,t,n,r){r.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,r){if(r&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(r.dropdownMenuTemplateUrl=i),r.dropdownMenu||(r.dropdownMenu=t)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(e,t,n,r){if(r){t.addClass("dropdown-toggle"),r.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){r.toggle()})};t.on("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(r.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.off("click",i)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,r=0;r<e.length;r++)if(t===e[r].key){n=r;break}return e.splice(n,1)[0]},removeTop:function(){return e.pop()},length:function(){return e.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.multiMap","ui.bootstrap.stackedMap","ui.bootstrap.position"]).provider("$uibResolve",function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var r=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,a){if(r)return r.resolve(e,i,o,a);var s=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?s.push(n.resolve(t.invoke(e))):angular.isString(e)?s.push(n.resolve(t.get(e))):s.push(n.resolve(e))}),n.all(s).then(function(t){var n={},r=0;return angular.forEach(e,function(e,i){n[i]=t[r++]}),n})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){function r(t,r,i){i.modalInClass&&(e.addClass(r,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(n,o){var a=o();t.modalOptions.animation?e.removeClass(r,i.modalInClass).then(a):a()}))}return{restrict:"A",compile:function(e,t){return e.addClass(t.backdropClass),r}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,r){return{scope:{index:"@"},restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,a){o.addClass(a.windowTopClass||""),i.size=a.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var s=t.defer();i.$$postDigest(function(){s.resolve()}),s.promise.then(function(){var s=null;a.modalInClass&&(s=n(o,{addClass:a.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,function(e,t){var r=t();n(o,{removeClass:a.modalInClass}).start().then(r)})),t.when(s).then(function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!r[0].activeElement||!o[0].contains(r[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}}).directive("uibModalTransclude",["$animate",function(e){return{link:function(t,n,r,i,o){o(t.$parent,function(t){n.empty(),e.enter(t,n)})}}}]).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(e,t,n,r,i,o,a,s,u){function l(e){return e.replace(T,function(e,t){return(t?"-":"")+e.toLowerCase()})}function c(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}function p(){for(var e=-1,t=C.keys(),n=0;n<t.length;n++)C.get(t[n]).value.backdrop&&(e=n);return e>-1&&e<D&&(e=D),e}function d(e,t){var n=C.get(e).value,r=n.appendTo;C.remove(e),E=C.top(),E&&(D=parseInt(E.value.modalDomEl.attr("index"),10)),m(n.modalDomEl,n.modalScope,function(){var t=n.openedClass||x;k.remove(t,e);var i=k.hasKey(t);r.toggleClass(t,i),!i&&w&&w.heightOverflow&&w.scrollbarWidth&&(w.originalRight?r.css({paddingRight:w.originalRight+"px"}):r.css({paddingRight:""}),w=null),f(!0)},n.closedDeferred),h(),t&&t.focus?t.focus():r.focus&&r.focus()}function f(e){var t;C.length()>0&&(t=C.top().value,t.modalDomEl.toggleClass(t.windowTopClass||"",e))}function h(){if(b&&-1===p()){var e=y;m(b,y,function(){e=null}),b=void 0,y=void 0}}function m(t,n,r,i){function a(){a.done||(a.done=!0,e.leave(t).then(function(){r&&r(),t.remove(),i&&i.resolve()}),n.$destroy())}var s,u=null,l=function(){return s||(s=o.defer(),u=s.promise),function(){s.resolve()}};return n.$broadcast(S.NOW_CLOSING_EVENT,l),o.when(u).then(a)}function g(e){if(e.isDefaultPrevented())return e;var t=C.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply(function(){S.dismiss(t.key,"escape key press")}));break;case 9:var n=S.loadFocusElementList(t),r=!1;e.shiftKey?(S.isFocusInFirstItem(e,n)||S.isModalFocused(e,t))&&(r=S.focusLastFocusableElement(n)):S.isFocusInLastItem(e,n)&&(r=S.focusFirstFocusableElement(n)),r&&(e.preventDefault(),e.stopPropagation())}}function $(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}function v(){Array.prototype.forEach.call(document.querySelectorAll("["+O+"]"),function(e){var t=parseInt(e.getAttribute(O),10),n=t-1;e.setAttribute(O,n),n||(e.removeAttribute(O),e.removeAttribute("aria-hidden"))})}var b,y,w,x="modal-open",C=s.createNew(),k=a.createNew(),S={NOW_CLOSING_EVENT:"modal.stack.now-closing"},D=0,E=null,O="data-bootstrap-modal-aria-hidden-count",T=/[A-Z]/g;return i.$watch(p,function(e){y&&(y.index=e)}),n.on("keydown",g),i.$on("$destroy",function(){n.off("keydown",g)}),S.open=function(t,o){function a(e){if(e&&"BODY"!==e[0].tagName)return function(e){var t=e.parent()?e.parent().children():[];return Array.prototype.filter.call(t,function(t){return t!==e[0]})}(e).forEach(function(e){var t="true"===e.getAttribute("aria-hidden"),n=parseInt(e.getAttribute(O),10);n||(n=t?1:0),e.setAttribute(O,n+1),e.setAttribute("aria-hidden","true")}),a(e.parent())}var s=n[0].activeElement,c=o.openedClass||x;f(!1),E=C.top(),C.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),k.put(c,t);var d=o.appendTo,h=p();h>=0&&!b&&(y=i.$new(!0),y.modalOptions=o,y.index=h,b=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),b.attr({class:"modal-backdrop","ng-style":"{'z-index': 1040 + (index && 1 || 0) + index*10}","uib-modal-animation-class":"fade","modal-in-class":"in"}),o.backdropClass&&b.addClass(o.backdropClass),o.animation&&b.attr("modal-animation","true"),r(b)(y),e.enter(b,d),u.isScrollable(d)&&(w=u.scrollbarPadding(d),w.heightOverflow&&w.scrollbarWidth&&d.css({paddingRight:w.right+"px"})));var m;o.component?(m=document.createElement(l(o.component.name)),m=angular.element(m),m.attr({resolve:"$resolve","modal-instance":"$uibModalInstance",close:"$close($value)",dismiss:"$dismiss($value)"})):m=o.content,D=E?parseInt(E.value.modalDomEl.attr("index"),10)+1:0;var g=angular.element('<div uib-modal-window="modal-window"></div>');g.attr({class:"modal","template-url":o.windowTemplateUrl,"window-top-class":o.windowTopClass,role:"dialog","aria-labelledby":o.ariaLabelledBy,"aria-describedby":o.ariaDescribedBy,size:o.size,index:D,animate:"animate","ng-style":"{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",tabindex:-1,"uib-modal-animation-class":"fade","modal-in-class":"in"}).append(m),o.windowClass&&g.addClass(o.windowClass),o.animation&&g.attr("modal-animation","true"),d.addClass(c),o.scope&&(o.scope.$$topModalIndex=D),e.enter(r(g)(o.scope),d),C.top().value.modalDomEl=g,C.top().value.modalOpener=s,a(g)},S.close=function(e,t){var n=C.get(e);return v(),n&&$(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),d(e,n.value.modalOpener),!0):!n},S.dismiss=function(e,t){var n=C.get(e);return v(),n&&$(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),d(e,n.value.modalOpener),!0):!n},S.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},S.getTop=function(){return C.top()},S.modalRendered=function(e){var t=C.get(e);t&&t.value.renderDeferred.resolve()},S.focusFirstFocusableElement=function(e){return e.length>0&&(e[0].focus(),!0)},S.focusLastFocusableElement=function(e){return e.length>0&&(e[e.length-1].focus(),!0)},S.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},S.isFocusInFirstItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[0]},S.isFocusInLastItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[t.length-1]},S.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll("a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]");return n?Array.prototype.filter.call(n,function(e){return c(e)}):n}}},S}]).provider("$uibModal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,r,i,o,a,s){function u(e){return e.template?n.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}var l={},c=null;return l.getPromiseChain=function(){return c},l.open=function(i){function l(){return g}var p=n.defer(),d=n.defer(),f=n.defer(),h=n.defer(),m={result:p.promise,opened:d.promise,closed:f.promise,rendered:h.promise,close:function(e){return s.close(m,e)},dismiss:function(e){return s.dismiss(m,e)}};if(i=angular.extend({},e.options,i),i.resolve=i.resolve||{},i.appendTo=i.appendTo||r.find("body").eq(0),!i.appendTo.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");if(!i.component&&!i.template&&!i.templateUrl)throw new Error("One of component or template or templateUrl options is required.");var g;g=i.component?n.when(a.resolve(i.resolve,{},null,null)):n.all([u(i),a.resolve(i.resolve,{},null,null)]);var $;return $=c=n.all([c]).then(l,l).then(function(e){function n(t,n,r,i){t.$scope=a,t.$scope.$resolve={},r?t.$scope.$uibModalInstance=m:t.$uibModalInstance=m;var o=n?e[1]:e;angular.forEach(o,function(e,n){i&&(t[n]=e),t.$scope.$resolve[n]=e})}var r=i.scope||t,a=r.$new();a.$close=m.close,a.$dismiss=m.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var u,l,c={scope:a,deferred:p,renderDeferred:h,closedDeferred:f,animation:i.animation,backdrop:i.backdrop,keyboard:i.keyboard,backdropClass:i.backdropClass,windowTopClass:i.windowTopClass,windowClass:i.windowClass,windowTemplateUrl:i.windowTemplateUrl,ariaLabelledBy:i.ariaLabelledBy,ariaDescribedBy:i.ariaDescribedBy,size:i.size,openedClass:i.openedClass,appendTo:i.appendTo},g={},$={};i.component?(n(g,!1,!0,!1),g.name=i.component,c.component=g):i.controller&&(n($,!0,!1,!0),l=o(i.controller,$,!0,i.controllerAs),i.controllerAs&&i.bindToController&&(u=l.instance,u.$close=a.$close,u.$dismiss=a.$dismiss,angular.extend(u,{$resolve:$.$scope.$resolve},r)),u=l(),angular.isFunction(u.$onInit)&&u.$onInit()),i.component||(c.content=e[0]),s.open(m,c),d.resolve(!0)},function(e){d.reject(e),p.reject(e)}).finally(function(){c===$&&(c=null)}),m},l}]};return e}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,r){t.setNumPages=r.numPages?e(r.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},r.itemsPerPage?t._watchers.push(n.$parent.$watch(r.itemsPerPage,function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()})):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",function(e,r){(angular.isDefined(e)||e!==r)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())})},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,r){r&&r.preventDefault(),(!n.ngDisabled||!r)&&n.page!==e&&e>0&&e<=n.totalPages&&(r&&r.target&&r.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",function(){for(;t._watchers.length;)t._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,r){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):r.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],restrict:"A",controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},link:function(t,n,r,i){n.addClass("pager");var o=i[0],a=i[1];a&&o.init(a,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,r,i){function o(e,t,n){return{number:e,text:t,active:n}}function a(e,t){var n=[],r=1,i=t,a=angular.isDefined(u)&&u<t;a&&(l?(r=Math.max(e-Math.floor(u/2),1),(i=r+u-1)>t&&(i=t,r=i-u+1)):(r=(Math.ceil(e/u)-1)*u+1,i=Math.min(r+u-1,t)));for(var s=r;s<=i;s++){var f=o(s,d(s),s===e);n.push(f)}if(a&&u>0&&(!l||c||p)){if(r>1){if(!p||r>3){var h=o(r-1,"...",!1);n.unshift(h)}if(p){if(3===r){var m=o(2,"2",!1);n.unshift(m)}var g=o(1,"1",!1);n.unshift(g)}}if(i<t){if(!p||i<t-2){var $=o(i+1,"...",!1);n.push($)}if(p){if(i===t-2){var v=o(t-1,t-1,!1);n.push(v)}var b=o(t,t,!1);n.push(b)}}}return n}var s=this,u=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,l=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,c=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,p=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,d=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,t.$set("role","menu"),r.create(this,e,t),t.maxSize&&s._watchers.push(e.$parent.$watch(n(t.maxSize),function(e){u=parseInt(e,10),s.render()}));var f=this.render;this.render=function(){f(),e.page>0&&e.page<=e.totalPages&&(e.pages=a(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],restrict:"A",controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},link:function(e,n,r,i){n.addClass("pagination");var o=i[0],a=i[1];a&&o.init(a,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function e(e){return e.replace(/[A-Z]/g,function(e,t){return(t?"-":"")+e.toLowerCase()})}var t={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},r={};this.options=function(e){angular.extend(r,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(i,o,a,s,u,l,c,p,d){function f(e){if(27===e.which){var t=h.top();t&&(t.value.close(),t=null)}}var h=d.createNew();return s.on("keyup",f),c.$on("$destroy",function(){s.off("keyup",f)}),function(i,c,d,f){function m(e){var t=(e||f.trigger||d).split(" ");return{show:t,hide:t.map(function(e){return n[e]||e})}}f=angular.extend({},t,r,f);var g=e(i),$=l.startSymbol(),v=l.endSymbol(),b="<div "+g+'-popup uib-title="'+$+"title"+v+'" '+(f.useContentExp?'content-exp="contentExp()" ':'content="'+$+"content"+v+'" ')+'origin-scope="origScope" class="uib-position-measure '+c+'" tooltip-animation-class="fade"uib-tooltip-classes ng-class="{ in: isOpen }" ></div>';return{compile:function(e,t){var n=o(b);return function(e,t,r,o){function l(){q.isOpen?g():d()}function d(){R&&!e.$eval(r[c+"Enable"])||(y(),C(),q.popupDelay?P||(P=a($,q.popupDelay,!1)):$())}function g(){v(),q.popupCloseDelay?I||(I=a(b,q.popupCloseDelay,!1)):b()}function $(){if(v(),y(),!q.content)return angular.noop;w(),q.$evalAsync(function(){q.isOpen=!0,k(!0),B()})}function v(){P&&(a.cancel(P),P=null),N&&(a.cancel(N),N=null)}function b(){q&&q.$evalAsync(function(){q&&(q.isOpen=!1,k(!1),q.animation?M||(M=a(x,150,!1)):x())})}function y(){I&&(a.cancel(I),I=null),M&&(a.cancel(M),M=null)}function w(){T||(A=q.$new(),T=n(A,function(e){V?s.find("body").append(e):t.after(e)}),h.add(q,{close:b}),S())}function x(){v(),y(),D(),T&&(T.remove(),T=null,U&&a.cancel(U)),h.remove(q),A&&(A.$destroy(),A=null)}function C(){q.title=r[c+"Title"],q.content=_?_(e):r[i],q.popupClass=r[c+"Class"],q.placement=angular.isDefined(r[c+"Placement"])?r[c+"Placement"]:f.placement;var t=u.parsePlacement(q.placement);j=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(r[c+"PopupDelay"],10),o=parseInt(r[c+"PopupCloseDelay"],10);q.popupDelay=isNaN(n)?f.popupDelay:n,q.popupCloseDelay=isNaN(o)?f.popupCloseDelay:o}function k(t){L&&angular.isFunction(L.assign)&&L.assign(e,t)}function S(){H.length=0,_?(H.push(e.$watch(_,function(e){q.content=e,!e&&q.isOpen&&b()})),H.push(A.$watch(function(){F||(F=!0,A.$$postDigest(function(){F=!1,q&&q.isOpen&&B()}))}))):H.push(r.$observe(i,function(e){q.content=e,!e&&q.isOpen?b():B()})),H.push(r.$observe(c+"Title",function(e){q.title=e,q.isOpen&&B()})),H.push(r.$observe(c+"Placement",function(e){q.placement=e||f.placement,q.isOpen&&B()}))}function D(){H.length&&(angular.forEach(H,function(e){e()}),H.length=0)}function E(e){q&&q.isOpen&&T&&(t[0].contains(e.target)||T[0].contains(e.target)||g())}function O(e){27===e.which&&g()}var T,A,M,P,I,N,U,j,V=!!angular.isDefined(f.appendToBody)&&f.appendToBody,z=m(void 0),R=angular.isDefined(r[c+"Enable"]),q=e.$new(!0),F=!1,L=!!angular.isDefined(r[c+"IsOpen"])&&p(r[c+"IsOpen"]),_=!!f.useContentExp&&p(r[i]),H=[],B=function(){T&&T.html()&&(N||(N=a(function(){var e=u.positionElements(t,T,q.placement,V),n=angular.isDefined(T.offsetHeight)?T.offsetHeight:T.prop("offsetHeight"),r=V?u.offset(t):u.position(t);T.css({top:e.top+"px",left:e.left+"px"});var i=e.placement.split("-");T.hasClass(i[0])||(T.removeClass(j.split("-")[0]),T.addClass(i[0])),T.hasClass(f.placementClassPrefix+e.placement)||(T.removeClass(f.placementClassPrefix+j),T.addClass(f.placementClassPrefix+e.placement)),U=a(function(){var e=angular.isDefined(T.offsetHeight)?T.offsetHeight:T.prop("offsetHeight"),t=u.adjustTop(i,r,n,e);t&&T.css(t),U=null},0,!1),T.hasClass("uib-position-measure")?(u.positionArrow(T,e.placement),T.removeClass("uib-position-measure")):j!==e.placement&&u.positionArrow(T,e.placement),j=e.placement,N=null},0,!1)))};q.origScope=e,q.isOpen=!1,q.contentExp=function(){return q.content},r.$observe("disabled",function(e){e&&v(),e&&q.isOpen&&b()}),L&&e.$watch(L,function(e){q&&!e===q.isOpen&&l()});var W=function(){z.show.forEach(function(e){"outsideClick"===e?t.off("click",l):(t.off(e,d),t.off(e,l)),t.off("keypress",O)}),z.hide.forEach(function(e){"outsideClick"===e?s.off("click",E):t.off(e,g)})};!function(){var n=[],i=[],o=e.$eval(r[c+"Trigger"]);W(),angular.isObject(o)?(Object.keys(o).forEach(function(e){n.push(e),i.push(o[e])}),z={show:n,hide:i}):z=m(o),"none"!==z.show&&z.show.forEach(function(e,n){"outsideClick"===e?(t.on("click",l),s.on("click",E)):e===z.hide[n]?t.on(e,l):e&&(t.on(e,d),t.on(z.hide[n],g)),t.on("keypress",O)})}();var Y=e.$eval(r[c+"Animation"]);q.animation=angular.isDefined(Y)?!!Y:f.animation;var G,K=c+"AppendToBody";G=K in r&&void 0===r[K]||e.$eval(r[K]),V=angular.isDefined(G)?G:V,e.$on("$destroy",function(){W(),x(),q=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,r){return{link:function(i,o,a){var s,u,l,c=i.$eval(a.tooltipTemplateTranscludeScope),p=0,d=function(){u&&(u.remove(),u=null),s&&(s.$destroy(),s=null),l&&(e.leave(l).then(function(){u=null}),u=l,l=null)};i.$watch(t.parseAsResourceUrl(a.uibTooltipTemplateTransclude),function(t){var a=++p;t?(r(t,!0).then(function(r){if(a===p){var i=c.$new(),u=r,f=n(u)(i,function(t){d(),e.enter(t,o)});s=i,l=f,s.$emit("$includeContentLoaded",t)}},function(){a===p&&(d(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):d()}),i.$on("$destroy",d)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,r){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation&&n.addClass(r.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{restrict:"A",scope:{content:"@"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{restrict:"A",scope:{contentExp:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{restrict:"A",scope:{uibTitle:"@",contentExp:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{restrict:"A",scope:{contentExp:"&",uibTitle:"@"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{restrict:"A",scope:{uibTitle:"@",content:"@"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){function r(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}var i=this,o=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=r(),this.addBar=function(e,t,n){o||t.css({transition:"none"}),this.bars.push(e),e.max=r(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",function(t){e.recalculatePercentage()}),e.recalculatePercentage=function(){var t=i.bars.reduce(function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent},0);t>100&&(e.percent-=t-100)},e.$on("$destroy",function(){t=null,i.removeBar(e)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach(function(e){e.recalculatePercentage()})},e.$watch("maxParam",function(e){i.bars.forEach(function(e){e.max=r(),e.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,r){r.addBar(e,t,n)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,r){r.addBar(e,angular.element(t.children()[0]),{title:n.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var r={$setViewValue:angular.noop},i=this;this.init=function(i){r=i,r.$render=this.render,r.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var a=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(a)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;t<n;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&r.$viewValue===t?0:t;r.$setViewValue(n),r.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=r.$viewValue,e.onLeave()},
e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=r.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],restrict:"A",scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",link:function(e,t,n,r){var i=r[0],o=r[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){function t(e){for(var t=0;t<r.tabs.length;t++)if(r.tabs[t].index===e)return t}var n,r=this;r.tabs=[],r.select=function(e,o){if(!i){var a=t(n),s=r.tabs[a];if(s){if(s.tab.onDeselect({$event:o,$selectedIndex:e}),o&&o.isDefaultPrevented())return;s.tab.active=!1}var u=r.tabs[e];u?(u.tab.onSelect({$event:o}),u.tab.active=!0,r.active=u.index,n=u.index):!u&&angular.isDefined(n)&&(r.active=null,n=null)}},r.addTab=function(e){if(r.tabs.push({tab:e,index:e.index}),r.tabs.sort(function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}),e.index===r.active||!angular.isDefined(r.active)&&1===r.tabs.length){var n=t(e.index);r.select(n)}},r.removeTab=function(e){for(var t,n=0;n<r.tabs.length;n++)if(r.tabs[n].tab===e){t=n;break}if(r.tabs[t].index===r.active){var i=t===r.tabs.length-1?t-1:t+1%r.tabs.length;r.select(i)}r.tabs.splice(t,1)},e.$watch("tabset.active",function(e){angular.isDefined(e)&&e!==n&&r.select(t(e))});var i;e.$on("$destroy",function(){i=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=!!angular.isDefined(n.vertical)&&e.$parent.$eval(n.vertical),e.justified=!!angular.isDefined(n.justified)&&e.$parent.$eval(n.justified)}}}).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,r,i,o){t.disabled=!1,r.disable&&t.$parent.$watch(e(r.disable),function(e){t.disabled=!!e}),angular.isUndefined(r.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map(function(e){return e.index}))+1:t.index=0),angular.isUndefined(r.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,r=0;r<i.tabs.length;r++)if(i.tabs[r].tab===t){n=r;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("uibTabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(t,n,r){var i=t.$eval(r.uibTabContentTransclude).tab;i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,r,i,o,a){function s(){var t=+e.hours;if((e.showMeridian?t>0&&t<13:t>=0&&t<24)&&""!==e.hours)return e.showMeridian&&(12===t&&(t=0),e.meridian===k[1]&&(t+=12)),t}function u(){var t=+e.minutes;if(t>=0&&t<60&&""!==e.minutes)return t}function l(){var t=+e.seconds;return t>=0&&t<60?t:void 0}function c(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function p(e){d(),C.$setViewValue(new Date(w)),f(e)}function d(){v&&v.$setValidity("hours",!0),b&&b.$setValidity("minutes",!0),y&&y.$setValidity("seconds",!0),C.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function f(t){if(C.$modelValue){var n=w.getHours(),r=w.getMinutes(),i=w.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:c(n,!S),"m"!==t&&(e.minutes=c(r)),e.meridian=w.getHours()<12?k[0]:k[1],"s"!==t&&(e.seconds=c(i)),e.meridian=w.getHours()<12?k[0]:k[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=k[0]}function h(e){w=g(w,e),p()}function m(e,t){return g(e,60*t)}function g(e,t){var n=new Date(e.getTime()+1e3*t),r=new Date(e);return r.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),r}function $(){return(null===e.hours||""===e.hours)&&(null===e.minutes||""===e.minutes)&&(!e.showSeconds||e.showSeconds&&(null===e.seconds||""===e.seconds))}var v,b,y,w=new Date,x=[],C={$setViewValue:angular.noop},k=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):a.meridians||o.DATETIME_FORMATS.AMPMS,S=!angular.isDefined(n.padHours)||e.$parent.$eval(n.padHours);e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),this.init=function(t,r){C=t,C.$render=this.render,C.$formatters.unshift(function(e){return e?new Date(e):null});var i=r.eq(0),o=r.eq(1),s=r.eq(2);v=i.controller("ngModel"),b=o.controller("ngModel"),y=s.controller("ngModel"),(angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):a.mousewheel)&&this.setupMousewheelEvents(i,o,s),(angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):a.arrowkeys)&&this.setupArrowkeyEvents(i,o,s),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):a.readonlyInput,this.setupInputEvents(i,o,s)};var D=a.hourStep;n.hourStep&&x.push(e.$parent.$watch(r(n.hourStep),function(e){D=+e}));var E=a.minuteStep;n.minuteStep&&x.push(e.$parent.$watch(r(n.minuteStep),function(e){E=+e}));var O;x.push(e.$parent.$watch(r(n.min),function(e){var t=new Date(e);O=isNaN(t)?void 0:t}));var T;x.push(e.$parent.$watch(r(n.max),function(e){var t=new Date(e);T=isNaN(t)?void 0:t}));var A=!1;n.ngDisabled&&x.push(e.$parent.$watch(r(n.ngDisabled),function(e){A=e})),e.noIncrementHours=function(){var e=m(w,60*D);return A||e>T||e<w&&e<O},e.noDecrementHours=function(){var e=m(w,60*-D);return A||e<O||e>w&&e>T},e.noIncrementMinutes=function(){var e=m(w,E);return A||e>T||e<w&&e<O},e.noDecrementMinutes=function(){var e=m(w,-E);return A||e<O||e>w&&e>T},e.noIncrementSeconds=function(){var e=g(w,M);return A||e>T||e<w&&e<O},e.noDecrementSeconds=function(){var e=g(w,-M);return A||e<O||e>w&&e>T},e.noToggleMeridian=function(){return w.getHours()<12?A||m(w,720)>T:A||m(w,-720)<O};var M=a.secondStep;n.secondStep&&x.push(e.$parent.$watch(r(n.secondStep),function(e){M=+e})),e.showSeconds=a.showSeconds,n.showSeconds&&x.push(e.$parent.$watch(r(n.showSeconds),function(t){e.showSeconds=!!t})),e.showMeridian=a.showMeridian,n.showMeridian&&x.push(e.$parent.$watch(r(n.showMeridian),function(t){if(e.showMeridian=!!t,C.$error.time){var n=s(),r=u();angular.isDefined(n)&&angular.isDefined(r)&&(w.setHours(n),p())}else f()})),this.setupMousewheelEvents=function(t,n,r){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()}),r.on("mousewheel wheel",function(t){A||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n,r){t.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))}),n.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))}),r.on("keydown",function(t){A||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))})},this.setupInputEvents=function(t,n,r){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,r){C.$setViewValue(null),C.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t,v&&v.$setValidity("hours",!1)),angular.isDefined(n)&&(e.invalidMinutes=n,b&&b.$setValidity("minutes",!1)),angular.isDefined(r)&&(e.invalidSeconds=r,y&&y.$setValidity("seconds",!1))};e.updateHours=function(){var e=s(),t=u();C.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(e),w.setMinutes(t),w<O||w>T?i(!0):p("h")):i(!0)},t.on("blur",function(t){C.$setTouched(),$()?d():null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=c(e.hours,!S)})}),e.updateMinutes=function(){var e=u(),t=s();C.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(w.setHours(t),w.setMinutes(e),w<O||w>T?i(void 0,!0):p("m")):i(void 0,!0)},n.on("blur",function(t){C.$setTouched(),$()?d():null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=c(e.minutes)})}),e.updateSeconds=function(){var e=l();C.$setDirty(),angular.isDefined(e)?(w.setSeconds(e),p("s")):i(void 0,void 0,!0)},r.on("blur",function(t){$()?d():!e.invalidSeconds&&e.seconds<10&&e.$apply(function(){e.seconds=c(e.seconds)})})},this.render=function(){var t=C.$viewValue;isNaN(t)?(C.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(w=t),w<O||w>T?(C.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):d(),f())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):a.showSpinners,e.incrementHours=function(){e.noIncrementHours()||h(60*D*60)},e.decrementHours=function(){e.noDecrementHours()||h(60*-D*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||h(60*E)},e.decrementMinutes=function(){e.noDecrementMinutes()||h(60*-E)},e.incrementSeconds=function(){e.noIncrementSeconds()||h(M)},e.decrementSeconds=function(){e.noDecrementSeconds()||h(-M)},e.toggleMeridian=function(){var t=u(),n=s();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?h(720*(w.getHours()<12?60:-60)):e.meridian=e.meridian===k[0]?k[1]:k[0])},e.blur=function(){C.$setTouched()},e.$on("$destroy",function(){for(;x.length;)x.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],restrict:"A",controller:"UibTimepickerController",controllerAs:"timepicker",scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,r){var i=r[0],o=r[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){return{parse:function(t){var n=t.match(/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/);if(!n)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+t+'".');return{itemName:n[3],source:e(n[4]),viewMapper:e(n[2]||n[1]),modelMapper:e(n[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,r,i,o,a,s,u,l,c,p,d){function f(){q.moveInProgress||(q.moveInProgress=!0,q.$digest()),Z()}function h(){q.position=A?p.offset(t):p.position(t),q.position.top+=t.prop("offsetHeight")}function m(e){var t;return angular.version.minor<6?(t=e.$options||{},t.getOption=function(e){return t[e]}):t=e.$options,t}var g,$,v=[9,13,27,38,40],b=e.$eval(n.typeaheadMinLength);b||0===b||(b=1),e.$watch(n.typeaheadMinLength,function(e){b=e||0===e?e:1});var y=e.$eval(n.typeaheadWaitMs)||0,w=!1!==e.$eval(n.typeaheadEditable);e.$watch(n.typeaheadEditable,function(e){w=!1!==e});var x,C,k=i(n.typeaheadLoading).assign||angular.noop,S=n.typeaheadShouldSelect?i(n.typeaheadShouldSelect):function(e,t){var n=t.$event;return 13===n.which||9===n.which},D=i(n.typeaheadOnSelect),E=!!angular.isDefined(n.typeaheadSelectOnBlur)&&e.$eval(n.typeaheadSelectOnBlur),O=i(n.typeaheadNoResults).assign||angular.noop,T=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,A=!!n.typeaheadAppendToBody&&e.$eval(n.typeaheadAppendToBody),M=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,P=!1!==e.$eval(n.typeaheadFocusFirst),I=!!n.typeaheadSelectOnExact&&e.$eval(n.typeaheadSelectOnExact),N=i(n.typeaheadIsOpen).assign||angular.noop,U=e.$eval(n.typeaheadShowHint)||!1,j=i(n.ngModel),V=i(n.ngModel+"($$$p)"),z=function(t,n){return angular.isFunction(j(e))&&$.getOption("getterSetter")?V(t,{$$$p:n}):j.assign(t,n)},R=d.parse(n.uibTypeahead),q=e.$new(),F=e.$on("$destroy",function(){q.$destroy()});q.$on("$destroy",F);var L="typeahead-"+q.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":L});var _,H;U&&(_=angular.element("<div></div>"),_.css("position","relative"),t.after(_),H=t.clone(),H.attr("placeholder",""),H.attr("tabindex","-1"),H.val(""),H.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),H.attr("id")&&H.removeAttr("id"),_.append(H),H.after(t));var B=angular.element("<div uib-typeahead-popup></div>");B.attr({id:L,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&B.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&B.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var W=function(){U&&H.val("")},Y=function(){q.matches=[],q.activeIdx=-1,t.attr("aria-expanded",!1),W()},G=function(e){return L+"-option-"+e};q.$watch("activeIdx",function(e){e<0?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",G(e))});var K=function(e,t){return!!(q.matches.length>t&&e)&&e.toUpperCase()===q.matches[t].label.toUpperCase()},J=function(n,r){var i={$viewValue:n};k(e,!0),O(e,!1),o.when(R.source(e,i)).then(function(o){var a=n===g.$viewValue;if(a&&x)if(o&&o.length>0){q.activeIdx=P?0:-1,O(e,!1),q.matches.length=0;for(var s=0;s<o.length;s++)i[R.itemName]=o[s],q.matches.push({id:G(s),label:R.viewMapper(q,i),model:o[s]});if(q.query=n,h(),t.attr("aria-expanded",!0),I&&1===q.matches.length&&K(n,0)&&(angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?c(function(){q.select(0,r)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate.default):q.select(0,r)),U){var u=q.matches[0].label;angular.isString(n)&&n.length>0&&u.slice(0,n.length).toUpperCase()===n.toUpperCase()?H.val(n+u.slice(n.length)):H.val("")}}else Y(),O(e,!0);a&&k(e,!1)},function(){Y(),k(e,!1),O(e,!0)})};A&&(angular.element(u).on("resize",f),s.find("body").on("scroll",f));var Z=c(function(){q.matches.length&&h(),q.moveInProgress=!1},200);q.moveInProgress=!1,q.query=void 0;var Q,X=function(e){Q=a(function(){J(e)},y)},ee=function(){Q&&a.cancel(Q)};Y(),q.assignIsOpen=function(t){N(e,t)},q.select=function(r,i){var o,s,u={};C=!0,u[R.itemName]=s=q.matches[r].model,o=R.modelMapper(e,u),z(e,o),g.$setValidity("editable",!0),g.$setValidity("parse",!0),D(e,{$item:s,$model:o,$label:R.viewMapper(e,u),$event:i}),Y(),!1!==q.$eval(n.typeaheadFocusOnSelect)&&a(function(){t[0].focus()},0,!1)},t.on("keydown",function(t){if(0!==q.matches.length&&-1!==v.indexOf(t.which)){var n=S(e,{$event:t});if(-1===q.activeIdx&&n||9===t.which&&t.shiftKey)return Y(),void q.$digest();t.preventDefault();var r;switch(t.which){case 27:t.stopPropagation(),Y(),e.$digest();break;case 38:q.activeIdx=(q.activeIdx>0?q.activeIdx:q.matches.length)-1,q.$digest(),r=B[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],r.parentNode.scrollTop=r.offsetTop;break;case 40:q.activeIdx=(q.activeIdx+1)%q.matches.length,q.$digest(),r=B[0].querySelectorAll(".uib-typeahead-match")[q.activeIdx],r.parentNode.scrollTop=r.offsetTop;break;default:n&&q.$apply(function(){angular.isNumber(q.debounceUpdate)||angular.isObject(q.debounceUpdate)?c(function(){q.select(q.activeIdx,t)},angular.isNumber(q.debounceUpdate)?q.debounceUpdate:q.debounceUpdate.default):q.select(q.activeIdx,t)})}}}),t.on("focus",function(e){x=!0,0!==b||g.$viewValue||a(function(){J(g.$viewValue,e)},0)}),t.on("blur",function(e){E&&q.matches.length&&-1!==q.activeIdx&&!C&&(C=!0,q.$apply(function(){angular.isObject(q.debounceUpdate)&&angular.isNumber(q.debounceUpdate.blur)?c(function(){q.select(q.activeIdx,e)},q.debounceUpdate.blur):q.select(q.activeIdx,e)})),!w&&g.$error.editable&&(g.$setViewValue(),q.$apply(function(){g.$setValidity("editable",!0),g.$setValidity("parse",!0)}),t.val("")),x=!1,C=!1});var te=function(n){t[0]!==n.target&&3!==n.which&&0!==q.matches.length&&(Y(),l.$$phase||e.$digest())};s.on("click",te),e.$on("$destroy",function(){s.off("click",te),(A||M)&&ne.remove(),A&&(angular.element(u).off("resize",f),s.find("body").off("scroll",f)),B.remove(),U&&_.remove()});var ne=r(B)(q);A?s.find("body").append(ne):M?angular.element(M).eq(0).append(ne):t.after(ne),this.init=function(t){g=t,$=m(g),q.debounceUpdate=i($.getOption("debounce"))(e),g.$parsers.unshift(function(t){return x=!0,0===b||t&&t.length>=b?y>0?(ee(),X(t)):J(t):(k(e,!1),ee(),Y()),w?t:t?void g.$setValidity("editable",!1):(g.$setValidity("editable",!0),null)}),g.$formatters.push(function(t){var n,r,i={};return w||g.$setValidity("editable",!0),T?(i.$model=t,T(e,i)):(i[R.itemName]=t,n=R.viewMapper(e,i),i[R.itemName]=void 0,r=R.viewMapper(e,i),n!==r?n:t)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","uibTypeahead"],link:function(e,t,n,r){r[1].init(r[0])}}}).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,r){t.templateUrl=r.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,r){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e(function(){t.select({activeIdx:n,evt:r})},angular.isNumber(i)?i:i.default):t.select({activeIdx:n,evt:r})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(r,i,o){var a=n(o.templateUrl)(r.$parent)||"uib/template/typeahead/typeahead-match.html";e(a).then(function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(r)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function r(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,a){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=a?(""+t).replace(new RegExp(r(a),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n  <h4 class="panel-title">\n    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n  </h4>\n</div>\n<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n  <div class="panel-body" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n  <span aria-hidden="true">&times;</span>\n  <span class="sr-only">Close</span>\n</button>\n<div ng-transclude></div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div class="carousel-inner" ng-transclude></div>\n<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n  <span class="sr-only">previous</span>\n</a>\n<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n  <span class="sr-only">next</span>\n</a>\n<ol class="carousel-indicators" ng-show="slides.length > 1">\n  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n  </li>\n</ol>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div class="text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div ng-switch="datepickerMode">\n  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepickerPopup/popup.html",'<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n  <li ng-transclude></li>\n  <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n    </span>\n    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n  </li>\n</ul>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html","<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n")}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){
e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind="content"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner"\n  uib-tooltip-template-transclude="contentExp()"\n  tooltip-template-transclude-scope="originScope()"></div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content"\n      uib-tooltip-template-transclude="contentExp()"\n      tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepickerPopup").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0}),function(e,t){"use strict";function n(e,t,n){if(!e)throw ue("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function r(e,t){return e||t?e?t?(W(e)&&(e=e.join(" ")),W(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function i(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function o(e,t,n){var r="";return e=W(e)?e:e&&Z(e)&&e.length?e.split(/\s+/):[],B(e,function(e,i){e&&e.length>0&&(r+=i>0?" ":"",r+=n?t+e:e+t)}),r}function a(e,t){var n=e.indexOf(t);t>=0&&e.splice(n,1)}function s(e){if(e instanceof X)switch(e.length){case 0:return e;case 1:if(e[0].nodeType===V)return e;break;default:return X(u(e))}if(e.nodeType===V)return X(e)}function u(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===V)return n}}function l(e,t,n){B(t,function(t){e.addClass(t,n)})}function c(e,t,n){B(t,function(t){e.removeClass(t,n)})}function p(e){return function(t,n){n.addClass&&(l(e,t,n.addClass),n.addClass=null),n.removeClass&&(c(e,t,n.removeClass),n.removeClass=null)}}function d(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||ee;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=ee},e.$$prepared=!0}return e}function f(e,t){h(e,t),m(e,t)}function h(e,t){t.from&&(e.css(t.from),t.from=null)}function m(e,t){t.to&&(e.css(t.to),t.to=null)}function g(e,t,n){var r=t.options||{},i=n.options||{},o=(r.addClass||"")+" "+(i.addClass||""),a=(r.removeClass||"")+" "+(i.removeClass||""),s=$(e.attr("class"),o,a);i.preparationClasses&&(r.preparationClasses=k(i.preparationClasses,r.preparationClasses),delete i.preparationClasses);var u=r.domOperation!==ee?r.domOperation:null;return H(r,i),u&&(r.domOperation=u),s.addClass?r.addClass=s.addClass:r.addClass=null,s.removeClass?r.removeClass=s.removeClass:r.removeClass=null,t.addClass=r.addClass,t.removeClass=r.removeClass,r}function $(e,t,n){function r(e){Z(e)&&(e=e.split(" "));var t={};return B(e,function(e){e.length&&(t[e]=!0)}),t}var i={};e=r(e),t=r(t),B(t,function(e,t){i[t]=1}),n=r(n),B(n,function(e,t){i[t]=1===i[t]?null:-1});var o={addClass:"",removeClass:""};return B(i,function(t,n){var r,i;1===t?(r="addClass",i=!e[n]||e[n+R]):-1===t&&(r="removeClass",i=e[n]||e[n+z]),i&&(o[r].length&&(o[r]+=" "),o[r]+=n)}),o}function v(e){return e instanceof X?e[0]:e}function b(e,t,n){var r="";t&&(r=o(t,q,!0)),n.addClass&&(r=k(r,o(n.addClass,z))),n.removeClass&&(r=k(r,o(n.removeClass,R))),r.length&&(n.preparationClasses=r,e.addClass(r))}function y(e,t){t.preparationClasses&&(e.removeClass(t.preparationClasses),t.preparationClasses=null),t.activeClasses&&(e.removeClass(t.activeClasses),t.activeClasses=null)}function w(e,t){var n=t?"-"+t+"s":"";return C(e,[ae,n]),[ae,n]}function x(e,t){var n=t?"paused":"",r=U+re;return C(e,[r,n]),[r,n]}function C(e,t){var n=t[0],r=t[1];e.style[n]=r}function k(e,t){return e?t?e+" "+t:e:t}function S(e){return[oe,e+"s"]}function D(e,t){return[t?ie:ae,e+"s"]}function E(e,t,n){var r=Object.create(null),i=e.getComputedStyle(t)||{};return B(n,function(e,t){var n=i[e];if(n){var o=n.charAt(0);("-"===o||"+"===o||o>=0)&&(n=O(n)),0===n&&(n=null),r[t]=n}}),r}function O(e){var t=0,n=e.split(/\s*,\s*/);return B(n,function(e){"s"===e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function T(e){return 0===e||null!=e}function A(e,t){var n=I,r=e+"s";return t?n+=te:r+=" linear all",[n,r]}function M(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){var n=e[t];return n?n.total:0},get:function(t){var n=e[t];return n&&n.value},put:function(t,n){e[t]?e[t].total++:e[t]={total:1,value:n}}}}function P(e,t,n){B(n,function(n){e[n]=Y(e[n])?e[n]:t.style.getPropertyValue(n)})}var I,N,U,j,V=1,z="-add",R="-remove",q="ng-",F="ng-animate",L="$$ngAnimateChildren";void 0===e.ontransitionend&&void 0!==e.onwebkittransitionend?("-webkit-",I="WebkitTransition",N="webkitTransitionEnd transitionend"):(I="transition",N="transitionend"),void 0===e.onanimationend&&void 0!==e.onwebkitanimationend?("-webkit-",U="WebkitAnimation",j="webkitAnimationEnd animationend"):(U="animation",j="animationend");var _,H,B,W,Y,G,K,J,Z,Q,X,ee,te="Duration",ne="TimingFunction",re="PlayState",ie=U+"Delay",oe=U+te,ae=I+"Delay",se=I+te,ue=t.$$minErr("ng"),le=["$$rAF",function(e){function t(e){r=r.concat(e),n()}function n(){if(r.length){for(var t=r.shift(),o=0;o<t.length;o++)t[o]();i||e(function(){i||n()})}}var r,i;return r=t.queue=[],t.waitUntilQuiet=function(t){i&&i(),i=e(function(){i=null,t(),n()})},t}],ce=["$interpolate",function(e){return{link:function(t,n,r){function i(e){e="on"===e||"true"===e,n.data(L,e)}var o=r.ngAnimateChildren;Z(o)&&0===o.length?n.data(L,!0):(i(e(o)(t)),r.$observe("ngAnimateChildren",i))}}}],pe="$$animateCss",de=1e3,fe=3,he=1.5,me={transitionDuration:se,transitionDelay:ae,transitionProperty:I+"Property",animationDuration:oe,animationDelay:ie,animationIterationCount:U+"IterationCount"},ge={transitionDuration:se,transitionDelay:ae,animationDuration:oe,animationDelay:ie},$e=["$animateProvider",function(e){var t=M(),n=M();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(e,r,s,u,l,c,g,$){function b(e,t){var n="$$ngAnimateParentKey",r=e.parentNode;return(r[n]||(r[n]=++F))+"-"+e.getAttribute("class")+"-"+t}function y(n,r,i,o){var a=t.get(i);return a||(a=E(e,n,o),"infinite"===a.animationIterationCount&&(a.animationIterationCount=1)),t.put(i,a),a}function k(i,a,s,u){var l;if(t.count(s)>0&&!(l=n.get(s))){var c=o(a,"-stagger");r.addClass(i,c),l=E(e,i,u),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),r.removeClass(i,c),n.put(s,l)}return l||{}}function O(e){L.push(e),g.waitUntilQuiet(function(){t.flush(),n.flush();for(var e=l(),r=0;r<L.length;r++)L[r](e);L.length=0})}function M(e,t,n){var r=y(e,t,n,me),i=r.animationDelay,o=r.transitionDelay;return r.maxDelay=i&&o?Math.max(i,o):i||o,r.maxDuration=Math.max(r.animationDuration*r.animationIterationCount,r.transitionDuration),r}var V=p(r),F=0,L=[];return function(e,n){function l(){g()}function p(){g(!0)}function g(t){if(!(K||Z&&J)){K=!0,J=!1,H.$$skipPreparationClasses||r.removeClass(e,ye),r.removeClass(e,xe),x(G,!1),w(G,!1),B(se,function(e){G.style[e[0]]=""}),V(e,H),f(e,H),Object.keys(Y).length&&B(Y,function(e,t){e?G.style.setProperty(t,e):G.style.removeProperty(t)}),H.onDone&&H.onDone(),ce&&ce.length&&e.off(ce.join(" "),F);var n=e.data(pe);n&&(u.cancel(n[0].timer),e.removeData(pe)),Q&&Q.complete(!t)}}function y(e){Ue.blockTransition&&w(G,e),Ue.blockKeyframeAnimation&&x(G,!!e)}function E(){return Q=new s({end:l,cancel:p}),O(ee),g(),{$$willAnimate:!1,start:function(){return Q},end:l}}function F(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||Date.now(),r=parseFloat(t.elapsedTime.toFixed(fe));Math.max(n-ae,0)>=re&&r>=ie&&(Z=!0,g())}function L(){function t(){if(!K){if(y(!1),B(se,function(e){var t=e[0],n=e[1];G.style[t]=n}),V(e,H),r.addClass(e,xe),Ue.recalculateTimingStyles){if(we=G.getAttribute("class")+" "+ye,ke=b(G,we),Ie=M(G,we,ke),Ne=Ie.maxDelay,te=Math.max(Ne,0),0===(ie=Ie.maxDuration))return void g();Ue.hasTransitions=Ie.transitionDuration>0,Ue.hasAnimations=Ie.animationDuration>0}if(Ue.applyAnimationDelay&&(Ne="boolean"!=typeof H.delay&&T(H.delay)?parseFloat(H.delay):Ne,te=Math.max(Ne,0),Ie.animationDelay=Ne,je=D(Ne,!0),se.push(je),G.style[je[0]]=je[1]),re=te*de,oe=ie*de,H.easing){var t,i=H.easing;Ue.hasTransitions&&(t=I+ne,se.push([t,i]),G.style[t]=i),Ue.hasAnimations&&(t=U+ne,se.push([t,i]),G.style[t]=i)}Ie.transitionDuration&&ce.push(N),Ie.animationDuration&&ce.push(j),ae=Date.now();var o=re+he*oe,a=ae+o,s=e.data(pe)||[],l=!0;if(s.length){var c=s[0];l=a>c.expectedEndTime,l?u.cancel(c.timer):s.push(g)}if(l){var p=u(n,o,!1);s[0]={timer:p,expectedEndTime:a},s.push(g),e.data(pe,s)}ce.length&&e.on(ce.join(" "),F),H.to&&(H.cleanupStyles&&P(Y,G,Object.keys(H.to)),m(e,H))}}function n(){var t=e.data(pe);if(t){for(var n=1;n<t.length;n++)t[n]();e.removeData(pe)}}if(!K){if(!G.parentNode)return void g();var i=function(e){if(Z)J&&e&&(J=!1,g());else if(J=!e,Ie.animationDuration){var t=x(G,J);J?se.push(t):a(se,t)}},o=Me>0&&(Ie.transitionDuration&&0===Se.transitionDuration||Ie.animationDuration&&0===Se.animationDuration)&&Math.max(Se.animationDelay,Se.transitionDelay);o?u(t,Math.floor(o*Me*de),!1):t(),X.resume=function(){i(!0)},X.pause=function(){i(!1)}}}var H=n||{};H.$$prepared||(H=d(_(H)));var Y={},G=v(e);if(!G||!G.parentNode||!$.enabled())return E();var K,J,Z,Q,X,te,re,ie,oe,ae,se=[],ue=e.attr("class"),le=i(H),ce=[];if(0===H.duration||!c.animations&&!c.transitions)return E();var me=H.event&&W(H.event)?H.event.join(" "):H.event,$e=me&&H.structural,ve="",be="";$e?ve=o(me,q,!0):me&&(ve=me),H.addClass&&(be+=o(H.addClass,z)),H.removeClass&&(be.length&&(be+=" "),be+=o(H.removeClass,R)),H.applyClassesEarly&&be.length&&V(e,H);var ye=[ve,be].join(" ").trim(),we=ue+" "+ye,xe=o(ye,"-active"),Ce=le.to&&Object.keys(le.to).length>0;if(!((H.keyframeStyle||"").length>0||Ce||ye))return E();var ke,Se;if(H.stagger>0){var De=parseFloat(H.stagger);Se={transitionDelay:De,animationDelay:De,transitionDuration:0,animationDuration:0}}else ke=b(G,we),Se=k(G,ye,ke,ge);H.$$skipPreparationClasses||r.addClass(e,ye);var Ee;if(H.transitionStyle){var Oe=[I,H.transitionStyle];C(G,Oe),se.push(Oe)}if(H.duration>=0){Ee=G.style[I].length>0;var Te=A(H.duration,Ee);C(G,Te),se.push(Te)}if(H.keyframeStyle){var Ae=[U,H.keyframeStyle];C(G,Ae),se.push(Ae)}var Me=Se?H.staggerIndex>=0?H.staggerIndex:t.count(ke):0,Pe=0===Me;Pe&&!H.skipBlocking&&w(G,9999);var Ie=M(G,we,ke),Ne=Ie.maxDelay;te=Math.max(Ne,0),ie=Ie.maxDuration;var Ue={};if(Ue.hasTransitions=Ie.transitionDuration>0,Ue.hasAnimations=Ie.animationDuration>0,Ue.hasTransitionAll=Ue.hasTransitions&&"all"===Ie.transitionProperty,Ue.applyTransitionDuration=Ce&&(Ue.hasTransitions&&!Ue.hasTransitionAll||Ue.hasAnimations&&!Ue.hasTransitions),Ue.applyAnimationDuration=H.duration&&Ue.hasAnimations,Ue.applyTransitionDelay=T(H.delay)&&(Ue.applyTransitionDuration||Ue.hasTransitions),Ue.applyAnimationDelay=T(H.delay)&&Ue.hasAnimations,Ue.recalculateTimingStyles=be.length>0,(Ue.applyTransitionDuration||Ue.applyAnimationDuration)&&(ie=H.duration?parseFloat(H.duration):ie,Ue.applyTransitionDuration&&(Ue.hasTransitions=!0,Ie.transitionDuration=ie,Ee=G.style[I+"Property"].length>0,se.push(A(ie,Ee))),Ue.applyAnimationDuration&&(Ue.hasAnimations=!0,Ie.animationDuration=ie,se.push(S(ie)))),0===ie&&!Ue.recalculateTimingStyles)return E();if(null!=H.delay){var je;"boolean"!=typeof H.delay&&(je=parseFloat(H.delay),te=Math.max(je,0)),Ue.applyTransitionDelay&&se.push(D(je)),Ue.applyAnimationDelay&&se.push(D(je,!0))}return null==H.duration&&Ie.transitionDuration>0&&(Ue.recalculateTimingStyles=Ue.recalculateTimingStyles||Pe),re=te*de,oe=ie*de,H.skipBlocking||(Ue.blockTransition=Ie.transitionDuration>0,Ue.blockKeyframeAnimation=Ie.animationDuration>0&&Se.animationDelay>0&&0===Se.animationDuration),H.from&&(H.cleanupStyles&&P(Y,G,Object.keys(H.from)),h(e,H)),Ue.blockTransition||Ue.blockKeyframeAnimation?y(ie):H.skipBlocking||w(G,!1),{$$willAnimate:!0,end:l,start:function(){if(!K)return X={end:l,cancel:p,resume:null,pause:null},Q=new s(X),O(L),Q}}}}]}],ve=["$$animationProvider",function(e){function t(e){return e.parentNode&&11===e.parentNode.nodeType}e.drivers.push("$$animateCssDriver");var n="ng-animate-shim",r="ng-anchor-out";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(e,i,o,a,s,u,l){function c(e){return e.replace(/\bng-\S+\b/g,"")}function p(e,t){return Z(e)&&(e=e.split(" ")),Z(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function d(t,i,a){function s(e){var t={},n=v(e).getBoundingClientRect();return B(["width","height","top","left"],function(e){var r=n[e];switch(e){case"top":r+=m.scrollTop;break;case"left":r+=m.scrollLeft}t[e]=Math.floor(r)+"px"}),t}function u(e){return e.attr("class")||""}function l(){var t=c(u(a)),n=p(t,h),i=p(h,t),o=e(f,{to:s(a),addClass:"ng-anchor-in "+n,removeClass:r+" "+i,delay:!0});return o.$$willAnimate?o:null}function d(){f.remove(),i.removeClass(n),a.removeClass(n)}var f=X(v(i).cloneNode(!0)),h=c(u(f));i.addClass(n),a.addClass(n),f.addClass("ng-anchor"),$.append(f);var g,b=function(){var t=e(f,{addClass:r,delay:!0,from:s(i)});return t.$$willAnimate?t:null}();if(!b&&!(g=l()))return d();var y=b||g;return{start:function(){function e(){n&&n.end()}var t,n=y.start();return n.done(function(){if(n=null,!g&&(g=l()))return n=g.start(),n.done(function(){n=null,d(),t.complete()}),n;d(),t.complete()}),t=new o({end:e,cancel:e})}}}function f(e,t,n,r){var i=h(e),a=h(t),s=[];if(B(r,function(e){var t=e.out,r=e.in,i=d(n,t,r);i&&s.push(i)}),i||a||0!==s.length)return{start:function(){function e(){B(t,function(e){e.end()})}var t=[];i&&t.push(i.start()),a&&t.push(a.start()),B(s,function(e){t.push(e.start())});var n=new o({end:e,cancel:e});return o.all(t,function(e){n.complete(e)}),n}}}function h(t){var n=t.element,r=t.options||{};t.structural&&(r.event=t.event,r.structural=!0,r.applyClassesEarly=!0,"leave"===t.event&&(r.onDone=r.domOperation)),r.preparationClasses&&(r.event=k(r.event,r.preparationClasses));var i=e(n,r);return i.$$willAnimate?i:null}if(!s.animations&&!s.transitions)return ee;var m=l[0].body,g=v(a),$=X(t(g)||m.contains(g)?g:m);return function(e){return e.from&&e.to?f(e.from,e.to,e.classes,e.anchors):h(e)}}]}],be=["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(t,n,r){function i(n){n=W(n)?n:n.split(" ");for(var r=[],i={},o=0;o<n.length;o++){var a=n[o],s=e.$$registeredAnimations[a];s&&!i[a]&&(r.push(t.get(s)),i[a]=!0)}return r}var o=p(r);return function(e,t,r,a){function s(){a.domOperation(),o(e,a)}function u(){h=!0,s(),f(e,a)}function l(e,t,r,i,o){var a;switch(r){case"animate":a=[t,i.from,i.to,o];break;case"setClass":a=[t,$,v,o];break;case"addClass":a=[t,$,o];break;case"removeClass":a=[t,v,o];break;default:a=[t,o]}a.push(i);var s=e.apply(e,a);if(s)if(K(s.start)&&(s=s.start()),s instanceof n)s.done(o);else if(K(s))return s;return ee}function c(e,t,r,i,o){var a=[];return B(i,function(i){var s=i[o];s&&a.push(function(){var i,o,a=!1,u=function(e){a||(a=!0,(o||ee)(e),i.complete(!e))};return i=new n({end:function(){u()},cancel:function(){u(!0)}}),o=l(s,e,t,r,function(e){u(!1===e)}),i})}),a}function p(e,t,r,i,o){var a=c(e,t,r,i,o);if(0===a.length){var s,u;"beforeSetClass"===o?(s=c(e,"removeClass",r,i,"beforeRemoveClass"),u=c(e,"addClass",r,i,"beforeAddClass")):"setClass"===o&&(s=c(e,"removeClass",r,i,"removeClass"),u=c(e,"addClass",r,i,"addClass")),s&&(a=a.concat(s)),u&&(a=a.concat(u))}if(0!==a.length)return function(e){var t=[];return a.length&&B(a,function(e){t.push(e())}),t.length?n.all(t,e):e(),function(e){B(t,function(t){e?t.cancel():t.end()})}}}var h=!1;3===arguments.length&&J(r)&&(a=r,r=null),a=d(a),r||(r=e.attr("class")||"",a.addClass&&(r+=" "+a.addClass),a.removeClass&&(r+=" "+a.removeClass));var m,g,$=a.addClass,v=a.removeClass,b=i(r);if(b.length){var y,w;"leave"===t?(w="leave",y="afterLeave"):(w="before"+t.charAt(0).toUpperCase()+t.substr(1),y=t),"enter"!==t&&"move"!==t&&(m=p(e,t,a,b,w)),g=p(e,t,a,b,y)}if(m||g){var x;return{$$willAnimate:!0,end:function(){return x?x.end():(u(),x=new n,x.complete(!0)),x},start:function(){function e(e){u(e),x.complete(e)}function t(t){h||((r||ee)(t),e(t))}if(x)return x;x=new n;var r,i=[];return m&&i.push(function(e){r=m(e)}),i.length?i.push(function(e){s(),e(!0)}):s(),g&&i.push(function(e){r=g(e)}),x.setHost({end:function(){t()},cancel:function(){t(!0)}}),n.chain(i,e),x}}}}}]}],ye=["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function n(t){var n=t.element,r=t.event,i=t.options,o=t.classes;return e(n,r,o,i)}return function(e){if(e.from&&e.to){var r=n(e.from),i=n(e.to);if(!r&&!i)return;return{start:function(){function e(){return function(){B(o,function(e){e.end()})}}function n(e){a.complete(e)}var o=[];r&&o.push(r.start()),i&&o.push(i.start()),t.all(o,n);var a=new t({end:e(),cancel:e()});return a}}}return n(e)}}]}],we="data-ng-animate",xe="$ngAnimatePin",Ce=["$animateProvider",function(t){function r(e){if(!e)return null;var t=e.split(h),n=Object.create(null);return B(t,function(e){n[e]=!0}),n}function i(e,t){if(e&&t){var n=r(t);return e.split(h).some(function(e){return n[e]})}}function o(e,t,n){return m[e].some(function(e){return e(t,n)})}function a(e,t){var n=(e.addClass||"").length>0,r=(e.removeClass||"").length>0;return t?n&&r:n||r}var l=1,c=2,h=" ",m=this.rules={skip:[],cancel:[],join:[]};m.join.push(function(e,t){return!e.structural&&a(e)}),m.skip.push(function(e,t){return!e.structural&&!a(e)}),m.skip.push(function(e,t){return"leave"===t.event&&e.structural}),m.skip.push(function(e,t){return t.structural&&t.state===c&&!e.structural}),m.cancel.push(function(e,t){return t.structural&&e.structural}),m.cancel.push(function(e,t){return t.state===c&&e.structural}),m.cancel.push(function(e,t){if(t.structural)return!1;var n=e.addClass,r=e.removeClass,o=t.addClass,a=t.removeClass;return!(Q(n)&&Q(r)||Q(o)&&Q(a))&&(i(n,a)||i(r,o))}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$Map","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow","$$isDocumentHidden",function(r,i,h,m,$,w,x,C,k,S,D){function E(){var e=!1;return function(t){e?t():i.$$postDigest(function(){e=!0,t()})}}function O(e,t){return g(e,t,{})}function T(e,t,n){var r=[],i=K[n]
;return i&&B(i,function(i){re.call(i.node,t)?r.push(i.callback):"leave"===n&&re.call(i.node,e)&&r.push(i.callback)}),r}function A(e,t,n){var r=u(t);return e.filter(function(e){return!(e.node===r&&(!n||e.callback===n))})}function M(e,t){"close"!==e||t.parentNode||ie.off(t)}function P(e,t,n){function u(e,t,n,i){S(function(){var e=T(C,$,t);e.length?r(function(){B(e,function(e){e(m,n,i)}),M(n,$)}):M(n,$)}),e.progress(t,n,i)}function p(e){y(m,h),ne(m,h),f(m,h),h.domOperation(),k.complete(!e)}var h=_(n),m=s(e),$=v(m),C=$&&$.parentNode;h=d(h);var k=new x,S=E();if(W(h.addClass)&&(h.addClass=h.addClass.join(" ")),h.addClass&&!Z(h.addClass)&&(h.addClass=null),W(h.removeClass)&&(h.removeClass=h.removeClass.join(" ")),h.removeClass&&!Z(h.removeClass)&&(h.removeClass=null),h.from&&!J(h.from)&&(h.from=null),h.to&&!J(h.to)&&(h.to=null),!$)return p(),k;var A=[$.getAttribute("class"),h.addClass,h.removeClass].join(" ");if(!te(A))return p(),k;var P=["enter","move","leave"].indexOf(t)>=0,V=D(),F=!q||V||R.get($),L=!F&&z.get($)||{},H=!!L.state;if(F||H&&L.state===l||(F=!U($,C,t)),F)return V&&u(k,t,"start"),p(),V&&u(k,t,"close"),k;P&&I($);var Y={structural:P,element:m,event:t,addClass:h.addClass,removeClass:h.removeClass,close:p,options:h,runner:k};if(H){if(o("skip",Y,L))return L.state===c?(p(),k):(g(m,L,Y),L.runner);if(o("cancel",Y,L))if(L.state===c)L.runner.end();else{if(!L.structural)return g(m,L,Y),L.runner;L.close()}else{if(o("join",Y,L)){if(L.state!==c)return b(m,P?t:null,h),t=Y.event=L.event,h=g(m,L,Y),L.runner;O(m,Y)}}}else O(m,Y);var G=Y.structural;if(G||(G="animate"===Y.event&&Object.keys(Y.options.to||{}).length>0||a(Y)),!G)return p(),N($),k;var K=(L.counter||0)+1;return Y.counter=K,j($,l,Y),i.$$postDigest(function(){m=s(e);var n=z.get($),r=!n;n=n||{};var i=m.parent()||[],o=i.length>0&&("animate"===n.event||n.structural||a(n));if(r||n.counter!==K||!o)return r&&(ne(m,h),f(m,h)),(r||P&&n.event!==t)&&(h.domOperation(),k.end()),void(o||N($));t=!n.structural&&a(n,!0)?"setClass":n.event,j($,c);var l=w(m,t,n.options);k.setHost(l),u(k,t,"start",{}),l.done(function(e){p(!e);var n=z.get($);n&&n.counter===K&&N($),u(k,t,"close",{})})}),k}function I(e){var t=e.querySelectorAll("["+we+"]");B(t,function(e){var t=parseInt(e.getAttribute(we),10),n=z.get(e);if(n)switch(t){case c:n.runner.end();case l:z.delete(e)}})}function N(e){e.removeAttribute(we),z.delete(e)}function U(e,t,n){var r,i=m[0].body,o=v(h),a=e===i||"HTML"===e.nodeName,s=e===o,u=!1,l=R.get(e),c=X.data(e,xe);for(c&&(t=v(c));t&&(s||(s=t===o),t.nodeType===V);){var p=z.get(t)||{};if(!u){var d=R.get(t);if(!0===d&&!1!==l){l=!0;break}!1===d&&(l=!1),u=p.structural}if(Q(r)||!0===r){var f=X.data(t,L);Y(f)&&(r=f)}if(u&&!1===r)break;if(a||(a=t===i),a&&s)break;t=s||!(c=X.data(t,xe))?t.parentNode:v(c)}return(!u||r)&&!0!==l&&s&&a}function j(e,t,n){n=n||{},n.state=t,e.setAttribute(we,t);var r=z.get(e),i=r?H(r,n):n;z.set(e,i)}var z=new $,R=new $,q=null,F=i.$watch(function(){return 0===C.totalPendingRequests},function(e){e&&(F(),i.$$postDigest(function(){i.$$postDigest(function(){null===q&&(q=!0)})}))}),K=Object.create(null),ee=t.classNameFilter(),te=ee?function(e){return ee.test(e)}:function(){return!0},ne=p(k),re=e.Node.prototype.contains||function(e){return this===e||!!(16&this.compareDocumentPosition(e))},ie={on:function(e,t,n){var r=u(t);K[e]=K[e]||[],K[e].push({node:r,callback:n}),X(t).on("$destroy",function(){z.get(r)||ie.off(e,t,n)})},off:function(e,t,n){if(1!==arguments.length||Z(arguments[0])){var r=K[e];r&&(K[e]=1===arguments.length?null:A(r,t,n))}else{t=arguments[0];for(var i in K)K[i]=A(K[i],t)}},pin:function(e,t){n(G(e),"element","not an element"),n(G(t),"parentElement","not an element"),e.data(xe,t)},push:function(e,t,n,r){return n=n||{},n.domOperation=r,P(e,t,n)},enabled:function(e,t){var n=arguments.length;if(0===n)t=!!q;else{if(G(e)){var r=v(e);1===n?t=!R.get(r):R.set(r,!t)}else t=q=!!e}return t}};return ie}]}],ke=["$animateProvider",function(e){function t(e,t){e.data(s,t)}function n(e){e.removeData(s)}function i(e){return e.data(s)}var o="ng-animate-ref",a=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$Map","$$rAFScheduler",function(e,s,u,l,c,h){function m(e){function t(e){if(e.processed)return e;e.processed=!0;var n=e.domNode,o=n.parentNode;i.set(n,e);for(var a;o;){if(a=i.get(o)){a.processed||(a=t(a));break}o=o.parentNode}return(a||r).children.push(e),e}var n,r={children:[]},i=new c;for(n=0;n<e.length;n++){var o=e[n];i.set(o.domNode,e[n]={domNode:o.domNode,fn:o.fn,children:[]})}for(n=0;n<e.length;n++)t(e[n]);return function(e){var t,n=[],r=[];for(t=0;t<e.children.length;t++)r.push(e.children[t]);var i=r.length,o=0,a=[];for(t=0;t<r.length;t++){var s=r[t];i<=0&&(i=o,o=0,n.push(a),a=[]),a.push(s.fn),s.children.forEach(function(e){o++,r.push(e)}),i--}return a.length&&n.push(a),n}(r)}var g=[],$=p(e);return function(c,p,b){function y(e){var t="["+o+"]",n=e.hasAttribute(o)?[e]:e.querySelectorAll(t),r=[];return B(n,function(e){var t=e.getAttribute(o);t&&t.length&&r.push(e)}),r}function w(e){var t=[],n={};B(e,function(e,r){var i=e.element,a=v(i),s=e.event,u=["enter","move"].indexOf(s)>=0,l=e.structural?y(a):[];if(l.length){var c=u?"to":"from";B(l,function(e){var t=e.getAttribute(o);n[t]=n[t]||{},n[t][c]={animationID:r,element:X(e)}})}else t.push(e)});var r={},i={};return B(n,function(n,o){var a=n.from,s=n.to;if(!a||!s){var u=a?a.animationID:s.animationID,l=u.toString();return void(r[l]||(r[l]=!0,t.push(e[u])))}var c=e[a.animationID],p=e[s.animationID],d=a.animationID.toString();if(!i[d]){var f=i[d]={structural:!0,beforeStart:function(){c.beforeStart(),p.beforeStart()},close:function(){c.close(),p.close()},classes:x(c.classes,p.classes),from:c,to:p,anchors:[]};f.classes.length?t.push(f):(t.push(c),t.push(p))}i[d].anchors.push({out:a.element,in:s.element})}),t}function x(e,t){e=e.split(" "),t=t.split(" ");for(var n=[],r=0;r<e.length;r++){var i=e[r];if("ng-"!==i.substring(0,3))for(var o=0;o<t.length;o++)if(i===t[o]){n.push(i);break}}return n.join(" ")}function C(e){for(var t=a.length-1;t>=0;t--){var n=a[t],r=u.get(n),i=r(e);if(i)return i}}function k(){c.addClass(F),M&&e.addClass(c,M),P&&(e.removeClass(c,P),P=null)}function S(e,t){function n(e){var n=i(e);n&&n.setHost(t)}e.from&&e.to?(n(e.from.element),n(e.to.element)):n(e.element)}function D(){var e=i(c);!e||"leave"===p&&b.$$domOperationFired||e.end()}function E(t){c.off("$destroy",D),n(c),$(c,b),f(c,b),b.domOperation(),M&&e.removeClass(c,M),c.removeClass(F),T.complete(!t)}b=d(b);var O=["enter","move","leave"].indexOf(p)>=0,T=new l({end:function(){E()},cancel:function(){E(!0)}});if(!a.length)return E(),T;t(c,T);var A=r(c.attr("class"),r(b.addClass,b.removeClass)),M=b.tempClasses;M&&(A+=" "+M,b.tempClasses=null);var P;return O&&(P="ng-"+p+"-prepare",e.addClass(c,P)),g.push({element:c,classes:A,event:p,structural:O,options:b,beforeStart:k,close:E}),c.on("$destroy",D),g.length>1?T:(s.$$postDigest(function(){var e=[];B(g,function(t){i(t.element)?e.push(t):t.close()}),g.length=0;var t=w(e),n=[];B(t,function(e){n.push({domNode:v(e.from?e.from.element:e.element),fn:function(){e.beforeStart();var t,n=e.close;if(i(e.anchors?e.from.element||e.to.element:e.element)){var r=C(e);r&&(t=r.start)}if(t){var o=t();o.done(function(e){n(!e)}),S(e,o)}else n()}})}),h(m(n))}),T)}}]}],Se=["$animate","$rootScope",function(e,t){return{restrict:"A",transclude:"element",terminal:!0,priority:600,link:function(t,n,r,i,o){var a,s;t.$watchCollection(r.ngAnimateSwap||r.for,function(r){a&&e.leave(a),s&&(s.$destroy(),s=null),(r||0===r)&&(s=t.$new(),o(s,function(t){a=t,e.enter(t,null,n)}))})}}}];t.module("ngAnimate",[],function(){ee=t.noop,_=t.copy,H=t.extend,X=t.element,B=t.forEach,W=t.isArray,Z=t.isString,J=t.isObject,Q=t.isUndefined,Y=t.isDefined,K=t.isFunction,G=t.isElement}).info({angularVersion:"1.6.4"}).directive("ngAnimateSwap",Se).directive("ngAnimateChildren",ce).factory("$$rAFScheduler",le).provider("$$animateQueue",Ce).provider("$$animation",ke).provider("$animateCss",$e).provider("$$animateCssDriver",ve).provider("$$animateJs",be).provider("$$animateJsDriver",ye)}(window,window.angular),function(e,t){"use strict";function n(){function e(e,t){if(e)return i(e)?e.indexOf(t)>=0:e.hasOwnProperty(t)}return["$animate",function(t){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(n,r,o,a,s){var u,l=r[0],c=o.ngMessage||o.when,p=o.ngMessageExp||o.whenExp,d=function(e){u=e?i(e)?e:e.split(/[\s,]+/):null,a.reRender()};p?(d(n.$eval(p)),n.$watchCollection(p,d)):d(c);var f,h;a.register(l,h={test:function(t){return e(u,t)},attach:function(){f||s(function(e,n){t.enter(e,null,r),f=e;var i=f.$$attachId=a.getAttachId();f.on("$destroy",function(){f&&f.$$attachId===i&&(a.deregister(l),h.detach()),n.$destroy()})})},detach:function(){if(f){var e=f;f=null,t.leave(e)}}})}}}]}var r,i,o,a;t.module("ngMessages",[],function(){r=t.forEach,i=t.isArray,o=t.isString,a=t.element}).info({angularVersion:"1.6.4"}).directive("ngMessages",["$animate",function(e){function t(e,t){return o(t)&&0===t.length||n(e.$eval(t))}function n(e){return o(e)?e.length:!!e}return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(i,o,a){function s(e,t){for(var n=t,r=[];n&&n!==e;){var i=n.$$ngMessageNode;if(i&&i.length)return m[i];n.childNodes.length&&-1===r.indexOf(n)?(r.push(n),n=n.childNodes[n.childNodes.length-1]):n.previousSibling?n=n.previousSibling:(n=n.parentNode,r.push(n))}}function u(e,t,n){var r=m[n];if(c.head){var i=s(e,t);i?(r.next=i.next,i.next=r):(r.next=c.head,c.head=r)}else c.head=r}function l(e,t,n){var r=m[n],i=s(e,t);i?i.next=r.next:c.head=r.next}var c=this,p=0,d=0;this.getAttachId=function(){return d++};var f,h,m=this.messages={};this.render=function(s){s=s||{},f=!1,h=s;for(var u=t(o,a.ngMessagesMultiple)||t(o,a.multiple),l=[],p={},d=c.head,m=!1,g=0;null!=d;){g++;var $=d.message,v=!1;m||r(s,function(e,t){if(!v&&n(e)&&$.test(t)){if(p[t])return;p[t]=!0,v=!0,$.attach()}}),v?m=!u:l.push($),d=d.next}r(l,function(e){e.detach()}),l.length!==g?e.setClass(i,"ng-active","ng-inactive"):e.setClass(i,"ng-inactive","ng-active")},o.$watchCollection(a.ngMessages||a.for,c.render),i.on("$destroy",function(){r(m,function(e){e.message.detach()})}),this.reRender=function(){f||(f=!0,o.$evalAsync(function(){f&&h&&c.render(h)}))},this.register=function(e,t){var n=p.toString();m[n]={message:t},u(i[0],e,n),e.$$ngMessageNode=n,p++,c.reRender()},this.deregister=function(e){var t=e.$$ngMessageNode;delete e.$$ngMessageNode,l(i[0],e,t),delete m[t],c.reRender()}}]}}]).directive("ngMessagesInclude",["$templateRequest","$document","$compile",function(e,t,n){function r(e,r){var i=n.$$createComment?n.$$createComment("ngMessagesInclude",r):t[0].createComment(" ngMessagesInclude: "+r+" "),o=a(i);e.after(o),e.remove()}return{restrict:"AE",require:"^^ngMessages",link:function(t,i,a){var s=a.ngMessagesInclude||a.src;e(s).then(function(e){t.$$destroyed||(o(e)&&!e.trim()?r(i,s):n(e)(t,function(e){i.after(e),r(i,s)}))})}}}]).directive("ngMessage",n()).directive("ngMessageExp",n())}(window,window.angular),angular.module("Kuler",["ui.router","ngResource","satellizer","checklist-model","ui.bootstrap","ngAnimate","ngMessages"]).constant("API_URL","https://protected-escarpment-25598.herokuapp.com").config(function(){Stripe.setPublishableKey("pk_test_6pRNASCoBOKtIshFeQd4XMUh")}),angular.module("Kuler").config(Auth),Auth.$inject=["$authProvider","API_URL"],angular.module("Kuler").config(Router),Router.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],angular.module("Kuler").controller("AuthCtrl",AuthCtrl),AuthCtrl.$inject=["$auth","$state"],angular.module("Kuler").controller("MainCtrl",MainCtrl),MainCtrl.$inject=["$rootScope","$state","$auth"],angular.module("Kuler").controller("PaymentController",PaymentController),PaymentController.$inject=["$http","API_URL"],angular.module("Kuler").controller("PrintsIndexCtrl",PrintsIndexCtrl).controller("PrintsNewCtrl",PrintsNewCtrl).controller("PrintsShowCtrl",PrintsShowCtrl).controller("PrintsEditCtrl",PrintsEditCtrl),PrintsIndexCtrl.$inject=["Print","filterFilter","$scope"],PrintsNewCtrl.$inject=["Print","User","$state"],PrintsShowCtrl.$inject=["Print","User","Comment","$stateParams","$state","$auth"],PrintsEditCtrl.$inject=["Print","User","$stateParams","$state"],angular.module("Kuler").controller("UsersIndexCtrl",UsersIndexCtrl).controller("UsersShowCtrl",UsersShowCtrl),UsersIndexCtrl.$inject=["User"],UsersShowCtrl.$inject=["User","$stateParams","$state","$auth"],angular.module("Kuler").directive("base64",base64),angular.module("Kuler").factory("Comment",Comment),Comment.$inject=["$resource","API_URL"],angular.module("Kuler").factory("Print",Print),Print.$inject=["$resource","API_URL"],angular.module("Kuler").factory("User",User),User.$inject=["$resource","API_URL"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJBdXRoIiwiJGF1dGhQcm92aWRlciIsIkFQSV9VUkwiLCJzaWdudXBVcmwiLCJsb2dpblVybCIsIlJvdXRlciIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm90aGVyd2lzZSIsIkF1dGhDdHJsIiwiJGF1dGgiLCIkc3RhdGUiLCJyZWdpc3RlciIsInNpZ251cCIsInZtIiwidXNlciIsInRoZW4iLCJnbyIsImxvZ2luIiwiY3JlZGVudGlhbHMiLCJ0aGlzIiwiTWFpbkN0cmwiLCIkcm9vdFNjb3BlIiwibG9nb3V0IiwiJG9uIiwic3RhdGVIYXNDaGFuZ2VkIiwibWVzc2FnZSIsImlzTmF2Q29sbGFwc2VkIiwiaXNBdXRoZW50aWNhdGVkIiwiZSIsImVyciIsImRhdGEiLCJnZXRQYXlsb2FkIiwiY3VycmVudFVzZXIiLCJwcm90ZWN0ZWRTdGF0ZXMiLCJ0b1N0YXRlIiwiaW5jbHVkZXMiLCJuYW1lIiwicHJldmVudERlZmF1bHQiLCJwYWdlTmFtZSIsIlBheW1lbnRDb250cm9sbGVyIiwiJGh0dHAiLCJzZWxmIiwiY2FyZCIsInBheWVlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJwYXltZW50U3VjY2Vzc2Z1bCIsInBheSIsIlN0cmlwZSIsImNyZWF0ZVRva2VuIiwic3RhdHVzIiwicmVzcG9uc2UiLCJ0b2tlbiIsImlkIiwicG9zdCIsInJlcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJyZXNldCIsIkZvcm0iLCIkc2V0UHJpc3RpbmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIlByaW50c0luZGV4Q3RybCIsIlByaW50IiwiZmlsdGVyRmlsdGVyIiwiJHNjb3BlIiwiYWxsIiwicXVlcnkiLCJQcmludHNOZXdDdHJsIiwiVXNlciIsInByaW50c0NyZWF0ZSIsInNhdmUiLCJwcmludCIsIiRwcm9taXNlIiwibWVkaXVtIiwidXNlcnMiLCJjcmVhdGUiLCJQcmludHNTaG93Q3RybCIsIkNvbW1lbnQiLCIkc3RhdGVQYXJhbXMiLCJwcmludHNEZWxldGUiLCIkcmVtb3ZlIiwiYWRkQ29tbWVudCIsImNvbW1lbnQiLCJwcmludF9pZCIsInVzZXJfaWQiLCJjb21tZW50cyIsInB1c2giLCJkZWxldGVDb21tZW50IiwiZGVsZXRlIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZ2V0IiwiUHJpbnRzRWRpdEN0cmwiLCJwcmludHNVcGRhdGUiLCJ1cGRhdGUiLCJVc2Vyc0luZGV4Q3RybCIsIlVzZXJzU2hvd0N0cmwiLCJ1c2Vyc0RlbGV0ZSIsImJhc2U2NCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVzdHJpY3QiLCJyZXF1aXJlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJvbmxvYWQiLCIkc2V0Vmlld1ZhbHVlIiwicmVzdWx0Iiwib24iLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJyZWFkQXNEYXRhVVJMIiwiJHJlc291cmNlIiwibWV0aG9kIiwid2luZG93IiwibWluRXJyIiwibW9kdWxlIiwiRXJyb3JDb25zdHJ1Y3RvciIsIkVycm9yIiwicGFyYW1QcmVmaXgiLCJpIiwiY29kZSIsImFyZ3VtZW50cyIsInRlbXBsYXRlIiwidGVtcGxhdGVBcmdzIiwic2xpY2VBcmdzIiwibWFwIiwiYXJnIiwidG9EZWJ1Z1N0cmluZyIsIm1pbkVyckNvbmZpZyIsIm9iamVjdE1heERlcHRoIiwicmVwbGFjZSIsIm1hdGNoIiwic2xpY2UiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlcnJvckhhbmRsaW5nQ29uZmlnIiwiY29uZmlnIiwiaXNPYmplY3QiLCJpc0RlZmluZWQiLCJpc1ZhbGlkT2JqZWN0TWF4RGVwdGgiLCJOYU4iLCJtYXhEZXB0aCIsImlzTnVtYmVyIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJpc1dpbmRvdyIsImlzQXJyYXkiLCJpc1N0cmluZyIsImpxTGl0ZSIsIk9iamVjdCIsIkFycmF5IiwiaXRlbSIsImZvckVhY2giLCJpdGVyYXRvciIsImNvbnRleHQiLCJrZXkiLCJpc0Z1bmN0aW9uIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaXNQcmltaXRpdmUiLCJpc0JsYW5rT2JqZWN0IiwiZm9yRWFjaFNvcnRlZCIsImtleXMiLCJzb3J0IiwicmV2ZXJzZVBhcmFtcyIsIml0ZXJhdG9yRm4iLCJ2YWx1ZSIsIm5leHRVaWQiLCJ1aWQiLCJzZXRIYXNoS2V5IiwiaCIsIiQkaGFzaEtleSIsImJhc2VFeHRlbmQiLCJkc3QiLCJvYmpzIiwiZGVlcCIsImlpIiwiaiIsImpqIiwic3JjIiwiaXNEYXRlIiwiRGF0ZSIsInZhbHVlT2YiLCJpc1JlZ0V4cCIsIlJlZ0V4cCIsIm5vZGVOYW1lIiwiY2xvbmVOb2RlIiwiaXNFbGVtZW50IiwiY2xvbmUiLCJleHRlbmQiLCJtZXJnZSIsInRvSW50Iiwic3RyIiwicGFyc2VJbnQiLCJpbmhlcml0IiwicGFyZW50IiwiZXh0cmEiLCJub29wIiwiaWRlbnRpdHkiLCIkIiwidmFsdWVGbiIsImhhc0N1c3RvbVRvU3RyaW5nIiwidG9TdHJpbmciLCJpc1VuZGVmaW5lZCIsImdldFByb3RvdHlwZU9mIiwiaXNTY29wZSIsIiRldmFsQXN5bmMiLCIkd2F0Y2giLCJpc0ZpbGUiLCJpc0Zvcm1EYXRhIiwiaXNCbG9iIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlTGlrZSIsImlzVHlwZWRBcnJheSIsIlRZUEVEX0FSUkFZX1JFR0VYUCIsInRlc3QiLCJpc0FycmF5QnVmZmVyIiwibm9kZSIsInByb3AiLCJhdHRyIiwiZmluZCIsIm1ha2VNYXAiLCJpdGVtcyIsInNwbGl0Iiwibm9kZU5hbWVfIiwibG93ZXJjYXNlIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcnJheVJlbW92ZSIsImNvcHkiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsImNvcHlSZWN1cnNlIiwiY29weUVsZW1lbnQiLCJzdGFja1NvdXJjZSIsInN0YWNrRGVzdCIsIm5nTWluRXJyIiwibmVlZHNSZWN1cnNlIiwiY29weVR5cGUiLCJ1bmRlZmluZWQiLCJjb25zdHJ1Y3RvciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJjb3BpZWQiLCJBcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJVaW50OEFycmF5Iiwic2V0IiwicmUiLCJsYXN0SW5kZXgiLCJ0eXBlIiwic2ltcGxlQ29tcGFyZSIsImEiLCJiIiwiZXF1YWxzIiwibzEiLCJvMiIsImtleVNldCIsInQxIiwidDIiLCJnZXRUaW1lIiwiY3JlYXRlTWFwIiwiY2hhckF0IiwiY29uY2F0IiwiYXJyYXkxIiwiYXJyYXkyIiwiYXJncyIsInN0YXJ0SW5kZXgiLCJiaW5kIiwiZm4iLCJjdXJyeUFyZ3MiLCJhcHBseSIsInRvSnNvblJlcGxhY2VyIiwidmFsIiwidG9Kc29uIiwicHJldHR5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21Kc29uIiwianNvbiIsInBhcnNlIiwidGltZXpvbmVUb09mZnNldCIsInRpbWV6b25lIiwiZmFsbGJhY2siLCJBTExfQ09MT05TIiwicmVxdWVzdGVkVGltZXpvbmVPZmZzZXQiLCJpc051bWJlck5hTiIsImFkZERhdGVNaW51dGVzIiwiZGF0ZSIsIm1pbnV0ZXMiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImNvbnZlcnRUaW1lem9uZVRvTG9jYWwiLCJyZXZlcnNlIiwiZGF0ZVRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzdGFydGluZ1RhZyIsImVtcHR5IiwiZWxlbUh0bWwiLCJhcHBlbmQiLCJodG1sIiwibm9kZVR5cGUiLCJOT0RFX1RZUEVfVEVYVCIsInRyeURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlS2V5VmFsdWUiLCJrZXlWYWx1ZSIsInNwbGl0UG9pbnQiLCJzdWJzdHJpbmciLCJ0b0tleVZhbHVlIiwicGFydHMiLCJhcnJheVZhbHVlIiwiZW5jb2RlVXJpUXVlcnkiLCJqb2luIiwiZW5jb2RlVXJpU2VnbWVudCIsInBjdEVuY29kZVNwYWNlcyIsImdldE5nQXR0cmlidXRlIiwibmdBdHRyIiwibmdBdHRyUHJlZml4ZXMiLCJnZXRBdHRyaWJ1dGUiLCJhbmd1bGFySW5pdCIsImJvb3RzdHJhcCIsImFwcEVsZW1lbnQiLCJwcmVmaXgiLCJoYXNBdHRyaWJ1dGUiLCJjYW5kaWRhdGUiLCJxdWVyeVNlbGVjdG9yIiwiaXNBdXRvQm9vdHN0cmFwQWxsb3dlZCIsImNvbnNvbGUiLCJlcnJvciIsInN0cmljdERpIiwibW9kdWxlcyIsImRvQm9vdHN0cmFwIiwiaW5qZWN0b3IiLCJ0YWciLCJ1bnNoaWZ0IiwiJHByb3ZpZGUiLCJkZWJ1Z0luZm9FbmFibGVkIiwiJGNvbXBpbGVQcm92aWRlciIsImNyZWF0ZUluamVjdG9yIiwiaW52b2tlIiwic2NvcGUiLCJjb21waWxlIiwiJGFwcGx5IiwiTkdfRU5BQkxFX0RFQlVHX0lORk8iLCJOR19ERUZFUl9CT09UU1RSQVAiLCJhbmd1bGFyIiwicmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVzdW1lRGVmZXJyZWRCb290c3RyYXAiLCJyZWxvYWRXaXRoRGVidWdJbmZvIiwibG9jYXRpb24iLCJyZWxvYWQiLCJnZXRUZXN0YWJpbGl0eSIsInJvb3RFbGVtZW50Iiwic25ha2VfY2FzZSIsInNlcGFyYXRvciIsIlNOQUtFX0NBU0VfUkVHRVhQIiwibGV0dGVyIiwicG9zIiwidG9Mb3dlckNhc2UiLCJhc3NlcnRBcmciLCJyZWFzb24iLCJhc3NlcnRBcmdGbiIsImFjY2VwdEFycmF5QW5ub3RhdGlvbiIsImFzc2VydE5vdEhhc093blByb3BlcnR5IiwiZ2V0dGVyIiwicGF0aCIsImJpbmRGblRvU2NvcGUiLCJsYXN0SW5zdGFuY2UiLCJsZW4iLCJnZXRCbG9ja05vZGVzIiwibm9kZXMiLCJibG9ja05vZGVzIiwiZW5kTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0dXBNb2R1bGVMb2FkZXIiLCJlbnN1cmUiLCJmYWN0b3J5IiwiJGluamVjdG9yTWluRXJyIiwiJCRtaW5FcnIiLCJyZXF1aXJlcyIsImNvbmZpZ0ZuIiwiaW5mbyIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUiLCJyZWNpcGVOYW1lIiwiZmFjdG9yeUZ1bmN0aW9uIiwiJCRtb2R1bGVOYW1lIiwiY29uZmlnQmxvY2tzIiwicnVuQmxvY2tzIiwiX2ludm9rZVF1ZXVlIiwiX2NvbmZpZ0Jsb2NrcyIsIl9ydW5CbG9ja3MiLCJzZXJ2aWNlIiwiY29uc3RhbnQiLCJkZWNvcmF0b3IiLCJhbmltYXRpb24iLCJmaWx0ZXIiLCJkaXJlY3RpdmUiLCJjb21wb25lbnQiLCJydW4iLCJibG9jayIsInNoYWxsb3dDb3B5Iiwic2VyaWFsaXplT2JqZWN0Iiwic2VlbiIsImpxTmV4dElkIiwianFJZCIsImNzc0tlYmFiVG9DYW1lbCIsImtlYmFiVG9DYW1lbCIsIk1TX0hBQ0tfUkVHRVhQIiwiZm5DYW1lbENhc2VSZXBsYWNlIiwidG9VcHBlckNhc2UiLCJEQVNIX0xPV0VSQ0FTRV9SRUdFWFAiLCJqcUxpdGVJc1RleHROb2RlIiwiSFRNTF9SRUdFWFAiLCJqcUxpdGVBY2NlcHRzRGF0YSIsIk5PREVfVFlQRV9FTEVNRU5UIiwiTk9ERV9UWVBFX0RPQ1VNRU5UIiwianFMaXRlSGFzRGF0YSIsImpxQ2FjaGUiLCJuZzMzOSIsImpxTGl0ZUJ1aWxkRnJhZ21lbnQiLCJ0bXAiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJUQUdfTkFNRV9SRUdFWFAiLCJleGVjIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiWEhUTUxfVEFHX1JFR0VYUCIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJqcUxpdGVQYXJzZUhUTUwiLCJwYXJzZWQiLCJTSU5HTEVfVEFHX1JFR0VYUCIsImpxTGl0ZVdyYXBOb2RlIiwid3JhcHBlciIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJKUUxpdGUiLCJhcmdJc1N0cmluZyIsInRyaW0iLCJqcUxpdGVNaW5FcnIiLCJqcUxpdGVBZGROb2RlcyIsImpxTGl0ZVJlYWR5IiwianFMaXRlQ2xvbmUiLCJqcUxpdGVEZWFsb2MiLCJvbmx5RGVzY2VuZGFudHMiLCJjbGVhbkRhdGEiLCJxdWVyeVNlbGVjdG9yQWxsIiwianFMaXRlT2ZmIiwidW5zdXBwb3J0ZWQiLCJleHBhbmRvU3RvcmUiLCJqcUxpdGVFeHBhbmRvU3RvcmUiLCJldmVudHMiLCJoYW5kbGUiLCJyZW1vdmVIYW5kbGVyIiwibGlzdGVuZXJGbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTU9VU0VfRVZFTlRfTUFQIiwianFMaXRlUmVtb3ZlRGF0YSIsImV4cGFuZG9JZCIsIiRkZXN0cm95IiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUxpdGVEYXRhIiwiaXNTaW1wbGVTZXR0ZXIiLCJpc1NpbXBsZUdldHRlciIsIm1hc3NHZXR0ZXIiLCJqcUxpdGVIYXNDbGFzcyIsInNlbGVjdG9yIiwianFMaXRlUmVtb3ZlQ2xhc3MiLCJjc3NDbGFzc2VzIiwic2V0QXR0cmlidXRlIiwiY3NzQ2xhc3MiLCJqcUxpdGVBZGRDbGFzcyIsImV4aXN0aW5nQ2xhc3NlcyIsInJvb3QiLCJlbGVtZW50cyIsImpxTGl0ZUNvbnRyb2xsZXIiLCJqcUxpdGVJbmhlcml0ZWREYXRhIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXMiLCJOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQiLCJob3N0IiwianFMaXRlRW1wdHkiLCJyZW1vdmVDaGlsZCIsImpxTGl0ZVJlbW92ZSIsImtlZXBEYXRhIiwianFMaXRlRG9jdW1lbnRMb2FkZWQiLCJhY3Rpb24iLCJ3aW4iLCJyZWFkeVN0YXRlIiwic2V0VGltZW91dCIsInRyaWdnZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Qm9vbGVhbkF0dHJOYW1lIiwiYm9vbGVhbkF0dHIiLCJCT09MRUFOX0FUVFIiLCJCT09MRUFOX0VMRU1FTlRTIiwiZ2V0QWxpYXNlZEF0dHJOYW1lIiwiQUxJQVNFRF9BVFRSIiwiY3JlYXRlRXZlbnRIYW5kbGVyIiwiZXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwiZXZlbnRGbnMiLCJldmVudEZuc0xlbmd0aCIsImltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsIm9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJoYW5kbGVyV3JhcHBlciIsInNwZWNpYWxIYW5kbGVyV3JhcHBlciIsImRlZmF1bHRIYW5kbGVyV3JhcHBlciIsImVsZW0iLCJoYW5kbGVyIiwic3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImpxTGl0ZUNvbnRhaW5zIiwiJCRqcUxpdGVQcm92aWRlciIsIiRnZXQiLCJoYXNDbGFzcyIsImNsYXNzZXMiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzaEtleSIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJOZ01hcFNoaW0iLCJfa2V5cyIsIl92YWx1ZXMiLCJfbGFzdEtleSIsIl9sYXN0SW5kZXgiLCJzdHJpbmdpZnlGbiIsIkZ1bmN0aW9uIiwiZXh0cmFjdEFyZ3MiLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkFSUk9XX0FSRyIsIkZOX0FSR1MiLCJhbm9uRm4iLCJhbm5vdGF0ZSIsIiRpbmplY3QiLCJhcmdEZWNsIiwibGFzdCIsIkZOX0FSR19TUExJVCIsIkZOX0FSRyIsInVuZGVyc2NvcmUiLCJtb2R1bGVzVG9Mb2FkIiwic3VwcG9ydE9iamVjdCIsImRlbGVnYXRlIiwicHJvdmlkZXJfIiwicHJvdmlkZXJJbmplY3RvciIsImluc3RhbnRpYXRlIiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwiaW5zdGFuY2VJbmplY3RvciIsImZhY3RvcnlGbiIsImVuZm9yY2UiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwic2VydmljZU5hbWUiLCJkZWNvckZuIiwib3JpZ1Byb3ZpZGVyIiwib3JpZyRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJsb2FkTW9kdWxlcyIsIm1vZHVsZUZuIiwicnVuSW52b2tlUXVldWUiLCJpbnZva2VBcmdzIiwibG9hZGVkTW9kdWxlcyIsImFuZ3VsYXJNb2R1bGUiLCJzdGFjayIsImNyZWF0ZUludGVybmFsSW5qZWN0b3IiLCJjYWNoZSIsImdldFNlcnZpY2UiLCJjYWxsZXIiLCJJTlNUQU5USUFUSU5HIiwic2hpZnQiLCJpbmplY3Rpb25BcmdzIiwibG9jYWxzIiwiJCRhbm5vdGF0ZSIsImlzQ2xhc3MiLCJmdW5jIiwibXNpZSIsIiQkbmdJc0NsYXNzIiwiVHlwZSIsImN0b3IiLCJoYXMiLCJOZ01hcCIsInByb3RvSW5zdGFuY2VJbmplY3RvciIsIiRBbmNob3JTY3JvbGxQcm92aWRlciIsImF1dG9TY3JvbGxpbmdFbmFibGVkIiwiZGlzYWJsZUF1dG9TY3JvbGxpbmciLCIkd2luZG93IiwiJGxvY2F0aW9uIiwiZ2V0Rmlyc3RBbmNob3IiLCJsaXN0Iiwic29tZSIsImdldFlPZmZzZXQiLCJvZmZzZXQiLCJzY3JvbGwiLCJ5T2Zmc2V0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYm90dG9tIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsImVsZW1Ub3AiLCJ0b3AiLCJzY3JvbGxCeSIsImhhc2giLCJlbG0iLCJnZXRFbGVtZW50c0J5TmFtZSIsIm5ld1ZhbCIsIm9sZFZhbCIsIm1lcmdlQ2xhc3NlcyIsImV4dHJhY3RFbGVtZW50Tm9kZSIsIkVMRU1FTlRfTk9ERSIsInNwbGl0Q2xhc3NlcyIsImtsYXNzIiwicHJlcGFyZUFuaW1hdGVPcHRpb25zIiwib3B0aW9ucyIsIkJyb3dzZXIiLCIkbG9nIiwiJHNuaWZmZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwicG9wIiwiZ2V0SGFzaCIsInN1YnN0ciIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwicGVuZGluZ0xvY2F0aW9uIiwiZmlyZVN0YXRlT3JVcmxDaGFuZ2UiLCJjYWNoZVN0YXRlIiwiY2FjaGVkU3RhdGUiLCJnZXRDdXJyZW50U3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0SGlzdG9yeVN0YXRlIiwicHJldkxhc3RIaXN0b3J5U3RhdGUiLCJsYXN0QnJvd3NlclVybCIsInVybENoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVyIiwiaGlzdG9yeSIsImNsZWFyVGltZW91dCIsInBlbmRpbmdEZWZlcklkcyIsImlzTW9jayIsIiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCIkJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwibm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsImNhbGxiYWNrIiwiaHJlZiIsImJhc2VFbGVtZW50Iiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJ1cmxDaGFuZ2VJbml0Iiwib25VcmxDaGFuZ2UiLCIkJGFwcGxpY2F0aW9uRGVzdHJveWVkIiwib2ZmIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwiZGVmZXIiLCJkZWxheSIsInRpbWVvdXRJZCIsImNhbmNlbCIsImRlZmVySWQiLCIkQnJvd3NlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiY2FjaGVGYWN0b3J5IiwiY2FjaGVJZCIsInJlZnJlc2giLCJlbnRyeSIsImZyZXNoRW5kIiwic3RhbGVFbmQiLCJuIiwicCIsIm5leHRFbnRyeSIsInByZXZFbnRyeSIsImNhY2hlcyIsInNpemUiLCJzdGF0cyIsImNhcGFjaXR5IiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwibHJ1SGFzaCIsInB1dCIsInJlbW92ZSIsImxydUVudHJ5IiwicmVtb3ZlQWxsIiwiZGVzdHJveSIsIiRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiVU5JTklUSUFMSVpFRF9WQUxVRSIsIiRDb21waWxlUHJvdmlkZXIiLCIkJHNhbml0aXplVXJpUHJvdmlkZXIiLCJwYXJzZUlzb2xhdGVCaW5kaW5ncyIsImRpcmVjdGl2ZU5hbWUiLCJpc0NvbnRyb2xsZXIiLCJiaW5kaW5ncyIsImRlZmluaXRpb24iLCJzY29wZU5hbWUiLCJiaW5kaW5nQ2FjaGUiLCIkY29tcGlsZU1pbkVyciIsIm1vZGUiLCJjb2xsZWN0aW9uIiwib3B0aW9uYWwiLCJhdHRyTmFtZSIsInBhcnNlRGlyZWN0aXZlQmluZGluZ3MiLCJpc29sYXRlU2NvcGUiLCJiaW5kVG9Db250cm9sbGVyIiwiYXNzZXJ0VmFsaWREaXJlY3RpdmVOYW1lIiwiZ2V0RGlyZWN0aXZlUmVxdWlyZSIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsImdldERpcmVjdGl2ZVJlc3RyaWN0IiwiaGFzRGlyZWN0aXZlcyIsIlN1ZmZpeCIsIkNPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCIsIkNMQVNTX0RJUkVDVElWRV9SRUdFWFAiLCJBTExfT1JfTk9USElOR19BVFRSUyIsIkVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAiLCJyZWdpc3RlckRpcmVjdGl2ZSIsImRpcmVjdGl2ZUZhY3RvcnkiLCIkZXhjZXB0aW9uSGFuZGxlciIsImRpcmVjdGl2ZXMiLCJwcmlvcml0eSIsIm1ha2VJbmplY3RhYmxlIiwidEVsZW1lbnQiLCJ0QXR0cnMiLCIkZWxlbWVudCIsIiRhdHRycyIsImRkbyIsImNvbnRyb2xsZXJBcyIsImlkZW50aWZpZXJGb3JDb250cm9sbGVyIiwidHJhbnNjbHVkZSIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCIsIlRUTCIsIm9uQ2hhbmdlc1R0bCIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCIsImNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWciLCJjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkIiwiJGludGVycG9sYXRlIiwiJHRlbXBsYXRlUmVxdWVzdCIsIiRwYXJzZSIsIiRjb250cm9sbGVyIiwiJHNjZSIsIiRhbmltYXRlIiwiJCRzYW5pdGl6ZVVyaSIsImZsdXNoT25DaGFuZ2VzUXVldWUiLCJvbkNoYW5nZXNRdWV1ZSIsImVycm9ycyIsIkF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzVG9Db3B5IiwibCIsIiRhdHRyIiwiJCRlbGVtZW50Iiwic2V0U3BlY2lhbEF0dHIiLCJzcGVjaWFsQXR0ckhvbGRlciIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiLCJyZW1vdmVOYW1lZEl0ZW0iLCJzZXROYW1lZEl0ZW0iLCJzYWZlQWRkQ2xhc3MiLCJjbGFzc05hbWUiLCIkY29tcGlsZU5vZGVzIiwidHJhbnNjbHVkZUZuIiwibWF4UHJpb3JpdHkiLCJpZ25vcmVEaXJlY3RpdmUiLCJwcmV2aW91c0NvbXBpbGVDb250ZXh0IiwiY29tcG9zaXRlTGlua0ZuIiwiY29tcGlsZU5vZGVzIiwiJCRhZGRTY29wZUNsYXNzIiwibmFtZXNwYWNlIiwiY2xvbmVDb25uZWN0Rm4iLCJuZWVkc05ld1Njb3BlIiwiJHBhcmVudCIsIiRuZXciLCJwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGVDb250cm9sbGVycyIsImZ1dHVyZVBhcmVudEVsZW1lbnQiLCIkJGJvdW5kVHJhbnNjbHVkZSIsImRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMiLCIkbGlua05vZGUiLCJ3cmFwVGVtcGxhdGUiLCJKUUxpdGVQcm90b3R5cGUiLCJjb250cm9sbGVyTmFtZSIsImluc3RhbmNlIiwiJCRhZGRTY29wZUluZm8iLCJwYXJlbnRFbGVtZW50Iiwibm9kZUxpc3QiLCIkcm9vdEVsZW1lbnQiLCJub2RlTGlua0ZuIiwiY2hpbGRMaW5rRm4iLCJjaGlsZFNjb3BlIiwiaWR4IiwiY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiIsInN0YWJsZU5vZGVMaXN0Iiwibm9kZUxpbmtGbkZvdW5kIiwibm9kZUxpc3RMZW5ndGgiLCJsaW5rRm5zIiwidHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbiIsInRlbXBsYXRlT25UaGlzRWxlbWVudCIsImxpbmtGbkZvdW5kIiwibm90TGl2ZUxpc3QiLCJtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzIiwiY29sbGVjdERpcmVjdGl2ZXMiLCJhcHBseURpcmVjdGl2ZXNUb05vZGUiLCJ0ZXJtaW5hbCIsInNpYmxpbmciLCJub2RlVmFsdWUiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImJvdW5kU2xvdHMiLCIkJHNsb3RzIiwic2xvdE5hbWUiLCJhdHRyc01hcCIsImFkZERpcmVjdGl2ZSIsImRpcmVjdGl2ZU5vcm1hbGl6ZSIsIm5OYW1lIiwibmdBdHRyTmFtZSIsImlzTmdBdHRyIiwibkF0dHJzIiwiYXR0clN0YXJ0TmFtZSIsImF0dHJFbmROYW1lIiwiTkdfQVRUUl9CSU5ESU5HIiwiUFJFRklYX1JFR0VYUCIsIm11bHRpRWxlbWVudE1hdGNoIiwiTVVMVElfRUxFTUVOVF9ESVJfUkUiLCJkaXJlY3RpdmVJc011bHRpRWxlbWVudCIsImFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsImFuaW1WYWwiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGF0aW9uR2VuZXJhdG9yIiwiZWFnZXIiLCJjb21waWxlZCIsImNvbXBpbGVOb2RlIiwidGVtcGxhdGVBdHRycyIsImpxQ29sbGVjdGlvbiIsIm9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSIsInByZUxpbmtGbnMiLCJwb3N0TGlua0ZucyIsImFkZExpbmtGbnMiLCJwcmUiLCJuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUiLCIkJGlzb2xhdGVTY29wZSIsImNsb25lQW5kQW5ub3RhdGVGbiIsImxpbmtOb2RlIiwiY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUiLCJjbG9uZUF0dGFjaEZuIiwiaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJlbGVtZW50Q29udHJvbGxlcnMiLCJzY29wZVRvQ2hpbGQiLCJzbG90VHJhbnNjbHVkZUZuIiwiY29udHJvbGxlclNjb3BlIiwic2NvcGVCaW5kaW5nSW5mbyIsIm5ld1Njb3BlRGlyZWN0aXZlIiwiaXNTbG90RmlsbGVkIiwiY29udHJvbGxlckRpcmVjdGl2ZXMiLCJzZXR1cENvbnRyb2xsZXJzIiwidGVtcGxhdGVEaXJlY3RpdmUiLCIkJG9yaWdpbmFsRGlyZWN0aXZlIiwiJCRpc29sYXRlQmluZGluZ3MiLCJpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MiLCJyZW1vdmVXYXRjaGVzIiwiY29udHJvbGxlckRpcmVjdGl2ZSIsIiQkYmluZGluZ3MiLCJiaW5kaW5nSW5mbyIsImNvbnRyb2xsZXJSZXN1bHQiLCJnZXRDb250cm9sbGVycyIsImNvbnRyb2xsZXJJbnN0YW5jZSIsIiRvbkNoYW5nZXMiLCJpbml0aWFsQ2hhbmdlcyIsIiRvbkluaXQiLCIkZG9DaGVjayIsIiRvbkRlc3Ryb3kiLCJpbnZva2VMaW5rRm4iLCIkcG9zdExpbmsiLCIkdGVtcGxhdGUiLCJkaXJlY3RpdmVWYWx1ZSIsInRlcm1pbmFsUHJpb3JpdHkiLCJub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RlbXBsYXRlIiwiJGNvbXBpbGVOb2RlIiwicmVwbGFjZURpcmVjdGl2ZSIsImNoaWxkVHJhbnNjbHVkZUZuIiwiZGlkU2NhbkZvck11bHRpcGxlVHJhbnNjbHVzaW9uIiwibWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciIsIiQkc3RhcnQiLCIkJGVuZCIsImFzc2VydE5vRHVwbGljYXRlIiwiJCR0bGIiLCJjYW5kaWRhdGVEaXJlY3RpdmUiLCJzY2FubmluZ0luZGV4IiwiJCRjcmVhdGVDb21tZW50IiwicmVwbGFjZVdpdGgiLCIkJHBhcmVudE5vZGUiLCJzbG90cyIsInNsb3RNYXAiLCJmaWxsZWRTbG90cyIsImVsZW1lbnRTZWxlY3RvciIsImNvbnRlbnRzIiwiZmlsbGVkIiwiJCRuZXdTY29wZSIsImRlbm9ybWFsaXplVGVtcGxhdGUiLCJyZW1vdmVDb21tZW50cyIsInRlbXBsYXRlTmFtZXNwYWNlIiwibmV3VGVtcGxhdGVBdHRycyIsInRlbXBsYXRlRGlyZWN0aXZlcyIsInVucHJvY2Vzc2VkRGlyZWN0aXZlcyIsIm1hcmtEaXJlY3RpdmVTY29wZSIsIm1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzIiwiY29tcGlsZVRlbXBsYXRlVXJsIiwiTWF0aCIsIm1heCIsImluaGVyaXRUeXBlIiwiZGF0YU5hbWUiLCJpbmhlcml0ZWREYXRhIiwicHJvcGVydHkiLCJjb250cm9sbGVyS2V5IiwiJHRyYW5zY2x1ZGUiLCJuZXdTY29wZSIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiY2F0Y2giLCJpZ25vcmVDaGlsZExpbmtGbiIsImRpZmYiLCJ3aGF0IiwicHJldmlvdXNEaXJlY3RpdmUiLCJ3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZCIsIm1vZHVsZU5hbWUiLCJ0ZXh0IiwiaW50ZXJwb2xhdGVGbiIsInRlbXBsYXRlTm9kZSIsInRlbXBsYXRlTm9kZVBhcmVudCIsImhhc0NvbXBpbGVQYXJlbnQiLCIkJGFkZEJpbmRpbmdDbGFzcyIsIiQkYWRkQmluZGluZ0luZm8iLCJleHByZXNzaW9ucyIsImdldFRydXN0ZWRDb250ZXh0IiwiYXR0ck5vcm1hbGl6ZWROYW1lIiwiSFRNTCIsIlJFU09VUkNFX1VSTCIsInRydXN0ZWRDb250ZXh0IiwibXVzdEhhdmVFeHByZXNzaW9uIiwiYWxsT3JOb3RoaW5nIiwiJCRvYnNlcnZlcnMiLCJuZXdWYWx1ZSIsIiQkaW50ZXIiLCIkJHNjb3BlIiwib2xkVmFsdWUiLCIkdXBkYXRlQ2xhc3MiLCJlbGVtZW50c1RvUmVtb3ZlIiwibmV3Tm9kZSIsImZpcnN0RWxlbWVudFRvUmVtb3ZlIiwicmVtb3ZlQ291bnQiLCJqMiIsImhhc0RhdGEiLCJhbm5vdGF0aW9uIiwicmVjb3JkQ2hhbmdlcyIsImN1cnJlbnRWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCIkJHBvc3REaWdlc3QiLCJjaGFuZ2VzIiwidHJpZ2dlck9uQ2hhbmdlc0hvb2siLCJTaW1wbGVDaGFuZ2UiLCJyZW1vdmVXYXRjaENvbGxlY3Rpb24iLCJsYXN0VmFsdWUiLCJwYXJlbnRHZXQiLCJwYXJlbnRTZXQiLCJjb21wYXJlIiwicmVtb3ZlV2F0Y2giLCIkb2JzZXJ2ZSIsIl9VTklOSVRJQUxJWkVEX1ZBTFVFIiwibGl0ZXJhbCIsImFzc2lnbiIsInBhcmVudFZhbHVlV2F0Y2giLCJwYXJlbnRWYWx1ZSIsIiRzdGF0ZWZ1bCIsIiR3YXRjaENvbGxlY3Rpb24iLCJkZWVwV2F0Y2giLCJpbml0aWFsVmFsdWUiLCJTSU1QTEVfQVRUUl9OQU1FIiwiJG5vcm1hbGl6ZSIsIiRhZGRDbGFzcyIsImNsYXNzVmFsIiwiJHJlbW92ZUNsYXNzIiwibmV3Q2xhc3NlcyIsInRvQWRkIiwidG9rZW5EaWZmZXJlbmNlIiwidG9SZW1vdmUiLCJ3cml0ZUF0dHIiLCJib29sZWFuS2V5IiwiYWxpYXNlZEtleSIsIm9ic2VydmVyIiwidHJpbW1lZFNyY3NldCIsInBhdHRlcm4iLCJyYXdVcmlzIiwibmJyVXJpc1dpdGgycGFydHMiLCJmbG9vciIsImlubmVySWR4IiwibGFzdFR1cGxlIiwicmVtb3ZlQXR0ciIsImxpc3RlbmVycyIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYmluZGluZyIsImlzb2xhdGVkIiwibm9UZW1wbGF0ZSIsImNyZWF0ZUNvbW1lbnQiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsInN0cjEiLCJzdHIyIiwidmFsdWVzIiwidG9rZW5zMSIsInRva2VuczIiLCJvdXRlciIsImpxTm9kZXMiLCJpZGVudCIsIkNOVFJMX1JFRyIsIiRDb250cm9sbGVyUHJvdmlkZXIiLCJnbG9iYWxzIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJleHByZXNzaW9uIiwibGF0ZXIiLCIkY29udHJvbGxlck1pbkVyciIsImNvbnRyb2xsZXJQcm90b3R5cGUiLCIkRG9jdW1lbnRQcm92aWRlciIsIiQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyIiwiY2hhbmdlTGlzdGVuZXIiLCJoaWRkZW4iLCJkb2MiLCIkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyIiwiZXhjZXB0aW9uIiwiY2F1c2UiLCJzZXJpYWxpemVWYWx1ZSIsInYiLCJ0b0lTT1N0cmluZyIsIiRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIiLCJwYXJhbXMiLCIkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyIiwic2VyaWFsaXplIiwidG9TZXJpYWxpemUiLCJ0b3BMZXZlbCIsImRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0iLCJoZWFkZXJzIiwidGVtcERhdGEiLCJKU09OX1BST1RFQ1RJT05fUFJFRklYIiwiY29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OIiwiaXNKc29uTGlrZSIsIiRodHRwTWluRXJyIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImZpbGxJblBhcnNlZCIsImxpbmUiLCJoZWFkZXJWYWwiLCJoZWFkZXJLZXkiLCJoZWFkZXJzR2V0dGVyIiwiaGVhZGVyc09iaiIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc1N1Y2Nlc3MiLCIkSHR0cFByb3ZpZGVyIiwiZGVmYXVsdHMiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJkIiwiY29tbW9uIiwiQWNjZXB0IiwiQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04iLCJwYXRjaCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJwYXJhbVNlcmlhbGl6ZXIiLCJqc29ucENhbGxiYWNrUGFyYW0iLCJ1c2VBcHBseUFzeW5jIiwiaW50ZXJjZXB0b3JGYWN0b3JpZXMiLCJpbnRlcmNlcHRvcnMiLCIkYnJvd3NlciIsIiRodHRwQmFja2VuZCIsIiQkY29va2llUmVhZGVyIiwiJHEiLCJyZXF1ZXN0Q29uZmlnIiwiY2hhaW5JbnRlcmNlcHRvcnMiLCJwcm9taXNlIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJleGVjdXRlSGVhZGVyRm5zIiwiaGVhZGVyQ29udGVudCIsInByb2Nlc3NlZEhlYWRlcnMiLCJoZWFkZXJGbiIsImhlYWRlciIsInNlcnZlclJlcXVlc3QiLCJyZXFEYXRhIiwid2l0aENyZWRlbnRpYWxzIiwic2VuZFJlcSIsInJlc3AiLCJyZWplY3QiLCJkZWZIZWFkZXJOYW1lIiwibG93ZXJjYXNlRGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJkZWZIZWFkZXJzIiwicmVxSGVhZGVycyIsImRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uIiwidXBwZXJjYXNlIiwicmVxdWVzdEludGVyY2VwdG9ycyIsInJlc3BvbnNlSW50ZXJjZXB0b3JzIiwicmVzb2x2ZSIsInJldmVyc2VkSW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXF1ZXN0IiwicmVxdWVzdEVycm9yIiwicmVzcG9uc2VFcnJvciIsImZpbmFsbHkiLCJjcmVhdGVBcHBseUhhbmRsZXJzIiwiZXZlbnRIYW5kbGVycyIsImFwcGx5SGFuZGxlcnMiLCJjYWxsRXZlbnRIYW5kbGVyIiwiJGFwcGx5QXN5bmMiLCIkJHBoYXNlIiwiZG9uZSIsImhlYWRlcnNTdHJpbmciLCJzdGF0dXNUZXh0IiwicmVzb2x2ZUh0dHBQcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCJkZWZlcnJlZCIsInJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCIsInJlbW92ZVBlbmRpbmdSZXEiLCJwZW5kaW5nUmVxdWVzdHMiLCJjYWNoZWRSZXNwIiwiaXNKc29ucCIsImdldFRydXN0ZWRSZXNvdXJjZVVybCIsImJ1aWxkVXJsIiwic2FuaXRpemVKc29ucENhbGxiYWNrUGFyYW0iLCJkZWZhdWx0Q2FjaGUiLCJ4c3JmVmFsdWUiLCJ1cmxJc1NhbWVPcmlnaW4iLCJ0aW1lb3V0IiwicmVzcG9uc2VUeXBlIiwidXBsb2FkRXZlbnRIYW5kbGVycyIsInNlcmlhbGl6ZWRQYXJhbXMiLCJpbnRlcmNlcHRvckZhY3RvcnkiLCIkeGhyRmFjdG9yeVByb3ZpZGVyIiwiWE1MSHR0cFJlcXVlc3QiLCIkSHR0cEJhY2tlbmRQcm92aWRlciIsIiRqc29ucENhbGxiYWNrcyIsIiR4aHJGYWN0b3J5IiwiY3JlYXRlSHR0cEJhY2tlbmQiLCJjcmVhdGVYaHIiLCIkYnJvd3NlckRlZmVyIiwiY2FsbGJhY2tzIiwicmF3RG9jdW1lbnQiLCJqc29ucFJlcSIsImNhbGxiYWNrUGF0aCIsInNjcmlwdCIsImFzeW5jIiwiYm9keSIsIndhc0NhbGxlZCIsInRpbWVvdXRSZXF1ZXN0IiwianNvbnBEb25lIiwieGhyIiwiYWJvcnQiLCJjb21wbGV0ZVJlcXVlc3QiLCJjcmVhdGVDYWxsYmFjayIsImdldFJlc3BvbnNlIiwicmVtb3ZlQ2FsbGJhY2siLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInJlc3BvbnNlVGV4dCIsInVybFJlc29sdmUiLCJwcm90b2NvbCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0IiwidXBsb2FkIiwic2VuZCIsIiRJbnRlcnBvbGF0ZVByb3ZpZGVyIiwiZXNjYXBlIiwiY2giLCJ1bmVzY2FwZVRleHQiLCJlc2NhcGVkU3RhcnRSZWdleHAiLCJlc2NhcGVkRW5kUmVnZXhwIiwiY29uc3RhbnRXYXRjaERlbGVnYXRlIiwib2JqZWN0RXF1YWxpdHkiLCJjb25zdGFudEludGVycCIsInVud2F0Y2giLCJwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yIiwiZ2V0VmFsdWUiLCIkaW50ZXJwb2xhdGVNaW5FcnIiLCJpbnRlcnIiLCJleHAiLCIkJHdhdGNoRGVsZWdhdGUiLCJlbmRJbmRleCIsInBhcnNlRm5zIiwidGV4dExlbmd0aCIsImV4cHJlc3Npb25Qb3NpdGlvbnMiLCJzdGFydFN5bWJvbExlbmd0aCIsImVuZFN5bWJvbExlbmd0aCIsInRocm93Tm9jb25jYXQiLCJjb21wdXRlIiwiZ2V0VHJ1c3RlZCIsIiR3YXRjaEdyb3VwIiwib2xkVmFsdWVzIiwiY3VyclZhbHVlIiwiJEludGVydmFsUHJvdmlkZXIiLCIkJHEiLCJpbnRlcnZhbCIsImNvdW50IiwiaW52b2tlQXBwbHkiLCJoYXNQYXJhbXMiLCJpdGVyYXRpb24iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJza2lwQXBwbHkiLCIkJGludGVydmFsSWQiLCJub3RpZnkiLCJpbnRlcnZhbHMiLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJET1VCTEVfU0xBU0hfUkVHRVgiLCIkbG9jYXRpb25NaW5FcnIiLCJwcmVmaXhlZCIsIiQkcGF0aCIsInBhdGhuYW1lIiwiJCRzZWFyY2giLCJzZWFyY2giLCIkJGhhc2giLCJzdGFydHNXaXRoIiwic3RyaXBCYXNlVXJsIiwiYmFzZSIsInRyaW1FbXB0eUhhc2giLCJzdHJpcEZpbGUiLCJsYXN0SW5kZXhPZiIsInNlcnZlckJhc2UiLCJMb2NhdGlvbkh0bWw1VXJsIiwiYXBwQmFzZSIsImFwcEJhc2VOb0ZpbGUiLCJiYXNlUHJlZml4IiwiJCRodG1sNSIsIiQkcGFyc2UiLCJwYXRoVXJsIiwiJCRjb21wb3NlIiwiJCR1cmwiLCIkJGFic1VybCIsIiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24iLCIkJHBhcnNlTGlua1VybCIsInJlbEhyZWYiLCJhcHBVcmwiLCJwcmV2QXBwVXJsIiwicmV3cml0dGVuVXJsIiwiTG9jYXRpb25IYXNoYmFuZ1VybCIsImhhc2hQcmVmaXgiLCJ3aXRob3V0SGFzaFVybCIsIndpdGhvdXRCYXNlVXJsIiwiZmlyc3RQYXRoU2VnbWVudE1hdGNoIiwid2luZG93c0ZpbGVQYXRoRXhwIiwiTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwiLCJsb2NhdGlvbkdldHRlciIsImxvY2F0aW9uR2V0dGVyU2V0dGVyIiwicHJlcHJvY2VzcyIsIiRMb2NhdGlvblByb3ZpZGVyIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwid2hpY2giLCJidXR0b24iLCJhYnNIcmVmIiwiaW5pdGlhbGl6aW5nIiwibmV3VXJsIiwibmV3U3RhdGUiLCIkZGlnZXN0IiwiY3VycmVudFJlcGxhY2UiLCIkJHJlcGxhY2UiLCJ1cmxPclN0YXRlQ2hhbmdlZCIsIiRMb2dQcm92aWRlciIsImRlYnVnIiwiZGVidWdFbmFibGVkIiwiZmxhZyIsImZvcm1hdEVycm9yIiwiZm9ybWF0U3RhY2tUcmFjZSIsInNvdXJjZVVSTCIsImNvbnNvbGVMb2ciLCJsb2dGbiIsImxvZyIsImhhc0FwcGx5IiwiYXJnMSIsImFyZzIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ3YXJuIiwiZ2V0U3RyaW5nVmFsdWUiLCJpZkRlZmluZWQiLCJwbHVzRm4iLCJyIiwiaXNTdGF0ZWxlc3MiLCIkZmlsdGVyIiwiZmlsdGVyTmFtZSIsImZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMiLCJhc3QiLCJhbGxDb25zdGFudHMiLCJhcmdzVG9XYXRjaCIsImlzU3RhdGVsZXNzRmlsdGVyIiwiQVNUIiwiUHJvZ3JhbSIsImV4cHIiLCJMaXRlcmFsIiwidG9XYXRjaCIsIlVuYXJ5RXhwcmVzc2lvbiIsImFyZ3VtZW50IiwiQmluYXJ5RXhwcmVzc2lvbiIsImxlZnQiLCJyaWdodCIsIkxvZ2ljYWxFeHByZXNzaW9uIiwiQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiYWx0ZXJuYXRlIiwiY29uc2VxdWVudCIsIklkZW50aWZpZXIiLCJNZW1iZXJFeHByZXNzaW9uIiwib2JqZWN0IiwiY29tcHV0ZWQiLCJDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwiQXJyYXlFeHByZXNzaW9uIiwiT2JqZWN0RXhwcmVzc2lvbiIsInByb3BlcnRpZXMiLCJUaGlzRXhwcmVzc2lvbiIsIkxvY2Fsc0V4cHJlc3Npb24iLCJnZXRJbnB1dHMiLCJsYXN0RXhwcmVzc2lvbiIsImlzQXNzaWduYWJsZSIsImFzc2lnbmFibGVBU1QiLCJOR1ZhbHVlUGFyYW1ldGVyIiwib3BlcmF0b3IiLCJpc0xpdGVyYWwiLCJpc0NvbnN0YW50IiwiQVNUQ29tcGlsZXIiLCJBU1RJbnRlcnByZXRlciIsIlBhcnNlciIsImxleGVyIiwiYXN0Q29tcGlsZXIiLCJjc3AiLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsIiRQYXJzZVByb3ZpZGVyIiwiaWRlbnRTdGFydCIsImlkZW50Q29udGludWUiLCJsaXRlcmFscyIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJhZGRMaXRlcmFsIiwibGl0ZXJhbE5hbWUiLCJsaXRlcmFsVmFsdWUiLCJzZXRJZGVudGlmaWVyRm5zIiwiaWRlbnRpZmllclN0YXJ0IiwiaWRlbnRpZmllckNvbnRpbnVlIiwiaW50ZXJjZXB0b3JGbiIsInBhcnNlZEV4cHJlc3Npb24iLCJvbmVUaW1lIiwiY2FjaGVLZXkiLCJMZXhlciIsIiRwYXJzZU9wdGlvbnMiLCJvbmVUaW1lV2F0Y2hEZWxlZ2F0ZSIsImlucHV0cyIsImlucHV0c1dhdGNoRGVsZWdhdGUiLCJhZGRJbnRlcmNlcHRvciIsImV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2siLCJvbGRWYWx1ZU9mVmFsdWUiLCJjb21wYXJlT2JqZWN0SWRlbnRpdHkiLCJwcmV0dHlQcmludEV4cHJlc3Npb24iLCJsYXN0UmVzdWx0IiwiaW5wdXRFeHByZXNzaW9ucyIsIm9sZElucHV0VmFsdWVPZiIsIm5ld0lucHV0VmFsdWUiLCJvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMiLCJvbGRJbnB1dFZhbHVlcyIsImNoYW5nZWQiLCJvbmVUaW1lV2F0Y2giLCJvbmVUaW1lTGlzdGVuZXIiLCJvbGQiLCJpc0RvbmUiLCJpc0FsbERlZmluZWQiLCJhbGxEZWZpbmVkIiwicmVndWxhckludGVyY2VwdGVkRXhwcmVzc2lvbiIsInVzZUlucHV0cyIsIm9uZVRpbWVJbnRlcmNlcHRlZEV4cHJlc3Npb24iLCJ3YXRjaERlbGVnYXRlIiwibm9VbnNhZmVFdmFsIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJpc0lkZW50aWZpZXJDb250aW51ZSIsIiRRUHJvdmlkZXIiLCJlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyIsInFGYWN0b3J5IiwiJCRRUHJvdmlkZXIiLCJuZXh0VGljayIsImV4Y2VwdGlvbkhhbmRsZXIiLCJEZWZlcnJlZCIsIlByb21pc2UiLCJyZWplY3RQcm9taXNlIiwicHJvZ3Jlc3MiLCJub3RpZnlQcm9taXNlIiwicHJvY2Vzc1F1ZXVlIiwicGVuZGluZyIsInByb2Nlc3NTY2hlZHVsZWQiLCJwdXIiLCJxdWV1ZVNpemUiLCJwcm9jZXNzQ2hlY2tzIiwiY2hlY2tRdWV1ZSIsInRvQ2hlY2siLCJlcnJvck1lc3NhZ2UiLCJzY2hlZHVsZVByb2Nlc3NRdWV1ZSIsIiQkcmVqZWN0IiwiJHFNaW5FcnIiLCIkJHJlc29sdmUiLCJkb1Jlc29sdmUiLCJkb1JlamVjdCIsImRvTm90aWZ5IiwiaGFuZGxlQ2FsbGJhY2siLCJyZXNvbHZlciIsImNhbGxiYWNrT3V0cHV0Iiwid2hlbiIsImVycmJhY2siLCJwcm9ncmVzc0JhY2siLCJwcm9taXNlcyIsImNvdW50ZXIiLCJyZXN1bHRzIiwicmFjZSIsIiRRIiwicmVzb2x2ZUZuIiwiVHlwZUVycm9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiJCRSQUZQcm92aWRlciIsIiR0aW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlN1cHBvcnRlZCIsInJhZiIsInRpbWVyIiwic3VwcG9ydGVkIiwiJFJvb3RTY29wZVByb3ZpZGVyIiwiY3JlYXRlQ2hpbGRTY29wZUNsYXNzIiwiQ2hpbGRTY29wZSIsIiQkd2F0Y2hlcnMiLCIkJG5leHRTaWJsaW5nIiwiJCRjaGlsZEhlYWQiLCIkJGNoaWxkVGFpbCIsIiQkbGlzdGVuZXJzIiwiJCRsaXN0ZW5lckNvdW50IiwiJCR3YXRjaGVyc0NvdW50IiwiJGlkIiwiJCRDaGlsZFNjb3BlIiwiJHJvb3RTY29wZU1pbkVyciIsImxhc3REaXJ0eVdhdGNoIiwiYXBwbHlBc3luY0lkIiwiZGlnZXN0VHRsIiwiZGVzdHJveUNoaWxkU2NvcGUiLCIkZXZlbnQiLCJjdXJyZW50U2NvcGUiLCJjbGVhblVwU2NvcGUiLCIkJHByZXZTaWJsaW5nIiwiJHJvb3QiLCJTY29wZSIsImJlZ2luUGhhc2UiLCJwaGFzZSIsImNsZWFyUGhhc2UiLCJpbmNyZW1lbnRXYXRjaGVyc0NvdW50IiwiZGVjcmVtZW50TGlzdGVuZXJDb3VudCIsImluaXRXYXRjaFZhbCIsImZsdXNoQXBwbHlBc3luYyIsImFwcGx5QXN5bmNRdWV1ZSIsInNjaGVkdWxlQXBwbHlBc3luYyIsImlzb2xhdGUiLCJjaGlsZCIsIndhdGNoRXhwIiwid2F0Y2hlciIsImVxIiwiJCRkaWdlc3RXYXRjaEluZGV4Iiwid2F0Y2hFeHByZXNzaW9ucyIsIndhdGNoR3JvdXBBY3Rpb24iLCJjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCIsImZpcnN0UnVuIiwibmV3VmFsdWVzIiwiZGVyZWdpc3RlckZucyIsInNob3VsZENhbGwiLCJ1bndhdGNoRm4iLCIkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IiLCJfdmFsdWUiLCJuZXdMZW5ndGgiLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsImludGVybmFsT2JqZWN0IiwiJHdhdGNoQ29sbGVjdGlvbkFjdGlvbiIsImluaXRSdW4iLCJ2ZXJ5T2xkVmFsdWUiLCJ0cmFja1ZlcnlPbGRWYWx1ZSIsImNoYW5nZURldGVjdG9yIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwibmV4dCIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZVBvc2l0aW9uIiwiYXN5bmNRdWV1ZSIsInRyYXZlcnNlU2NvcGVzTG9vcCIsIm1zZyIsInBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIiwicG9zdERpZ2VzdFF1ZXVlIiwiZXZlbnROYW1lIiwiJGV2YWwiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwidGFyZ2V0U2NvcGUiLCJsaXN0ZW5lckFyZ3MiLCIkJGFzeW5jUXVldWUiLCIkJHBvc3REaWdlc3RRdWV1ZSIsIiQkYXBwbHlBc3luY1F1ZXVlIiwiJCRTYW5pdGl6ZVVyaVByb3ZpZGVyIiwidXJpIiwiaXNJbWFnZSIsIm5vcm1hbGl6ZWRWYWwiLCJyZWdleCIsInNuYWtlVG9DYW1lbCIsIlVOREVSU0NPUkVfTE9XRVJDQVNFX1JFR0VYUCIsImFkanVzdE1hdGNoZXIiLCJtYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwibWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiJFNjZURlbGVnYXRlUHJvdmlkZXIiLCJTQ0VfQ09OVEVYVFMiLCJyZXNvdXJjZVVybFdoaXRlbGlzdCIsInJlc291cmNlVXJsQmxhY2tsaXN0IiwibWF0Y2hVcmwiLCJpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5IiwiYWxsb3dlZCIsImdlbmVyYXRlSG9sZGVyVHlwZSIsIkJhc2UiLCJob2xkZXJUeXBlIiwidHJ1c3RlZFZhbHVlIiwiJCR1bndyYXBUcnVzdGVkVmFsdWUiLCJ0cnVzdEFzIiwiQ29uc3RydWN0b3IiLCJieVR5cGUiLCJtYXliZVRydXN0ZWQiLCJ0cnVzdGVkVmFsdWVIb2xkZXJCYXNlIiwiaHRtbFNhbml0aXplciIsIkNTUyIsIlVSTCIsIkpTIiwiJFNjZVByb3ZpZGVyIiwiJHNjZURlbGVnYXRlIiwic2NlIiwiaXNFbmFibGVkIiwicGFyc2VBcyIsImVudW1WYWx1ZSIsImxOYW1lIiwiJFNuaWZmZXJQcm92aWRlciIsImV2ZW50U3VwcG9ydCIsImlzTnciLCJudyIsInByb2Nlc3MiLCJpc0Nocm9tZVBhY2thZ2VkQXBwIiwiY2hyb21lIiwiYXBwIiwicnVudGltZSIsImhhc0hpc3RvcnlQdXNoU3RhdGUiLCJwdXNoU3RhdGUiLCJhbmRyb2lkIiwiYm94ZWUiLCJib2R5U3R5bGUiLCJ0cmFuc2l0aW9ucyIsImFuaW1hdGlvbnMiLCJoYXNFdmVudCIsImRpdkVsbSIsIiRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlciIsImh0dHBPcHRpb25zIiwiJHRlbXBsYXRlQ2FjaGUiLCJoYW5kbGVSZXF1ZXN0Rm4iLCJ0cGwiLCJpZ25vcmVSZXF1ZXN0RXJyb3IiLCJoYW5kbGVFcnJvciIsIiR0ZW1wbGF0ZVJlcXVlc3RNaW5FcnIiLCJ0b3RhbFBlbmRpbmdSZXF1ZXN0cyIsInRyYW5zZm9ybWVyIiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwidGVzdGFiaWxpdHkiLCJmaW5kQmluZGluZ3MiLCJvcHRfZXhhY3RNYXRjaCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJtYXRjaGVzIiwiZGF0YUJpbmRpbmciLCJiaW5kaW5nTmFtZSIsImZpbmRNb2RlbHMiLCJwcmVmaXhlcyIsImF0dHJpYnV0ZUVxdWFscyIsImdldExvY2F0aW9uIiwic2V0TG9jYXRpb24iLCJ3aGVuU3RhYmxlIiwiJFRpbWVvdXRQcm92aWRlciIsImRlZmVycmVkcyIsIiQkdGltZW91dElkIiwidXJsUGFyc2luZ05vZGUiLCJyZXF1ZXN0VXJsIiwib3JpZ2luVXJsIiwiJFdpbmRvd1Byb3ZpZGVyIiwiJCRDb29raWVSZWFkZXIiLCJzYWZlR2V0Q29va2llIiwiY29va2llIiwic2FmZURlY29kZVVSSUNvbXBvbmVudCIsImxhc3RDb29raWVzIiwibGFzdENvb2tpZVN0cmluZyIsImNvb2tpZUFycmF5IiwiY3VycmVudENvb2tpZVN0cmluZyIsIiQkQ29va2llUmVhZGVyUHJvdmlkZXIiLCIkRmlsdGVyUHJvdmlkZXIiLCJmaWx0ZXJzIiwic3VmZml4IiwiY3VycmVuY3lGaWx0ZXIiLCJkYXRlRmlsdGVyIiwianNvbkZpbHRlciIsImxpbWl0VG9GaWx0ZXIiLCJsb3dlcmNhc2VGaWx0ZXIiLCJudW1iZXJGaWx0ZXIiLCJvcmRlckJ5RmlsdGVyIiwidXBwZXJjYXNlRmlsdGVyIiwiY29tcGFyYXRvciIsImFueVByb3BlcnR5S2V5IiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiZXhwcmVzc2lvblR5cGUiLCJnZXRUeXBlRm9yRmlsdGVyIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsImRlZXBDb21wYXJlIiwiZG9udE1hdGNoV2hvbGVPYmplY3QiLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWRWYWwiLCJtYXRjaEFueVByb3BlcnR5IiwiJGxvY2FsZSIsImZvcm1hdHMiLCJOVU1CRVJfRk9STUFUUyIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiQ1VSUkVOQ1lfU1lNIiwiUEFUVEVSTlMiLCJtYXhGcmFjIiwiZm9ybWF0TnVtYmVyIiwiR1JPVVBfU0VQIiwiREVDSU1BTF9TRVAiLCJudW1iZXIiLCJudW1TdHIiLCJkaWdpdHMiLCJudW1iZXJPZkludGVnZXJEaWdpdHMiLCJ6ZXJvcyIsImV4cG9uZW50IiwiWkVST19DSEFSIiwiTUFYX0RJR0lUUyIsInJvdW5kTnVtYmVyIiwicGFyc2VkTnVtYmVyIiwibWluRnJhYyIsImZyYWN0aW9uTGVuIiwibWluIiwicm91bmRBdCIsImRpZ2l0IiwiayIsImNhcnJ5IiwicmVkdWNlUmlnaHQiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc05hTiIsImlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsImlzWmVybyIsImFicyIsImZvcm1hdHRlZFRleHQiLCJpbnRlZ2VyTGVuIiwiZGVjaW1hbHMiLCJyZWR1Y2UiLCJncm91cHMiLCJsZ1NpemUiLCJnU2l6ZSIsIm5lZ1ByZSIsIm5lZ1N1ZiIsInBvc1ByZSIsInBvc1N1ZiIsInBhZE51bWJlciIsIm51bSIsIm5lZ1dyYXAiLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZVN0ckdldHRlciIsInNob3J0Rm9ybSIsInN0YW5kQWxvbmUiLCJ0aW1lWm9uZUdldHRlciIsInpvbmUiLCJwYWRkZWRab25lIiwiZ2V0Rmlyc3RUaHVyc2RheU9mWWVhciIsInllYXIiLCJkYXlPZldlZWtPbkZpcnN0IiwiZ2V0RGF5IiwiZ2V0VGh1cnNkYXlUaGlzV2VlayIsImRhdGV0aW1lIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJ3ZWVrR2V0dGVyIiwiZmlyc3RUaHVycyIsInRoaXNUaHVycyIsInJvdW5kIiwiYW1wbUdldHRlciIsImdldEhvdXJzIiwiQU1QTVMiLCJlcmFHZXR0ZXIiLCJFUkFTIiwibG9uZ0VyYUdldHRlciIsIkVSQU5BTUVTIiwianNvblN0cmluZ1RvRGF0ZSIsInN0cmluZyIsIlJfSVNPODYwMV9TVFIiLCJ0ekhvdXIiLCJ0ek1pbiIsImRhdGVTZXR0ZXIiLCJzZXRVVENGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwidGltZVNldHRlciIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJtIiwicyIsIm1zIiwicGFyc2VGbG9hdCIsImZvcm1hdCIsIkRBVEVUSU1FX0ZPUk1BVFMiLCJOVU1CRVJfU1RSSU5HIiwiREFURV9GT1JNQVRTX1NQTElUIiwiREFURV9GT1JNQVRTIiwic3BhY2luZyIsImlucHV0IiwibGltaXQiLCJiZWdpbiIsIkluZmluaXR5Iiwic2xpY2VGbiIsImVuZCIsInByb2Nlc3NQcmVkaWNhdGVzIiwic29ydFByZWRpY2F0ZXMiLCJwcmVkaWNhdGUiLCJkZXNjZW5kaW5nIiwib2JqZWN0VmFsdWUiLCJnZXRQcmVkaWNhdGVWYWx1ZSIsImRlZmF1bHRDb21wYXJlIiwidjEiLCJ2MiIsInR5cGUxIiwidHlwZTIiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzb3J0UHJlZGljYXRlIiwicmV2ZXJzZU9yZGVyIiwiY29tcGFyZUZuIiwiZ2V0Q29tcGFyaXNvbk9iamVjdCIsInRpZUJyZWFrZXIiLCJwcmVkaWNhdGVWYWx1ZXMiLCJwcmVkaWNhdGVzIiwiZG9Db21wYXJpc29uIiwiY29tcGFyZVZhbHVlcyIsIm5nRGlyZWN0aXZlIiwibnVsbEZvcm1SZW5hbWVDb250cm9sIiwiY29udHJvbCIsIiRuYW1lIiwiRm9ybUNvbnRyb2xsZXIiLCIkJGNvbnRyb2xzIiwiJGVycm9yIiwiJCRzdWNjZXNzIiwiJHBlbmRpbmciLCJuZ0Zvcm0iLCIkZGlydHkiLCIkcHJpc3RpbmUiLCIkdmFsaWQiLCIkaW52YWxpZCIsIiRzdWJtaXR0ZWQiLCIkJHBhcmVudEZvcm0iLCJudWxsRm9ybUN0cmwiLCIkJGFuaW1hdGUiLCJzZXR1cFZhbGlkaXR5IiwiJCRjbGFzc0NhY2hlIiwiSU5WQUxJRF9DTEFTUyIsIlZBTElEX0NMQVNTIiwiYWRkU2V0VmFsaWRpdHlNZXRob2QiLCJjcmVhdGVBbmRTZXQiLCJjdHJsIiwidW5zZXRBbmRDbGVhbnVwIiwidW5zZXQiLCJpc09iamVjdEVtcHR5IiwiY2FjaGVkVG9nZ2xlQ2xhc3MiLCJzd2l0Y2hWYWx1ZSIsInRvZ2dsZVZhbGlkYXRpb25Dc3MiLCJ2YWxpZGF0aW9uRXJyb3JLZXkiLCJpc1ZhbGlkIiwiY2xhenoiLCIkc2V0VmFsaWRpdHkiLCJQRU5ESU5HX0NMQVNTIiwiY29tYmluZWRTdGF0ZSIsInN0cmluZ0Jhc2VkSW5wdXRUeXBlIiwiJGZvcm1hdHRlcnMiLCIkaXNFbXB0eSIsInRleHRJbnB1dFR5cGUiLCJiYXNlSW5wdXRUeXBlIiwiY29tcG9zaW5nIiwiZXYiLCJuZ1RyaW0iLCIkdmlld1ZhbHVlIiwiJCRoYXNOYXRpdmVWYWxpZGF0b3JzIiwiZGVmZXJMaXN0ZW5lciIsIm9yaWdWYWx1ZSIsImtleUNvZGUiLCJQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVMiLCJQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTIiwidmFsaWRpdHkiLCJWQUxJRElUWV9TVEFURV9QUk9QRVJUWSIsIm9yaWdCYWRJbnB1dCIsImJhZElucHV0Iiwib3JpZ1R5cGVNaXNtYXRjaCIsInR5cGVNaXNtYXRjaCIsIiRyZW5kZXIiLCJ3ZWVrUGFyc2VyIiwiaXNvV2VlayIsImV4aXN0aW5nRGF0ZSIsIldFRUtfUkVHRVhQIiwid2VlayIsImhvdXJzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImFkZERheXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiY3JlYXRlRGF0ZVBhcnNlciIsIm1hcHBpbmciLCJpc28iLCJJU09fREFURV9SRUdFWFAiLCJ5eXl5IiwiTU0iLCJkZCIsIkhIIiwibW0iLCJzcyIsInNzcyIsInBhcnQiLCJjcmVhdGVEYXRlSW5wdXRUeXBlIiwicGFyc2VEYXRlIiwiaXNWYWxpZERhdGUiLCJwYXJzZU9ic2VydmVkRGF0ZVZhbHVlIiwiYmFkSW5wdXRDaGVja2VyIiwicHJldmlvdXNEYXRlIiwiJG9wdGlvbnMiLCJnZXRPcHRpb24iLCIkJHBhcnNlck5hbWUiLCIkcGFyc2VycyIsInBhcnNlZERhdGUiLCJuZ01vZGVsTWluRXJyIiwibmdNaW4iLCJtaW5WYWwiLCIkdmFsaWRhdG9ycyIsIiR2YWxpZGF0ZSIsIm5nTWF4IiwibWF4VmFsIiwibnVtYmVyRm9ybWF0dGVyUGFyc2VyIiwiTlVNQkVSX1JFR0VYUCIsInBhcnNlTnVtYmVyQXR0clZhbCIsImlzTnVtYmVySW50ZWdlciIsImNvdW50RGVjaW1hbHMiLCJudW1TdHJpbmciLCJkZWNpbWFsU3ltYm9sSW5kZXgiLCJpc1ZhbGlkRm9yU3RlcCIsInZpZXdWYWx1ZSIsInN0ZXBCYXNlIiwic3RlcCIsImlzTm9uSW50ZWdlclZhbHVlIiwiaXNOb25JbnRlZ2VyU3RlcEJhc2UiLCJpc05vbkludGVnZXJTdGVwIiwidmFsdWVEZWNpbWFscyIsInN0ZXBCYXNlRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJkZWNpbWFsQ291bnQiLCJtdWx0aXBsaWVyIiwicG93IiwibnVtYmVySW5wdXRUeXBlIiwibmdTdGVwIiwic3RlcFZhbCIsIm1vZGVsVmFsdWUiLCJyYW5nZUlucHV0VHlwZSIsInNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyIiwiaHRtbEF0dHJOYW1lIiwiY2hhbmdlRm4iLCJtaW5DaGFuZ2UiLCIkbW9kZWxWYWx1ZSIsInN1cHBvcnRzUmFuZ2UiLCJlbFZhbCIsIm1heENoYW5nZSIsInN0ZXBDaGFuZ2UiLCJoYXNNaW5BdHRyIiwiaGFzTWF4QXR0ciIsImhhc1N0ZXBBdHRyIiwib3JpZ2luYWxSZW5kZXIiLCJyYW5nZVVuZGVyZmxvdyIsInJhbmdlT3ZlcmZsb3ciLCJzdGVwTWlzbWF0Y2giLCJ1cmxJbnB1dFR5cGUiLCJVUkxfUkVHRVhQIiwiZW1haWxJbnB1dFR5cGUiLCJlbWFpbCIsIkVNQUlMX1JFR0VYUCIsInJhZGlvSW5wdXRUeXBlIiwiZG9UcmltIiwiY2hlY2tlZCIsInBhcnNlQ29uc3RhbnRFeHByIiwicGFyc2VGbiIsImNoZWNrYm94SW5wdXRUeXBlIiwidHJ1ZVZhbHVlIiwibmdUcnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwiY2xhc3NEaXJlY3RpdmUiLCJhcnJheURpZmZlcmVuY2UiLCJjbGFzc1N0cmluZyIsInRvQ2xhc3NTdHJpbmciLCJjbGFzc1ZhbHVlIiwiaW5kZXhXYXRjaEV4cHJlc3Npb24iLCJhZGRDbGFzc2VzIiwiZGlnZXN0Q2xhc3NDb3VudHMiLCJyZW1vdmVDbGFzc2VzIiwidXBkYXRlQ2xhc3NlcyIsIm9sZENsYXNzU3RyaW5nIiwibmV3Q2xhc3NTdHJpbmciLCJvbGRDbGFzc0FycmF5IiwibmV3Q2xhc3NBcnJheSIsInRvUmVtb3ZlQXJyYXkiLCJ0b0FkZEFycmF5IiwidG9SZW1vdmVTdHJpbmciLCJ0b0FkZFN0cmluZyIsImNsYXNzQXJyYXkiLCJjbGFzc2VzVG9VcGRhdGUiLCJjbGFzc0NvdW50cyIsIm5nQ2xhc3NJbmRleFdhdGNoQWN0aW9uIiwibmV3TW9kdWxvIiwib2xkTW9kdWxvIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwiJGluZGV4IiwiTmdNb2RlbENvbnRyb2xsZXIiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCIkdW50b3VjaGVkIiwiJHRvdWNoZWQiLCJkZWZhdWx0TW9kZWxPcHRpb25zIiwiJCRwYXJzZWROZ01vZGVsIiwiJCRwYXJzZWROZ01vZGVsQXNzaWduIiwiJCRuZ01vZGVsR2V0IiwiJCRuZ01vZGVsU2V0IiwiJCRwZW5kaW5nRGVib3VuY2UiLCIkJHBhcnNlclZhbGlkIiwiJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkIiwiZGVmaW5lUHJvcGVydHkiLCIkJGF0dHIiLCIkJHRpbWVvdXQiLCIkJGV4Y2VwdGlvbkhhbmRsZXIiLCJzZXR1cE1vZGVsV2F0Y2hlciIsImZvcm1hdHRlcnMiLCIkJHVwZGF0ZUVtcHR5Q2xhc3NlcyIsIiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSIsIiQkcnVuVmFsaWRhdG9ycyIsIk1vZGVsT3B0aW9ucyIsIiQkb3B0aW9ucyIsInNldE9wdGlvblNlbGVjdGVkU3RhdHVzIiwib3B0aW9uRWwiLCJtYW51YWxMb3dlcmNhc2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibWFudWFsVXBwZXJjYXNlIiwialF1ZXJ5IiwiZG9jdW1lbnRNb2RlIiwicnVsZXMiLCJuZ0NzcEVsZW1lbnQiLCJuZ0NzcEF0dHJpYnV0ZSIsIm5vSW5saW5lU3R5bGUiLCJqcSIsIm5hbWVfIiwiZWwiLCJjdXJyZW50U2NyaXB0IiwiSFRNTFNjcmlwdEVsZW1lbnQiLCJTVkdTY3JpcHRFbGVtZW50IiwiZ2V0TmFtZWRJdGVtIiwiZXZlcnkiLCJvcmlnaW4iLCJiaW5kSlF1ZXJ5RmlyZWQiLCJ2ZXJzaW9uIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJkb3QiLCJjb2RlTmFtZSIsImV4cGFuZG8iLCJfZGF0YSIsIm1vdXNlbGVhdmUiLCJtb3VzZWVudGVyIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInJlYWR5IiwibmdNaW5sZW5ndGgiLCJuZ01heGxlbmd0aCIsIm5nUGF0dGVybiIsInJlbW92ZURhdGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjc3MiLCJyZXQiLCJsb3dlcmNhc2VkTmFtZSIsImlzQm9vbGVhbkF0dHIiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm5vZGVDb3VudCIsInR5cGVzIiwiYWRkSGFuZGxlciIsIm5vRXZlbnRMaXN0ZW5lciIsIm9uZSIsIm9uRm4iLCJyZXBsYWNlTm9kZSIsImluc2VydEJlZm9yZSIsImNoaWxkcmVuIiwiY29udGVudERvY3VtZW50IiwicHJlcGVuZCIsIndyYXBOb2RlIiwiZGV0YWNoIiwiYWZ0ZXIiLCJuZXdFbGVtZW50IiwidG9nZ2xlQ2xhc3MiLCJjb25kaXRpb24iLCJjbGFzc0NvbmRpdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsInRyaWdnZXJIYW5kbGVyIiwiZXh0cmFQYXJhbWV0ZXJzIiwiZHVtbXlFdmVudCIsImV2ZW50Rm5zQ29weSIsImhhbmRsZXJBcmdzIiwiYXJnMyIsInVuYmluZCIsIm5hbktleSIsIl9pZHgiLCJfdHJhbnNmb3JtS2V5IiwiJCRNYXBQcm92aWRlciIsIiRhbmltYXRlTWluRXJyIiwiJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIiLCIkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciIsInBvc3REaWdlc3RFbGVtZW50cyIsIiQkQW5pbWF0ZVJ1bm5lciIsInVwZGF0ZURhdGEiLCJoYW5kbGVDU1NDbGFzc0NoYW5nZXMiLCJleGlzdGluZyIsImFkZFJlbW92ZUNsYXNzZXNQb3N0RGlnZXN0IiwiYWRkIiwiY2xhc3Nlc0FkZGVkIiwiY2xhc3Nlc1JlbW92ZWQiLCJwaW4iLCJkb21PcGVyYXRpb24iLCJmcm9tIiwidG8iLCJydW5uZXIiLCJjb21wbGV0ZSIsIiRBbmltYXRlUHJvdmlkZXIiLCJjbGFzc05hbWVGaWx0ZXIiLCIkJHJlZ2lzdGVyZWRBbmltYXRpb25zIiwiJCRhbmltYXRlUXVldWUiLCJkb21JbnNlcnQiLCJhZnRlckVsZW1lbnQiLCJhZnRlck5vZGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZW50ZXIiLCJtb3ZlIiwibGVhdmUiLCJhZGRjbGFzcyIsInNldENsYXNzIiwiYW5pbWF0ZSIsInRlbXBDbGFzc2VzIiwiJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIiLCIkJHJBRiIsIndhaXRGb3JUaWNrIiwid2FpdFF1ZXVlIiwicGFzc2VkIiwiJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyIiwiJCRhbmltYXRlQXN5bmNSdW4iLCIkJGlzRG9jdW1lbnRIaWRkZW4iLCJBbmltYXRlUnVubmVyIiwic2V0SG9zdCIsInJhZlRpY2siLCJ0aW1lb3V0VGljayIsIl9kb25lQ2FsbGJhY2tzIiwiX3RpY2siLCJfc3RhdGUiLCJjaGFpbiIsInJ1bm5lcnMiLCJvblByb2dyZXNzIiwiZ2V0UHJvbWlzZSIsInJlc29sdmVIYW5kbGVyIiwicmVqZWN0SGFuZGxlciIsInBhdXNlIiwicmVzdW1lIiwiX3Jlc29sdmUiLCIkQ29yZUFuaW1hdGVDc3NQcm92aWRlciIsImluaXRpYWxPcHRpb25zIiwiYXBwbHlBbmltYXRpb25Db250ZW50cyIsImNsb3NlZCIsIiQkcHJlcGFyZWQiLCJjbGVhbnVwU3R5bGVzIiwic3RhcnQiLCJpc0ZpcnN0Q2hhbmdlIiwiJCRGb3JjZVJlZmxvd1Byb3ZpZGVyIiwiZG9tTm9kZSIsIm9mZnNldFdpZHRoIiwiQ29udGVudC1UeXBlIiwiWyIsInsiLCIkanNvbnBDYWxsYmFja3NQcm92aWRlciIsImNhbGxiYWNrSWQiLCJjYWxsZWQiLCJjYWxsYmFja01hcCIsIiQkY291bnRlciIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIiRwYXJzZU1pbkVyciIsIk9QRVJBVE9SUyIsIkVTQ0FQRSIsImYiLCJ0IiwiJyIsIlwiIiwibGV4IiwidG9rZW5zIiwicmVhZFN0cmluZyIsInBlZWsiLCJyZWFkTnVtYmVyIiwicGVla011bHRpY2hhciIsInJlYWRJZGVudCIsImlzIiwiaXNXaGl0ZXNwYWNlIiwiY2gyIiwiY2gzIiwib3AxIiwib3AyIiwib3AzIiwidGhyb3dFcnJvciIsImNoYXJzIiwiY29kZVBvaW50QXQiLCJpc1ZhbGlkSWRlbnRpZmllclN0YXJ0IiwiaXNWYWxpZElkZW50aWZpZXJDb250aW51ZSIsImNwIiwiY3AxIiwiY3AyIiwiaXNFeHBPcGVyYXRvciIsImNvbFN0ciIsInBlZWtDaCIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwiRXhwcmVzc2lvblN0YXRlbWVudCIsIlByb3BlcnR5IiwicHJvZ3JhbSIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJleHBlY3QiLCJmaWx0ZXJDaGFpbiIsImFzc2lnbm1lbnQiLCJ0ZXJuYXJ5IiwibG9naWNhbE9SIiwiY29uc3VtZSIsImxvZ2ljYWxBTkQiLCJlcXVhbGl0eSIsInJlbGF0aW9uYWwiLCJhZGRpdGl2ZSIsIm11bHRpcGxpY2F0aXZlIiwidW5hcnkiLCJwcmltYXJ5IiwiYXJyYXlEZWNsYXJhdGlvbiIsInNlbGZSZWZlcmVudGlhbCIsInBhcnNlQXJndW1lbnRzIiwiYmFzZUV4cHJlc3Npb24iLCJwZWVrVG9rZW4iLCJraW5kIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJwZWVrQWhlYWQiLCIkbG9jYWxzIiwibmV4dElkIiwidmFycyIsIm93biIsImFzc2lnbmFibGUiLCJzdGFnZSIsImNvbXB1dGluZyIsInJlY3Vyc2UiLCJyZXR1cm5fIiwiZ2VuZXJhdGVGdW5jdGlvbiIsImZuS2V5IiwiaW50b0lkIiwid2F0Y2hJZCIsImZuU3RyaW5nIiwiVVNFIiwiU1RSSUNUIiwiZmlsdGVyUHJlZml4Iiwid2F0Y2hGbnMiLCJ2YXJzUHJlZml4Iiwic2VjdGlvbiIsIm5hbWVJZCIsInJlY3Vyc2lvbkZuIiwic2tpcFdhdGNoSWRDaGVjayIsImlmXyIsImxhenlBc3NpZ24iLCJjb21wdXRlZE1lbWJlciIsImxhenlSZWN1cnNlIiwicGx1cyIsIm5vdCIsImdldEhhc093blByb3BlcnR5IiwiaXNOdWxsIiwibm9uQ29tcHV0ZWRNZW1iZXIiLCJub3ROdWxsIiwibWVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiU0FGRV9JREVOVElGSUVSIiwic3RyaW5nRXNjYXBlRm4iLCJzdHJpbmdFc2NhcGVSZWdleCIsImMiLCJza2lwIiwiaW5pdCIsInJocyIsImxocyIsInVuYXJ5KyIsInVuYXJ5LSIsInVuYXJ5ISIsImJpbmFyeSsiLCJiaW5hcnktIiwiYmluYXJ5KiIsImJpbmFyeS8iLCJiaW5hcnklIiwiYmluYXJ5PT09IiwiYmluYXJ5IT09IiwiYmluYXJ5PT0iLCJiaW5hcnkhPSIsImJpbmFyeTwiLCJiaW5hcnk+IiwiYmluYXJ5PD0iLCJiaW5hcnk+PSIsImJpbmFyeSYmIiwiYmluYXJ5fHwiLCJ0ZXJuYXJ5PzoiLCJ5eSIsInkiLCJNTU1NIiwiTU1NIiwiTSIsIkxMTEwiLCJIIiwiaGgiLCJFRUVFIiwiRUVFIiwiWiIsInd3IiwidyIsIkciLCJHRyIsIkdHRyIsIkdHR0ciLCJodG1sQW5jaG9yRGlyZWN0aXZlIiwieGxpbmtIcmVmIiwibmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMiLCJwcm9wTmFtZSIsImRlZmF1bHRMaW5rRm4iLCJub3JtYWxpemVkIiwiaHRtbEF0dHIiLCIkYWRkQ29udHJvbCIsIiQkcmVuYW1lQ29udHJvbCIsIiRyZW1vdmVDb250cm9sIiwiJHNldERpcnR5IiwiJHNldFN1Ym1pdHRlZCIsIiRyb2xsYmFja1ZpZXdWYWx1ZSIsIiRjb21taXRWaWV3VmFsdWUiLCJuZXdOYW1lIiwib2xkTmFtZSIsIlBSSVNUSU5FX0NMQVNTIiwiRElSVFlfQ0xBU1MiLCIkc2V0VW50b3VjaGVkIiwiZm9ybURpcmVjdGl2ZUZhY3RvcnkiLCJpc05nRm9ybSIsImdldFNldHRlciIsImZvcm1FbGVtZW50IiwibmFtZUF0dHIiLCJjdHJscyIsImhhbmRsZUZvcm1TdWJtaXNzaW9uIiwic2V0dGVyIiwiZm9ybURpcmVjdGl2ZSIsIm5nRm9ybURpcmVjdGl2ZSIsIkRBVEVUSU1FTE9DQUxfUkVHRVhQIiwiVElNRV9SRUdFWFAiLCJpbnB1dFR5cGUiLCJkYXRldGltZS1sb2NhbCIsInRpbWUiLCJtb250aCIsInJhZGlvIiwicmFuZ2UiLCJjaGVja2JveCIsInN1Ym1pdCIsImlucHV0RGlyZWN0aXZlIiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwibmdWYWx1ZURpcmVjdGl2ZSIsInVwZGF0ZUVsZW1lbnRWYWx1ZSIsInByb3BWYWx1ZSIsInRwbEF0dHIiLCJuZ1ZhbHVlIiwibmdCaW5kRGlyZWN0aXZlIiwiJGNvbXBpbGUiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJuZ0JpbmQiLCJuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSIsIm5nQmluZFRlbXBsYXRlIiwibmdCaW5kSHRtbERpcmVjdGl2ZSIsIm5nQmluZEh0bWxHZXR0ZXIiLCJuZ0JpbmRIdG1sIiwibmdCaW5kSHRtbFdhdGNoIiwiZ2V0VHJ1c3RlZEh0bWwiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsIm5nQ2hhbmdlIiwibmdDbGFzc0RpcmVjdGl2ZSIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbkRpcmVjdGl2ZSIsIm5nQ2xvYWtEaXJlY3RpdmUiLCJuZ0NvbnRyb2xsZXJEaXJlY3RpdmUiLCJuZ0V2ZW50RGlyZWN0aXZlcyIsImZvcmNlQXN5bmNFdmVudHMiLCJibHVyIiwiZm9jdXMiLCJuZ0lmRGlyZWN0aXZlIiwicHJldmlvdXNFbGVtZW50cyIsIm5nSWYiLCJuZ0luY2x1ZGVEaXJlY3RpdmUiLCIkYW5jaG9yU2Nyb2xsIiwic3JjRXhwIiwibmdJbmNsdWRlIiwib25sb2FkRXhwIiwiYXV0b1Njcm9sbEV4cCIsImF1dG9zY3JvbGwiLCJwcmV2aW91c0VsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImNoYW5nZUNvdW50ZXIiLCJjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50IiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSIsIm5nSW5pdERpcmVjdGl2ZSIsIm5nSW5pdCIsIm5nTGlzdERpcmVjdGl2ZSIsIm5nTGlzdCIsInRyaW1WYWx1ZXMiLCIkJGluaXRHZXR0ZXJTZXR0ZXJzIiwiaW52b2tlTW9kZWxHZXR0ZXIiLCJpbnZva2VNb2RlbFNldHRlciIsIiQkJHAiLCIkc2V0VG91Y2hlZCIsInByZXZWYWxpZCIsInByZXZNb2RlbFZhbHVlIiwiYWxsb3dJbnZhbGlkIiwidGhhdCIsImFsbFZhbGlkIiwiJCR3cml0ZU1vZGVsVG9TY29wZSIsImRvbmVDYWxsYmFjayIsInNldFZhbGlkaXR5IiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCJ2YWxpZGF0aW9uRG9uZSIsImVycm9yS2V5Iiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsInZhbGlkYXRvciIsIkJvb2xlYW4iLCJ2YWxpZGF0b3JQcm9taXNlcyIsIiQkcGFyc2VBbmRWYWxpZGF0ZSIsIndyaXRlVG9Nb2RlbElmTmVlZGVkIiwiJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCIsImRlYm91bmNlRGVsYXkiLCIkb3ZlcnJpZGVNb2RlbE9wdGlvbnMiLCJjcmVhdGVDaGlsZCIsIm5nTW9kZWxEaXJlY3RpdmUiLCJtb2RlbEN0cmwiLCJmb3JtQ3RybCIsIm9wdGlvbnNDdHJsIiwic2V0VG91Y2hlZCIsImluaGVyaXRBbGwiLCJ1cGRhdGVPbkRlZmF1bHQiLCJ1cGRhdGVPbiIsImRlYm91bmNlIiwiZ2V0dGVyU2V0dGVyIiwibmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUiLCJOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIiLCIkJGF0dHJzIiwicGFyZW50T3B0aW9ucyIsInBhcmVudEN0cmwiLCJtb2RlbE9wdGlvbnNEZWZpbml0aW9uIiwibmdNb2RlbE9wdGlvbnMiLCJuZ05vbkJpbmRhYmxlRGlyZWN0aXZlIiwibmdPcHRpb25zTWluRXJyIiwiTkdfT1BUSU9OU19SRUdFWFAiLCJuZ09wdGlvbnNEaXJlY3RpdmUiLCJwYXJzZU9wdGlvbnNFeHByZXNzaW9uIiwib3B0aW9uc0V4cCIsInNlbGVjdEVsZW1lbnQiLCJPcHRpb24iLCJzZWxlY3RWYWx1ZSIsImxhYmVsIiwiZ3JvdXAiLCJkaXNhYmxlZCIsImdldE9wdGlvblZhbHVlc0tleXMiLCJvcHRpb25WYWx1ZXMiLCJvcHRpb25WYWx1ZXNLZXlzIiwia2V5TmFtZSIsIml0ZW1LZXkiLCJ2YWx1ZU5hbWUiLCJzZWxlY3RBcyIsInRyYWNrQnkiLCJzZWxlY3RBc0ZuIiwidmlld1ZhbHVlRm4iLCJ0cmFja0J5Rm4iLCJnZXRUcmFja0J5VmFsdWVGbiIsImdldFRyYWNrQnlWYWx1ZSIsImdldExvY2FscyIsImRpc3BsYXlGbiIsImdyb3VwQnlGbiIsImRpc2FibGVXaGVuRm4iLCJ2YWx1ZXNGbiIsImdldFdhdGNoYWJsZXMiLCJ3YXRjaGVkQXJyYXkiLCJvcHRpb25WYWx1ZXNMZW5ndGgiLCJkaXNhYmxlV2hlbiIsImdldE9wdGlvbnMiLCJvcHRpb25JdGVtcyIsInNlbGVjdFZhbHVlTWFwIiwib3B0aW9uSXRlbSIsImdldE9wdGlvbkZyb21WaWV3VmFsdWUiLCJnZXRWaWV3VmFsdWVGcm9tT3B0aW9uIiwibmdPcHRpb25zUG9zdExpbmsiLCJhZGRPcHRpb25FbGVtZW50Iiwib3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwidXBkYXRlT3B0aW9uRWxlbWVudCIsImdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uIiwidXBkYXRlT3B0aW9ucyIsInNlbGVjdEN0cmwiLCJyZWFkVmFsdWUiLCJuZ09wdGlvbnMiLCJncm91cEVsZW1lbnRNYXAiLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwiZW1wdHlPcHRpb24iLCJncm91cEVsZW1lbnQiLCJvcHRHcm91cFRlbXBsYXRlIiwibGlzdEZyYWdtZW50IiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJoYXNFbXB0eU9wdGlvbiIsImdlbmVyYXRlVW5rbm93bk9wdGlvblZhbHVlIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkT3B0aW9ucyIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwicmVtb3ZlVW5rbm93bk9wdGlvbiIsInVuc2VsZWN0RW1wdHlPcHRpb24iLCJzZWxlY3RFbXB0eU9wdGlvbiIsInVua25vd25PcHRpb24iLCJ1cGRhdGVVbmtub3duT3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInJlZ2lzdGVyT3B0aW9uIiwib3B0aW9uU2NvcGUiLCJuZ1BsdXJhbGl6ZURpcmVjdGl2ZSIsIklTX1dIRU4iLCJ1cGRhdGVFbGVtZW50VGV4dCIsIm5ld1RleHQiLCJsYXN0Q291bnQiLCJudW1iZXJFeHAiLCJ3aGVuRXhwIiwid2hlbnMiLCJ3aGVuc0V4cEZucyIsImJyYWNlUmVwbGFjZW1lbnQiLCJ3YXRjaFJlbW92ZXIiLCJhdHRyaWJ1dGVOYW1lIiwidG1wTWF0Y2giLCJ3aGVuS2V5IiwiY291bnRJc05hTiIsInBsdXJhbENhdCIsIndoZW5FeHBGbiIsIm5nUmVwZWF0RGlyZWN0aXZlIiwibmdSZXBlYXRNaW5FcnIiLCJ1cGRhdGVTY29wZSIsInZhbHVlSWRlbnRpZmllciIsImtleUlkZW50aWZpZXIiLCJhcnJheUxlbmd0aCIsIiRmaXJzdCIsIiRsYXN0IiwiJG1pZGRsZSIsIiRvZGQiLCIkZXZlbiIsImdldEJsb2NrU3RhcnQiLCJnZXRCbG9ja0VuZCIsIm5nUmVwZWF0IiwibmdSZXBlYXRFbmRDb21tZW50IiwiYWxpYXNBcyIsInRyYWNrQnlFeHAiLCJ0cmFja0J5RXhwR2V0dGVyIiwidHJhY2tCeUlkRXhwRm4iLCJ0cmFja0J5SWRBcnJheUZuIiwidHJhY2tCeUlkT2JqRm4iLCJoYXNoRm5Mb2NhbHMiLCJsYXN0QmxvY2tNYXAiLCJuZXh0Tm9kZSIsImNvbGxlY3Rpb25MZW5ndGgiLCJ0cmFja0J5SWQiLCJ0cmFja0J5SWRGbiIsImNvbGxlY3Rpb25LZXlzIiwibmV4dEJsb2NrT3JkZXIiLCJwcmV2aW91c05vZGUiLCJuZXh0QmxvY2tNYXAiLCJibG9ja0tleSIsIm5nU2hvd0RpcmVjdGl2ZSIsIm5nU2hvdyIsIm5nSGlkZURpcmVjdGl2ZSIsIm5nSGlkZSIsIm5nU3R5bGVEaXJlY3RpdmUiLCJuZ1N0eWxlIiwibmV3U3R5bGVzIiwib2xkU3R5bGVzIiwibmdTd2l0Y2hEaXJlY3RpdmUiLCJjYXNlcyIsIm5nU3dpdGNoQ29udHJvbGxlciIsIndhdGNoRXhwciIsIm5nU3dpdGNoIiwic2VsZWN0ZWRUcmFuc2NsdWRlcyIsInNlbGVjdGVkRWxlbWVudHMiLCJwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyIsInNlbGVjdGVkU2NvcGVzIiwic3BsaWNlRmFjdG9yeSIsInNlbGVjdGVkVHJhbnNjbHVkZSIsImNhc2VFbGVtZW50Iiwic2VsZWN0ZWRTY29wZSIsImFuY2hvciIsIm5nU3dpdGNoV2hlbkRpcmVjdGl2ZSIsIm5nU3dpdGNoV2hlbiIsIm5nU3dpdGNoV2hlblNlcGFyYXRvciIsIndoZW5DYXNlIiwibmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlIiwibmdUcmFuc2NsdWRlTWluRXJyIiwibmdUcmFuc2NsdWRlRGlyZWN0aXZlIiwiZmFsbGJhY2tMaW5rRm4iLCJuZ1RyYW5zY2x1ZGVDbG9uZUF0dGFjaEZuIiwibm90V2hpdGVzcGFjZSIsInVzZUZhbGxiYWNrQ29udGVudCIsIm5nVHJhbnNjbHVkZSIsIm5nVHJhbnNjbHVkZVNsb3QiLCJzY3JpcHREaXJlY3RpdmUiLCJub29wTmdNb2RlbENvbnRyb2xsZXIiLCJTZWxlY3RDb250cm9sbGVyIiwic2NoZWR1bGVSZW5kZXIiLCJyZW5kZXJTY2hlZHVsZWQiLCJzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSIsInJlbmRlckFmdGVyIiwidXBkYXRlU2NoZWR1bGVkIiwib3B0aW9uc01hcCIsInVua25vd25WYWwiLCJyZWFsVmFsIiwiaGFzT3B0aW9uIiwiY3VycmVudGx5U2VsZWN0ZWRPcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaGFzaGVkVmFsIiwiYWRkT3B0aW9uIiwicmVtb3ZlT3B0aW9uIiwib3B0aW9uQXR0cnMiLCJpbnRlcnBvbGF0ZVZhbHVlRm4iLCJpbnRlcnBvbGF0ZVRleHRGbiIsInJlbW92YWwiLCJwcmV2aW91c2x5U2VsZWN0ZWQiLCJyZW1vdmVWYWx1ZSIsInNlbGVjdERpcmVjdGl2ZSIsInNlbGVjdFByZUxpbmsiLCJzaG91bGRCZVNlbGVjdGVkIiwibGFzdFZpZXciLCJsYXN0Vmlld1JlZiIsInNlbGVjdFBvc3RMaW5rIiwib3B0aW9uRGlyZWN0aXZlIiwicmVxdWlyZWREaXJlY3RpdmUiLCJyZXF1aXJlZCIsInBhdHRlcm5EaXJlY3RpdmUiLCJwYXR0ZXJuRXhwIiwibWF4bGVuZ3RoRGlyZWN0aXZlIiwibWF4bGVuZ3RoIiwiaW50VmFsIiwibWlubGVuZ3RoRGlyZWN0aXZlIiwibWlubGVuZ3RoIiwib3JpZ2luYWxDbGVhbkRhdGEiLCJqcU5hbWUiLCJlbGVtcyIsIiQkY3NwIiwiJCRlbmNvZGVVcmlTZWdtZW50IiwiJCRlbmNvZGVVcmlRdWVyeSIsIiQkc3RyaW5naWZ5IiwidGV4dGFyZWEiLCJmb3JtIiwic2VsZWN0IiwibmdDbGFzcyIsIm5nQ2xhc3NFdmVuIiwibmdDbGFzc09kZCIsIm5nQ2xvYWsiLCJuZ0NvbnRyb2xsZXIiLCJuZ05vbkJpbmRhYmxlIiwibmdQbHVyYWxpemUiLCJuZ1N3aXRjaERlZmF1bHQiLCJuZ1JlcXVpcmVkIiwiJGFuaW1hdGVDc3MiLCIkJGFuaW1hdGVKcyIsIiQkZm9yY2VSZWZsb3ciLCIkaW50ZXJ2YWwiLCIkaHR0cFBhcmFtU2VyaWFsaXplciIsIiRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlIiwiJCR0ZXN0YWJpbGl0eSIsIiQkanFMaXRlIiwiJCRNYXAiLCJhbmd1bGFyVmVyc2lvbiIsImdldERlY2ltYWxzIiwiZ2V0VkYiLCJvcHRfcHJlY2lzaW9uIiwiUExVUkFMX0NBVEVHT1JZIiwiWkVSTyIsIk9ORSIsIlRXTyIsIkZFVyIsIk1BTlkiLCJPVEhFUiIsIkRBWSIsIkZJUlNUREFZT0ZXRUVLIiwiTU9OVEgiLCJTSE9SVERBWSIsIlNIT1JUTU9OVEgiLCJTVEFOREFMT05FTU9OVEgiLCJXRUVLRU5EUkFOR0UiLCJmdWxsRGF0ZSIsImxvbmdEYXRlIiwibWVkaXVtRGF0ZSIsIm1lZGl1bVRpbWUiLCJzaG9ydCIsInNob3J0RGF0ZSIsInNob3J0VGltZSIsIm1pbkludCIsImxvY2FsZUlEIiwidmYiLCJoZWFkIiwiZXhwb3J0cyIsImFuY2VzdG9ycyIsImZpcnN0Iiwic2Vjb25kIiwib2JqZWN0S2V5cyIsImNlaWwiLCJpbmhlcml0UGFyYW1zIiwiY3VycmVudFBhcmFtcyIsIm5ld1BhcmFtcyIsIiRjdXJyZW50IiwiJHRvIiwicGFyZW50UGFyYW1zIiwicGFyZW50cyIsImluaGVyaXRlZCIsImluaGVyaXRMaXN0IiwiZXF1YWxGb3JLZXlzIiwiZmlsdGVyQnlLZXlzIiwiZmlsdGVyZWQiLCJwaWNrIiwib21pdCIsInNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSIsIiRSZXNvbHZlIiwiVklTSVRfSU5fUFJPR1JFU1MiLCJWSVNJVF9ET05FIiwiTk9USElORyIsIk5PX0RFUEVOREVOQ0lFUyIsIk5PX0xPQ0FMUyIsIk5PX1BBUkVOVCIsIiQkcHJvbWlzZXMiLCIkJHZhbHVlcyIsInN0dWR5IiwiaW52b2NhYmxlcyIsInZpc2l0IiwidmlzaXRlZCIsImN5Y2xlIiwicGxhbiIsInBhcmFtIiwiaXNSZXNvbHZlIiwiaW52b2NhYmxlS2V5cyIsIndhaXQiLCJtZXJnZWQiLCIkJGluaGVyaXRlZFZhbHVlcyIsInJlc29sdXRpb24iLCJmYWlsIiwiJCRmYWlsdXJlIiwiaW52b2NhYmxlIiwib25mYWlsdXJlIiwiaW52b2NhdGlvbiIsInByb2NlZWQiLCJ3YWl0UGFyYW1zIiwiZGVwIiwiVGVtcGxhdGVGYWN0b3J5UHJvdmlkZXIiLCJzaG91bGRVbnNhZmVseVVzZUh0dHAiLCJUZW1wbGF0ZUZhY3RvcnkiLCJmcm9tQ29uZmlnIiwiZnJvbVN0cmluZyIsImZyb21VcmwiLCJ0ZW1wbGF0ZVByb3ZpZGVyIiwiZnJvbVByb3ZpZGVyIiwiVXJsTWF0Y2hlciIsInBhcmVudE1hdGNoZXIiLCJhZGRQYXJhbWV0ZXIiLCJwYXJhbU5hbWVzIiwiJCRVTUZQIiwiUGFyYW0iLCJxdW90ZVJlZ0V4cCIsInNxdWFzaCIsInN1cnJvdW5kUGF0dGVybiIsIm1hdGNoRGV0YWlscyIsImlzU2VhcmNoIiwic2VnbWVudCIsImNmZyIsImNhc2VJbnNlbnNpdGl2ZSIsInBsYWNlaG9sZGVyIiwic2VhcmNoUGxhY2Vob2xkZXIiLCIkJG5ldyIsIlBhcmFtU2V0IiwiaXNPcHRpb25hbCIsInNvdXJjZVNlYXJjaCIsInNvdXJjZVBhdGgiLCJzdHJpY3QiLCIkJHBhcmFtTmFtZXMiLCIkVXJsTWF0Y2hlckZhY3RvcnkiLCJ2YWxUb1N0cmluZyIsIn4iLCIvIiwidmFsRnJvbVN0cmluZyIsIn5+IiwifjJGIiwiZ2V0RGVmYXVsdENvbmZpZyIsImlzU3RyaWN0TW9kZSIsImlzQ2FzZUluc2Vuc2l0aXZlIiwiaXNJbmplY3RhYmxlIiwiZmx1c2hUeXBlUXVldWUiLCJ0eXBlUXVldWUiLCIkdHlwZXMiLCJkZWYiLCJkZWZhdWx0U3F1YXNoUG9saWN5IiwiZW5xdWV1ZSIsImRlZmF1bHRUeXBlcyIsImVuY29kZSIsImRlY29kZSIsImludCIsImJvb2wiLCJjYXB0dXJlIiwiYW55IiwiJCRnZXREZWZhdWx0VmFsdWUiLCJzdHJpY3RNb2RlIiwiaXNNYXRjaGVyIiwibyIsImRlZmluaXRpb25GbiIsIiQkZm4iLCIkdmFsdWUiLCJoYXNSZXBsYWNlVmFsIiwicmVwbGFjZW1lbnQiLCJ1cmxUeXBlIiwiYXJyYXlNb2RlIiwiYXJyYXlEZWZhdWx0cyIsImFycmF5UGFyYW1Ob21lbmNsYXR1cmUiLCIkYXNBcnJheSIsImNvbmZpZ3VyZWRLZXlzIiwiZGVmYXVsdFBvbGljeSIsImR5bmFtaWMiLCIkJHBhcmVudCIsIiQka2V5cyIsImlnbm9yZSIsInBhcmFtc2V0IiwicGFyYW1WYWx1ZXMiLCIkJGVxdWFscyIsInBhcmFtVmFsdWVzMSIsInBhcmFtVmFsdWVzMiIsImVxdWFsIiwiJCR2YWxpZGF0ZXMiLCJyYXdWYWwiLCJlbmNvZGVkIiwiJFVybFJvdXRlclByb3ZpZGVyIiwiJHVybE1hdGNoZXJGYWN0b3J5IiwicmVnRXhwUHJlZml4IiwiaW50ZXJwb2xhdGUiLCJoYW5kbGVJZk1hdGNoIiwiJG1hdGNoIiwiYXBwZW5kQmFzZVBhdGgiLCJpc0h0bWw1IiwiYWJzb2x1dGUiLCJldnQiLCJjaGVjayIsInJ1bGUiLCJoYW5kbGVkIiwibGFzdFB1c2hlZFVybCIsImxpc3RlbiIsImludGVyY2VwdERlZmVycmVkIiwic3luYyIsInJlYWQiLCJ1cmxNYXRjaGVyIiwiJCRhdm9pZFJlc3luYyIsInZhbGlkYXRlcyIsInNsYXNoIiwicmVkaXJlY3QiLCJoYW5kbGVySXNTdHJpbmciLCJzdHJhdGVnaWVzIiwiZ2xvYmFsIiwic3RpY2t5IiwiZGVmZXJJbnRlcmNlcHQiLCIkU3RhdGVQcm92aWRlciIsImlzUmVsYXRpdmUiLCJzdGF0ZU5hbWUiLCJmaW5kU3RhdGUiLCJzdGF0ZU9yTmFtZSIsImlzU3RyIiwicmVsIiwicGF0aExlbmd0aCIsInN0YXRlcyIsInF1ZXVlU3RhdGUiLCJwYXJlbnROYW1lIiwiZmx1c2hRdWV1ZWRDaGlsZHJlbiIsInF1ZXVlZCIsInJlZ2lzdGVyU3RhdGUiLCJzdGF0ZUJ1aWxkZXIiLCIkZGVsZWdhdGVzIiwiYWJzdHJhY3RLZXkiLCJuYXZpZ2FibGUiLCJ0cmFuc2l0aW9uVG8iLCJpc0dsb2IiLCJkb2VzU3RhdGVNYXRjaEdsb2IiLCJnbG9iIiwiZ2xvYlNlZ21lbnRzIiwiJHZpZXciLCIkcmVzb2x2ZSIsIiR1cmxSb3V0ZXIiLCJoYW5kbGVSZWRpcmVjdCIsIlRyYW5zaXRpb25BYm9ydGVkIiwicmV0cnkiLCIkcmV0cnkiLCJUcmFuc2l0aW9uRmFpbGVkIiwicmV0cnlUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsInRvUGFyYW1zIiwiVHJhbnNpdGlvblN1cGVyc2VkZWQiLCJyZXNvbHZlU3RhdGUiLCJwYXJhbXNBcmVGaWx0ZXJlZCIsInJlc29sdmVWaWV3cyIsInZpZXdzUHJvbWlzZXMiLCJ2aWV3cyIsInZpZXciLCJpbmplY3RhYmxlcyIsImxvYWQiLCJjb250cm9sbGVyUHJvdmlkZXIiLCJpbmplY3RMb2NhbHMiLCIkJGNvbnRyb2xsZXIiLCIkJGNvbnRyb2xsZXJBcyIsIiQkcmVzb2x2ZUFzIiwicmVzb2x2ZUFzIiwiVHJhbnNpdGlvblN1cGVyc2VkZWRFcnJvciIsIlRyYW5zaXRpb25QcmV2ZW50ZWQiLCJyZWxhdGl2ZSIsImZyb21QYXJhbXMiLCJmcm9tUGF0aCIsInJlZGlyZWN0UmVzdWx0IiwidG9QYXRoIiwia2VlcCIsInRvTG9jYWxzIiwicmVsb2FkU3RhdGUiLCJvd25QYXJhbXMiLCJzaG91bGRTa2lwUmVsb2FkIiwicmVzb2x2ZWQiLCJlbnRlcmluZyIsImV4aXRpbmciLCJvbkV4aXQiLCJvbkVudGVyIiwiYWNjIiwicGFyYW1EZWYiLCJsb3NzeSIsIm5hdiIsInJlbG9hZE9uU2VhcmNoIiwiZnJvbUFuZFRvU3RhdGUiLCJub3RTZWFyY2hQYXJhbSIsIm5vblF1ZXJ5UGFyYW1LZXlzIiwibm9uUXVlcnlQYXJhbXMiLCJjb21wb3NpdGVOYW1lIiwiIiwiYWJzdHJhY3QiLCIkVmlld1Byb3ZpZGVyIiwiJHRlbXBsYXRlRmFjdG9yeSIsIiRWaWV3U2Nyb2xsUHJvdmlkZXIiLCJ1c2VBbmNob3JTY3JvbGwiLCIkVmlld0RpcmVjdGl2ZSIsIiR1aVZpZXdTY3JvbGwiLCJnZXRSZW5kZXJlciIsImNiIiwiJGFuaW1hdG9yIiwiY2xlYW51cExhc3RWaWV3IiwicHJldmlvdXNFbCIsImN1cnJlbnRFbCIsIiR1aVZpZXdEYXRhIiwicmVuZGVyZXIiLCIkJGFuaW1MZWF2ZSIsInVwZGF0ZVZpZXciLCJmaXJzdFRpbWUiLCJnZXRVaVZpZXdOYW1lIiwicHJldmlvdXNMb2NhbHMiLCJsYXRlc3RMb2NhbHMiLCJhbmltRW50ZXIiLCJhbmltTGVhdmUiLCJ2aWV3QW5pbURhdGEiLCIkYW5pbUVudGVyIiwiJGFuaW1MZWF2ZSIsIiRWaWV3RGlyZWN0aXZlRmlsbCIsImluaXRpYWwiLCJyZXNvbHZlRGF0YSIsInVpVmlldyIsInVpVmlld0NyZWF0ZWRCeSIsInBhcnNlU3RhdGVSZWYiLCJyZWYiLCJwcmVwYXJzZWQiLCJwYXJhbUV4cHIiLCJzdGF0ZUNvbnRleHQiLCJzdGF0ZURhdGEiLCJnZXRUeXBlSW5mbyIsImlzU3ZnIiwiaXNGb3JtIiwiaXNBbmNob3IiLCJjbGlja2FibGUiLCJjbGlja0hvb2siLCJpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50IiwiZGVmYXVsdE9wdHMiLCIkU3RhdGVSZWZEaXJlY3RpdmUiLCJ1aVNyZWZBY3RpdmUiLCJob29rRm4iLCJ1aVNyZWYiLCJhY3RpdmUiLCJ1bmxpbmtJbmZvRm4iLCJ1aVNyZWZPcHRzIiwiJCRhZGRTdGF0ZUluZm8iLCIkU3RhdGVSZWZEeW5hbWljRGlyZWN0aXZlIiwicnVuU3RhdGVSZWZMaW5rIiwidWlTdGF0ZSIsInVpU3RhdGVQYXJhbXMiLCJ1aVN0YXRlT3B0cyIsIiRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZSIsImFkZFN0YXRlIiwic3RhdGVQYXJhbXMiLCJhY3RpdmVDbGFzcyIsInN0YXRlSGFzaCIsImNyZWF0ZVN0YXRlSGFzaCIsInN0YXRlSW5mbyIsImFjdGl2ZUNsYXNzZXMiLCJhbnlNYXRjaCIsImV4YWN0TWF0Y2giLCJhY3RpdmVFcUNsYXNzIiwidWlTcmVmQWN0aXZlRXEiLCJkZXJlZ2lzdGVyIiwiJElzU3RhdGVGaWx0ZXIiLCJpc0ZpbHRlciIsIiRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIiLCJpbmNsdWRlc0ZpbHRlciIsImRlZmF1bHRDb25maWciLCJzZWFyY2hQYXJhbXMiLCJwYXJhbU5hbWUiLCJwYXJhbWV0ZXJzIiwiblRvdGFsIiwiblBhdGgiLCJwYXJhbVZhbCIsInJldmVyc2VTdHJpbmciLCJ1bnF1b3RlRGFzaGVzIiwiZW5jb2RlRGFzaGVzIiwiaXNQYXRoUGFyYW0iLCJpc0RlZmF1bHRWYWx1ZSIsIm5leHRTZWdtZW50IiwiaXNGaW5hbFBhdGhQYXJhbSIsIiRzdWJQYXR0ZXJuIiwic3ViIiwiQXJyYXlUeXBlIiwiYmluZFRvIiwiY2FsbGJhY2tOYW1lIiwiYXJyYXlXcmFwIiwiYXJyYXlVbndyYXAiLCJmYWxzZXkiLCJhcnJheUhhbmRsZXIiLCJhbGxUcnV0aHlNb2RlIiwidmFsMSIsInZhbDIiLCIkYXJyYXlNb2RlIiwiYXV0b2luamVjdCIsImlzVmFsaWREb3R0ZWRQYXRoIiwiTUVNQkVSX05BTUVfUkVHRVgiLCJsb29rdXBEb3R0ZWRQYXRoIiwiJHJlc291cmNlTWluRXJyIiwic2hhbGxvd0NsZWFyQW5kQ29weSIsInN0cmlwVHJhaWxpbmdTbGFzaGVzIiwiY2FuY2VsbGFibGUiLCJhY3Rpb25zIiwiUm91dGUiLCJ1cmxQYXJhbXMiLCJyZXNvdXJjZUZhY3RvcnkiLCJwYXJhbURlZmF1bHRzIiwiZXh0cmFjdFBhcmFtcyIsImFjdGlvblBhcmFtcyIsImlkcyIsImRlZmF1bHRSZXNwb25zZUludGVyY2VwdG9yIiwicmVzb3VyY2UiLCJSZXNvdXJjZSIsInJvdXRlIiwidG9KU09OIiwiJHJlc29sdmVkIiwiJGNhbmNlbFJlcXVlc3QiLCJoYXNCb2R5IiwibnVtZXJpY1RpbWVvdXQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImNhbmNlbFJlcXVlc3QiLCJ0aW1lb3V0RGVmZXJyZWQiLCJzdWNjZXNzIiwibnVtZXJpY1RpbWVvdXRQcm9taXNlIiwiaXNJbnN0YW5jZUNhbGwiLCJodHRwQ29uZmlnIiwicmVzcG9uc2VJbnRlcmNlcHRvciIsInJlc3BvbnNlRXJyb3JJbnRlcmNlcHRvciIsImhhc0Vycm9yIiwiaGFzUmVzcG9uc2VFcnJvckludGVyY2VwdG9yIiwic2V0VXJsUGFyYW1zIiwiYWRkaXRpb25hbFBhcmFtRGVmYXVsdHMiLCJleHRlbmRlZFBhcmFtRGVmYXVsdHMiLCJhY3Rpb25VcmwiLCJlbmNvZGVkVmFsIiwicHJvdG9jb2xBbmRJcHY2IiwiaXNRdWVyeVBhcmFtVmFsdWUiLCJwYXJhbUluZm8iLCJ1cmxQYXJhbSIsInAxIiwibGVhZGluZ1NsYXNoZXMiLCJ0YWlsIiwiYXJyIiwicG9zdExpbmtGbiIsInVuYmluZE1vZGVsIiwidW5iaW5kQ2hlY2tMaXN0VmFsdWUiLCJ1bmJpbmREZXN0cm95IiwiZ2V0Q2hlY2tsaXN0VmFsdWUiLCJjaGVja2xpc3RWYWx1ZSIsInNldFZhbHVlSW5DaGVja2xpc3RNb2RlbCIsImNoZWNrbGlzdE1vZGVsR2V0dGVyIiwic2V0Q2hlY2tlZCIsIm5ld0FyciIsIm9sZEFyciIsImNoZWNrbGlzdEJlZm9yZUNoYW5nZSIsIm5nTW9kZWxHZXR0ZXIiLCJjaGVja2xpc3RNb2RlbCIsImNoZWNrbGlzdENoYW5nZSIsImNoZWNrbGlzdENvbXBhcmF0b3IiLCJjb21wYXJhdG9yRXhwcmVzc2lvbiIsImRlZmluZSIsImFtZCIsInNhdGVsbGl6ZXIiLCJqb2luVXJsIiwiYmFzZVVybCIsImpvaW5lZCIsImdldEZ1bGxVcmxQYXRoIiwiaXNIdHRwcyIsInBhcnNlUXVlcnlTdHJpbmciLCJkZWNvZGVCYXNlNjQiLCJCdWZmZXIiLCJyZV9idG91IiwiY2JfYnRvdSIsImNjY2MiLCJidG91IiwiYXRvYiIsIm0wIiwiQ29uZmlnIiwidW5saW5rVXJsIiwidG9rZW5OYW1lIiwidG9rZW5QcmVmaXgiLCJ0b2tlbkhlYWRlciIsInRva2VuVHlwZSIsInN0b3JhZ2VUeXBlIiwidG9rZW5Sb290IiwicHJvdmlkZXJzIiwiZmFjZWJvb2siLCJhdXRob3JpemF0aW9uRW5kcG9pbnQiLCJyZWRpcmVjdFVyaSIsInJlcXVpcmVkVXJsUGFyYW1zIiwic2NvcGVEZWxpbWl0ZXIiLCJkaXNwbGF5Iiwib2F1dGhUeXBlIiwicG9wdXBPcHRpb25zIiwid2lkdGgiLCJoZWlnaHQiLCJnb29nbGUiLCJvcHRpb25hbFVybFBhcmFtcyIsInNjb3BlUHJlZml4IiwicmFuZG9tIiwiZ2l0aHViIiwiaW5zdGFncmFtIiwibGlua2VkaW4iLCJ0d2l0dGVyIiwidHdpdGNoIiwibGl2ZSIsInlhaG9vIiwiYml0YnVja2V0Iiwic3BvdGlmeSIsImh0dHBJbnRlcmNlcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJBdXRoUHJvdmlkZXIiLCJTYXRlbGxpemVyQ29uZmlnIiwib2F1dGgxIiwib2F1dGgyIiwiU2F0ZWxsaXplclNoYXJlZCIsIlNhdGVsbGl6ZXJMb2NhbCIsIlNhdGVsbGl6ZXJPQXV0aCIsImF1dGhlbnRpY2F0ZSIsInVubGluayIsImdldFRva2VuIiwic2V0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZW1vdmVUb2tlbiIsInNldFN0b3JhZ2VUeXBlIiwiU2hhcmVkIiwiU2F0ZWxsaXplclN0b3JhZ2UiLCJfYSIsInByZWZpeGVkVG9rZW5OYW1lIiwiYmFzZTY0VXJsIiwiYWNjZXNzVG9rZW4iLCJ0b2tlblJvb3REYXRhIiwieCIsIkxvY2FsIiwiX3RoaXMiLCJQb3B1cCIsInBvcHVwIiwic3RyaW5naWZ5T3B0aW9ucyIsImRvbnRQb2xsIiwic2NyZWVuWSIsIm91dGVySGVpZ2h0Iiwic2NyZWVuWCIsIm91dGVyV2lkdGgiLCJwb3B1cE5hbWUiLCJldmVudExpc3RlbmVyIiwicG9sbGluZyIsInJlZGlyZWN0VXJpUGFyc2VyIiwicmVkaXJlY3RVcmlQYXRoIiwiY2xvc2UiLCJwYXJzZXIiLCJPQXV0aDEiLCJTYXRlbGxpemVyUG9wdXAiLCJkZWZhdWx0VXJsUGFyYW1zIiwidXNlckRhdGEiLCJnZXRSZXF1ZXN0VG9rZW4iLCJvcGVuUG9wdXAiLCJwb3B1cFJlc3BvbnNlIiwiZXhjaGFuZ2VGb3JUb2tlbiIsImJ1aWxkUXVlcnlTdHJpbmciLCJvYXV0aERhdGEiLCJwYXlsb2FkIiwiZXhjaGFuZ2VGb3JUb2tlblVybCIsIk9BdXRoMiIsImNsaWVudElkIiwicmVzcG9uc2VQYXJhbXMiLCJjYW1lbENhc2UiLCJfIiwib2F1dGgiLCJrZXlWYWx1ZVBhaXJzIiwidXJsUGFyYW1zQ2F0ZWdvcmllcyIsInBhcmFtc0NhdGVnb3J5IiwiY2FtZWxpemVkTmFtZSIsInBhaXIiLCJPQXV0aCIsIlNhdGVsbGl6ZXJPQXV0aDEiLCJTYXRlbGxpemVyT0F1dGgyIiwiU3RvcmFnZSIsIm1lbW9yeVN0b3JlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiSW50ZXJjZXB0b3IiLCJGYWN0b3J5IiwiSHR0cFByb3ZpZGVyQ29uZmlnIiwiJGh0dHBQcm92aWRlciIsImdldENvbnN0YW50IiwiZ2V0U2Nyb2xsRnJvbUVsZW1lbnQiLCJob3Jpem9udGFsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJleHBhbmQiLCJleHBhbmRpbmdFeHByIiwiZWFzaW5nIiwib3ZlcmZsb3ciLCJleHBhbmREb25lIiwiZXhwYW5kZWRFeHByIiwiY29sbGFwc2UiLCJjb2xsYXBzZURvbmUiLCJjb2xsYXBzaW5nRXhwciIsImNzc1RvIiwiY29sbGFwc2VkRXhwciIsImV4cGFuZGluZyIsImV4cGFuZGVkIiwiY29sbGFwc2luZyIsImNvbGxhcHNlZCIsInVpYkNvbGxhcHNlIiwic2hvdWxkQ29sbGFwc2UiLCJjbG9zZU90aGVycyIsImFjY29yZGlvbkNvbmZpZyIsIm9wZW5Hcm91cCIsImlzT3BlbiIsImFkZEdyb3VwIiwiZ3JvdXBTY29wZSIsInJlbW92ZUdyb3VwIiwiaGVhZGluZyIsInBhbmVsQ2xhc3MiLCJpc0Rpc2FibGVkIiwic2V0SGVhZGluZyIsImFjY29yZGlvbkN0cmwiLCJvcGVuQ2xhc3MiLCJ0b2dnbGVPcGVuIiwiaGVhZGluZ0lkIiwicGFuZWxJZCIsImFjY29yZGlvbkdyb3VwQ3RybCIsInVpYkFjY29yZGlvblRyYW5zY2x1ZGUiLCJjbG9zZWFibGUiLCJkaXNtaXNzT25UaW1lb3V0IiwidG9nZ2xlRXZlbnQiLCJidXR0b25Db25maWciLCJidXR0b25zQ3RybCIsInVuY2hlY2thYmxlRXhwciIsInVpYlVuY2hlY2thYmxlIiwidWliQnRuUmFkaW8iLCJpc0FjdGl2ZSIsInVuY2hlY2thYmxlIiwiZ2V0VHJ1ZVZhbHVlIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsImJ0bkNoZWNrYm94VHJ1ZSIsImdldEZhbHNlVmFsdWUiLCJidG5DaGVja2JveEZhbHNlIiwic2V0QWN0aXZlIiwic2xpZGVzIiwic2xpZGUiLCJnb05leHQiLCJkaXJlY3Rpb24iLCJkZXN0cm95ZWQiLCJjdXJyZW50SW5kZXgiLCIkY3VycmVudFRyYW5zaXRpb24iLCJTTElERV9ESVJFQ1RJT04iLCJjdXJyZW50SWR4IiwiZ2V0Q3VycmVudEluZGV4IiwicmVzdGFydFRpbWVyIiwiZmluZFNsaWRlSW5kZXgiLCJyZXNldFRpbWVyIiwiY3VycmVudEludGVydmFsIiwicmVzZXRUcmFuc2l0aW9uIiwidGltZXJGbiIsImlzUGxheWluZyIsImFkZFNsaWRlIiwicGxheSIsIm5ld0luZGV4Iiwibm9XcmFwIiwicHJldiIsInJlbW92ZVNsaWRlIiwibmV4dFNsaWRlIiwibmV4dEluZGV4IiwiaW5kZXhPZlNsaWRlIiwiaXNQcmV2RGlzYWJsZWQiLCJpc05leHREaXNhYmxlZCIsIm5vUGF1c2UiLCJub1RyYW5zaXRpb24iLCJjYXJvdXNlbEN0cmwiLCJiZWZvcmVBZGRDbGFzcyIsInN0b3BwZWQiLCJkaXJlY3Rpb25DbGFzcyIsInJlbW92ZUNsYXNzRm4iLCJiZWZvcmVSZW1vdmVDbGFzcyIsImdldEZvcm1hdENvZGVUb1JlZ2V4IiwiZm9ybWF0Q29kZVRvUmVnZXgiLCJjcmVhdGVQYXJzZXIiLCJxdW90ZUluZGV4IiwiaW5MaXRlcmFsIiwiY3JlYXRlRm9ybWF0dGVyIiwiZm9ybWF0dGVyIiwibGl0ZXJhbElkeCIsImNvbnN0cnVjdExpdGVyYWxGb3JtYXR0ZXIiLCJjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4IiwiZW5kSWR4IiwiY3VycmVudFBvc1N0ciIsInRvVGltZXpvbmUiLCJmcm9tVGltZXpvbmUiLCJsb2NhbGVJZCIsInBhcnNlcnMiLCJfZGF0ZSIsInNpZ24iLCJnZXRQYXJzZXIiLCJvdmVycmlkZVBhcnNlciIsImJhc2VEYXRlIiwidHpPZmZzZXQiLCJmaWVsZHMiLCJkdCIsIm1hcHBlciIsImRhdGVzZXR0ZXIiLCJ0aW1lc2V0dGVyIiwiSVNfUkVHRVhQIiwibGlua2VkU2NvcGVzIiwiaW5zdGFuY2VzIiwiZXhwcyIsImFkZEZvckV4cCIsInJlbW92ZVNjb3BlIiwiY29tcGFyZVdpdGhFeHAiLCJleHBUb0RhdGEiLCJ3YXRjaEZuIiwiY29tcGFyZVdpdGhWYWwiLCJuZXdBY3RpdmF0ZWQiLCJvbkV4cCIsImxhc3RBY3RpdmF0ZWQiLCJyZW1vdmVkU2NvcGUiLCJuZXdXYXRjaFNjb3BlIiwib25FeHBNYXRjaGVzIiwidWliSXNDbGFzcyIsImV4cHNTdHIiLCJkYXRlcGlja2VyTW9kZSIsImZvcm1hdERheSIsImZvcm1hdE1vbnRoIiwiZm9ybWF0WWVhciIsImZvcm1hdERheUhlYWRlciIsImZvcm1hdERheVRpdGxlIiwiZm9ybWF0TW9udGhUaXRsZSIsIm1heERhdGUiLCJtYXhNb2RlIiwibWluRGF0ZSIsIm1pbk1vZGUiLCJtb250aENvbHVtbnMiLCJzaG9ydGN1dFByb3BhZ2F0aW9uIiwic2hvd1dlZWtzIiwieWVhckNvbHVtbnMiLCJ5ZWFyUm93cyIsImRhdGVwaWNrZXJDb25maWciLCIkZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nIiwiJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yIiwiZGF0ZVBhcnNlciIsInNldE1vZGUiLCJkYXRlcGlja2VyT3B0aW9ucyIsImV4dHJhY3RPcHRpb25zIiwid2F0Y2hMaXN0ZW5lcnMiLCJtb2RlcyIsInN0YXJ0aW5nRGF5IiwicmVmcmVzaFZpZXciLCJ1bmlxdWVJZCIsIm5nRGlzYWJsZWQiLCJkYXRlT2JqZWN0IiwiYWN0aXZlRGF0ZSIsImFjdGl2ZURhdGVJZCIsIm5nTW9kZWxDdHJsXyIsImluaXREYXRlIiwicmVuZGVyIiwic2VsZWN0ZWREdCIsIl9yZWZyZXNoVmlldyIsImFjdGl2ZUR0IiwiY3JlYXRlRGF0ZU9iamVjdCIsIm1vZGVsIiwidG9kYXkiLCJwYXN0IiwiZnV0dXJlIiwiY3VzdG9tQ2xhc3MiLCJkYXRlRGlzYWJsZWQiLCJhcnJheXMiLCJ5ZWFycyIsIm1vbnRocyIsInRvZ2dsZU1vZGUiLCIxMyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsImZvY3VzRWxlbWVudCIsImtleWRvd24iLCJhbHRLZXkiLCJoYW5kbGVLZXlEb3duIiwiZ2V0RGF5c0luTW9udGgiLCJEQVlTX0lOX01PTlRIIiwiZ2V0SVNPODYwMVdlZWtOdW1iZXIiLCJjaGVja0RhdGUiLCJzZXREYXRlIiwic2V0TW9udGgiLCJnZXREYXRlcyIsInN0YXJ0RGF0ZSIsImRhdGVzIiwiZmlyc3REYXlPZk1vbnRoIiwiZGlmZmVyZW5jZSIsIm51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoIiwiZmlyc3REYXRlIiwiZGF5cyIsInNlY29uZGFyeSIsImxhYmVscyIsImFiYnIiLCJ0aXRsZSIsInJvd3MiLCJ3ZWVrTnVtYmVycyIsInRodXJzZGF5SW5kZXgiLCJudW1XZWVrcyIsImN1cldlZWsiLCJkYXRlMSIsImRhdGUyIiwiX2RhdGUxIiwiX2RhdGUyIiwieWVhckhlYWRlckNvbHNwYW4iLCJnZXRTdGFydGluZ1llYXIiLCJjb2x1bW5zIiwieWVhcnBpY2tlckluaXQiLCJkYXRlcGlja2VyQ3RybCIsIlNDUk9MTEJBUl9XSURUSCIsIkJPRFlfU0NST0xMQkFSX1dJRFRIIiwiT1ZFUkZMT1dfUkVHRVgiLCJub3JtYWwiLCJQTEFDRU1FTlRfUkVHRVgiLCJhdXRvIiwidmVydGljYWwiLCJCT0RZX1JFR0VYIiwiZ2V0UmF3Tm9kZSIsInBhcnNlU3R5bGUiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxiYXJXaWR0aCIsImlzQm9keSIsImJvZHlFbGVtIiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsRWxlbSIsInNjcm9sbGJhclBhZGRpbmciLCJlbGVtU3R5bGUiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwic2Nyb2xsUGFyZW50IiwidGFnTmFtZSIsIndpZHRoT3ZlcmZsb3ciLCJvcmlnaW5hbFJpZ2h0IiwiaGVpZ2h0T3ZlcmZsb3ciLCJjbGllbnRIZWlnaHQiLCJvcmlnaW5hbEJvdHRvbSIsImlzU2Nyb2xsYWJsZSIsImluY2x1ZGVIaWRkZW4iLCJvdmVyZmxvd1JlZ2V4Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiaW5jbHVkZVNlbGYiLCJkb2N1bWVudEVsIiwiZXhjbHVkZVN0YXRpYyIsInNwU3R5bGUiLCJpbmNsdWRlTWFnaW5zIiwiZWxlbU9mZnNldCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJwYXJlbnRPZmZzZXQiLCJjbGllbnRUb3AiLCJzY3JvbGxUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsTGVmdCIsIm9mZnNldEhlaWdodCIsImVsZW1CQ1IiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwidmlld3BvcnRPZmZzZXQiLCJ1c2VEb2N1bWVudCIsImluY2x1ZGVQYWRkaW5nIiwib2Zmc2V0QkNSIiwib2Zmc2V0UGFyZW50QkNSIiwib2Zmc2V0UGFyZW50U3R5bGUiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0xlZnQiLCJwYXJzZVBsYWNlbWVudCIsInBsYWNlbWVudCIsImF1dG9QbGFjZSIsInBvc2l0aW9uRWxlbWVudHMiLCJob3N0RWxlbSIsInRhcmdldEVsZW0iLCJhcHBlbmRUb0JvZHkiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsImhvc3RFbGVtUG9zIiwidGFyZ2V0RWxlbVBvcyIsInRhcmdldEVsZW1TdHlsZSIsImFkanVzdGVkU2l6ZSIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwieE92ZXJmbG93IiwieU92ZXJmbG93IiwiYWRqdXN0VG9wIiwicGxhY2VtZW50Q2xhc3NlcyIsImNvbnRhaW5lclBvc2l0aW9uIiwiaW5pdGlhbEhlaWdodCIsImN1cnJlbnRIZWlnaHQiLCJwb3NpdGlvbkFycm93IiwiaW5uZXJFbGVtIiwiaXNUb29sdGlwIiwiYXJyb3dFbGVtIiwiYXJyb3dDc3MiLCJib3JkZXJQcm9wIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJSYWRpdXNQcm9wIiwiYm9yZGVyUmFkaXVzIiwiYWx0SW5wdXRGb3JtYXRzIiwiY2xlYXJUZXh0IiwiY2xvc2VPbkRhdGVTZWxlY3Rpb24iLCJjbG9zZVRleHQiLCJjdXJyZW50VGV4dCIsImRhdGVwaWNrZXJQb3B1cCIsImRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsIiwiZGF0ZXBpY2tlclRlbXBsYXRlVXJsIiwiaHRtbDVUeXBlcyIsIm9uT3BlbkZvY3VzIiwic2hvd0J1dHRvbkJhciIsIiRwb3NpdGlvbiIsImRhdGVwaWNrZXJQb3B1cENvbmZpZyIsIiRkYXRlcGlja2VyUG9wdXBMaXRlcmFsV2FybmluZyIsInBhcnNlRGF0ZVN0cmluZyIsImRhdGVGb3JtYXQiLCJkb2N1bWVudENsaWNrQmluZCIsIiRwb3B1cCIsImRwQ29udGFpbnNUYXJnZXQiLCJwb3B1cENvbnRhaW5zVGFyZ2V0IiwiaW5wdXRLZXlkb3duQmluZCIsInBvc2l0aW9uUG9wdXAiLCJkcEVsZW1lbnQiLCJwb3B1cFBsYWNlbWVudCIsInBvcHVwRWwiLCJkYXRlcGlja2VyRWwiLCJzY3JvbGxQYXJlbnRFbCIsImlzSHRtbDVEYXRlSW5wdXQiLCJfbmdNb2RlbF8iLCJkYXRlcGlja2VyQXBwZW5kVG9Cb2R5IiwidWliRGF0ZXBpY2tlclBvcHVwIiwibmV3RGF0ZUZvcm1hdCIsIm5nLW1vZGVsIiwibmctY2hhbmdlIiwidGVtcGxhdGUtdXJsIiwiZGF0ZVNlbGVjdGlvbiIsImRlYm91bmNlVGltZSIsInRpbWVvdXRQcm9taXNlIiwiY3JlYXRlTmV3IiwiZW50cmllcyIsImhhc0tleSIsImFwcGVuZFRvT3BlbkNsYXNzIiwiJCRtdWx0aU1hcCIsIm9wZW5TY29wZSIsIm9wZW5lZENvbnRhaW5lcnMiLCJpc09ubHlPcGVuIiwiZHJvcGRvd25TY29wZSIsImFwcGVuZFRvIiwib3BlbmVkRHJvcGRvd25zIiwidG9DbG9zZSIsImRyb3Bkb3duIiwiY2xvc2VEcm9wZG93biIsImtleWJpbmRGaWx0ZXIiLCJkcm9wZG93blRvQ2xvc2UiLCJnZXRBdXRvQ2xvc2UiLCJ0b2dnbGVFbGVtZW50IiwiZ2V0VG9nZ2xlRWxlbWVudCIsImRyb3Bkb3duRWxlbWVudCIsImdldERyb3Bkb3duRWxlbWVudCIsImZvY3VzVG9nZ2xlRWxlbWVudCIsImRyb3Bkb3duRWxlbWVudFRhcmdldGVkIiwidG9nZ2xlRWxlbWVudFRhcmdldGVkIiwiaXNLZXluYXZFbmFibGVkIiwiZm9jdXNEcm9wZG93bkVudHJ5IiwiZHJvcGRvd25Db25maWciLCJ1aWJEcm9wZG93blNlcnZpY2UiLCJyZW1vdmVEcm9wZG93bk1lbnUiLCJkcm9wZG93bk1lbnUiLCJ0ZW1wbGF0ZVNjb3BlIiwiZ2V0SXNPcGVuIiwic2V0SXNPcGVuIiwidG9nZ2xlSW52b2tlciIsIm9uVG9nZ2xlIiwia2V5bmF2RW5hYmxlZCIsImtleWJvYXJkTmF2IiwidG9nZ2xlIiwiYXV0b0Nsb3NlIiwiZ2V0RWxlbWVudCIsIndhc09wZW4iLCJkcm9wZG93bkFwcGVuZFRvIiwiYXBwZW5kVG9FbCIsImRyb3Bkb3duQXBwZW5kVG9Cb2R5IiwicmlnaHRhbGlnbiIsImFwcGVuZE9mZnNldCIsIm9wZW5Db250YWluZXIiLCJkcm9wZG93bk9wZW5DbGFzcyIsImhhc09wZW5DbGFzcyIsImRyb3Bkb3duTWVudVRlbXBsYXRlVXJsIiwidHBsQ29udGVudCIsIm5ld0VsIiwiZHJvcGRvd25DdHJsIiwiZHJvcGRvd25OZXN0ZWQiLCJ0cGxVcmwiLCJ0b2dnbGVEcm9wZG93biIsImFyaWEtaGFzcG9wdXAiLCJhcmlhLWV4cGFuZGVkIiwicmVtb3ZlVG9wIiwic2V0UmVzb2x2ZXIiLCJyZXNvbHZlcyIsInJlc29sdmVPYmoiLCJyZXNvbHZlSXRlciIsIiRtb2RhbFN0YWNrIiwibW9kYWxJbkNsYXNzIiwiTk9XX0NMT1NJTkdfRVZFTlQiLCJzZXRJc0FzeW5jIiwibW9kYWxPcHRpb25zIiwiYmFja2Ryb3BDbGFzcyIsIndpbmRvd1RvcENsYXNzIiwibW9kYWwiLCJnZXRUb3AiLCJiYWNrZHJvcCIsImN1cnJlbnRUYXJnZXQiLCJkaXNtaXNzIiwiJGlzUmVuZGVyZWQiLCJtb2RhbFJlbmRlckRlZmVyT2JqIiwiYW5pbWF0aW9uUHJvbWlzZSIsIm1vZGFsUmVuZGVyZWQiLCJhY3RpdmVFbGVtZW50IiwiaW5wdXRXaXRoQXV0b2ZvY3VzIiwibW9kYWxBbmltYXRpb24iLCJ1aWJNb2RhbEFuaW1hdGlvbkNsYXNzIiwiJCRzdGFja2VkTWFwIiwiJHVpYlBvc2l0aW9uIiwiaXNWaXNpYmxlIiwiZ2V0Q2xpZW50UmVjdHMiLCJiYWNrZHJvcEluZGV4IiwidG9wQmFja2Ryb3BJbmRleCIsIm9wZW5lZCIsIm9wZW5lZFdpbmRvd3MiLCJ0b3BNb2RhbEluZGV4IiwicmVtb3ZlTW9kYWxXaW5kb3ciLCJtb2RhbEluc3RhbmNlIiwiZWxlbWVudFRvUmVjZWl2ZUZvY3VzIiwibW9kYWxXaW5kb3ciLCJhcHBlbmRUb0VsZW1lbnQiLCJwcmV2aW91c1RvcE9wZW5lZE1vZGFsIiwibW9kYWxEb21FbCIsInJlbW92ZUFmdGVyQW5pbWF0ZSIsIm1vZGFsU2NvcGUiLCJtb2RhbEJvZHlDbGFzcyIsIm9wZW5lZENsYXNzIiwiT1BFTkVEX01PREFMX0NMQVNTIiwib3BlbmVkQ2xhc3NlcyIsImFyZUFueU9wZW4iLCJ0b2dnbGVUb3BXaW5kb3dDbGFzcyIsImNsb3NlZERlZmVycmVkIiwiY2hlY2tSZW1vdmVCYWNrZHJvcCIsInRvZ2dsZVN3aXRjaCIsImJhY2tkcm9wRG9tRWwiLCJiYWNrZHJvcFNjb3BlUmVmIiwiYmFja2Ryb3BTY29wZSIsImRvbUVsIiwiYWZ0ZXJBbmltYXRpbmciLCJhc3luY0RlZmVycmVkIiwiYXN5bmNQcm9taXNlIiwia2V5ZG93bkxpc3RlbmVyIiwia2V5Ym9hcmQiLCJsb2FkRm9jdXNFbGVtZW50TGlzdCIsImZvY3VzQ2hhbmdlZCIsImlzRm9jdXNJbkZpcnN0SXRlbSIsImlzTW9kYWxGb2N1c2VkIiwiZm9jdXNMYXN0Rm9jdXNhYmxlRWxlbWVudCIsImlzRm9jdXNJbkxhc3RJdGVtIiwiZm9jdXNGaXJzdEZvY3VzYWJsZUVsZW1lbnQiLCJicm9hZGNhc3RDbG9zaW5nIiwicmVzdWx0T3JSZWFzb24iLCJjbG9zaW5nIiwidW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzIiwiQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUiLCJoaWRkZW5FbCIsImFyaWFIaWRkZW5Db3VudCIsIm5ld0hpZGRlbkNvdW50IiwibmV3QmFja2Ryb3BJbmRleCIsImFwcGx5QXJpYUhpZGRlbiIsImVsZW1Jc0FscmVhZHlIaWRkZW4iLCJtb2RhbE9wZW5lciIsInJlbmRlckRlZmVycmVkIiwiY3VyckJhY2tkcm9wSW5kZXgiLCJjbGFzcyIsIm5nLXN0eWxlIiwidWliLW1vZGFsLWFuaW1hdGlvbi1jbGFzcyIsIm1vZGFsLWluLWNsYXNzIiwibW9kYWwtaW5zdGFuY2UiLCJhbmd1bGFyRG9tRWwiLCJ3aW5kb3dUZW1wbGF0ZVVybCIsIndpbmRvdy10b3AtY2xhc3MiLCJyb2xlIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhLWRlc2NyaWJlZGJ5IiwiYXJpYURlc2NyaWJlZEJ5IiwidGFiaW5kZXgiLCJ3aW5kb3dDbGFzcyIsIiQkdG9wTW9kYWxJbmRleCIsIiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQiLCJkaXNtaXNzQWxsIiwidG9wTW9kYWwiLCJzcmNFbGVtZW50IiwibW9kYWxEb21FMSIsIiRtb2RhbFByb3ZpZGVyIiwiJHVpYlJlc29sdmUiLCJnZXRUZW1wbGF0ZVByb21pc2UiLCIkbW9kYWwiLCJwcm9taXNlQ2hhaW4iLCJnZXRQcm9taXNlQ2hhaW4iLCJyZXNvbHZlV2l0aFRlbXBsYXRlIiwidGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSIsIm1vZGFsUmVzdWx0RGVmZXJyZWQiLCJtb2RhbE9wZW5lZERlZmVycmVkIiwibW9kYWxDbG9zZWREZWZlcnJlZCIsIm1vZGFsUmVuZGVyRGVmZXJyZWQiLCJyZW5kZXJlZCIsInNhbWVQcm9taXNlIiwidHBsQW5kVmFycyIsImNvbnN0cnVjdExvY2FscyIsImluc3RhbmNlT25TY29wZSIsImluamVjdGFibGUiLCIkdWliTW9kYWxJbnN0YW5jZSIsInByb3ZpZGVkU2NvcGUiLCIkY2xvc2UiLCIkZGlzbWlzcyIsImN0cmxJbnN0YW5jZSIsImN0cmxJbnN0YW50aWF0ZSIsImN0cmxMb2NhbHMiLCJzZXROdW1QYWdlcyIsIm51bVBhZ2VzIiwiX3dhdGNoZXJzIiwiaXRlbXNQZXJQYWdlIiwidG90YWxQYWdlcyIsImNhbGN1bGF0ZVRvdGFsUGFnZXMiLCJ1cGRhdGVQYWdlIiwibmV3VG90YWwiLCJvbGRUb3RhbCIsInRvdGFsSXRlbXMiLCJwYWdlIiwic2VsZWN0UGFnZSIsIm5vUHJldmlvdXMiLCJub05leHQiLCJ1aWJQYWdpbmciLCJ1aWJQYWdlckNvbmZpZyIsImFsaWduIiwicHJldmlvdXNUZXh0IiwibmV4dFRleHQiLCJwYWdpbmF0aW9uQ3RybCIsInVpYlBhZ2luYXRpb25Db25maWciLCJtYWtlUGFnZSIsImdldFBhZ2VzIiwiY3VycmVudFBhZ2UiLCJwYWdlcyIsInN0YXJ0UGFnZSIsImVuZFBhZ2UiLCJpc01heFNpemVkIiwibWF4U2l6ZSIsInJvdGF0ZSIsInBhZ2VMYWJlbCIsImZvcmNlRWxsaXBzZXMiLCJib3VuZGFyeUxpbmtOdW1iZXJzIiwicHJldmlvdXNQYWdlU2V0Iiwic2Vjb25kUGFnZUxpbmsiLCJmaXJzdFBhZ2VMaW5rIiwibmV4dFBhZ2VTZXQiLCJzZWNvbmRUb0xhc3RQYWdlTGluayIsImxhc3RQYWdlTGluayIsIiRwYWdlIiwiYm91bmRhcnlMaW5rcyIsImRpcmVjdGlvbkxpbmtzIiwiZmlyc3RUZXh0IiwibGFzdFRleHQiLCJkZWZhdWx0T3B0aW9ucyIsInBsYWNlbWVudENsYXNzUHJlZml4IiwicG9wdXBEZWxheSIsInBvcHVwQ2xvc2VEZWxheSIsInVzZUNvbnRlbnRFeHAiLCJ0cmlnZ2VyTWFwIiwiY2xpY2siLCJvdXRzaWRlQ2xpY2siLCJub25lIiwiZ2xvYmFsT3B0aW9ucyIsInNldFRyaWdnZXJzIiwidHJpZ2dlcnMiLCJrZXlwcmVzc0xpc3RlbmVyIiwib3BlbmVkVG9vbHRpcHMiLCJ0dFR5cGUiLCJkZWZhdWx0VHJpZ2dlclNob3ciLCJnZXRUcmlnZ2VycyIsInNob3ciLCJoaWRlIiwic3RhcnRTeW0iLCJlbmRTeW0iLCJ0RWxlbSIsInRvb2x0aXBMaW5rZXIiLCJ0b29sdGlwQ3RybCIsInRvZ2dsZVRvb2x0aXBCaW5kIiwidHRTY29wZSIsImhpZGVUb29sdGlwQmluZCIsInNob3dUb29sdGlwQmluZCIsImhhc0VuYWJsZUV4cCIsImNhbmNlbEhpZGUiLCJwcmVwYXJlVG9vbHRpcCIsInNob3dUaW1lb3V0IiwiY2FuY2VsU2hvdyIsImhpZGVUaW1lb3V0IiwiY3JlYXRlVG9vbHRpcCIsImFzc2lnbklzT3BlbiIsInBvc2l0aW9uVG9vbHRpcCIsInBvc2l0aW9uVGltZW91dCIsInRyYW5zaXRpb25UaW1lb3V0IiwicmVtb3ZlVG9vbHRpcCIsInRvb2x0aXAiLCJ0b29sdGlwTGlua2VkU2NvcGUiLCJwcmVwT2JzZXJ2ZXJzIiwidW5yZWdpc3Rlck9ic2VydmVycyIsImFkanVzdG1lbnRUaW1lb3V0IiwiY29udGVudFBhcnNlIiwicG9wdXBDbGFzcyIsImxhc3RQbGFjZW1lbnQiLCJjbG9zZURlbGF5IiwiaXNPcGVuUGFyc2UiLCJvYnNlcnZlcnMiLCJyZXBvc2l0aW9uU2NoZWR1bGVkIiwiYm9keUhpZGVUb29sdGlwQmluZCIsImhpZGVPbkVzY2FwZUtleSIsInR0UG9zaXRpb24iLCJlbGVtZW50UG9zIiwiYWRqdXN0bWVudCIsIm9yaWdTY29wZSIsImNvbnRlbnRFeHAiLCJ1bnJlZ2lzdGVyVHJpZ2dlcnMiLCJzaG93VHJpZ2dlcnMiLCJoaWRlVHJpZ2dlcnMiLCJhcHBlbmRUb0JvZHlWYWwiLCJhcHBlbmRLZXkiLCJ0b29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlU2NvcGUiLCJwYXJzZUFzUmVzb3VyY2VVcmwiLCJ1aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlIiwidG9vbHRpcEFuaW1hdGlvbkNsYXNzIiwiJHVpYlRvb2x0aXAiLCJvcmlnaW5TY29wZSIsInVpYlRpdGxlIiwicHJvZ3Jlc3NDb25maWciLCJnZXRNYXhPckRlZmF1bHQiLCJtYXhQYXJhbSIsImJhcnMiLCJhZGRCYXIiLCJiYXIiLCJyZWNhbGN1bGF0ZVBlcmNlbnRhZ2UiLCJ0b3RhbFBlcmNlbnRhZ2UiLCJ0b3RhbCIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicmVtb3ZlQmFyIiwicHJvZ3Jlc3NDdHJsIiwic3RhdGVPbiIsInN0YXRlT2ZmIiwiZW5hYmxlUmVzZXQiLCJ0aXRsZXMiLCJyYXRpbmdDb25maWciLCJ0bXBUaXRsZXMiLCJyYXRpbmdTdGF0ZXMiLCJidWlsZFRlbXBsYXRlT2JqZWN0cyIsImdldFRpdGxlIiwicmF0ZSIsInJlYWRvbmx5IiwibmV3Vmlld1ZhbHVlIiwib25Ib3ZlciIsIm9uTGVhdmUiLCJvbktleWRvd24iLCJyYXRpbmdDdHJsIiwiZmluZFRhYkluZGV4IiwidGFicyIsIm9sZEluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzU2VsZWN0ZWQiLCJ0YWIiLCJvbkRlc2VsZWN0IiwiJHNlbGVjdGVkSW5kZXgiLCJvblNlbGVjdCIsImFkZFRhYiIsIm5ld0FjdGl2ZUluZGV4IiwicmVtb3ZlVGFiIiwibmV3QWN0aXZlVGFiSW5kZXgiLCJqdXN0aWZpZWQiLCJ0YWJzZXRDdHJsIiwiZGlzYWJsZSIsIiR0cmFuc2NsdWRlRm4iLCJpc1RhYkhlYWRpbmciLCJ1aWJUYWJDb250ZW50VHJhbnNjbHVkZSIsImhlYWRpbmdFbGVtZW50IiwiaG91clN0ZXAiLCJtaW51dGVTdGVwIiwic2Vjb25kU3RlcCIsInNob3dNZXJpZGlhbiIsInNob3dTZWNvbmRzIiwibWVyaWRpYW5zIiwicmVhZG9ubHlJbnB1dCIsIm1vdXNld2hlZWwiLCJhcnJvd2tleXMiLCJzaG93U3Bpbm5lcnMiLCJ0aW1lcGlja2VyQ29uZmlnIiwiZ2V0SG91cnNGcm9tVGVtcGxhdGUiLCJtZXJpZGlhbiIsImdldE1pbnV0ZXNGcm9tVGVtcGxhdGUiLCJnZXRTZWNvbmRzRnJvbVRlbXBsYXRlIiwicGFkIiwibm9QYWQiLCJrZXlib2FyZENoYW5nZSIsIm1ha2VWYWxpZCIsInVwZGF0ZVRlbXBsYXRlIiwiaG91cnNNb2RlbEN0cmwiLCJtaW51dGVzTW9kZWxDdHJsIiwic2Vjb25kc01vZGVsQ3RybCIsImludmFsaWRIb3VycyIsImludmFsaWRNaW51dGVzIiwiaW52YWxpZFNlY29uZHMiLCJwYWRIb3VycyIsImFkZFNlY29uZHNUb1NlbGVjdGVkIiwiYWRkU2Vjb25kcyIsImFkZE1pbnV0ZXMiLCJuZXdEYXRlIiwibW9kZWxJc0VtcHR5IiwiaG91cnNJbnB1dEVsIiwibWludXRlc0lucHV0RWwiLCJzZWNvbmRzSW5wdXRFbCIsInNldHVwTW91c2V3aGVlbEV2ZW50cyIsInNldHVwQXJyb3drZXlFdmVudHMiLCJzZXR1cElucHV0RXZlbnRzIiwibm9JbmNyZW1lbnRIb3VycyIsImluY3JlbWVudGVkU2VsZWN0ZWQiLCJub0RlY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50ZWRTZWxlY3RlZCIsIm5vSW5jcmVtZW50TWludXRlcyIsIm5vRGVjcmVtZW50TWludXRlcyIsIm5vSW5jcmVtZW50U2Vjb25kcyIsIm5vRGVjcmVtZW50U2Vjb25kcyIsIm5vVG9nZ2xlTWVyaWRpYW4iLCJpc1Njcm9sbGluZ1VwIiwib3JpZ2luYWxFdmVudCIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRlbHRhWSIsImRldGFpbCIsImluY3JlbWVudEhvdXJzIiwiZGVjcmVtZW50SG91cnMiLCJpbmNyZW1lbnRNaW51dGVzIiwiZGVjcmVtZW50TWludXRlcyIsImluY3JlbWVudFNlY29uZHMiLCJkZWNyZW1lbnRTZWNvbmRzIiwidXBkYXRlSG91cnMiLCJ1cGRhdGVNaW51dGVzIiwidXBkYXRlU2Vjb25kcyIsImludmFsaWRhdGUiLCJzZXRTZWNvbmRzIiwidG9nZ2xlTWVyaWRpYW4iLCJ1aWJUaW1lcGlja2VyQ29uZmlnIiwidGltZXBpY2tlckN0cmwiLCJpdGVtTmFtZSIsInZpZXdNYXBwZXIiLCJtb2RlbE1hcHBlciIsIm9yaWdpbmFsU2NvcGUiLCIkJGRlYm91bmNlIiwidHlwZWFoZWFkUGFyc2VyIiwiZmlyZVJlY2FsY3VsYXRpbmciLCJtb3ZlSW5Qcm9ncmVzcyIsImRlYm91bmNlZFJlY2FsY3VsYXRlIiwicmVjYWxjdWxhdGVQb3NpdGlvbiIsIkhPVF9LRVlTIiwibWluTGVuZ3RoIiwidHlwZWFoZWFkTWluTGVuZ3RoIiwid2FpdFRpbWUiLCJ0eXBlYWhlYWRXYWl0TXMiLCJpc0VkaXRhYmxlIiwidHlwZWFoZWFkRWRpdGFibGUiLCJoYXNGb2N1cyIsImlzTG9hZGluZ1NldHRlciIsInR5cGVhaGVhZExvYWRpbmciLCJpc1NlbGVjdEV2ZW50IiwidHlwZWFoZWFkU2hvdWxkU2VsZWN0IiwidmFscyIsIm9uU2VsZWN0Q2FsbGJhY2siLCJ0eXBlYWhlYWRPblNlbGVjdCIsImlzU2VsZWN0T25CbHVyIiwidHlwZWFoZWFkU2VsZWN0T25CbHVyIiwiaXNOb1Jlc3VsdHNTZXR0ZXIiLCJ0eXBlYWhlYWROb1Jlc3VsdHMiLCJpbnB1dEZvcm1hdHRlciIsInR5cGVhaGVhZElucHV0Rm9ybWF0dGVyIiwidHlwZWFoZWFkQXBwZW5kVG9Cb2R5IiwidHlwZWFoZWFkQXBwZW5kVG8iLCJmb2N1c0ZpcnN0IiwidHlwZWFoZWFkRm9jdXNGaXJzdCIsInNlbGVjdE9uRXhhY3QiLCJ0eXBlYWhlYWRTZWxlY3RPbkV4YWN0IiwiaXNPcGVuU2V0dGVyIiwidHlwZWFoZWFkSXNPcGVuIiwic2hvd0hpbnQiLCJ0eXBlYWhlYWRTaG93SGludCIsInBhcnNlZE1vZGVsIiwiJHNldE1vZGVsVmFsdWUiLCJwYXJzZXJSZXN1bHQiLCJ1aWJUeXBlYWhlYWQiLCJvZmZEZXN0cm95IiwicG9wdXBJZCIsImFyaWEtYXV0b2NvbXBsZXRlIiwiYXJpYS1vd25zIiwiaW5wdXRzQ29udGFpbmVyIiwiaGludElucHV0RWxlbSIsImJvcmRlci1jb2xvciIsImJveC1zaGFkb3ciLCJvcGFjaXR5IiwiYmFja2dyb3VuZCIsImNvbG9yIiwidmVydGljYWwtYWxpZ24iLCJiYWNrZ3JvdW5kLWNvbG9yIiwicG9wVXBFbCIsIm1vdmUtaW4tcHJvZ3Jlc3MiLCJhc3NpZ24taXMtb3BlbiIsInR5cGVhaGVhZFRlbXBsYXRlVXJsIiwidHlwZWFoZWFkUG9wdXBUZW1wbGF0ZVVybCIsInJlc2V0SGludCIsInJlc2V0TWF0Y2hlcyIsImFjdGl2ZUlkeCIsImdldE1hdGNoSWQiLCJpbnB1dElzRXhhY3RNYXRjaCIsImlucHV0VmFsdWUiLCJnZXRNYXRjaGVzQXN5bmMiLCJvbkN1cnJlbnRSZXF1ZXN0IiwiZGVib3VuY2VVcGRhdGUiLCJmaXJzdExhYmVsIiwic2NoZWR1bGVTZWFyY2hXaXRoVGltZW91dCIsImNhbmNlbFByZXZpb3VzVGltZW91dCIsIiRpdGVtIiwiJG1vZGVsIiwiJGxhYmVsIiwidHlwZWFoZWFkRm9jdXNPblNlbGVjdCIsInNob3VsZFNlbGVjdCIsIm9mZnNldFRvcCIsImVkaXRhYmxlIiwiZGlzbWlzc0NsaWNrSGFuZGxlciIsIl9tb2RlbEN0cmwiLCJjYW5kaWRhdGVWaWV3VmFsdWUiLCJlbXB0eVZpZXdWYWx1ZSIsInBvcHVwVGVtcGxhdGVVcmwiLCJpc0Ryb3Bkb3duT3BlbiIsIm1hdGNoSWR4Iiwic2VsZWN0QWN0aXZlIiwic2VsZWN0TWF0Y2giLCJ0cGxFbCIsImVzY2FwZVJlZ2V4cCIsInF1ZXJ5VG9Fc2NhcGUiLCJjb250YWluc0h0bWwiLCJtYXRjaEl0ZW0iLCJpc1Nhbml0aXplUHJlc2VudCIsInRydXN0QXNIdG1sIiwiJCR1aWJDYXJvdXNlbENzcyIsIiQkdWliRGF0ZXBpY2tlckNzcyIsIiQkdWliUG9zaXRpb25Dc3MiLCIkJHVpYkRhdGVwaWNrZXJwb3B1cENzcyIsIiQkdWliVG9vbHRpcENzcyIsIiQkdWliVGltZXBpY2tlckNzcyIsIiQkdWliVHlwZWFoZWFkQ3NzIiwicGFja2FnZVN0eWxlcyIsInN0eWxlcyIsInBlbmRDbGFzc2VzIiwiZml4IiwiaXNQcmVmaXgiLCJyZW1vdmVGcm9tQXJyYXkiLCJzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQiLCIkJGFkZENsYXNzIiwiJCRyZW1vdmVDbGFzcyIsImFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkiLCJwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyIsIiQkZG9tT3BlcmF0aW9uRmlyZWQiLCJhcHBseUFuaW1hdGlvblN0eWxlcyIsImFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyIsImFwcGx5QW5pbWF0aW9uVG9TdHlsZXMiLCJtZXJnZUFuaW1hdGlvbkRldGFpbHMiLCJvbGRBbmltYXRpb24iLCJuZXdBbmltYXRpb24iLCJuZXdPcHRpb25zIiwicmVzb2x2ZUVsZW1lbnRDbGFzc2VzIiwicHJlcGFyYXRpb25DbGFzc2VzIiwiY29uY2F0V2l0aFNwYWNlIiwicmVhbERvbU9wZXJhdGlvbiIsInNwbGl0Q2xhc3Nlc1RvTG9va3VwIiwiZmxhZ3MiLCJhbGxvdyIsIlJFTU9WRV9DTEFTU19TVUZGSVgiLCJBRERfQ0xBU1NfU1VGRklYIiwiZ2V0RG9tTm9kZSIsImFwcGx5R2VuZXJhdGVkUHJlcGFyYXRpb25DbGFzc2VzIiwiRVZFTlRfQ0xBU1NfUFJFRklYIiwiY2xlYXJHZW5lcmF0ZWRDbGFzc2VzIiwiYmxvY2tUcmFuc2l0aW9ucyIsImR1cmF0aW9uIiwiYXBwbHlJbmxpbmVTdHlsZSIsIlRSQU5TSVRJT05fREVMQVlfUFJPUCIsImJsb2NrS2V5ZnJhbWVBbmltYXRpb25zIiwiYXBwbHlCbG9jayIsIkFOSU1BVElPTl9QUk9QIiwiQU5JTUFUSU9OX1BMQVlTVEFURV9LRVkiLCJzdHlsZVR1cGxlIiwiZ2V0Q3NzS2V5ZnJhbWVEdXJhdGlvblN0eWxlIiwiQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AiLCJnZXRDc3NEZWxheVN0eWxlIiwiaXNLZXlmcmFtZUFuaW1hdGlvbiIsIkFOSU1BVElPTl9ERUxBWV9QUk9QIiwiY29tcHV0ZUNzc1N0eWxlcyIsImRldGVjdGVkU3R5bGVzIiwiZm9ybWFsU3R5bGVOYW1lIiwiYWN0dWFsU3R5bGVOYW1lIiwicGFyc2VNYXhUaW1lIiwibWF4VmFsdWUiLCJ0cnV0aHlUaW1pbmdWYWx1ZSIsImdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlIiwiYXBwbHlPbmx5RHVyYXRpb24iLCJUUkFOU0lUSU9OX1BST1AiLCJEVVJBVElPTl9LRVkiLCJjcmVhdGVMb2NhbENhY2hlTG9va3VwIiwiZmx1c2giLCJyZWdpc3RlclJlc3RvcmFibGVTdHlsZXMiLCJiYWNrdXAiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiVFJBTlNJVElPTkVORF9FVkVOVCIsIkFOSU1BVElPTkVORF9FVkVOVCIsIk5HX0FOSU1BVEVfQ0xBU1NOQU1FIiwiTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBIiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsIlRJTUlOR19LRVkiLCJUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AiLCIkJHJBRlNjaGVkdWxlckZhY3RvcnkiLCJzY2hlZHVsZXIiLCJ0YXNrcyIsImNhbmNlbEZuIiwid2FpdFVudGlsUXVpZXQiLCIkJEFuaW1hdGVDaGlsZHJlbkRpcmVjdGl2ZSIsInNldERhdGEiLCJuZ0FuaW1hdGVDaGlsZHJlbiIsIkFOSU1BVEVfVElNRVJfS0VZIiwiT05FX1NFQ09ORCIsIkVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMiLCJDTE9TSU5HX1RJTUVfQlVGRkVSIiwiREVURUNUX0NTU19QUk9QRVJUSUVTIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvblByb3BlcnR5IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiREVURUNUX1NUQUdHRVJfQ1NTX1BST1BFUlRJRVMiLCIkQW5pbWF0ZUNzc1Byb3ZpZGVyIiwiJGFuaW1hdGVQcm92aWRlciIsImdjc0xvb2t1cCIsImdjc1N0YWdnZXJMb29rdXAiLCIkJHJBRlNjaGVkdWxlciIsImdjc0hhc2hGbiIsImV4dHJhQ2xhc3NlcyIsIktFWSIsInBhcmVudENvdW50ZXIiLCJjb21wdXRlQ2FjaGVkQ3NzU3R5bGVzIiwidGltaW5ncyIsImNvbXB1dGVDYWNoZWRDc3NTdGFnZ2VyU3R5bGVzIiwic3RhZ2dlciIsInN0YWdnZXJDbGFzc05hbWUiLCJyYWZXYWl0UXVldWUiLCJwYWdlV2lkdGgiLCJjb21wdXRlVGltaW5ncyIsImFEIiwidEQiLCJtYXhEZWxheSIsIm1heER1cmF0aW9uIiwiYXBwbHlBbmltYXRpb25DbGFzc2VzIiwiZW5kRm4iLCJyZWplY3RlZCIsImFuaW1hdGlvbkNsb3NlZCIsImFuaW1hdGlvbkNvbXBsZXRlZCIsImFuaW1hdGlvblBhdXNlZCIsIiQkc2tpcFByZXBhcmF0aW9uQ2xhc3NlcyIsInRlbXBvcmFyeVN0eWxlcyIsInJlc3RvcmVTdHlsZXMiLCJzZXRQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5Iiwib25Eb25lIiwib25BbmltYXRpb25Qcm9ncmVzcyIsImFuaW1hdGlvblRpbWVyRGF0YSIsImFwcGx5QmxvY2tpbmciLCJibG9ja1RyYW5zaXRpb24iLCJibG9ja0tleWZyYW1lQW5pbWF0aW9uIiwiY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IiLCIkJHdpbGxBbmltYXRlIiwidGltZVN0YW1wIiwiJG1hbnVhbFRpbWVTdGFtcCIsIm5vdyIsImVsYXBzZWRUaW1lIiwic3RhcnRUaW1lIiwibWF4RGVsYXlUaW1lIiwidHJpZ2dlckFuaW1hdGlvblN0YXJ0IiwicmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMiLCJmdWxsQ2xhc3NOYW1lIiwicmVsYXRpdmVEZWxheSIsImhhc1RyYW5zaXRpb25zIiwiaGFzQW5pbWF0aW9ucyIsImFwcGx5QW5pbWF0aW9uRGVsYXkiLCJkZWxheVN0eWxlIiwibWF4RHVyYXRpb25UaW1lIiwiZWFzZVByb3AiLCJlYXNlVmFsIiwidGltZXJUaW1lIiwiZW5kVGltZSIsImFuaW1hdGlvbnNEYXRhIiwic2V0dXBGYWxsYmFja1RpbWVyIiwiY3VycmVudFRpbWVyRGF0YSIsImV4cGVjdGVkRW5kVGltZSIsIm9uQW5pbWF0aW9uRXhwaXJlZCIsInBsYXlQYXVzZSIsInBsYXlBbmltYXRpb24iLCJtYXhTdGFnZ2VyIiwiaXRlbUluZGV4IiwicnVubmVySG9zdCIsImlzU3RydWN0dXJhbCIsInN0cnVjdHVyYWwiLCJzdHJ1Y3R1cmFsQ2xhc3NOYW1lIiwiYWRkUmVtb3ZlQ2xhc3NOYW1lIiwiYXBwbHlDbGFzc2VzRWFybHkiLCJoYXNUb1N0eWxlcyIsImtleWZyYW1lU3R5bGUiLCJzdGFnZ2VyVmFsIiwidHJhbnNpdGlvblN0eWxlIiwiZHVyYXRpb25TdHlsZSIsInN0YWdnZXJJbmRleCIsImlzRmlyc3QiLCJza2lwQmxvY2tpbmciLCJoYXNUcmFuc2l0aW9uQWxsIiwiYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24iLCJhcHBseUFuaW1hdGlvbkR1cmF0aW9uIiwiYXBwbHlUcmFuc2l0aW9uRGVsYXkiLCIkJEFuaW1hdGVDc3NEcml2ZXJQcm92aWRlciIsIiQkYW5pbWF0aW9uUHJvdmlkZXIiLCJpc0RvY3VtZW50RnJhZ21lbnQiLCJkcml2ZXJzIiwiTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUiLCJOR19PVVRfQU5DSE9SX0NMQVNTX05BTUUiLCJmaWx0ZXJDc3NDbGFzc2VzIiwiZ2V0VW5pcXVlVmFsdWVzIiwicHJlcGFyZUFuY2hvcmVkQW5pbWF0aW9uIiwib3V0QW5jaG9yIiwiaW5BbmNob3IiLCJjYWxjdWxhdGVBbmNob3JTdHlsZXMiLCJjb29yZHMiLCJib2R5Tm9kZSIsImdldENsYXNzVmFsIiwicHJlcGFyZUluQW5pbWF0aW9uIiwiZW5kaW5nQ2xhc3NlcyIsInN0YXJ0aW5nQ2xhc3NlcyIsImFuaW1hdG9yIiwiTkdfSU5fQU5DSE9SX0NMQVNTX05BTUUiLCJyb290Qm9keUVsZW1lbnQiLCJhbmltYXRvckluIiwiYW5pbWF0b3JPdXQiLCJzdGFydGluZ0FuaW1hdG9yIiwiY3VycmVudEFuaW1hdGlvbiIsInByZXBhcmVGcm9tVG9BbmNob3JBbmltYXRpb24iLCJhbmNob3JzIiwiZnJvbUFuaW1hdGlvbiIsInByZXBhcmVSZWd1bGFyQW5pbWF0aW9uIiwidG9BbmltYXRpb24iLCJhbmNob3JBbmltYXRpb25zIiwib3V0RWxlbWVudCIsImluRWxlbWVudCIsImFuaW1hdGlvblJ1bm5lcnMiLCJhbmltYXRpb25EZXRhaWxzIiwicm9vdE5vZGUiLCIkJEFuaW1hdGVKc1Byb3ZpZGVyIiwibG9va3VwQW5pbWF0aW9ucyIsImZsYWdNYXAiLCJhbmltYXRpb25GYWN0b3J5IiwiYXBwbHlPcHRpb25zIiwiZXhlY3V0ZUFuaW1hdGlvbkZuIiwiY2xhc3Nlc1RvQWRkIiwiY2xhc3Nlc1RvUmVtb3ZlIiwiZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyIsImZuTmFtZSIsIm9wZXJhdGlvbnMiLCJhbmkiLCJlbmRQcm9ncmVzc0NiIiwib25BbmltYXRpb25Db21wbGV0ZSIsInBhY2thZ2VBbmltYXRpb25zIiwiYW5pbWF0ZUZuIiwiYmVmb3JlIiwiYWZ0ZXJGbiIsImJlZm9yZUZuIiwib25Db21wbGV0ZSIsImVuZEFuaW1hdGlvbnMiLCJjYW5jZWxsZWQiLCJjbG9zZUFjdGl2ZUFuaW1hdGlvbnMiLCIkJEFuaW1hdGVKc0RyaXZlclByb3ZpZGVyIiwicHJlcGFyZUFuaW1hdGlvbiIsImVuZEZuRmFjdG9yeSIsIk5HX0FOSU1BVEVfQVRUUl9OQU1FIiwiTkdfQU5JTUFURV9QSU5fREFUQSIsIiQkQW5pbWF0ZVF1ZXVlUHJvdmlkZXIiLCJtYWtlVHJ1dGh5Q3NzQ2xhc3NNYXAiLCJPTkVfU1BBQ0UiLCJoYXNNYXRjaGluZ0NsYXNzZXMiLCJjdXJyZW50Q2xhc3NTdHJpbmciLCJjdXJyZW50Q2xhc3NNYXAiLCJpc0FsbG93ZWQiLCJydWxlVHlwZSIsInByZXZpb3VzQW5pbWF0aW9uIiwiaGFzQW5pbWF0aW9uQ2xhc3NlcyIsImFuZCIsIlBSRV9ESUdFU1RfU1RBVEUiLCJSVU5OSU5HX1NUQVRFIiwibkEiLCJuUiIsImNBIiwiY1IiLCIkJGFuaW1hdGlvbiIsInBvc3REaWdlc3RUYXNrRmFjdG9yeSIsInBvc3REaWdlc3RDYWxsZWQiLCJub3JtYWxpemVBbmltYXRpb25EZXRhaWxzIiwiZmluZENhbGxiYWNrcyIsInRhcmdldFBhcmVudE5vZGUiLCJ0YXJnZXROb2RlIiwiY2FsbGJhY2tSZWdpc3RyeSIsImZpbHRlckZyb21SZWdpc3RyeSIsIm1hdGNoQ29udGFpbmVyIiwibWF0Y2hDYWxsYmFjayIsImNvbnRhaW5lck5vZGUiLCJjbGVhbnVwRXZlbnRMaXN0ZW5lcnMiLCJxdWV1ZUFuaW1hdGlvbiIsIm9yaWdpbmFsRWxlbWVudCIsIm5vdGlmeVByb2dyZXNzIiwicnVuSW5OZXh0UG9zdERpZ2VzdE9yTm93IiwiaXNBbmltYXRhYmxlQ2xhc3NOYW1lIiwiZG9jdW1lbnRIaWRkZW4iLCJza2lwQW5pbWF0aW9ucyIsImFuaW1hdGlvbnNFbmFibGVkIiwiZGlzYWJsZWRFbGVtZW50c0xvb2t1cCIsImV4aXN0aW5nQW5pbWF0aW9uIiwiYWN0aXZlQW5pbWF0aW9uc0xvb2t1cCIsImhhc0V4aXN0aW5nQW5pbWF0aW9uIiwiYXJlQW5pbWF0aW9uc0FsbG93ZWQiLCJjbG9zZUNoaWxkQW5pbWF0aW9ucyIsImlzVmFsaWRBbmltYXRpb24iLCJjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZSIsIm1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUiLCJhbmltYXRpb25DYW5jZWxsZWQiLCJyZWFsUnVubmVyIiwiYW5pbWF0ZUNoaWxkcmVuIiwiYm9keU5vZGVEZXRlY3RlZCIsInJvb3ROb2RlRGV0ZWN0ZWQiLCJwYXJlbnRBbmltYXRpb25EZXRlY3RlZCIsImVsZW1lbnREaXNhYmxlZCIsInBhcmVudEhvc3QiLCJkZXRhaWxzIiwicGFyZW50Tm9kZURpc2FibGVkIiwiZGVyZWdpc3RlcldhdGNoIiwiaXNFbXB0eSIsImNvbnRhaW5lciIsImV2ZW50VHlwZSIsImFyZ0NvdW50IiwiJCRBbmltYXRpb25Qcm92aWRlciIsInNldFJ1bm5lciIsIlJVTk5FUl9TVE9SQUdFX0tFWSIsInJlbW92ZVJ1bm5lciIsImdldFJ1bm5lciIsIk5HX0FOSU1BVEVfUkVGX0FUVFIiLCJzb3J0QW5pbWF0aW9ucyIsInByb2Nlc3NOb2RlIiwicHJvY2Vzc2VkIiwiZWxlbWVudE5vZGUiLCJsb29rdXAiLCJwYXJlbnRFbnRyeSIsInRyZWUiLCJyZW1haW5pbmdMZXZlbEVudHJpZXMiLCJuZXh0TGV2ZWxFbnRyaWVzIiwicm93IiwiY2hpbGRFbnRyeSIsImFuaW1hdGlvblF1ZXVlIiwiZ2V0QW5jaG9yTm9kZXMiLCJTRUxFQ1RPUiIsImdyb3VwQW5pbWF0aW9ucyIsInByZXBhcmVkQW5pbWF0aW9ucyIsInJlZkxvb2t1cCIsImVudGVyT3JNb3ZlIiwiYW5jaG9yTm9kZXMiLCJhbmltYXRpb25JRCIsInVzZWRJbmRpY2VzTG9va3VwIiwiYW5jaG9yR3JvdXBzIiwiaW5kZXhLZXkiLCJsb29rdXBLZXkiLCJiZWZvcmVTdGFydCIsImNzc0NsYXNzZXNJbnRlcnNlY3Rpb24iLCJvdXQiLCJpbiIsImFhIiwiaW52b2tlRmlyc3REcml2ZXIiLCJkcml2ZXJOYW1lIiwiZHJpdmVyIiwicHJlcGFyZUNsYXNzTmFtZSIsInVwZGF0ZUFuaW1hdGlvblJ1bm5lcnMiLCJuZXdSdW5uZXIiLCJoYW5kbGVEZXN0cm95ZWRFbGVtZW50IiwiZ3JvdXBlZEFuaW1hdGlvbnMiLCJ0b0JlU29ydGVkQW5pbWF0aW9ucyIsImFuaW1hdGlvbkVudHJ5Iiwic3RhcnRBbmltYXRpb25GbiIsImNsb3NlRm4iLCJvcGVyYXRpb24iLCJhbmltYXRpb25SdW5uZXIiLCJuZ0FuaW1hdGVTd2FwRGlyZWN0aXZlIiwicHJldmlvdXNTY29wZSIsIm5nQW5pbWF0ZVN3YXAiLCJuZ01lc3NhZ2VEaXJlY3RpdmVGYWN0b3J5IiwibmdNZXNzYWdlc0N0cmwiLCJyZWNvcmRzIiwiY29tbWVudE5vZGUiLCJzdGF0aWNFeHAiLCJuZ01lc3NhZ2UiLCJkeW5hbWljRXhwIiwibmdNZXNzYWdlRXhwIiwiYXNzaWduUmVjb3JkcyIsInJlUmVuZGVyIiwibWVzc2FnZUN0cmwiLCJhdHRhY2giLCIkJGF0dGFjaElkIiwiZ2V0QXR0YWNoSWQiLCJpc0F0dHJUcnV0aHkiLCJ0cnV0aHkiLCJmaW5kUHJldmlvdXNNZXNzYWdlIiwicHJldk5vZGUiLCJwYXJlbnRMb29rdXAiLCJwcmV2S2V5IiwiJCRuZ01lc3NhZ2VOb2RlIiwibWVzc2FnZXMiLCJwcmV2aW91c1NpYmxpbmciLCJpbnNlcnRNZXNzYWdlTm9kZSIsIm1lc3NhZ2VOb2RlIiwicmVtb3ZlTWVzc2FnZU5vZGUiLCJsYXRlc3RLZXkiLCJuZXh0QXR0YWNoSWQiLCJyZW5kZXJMYXRlciIsImNhY2hlZENvbGxlY3Rpb24iLCJuZ01lc3NhZ2VzTXVsdGlwbGUiLCJ1bm1hdGNoZWRNZXNzYWdlcyIsIm1hdGNoZWRLZXlzIiwibWVzc2FnZUl0ZW0iLCJtZXNzYWdlRm91bmQiLCJ0b3RhbE1lc3NhZ2VzIiwibWVzc2FnZVVzZWQiLCJuZ01lc3NhZ2VzIiwibmV4dEtleSIsInJlcGxhY2VFbGVtZW50V2l0aE1hcmtlciIsIm1hcmtlciIsIm5nTWVzc2FnZXNJbmNsdWRlIiwic2V0UHVibGlzaGFibGVLZXkiXSwibWFwcGluZ3MiOiJBQTgvbURBLFFBQVNBLE1BQUtDLEVBQWVDLEdBQzNCRCxFQUFjRSxVQUFZRCxFQUFVLFlBQ3BDRCxFQUFjRyxTQUFXRixFQUFVLFNBT3JDLFFBQVNHLFFBQU9DLEVBQWdCQyxFQUFvQkMsR0FDbERBLEVBQWtCQyxXQUFVLEdBRTVCSCxFQUFlSSxNQUFNLFFBQ25CQyxJQUFLLElBQ0xDLFlBQWEsOEJBQ1pGLE1BQU0sZUFDUEMsSUFBSyxVQUNMQyxZQUFhLDZCQUNiQyxXQUFZLG1DQUNYSCxNQUFNLGFBQ1BDLElBQUssY0FDTEMsWUFBYSwyQkFDYkMsV0FBWSwrQkFDWEgsTUFBTSxjQUNQQyxJQUFLLGNBQ0xDLFlBQWEsNEJBQ2JDLFdBQVksaUNB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Q2hGdmQsZUFBZXVkLFNBQVcsUUFBUyxPQUFRLGVBQWdCLFVBb0IzRHBOLFFBQVF2TyxPQUFPLFNBQVN0SCxXQUFXLGlCQUFrQjZGLGdCQUFnQjdGLFdBQVcsZ0JBQWlCOEYsZUFFakdELGVBQWVvZCxTQUFXLFFBTzFCbmQsY0FBY21kLFNBQVcsT0FBUSxlQUFnQixTQUFVLFNBZ0IzRHBOLFFBQVF2TyxPQUFPLFNBQVNpUyxVQUFVLFNBQVV2VCxRQXNCNUM2UCxRQUFRdk8sT0FBTyxTQUFTdVEsUUFBUSxVQUFXblQsU0FFM0NBLFFBQVF1ZSxTQUFXLFlBQWEsV0FRaENwTixRQUFRdk8sT0FBTyxTQUFTdVEsUUFBUSxRQUFTbFUsT0FFekNBLE1BQU1zZixTQUFXLFlBQWEsV0FROUJwTixRQUFRdk8sT0FBTyxTQUFTdVEsUUFBUSxPQUFRNVQsTUFFeENBLEtBQUtnZixTQUFXLFlBQWEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjYuNFxuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24od2luZG93KSB7J3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgdXRpbGl0eSBmb3IgcHJvZHVjaW5nIHJpY2ggRXJyb3IgbWVzc2FnZXMgd2l0aGluXG4gKiBBbmd1bGFyLiBJdCBjYW4gYmUgY2FsbGVkIGFzIGZvbGxvd3M6XG4gKlxuICogdmFyIGV4YW1wbGVNaW5FcnIgPSBtaW5FcnIoJ2V4YW1wbGUnKTtcbiAqIHRocm93IGV4YW1wbGVNaW5FcnIoJ29uZScsICdUaGlzIHswfSBpcyB7MX0nLCBmb28sIGJhcik7XG4gKlxuICogVGhlIGFib3ZlIGNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgbWluRXJyIGluIHRoZSBleGFtcGxlIG5hbWVzcGFjZS4gVGhlXG4gKiByZXN1bHRpbmcgZXJyb3Igd2lsbCBoYXZlIGEgbmFtZXNwYWNlZCBlcnJvciBjb2RlIG9mIGV4YW1wbGUub25lLiAgVGhlXG4gKiByZXN1bHRpbmcgZXJyb3Igd2lsbCByZXBsYWNlIHswfSB3aXRoIHRoZSB2YWx1ZSBvZiBmb28sIGFuZCB7MX0gd2l0aCB0aGVcbiAqIHZhbHVlIG9mIGJhci4gVGhlIG9iamVjdCBpcyBub3QgcmVzdHJpY3RlZCBpbiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpdCBjYW5cbiAqIHRha2UuXG4gKlxuICogSWYgZmV3ZXIgYXJndW1lbnRzIGFyZSBzcGVjaWZpZWQgdGhhbiBuZWNlc3NhcnkgZm9yIGludGVycG9sYXRpb24sIHRoZSBleHRyYVxuICogaW50ZXJwb2xhdGlvbiBtYXJrZXJzIHdpbGwgYmUgcHJlc2VydmVkIGluIHRoZSBmaW5hbCBzdHJpbmcuXG4gKlxuICogU2luY2UgZGF0YSB3aWxsIGJlIHBhcnNlZCBzdGF0aWNhbGx5IGR1cmluZyBhIGJ1aWxkIHN0ZXAsIHNvbWUgcmVzdHJpY3Rpb25zXG4gKiBhcmUgYXBwbGllZCB3aXRoIHJlc3BlY3QgdG8gaG93IG1pbkVyciBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYW5kIGNhbGxlZC5cbiAqIEluc3RhbmNlcyBzaG91bGQgaGF2ZSBuYW1lcyBvZiB0aGUgZm9ybSBuYW1lc3BhY2VNaW5FcnIgZm9yIGEgbWluRXJyIGNyZWF0ZWRcbiAqIHVzaW5nIG1pbkVycignbmFtZXNwYWNlJykgLiBFcnJvciBjb2RlcywgbmFtZXNwYWNlcyBhbmQgdGVtcGxhdGUgc3RyaW5nc1xuICogc2hvdWxkIGFsbCBiZSBzdGF0aWMgc3RyaW5ncywgbm90IHZhcmlhYmxlcyBvciBnZW5lcmFsIGV4cHJlc3Npb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGUgVGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBuZXcgbWluRXJyIGluc3RhbmNlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gRXJyb3JDb25zdHJ1Y3RvciBDdXN0b20gZXJyb3IgY29uc3RydWN0b3IgdG8gYmUgaW5zdGFudGlhdGVkIHdoZW4gcmV0dXJuaW5nXG4gKiAgIGVycm9yIGZyb20gcmV0dXJuZWQgZnVuY3Rpb24sIGZvciBjYXNlcyB3aGVuIGEgcGFydGljdWxhciB0eXBlIG9mIGVycm9yIGlzIHVzZWZ1bC5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb2RlOnN0cmluZywgdGVtcGxhdGU6c3RyaW5nLCAuLi50ZW1wbGF0ZUFyZ3MpOiBFcnJvcn0gbWluRXJyIGluc3RhbmNlXG4gKi9cblxuZnVuY3Rpb24gbWluRXJyKG1vZHVsZSwgRXJyb3JDb25zdHJ1Y3Rvcikge1xuICBFcnJvckNvbnN0cnVjdG9yID0gRXJyb3JDb25zdHJ1Y3RvciB8fCBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb2RlID0gYXJndW1lbnRzWzBdLFxuICAgICAgdGVtcGxhdGUgPSBhcmd1bWVudHNbMV0sXG4gICAgICBtZXNzYWdlID0gJ1snICsgKG1vZHVsZSA/IG1vZHVsZSArICc6JyA6ICcnKSArIGNvZGUgKyAnXSAnLFxuICAgICAgdGVtcGxhdGVBcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Z1N0cmluZyhhcmcsIG1pbkVyckNvbmZpZy5vYmplY3RNYXhEZXB0aCk7XG4gICAgICB9KSxcbiAgICAgIHBhcmFtUHJlZml4LCBpO1xuXG4gICAgbWVzc2FnZSArPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXGQrXFx9L2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpO1xuXG4gICAgICBpZiAoaW5kZXggPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZUFyZ3NbaW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBtZXNzYWdlICs9ICdcXG5odHRwOi8vZXJyb3JzLmFuZ3VsYXJqcy5vcmcvMS42LjQvJyArXG4gICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTtcblxuICAgIGZvciAoaSA9IDAsIHBhcmFtUHJlZml4ID0gJz8nOyBpIDwgdGVtcGxhdGVBcmdzLmxlbmd0aDsgaSsrLCBwYXJhbVByZWZpeCA9ICcmJykge1xuICAgICAgbWVzc2FnZSArPSBwYXJhbVByZWZpeCArICdwJyArIGkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodGVtcGxhdGVBcmdzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEVycm9yQ29uc3RydWN0b3IobWVzc2FnZSk7XG4gIH07XG59XG5cbi8qIFdlIG5lZWQgdG8gdGVsbCBFU0xpbnQgd2hhdCB2YXJpYWJsZXMgYXJlIGJlaW5nIGV4cG9ydGVkICovXG4vKiBleHBvcnRlZFxuICBhbmd1bGFyLFxuICBtc2llLFxuICBqcUxpdGUsXG4gIGpRdWVyeSxcbiAgc2xpY2UsXG4gIHNwbGljZSxcbiAgcHVzaCxcbiAgdG9TdHJpbmcsXG4gIG1pbkVyckNvbmZpZyxcbiAgZXJyb3JIYW5kbGluZ0NvbmZpZyxcbiAgaXNWYWxpZE9iamVjdE1heERlcHRoLFxuICBuZ01pbkVycixcbiAgYW5ndWxhck1vZHVsZSxcbiAgdWlkLFxuICBSRUdFWF9TVFJJTkdfUkVHRVhQLFxuICBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSxcblxuICBsb3dlcmNhc2UsXG4gIHVwcGVyY2FzZSxcbiAgbWFudWFsTG93ZXJjYXNlLFxuICBtYW51YWxVcHBlcmNhc2UsXG4gIG5vZGVOYW1lXyxcbiAgaXNBcnJheUxpa2UsXG4gIGZvckVhY2gsXG4gIGZvckVhY2hTb3J0ZWQsXG4gIHJldmVyc2VQYXJhbXMsXG4gIG5leHRVaWQsXG4gIHNldEhhc2hLZXksXG4gIGV4dGVuZCxcbiAgdG9JbnQsXG4gIGluaGVyaXQsXG4gIG1lcmdlLFxuICBub29wLFxuICBpZGVudGl0eSxcbiAgdmFsdWVGbixcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGVmaW5lZCxcbiAgaXNPYmplY3QsXG4gIGlzQmxhbmtPYmplY3QsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNOdW1iZXJOYU4sXG4gIGlzRGF0ZSxcbiAgaXNBcnJheSxcbiAgaXNGdW5jdGlvbixcbiAgaXNSZWdFeHAsXG4gIGlzV2luZG93LFxuICBpc1Njb3BlLFxuICBpc0ZpbGUsXG4gIGlzRm9ybURhdGEsXG4gIGlzQmxvYixcbiAgaXNCb29sZWFuLFxuICBpc1Byb21pc2VMaWtlLFxuICB0cmltLFxuICBlc2NhcGVGb3JSZWdleHAsXG4gIGlzRWxlbWVudCxcbiAgbWFrZU1hcCxcbiAgaW5jbHVkZXMsXG4gIGFycmF5UmVtb3ZlLFxuICBjb3B5LFxuICBzaW1wbGVDb21wYXJlLFxuICBlcXVhbHMsXG4gIGNzcCxcbiAganEsXG4gIGNvbmNhdCxcbiAgc2xpY2VBcmdzLFxuICBiaW5kLFxuICB0b0pzb25SZXBsYWNlcixcbiAgdG9Kc29uLFxuICBmcm9tSnNvbixcbiAgY29udmVydFRpbWV6b25lVG9Mb2NhbCxcbiAgdGltZXpvbmVUb09mZnNldCxcbiAgc3RhcnRpbmdUYWcsXG4gIHRyeURlY29kZVVSSUNvbXBvbmVudCxcbiAgcGFyc2VLZXlWYWx1ZSxcbiAgdG9LZXlWYWx1ZSxcbiAgZW5jb2RlVXJpU2VnbWVudCxcbiAgZW5jb2RlVXJpUXVlcnksXG4gIGFuZ3VsYXJJbml0LFxuICBib290c3RyYXAsXG4gIGdldFRlc3RhYmlsaXR5LFxuICBzbmFrZV9jYXNlLFxuICBiaW5kSlF1ZXJ5LFxuICBhc3NlcnRBcmcsXG4gIGFzc2VydEFyZ0ZuLFxuICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSxcbiAgZ2V0dGVyLFxuICBnZXRCbG9ja05vZGVzLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgY3JlYXRlTWFwLFxuICBzdHJpbmdpZnksXG5cbiAgTk9ERV9UWVBFX0VMRU1FTlQsXG4gIE5PREVfVFlQRV9BVFRSSUJVVEUsXG4gIE5PREVfVFlQRV9URVhULFxuICBOT0RFX1RZUEVfQ09NTUVOVCxcbiAgTk9ERV9UWVBFX0RPQ1VNRU5ULFxuICBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlRcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAaW5zdGFsbGF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nIChjb3JlIG1vZHVsZSlcbiAqIFRoZSBuZyBtb2R1bGUgaXMgbG9hZGVkIGJ5IGRlZmF1bHQgd2hlbiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gaXMgc3RhcnRlZC4gVGhlIG1vZHVsZSBpdHNlbGZcbiAqIGNvbnRhaW5zIHRoZSBlc3NlbnRpYWwgY29tcG9uZW50cyBmb3IgYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIHRvIGZ1bmN0aW9uLiBUaGUgdGFibGUgYmVsb3dcbiAqIGxpc3RzIGEgaGlnaCBsZXZlbCBicmVha2Rvd24gb2YgZWFjaCBvZiB0aGUgc2VydmljZXMvZmFjdG9yaWVzLCBmaWx0ZXJzLCBkaXJlY3RpdmVzIGFuZCB0ZXN0aW5nXG4gKiBjb21wb25lbnRzIGF2YWlsYWJsZSB3aXRoaW4gdGhpcyBjb3JlIG1vZHVsZS5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nXCI+PC9kaXY+XG4gKi9cblxudmFyIFJFR0VYX1NUUklOR19SRUdFWFAgPSAvXlxcLyguKylcXC8oW2Etel0qKSQvO1xuXG4vLyBUaGUgbmFtZSBvZiBhIGZvcm0gY29udHJvbCdzIFZhbGlkaXR5U3RhdGUgcHJvcGVydHkuXG4vLyBUaGlzIGlzIHVzZWQgc28gdGhhdCBpdCdzIHBvc3NpYmxlIGZvciBpbnRlcm5hbCB0ZXN0cyB0byBjcmVhdGUgbW9jayBWYWxpZGl0eVN0YXRlcy5cbnZhciBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSA9ICd2YWxpZGl0eSc7XG5cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIG1pbkVyckNvbmZpZyA9IHtcbiAgb2JqZWN0TWF4RGVwdGg6IDVcbn07XG5cbiAvKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcnJvckhhbmRsaW5nQ29uZmlnXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29uZmlndXJlIHNldmVyYWwgYXNwZWN0cyBvZiBlcnJvciBoYW5kbGluZyBpbiBBbmd1bGFySlMgaWYgdXNlZCBhcyBhIHNldHRlciBvciByZXR1cm4gdGhlXG4gKiBjdXJyZW50IGNvbmZpZ3VyYXRpb24gaWYgdXNlZCBhcyBhIGdldHRlci4gVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6XG4gKlxuICogLSAqKm9iamVjdE1heERlcHRoKio6IFRoZSBtYXhpbXVtIGRlcHRoIHRvIHdoaWNoIG9iamVjdHMgYXJlIHRyYXZlcnNlZCB3aGVuIHN0cmluZ2lmaWVkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqXG4gKiBPbWl0dGVkIG9yIHVuZGVmaW5lZCBvcHRpb25zIHdpbGwgbGVhdmUgdGhlIGNvcnJlc3BvbmRpbmcgY29uZmlndXJhdGlvbiB2YWx1ZXMgdW5jaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBNYXkgb25seSBjb250YWluIHRoZSBvcHRpb25zIHRoYXQgbmVlZCB0byBiZVxuICogICAgIHVwZGF0ZWQuIFN1cHBvcnRlZCBrZXlzOlxuICpcbiAqICogYG9iamVjdE1heERlcHRoYCAgKip7TnVtYmVyfSoqIC0gVGhlIG1heCBkZXB0aCBmb3Igc3RyaW5naWZ5aW5nIG9iamVjdHMuIFNldHRpbmcgdG8gYVxuICogICBub24tcG9zaXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIHJlbW92ZXMgdGhlIG1heCBkZXB0aCBsaW1pdC5cbiAqICAgRGVmYXVsdDogNVxuICovXG5mdW5jdGlvbiBlcnJvckhhbmRsaW5nQ29uZmlnKGNvbmZpZykge1xuICBpZiAoaXNPYmplY3QoY29uZmlnKSkge1xuICAgIGlmIChpc0RlZmluZWQoY29uZmlnLm9iamVjdE1heERlcHRoKSkge1xuICAgICAgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoID0gaXNWYWxpZE9iamVjdE1heERlcHRoKGNvbmZpZy5vYmplY3RNYXhEZXB0aCkgPyBjb25maWcub2JqZWN0TWF4RGVwdGggOiBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBtaW5FcnJDb25maWc7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1heERlcHRoXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgobWF4RGVwdGgpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG1heERlcHRoKSAmJiBtYXhEZXB0aCA+IDA7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmxvd2VyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogc2luY2VWZXJzaW9uPVwiMS41LjBcIlxuICogcmVtb3ZlVmVyc2lvbj1cIjEuNy4wXCJcbiAqIFVzZSBbU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RvTG93ZXJDYXNlKSBpbnN0ZWFkLlxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gTG93ZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciBsb3dlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnVwcGVyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogc2luY2VWZXJzaW9uPVwiMS41LjBcIlxuICogcmVtb3ZlVmVyc2lvbj1cIjEuNy4wXCJcbiAqIFVzZSBbU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3RvVXBwZXJDYXNlKSBpbnN0ZWFkLlxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO307XG5cblxudmFyIG1hbnVhbExvd2VyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7fSlcbiAgICAgIDogcztcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufTtcbnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApICYgfjMyKTt9KVxuICAgICAgOiBzO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG59O1xuXG5cbi8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaFxuLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHNcbi8vIHdpdGggY29ycmVjdCBidXQgc2xvd2VyIGFsdGVybmF0aXZlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzg3XG5pZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkge1xuICBsb3dlcmNhc2UgPSBtYW51YWxMb3dlcmNhc2U7XG4gIHVwcGVyY2FzZSA9IG1hbnVhbFVwcGVyY2FzZTtcbn1cblxuXG52YXJcbiAgICBtc2llLCAgICAgICAgICAgICAvLyBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUsIG9yIE5hTiBpZiBVQSBpcyBub3QgSUUuXG4gICAganFMaXRlLCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLlxuICAgIGpRdWVyeSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmdcbiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLFxuICAgIHNwbGljZSAgICAgICAgICAgID0gW10uc3BsaWNlLFxuICAgIHB1c2ggICAgICAgICAgICAgID0gW10ucHVzaCxcbiAgICB0b1N0cmluZyAgICAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG4gICAgZ2V0UHJvdG90eXBlT2YgICAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgbmdNaW5FcnIgICAgICAgICAgPSBtaW5FcnIoJ25nJyksXG5cbiAgICAvKiogQG5hbWUgYW5ndWxhciAqL1xuICAgIGFuZ3VsYXIgICAgICAgICAgID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLFxuICAgIGFuZ3VsYXJNb2R1bGUsXG4gICAgdWlkICAgICAgICAgICAgICAgPSAwO1xuXG4vLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbi8qKlxuICogZG9jdW1lbnRNb2RlIGlzIGFuIElFLW9ubHkgcHJvcGVydHlcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9jYzE5Njk4OCh2PXZzLjg1KS5hc3B4XG4gKi9cbm1zaWUgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsXG4gKiAgICAgICAgICAgICAgICAgICBTdHJpbmcgLi4uKVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcblxuICAvLyBgbnVsbGAsIGB1bmRlZmluZWRgIGFuZCBgd2luZG93YCBhcmUgbm90IGFycmF5LWxpa2VcbiAgaWYgKG9iaiA9PSBudWxsIHx8IGlzV2luZG93KG9iaikpIHJldHVybiBmYWxzZTtcblxuICAvLyBhcnJheXMsIHN0cmluZ3MgYW5kIGpRdWVyeS9qcUxpdGUgb2JqZWN0cyBhcmUgYXJyYXkgbGlrZVxuICAvLyAqIGpxTGl0ZSBpcyBlaXRoZXIgdGhlIGpRdWVyeSBvciBqcUxpdGUgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAgLy8gKiB3ZSBoYXZlIHRvIGNoZWNrIHRoZSBleGlzdGVuY2Ugb2YganFMaXRlIGZpcnN0IGFzIHRoaXMgbWV0aG9kIGlzIGNhbGxlZFxuICAvLyAgIHZpYSB0aGUgZm9yRWFjaCBtZXRob2Qgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIGpxTGl0ZSBvYmplY3QgaW4gdGhlIGZpcnN0IHBsYWNlXG4gIGlmIChpc0FycmF5KG9iaikgfHwgaXNTdHJpbmcob2JqKSB8fCAoanFMaXRlICYmIG9iaiBpbnN0YW5jZW9mIGpxTGl0ZSkpIHJldHVybiB0cnVlO1xuXG4gIC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuICAvLyBcImxlbmd0aFwiIGluIG9iaiB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0xMTUwOClcbiAgdmFyIGxlbmd0aCA9ICdsZW5ndGgnIGluIE9iamVjdChvYmopICYmIG9iai5sZW5ndGg7XG5cbiAgLy8gTm9kZUxpc3Qgb2JqZWN0cyAod2l0aCBgaXRlbWAgbWV0aG9kKSBhbmRcbiAgLy8gb3RoZXIgb2JqZWN0cyB3aXRoIHN1aXRhYmxlIGxlbmd0aCBjaGFyYWN0ZXJpc3RpY3MgYXJlIGFycmF5LWxpa2VcbiAgcmV0dXJuIGlzTnVtYmVyKGxlbmd0aCkgJiZcbiAgICAobGVuZ3RoID49IDAgJiYgKChsZW5ndGggLSAxKSBpbiBvYmogfHwgb2JqIGluc3RhbmNlb2YgQXJyYXkpIHx8IHR5cGVvZiBvYmouaXRlbSA9PT0gJ2Z1bmN0aW9uJyk7XG5cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZXMgdGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gb25jZSBmb3IgZWFjaCBpdGVtIGluIGBvYmpgIGNvbGxlY3Rpb24sIHdoaWNoIGNhbiBiZSBlaXRoZXIgYW5cbiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5LCBvYmopYCwgd2hlcmUgYHZhbHVlYFxuICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxuICogYXJyYXkgZWxlbWVudCBpbmRleCBhbmQgb2JqIGlzIHRoZSBgb2JqYCBpdHNlbGYuIFNwZWNpZnlpbmcgYSBgY29udGV4dGAgZm9yIHRoZSBmdW5jdGlvbiBpcyBvcHRpb25hbC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnNcbiAqIHVzaW5nIHRoZSBgaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAqXG4gKiBVbmxpa2UgRVMyNjInc1xuICogW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuNC40LjE4KSxcbiAqIHByb3ZpZGluZyAndW5kZWZpbmVkJyBvciAnbnVsbCcgdmFsdWVzIGZvciBgb2JqYCB3aWxsIG5vdCB0aHJvdyBhIFR5cGVFcnJvciwgYnV0IHJhdGhlciBqdXN0XG4gKiByZXR1cm4gdGhlIHZhbHVlIHByb3ZpZGVkLlxuICpcbiAgIGBgYGpzXG4gICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9O1xuICAgICB2YXIgbG9nID0gW107XG4gICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgfSwgbG9nKTtcbiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjogbWFsZSddKTtcbiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0IE9iamVjdCB0byBiZWNvbWUgY29udGV4dCAoYHRoaXNgKSBmb3IgdGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLlxuICovXG5cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5LCBsZW5ndGg7XG4gIGlmIChvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9PSAnbGVuZ3RoJyAmJiBrZXkgIT09ICduYW1lJyAmJiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopIHx8IGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIHZhciBpc1ByaW1pdGl2ZSA9IHR5cGVvZiBvYmogIT09ICdvYmplY3QnO1xuICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSB8fCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQmxhbmtPYmplY3Qob2JqKSkge1xuICAgICAgLy8gY3JlYXRlTWFwKCkgZmFzdCBwYXRoIC0tLSBTYWZlIHRvIGF2b2lkIGhhc093blByb3BlcnR5IGNoZWNrIGJlY2F1c2UgcHJvdG90eXBlIGNoYWluIGlzIGVtcHR5XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIGluaGVyaXRpbmcgT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duUHJvcGVydHkgY2hlY2sgbmVlZGVkXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3cgcGF0aCBmb3Igb2JqZWN0cyB3aGljaCBkbyBub3QgaGF2ZSBhIG1ldGhvZCBgaGFzT3duUHJvcGVydHlgXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaikuc29ydCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqXG4gKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfVxuICovXG5mdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtpdGVyYXRvckZuKGtleSwgdmFsdWUpO307XG59XG5cbi8qKlxuICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuXG4gKlxuICogVXNpbmcgc2ltcGxlIG51bWJlcnMgYWxsb3dzIHVzIHRvIGdlbmVyYXRlIDI4LjYgbWlsbGlvbiB1bmlxdWUgaWRzIHBlciBzZWNvbmQgZm9yIDEwIHllYXJzIGJlZm9yZVxuICogd2UgaGl0IG51bWJlciBwcmVjaXNpb24gaXNzdWVzIGluIEphdmFTY3JpcHQuXG4gKlxuICogTWF0aC5wb3coMiw1MykgLyA2MCAvIDYwIC8gMjQgLyAzNjUgLyAxMCA9IDI4LjZNXG4gKlxuICogQHJldHVybnMge251bWJlcn0gYW4gdW5pcXVlIGFscGhhLW51bWVyaWMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIG5leHRVaWQoKSB7XG4gIHJldHVybiArK3VpZDtcbn1cblxuXG4vKipcbiAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LlxuICogQHBhcmFtIG9iaiBvYmplY3RcbiAqIEBwYXJhbSBoIHRoZSBoYXNoa2V5ICghdHJ1dGh5IHRvIGRlbGV0ZSB0aGUgaGFzaGtleSlcbiAqL1xuZnVuY3Rpb24gc2V0SGFzaEtleShvYmosIGgpIHtcbiAgaWYgKGgpIHtcbiAgICBvYmouJCRoYXNoS2V5ID0gaDtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgb2JqLiQkaGFzaEtleTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGJhc2VFeHRlbmQoZHN0LCBvYmpzLCBkZWVwKSB7XG4gIHZhciBoID0gZHN0LiQkaGFzaEtleTtcblxuICBmb3IgKHZhciBpID0gMCwgaWkgPSBvYmpzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICB2YXIgb2JqID0gb2Jqc1tpXTtcbiAgICBpZiAoIWlzT2JqZWN0KG9iaikgJiYgIWlzRnVuY3Rpb24ob2JqKSkgY29udGludWU7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGtleXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICB2YXIgc3JjID0gb2JqW2tleV07XG5cbiAgICAgIGlmIChkZWVwICYmIGlzT2JqZWN0KHNyYykpIHtcbiAgICAgICAgaWYgKGlzRGF0ZShzcmMpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSBuZXcgRGF0ZShzcmMudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChzcmMpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSBuZXcgUmVnRXhwKHNyYyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3JjLm5vZGVOYW1lKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSBzcmMuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChzcmMpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSBzcmMuY2xvbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRzdFtrZXldKSkgZHN0W2tleV0gPSBpc0FycmF5KHNyYykgPyBbXSA6IHt9O1xuICAgICAgICAgIGJhc2VFeHRlbmQoZHN0W2tleV0sIFtzcmNdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0SGFzaEtleShkc3QsIGgpO1xuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5leHRlbmRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFeHRlbmRzIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYGRzdGAgYnkgY29weWluZyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGBzcmNgIG9iamVjdChzKVxuICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4gKiBieSBwYXNzaW5nIGFuIGVtcHR5IG9iamVjdCBhcyB0aGUgdGFyZ2V0OiBgdmFyIG9iamVjdCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBvYmplY3QxLCBvYmplY3QyKWAuXG4gKlxuICogKipOb3RlOioqIEtlZXAgaW4gbWluZCB0aGF0IGBhbmd1bGFyLmV4dGVuZGAgZG9lcyBub3Qgc3VwcG9ydCByZWN1cnNpdmUgbWVyZ2UgKGRlZXAgY29weSkuIFVzZVxuICoge0BsaW5rIGFuZ3VsYXIubWVyZ2V9IGZvciB0aGlzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxuICogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLlxuICovXG5mdW5jdGlvbiBleHRlbmQoZHN0KSB7XG4gIHJldHVybiBiYXNlRXh0ZW5kKGRzdCwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBmYWxzZSk7XG59XG5cblxuLyoqXG4qIEBuZ2RvYyBmdW5jdGlvblxuKiBAbmFtZSBhbmd1bGFyLm1lcmdlXG4qIEBtb2R1bGUgbmdcbiogQGtpbmQgZnVuY3Rpb25cbipcbiogQGRlc2NyaXB0aW9uXG4qIERlZXBseSBleHRlbmRzIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYGRzdGAgYnkgY29weWluZyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGBzcmNgIG9iamVjdChzKVxuKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuIElmIHlvdSB3YW50IHRvIHByZXNlcnZlIG9yaWdpbmFsIG9iamVjdHMsIHlvdSBjYW4gZG8gc29cbiogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLm1lcmdlKHt9LCBvYmplY3QxLCBvYmplY3QyKWAuXG4qXG4qIFVubGlrZSB7QGxpbmsgYW5ndWxhci5leHRlbmQgZXh0ZW5kKCl9LCBgbWVyZ2UoKWAgcmVjdXJzaXZlbHkgZGVzY2VuZHMgaW50byBvYmplY3QgcHJvcGVydGllcyBvZiBzb3VyY2Vcbiogb2JqZWN0cywgcGVyZm9ybWluZyBhIGRlZXAgY29weS5cbipcbiogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4qIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLlxuKi9cbmZ1bmN0aW9uIG1lcmdlKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgdHJ1ZSk7XG59XG5cblxuXG5mdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApO1xufVxuXG52YXIgaXNOdW1iZXJOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOdW1iZXJOYU4obnVtKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIG51bSAhPT0gbnVtO1xufTtcblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChPYmplY3QuY3JlYXRlKHBhcmVudCksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7XG4gICAgIH1cbiAgIGBgYFxuICovXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuJGluamVjdCA9IFtdO1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gKlxuICAgYGBganNcbiAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBhbmd1bGFyLmlkZW50aXR5KSh2YWx1ZSk7XG4gICB9O1xuXG4gICAvLyBFLmcuXG4gICBmdW5jdGlvbiBnZXRSZXN1bHQoZm4sIGlucHV0KSB7XG4gICAgIHJldHVybiAoZm4gfHwgYW5ndWxhci5pZGVudGl0eSkoaW5wdXQpO1xuICAgfTtcblxuICAgZ2V0UmVzdWx0KGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiAyOyB9LCAyMSk7ICAgLy8gcmV0dXJucyA0MlxuICAgZ2V0UmVzdWx0KG51bGwsIDIxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgZ2V0UmVzdWx0KHVuZGVmaW5lZCwgMjEpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgYGBgXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byBiZSByZXR1cm5lZC5cbiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcGFzc2VkIGluLlxuICovXG5mdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fVxuaWRlbnRpdHkuJGluamVjdCA9IFtdO1xuXG5cbmZ1bmN0aW9uIHZhbHVlRm4odmFsdWUpIHtyZXR1cm4gZnVuY3Rpb24gdmFsdWVSZWYoKSB7cmV0dXJuIHZhbHVlO307fVxuXG5mdW5jdGlvbiBoYXNDdXN0b21Ub1N0cmluZyhvYmopIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqLnRvU3RyaW5nKSAmJiBvYmoudG9TdHJpbmcgIT09IHRvU3RyaW5nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNPYmplY3RcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90XG4gKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuIE5vdGUgdGhhdCBKYXZhU2NyaXB0IGFycmF5cyBhcmUgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgYnV0IG5vdCBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2lzb2JqZWN0NFxuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIHdpdGggYSBudWxsIHByb3RvdHlwZVxuICovXG5mdW5jdGlvbiBpc0JsYW5rT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICFnZXRQcm90b3R5cGVPZih2YWx1ZSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNTdHJpbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLlxuICpcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIFwic3BlY2lhbFwiIG51bWJlcnMgYE5hTmAsIGArSW5maW5pdHlgIGFuZCBgLUluZmluaXR5YC5cbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBleGNsdWRlIHRoZXNlIHRoZW4geW91IGNhbiB1c2UgdGhlIG5hdGl2ZVxuICogW2Bpc0Zpbml0ZSddKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2lzRmluaXRlKVxuICogbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLlxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RhdGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBEYXRlYC5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuIEFsaWFzIG9mIEFycmF5LmlzQXJyYXkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNGdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgRnVuY3Rpb25gLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBGdW5jdGlvbmAuXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO31cblxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBSZWdFeHBgLlxuICovXG5mdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5cbi8qKlxuICogQ2hlY2tzIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmouXG4gKi9cbmZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai53aW5kb3cgPT09IG9iajtcbn1cblxuXG5mdW5jdGlvbiBpc1Njb3BlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai4kZXZhbEFzeW5jICYmIG9iai4kd2F0Y2g7XG59XG5cblxuZnVuY3Rpb24gaXNGaWxlKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cblxuZnVuY3Rpb24gaXNGb3JtRGF0YShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJztcbn1cblxuXG5mdW5jdGlvbiBpc0Jsb2Iob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5cbmZ1bmN0aW9uIGlzUHJvbWlzZUxpa2Uob2JqKSB7XG4gIHJldHVybiBvYmogJiYgaXNGdW5jdGlvbihvYmoudGhlbik7XG59XG5cblxudmFyIFRZUEVEX0FSUkFZX1JFR0VYUCA9IC9eXFxbb2JqZWN0ICg/OlVpbnQ4fFVpbnQ4Q2xhbXBlZHxVaW50MTZ8VWludDMyfEludDh8SW50MTZ8SW50MzJ8RmxvYXQzMnxGbG9hdDY0KUFycmF5XSQvO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBpc051bWJlcih2YWx1ZS5sZW5ndGgpICYmIFRZUEVEX0FSUkFZX1JFR0VYUC50ZXN0KHRvU3RyaW5nLmNhbGwodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcihvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuXG52YXIgdHJpbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn07XG5cbi8vIENvcGllZCBmcm9tOlxuLy8gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9sb2NhbF9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lMTAyMVxuLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLlxudmFyIGVzY2FwZUZvclJlZ2V4cCA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHNcbiAgICAucmVwbGFjZSgvKFstKClbXFxde30rPyouJF58LDojPCFcXFxcXSkvZywgJ1xcXFwkMScpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICAucmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmXG4gICAgKG5vZGUubm9kZU5hbWUgIC8vIFdlIGFyZSBhIGRpcmVjdCBlbGVtZW50LlxuICAgIHx8IChub2RlLnByb3AgJiYgbm9kZS5hdHRyICYmIG5vZGUuZmluZCkpKTsgIC8vIFdlIGhhdmUgYW4gb24gYW5kIGZpbmQgbWV0aG9kIHBhcnQgb2YgalF1ZXJ5IEFQSS5cbn1cblxuLyoqXG4gKiBAcGFyYW0gc3RyICdrZXkxLGtleTIsLi4uJ1xuICogQHJldHVybnMge29iamVjdH0gaW4gdGhlIGZvcm0gb2Yge2tleTE6dHJ1ZSwga2V5Mjp0cnVlLCAuLi59XG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAoc3RyKSB7XG4gIHZhciBvYmogPSB7fSwgaXRlbXMgPSBzdHIuc3BsaXQoJywnKSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgb2JqW2l0ZW1zW2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkge1xuICByZXR1cm4gbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUgfHwgKGVsZW1lbnRbMF0gJiYgZWxlbWVudFswXS5ub2RlTmFtZSkpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgb2JqKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBvYmopICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gYXJyYXlSZW1vdmUoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5jb3B5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5cbiAqXG4gKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLlxuICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXlzKSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cylcbiAqICAgYXJlIGRlbGV0ZWQgYW5kIHRoZW4gYWxsIGVsZW1lbnRzL3Byb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIGFyZSBjb3BpZWQgdG8gaXQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLlxuICogKiBJZiBgc291cmNlYCBpcyBpZGVudGljYWwgdG8gYGRlc3RpbmF0aW9uYCBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG4gKlxuICogPGJyIC8+XG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICBPbmx5IGVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgdGFrZW4gaW50byBhY2NvdW50LiBOb24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIChib3RoIG9uIGBzb3VyY2VgXG4gKiAgIGFuZCBvbiBgZGVzdGluYXRpb25gKSB3aWxsIGJlIGlnbm9yZWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LlxuICogICAgICAgICAgICAgICAgICAgQ2FuIGJlIGFueSB0eXBlLCBpbmNsdWRpbmcgcHJpbWl0aXZlcywgYG51bGxgLCBhbmQgYHVuZGVmaW5lZGAuXG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXkpPX0gZGVzdGluYXRpb24gRGVzdGluYXRpb24gaW50byB3aGljaCB0aGUgc291cmNlIGlzIGNvcGllZC4gSWZcbiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLlxuICogQHJldHVybnMgeyp9IFRoZSBjb3B5IG9yIHVwZGF0ZWQgYGRlc3RpbmF0aW9uYCwgaWYgYGRlc3RpbmF0aW9uYCB3YXMgc3BlY2lmaWVkLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cImNvcHlFeGFtcGxlXCIgbmFtZT1cImFuZ3VsYXItY29weVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBub3ZhbGlkYXRlIGNsYXNzPVwic2ltcGxlLWZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIiAvPjwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgPGxhYmVsPkFnZTogIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ1c2VyLmFnZVwiIC8+PC9sYWJlbD48YnIgLz5cbiAgICAgICAgICBHZW5kZXI6IDxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwibWFsZVwiIC8+bWFsZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cImZlbWFsZVwiIC8+ZmVtYWxlPC9sYWJlbD48YnIgLz5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicmVzZXQoKVwiPlJFU0VUPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInVwZGF0ZSh1c2VyKVwiPlNBVkU8L2J1dHRvbj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPmZvcm0gPSB7e3VzZXIgfCBqc29ufX08L3ByZT5cbiAgICAgICAgPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIC8vIE1vZHVsZTogY29weUV4YW1wbGVcbiAgICAgIGFuZ3VsYXIuXG4gICAgICAgIG1vZHVsZSgnY29weUV4YW1wbGUnLCBbXSkuXG4gICAgICAgIGNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUubWFzdGVyID0ge307XG5cbiAgICAgICAgICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEV4YW1wbGUgd2l0aCAxIGFyZ3VtZW50XG4gICAgICAgICAgICAkc2NvcGUudXNlciA9IGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgIC8vIEV4YW1wbGUgd2l0aCAyIGFyZ3VtZW50c1xuICAgICAgICAgICAgYW5ndWxhci5jb3B5KHVzZXIsICRzY29wZS5tYXN0ZXIpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkc2NvcGUucmVzZXQoKTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKSB7XG4gIHZhciBzdGFja1NvdXJjZSA9IFtdO1xuICB2YXIgc3RhY2tEZXN0ID0gW107XG4gIG1heERlcHRoID0gaXNWYWxpZE9iamVjdE1heERlcHRoKG1heERlcHRoKSA/IG1heERlcHRoIDogTmFOO1xuXG4gIGlmIChkZXN0aW5hdGlvbikge1xuICAgIGlmIChpc1R5cGVkQXJyYXkoZGVzdGluYXRpb24pIHx8IGlzQXJyYXlCdWZmZXIoZGVzdGluYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignY3B0YScsICdDYW5cXCd0IGNvcHkhIFR5cGVkQXJyYXkgZGVzdGluYXRpb24gY2Fubm90IGJlIG11dGF0ZWQuJyk7XG4gICAgfVxuICAgIGlmIChzb3VyY2UgPT09IGRlc3RpbmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignY3BpJywgJ0NhblxcJ3QgY29weSEgU291cmNlIGFuZCBkZXN0aW5hdGlvbiBhcmUgaWRlbnRpY2FsLicpO1xuICAgIH1cblxuICAgIC8vIEVtcHR5IHRoZSBkZXN0aW5hdGlvbiBvYmplY3RcbiAgICBpZiAoaXNBcnJheShkZXN0aW5hdGlvbikpIHtcbiAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJyQkaGFzaEtleScpIHtcbiAgICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcbiAgICByZXR1cm4gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHlFbGVtZW50KHNvdXJjZSwgbWF4RGVwdGgpO1xuXG4gIGZ1bmN0aW9uIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKSB7XG4gICAgbWF4RGVwdGgtLTtcbiAgICBpZiAobWF4RGVwdGggPCAwKSB7XG4gICAgICByZXR1cm4gJy4uLic7XG4gICAgfVxuICAgIHZhciBoID0gZGVzdGluYXRpb24uJCRoYXNoS2V5O1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc291cmNlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgZGVzdGluYXRpb24ucHVzaChjb3B5RWxlbWVudChzb3VyY2VbaV0sIG1heERlcHRoKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0JsYW5rT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSwgbWF4RGVwdGgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlICYmIHR5cGVvZiBzb3VyY2UuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNsb3cgcGF0aCwgd2hpY2ggbXVzdCByZWx5IG9uIGhhc093blByb3BlcnR5XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldLCBtYXhEZXB0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvd2VzdCBwYXRoIC0tLSBoYXNPd25Qcm9wZXJ0eSBjYW4ndCBiZSBjYWxsZWQgYXMgYSBtZXRob2RcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzZXRIYXNoS2V5KGRlc3RpbmF0aW9uLCBoKTtcbiAgICByZXR1cm4gZGVzdGluYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5RWxlbWVudChzb3VyY2UsIG1heERlcHRoKSB7XG4gICAgLy8gU2ltcGxlIHZhbHVlc1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICAvLyBBbHJlYWR5IGNvcGllZCB2YWx1ZXNcbiAgICB2YXIgaW5kZXggPSBzdGFja1NvdXJjZS5pbmRleE9mKHNvdXJjZSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07XG4gICAgfVxuXG4gICAgaWYgKGlzV2luZG93KHNvdXJjZSkgfHwgaXNTY29wZShzb3VyY2UpKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignY3B3cycsXG4gICAgICAgICdDYW5cXCd0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH1cblxuICAgIHZhciBuZWVkc1JlY3Vyc2UgPSBmYWxzZTtcbiAgICB2YXIgZGVzdGluYXRpb24gPSBjb3B5VHlwZShzb3VyY2UpO1xuXG4gICAgaWYgKGRlc3RpbmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlc3RpbmF0aW9uID0gaXNBcnJheShzb3VyY2UpID8gW10gOiBPYmplY3QuY3JlYXRlKGdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuXG4gICAgcmV0dXJuIG5lZWRzUmVjdXJzZVxuICAgICAgPyBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aClcbiAgICAgIDogZGVzdGluYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5VHlwZShzb3VyY2UpIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwoc291cmNlKSkge1xuICAgICAgY2FzZSAnW29iamVjdCBJbnQ4QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgSW50MTZBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBJbnQzMkFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBGbG9hdDY0QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDhBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBVaW50MTZBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBVaW50MzJBcnJheV0nOlxuICAgICAgICByZXR1cm4gbmV3IHNvdXJjZS5jb25zdHJ1Y3Rvcihjb3B5RWxlbWVudChzb3VyY2UuYnVmZmVyKSwgc291cmNlLmJ5dGVPZmZzZXQsIHNvdXJjZS5sZW5ndGgpO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IEFycmF5QnVmZmVyXSc6XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFMTBcbiAgICAgICAgaWYgKCFzb3VyY2Uuc2xpY2UpIHtcbiAgICAgICAgICAvLyBJZiB3ZSdyZSBpbiB0aGlzIGNhc2Ugd2Uga25vdyB0aGUgZW52aXJvbm1lbnQgc3VwcG9ydHMgQXJyYXlCdWZmZXJcbiAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgICAgICAgIHZhciBjb3BpZWQgPSBuZXcgQXJyYXlCdWZmZXIoc291cmNlLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgIG5ldyBVaW50OEFycmF5KGNvcGllZCkuc2V0KG5ldyBVaW50OEFycmF5KHNvdXJjZSkpO1xuICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgICAgICByZXR1cm4gY29waWVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoMCk7XG5cbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgICAgcmV0dXJuIG5ldyBzb3VyY2UuY29uc3RydWN0b3Ioc291cmNlLnZhbHVlT2YoKSk7XG5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoc291cmNlLnNvdXJjZSwgc291cmNlLnRvU3RyaW5nKCkubWF0Y2goL1teL10qJC8pWzBdKTtcbiAgICAgICAgcmUubGFzdEluZGV4ID0gc291cmNlLmxhc3RJbmRleDtcbiAgICAgICAgcmV0dXJuIHJlO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IEJsb2JdJzpcbiAgICAgICAgcmV0dXJuIG5ldyBzb3VyY2UuY29uc3RydWN0b3IoW3NvdXJjZV0sIHt0eXBlOiBzb3VyY2UudHlwZX0pO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZS5jbG9uZU5vZGUpKSB7XG4gICAgICByZXR1cm4gc291cmNlLmNsb25lTm9kZSh0cnVlKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG5mdW5jdGlvbiBzaW1wbGVDb21wYXJlKGEsIGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcXVhbHNcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIG9yIHR3byB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQuIFN1cHBvcnRzIHZhbHVlIHR5cGVzLCByZWd1bGFyXG4gKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLlxuICpcbiAqIFR3byBvYmplY3RzIG9yIHZhbHVlcyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gKlxuICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi5cbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBhcmUgb2YgdGhlIHNhbWUgdHlwZSBhbmQgYWxsIG9mIHRoZWlyIHByb3BlcnRpZXMgYXJlIGVxdWFsIGJ5XG4gKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC5cbiAqICogQm90aCB2YWx1ZXMgYXJlIE5hTi4gKEluIEphdmFTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKVxuICogKiBCb3RoIHZhbHVlcyByZXByZXNlbnQgdGhlIHNhbWUgcmVndWxhciBleHByZXNzaW9uIChJbiBKYXZhU2NyaXB0LFxuICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbFxuICogICByZXByZXNlbnRhdGlvbiBtYXRjaGVzKS5cbiAqXG4gKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzXG4gKiB0aGF0IGJlZ2luIHdpdGggYCRgIGFyZSBpZ25vcmVkLlxuICpcbiAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLlxuICpcbiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYXJndW1lbnRzIGFyZSBlcXVhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZXF1YWxzRXhhbXBsZVwiIG5hbWU9XCJlcXVhbHNFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBub3ZhbGlkYXRlPlxuICAgICAgICAgIDxoMz5Vc2VyIDE8L2gzPlxuICAgICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlcjEubmFtZVwiPlxuICAgICAgICAgIEFnZTogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInVzZXIxLmFnZVwiPlxuXG4gICAgICAgICAgPGgzPlVzZXIgMjwvaDM+XG4gICAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyMi5uYW1lXCI+XG4gICAgICAgICAgQWdlOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwidXNlcjIuYWdlXCI+XG5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJDb21wYXJlXCIgbmctY2xpY2s9XCJjb21wYXJlKClcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBVc2VyIDE6IDxwcmU+e3t1c2VyMSB8IGpzb259fTwvcHJlPlxuICAgICAgICAgIFVzZXIgMjogPHByZT57e3VzZXIyIHwganNvbn19PC9wcmU+XG4gICAgICAgICAgRXF1YWw6IDxwcmU+e3tyZXN1bHR9fTwvcHJlPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZXF1YWxzRXhhbXBsZScsIFtdKS5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnVzZXIxID0ge307XG4gICAgICAgICAgJHNjb3BlLnVzZXIyID0ge307XG4gICAgICAgICAgJHNjb3BlLmNvbXBhcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5yZXN1bHQgPSBhbmd1bGFyLmVxdWFscygkc2NvcGUudXNlcjEsICRzY29wZS51c2VyMik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBlcXVhbHMobzEsIG8yKSB7XG4gIGlmIChvMSA9PT0gbzIpIHJldHVybiB0cnVlO1xuICBpZiAobzEgPT09IG51bGwgfHwgbzIgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAobzEgIT09IG8xICYmIG8yICE9PSBvMikgcmV0dXJuIHRydWU7IC8vIE5hTiA9PT0gTmFOXG4gIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7XG4gIGlmICh0MSA9PT0gdDIgJiYgdDEgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGlzQXJyYXkobzEpKSB7XG4gICAgICBpZiAoIWlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT09IG8yLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGtleSA9IDA7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgaWYgKCFpc0RhdGUobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gc2ltcGxlQ29tcGFyZShvMS5nZXRUaW1lKCksIG8yLmdldFRpbWUoKSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZ0V4cChvMSkpIHtcbiAgICAgIGlmICghaXNSZWdFeHAobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gbzEudG9TdHJpbmcoKSA9PT0gbzIudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzU2NvcGUobzEpIHx8IGlzU2NvcGUobzIpIHx8IGlzV2luZG93KG8xKSB8fCBpc1dpbmRvdyhvMikgfHxcbiAgICAgICAgaXNBcnJheShvMikgfHwgaXNEYXRlKG8yKSB8fCBpc1JlZ0V4cChvMikpIHJldHVybiBmYWxzZTtcbiAgICAgIGtleVNldCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgZm9yIChrZXkgaW4gbzEpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJyB8fCBpc0Z1bmN0aW9uKG8xW2tleV0pKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAga2V5U2V0W2tleV0gPSB0cnVlO1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gbzIpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGtleVNldCkgJiZcbiAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJlxuICAgICAgICAgICAgaXNEZWZpbmVkKG8yW2tleV0pICYmXG4gICAgICAgICAgICAhaXNGdW5jdGlvbihvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGNzcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWlzRGVmaW5lZChjc3AucnVsZXMpKSB7XG5cblxuICAgIHZhciBuZ0NzcEVsZW1lbnQgPSAod2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jc3BdJykgfHxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5nLWNzcF0nKSk7XG5cbiAgICBpZiAobmdDc3BFbGVtZW50KSB7XG4gICAgICB2YXIgbmdDc3BBdHRyaWJ1dGUgPSBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCduZy1jc3AnKSB8fFxuICAgICAgICAgICAgICAgICAgICBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW5nLWNzcCcpO1xuICAgICAgY3NwLnJ1bGVzID0ge1xuICAgICAgICBub1Vuc2FmZUV2YWw6ICFuZ0NzcEF0dHJpYnV0ZSB8fCAobmdDc3BBdHRyaWJ1dGUuaW5kZXhPZignbm8tdW5zYWZlLWV2YWwnKSAhPT0gLTEpLFxuICAgICAgICBub0lubGluZVN0eWxlOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLWlubGluZS1zdHlsZScpICE9PSAtMSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiBub1Vuc2FmZUV2YWwoKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNzcC5ydWxlcztcblxuICBmdW5jdGlvbiBub1Vuc2FmZUV2YWwoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcsIG5vLW5ldy1mdW5jXG4gICAgICBuZXcgRnVuY3Rpb24oJycpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbW9kdWxlIG5nXG4gKiBAbmFtZSBuZ0pxXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nSnEgdGhlIG5hbWUgb2YgdGhlIGxpYnJhcnkgYXZhaWxhYmxlIHVuZGVyIGB3aW5kb3dgXG4gKiB0byBiZSB1c2VkIGZvciBhbmd1bGFyLmVsZW1lbnRcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvIGZvcmNlIHRoZSBhbmd1bGFyLmVsZW1lbnQgbGlicmFyeS4gIFRoaXMgc2hvdWxkIGJlXG4gKiB1c2VkIHRvIGZvcmNlIGVpdGhlciBqcUxpdGUgYnkgbGVhdmluZyBuZy1qcSBibGFuayBvciBzZXR0aW5nIHRoZSBuYW1lIG9mXG4gKiB0aGUganF1ZXJ5IHZhcmlhYmxlIHVuZGVyIHdpbmRvdyAoZWcuIGpRdWVyeSkuXG4gKlxuICogU2luY2UgYW5ndWxhciBsb29rcyBmb3IgdGhpcyBkaXJlY3RpdmUgd2hlbiBpdCBpcyBsb2FkZWQgKGRvZXNuJ3Qgd2FpdCBmb3IgdGhlXG4gKiBET01Db250ZW50TG9hZGVkIGV2ZW50KSwgaXQgbXVzdCBiZSBwbGFjZWQgb24gYW4gZWxlbWVudCB0aGF0IGNvbWVzIGJlZm9yZSB0aGUgc2NyaXB0XG4gKiB3aGljaCBsb2FkcyBhbmd1bGFyLiBBbHNvLCBvbmx5IHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBgbmctanFgIHdpbGwgYmUgdXNlZCBhbmQgYWxsXG4gKiBvdGhlcnMgaWdub3JlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBmb3JjZSBqcUxpdGUgdXNpbmcgdGhlIGBuZ0pxYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gYGBgaHRtbFxuIDwhZG9jdHlwZSBodG1sPlxuIDxodG1sIG5nLWFwcCBuZy1qcT5cbiAuLi5cbiAuLi5cbiA8L2h0bWw+XG4gYGBgXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYSBqUXVlcnkgYmFzZWQgbGlicmFyeSBvZiBhIGRpZmZlcmVudCBuYW1lLlxuICogVGhlIGxpYnJhcnkgbmFtZSBtdXN0IGJlIGF2YWlsYWJsZSBhdCB0aGUgdG9wIG1vc3QgJ3dpbmRvdycuXG4gYGBgaHRtbFxuIDwhZG9jdHlwZSBodG1sPlxuIDxodG1sIG5nLWFwcCBuZy1qcT1cImpRdWVyeUxpYlwiPlxuIC4uLlxuIC4uLlxuIDwvaHRtbD5cbiBgYGBcbiAqL1xudmFyIGpxID0gZnVuY3Rpb24oKSB7XG4gIGlmIChpc0RlZmluZWQoanEubmFtZV8pKSByZXR1cm4ganEubmFtZV87XG4gIHZhciBlbDtcbiAgdmFyIGksIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoLCBwcmVmaXgsIG5hbWU7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgcHJlZml4ID0gbmdBdHRyUHJlZml4ZXNbaV07XG4gICAgZWwgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignWycgKyBwcmVmaXgucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ2pxXScpO1xuICAgIGlmIChlbCkge1xuICAgICAgbmFtZSA9IGVsLmdldEF0dHJpYnV0ZShwcmVmaXggKyAnanEnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoanEubmFtZV8gPSBuYW1lKTtcbn07XG5cbmZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGFycmF5MiwgaW5kZXgpIHtcbiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7XG59XG5cbmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7XG4gIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYmluZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3JcbiAqIGBmbmApLiBZb3UgY2FuIHN1cHBseSBvcHRpb25hbCBgYXJnc2AgdGhhdCBhcmUgcHJlYm91bmQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGZlYXR1cmUgaXMgYWxzb1xuICoga25vd24gYXMgW3BhcnRpYWwgYXBwbGljYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFydGlhbF9hcHBsaWNhdGlvbiksIGFzXG4gKiBkaXN0aW5ndWlzaGVkIGZyb20gW2Z1bmN0aW9uIGN1cnJ5aW5nXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1cnJ5aW5nI0NvbnRyYXN0X3dpdGhfcGFydGlhbF9mdW5jdGlvbl9hcHBsaWNhdGlvbikuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlbGYgQ29udGV4dCB3aGljaCBgZm5gIHNob3VsZCBiZSBldmFsdWF0ZWQgaW4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLlxuICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwcmVib3VuZCB0byB0aGUgYGZuYCBmdW5jdGlvbiBjYWxsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKCl9IEZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGBmbmAgd2l0aCBhbGwgdGhlIHNwZWNpZmllZCBiaW5kaW5ncy5cbiAqL1xuZnVuY3Rpb24gYmluZChzZWxmLCBmbikge1xuICB2YXIgY3VycnlBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBzbGljZUFyZ3MoYXJndW1lbnRzLCAyKSA6IFtdO1xuICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICByZXR1cm4gY3VycnlBcmdzLmxlbmd0aFxuICAgICAgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBjb25jYXQoY3VycnlBcmdzLCBhcmd1bWVudHMsIDApKVxuICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIDogZm4uY2FsbChzZWxmKTtcbiAgICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBJRSwgbmF0aXZlIG1ldGhvZHMgYXJlIG5vdCBmdW5jdGlvbnMgc28gdGhleSBjYW5ub3QgYmUgYm91bmQgKG5vdGU6IHRoZXkgZG9uJ3QgbmVlZCB0byBiZSkuXG4gICAgcmV0dXJuIGZuO1xuICB9XG59XG5cblxuZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICB2YXIgdmFsID0gdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpIHtcbiAgICB2YWwgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoaXNXaW5kb3codmFsdWUpKSB7XG4gICAgdmFsID0gJyRXSU5ET1cnO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmICB3aW5kb3cuZG9jdW1lbnQgPT09IHZhbHVlKSB7XG4gICAgdmFsID0gJyRET0NVTUVOVCc7XG4gIH0gZWxzZSBpZiAoaXNTY29wZSh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFNDT1BFJztcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudG9Kc29uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VyaWFsaXplcyBpbnB1dCBpbnRvIGEgSlNPTi1mb3JtYXR0ZWQgc3RyaW5nLiBQcm9wZXJ0aWVzIHdpdGggbGVhZGluZyAkJCBjaGFyYWN0ZXJzIHdpbGwgYmVcbiAqIHN0cmlwcGVkIHNpbmNlIGFuZ3VsYXIgdXNlcyB0aGlzIG5vdGF0aW9uIGludGVybmFsbHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8RGF0ZXxzdHJpbmd8bnVtYmVyfGJvb2xlYW59IG9iaiBJbnB1dCB0byBiZSBzZXJpYWxpemVkIGludG8gSlNPTi5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtwcmV0dHk9Ml0gSWYgc2V0IHRvIHRydWUsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgYW5kIHdoaXRlc3BhY2UuXG4gKiAgICBJZiBzZXQgdG8gYW4gaW50ZWdlciwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiB0aGF0IG1hbnkgc3BhY2VzIHBlciBpbmRlbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBKU09OLWlmaWVkIHN0cmluZyByZXByZXNlbnRpbmcgYG9iamAuXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIFRoZSBTYWZhcmkgYnJvd3NlciB0aHJvd3MgYSBgUmFuZ2VFcnJvcmAgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgIHdoZW4gaXQgdHJpZXMgdG8gc3RyaW5naWZ5IGEgYERhdGVgXG4gKiBvYmplY3Qgd2l0aCBhbiBpbnZhbGlkIGRhdGUgdmFsdWUuIFRoZSBvbmx5IHJlbGlhYmxlIHdheSB0byBwcmV2ZW50IHRoaXMgaXMgdG8gbW9ua2V5cGF0Y2ggdGhlXG4gKiBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2QgYXMgZm9sbG93czpcbiAqXG4gKiBgYGBcbiAqIHZhciBfRGF0ZXRvSlNPTiA9IERhdGUucHJvdG90eXBlLnRvSlNPTjtcbiAqIERhdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICogICB0cnkge1xuICogICAgIHJldHVybiBfRGF0ZXRvSlNPTi5jYWxsKHRoaXMpO1xuICogICB9IGNhdGNoKGUpIHtcbiAqICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHtcbiAqICAgICAgIHJldHVybiBudWxsO1xuICogICAgIH1cbiAqICAgICB0aHJvdyBlO1xuICogICB9XG4gKiB9O1xuICogYGBgXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xNDIyMSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7XG4gIGlmIChpc1VuZGVmaW5lZChvYmopKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoIWlzTnVtYmVyKHByZXR0eSkpIHtcbiAgICBwcmV0dHkgPSBwcmV0dHkgPyAyIDogbnVsbDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybnMge09iamVjdHxBcnJheXxzdHJpbmd8bnVtYmVyfSBEZXNlcmlhbGl6ZWQgSlNPTiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pXG4gICAgICA/IEpTT04ucGFyc2UoanNvbilcbiAgICAgIDoganNvbjtcbn1cblxuXG52YXIgQUxMX0NPTE9OUyA9IC86L2c7XG5mdW5jdGlvbiB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBmYWxsYmFjaykge1xuICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHksIEVkZ2UgMTMtMTQrXG4gIC8vIElFL0VkZ2UgZG8gbm90IFwidW5kZXJzdGFuZFwiIGNvbG9uIChgOmApIGluIHRpbWV6b25lXG4gIHRpbWV6b25lID0gdGltZXpvbmUucmVwbGFjZShBTExfQ09MT05TLCAnJyk7XG4gIHZhciByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCA9IERhdGUucGFyc2UoJ0phbiAwMSwgMTk3MCAwMDowMDowMCAnICsgdGltZXpvbmUpIC8gNjAwMDA7XG4gIHJldHVybiBpc051bWJlck5hTihyZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCkgPyBmYWxsYmFjayA6IHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZERhdGVNaW51dGVzKGRhdGUsIG1pbnV0ZXMpIHtcbiAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgbWludXRlcyk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5cbmZ1bmN0aW9uIGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHJldmVyc2UpIHtcbiAgcmV2ZXJzZSA9IHJldmVyc2UgPyAtMSA6IDE7XG4gIHZhciBkYXRlVGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGVUaW1lem9uZU9mZnNldCk7XG4gIHJldHVybiBhZGREYXRlTWludXRlcyhkYXRlLCByZXZlcnNlICogKHRpbWV6b25lT2Zmc2V0IC0gZGF0ZVRpbWV6b25lT2Zmc2V0KSk7XG59XG5cblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0aW5nVGFnKGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KS5jbG9uZSgpO1xuICB0cnkge1xuICAgIC8vIHR1cm5zIG91dCBJRSBkb2VzIG5vdCBsZXQgeW91IHNldCAuaHRtbCgpIG9uIGVsZW1lbnRzIHdoaWNoXG4gICAgLy8gYXJlIG5vdCBhbGxvd2VkIHRvIGhhdmUgY2hpbGRyZW4uIFNvIHdlIGp1c3QgaWdub3JlIGl0LlxuICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBlbGVtSHRtbCA9IGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoZWxlbWVudCkuaHRtbCgpO1xuICB0cnkge1xuICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOlxuICAgICAgICBlbGVtSHRtbC5cbiAgICAgICAgICBtYXRjaCgvXig8W14+XSs+KS8pWzFdLlxuICAgICAgICAgIHJlcGxhY2UoL148KFtcXHctXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7cmV0dXJuICc8JyArIGxvd2VyY2FzZShub2RlTmFtZSk7fSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbG93ZXJjYXNlKGVsZW1IdG1sKTtcbiAgfVxuXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIFRyaWVzIHRvIGRlY29kZSB0aGUgVVJJIGNvbXBvbmVudCB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHN0ciB2YWx1ZSBwb3RlbnRpYWwgVVJJIGNvbXBvbmVudCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgY2FuIGJlIGRlY29kZWRcbiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUgYW55IGludmFsaWQgdXJpIGNvbXBvbmVudC5cbiAgfVxufVxuXG5cbi8qKlxuICogUGFyc2VzIGFuIGVzY2FwZWQgdXJsIHF1ZXJ5IHN0cmluZyBpbnRvIGtleS12YWx1ZSBwYWlycy5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZyxib29sZWFufEFycmF5Pn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VLZXlWYWx1ZSgvKipzdHJpbmcqL2tleVZhbHVlKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgJycpLnNwbGl0KCcmJyksIGZ1bmN0aW9uKGtleVZhbHVlKSB7XG4gICAgdmFyIHNwbGl0UG9pbnQsIGtleSwgdmFsO1xuICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAga2V5ID0ga2V5VmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9cXCsvZywnJTIwJyk7XG4gICAgICBzcGxpdFBvaW50ID0ga2V5VmFsdWUuaW5kZXhPZignPScpO1xuICAgICAgaWYgKHNwbGl0UG9pbnQgIT09IC0xKSB7XG4gICAgICAgIGtleSA9IGtleVZhbHVlLnN1YnN0cmluZygwLCBzcGxpdFBvaW50KTtcbiAgICAgICAgdmFsID0ga2V5VmFsdWUuc3Vic3RyaW5nKHNwbGl0UG9pbnQgKyAxKTtcbiAgICAgIH1cbiAgICAgIGtleSA9IHRyeURlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICAgICAgaWYgKGlzRGVmaW5lZChrZXkpKSB7XG4gICAgICAgIHZhbCA9IGlzRGVmaW5lZCh2YWwpID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbCkgOiB0cnVlO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba2V5XSkpIHtcbiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBbb2JqW2tleV0sdmFsXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oYXJyYXlWYWx1ZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgICAgIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgKHZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeSh2YWx1ZSwgdHJ1ZSkpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHMuam9pbignJicpIDogJyc7XG59XG5cblxuLyoqXG4gKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvd1xuICogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQgd2l0aCByZWdhcmRzIHRvIHRoZSBjaGFyYWN0ZXIgc2V0IChwY2hhcikgYWxsb3dlZCBpbiBwYXRoXG4gKiBzZWdtZW50czpcbiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXJcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVNlZ21lbnQodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0QvZ2ksICc9JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpO1xufVxuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIGVuY29kaW5nICprZXkqIG9yICp2YWx1ZSogcGFydHMgb2YgcXVlcnkgY29tcG9uZW50LiBXZSBuZWVkIGEgY3VzdG9tXG4gKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIGVuY29kZWQgcGVyIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODY6XG4gKiAgICBxdWVyeSAgICAgICAgID0gKiggcGNoYXIgLyBcIi9cIiAvIFwiP1wiIClcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpO1xufVxuXG52YXIgbmdBdHRyUHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZzonLCAneC1uZy0nXTtcblxuZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7XG4gIHZhciBhdHRyLCBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyKSkpIHtcbiAgICAgIHJldHVybiBhdHRyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gYWxsb3dBdXRvQm9vdHN0cmFwKGRvY3VtZW50KSB7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xuXG4gIGlmICghc2NyaXB0KSB7XG4gICAgLy8gSUUgZG9lcyBub3QgaGF2ZSBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIElmIHRoZSBgY3VycmVudFNjcmlwdGAgcHJvcGVydHkgaGFzIGJlZW4gY2xvYmJlcmVkIGp1c3QgcmV0dXJuIGZhbHNlLCBzaW5jZSB0aGlzIGluZGljYXRlcyBhIHByb2JhYmxlIGF0dGFja1xuICBpZiAoIShzY3JpcHQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTFNjcmlwdEVsZW1lbnQgfHwgc2NyaXB0IGluc3RhbmNlb2Ygd2luZG93LlNWR1NjcmlwdEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGF0dHJpYnV0ZXMgPSBzY3JpcHQuYXR0cmlidXRlcztcbiAgdmFyIHNyY3MgPSBbYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3NyYycpLCBhdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnaHJlZicpLCBhdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgneGxpbms6aHJlZicpXTtcblxuICByZXR1cm4gc3Jjcy5ldmVyeShmdW5jdGlvbihzcmMpIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghc3JjLnZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5ocmVmID0gc3JjLnZhbHVlO1xuXG4gICAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLm9yaWdpbiA9PT0gbGluay5vcmlnaW4pIHtcbiAgICAgIC8vIFNhbWUtb3JpZ2luIHJlc291cmNlcyBhcmUgYWx3YXlzIGFsbG93ZWQsIGV2ZW4gZm9yIG5vbi13aGl0ZWxpc3RlZCBzY2hlbWVzLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIERpc2FibGVkIGJvb3RzdHJhcHBpbmcgdW5sZXNzIGFuZ3VsYXIuanMgd2FzIGxvYWRlZCBmcm9tIGEga25vd24gc2NoZW1lIHVzZWQgb24gdGhlIHdlYi5cbiAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgYW5ndWxhci5qcyBidW5kbGVkIHdpdGggYnJvd3NlciBleHRlbnNpb25zIGZyb20gYmVpbmcgdXNlZCB0byBieXBhc3MgdGhlXG4gICAgLy8gY29udGVudCBzZWN1cml0eSBwb2xpY3kgaW4gd2ViIHBhZ2VzIGFuZCBvdGhlciBicm93c2VyIGV4dGVuc2lvbnMuXG4gICAgc3dpdGNoIChsaW5rLnByb3RvY29sKSB7XG4gICAgICBjYXNlICdodHRwOic6XG4gICAgICBjYXNlICdodHRwczonOlxuICAgICAgY2FzZSAnZnRwOic6XG4gICAgICBjYXNlICdibG9iOic6XG4gICAgICBjYXNlICdmaWxlOic6XG4gICAgICBjYXNlICdkYXRhOic6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIENhY2hlZCBhcyBpdCBoYXMgdG8gcnVuIGR1cmluZyBsb2FkaW5nIHNvIHRoYXQgZG9jdW1lbnQuY3VycmVudFNjcmlwdCBpcyBhdmFpbGFibGUuXG52YXIgaXNBdXRvQm9vdHN0cmFwQWxsb3dlZCA9IGFsbG93QXV0b0Jvb3RzdHJhcCh3aW5kb3cuZG9jdW1lbnQpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQXBwXG4gKiBAbW9kdWxlIG5nXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2FuZ3VsYXIuTW9kdWxlfSBuZ0FwcCBhbiBvcHRpb25hbCBhcHBsaWNhdGlvblxuICogICB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlfSBuYW1lIHRvIGxvYWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1N0cmljdERpIGlmIHRoaXMgYXR0cmlidXRlIGlzIHByZXNlbnQgb24gdGhlIGFwcCBlbGVtZW50LCB0aGUgaW5qZWN0b3Igd2lsbCBiZVxuICogICBjcmVhdGVkIGluIFwic3RyaWN0LWRpXCIgbW9kZS4gVGhpcyBtZWFucyB0aGF0IHRoZSBhcHBsaWNhdGlvbiB3aWxsIGZhaWwgdG8gaW52b2tlIGZ1bmN0aW9ucyB3aGljaFxuICogICBkbyBub3QgdXNlIGV4cGxpY2l0IGZ1bmN0aW9uIGFubm90YXRpb24gKGFuZCBhcmUgdGh1cyB1bnN1aXRhYmxlIGZvciBtaW5pZmljYXRpb24pLCBhcyBkZXNjcmliZWRcbiAqICAgaW4ge0BsaW5rIGd1aWRlL2RpIHRoZSBEZXBlbmRlbmN5IEluamVjdGlvbiBndWlkZX0sIGFuZCB1c2VmdWwgZGVidWdnaW5nIGluZm8gd2lsbCBhc3Npc3QgaW5cbiAqICAgdHJhY2tpbmcgZG93biB0aGUgcm9vdCBvZiB0aGVzZSBidWdzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byAqKmF1dG8tYm9vdHN0cmFwKiogYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uLiBUaGUgYG5nQXBwYCBkaXJlY3RpdmVcbiAqIGRlc2lnbmF0ZXMgdGhlICoqcm9vdCBlbGVtZW50Kiogb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBpcyB0eXBpY2FsbHkgcGxhY2VkIG5lYXIgdGhlIHJvb3QgZWxlbWVudFxuICogb2YgdGhlIHBhZ2UgLSBlLmcuIG9uIHRoZSBgPGJvZHk+YCBvciBgPGh0bWw+YCB0YWdzLlxuICpcbiAqIFRoZXJlIGFyZSBhIGZldyB0aGluZ3MgdG8ga2VlcCBpbiBtaW5kIHdoZW4gdXNpbmcgYG5nQXBwYDpcbiAqIC0gb25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGBcbiAqICAgZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJvb3QgZWxlbWVudCB0byBhdXRvLWJvb3RzdHJhcCBhcyBhblxuICogICBhcHBsaWNhdGlvbi4gVG8gcnVuIG11bHRpcGxlIGFwcGxpY2F0aW9ucyBpbiBhbiBIVE1MIGRvY3VtZW50IHlvdSBtdXN0IG1hbnVhbGx5IGJvb3RzdHJhcCB0aGVtIHVzaW5nXG4gKiAgIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC5cbiAqIC0gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICogLSBEbyBub3QgdXNlIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB7QGxpbmsgbmcuJGNvbXBpbGUjdHJhbnNjbHVzaW9uIHRyYW5zY2x1c2lvbn0gb24gdGhlIHNhbWUgZWxlbWVudCBhcyBgbmdBcHBgLlxuICogICBUaGlzIGluY2x1ZGVzIGRpcmVjdGl2ZXMgc3VjaCBhcyB7QGxpbmsgbmcubmdJZiBgbmdJZmB9LCB7QGxpbmsgbmcubmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSBhbmRcbiAqICAge0BsaW5rIG5nUm91dGUubmdWaWV3IGBuZ1ZpZXdgfS5cbiAqICAgRG9pbmcgdGhpcyBtaXNwbGFjZXMgdGhlIGFwcCB7QGxpbmsgbmcuJHJvb3RFbGVtZW50IGAkcm9vdEVsZW1lbnRgfSBhbmQgdGhlIGFwcCdzIHtAbGluayBhdXRvLiRpbmplY3RvciBpbmplY3Rvcn0sXG4gKiAgIGNhdXNpbmcgYW5pbWF0aW9ucyB0byBzdG9wIHdvcmtpbmcgYW5kIG1ha2luZyB0aGUgaW5qZWN0b3IgaW5hY2Nlc3NpYmxlIGZyb20gb3V0c2lkZSB0aGUgYXBwLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBhbiAqKkFuZ3VsYXJKUyBtb2R1bGUqKiB0byBiZSB1c2VkIGFzIHRoZSByb290IG1vZHVsZSBmb3IgdGhlIGFwcGxpY2F0aW9uLiAgVGhpc1xuICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBhdXRvLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkLiBJdFxuICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gKiBjb250YWluIHRoZSBjb2RlLiBTZWUge0BsaW5rIGFuZ3VsYXIubW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICogZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkLCB0aGUgYEFwcENvbnRyb2xsZXJgIHdvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgYW5kIHRoZSBge3sgYStiIH19YFxuICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC5cbiAqXG4gKiBgbmdBcHBgIGlzIHRoZSBlYXNpZXN0LCBhbmQgbW9zdCBjb21tb24gd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwibmdBcHBEZW1vXCIgbmFtZT1cIm5nLWFwcFwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctY29udHJvbGxlcj1cIm5nQXBwRGVtb0NvbnRyb2xsZXJcIj5cbiAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBEZW1vJywgW10pLmNvbnRyb2xsZXIoJ25nQXBwRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAkc2NvcGUuYiA9IDI7XG4gICB9KTtcbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKlxuICogVXNpbmcgYG5nU3RyaWN0RGlgLCB5b3Ugd291bGQgc2VlIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gKlxuIDxleGFtcGxlIG5nLWFwcC1pbmNsdWRlZD1cInRydWVcIiBuYW1lPVwic3RyaWN0LWRpXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1hcHA9XCJuZ0FwcFN0cmljdERlbW9cIiBuZy1zdHJpY3QtZGk+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIxXCI+XG4gICAgICAgICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cblxuICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvXG4gICAgICAgICAgICAgIGluc3RhbnRpYXRlLCBieSB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIHN0eWxlIChzZWVcbiAgICAgICAgICAgICAgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjJcIj5cbiAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPjxiciAvPlxuICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hXG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZVxuICAgICAgICAgICAgICAoc2VlIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQmFkQ29udHJvbGxlclwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhlIGNvbnRyb2xsZXIgY291bGQgbm90IGJlIGluc3RhbnRpYXRlZCwgZHVlIHRvIHJlbHlpbmdcbiAgICAgICAgICAgICAgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb25zICh3aGljaCBhcmUgZGlzYWJsZWQgaW5cbiAgICAgICAgICAgICAgc3RyaWN0IG1vZGUpLiBBcyBzdWNoLCB0aGUgY29udGVudCBvZiB0aGlzIHNlY3Rpb24gaXMgbm90XG4gICAgICAgICAgICAgIGludGVycG9sYXRlZCwgYW5kIHRoZXJlIHNob3VsZCBiZSBhbiBlcnJvciBpbiB5b3VyIHdlYiBjb25zb2xlLlxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcFN0cmljdERlbW8nLCBbXSlcbiAgICAgLy8gQmFkQ29udHJvbGxlciB3aWxsIGZhaWwgdG8gaW5zdGFudGlhdGUsIGR1ZSB0byByZWx5aW5nIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uLFxuICAgICAvLyByYXRoZXIgdGhhbiBhbiBleHBsaWNpdCBhbm5vdGF0aW9uXG4gICAgIC5jb250cm9sbGVyKCdCYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgfSlcbiAgICAgLy8gVW5saWtlIEJhZENvbnRyb2xsZXIsIEdvb2RDb250cm9sbGVyMSBhbmQgR29vZENvbnRyb2xsZXIyIHdpbGwgbm90IGZhaWwgdG8gYmUgaW5zdGFudGlhdGVkLFxuICAgICAvLyBkdWUgdG8gdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbnMgdXNpbmcgdGhlIGFycmF5IHN0eWxlIGFuZCAkaW5qZWN0IHByb3BlcnR5LCByZXNwZWN0aXZlbHkuXG4gICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjEnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH1dKVxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIyJywgR29vZENvbnRyb2xsZXIyKTtcbiAgICAgZnVuY3Rpb24gR29vZENvbnRyb2xsZXIyKCRzY29wZSkge1xuICAgICAgICRzY29wZS5uYW1lID0gJ1dvcmxkJztcbiAgICAgfVxuICAgICBHb29kQ29udHJvbGxlcjIuJGluamVjdCA9IFsnJHNjb3BlJ107XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICBkaXZbbmctY29udHJvbGxlcl0ge1xuICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgICAgcGFkZGluZzogLjVlbTtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1Hb29kXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2O1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZmYwZDg7XG4gICAgICAgY29sb3I6ICMzYzc2M2Q7XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49QmFkXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZWJjY2QxO1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7XG4gICAgICAgY29sb3I6ICNhOTQ0NDI7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgIH1cbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGFuZ3VsYXJJbml0KGVsZW1lbnQsIGJvb3RzdHJhcCkge1xuICB2YXIgYXBwRWxlbWVudCxcbiAgICAgIG1vZHVsZSxcbiAgICAgIGNvbmZpZyA9IHt9O1xuXG4gIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudC5cbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICBtb2R1bGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gIH0pO1xuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuICAgIHZhciBjYW5kaWRhdGU7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgKGNhbmRpZGF0ZSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignWycgKyBuYW1lLnJlcGxhY2UoJzonLCAnXFxcXDonKSArICddJykpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gY2FuZGlkYXRlO1xuICAgICAgbW9kdWxlID0gY2FuZGlkYXRlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoYXBwRWxlbWVudCkge1xuICAgIGlmICghaXNBdXRvQm9vdHN0cmFwQWxsb3dlZCkge1xuICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoJ0FuZ3VsYXI6IGRpc2FibGluZyBhdXRvbWF0aWMgYm9vdHN0cmFwLiA8c2NyaXB0PiBwcm90b2NvbCBpbmRpY2F0ZXMgJyArXG4gICAgICAgICAgJ2FuIGV4dGVuc2lvbiwgZG9jdW1lbnQubG9jYXRpb24uaHJlZiBkb2VzIG5vdCBtYXRjaC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgJ3N0cmljdC1kaScpICE9PSBudWxsO1xuICAgIGJvb3RzdHJhcChhcHBFbGVtZW50LCBtb2R1bGUgPyBbbW9kdWxlXSA6IFtdLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmJvb3RzdHJhcFxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byBtYW51YWxseSBzdGFydCB1cCBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIHtAbGluayBndWlkZS9ib290c3RyYXAgQm9vdHN0cmFwIGd1aWRlfS5cbiAqXG4gKiBBbmd1bGFyIHdpbGwgZGV0ZWN0IGlmIGl0IGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBicm93c2VyIG1vcmUgdGhhbiBvbmNlIGFuZCBvbmx5IGFsbG93IHRoZVxuICogZmlyc3QgbG9hZGVkIHNjcmlwdCB0byBiZSBib290c3RyYXBwZWQgYW5kIHdpbGwgcmVwb3J0IGEgd2FybmluZyB0byB0aGUgYnJvd3NlciBjb25zb2xlIGZvclxuICogZWFjaCBvZiB0aGUgc3Vic2VxdWVudCBzY3JpcHRzLiBUaGlzIHByZXZlbnRzIHN0cmFuZ2UgcmVzdWx0cyBpbiBhcHBsaWNhdGlvbnMsIHdoZXJlIG90aGVyd2lzZVxuICogbXVsdGlwbGUgaW5zdGFuY2VzIG9mIEFuZ3VsYXIgdHJ5IHRvIHdvcmsgb24gdGhlIERPTS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFByb3RyYWN0b3IgYmFzZWQgZW5kLXRvLWVuZCB0ZXN0cyBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb24gdG8gYm9vdHN0cmFwIG1hbnVhbGx5LlxuICogVGhleSBtdXN0IHVzZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfS5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogRG8gbm90IGJvb3RzdHJhcCB0aGUgYXBwIG9uIGFuIGVsZW1lbnQgd2l0aCBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMge0BsaW5rIG5nLiRjb21waWxlI3RyYW5zY2x1c2lvbiB0cmFuc2NsdXNpb259LFxuICogc3VjaCBhcyB7QGxpbmsgbmcubmdJZiBgbmdJZmB9LCB7QGxpbmsgbmcubmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSBhbmQge0BsaW5rIG5nUm91dGUubmdWaWV3IGBuZ1ZpZXdgfS5cbiAqIERvaW5nIHRoaXMgbWlzcGxhY2VzIHRoZSBhcHAge0BsaW5rIG5nLiRyb290RWxlbWVudCBgJHJvb3RFbGVtZW50YH0gYW5kIHRoZSBhcHAncyB7QGxpbmsgYXV0by4kaW5qZWN0b3IgaW5qZWN0b3J9LFxuICogY2F1c2luZyBhbmltYXRpb25zIHRvIHN0b3Agd29ya2luZyBhbmQgbWFraW5nIHRoZSBpbmplY3RvciBpbmFjY2Vzc2libGUgZnJvbSBvdXRzaWRlIHRoZSBhcHAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IWRvY3R5cGUgaHRtbD5cbiAqIDxodG1sPlxuICogPGJvZHk+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJXZWxjb21lQ29udHJvbGxlclwiPlxuICogICB7e2dyZWV0aW5nfX1cbiAqIDwvZGl2PlxuICpcbiAqIDxzY3JpcHQgc3JjPVwiYW5ndWxhci5qc1wiPjwvc2NyaXB0PlxuICogPHNjcmlwdD5cbiAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdkZW1vJywgW10pXG4gKiAgIC5jb250cm9sbGVyKCdXZWxjb21lQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ1dlbGNvbWUhJztcbiAqICAgfSk7XG4gKiAgIGFuZ3VsYXIuYm9vdHN0cmFwKGRvY3VtZW50LCBbJ2RlbW8nXSk7XG4gKiA8L3NjcmlwdD5cbiAqIDwvYm9keT5cbiAqIDwvaHRtbD5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtBcnJheTxTdHJpbmd8RnVuY3Rpb258QXJyYXk+PX0gbW9kdWxlcyBhbiBhcnJheSBvZiBtb2R1bGVzIHRvIGxvYWQgaW50byB0aGUgYXBwbGljYXRpb24uXG4gKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgYnkgdGhlIGluamVjdG9yIGFzIGEgYGNvbmZpZ2AgYmxvY2suXG4gKiAgICAgU2VlOiB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc31cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIGFuIG9iamVjdCBmb3IgZGVmaW5pbmcgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYXBwbGljYXRpb24uIFRoZVxuICogICAgIGZvbGxvd2luZyBrZXlzIGFyZSBzdXBwb3J0ZWQ6XG4gKlxuICogKiBgc3RyaWN0RGlgIC0gZGlzYWJsZSBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGlzIG1lYW50IHRvXG4gKiAgIGFzc2lzdCBpbiBmaW5kaW5nIGJ1Z3Mgd2hpY2ggYnJlYWsgbWluaWZpZWQgY29kZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiBAcmV0dXJucyB7YXV0by4kaW5qZWN0b3J9IFJldHVybnMgdGhlIG5ld2x5IGNyZWF0ZWQgaW5qZWN0b3IgZm9yIHRoaXMgYXBwLlxuICovXG5mdW5jdGlvbiBib290c3RyYXAoZWxlbWVudCwgbW9kdWxlcywgY29uZmlnKSB7XG4gIGlmICghaXNPYmplY3QoY29uZmlnKSkgY29uZmlnID0ge307XG4gIHZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIHN0cmljdERpOiBmYWxzZVxuICB9O1xuICBjb25maWcgPSBleHRlbmQoZGVmYXVsdENvbmZpZywgY29uZmlnKTtcbiAgdmFyIGRvQm9vdHN0cmFwID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50LmluamVjdG9yKCkpIHtcbiAgICAgIHZhciB0YWcgPSAoZWxlbWVudFswXSA9PT0gd2luZG93LmRvY3VtZW50KSA/ICdkb2N1bWVudCcgOiBzdGFydGluZ1RhZyhlbGVtZW50KTtcbiAgICAgIC8vIEVuY29kZSBhbmdsZSBicmFja2V0cyB0byBwcmV2ZW50IGlucHV0IGZyb20gYmVpbmcgc2FuaXRpemVkIHRvIGVtcHR5IHN0cmluZyAjODY4My5cbiAgICAgIHRocm93IG5nTWluRXJyKFxuICAgICAgICAgICdidHN0cnBkJyxcbiAgICAgICAgICAnQXBwIGFscmVhZHkgYm9vdHN0cmFwcGVkIHdpdGggdGhpcyBlbGVtZW50IFxcJ3swfVxcJycsXG4gICAgICAgICAgdGFnLnJlcGxhY2UoLzwvLCcmbHQ7JykucmVwbGFjZSgvPi8sJyZndDsnKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XG4gICAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpO1xuICAgIH1dKTtcblxuICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgLy8gUHVzaGluZyBzbyB0aGF0IHRoaXMgb3ZlcnJpZGVzIGBkZWJ1Z0luZm9FbmFibGVkYCBzZXR0aW5nIGRlZmluZWQgaW4gdXNlcidzIGBtb2R1bGVzYC5cbiAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTtcbiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLFxuICAgICAgIGZ1bmN0aW9uIGJvb3RzdHJhcEFwcGx5KHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3Rvcikge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV1cbiAgICApO1xuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfTtcblxuICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvO1xuXG4gIGlmICh3aW5kb3cgJiYgTkdfRU5BQkxFX0RFQlVHX0lORk8udGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0VOQUJMRV9ERUJVR19JTkZPLCAnJyk7XG4gIH1cblxuICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfVxuXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHtcbiAgICBmb3JFYWNoKGV4dHJhTW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfTtcblxuICBpZiAoaXNGdW5jdGlvbihhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKSkge1xuICAgIGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5yZWxvYWRXaXRoRGVidWdJbmZvXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbG9hZCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiB3aXRoIGRlYnVnIGluZm9ybWF0aW9uIHR1cm5lZCBvbi5cbiAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gKlxuICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWR9IGZvciBtb3JlLlxuICovXG5mdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkge1xuICB3aW5kb3cubmFtZSA9ICdOR19FTkFCTEVfREVCVUdfSU5GTyEnICsgd2luZG93Lm5hbWU7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn1cblxuLyoqXG4gKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gKiBlbGVtZW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RhYmlsaXR5KHJvb3RFbGVtZW50KSB7XG4gIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuZWxlbWVudChyb290RWxlbWVudCkuaW5qZWN0b3IoKTtcbiAgaWYgKCFpbmplY3Rvcikge1xuICAgIHRocm93IG5nTWluRXJyKCd0ZXN0JyxcbiAgICAgICdubyBpbmplY3RvciBmb3VuZCBmb3IgZWxlbWVudCBhcmd1bWVudCB0byBnZXRUZXN0YWJpbGl0eScpO1xuICB9XG4gIHJldHVybiBpbmplY3Rvci5nZXQoJyQkdGVzdGFiaWxpdHknKTtcbn1cblxudmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5mdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUsIHNlcGFyYXRvcikge1xuICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nO1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7XG5mdW5jdGlvbiBiaW5kSlF1ZXJ5KCkge1xuICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7XG5cbiAgaWYgKGJpbmRKUXVlcnlGaXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7XG4gIHZhciBqcU5hbWUgPSBqcSgpO1xuICBqUXVlcnkgPSBpc1VuZGVmaW5lZChqcU5hbWUpID8gd2luZG93LmpRdWVyeSA6ICAgLy8gdXNlIGpRdWVyeSAoaWYgcHJlc2VudClcbiAgICAgICAgICAgIWpxTmFtZSAgICAgICAgICAgICA/IHVuZGVmaW5lZCAgICAgOiAgIC8vIHVzZSBqcUxpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1tqcU5hbWVdOyAgIC8vIHVzZSBqUXVlcnkgc3BlY2lmaWVkIGJ5IGBuZ0pxYFxuXG4gIC8vIFVzZSBqUXVlcnkgaWYgaXQgZXhpc3RzIHdpdGggcHJvcGVyIGZ1bmN0aW9uYWxpdHksIG90aGVyd2lzZSBkZWZhdWx0IHRvIHVzLlxuICAvLyBBbmd1bGFyIDEuMisgcmVxdWlyZXMgalF1ZXJ5IDEuNysgZm9yIG9uKCkvb2ZmKCkgc3VwcG9ydC5cbiAgLy8gQW5ndWxhciAxLjMrIHRlY2huaWNhbGx5IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSAyLjErIGJ1dCBpdCBtYXkgd29yayB3aXRoIG9sZGVyXG4gIC8vIHZlcnNpb25zLiBJdCB3aWxsIG5vdCB3b3JrIGZvciBzdXJlIHdpdGggalF1ZXJ5IDwxLjcsIHRob3VnaC5cbiAgaWYgKGpRdWVyeSAmJiBqUXVlcnkuZm4ub24pIHtcbiAgICBqcUxpdGUgPSBqUXVlcnk7XG4gICAgZXh0ZW5kKGpRdWVyeS5mbiwge1xuICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSxcbiAgICAgIGlzb2xhdGVTY29wZTogSlFMaXRlUHJvdG90eXBlLmlzb2xhdGVTY29wZSxcbiAgICAgIGNvbnRyb2xsZXI6IC8qKiBAdHlwZSB7P30gKi8gKEpRTGl0ZVByb3RvdHlwZSkuY29udHJvbGxlcixcbiAgICAgIGluamVjdG9yOiBKUUxpdGVQcm90b3R5cGUuaW5qZWN0b3IsXG4gICAgICBpbmhlcml0ZWREYXRhOiBKUUxpdGVQcm90b3R5cGUuaW5oZXJpdGVkRGF0YVxuICAgIH0pO1xuXG4gICAgLy8gQWxsIG5vZGVzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHZpYSB2YXJpb3VzIGpRdWVyeSBBUElzIGxpa2UgLnJlbW92ZSgpXG4gICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlXG4gICAgLy8gdGhlICRkZXN0cm95IGV2ZW50IG9uIGFsbCByZW1vdmVkIG5vZGVzLlxuICAgIG9yaWdpbmFsQ2xlYW5EYXRhID0galF1ZXJ5LmNsZWFuRGF0YTtcbiAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgIHZhciBldmVudHM7XG4gICAgICBmb3IgKHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG4gICAgICAgIGV2ZW50cyA9IGpRdWVyeS5fZGF0YShlbGVtLCAnZXZlbnRzJyk7XG4gICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgICAgalF1ZXJ5KGVsZW0pLnRyaWdnZXJIYW5kbGVyKCckZGVzdHJveScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcmlnaW5hbENsZWFuRGF0YShlbGVtcyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGUgPSBKUUxpdGU7XG4gIH1cblxuICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7XG5cbiAgLy8gUHJldmVudCBkb3VibGUtcHJveHlpbmcuXG4gIGJpbmRKUXVlcnlGaXJlZCA9IHRydWU7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LlxuICovXG5mdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHtcbiAgaWYgKCFhcmcpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYXJlcScsICdBcmd1bWVudCBcXCd7MH1cXCcgaXMgezF9JywgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCAncmVxdWlyZWQnKSk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXJnRm4oYXJnLCBuYW1lLCBhY2NlcHRBcnJheUFubm90YXRpb24pIHtcbiAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHtcbiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07XG4gIH1cblxuICBhc3NlcnRBcmcoaXNGdW5jdGlvbihhcmcpLCBuYW1lLCAnbm90IGEgZnVuY3Rpb24sIGdvdCAnICtcbiAgICAgIChhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgPyBhcmcuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JyA6IHR5cGVvZiBhcmcpKTtcbiAgcmV0dXJuIGFyZztcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgbmFtZSBnaXZlbiBpcyBoYXNPd25Qcm9wZXJ0eVxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgIHRoZSBuYW1lIHRvIHRlc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gY29udGV4dCB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgbmFtZSBpcyB1c2VkLCBzdWNoIGFzIG1vZHVsZSBvciBkaXJlY3RpdmVcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkge1xuICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgJ2hhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lJywgY29udGV4dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBzdGFydGluZyBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIHBhdGggdG8gdHJhdmVyc2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpbmRGblRvU2NvcGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlIGFzIGFjY2Vzc2libGUgYnkgcGF0aFxuICovXG4vL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWRcbmZ1bmN0aW9uIGdldHRlcihvYmosIHBhdGgsIGJpbmRGblRvU2NvcGUpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4gb2JqO1xuICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgdmFyIGtleTtcbiAgdmFyIGxhc3RJbnN0YW5jZSA9IG9iajtcbiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChvYmopIHtcbiAgICAgIG9iaiA9IChsYXN0SW5zdGFuY2UgPSBvYmopW2tleV07XG4gICAgfVxuICB9XG4gIGlmICghYmluZEZuVG9TY29wZSAmJiBpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIERPTSBzaWJsaW5ncyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIGluIHRoZSBnaXZlbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGxpa2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9IHRoZSBpbnB1dHRlZCBvYmplY3Qgb3IgYSBqcUxpdGUgY29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBub2Rlc1xuICovXG5mdW5jdGlvbiBnZXRCbG9ja05vZGVzKG5vZGVzKSB7XG4gIC8vIFRPRE8ocGVyZik6IHVwZGF0ZSBgbm9kZXNgIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0P1xuICB2YXIgbm9kZSA9IG5vZGVzWzBdO1xuICB2YXIgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYmxvY2tOb2RlcztcblxuICBmb3IgKHZhciBpID0gMTsgbm9kZSAhPT0gZW5kTm9kZSAmJiAobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpOyBpKyspIHtcbiAgICBpZiAoYmxvY2tOb2RlcyB8fCBub2Rlc1tpXSAhPT0gbm9kZSkge1xuICAgICAgaWYgKCFibG9ja05vZGVzKSB7XG4gICAgICAgIGJsb2NrTm9kZXMgPSBqcUxpdGUoc2xpY2UuY2FsbChub2RlcywgMCwgaSkpO1xuICAgICAgfVxuICAgICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9ja05vZGVzIHx8IG5vZGVzO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG9cbiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICpcbiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcHJvdG8tbWFwLWxvb2t1cC8yXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHsgLy8gbnVsbCB8fCB1bmRlZmluZWRcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaGFzQ3VzdG9tVG9TdHJpbmcodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHRvSnNvbih2YWx1ZSk7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBOT0RFX1RZUEVfRUxFTUVOVCA9IDE7XG52YXIgTk9ERV9UWVBFX0FUVFJJQlVURSA9IDI7XG52YXIgTk9ERV9UWVBFX1RFWFQgPSAzO1xudmFyIE5PREVfVFlQRV9DT01NRU5UID0gODtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlQgPSA5O1xudmFyIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA9IDExO1xuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBhbmd1bGFyLk1vZHVsZVxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogSW50ZXJmYWNlIGZvciBjb25maWd1cmluZyBhbmd1bGFyIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfS5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpIHtcblxuICB2YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcbiAgdmFyIG5nTWluRXJyID0gbWluRXJyKCduZycpO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZShvYmosIG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gb2JqW25hbWVdIHx8IChvYmpbbmFtZV0gPSBmYWN0b3J5KCkpO1xuICB9XG5cbiAgdmFyIGFuZ3VsYXIgPSBlbnN1cmUod2luZG93LCAnYW5ndWxhcicsIE9iamVjdCk7XG5cbiAgLy8gV2UgbmVlZCB0byBleHBvc2UgYGFuZ3VsYXIuJCRtaW5FcnJgIHRvIG1vZHVsZXMgc3VjaCBhcyBgbmdSZXNvdXJjZWAgdGhhdCByZWZlcmVuY2UgaXQgZHVyaW5nIGJvb3RzdHJhcFxuICBhbmd1bGFyLiQkbWluRXJyID0gYW5ndWxhci4kJG1pbkVyciB8fCBtaW5FcnI7XG5cbiAgcmV0dXJuIGVuc3VyZShhbmd1bGFyLCAnbW9kdWxlJywgZnVuY3Rpb24oKSB7XG4gICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYW5ndWxhci5Nb2R1bGU+fSAqL1xuICAgIHZhciBtb2R1bGVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBhbmd1bGFyLm1vZHVsZVxuICAgICAqIEBtb2R1bGUgbmdcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRoZSBgYW5ndWxhci5tb2R1bGVgIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmcgYW5kIHJldHJpZXZpbmcgQW5ndWxhclxuICAgICAqIG1vZHVsZXMuXG4gICAgICogQWxsIG1vZHVsZXMgKGFuZ3VsYXIgY29yZSBvciAzcmQgcGFydHkpIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSB0byBhbiBhcHBsaWNhdGlvbiBtdXN0IGJlXG4gICAgICogcmVnaXN0ZXJlZCB1c2luZyB0aGlzIG1lY2hhbmlzbS5cbiAgICAgKlxuICAgICAqIFBhc3Npbmcgb25lIGFyZ3VtZW50IHJldHJpZXZlcyBhbiBleGlzdGluZyB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9LFxuICAgICAqIHdoZXJlYXMgcGFzc2luZyBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGNyZWF0ZXMgYSBuZXcge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfVxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIE1vZHVsZVxuICAgICAqXG4gICAgICogQSBtb2R1bGUgaXMgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzLCBkaXJlY3RpdmVzLCBjb250cm9sbGVycywgZmlsdGVycywgYW5kIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgICogYGFuZ3VsYXIubW9kdWxlYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGVcbiAgICAgKiB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSk7XG4gICAgICpcbiAgICAgKiAvLyByZWdpc3RlciBhIG5ldyBzZXJ2aWNlXG4gICAgICogbXlNb2R1bGUudmFsdWUoJ2FwcE5hbWUnLCAnTXlDb29sQXBwJyk7XG4gICAgICpcbiAgICAgKiAvLyBjb25maWd1cmUgZXhpc3Rpbmcgc2VydmljZXMgaW5zaWRlIGluaXRpYWxpemF0aW9uIGJsb2Nrcy5cbiAgICAgKiBteU1vZHVsZS5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICogICAvLyBDb25maWd1cmUgZXhpc3RpbmcgcHJvdmlkZXJzXG4gICAgICogICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCchJyk7XG4gICAgICogfV0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlbiB5b3UgY2FuIGNyZWF0ZSBhbiBpbmplY3RvciBhbmQgbG9hZCB5b3VyIG1vZHVsZXMgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnbXlNb2R1bGUnXSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEhvd2V2ZXIgaXQncyBtb3JlIGxpa2VseSB0aGF0IHlvdSdsbCBqdXN0IHVzZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IG9yXG4gICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIGNyZWF0ZSBvciByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPj19IHJlcXVpcmVzIElmIHNwZWNpZmllZCB0aGVuIG5ldyBtb2R1bGUgaXMgYmVpbmcgY3JlYXRlZC4gSWZcbiAgICAgKiAgICAgICAgdW5zcGVjaWZpZWQgdGhlbiB0aGUgbW9kdWxlIGlzIGJlaW5nIHJldHJpZXZlZCBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzXG4gICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWcgTW9kdWxlI2NvbmZpZygpfS5cbiAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHtcblxuICAgICAgdmFyIGluZm8gPSB7fTtcblxuICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgY29udGV4dCkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgICAgICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgJ2hhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lJywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdtb2R1bGUnKTtcbiAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIG1vZHVsZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbm9tb2QnLCAnTW9kdWxlIFxcJ3swfVxcJyBpcyBub3QgYXZhaWxhYmxlISBZb3UgZWl0aGVyIG1pc3NwZWxsZWQgJyArXG4gICAgICAgICAgICAgJ3RoZSBtb2R1bGUgbmFtZSBvciBmb3Jnb3QgdG8gbG9hZCBpdC4gSWYgcmVnaXN0ZXJpbmcgYSBtb2R1bGUgZW5zdXJlIHRoYXQgeW91ICcgK1xuICAgICAgICAgICAgICdzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4nLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqL1xuICAgICAgICB2YXIgaW52b2tlUXVldWUgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgY29uZmlnQmxvY2tzID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIHJ1bkJsb2NrcyA9IFtdO1xuXG4gICAgICAgIHZhciBjb25maWcgPSBpbnZva2VMYXRlcignJGluamVjdG9yJywgJ2ludm9rZScsICdwdXNoJywgY29uZmlnQmxvY2tzKTtcblxuICAgICAgICAvKiogQHR5cGUge2FuZ3VsYXIuTW9kdWxlfSAqL1xuICAgICAgICB2YXIgbW9kdWxlSW5zdGFuY2UgPSB7XG4gICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZVxuICAgICAgICAgIF9pbnZva2VRdWV1ZTogaW52b2tlUXVldWUsXG4gICAgICAgICAgX2NvbmZpZ0Jsb2NrczogY29uZmlnQmxvY2tzLFxuICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNpbmZvXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBpbmZvIEluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2R1bGVcbiAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fE1vZHVsZX0gVGhlIGN1cnJlbnQgaW5mbyBvYmplY3QgZm9yIHRoaXMgbW9kdWxlIGlmIGNhbGxlZCBhcyBhIGdldHRlcixcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlci5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFJlYWQgYW5kIHdyaXRlIGN1c3RvbSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIG1vZHVsZS5cbiAgICAgICAgICAgKiBGb3IgZXhhbXBsZSB5b3UgY291bGQgcHV0IHRoZSB2ZXJzaW9uIG9mIHRoZSBtb2R1bGUgaW4gaGVyZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pLmluZm8oeyB2ZXJzaW9uOiAnMS4wLjAnIH0pO1xuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVGhlIHZlcnNpb24gY291bGQgdGhlbiBiZSByZWFkIGJhY2sgb3V0IGJ5IGFjY2Vzc2luZyB0aGUgbW9kdWxlIGVsc2V3aGVyZTpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqIHZhciB2ZXJzaW9uID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJykuaW5mbygpLnZlcnNpb247XG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBZb3UgY2FuIGFsc28gcmV0cmlldmUgdGhpcyBpbmZvcm1hdGlvbiBkdXJpbmcgcnVudGltZSB2aWEgdGhlXG4gICAgICAgICAgICoge0BsaW5rICRpbmplY3RvciNtb2R1bGVzIGAkaW5qZWN0b3IubW9kdWxlc2B9IHByb3BlcnR5OlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgKiB2YXIgdmVyc2lvbiA9ICRpbmplY3Rvci5tb2R1bGVzWydteU1vZHVsZSddLmluZm8oKS52ZXJzaW9uO1xuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqL1xuICAgICAgICAgIGluZm86IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkgdGhyb3cgbmdNaW5FcnIoJ2FvYmonLCAnQXJndW1lbnQgXFwnezB9XFwnIG11c3QgYmUgYW4gb2JqZWN0JywgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgIGluZm8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXNcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBIb2xkcyB0aGUgbGlzdCBvZiBtb2R1bGVzIHdoaWNoIHRoZSBpbmplY3RvciB3aWxsIGxvYWQgYmVmb3JlIHRoZSBjdXJyZW50IG1vZHVsZSBpc1xuICAgICAgICAgICAqIGxvYWRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogTmFtZSBvZiB0aGUgbW9kdWxlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG5cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNwcm92aWRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlclR5cGUgQ29uc3RydWN0aW9uIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHByb3ZpZGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlckZ1bmN0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2ZhY3RvcnknKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNzZXJ2aWNlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnc2VydmljZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YWx1ZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3ZhbHVlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnRcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IENvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50cyBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy5cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgJHByb3ZpZGUuY29uc3RhbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksXG5cbiAgICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RlY29yYXRvclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkZWNvckZuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkIHJldHVybiB0aGUgZGVjb3JhdGVkIHNlcnZpY2UgaW5zdGFuY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciAkcHJvdmlkZS5kZWNvcmF0b3IoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGVjb3JhdG9yOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2RlY29yYXRvcicsIGNvbmZpZ0Jsb2NrcyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGFuaW1hdGlvbiBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW5cbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqICoqTk9URSoqOiBhbmltYXRpb25zIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGhcbiAgICAgICAgICAgKiB7QGxpbmsgJGFuaW1hdGUgJGFuaW1hdGV9IHNlcnZpY2UgYW5kIGRpcmVjdGl2ZXMgdGhhdCB1c2UgdGhpcyBzZXJ2aWNlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgKiBtb2R1bGUuYW5pbWF0aW9uKCcuYW5pbWF0aW9uLW5hbWUnLCBmdW5jdGlvbigkaW5qZWN0MSwgJGluamVjdDIpIHtcbiAgICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAgICogICAgIGV2ZW50TmFtZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcbiAgICAgICAgICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgICAgICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICB9XG4gICAgICAgICAgICogICAgIH1cbiAgICAgICAgICAgKiAgIH1cbiAgICAgICAgICAgKiB9KVxuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kXG4gICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZSAtIHRoaXMgbXVzdCBiZSBhIHZhbGlkIGFuZ3VsYXIgZXhwcmVzc2lvbiBpZGVudGlmaWVyXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICAgICAgICAgKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgICAgICAgICAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgICAgICAgICAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAgICAgICAgICogPC9kaXY+XG4gICAgICAgICAgICovXG4gICAgICAgICAgZmlsdGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRmaWx0ZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGNvbnRyb2xsZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb250cm9sbGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkaXJlY3RpdmVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mXG4gICAgICAgICAgICogZGlyZWN0aXZlcy5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRpcmVjdGl2ZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29tcGlsZVByb3ZpZGVyJywgJ2RpcmVjdGl2ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbXBvbmVudFxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWwtY2FzZSAoaS5lLiBteUNvbXAgd2hpY2ggd2lsbCBtYXRjaCBhcyBteS1jb21wKVxuICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdCAoYSBzaW1wbGlmaWVkXG4gICAgICAgICAgICogICAge0BsaW5rIG5nLiRjb21waWxlI2RpcmVjdGl2ZS1kZWZpbml0aW9uLW9iamVjdCBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3R9KVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2NvbXBvbmVudCAkY29tcGlsZVByb3ZpZGVyLmNvbXBvbmVudCgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb21wb25lbnQ6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbXBpbGVQcm92aWRlcicsICdjb21wb25lbnQnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25maWdcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2VcbiAgICAgICAgICAgKiAgICBjb25maWd1cmF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy5cbiAgICAgICAgICAgKiBGb3IgbW9yZSBhYm91dCBob3cgdG8gY29uZmlndXJlIHNlcnZpY2VzLCBzZWVcbiAgICAgICAgICAgKiB7QGxpbmsgcHJvdmlkZXJzI3Byb3ZpZGVyLXJlY2lwZSBQcm92aWRlciBSZWNpcGV9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1blxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cbiAgICAgICAgICAgKiAgICBVc2VmdWwgZm9yIGFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxuICAgICAgICAgICAqIGxvYWRpbmcgYWxsIG1vZHVsZXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWdGbikge1xuICAgICAgICAgIGNvbmZpZyhjb25maWdGbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZShwcm92aWRlciwgbWV0aG9kLCBxdWV1ZSkge1xuICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlY2lwZU5hbWUsIGZhY3RvcnlGdW5jdGlvbikge1xuICAgICAgICAgICAgaWYgKGZhY3RvcnlGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGZhY3RvcnlGdW5jdGlvbikpIGZhY3RvcnlGdW5jdGlvbi4kJG1vZHVsZU5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgcXVldWUucHVzaChbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbn1cblxuLyogZ2xvYmFsIHNoYWxsb3dDb3B5OiB0cnVlICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QsIGFuIGFycmF5IG9yIGEgcHJpbWl0aXZlLlxuICpcbiAqIEFzc3VtZXMgdGhhdCB0aGVyZSBhcmUgbm8gcHJvdG8gcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHtcbiAgaWYgKGlzQXJyYXkoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNyYy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBkc3RbaV0gPSBzcmNbaV07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICBpZiAoIShrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSkge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkc3QgfHwgc3JjO1xufVxuXG4vKiBnbG9iYWwgdG9EZWJ1Z1N0cmluZzogdHJ1ZSAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCkge1xuICB2YXIgc2VlbiA9IFtdO1xuXG4gIC8vIFRoZXJlIGlzIG5vIGRpcmVjdCB3YXkgdG8gc3RyaW5naWZ5IG9iamVjdCB1bnRpbCByZWFjaGluZyBhIHNwZWNpZmljIGRlcHRoXG4gIC8vIGFuZCBhIHZlcnkgZGVlcCBvYmplY3QgY2FuIGNhdXNlIGEgcGVyZm9ybWFuY2UgaXNzdWUsIHNvIHdlIGNvcHkgdGhlIG9iamVjdFxuICAvLyBiYXNlZCBvbiB0aGlzIHNwZWNpZmljIGRlcHRoIGFuZCB0aGVuIHN0cmluZ2lmeSBpdC5cbiAgaWYgKGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkpIHtcbiAgICBvYmogPSBjb3B5KG9iaiwgbnVsbCwgbWF4RGVwdGgpO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgdmFsID0gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWwpO1xuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG5cbiAgICAgIGlmIChzZWVuLmluZGV4T2YodmFsKSA+PSAwKSByZXR1cm4gJy4uLic7XG5cbiAgICAgIHNlZW4ucHVzaCh2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdG9EZWJ1Z1N0cmluZyhvYmosIG1heERlcHRoKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xuICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplT2JqZWN0KG9iaiwgbWF4RGVwdGgpO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qIGdsb2JhbCBhbmd1bGFyTW9kdWxlOiB0cnVlLFxuICB2ZXJzaW9uOiB0cnVlLFxuXG4gICRDb21waWxlUHJvdmlkZXIsXG5cbiAgaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGlucHV0RGlyZWN0aXZlLFxuICBmb3JtRGlyZWN0aXZlLFxuICBzY3JpcHREaXJlY3RpdmUsXG4gIHNlbGVjdERpcmVjdGl2ZSxcbiAgb3B0aW9uRGlyZWN0aXZlLFxuICBuZ0JpbmREaXJlY3RpdmUsXG4gIG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxuICBuZ0NsYXNzRGlyZWN0aXZlLFxuICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgbmdDbG9ha0RpcmVjdGl2ZSxcbiAgbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICBuZ0Zvcm1EaXJlY3RpdmUsXG4gIG5nSGlkZURpcmVjdGl2ZSxcbiAgbmdJZkRpcmVjdGl2ZSxcbiAgbmdJbmNsdWRlRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSxcbiAgbmdJbml0RGlyZWN0aXZlLFxuICBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgbmdSZXBlYXREaXJlY3RpdmUsXG4gIG5nU2hvd0RpcmVjdGl2ZSxcbiAgbmdTdHlsZURpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEaXJlY3RpdmUsXG4gIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgbmdNb2RlbERpcmVjdGl2ZSxcbiAgbmdMaXN0RGlyZWN0aXZlLFxuICBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIHJlcXVpcmVkRGlyZWN0aXZlLFxuICBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG5nVmFsdWVEaXJlY3RpdmUsXG4gIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlLFxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyxcbiAgbmdFdmVudERpcmVjdGl2ZXMsXG5cbiAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAkQW5pbWF0ZVByb3ZpZGVyLFxuICAkQ29yZUFuaW1hdGVDc3NQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIsXG4gICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIsXG4gICQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyLFxuICAkQnJvd3NlclByb3ZpZGVyLFxuICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsXG4gICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICREYXRlUHJvdmlkZXIsXG4gICREb2N1bWVudFByb3ZpZGVyLFxuICAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcixcbiAgJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgJEZpbHRlclByb3ZpZGVyLFxuICAkJEZvcmNlUmVmbG93UHJvdmlkZXIsXG4gICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAkSW50ZXJ2YWxQcm92aWRlcixcbiAgJEh0dHBQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcixcbiAgJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICR4aHJGYWN0b3J5UHJvdmlkZXIsXG4gICRqc29ucENhbGxiYWNrc1Byb3ZpZGVyLFxuICAkTG9jYXRpb25Qcm92aWRlcixcbiAgJExvZ1Byb3ZpZGVyLFxuICAkJE1hcFByb3ZpZGVyLFxuICAkUGFyc2VQcm92aWRlcixcbiAgJFJvb3RTY29wZVByb3ZpZGVyLFxuICAkUVByb3ZpZGVyLFxuICAkJFFQcm92aWRlcixcbiAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLFxuICAkU2NlUHJvdmlkZXIsXG4gICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAkU25pZmZlclByb3ZpZGVyLFxuICAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgJFRpbWVvdXRQcm92aWRlcixcbiAgJCRSQUZQcm92aWRlcixcbiAgJFdpbmRvd1Byb3ZpZGVyLFxuICAkJGpxTGl0ZVByb3ZpZGVyLFxuICAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4qL1xuXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgYW5ndWxhci52ZXJzaW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IEFuZ3VsYXJKUyB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgb2JqZWN0IGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgXCIwLjkuMThcIi5cbiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIwXCIuXG4gKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiOVwiLlxuICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMThcIi5cbiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzIFwiamlnZ2xpbmctYXJtZmF0XCIuXG4gKi9cbnZhciB2ZXJzaW9uID0ge1xuICAvLyBUaGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQncyBgYnVpbGRgIHRhc2suXG4gIC8vIFRoZXkgbmVlZCB0byBiZSBkb3VibGUtIG9yIHNpbmdsZS1xdW90ZWQuXG4gIGZ1bGw6ICcxLjYuNCcsXG4gIG1ham9yOiAxLFxuICBtaW5vcjogNixcbiAgZG90OiA0LFxuICBjb2RlTmFtZTogJ3BoZW5vbWVuYWwtZm9vdG5vdGUnXG59O1xuXG5cbmZ1bmN0aW9uIHB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKSB7XG4gIGV4dGVuZChhbmd1bGFyLCB7XG4gICAgJ2Vycm9ySGFuZGxpbmdDb25maWcnOiBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICAgICdib290c3RyYXAnOiBib290c3RyYXAsXG4gICAgJ2NvcHknOiBjb3B5LFxuICAgICdleHRlbmQnOiBleHRlbmQsXG4gICAgJ21lcmdlJzogbWVyZ2UsXG4gICAgJ2VxdWFscyc6IGVxdWFscyxcbiAgICAnZWxlbWVudCc6IGpxTGl0ZSxcbiAgICAnZm9yRWFjaCc6IGZvckVhY2gsXG4gICAgJ2luamVjdG9yJzogY3JlYXRlSW5qZWN0b3IsXG4gICAgJ25vb3AnOiBub29wLFxuICAgICdiaW5kJzogYmluZCxcbiAgICAndG9Kc29uJzogdG9Kc29uLFxuICAgICdmcm9tSnNvbic6IGZyb21Kc29uLFxuICAgICdpZGVudGl0eSc6IGlkZW50aXR5LFxuICAgICdpc1VuZGVmaW5lZCc6IGlzVW5kZWZpbmVkLFxuICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsXG4gICAgJ2lzU3RyaW5nJzogaXNTdHJpbmcsXG4gICAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uLFxuICAgICdpc09iamVjdCc6IGlzT2JqZWN0LFxuICAgICdpc051bWJlcic6IGlzTnVtYmVyLFxuICAgICdpc0VsZW1lbnQnOiBpc0VsZW1lbnQsXG4gICAgJ2lzQXJyYXknOiBpc0FycmF5LFxuICAgICd2ZXJzaW9uJzogdmVyc2lvbixcbiAgICAnaXNEYXRlJzogaXNEYXRlLFxuICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsXG4gICAgJ3VwcGVyY2FzZSc6IHVwcGVyY2FzZSxcbiAgICAnY2FsbGJhY2tzJzogeyQkY291bnRlcjogMH0sXG4gICAgJ2dldFRlc3RhYmlsaXR5JzogZ2V0VGVzdGFiaWxpdHksXG4gICAgJ3JlbG9hZFdpdGhEZWJ1Z0luZm8nOiByZWxvYWRXaXRoRGVidWdJbmZvLFxuICAgICckJG1pbkVycic6IG1pbkVycixcbiAgICAnJCRjc3AnOiBjc3AsXG4gICAgJyQkZW5jb2RlVXJpU2VnbWVudCc6IGVuY29kZVVyaVNlZ21lbnQsXG4gICAgJyQkZW5jb2RlVXJpUXVlcnknOiBlbmNvZGVVcmlRdWVyeSxcbiAgICAnJCRzdHJpbmdpZnknOiBzdHJpbmdpZnlcbiAgfSk7XG5cbiAgYW5ndWxhck1vZHVsZSA9IHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdyk7XG5cbiAgYW5ndWxhck1vZHVsZSgnbmcnLCBbJ25nTG9jYWxlJ10sIFsnJHByb3ZpZGUnLFxuICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7XG4gICAgICAvLyAkJHNhbml0aXplVXJpUHJvdmlkZXIgbmVlZHMgdG8gYmUgYmVmb3JlICRjb21waWxlUHJvdmlkZXIgYXMgaXQgaXMgdXNlZCBieSBpdC5cbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyXG4gICAgICB9KTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCckY29tcGlsZScsICRDb21waWxlUHJvdmlkZXIpLlxuICAgICAgICBkaXJlY3RpdmUoe1xuICAgICAgICAgICAgYTogaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIGZvcm06IGZvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZEh0bWw6IG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc0V2ZW46IG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NvbnRyb2xsZXI6IG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0lmOiBuZ0lmRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTm9uQmluZGFibGU6IG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1Nob3c6IG5nU2hvd0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1RyYW5zY2x1ZGU6IG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2hhbmdlOiBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNaW5sZW5ndGg6IG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmVcbiAgICAgICAgfSkuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzKS5cbiAgICAgICAgZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJGFuY2hvclNjcm9sbDogJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlcixcbiAgICAgICAgJGFuaW1hdGVDc3M6ICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAgICAgICAkJGFuaW1hdGVKczogJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZVF1ZXVlOiAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcixcbiAgICAgICAgJCRBbmltYXRlUnVubmVyOiAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZUFzeW5jUnVuOiAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsXG4gICAgICAgICRjYWNoZUZhY3Rvcnk6ICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGNvbnRyb2xsZXI6ICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsXG4gICAgICAgICQkaXNEb2N1bWVudEhpZGRlbjogJCRJc0RvY3VtZW50SGlkZGVuUHJvdmlkZXIsXG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyOiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAgICAgICAkZmlsdGVyOiAkRmlsdGVyUHJvdmlkZXIsXG4gICAgICAgICQkZm9yY2VSZWZsb3c6ICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgICAgICAgJGludGVycG9sYXRlOiAkSW50ZXJwb2xhdGVQcm92aWRlcixcbiAgICAgICAgJGludGVydmFsOiAkSW50ZXJ2YWxQcm92aWRlcixcbiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVyOiAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyLFxuICAgICAgICAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZTogJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcixcbiAgICAgICAgJGh0dHBCYWNrZW5kOiAkSHR0cEJhY2tlbmRQcm92aWRlcixcbiAgICAgICAgJHhockZhY3Rvcnk6ICR4aHJGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICRqc29ucENhbGxiYWNrczogJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsXG4gICAgICAgICRsb2c6ICRMb2dQcm92aWRlcixcbiAgICAgICAgJHBhcnNlOiAkUGFyc2VQcm92aWRlcixcbiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLFxuICAgICAgICAkcTogJFFQcm92aWRlcixcbiAgICAgICAgJCRxOiAkJFFQcm92aWRlcixcbiAgICAgICAgJHNjZTogJFNjZVByb3ZpZGVyLFxuICAgICAgICAkc2NlRGVsZWdhdGU6ICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6ICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgICAgICAgJCR0ZXN0YWJpbGl0eTogJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlcixcbiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyLFxuICAgICAgICAkJHJBRjogJCRSQUZQcm92aWRlcixcbiAgICAgICAgJCRqcUxpdGU6ICQkanFMaXRlUHJvdmlkZXIsXG4gICAgICAgICQkTWFwOiAkJE1hcFByb3ZpZGVyLFxuICAgICAgICAkJGNvb2tpZVJlYWRlcjogJCRDb29raWVSZWFkZXJQcm92aWRlclxuICAgICAgfSk7XG4gICAgfVxuICBdKVxuICAuaW5mbyh7IGFuZ3VsYXJWZXJzaW9uOiAnMS42LjQnIH0pO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiBnbG9iYWxcbiAgSlFMaXRlUHJvdG90eXBlOiB0cnVlLFxuICBCT09MRUFOX0FUVFI6IHRydWUsXG4gIEFMSUFTRURfQVRUUjogdHJ1ZVxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9KUUxpdGVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdyYXBzIGEgcmF3IERPTSBlbGVtZW50IG9yIEhUTUwgc3RyaW5nIGFzIGEgW2pRdWVyeV0oaHR0cDovL2pxdWVyeS5jb20pIGVsZW1lbnQuXG4gKlxuICogSWYgalF1ZXJ5IGlzIGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGAgaXMgYW4gYWxpYXMgZm9yIHRoZVxuICogW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLiBJZiBqUXVlcnkgaXMgbm90IGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGBcbiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkIFwialF1ZXJ5IGxpdGVcIiBvciAqKmpxTGl0ZSoqLlxuICpcbiAqIGpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3NcbiAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdFxuICogY29tbW9ubHkgbmVlZGVkIGZ1bmN0aW9uYWxpdHkgd2l0aCB0aGUgZ29hbCBvZiBoYXZpbmcgYSB2ZXJ5IHNtYWxsIGZvb3RwcmludC5cbiAqXG4gKiBUbyB1c2UgYGpRdWVyeWAsIHNpbXBseSBlbnN1cmUgaXQgaXMgbG9hZGVkIGJlZm9yZSB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuIFlvdSBjYW4gYWxzbyB1c2UgdGhlXG4gKiB7QGxpbmsgbmdKcSBgbmdKcWB9IGRpcmVjdGl2ZSB0byBzcGVjaWZ5IHRoYXQganFsaXRlIHNob3VsZCBiZSB1c2VkIG92ZXIgalF1ZXJ5LCBvciB0byB1c2UgYVxuICogc3BlY2lmaWMgdmVyc2lvbiBvZiBqUXVlcnkgaWYgbXVsdGlwbGUgdmVyc2lvbnMgZXhpc3Qgb24gdGhlIHBhZ2UuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj4qKk5vdGU6KiogQWxsIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBBbmd1bGFyIGFyZSBhbHdheXMgd3JhcHBlZCB3aXRoIGpRdWVyeSBvclxuICoganFMaXRlIChzdWNoIGFzIHRoZSBlbGVtZW50IGFyZ3VtZW50IGluIGEgZGlyZWN0aXZlJ3MgY29tcGlsZSAvIGxpbmsgZnVuY3Rpb24pLiBUaGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj4qKk5vdGU6KiogS2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBmaW5kIGVsZW1lbnRzXG4gKiBieSB0YWcgbmFtZSAvIENTUyBzZWxlY3Rvci4gRm9yIGxvb2t1cHMgYnkgdGFnIG5hbWUsIHRyeSBpbnN0ZWFkIGBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoLi4uKWBcbiAqIG9yIGAkZG9jdW1lbnQuZmluZCgpYCwgb3IgdXNlIHRoZSBzdGFuZGFyZCBET00gQVBJcywgZS5nLiBgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpYC48L2Rpdj5cbiAqXG4gKiAjIyBBbmd1bGFyJ3MganFMaXRlXG4gKiBqcUxpdGUgcHJvdmlkZXMgb25seSB0aGUgZm9sbG93aW5nIGpRdWVyeSBtZXRob2RzOlxuICpcbiAqIC0gW2BhZGRDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FkZENsYXNzLykgLSBEb2VzIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcbiAqIC0gW2BhZnRlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FmdGVyLylcbiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKVxuICogLSBbYGF0dHIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hdHRyLykgLSBEb2VzIG5vdCBzdXBwb3J0IGZ1bmN0aW9ucyBhcyBwYXJhbWV0ZXJzXG4gKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2JpbmQvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykpIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgY2hpbGRyZW4oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jaGlsZHJlbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BjbG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLylcbiAqIC0gW2Bjb250ZW50cygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRlbnRzLylcbiAqIC0gW2Bjc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvKSAtIE9ubHkgcmV0cmlldmVzIGlubGluZS1zdHlsZXMsIGRvZXMgbm90IGNhbGwgYGdldENvbXB1dGVkU3R5bGUoKWAuXG4gKiAgIEFzIGEgc2V0dGVyLCBkb2VzIG5vdCBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5ncyBvciBhcHBlbmQgJ3B4JywgYW5kIGFsc28gZG9lcyBub3QgaGF2ZSBhdXRvbWF0aWMgcHJvcGVydHkgcHJlZml4aW5nLlxuICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLylcbiAqIC0gW2BkZXRhY2goKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kZXRhY2gvKVxuICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKVxuICogLSBbYGVxKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZXEvKVxuICogLSBbYGZpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9maW5kLykgLSBMaW1pdGVkIHRvIGxvb2t1cHMgYnkgdGFnIG5hbWVcbiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLylcbiAqIC0gW2BodG1sKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaHRtbC8pXG4gKiAtIFtgbmV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL25leHQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudCBvYmplY3QgYXMgcGFyYW1ldGVyXG4gKiAtIFtgb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb25lLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYHByZXBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kLylcbiAqIC0gW2Bwcm9wKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJvcC8pXG4gKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pIChfZGVwcmVjYXRlZF8sIHVzZSBgYW5ndWxhci5lbGVtZW50KGNhbGxiYWNrKWAgaW5zdGVhZCBvZiBgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShjYWxsYmFjaylgKVxuICogLSBbYHJlbW92ZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pXG4gKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgYXR0cmlidXRlc1xuICogLSBbYHJlbW92ZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQ2xhc3MvKSAtIERvZXMgbm90IHN1cHBvcnQgYSBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudFxuICogLSBbYHJlbW92ZURhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLylcbiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLylcbiAqIC0gW2B0ZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdGV4dC8pXG4gKiAtIFtgdG9nZ2xlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzXG4gKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgKF9kZXByZWNhdGVkXywgdXNlIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykpIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gKiAgIGJlIGVuYWJsZWQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogICBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0byBiZSBlbmFibGVkLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBrbm93bklzc3VlIFlvdSBjYW5ub3Qgc3B5IG9uIGBhbmd1bGFyLmVsZW1lbnRgIGlmIHlvdSBhcmUgdXNpbmcgSmFzbWluZSB2ZXJzaW9uIDEueC4gU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNDI1MSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3QuXG4gKi9cblxuSlFMaXRlLmV4cGFuZG8gPSAnbmczMzknO1xuXG52YXIganFDYWNoZSA9IEpRTGl0ZS5jYWNoZSA9IHt9LFxuICAgIGpxSWQgPSAxO1xuXG4vKlxuICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkIFwicHJpdmF0ZVwiIGZ1bmN0aW9uICEhIVxuICovXG5KUUxpdGUuX2RhdGEgPSBmdW5jdGlvbihub2RlKSB7XG4gIC8valF1ZXJ5IGFsd2F5cyByZXR1cm5zIGFuIG9iamVjdCBvbiBjYWNoZSBtaXNzXG4gIHJldHVybiB0aGlzLmNhY2hlW25vZGVbdGhpcy5leHBhbmRvXV0gfHwge307XG59O1xuXG5mdW5jdGlvbiBqcU5leHRJZCgpIHsgcmV0dXJuICsranFJZDsgfVxuXG5cbnZhciBEQVNIX0xPV0VSQ0FTRV9SRUdFWFAgPSAvLShbYS16XSkvZztcbnZhciBNU19IQUNLX1JFR0VYUCA9IC9eLW1zLS87XG52YXIgTU9VU0VfRVZFTlRfTUFQID0geyBtb3VzZWxlYXZlOiAnbW91c2VvdXQnLCBtb3VzZWVudGVyOiAnbW91c2VvdmVyJyB9O1xudmFyIGpxTGl0ZU1pbkVyciA9IG1pbkVycignanFMaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMga2ViYWItY2FzZSB0byBjYW1lbENhc2UuXG4gKiBUaGVyZSBpcyBhbHNvIGEgc3BlY2lhbCBjYXNlIGZvciB0aGUgbXMgcHJlZml4IHN0YXJ0aW5nIHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gY3NzS2ViYWJUb0NhbWVsKG5hbWUpIHtcbiAgICByZXR1cm4ga2ViYWJUb0NhbWVsKG5hbWUucmVwbGFjZShNU19IQUNLX1JFR0VYUCwgJ21zLScpKTtcbn1cblxuZnVuY3Rpb24gZm5DYW1lbENhc2VSZXBsYWNlKGFsbCwgbGV0dGVyKSB7XG4gIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBrZWJhYi1jYXNlIHRvIGNhbWVsQ2FzZS5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGtlYmFiVG9DYW1lbChuYW1lKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnJlcGxhY2UoREFTSF9MT1dFUkNBU0VfUkVHRVhQLCBmbkNhbWVsQ2FzZVJlcGxhY2UpO1xufVxuXG52YXIgU0lOR0xFX1RBR19SRUdFWFAgPSAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC87XG52YXIgSFRNTF9SRUdFWFAgPSAvPHwmIz9cXHcrOy87XG52YXIgVEFHX05BTUVfUkVHRVhQID0gLzwoW1xcdzotXSspLztcbnZhciBYSFRNTF9UQUdfUkVHRVhQID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naTtcblxudmFyIHdyYXBNYXAgPSB7XG4gICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICdfZGVmYXVsdCc6IFswLCAnJywgJyddXG59O1xuXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7XG4gIHJldHVybiAhSFRNTF9SRUdFWFAudGVzdChodG1sKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlQWNjZXB0c0RhdGEobm9kZSkge1xuICAvLyBUaGUgd2luZG93IG9iamVjdCBjYW4gYWNjZXB0IGRhdGEgYnV0IGhhcyBubyBub2RlVHlwZVxuICAvLyBPdGhlcndpc2Ugd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBlbGVtZW50cyAoMSkgYW5kIGRvY3VtZW50cyAoOSlcbiAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCAhbm9kZVR5cGUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVDtcbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzRGF0YShub2RlKSB7XG4gIGZvciAodmFyIGtleSBpbiBqcUNhY2hlW25vZGUubmczMzldKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpIHtcbiAgdmFyIHRtcCwgdGFnLCB3cmFwLFxuICAgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIG5vZGVzID0gW10sIGk7XG5cbiAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkpIHtcbiAgICAvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcbiAgICBub2Rlcy5wdXNoKGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoaHRtbCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuICAgIHRtcCA9IGZyYWdtZW50LmFwcGVuZENoaWxkKGNvbnRleHQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgIHRhZyA9IChUQUdfTkFNRV9SRUdFWFAuZXhlYyhodG1sKSB8fCBbJycsICcnXSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgICB3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG4gICAgdG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBodG1sLnJlcGxhY2UoWEhUTUxfVEFHX1JFR0VYUCwgJzwkMT48LyQyPicpICsgd3JhcFsyXTtcblxuICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuICAgIGkgPSB3cmFwWzBdO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuICAgIHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgdG1wLnRleHRDb250ZW50ID0gJyc7XG4gIH1cblxuICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG4gIGZyYWdtZW50LnRleHRDb250ZW50ID0gJyc7XG4gIGZyYWdtZW50LmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciBpbm5lciBIVE1MXG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBqcUxpdGVQYXJzZUhUTUwoaHRtbCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dCB8fCB3aW5kb3cuZG9jdW1lbnQ7XG4gIHZhciBwYXJzZWQ7XG5cbiAgaWYgKChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSkge1xuICAgIHJldHVybiBbY29udGV4dC5jcmVhdGVFbGVtZW50KHBhcnNlZFsxXSldO1xuICB9XG5cbiAgaWYgKChwYXJzZWQgPSBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpKSkge1xuICAgIHJldHVybiBwYXJzZWQuY2hpbGROb2RlcztcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24ganFMaXRlV3JhcE5vZGUobm9kZSwgd3JhcHBlcikge1xuICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBwZXIsIG5vZGUpO1xuICB9XG5cbiAgd3JhcHBlci5hcHBlbmRDaGlsZChub2RlKTtcbn1cblxuXG4vLyBJRTktMTEgaGFzIG5vIG1ldGhvZCBcImNvbnRhaW5zXCIgaW4gU1ZHIGVsZW1lbnQgYW5kIGluIE5vZGUucHJvdG90eXBlLiBCdWcgIzEwMjU5LlxudmFyIGpxTGl0ZUNvbnRhaW5zID0gd2luZG93Lk5vZGUucHJvdG90eXBlLmNvbnRhaW5zIHx8IC8qKiBAdGhpcyAqLyBmdW5jdGlvbihhcmcpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgcmV0dXJuICEhKHRoaXMuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYXJnKSAmIDE2KTtcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gSlFMaXRlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciBhcmdJc1N0cmluZztcblxuICBpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcbiAgICBlbGVtZW50ID0gdHJpbShlbGVtZW50KTtcbiAgICBhcmdJc1N0cmluZyA9IHRydWU7XG4gIH1cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEpRTGl0ZSkpIHtcbiAgICBpZiAoYXJnSXNTdHJpbmcgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT09ICc8Jykge1xuICAgICAgdGhyb3cganFMaXRlTWluRXJyKCdub3NlbCcsICdMb29raW5nIHVwIGVsZW1lbnRzIHZpYSBzZWxlY3RvcnMgaXMgbm90IHN1cHBvcnRlZCBieSBqcUxpdGUhIFNlZTogaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvYW5ndWxhci5lbGVtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpO1xuICB9XG5cbiAgaWYgKGFyZ0lzU3RyaW5nKSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTtcbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGVsZW1lbnQpKSB7XG4gICAganFMaXRlUmVhZHkoZWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywgZWxlbWVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQ2xvbmUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZURlYWxvYyhlbGVtZW50LCBvbmx5RGVzY2VuZGFudHMpIHtcbiAgaWYgKCFvbmx5RGVzY2VuZGFudHMgJiYganFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIGpxTGl0ZS5jbGVhbkRhdGEoW2VsZW1lbnRdKTtcblxuICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAganFMaXRlLmNsZWFuRGF0YShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlT2ZmKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvZmZhcmdzJywgJ2pxTGl0ZSNvZmYoKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIGFyZ3VtZW50Jyk7XG5cbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICB2YXIgaGFuZGxlID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZFxuXG4gIGlmICghdHlwZSkge1xuICAgIGZvciAodHlwZSBpbiBldmVudHMpIHtcbiAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGUpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICB9XG4gIH0gZWxzZSB7XG5cbiAgICB2YXIgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lckZucyA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChpc0RlZmluZWQoZm4pKSB7XG4gICAgICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVyRm5zIHx8IFtdLCBmbik7XG4gICAgICB9XG4gICAgICBpZiAoIShpc0RlZmluZWQoZm4pICYmIGxpc3RlbmVyRm5zICYmIGxpc3RlbmVyRm5zLmxlbmd0aCA+IDApKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGUpO1xuICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgcmVtb3ZlSGFuZGxlcih0eXBlKTtcbiAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgcmVtb3ZlSGFuZGxlcihNT1VTRV9FVkVOVF9NQVBbdHlwZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkge1xuICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOTtcbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07XG5cbiAgaWYgKGV4cGFuZG9TdG9yZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBkZWxldGUgZXhwYW5kb1N0b3JlLmRhdGFbbmFtZV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHtcbiAgICAgIGlmIChleHBhbmRvU3RvcmUuZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgIGV4cGFuZG9TdG9yZS5oYW5kbGUoe30sICckZGVzdHJveScpO1xuICAgICAgfVxuICAgICAganFMaXRlT2ZmKGVsZW1lbnQpO1xuICAgIH1cbiAgICBkZWxldGUganFDYWNoZVtleHBhbmRvSWRdO1xuICAgIGVsZW1lbnQubmczMzkgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGRlbGV0ZSBET00gZXhwYW5kb3MuIElFIGFuZCBDaHJvbWUgZG9uJ3QgbGlrZSBpdFxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIGNyZWF0ZUlmTmVjZXNzYXJ5KSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5LFxuICAgICAgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoY3JlYXRlSWZOZWNlc3NhcnkgJiYgIWV4cGFuZG9TdG9yZSkge1xuICAgIGVsZW1lbnQubmczMzkgPSBleHBhbmRvSWQgPSBqcU5leHRJZCgpO1xuICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXSA9IHtldmVudHM6IHt9LCBkYXRhOiB7fSwgaGFuZGxlOiB1bmRlZmluZWR9O1xuICB9XG5cbiAgcmV0dXJuIGV4cGFuZG9TdG9yZTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEYXRhKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG4gICAgdmFyIHByb3A7XG5cbiAgICB2YXIgaXNTaW1wbGVTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpO1xuICAgIHZhciBpc1NpbXBsZUdldHRlciA9ICFpc1NpbXBsZVNldHRlciAmJiBrZXkgJiYgIWlzT2JqZWN0KGtleSk7XG4gICAgdmFyIG1hc3NHZXR0ZXIgPSAha2V5O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgIWlzU2ltcGxlR2V0dGVyKTtcbiAgICB2YXIgZGF0YSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZGF0YTtcblxuICAgIGlmIChpc1NpbXBsZVNldHRlcikgeyAvLyBkYXRhKCdrZXknLCB2YWx1ZSlcbiAgICAgIGRhdGFba2ViYWJUb0NhbWVsKGtleSldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXNzR2V0dGVyKSB7ICAvLyBkYXRhKClcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsgLy8gZGF0YSgna2V5JylcbiAgICAgICAgICAvLyBkb24ndCBmb3JjZSBjcmVhdGlvbiBvZiBleHBhbmRvU3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICByZXR1cm4gZGF0YSAmJiBkYXRhW2tlYmFiVG9DYW1lbChrZXkpXTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbWFzcy1zZXR0ZXI6IGRhdGEoe2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9KVxuICAgICAgICAgIGZvciAocHJvcCBpbiBrZXkpIHtcbiAgICAgICAgICAgIGRhdGFba2ViYWJUb0NhbWVsKHByb3ApXSA9IGtleVtwcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKCgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpLlxuICAgICAgaW5kZXhPZignICcgKyBzZWxlY3RvciArICcgJykgPiAtMSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oXG4gICAgICAgICAgKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csICcgJylcbiAgICAgICAgICAucmVwbGFjZSgnICcgKyB0cmltKGNzc0NsYXNzKSArICcgJywgJyAnKSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQWRkQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIHZhciBleGlzdGluZ0NsYXNzZXMgPSAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgJyAnKTtcblxuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgY3NzQ2xhc3MgPSB0cmltKGNzc0NsYXNzKTtcbiAgICAgIGlmIChleGlzdGluZ0NsYXNzZXMuaW5kZXhPZignICcgKyBjc3NDbGFzcyArICcgJykgPT09IC0xKSB7XG4gICAgICAgIGV4aXN0aW5nQ2xhc3NlcyArPSBjc3NDbGFzcyArICcgJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oZXhpc3RpbmdDbGFzc2VzKSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykge1xuICAvLyBUSElTIENPREUgSVMgVkVSWSBIT1QuIERvbid0IG1ha2UgY2hhbmdlcyB3aXRob3V0IGJlbmNobWFya2luZy5cblxuICBpZiAoZWxlbWVudHMpIHtcblxuICAgIC8vIGlmIGEgTm9kZSAodGhlIG1vc3QgY29tbW9uIGNhc2UpXG4gICAgaWYgKGVsZW1lbnRzLm5vZGVUeXBlKSB7XG4gICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIC8vIGlmIGFuIEFycmF5IG9yIE5vZGVMaXN0IGFuZCBub3QgYSBXaW5kb3dcbiAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBlbGVtZW50cy53aW5kb3cgIT09IGVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlQ29udHJvbGxlcihlbGVtZW50LCBuYW1lKSB7XG4gIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInKSArICdDb250cm9sbGVyJyk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWRcbiAgLy8gdGhpcyBtYWtlcyAkKGRvY3VtZW50KS5zY29wZSgpIHBvc3NpYmxlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIG5hbWVzID0gaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV07XG5cbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlID0ganFMaXRlLmRhdGEoZWxlbWVudCwgbmFtZXNbaV0pKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIElmIGRlYWxpbmcgd2l0aCBhIGRvY3VtZW50IGZyYWdtZW50IG5vZGUgd2l0aCBhIGhvc3QgZWxlbWVudCwgYW5kIG5vIHBhcmVudCwgdXNlIHRoZSBob3N0XG4gICAgLy8gZWxlbWVudCBhcyB0aGUgcGFyZW50LiBUaGlzIGVuYWJsZXMgZGlyZWN0aXZlcyB3aXRoaW4gYSBTaGFkb3cgRE9NIG9yIHBvbHlmaWxsZWQgU2hhZG93IERPTVxuICAgIC8vIHRvIGxvb2t1cCBwYXJlbnQgY29udHJvbGxlcnMuXG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UICYmIGVsZW1lbnQuaG9zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlRW1wdHkoZWxlbWVudCkge1xuICBqcUxpdGVEZWFsb2MoZWxlbWVudCwgdHJ1ZSk7XG4gIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlKGVsZW1lbnQsIGtlZXBEYXRhKSB7XG4gIGlmICgha2VlcERhdGEpIGpxTGl0ZURlYWxvYyhlbGVtZW50KTtcbiAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURvY3VtZW50TG9hZGVkKGFjdGlvbiwgd2luKSB7XG4gIHdpbiA9IHdpbiB8fCB3aW5kb3c7XG4gIGlmICh3aW4uZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIC8vIEZvcmNlIHRoZSBhY3Rpb24gdG8gYmUgcnVuIGFzeW5jIGZvciBjb25zaXN0ZW50IGJlaGF2aW9yXG4gICAgLy8gZnJvbSB0aGUgYWN0aW9uJ3MgcG9pbnQgb2Ygdmlld1xuICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseVxuICAgIHdpbi5zZXRUaW1lb3V0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlXG4gICAganFMaXRlKHdpbikub24oJ2xvYWQnLCBhY3Rpb24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlYWR5KGZuKSB7XG4gIGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRyaWdnZXIpO1xuICAgIGZuKCk7XG4gIH1cblxuICAvLyBjaGVjayBpZiBkb2N1bWVudCBpcyBhbHJlYWR5IGxvYWRlZFxuICBpZiAod2luZG93LmRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dChmbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UgY2FuIG5vdCB1c2UganFMaXRlIHNpbmNlIHdlIGFyZSBub3QgZG9uZSBsb2FkaW5nIGFuZCBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGxhdGVyLlxuXG4gICAgLy8gV29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5XG4gICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTtcblxuICAgIC8vIEZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVyc1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHtcbiAgcmVhZHk6IGpxTGl0ZVJlYWR5LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgZm9yRWFjaCh0aGlzLCBmdW5jdGlvbihlKSB7IHZhbHVlLnB1c2goJycgKyBlKTt9KTtcbiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJztcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiAoaW5kZXggPj0gMCkgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pO1xuICB9LFxuXG4gIGxlbmd0aDogMCxcbiAgcHVzaDogcHVzaCxcbiAgc29ydDogW10uc29ydCxcbiAgc3BsaWNlOiBbXS5zcGxpY2Vcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy5cbi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXG4vLyB2YWx1ZSBvbiBnZXQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBCT09MRUFOX0FUVFIgPSB7fTtcbmZvckVhY2goJ211bHRpcGxlLHNlbGVjdGVkLGNoZWNrZWQsZGlzYWJsZWQscmVhZE9ubHkscmVxdWlyZWQsb3Blbicuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9BVFRSW2xvd2VyY2FzZSh2YWx1ZSldID0gdmFsdWU7XG59KTtcbnZhciBCT09MRUFOX0VMRU1FTlRTID0ge307XG5mb3JFYWNoKCdpbnB1dCxzZWxlY3Qsb3B0aW9uLHRleHRhcmVhLGJ1dHRvbixmb3JtLGRldGFpbHMnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fRUxFTUVOVFNbdmFsdWVdID0gdHJ1ZTtcbn0pO1xudmFyIEFMSUFTRURfQVRUUiA9IHtcbiAgJ25nTWlubGVuZ3RoJzogJ21pbmxlbmd0aCcsXG4gICduZ01heGxlbmd0aCc6ICdtYXhsZW5ndGgnLFxuICAnbmdNaW4nOiAnbWluJyxcbiAgJ25nTWF4JzogJ21heCcsXG4gICduZ1BhdHRlcm4nOiAncGF0dGVybicsXG4gICduZ1N0ZXAnOiAnc3RlcCdcbn07XG5cbmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7XG4gIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lXG4gIHZhciBib29sZWFuQXR0ciA9IEJPT0xFQU5fQVRUUltuYW1lLnRvTG93ZXJDYXNlKCldO1xuXG4gIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2Vzc1xuICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyO1xufVxuXG5mdW5jdGlvbiBnZXRBbGlhc2VkQXR0ck5hbWUobmFtZSkge1xuICByZXR1cm4gQUxJQVNFRF9BVFRSW25hbWVdO1xufVxuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcbiAgaGFzRGF0YToganFMaXRlSGFzRGF0YSxcbiAgY2xlYW5EYXRhOiBmdW5jdGlvbiBqcUxpdGVDbGVhbkRhdGEobm9kZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2Rlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBqcUxpdGVSZW1vdmVEYXRhKG5vZGVzW2ldKTtcbiAgICB9XG4gIH1cbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIEpRTGl0ZVtuYW1lXSA9IGZuO1xufSk7XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICBpbmhlcml0ZWREYXRhOiBqcUxpdGVJbmhlcml0ZWREYXRhLFxuXG4gIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckc2NvcGUnKSB8fCBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50LCBbJyRpc29sYXRlU2NvcGUnLCAnJHNjb3BlJ10pO1xuICB9LFxuXG4gIGlzb2xhdGVTY29wZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IVxuICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJGlzb2xhdGVTY29wZScpIHx8IGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScpO1xuICB9LFxuXG4gIGNvbnRyb2xsZXI6IGpxTGl0ZUNvbnRyb2xsZXIsXG5cbiAgaW5qZWN0b3I6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7XG4gIH0sXG5cbiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9LFxuXG4gIGhhc0NsYXNzOiBqcUxpdGVIYXNDbGFzcyxcblxuICBjc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IGNzc0tlYmFiVG9DYW1lbChuYW1lKTtcblxuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnN0eWxlW25hbWVdO1xuICAgIH1cbiAgfSxcblxuICBhdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciByZXQ7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQVRUUklCVVRFIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCB8fFxuICAgICAgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgIHZhciBpc0Jvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW2xvd2VyY2FzZWROYW1lXTtcblxuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAvLyBzZXR0ZXJcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8ICh2YWx1ZSA9PT0gZmFsc2UgJiYgaXNCb29sZWFuQXR0cikpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCBpc0Jvb2xlYW5BdHRyID8gbG93ZXJjYXNlZE5hbWUgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGdldHRlclxuXG4gICAgICByZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcblxuICAgICAgaWYgKGlzQm9vbGVhbkF0dHIgJiYgcmV0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldCA9IGxvd2VyY2FzZWROYW1lO1xuICAgICAgfVxuICAgICAgLy8gTm9ybWFsaXplIG5vbi1leGlzdGluZyBhdHRyaWJ1dGVzIHRvIHVuZGVmaW5lZCAoYXMgalF1ZXJ5KS5cbiAgICAgIHJldHVybiByZXQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG4gICAgfVxuICB9LFxuXG4gIHByb3A6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIHRleHQ6IChmdW5jdGlvbigpIHtcbiAgICBnZXRUZXh0LiRkdiA9ICcnO1xuICAgIHJldHVybiBnZXRUZXh0O1xuXG4gICAgZnVuY3Rpb24gZ2V0VGV4dChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgICAgICByZXR1cm4gKG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQpID8gZWxlbWVudC50ZXh0Q29udGVudCA6ICcnO1xuICAgICAgfVxuICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cbiAgfSkoKSxcblxuICB2YWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgaWYgKGVsZW1lbnQubXVsdGlwbGUgJiYgbm9kZU5hbWVfKGVsZW1lbnQpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9LFxuXG4gIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIH1cbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCwgdHJ1ZSk7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfSxcblxuICBlbXB0eToganFMaXRlRW1wdHlcbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzOiB3cml0ZXMgcmV0dXJuIHNlbGVjdGlvbiwgcmVhZHMgcmV0dXJuIGZpcnN0IHZhbHVlXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgIHZhciBpLCBrZXk7XG4gICAgdmFyIG5vZGVDb3VudCA9IHRoaXMubGVuZ3RoO1xuXG4gICAgLy8ganFMaXRlSGFzQ2xhc3MgaGFzIG9ubHkgdHdvIGFyZ3VtZW50cywgYnV0IGlzIGEgZ2V0dGVyLW9ubHkgZm4sIHNvIHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGl0XG4gICAgLy8gaW4gYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24uXG4gICAgLy8ganFMaXRlRW1wdHkgdGFrZXMgbm8gYXJndW1lbnRzIGJ1dCBpcyBhIHNldHRlci5cbiAgICBpZiAoZm4gIT09IGpxTGl0ZUVtcHR5ICYmXG4gICAgICAgIChpc1VuZGVmaW5lZCgoZm4ubGVuZ3RoID09PSAyICYmIChmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIpKSA/IGFyZzEgOiBhcmcyKSkpIHtcbiAgICAgIGlmIChpc09iamVjdChhcmcxKSkge1xuXG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBidXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSB0aGUga2V5L3ZhbHVlc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZm4gPT09IGpxTGl0ZURhdGEpIHtcbiAgICAgICAgICAgIC8vIGRhdGEoKSB0YWtlcyB0aGUgd2hvbGUgb2JqZWN0IGluIGpRdWVyeVxuICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZzEpIHtcbiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBhcmUgYSByZWFkLCBzbyByZWFkIHRoZSBmaXJzdCBjaGlsZC5cbiAgICAgICAgLy8gVE9ETzogZG8gd2Ugc3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XG4gICAgICAgIC8vIE9ubHkgaWYgd2UgaGF2ZSAkZHYgZG8gd2UgaXRlcmF0ZSBvdmVyIGFsbCwgb3RoZXJ3aXNlIGl0IGlzIGp1c3QgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgIHZhciBqaiA9IChpc1VuZGVmaW5lZCh2YWx1ZSkpID8gTWF0aC5taW4obm9kZUNvdW50LCAxKSA6IG5vZGVDb3VudDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSArIG5vZGVWYWx1ZSA6IG5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICBmbih0aGlzW2ldLCBhcmcxLCBhcmcyKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpIHtcbiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB0eXBlKSB7XG4gICAgLy8galF1ZXJ5IHNwZWNpZmljIGFwaVxuICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfTtcblxuICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdO1xuICAgIHZhciBldmVudEZuc0xlbmd0aCA9IGV2ZW50Rm5zID8gZXZlbnRGbnMubGVuZ3RoIDogMDtcblxuICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjtcblxuICAgIGlmIChpc1VuZGVmaW5lZChldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpKSB7XG4gICAgICB2YXIgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gU29tZSBldmVudHMgaGF2ZSBzcGVjaWFsIGhhbmRsZXJzIHRoYXQgd3JhcCB0aGUgcmVhbCBoYW5kbGVyXG4gICAgdmFyIGhhbmRsZXJXcmFwcGVyID0gZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyIHx8IGRlZmF1bHRIYW5kbGVyV3JhcHBlcjtcblxuICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkge1xuICAgICAgZXZlbnRGbnMgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEZuc0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgaGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGV2ZW50Rm5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2sgZm9yIGFuZ3VsYXJNb2Nrcy9jbGVhckRhdGFDYWNoZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlcmVnaXN0ZXIgYWxsXG4gIC8vICAgICAgIGV2ZW50cyBvbiBgZWxlbWVudGBcbiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIodGFyZ2V0LCBldmVudCwgaGFuZGxlcikge1xuICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZVxuICAvLyBSZWFkIGFib3V0IG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmU6XG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazhcbiAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG4gIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG4gIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqcUxpdGVDb250YWlucy5jYWxsKHRhcmdldCwgcmVsYXRlZCkpKSB7XG4gICAgaGFuZGxlci5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyB0cmF2ZXJzYWwuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlXG4vLyBzZWxlY3Rvci5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZm9yRWFjaCh7XG4gIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsXG5cbiAgb246IGZ1bmN0aW9uIGpxTGl0ZU9uKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTtcblxuICAgIC8vIERvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgdG8gbm9uLWVsZW1lbnRzIGJlY2F1c2UgdGhleSB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLlxuICAgIGlmICghanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIHRydWUpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gICAgaWYgKCFoYW5kbGUpIHtcbiAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctaW5kZXhvZi12cy1zcGxpdFxuICAgIHZhciB0eXBlcyA9IHR5cGUuaW5kZXhPZignICcpID49IDAgPyB0eXBlLnNwbGl0KCcgJykgOiBbdHlwZV07XG4gICAgdmFyIGkgPSB0eXBlcy5sZW5ndGg7XG5cbiAgICB2YXIgYWRkSGFuZGxlciA9IGZ1bmN0aW9uKHR5cGUsIHNwZWNpYWxIYW5kbGVyV3JhcHBlciwgbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICghZXZlbnRGbnMpIHtcbiAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV0gPSBbXTtcbiAgICAgICAgZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyID0gc3BlY2lhbEhhbmRsZXJXcmFwcGVyO1xuICAgICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95JyAmJiAhbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnRGbnMucHVzaChmbik7XG4gICAgfTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgYWRkSGFuZGxlcihNT1VTRV9FVkVOVF9NQVBbdHlwZV0sIHNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyKTtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgb2ZmOiBqcUxpdGVPZmYsXG5cbiAgb25lOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICAvL2FkZCB0aGUgbGlzdGVuZXIgdHdpY2Ugc28gdGhhdCB3aGVuIGl0IGlzIGNhbGxlZFxuICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZVxuICAgIC8vYWJsZSB0byBjYWxsIGVsZW1lbnQub2ZmKGV2LCBmbikgbm9ybWFsbHlcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZ1bmN0aW9uIG9uRm4oKSB7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBvbkZuKTtcbiAgICB9KTtcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTtcbiAgfSxcblxuICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHtcbiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChub2RlLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9KTtcbiAgfSxcblxuICBjaGlsZHJlbjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgaWYgKG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UKSByZXR1cm47XG5cbiAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHtcbiAgICBqcUxpdGVXcmFwTm9kZShlbGVtZW50LCBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF0pO1xuICB9LFxuXG4gIHJlbW92ZToganFMaXRlUmVtb3ZlLFxuXG4gIGRldGFjaDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGpxTGl0ZVJlbW92ZShlbGVtZW50LCB0cnVlKTtcbiAgfSxcblxuICBhZnRlcjogZnVuY3Rpb24oZWxlbWVudCwgbmV3RWxlbWVudCkge1xuICAgIHZhciBpbmRleCA9IGVsZW1lbnQsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIG5ld0VsZW1lbnQgPSBuZXcgSlFMaXRlKG5ld0VsZW1lbnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuZXdFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBuZXdFbGVtZW50W2ldO1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgaW5kZXggPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiBqcUxpdGVSZW1vdmVDbGFzcyxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzQ29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY2xhc3NDb25kaXRpb24pKSB7XG4gICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAoY2xhc3NDb25kaXRpb24gPyBqcUxpdGVBZGRDbGFzcyA6IGpxTGl0ZVJlbW92ZUNsYXNzKShlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA/IHBhcmVudCA6IG51bGw7XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvbmU6IGpxTGl0ZUNsb25lLFxuXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7XG5cbiAgICB2YXIgZHVtbXlFdmVudCwgZXZlbnRGbnNDb3B5LCBoYW5kbGVyQXJncztcbiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07XG5cbiAgICBpZiAoZXZlbnRGbnMpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGV2ZW50IHRvIHBhc3MgdG8gdGhlIGhhbmRsZXJzXG4gICAgICBkdW1teUV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7IHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCxcbiAgICAgICAgdHlwZTogZXZlbnROYW1lLFxuICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIGEgY3VzdG9tIGV2ZW50IHdhcyBwcm92aWRlZCB0aGVuIGV4dGVuZCBvdXIgZHVtbXkgZXZlbnQgd2l0aCBpdFxuICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgICAgZXZlbnRGbnNDb3B5ID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgaGFuZGxlckFyZ3MgPSBleHRyYVBhcmFtZXRlcnMgPyBbZHVtbXlFdmVudF0uY29uY2F0KGV4dHJhUGFyYW1ldGVycykgOiBbZHVtbXlFdmVudF07XG5cbiAgICAgIGZvckVhY2goZXZlbnRGbnNDb3B5LCBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoIWR1bW15RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogY2hhaW5pbmcgZnVuY3Rpb25zXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZFxuICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAganFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHRoaXM7XG4gIH07XG59KTtcblxuLy8gYmluZCBsZWdhY3kgYmluZC91bmJpbmQgdG8gb24vb2ZmXG5KUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uO1xuSlFMaXRlLnByb3RvdHlwZS51bmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9mZjtcblxuXG4vLyBQcm92aWRlciBmb3IgcHJpdmF0ZSAkJGpxTGl0ZSBzZXJ2aWNlXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICQkanFMaXRlUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uICQkanFMaXRlKCkge1xuICAgIHJldHVybiBleHRlbmQoSlFMaXRlLCB7XG4gICAgICBoYXNDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZUhhc0NsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfSxcbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlQWRkQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVSZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIGhhc2ggb2YgYW4gJ29iaicuXG4gKiBIYXNoIG9mIGE6XG4gKiAgc3RyaW5nIGlzIHN0cmluZ1xuICogIG51bWJlciBpcyBudW1iZXIgYXMgc3RyaW5nXG4gKiAgb2JqZWN0IGlzIGVpdGhlciByZXN1bHQgb2YgY2FsbGluZyAkJGhhc2hLZXkgZnVuY3Rpb24gb24gdGhlIG9iamVjdCBvciB1bmlxdWVseSBnZW5lcmF0ZWQgaWQsXG4gKiAgICAgICAgIHRoYXQgaXMgYWxzbyBhc3NpZ25lZCB0byB0aGUgJCRoYXNoS2V5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QuXG4gKlxuICogQHBhcmFtIG9ialxuICogQHJldHVybnMge3N0cmluZ30gaGFzaCBzdHJpbmcgc3VjaCB0aGF0IHRoZSBzYW1lIGlucHV0IHdpbGwgaGF2ZSB0aGUgc2FtZSBoYXNoIHN0cmluZy5cbiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBzdHJpbmcga2V5IGlzIGluICd0eXBlOmhhc2hLZXknIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gaGFzaEtleShvYmosIG5leHRVaWRGbikge1xuICB2YXIga2V5ID0gb2JqICYmIG9iai4kJGhhc2hLZXk7XG5cbiAgaWYgKGtleSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBrZXkgPSBvYmouJCRoYXNoS2V5KCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICB2YXIgb2JqVHlwZSA9IHR5cGVvZiBvYmo7XG4gIGlmIChvYmpUeXBlID09PSAnZnVuY3Rpb24nIHx8IChvYmpUeXBlID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpKSB7XG4gICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG9ialR5cGUgKyAnOicgKyAobmV4dFVpZEZuIHx8IG5leHRVaWQpKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5ID0gb2JqVHlwZSArICc6JyArIG9iajtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbi8vIEEgbWluaW1hbCBFUzIwMTUgTWFwIGltcGxlbWVudGF0aW9uLlxuLy8gU2hvdWxkIGJlIGJ1Zy9mZWF0dXJlIGVxdWl2YWxlbnQgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgb2Ygc3VwcG9ydGVkIGJyb3dzZXJzXG4vLyAoZm9yIHRoZSBmZWF0dXJlcyByZXF1aXJlZCBpbiBBbmd1bGFyKS5cbi8vIFNlZSBodHRwczovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8jdGVzdC1NYXBcbnZhciBuYW5LZXkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gTmdNYXBTaGltKCkge1xuICB0aGlzLl9rZXlzID0gW107XG4gIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICB0aGlzLl9sYXN0S2V5ID0gTmFOO1xuICB0aGlzLl9sYXN0SW5kZXggPSAtMTtcbn1cbk5nTWFwU2hpbS5wcm90b3R5cGUgPSB7XG4gIF9pZHg6IGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgPT09IHRoaXMuX2xhc3RLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sYXN0SW5kZXg7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RLZXkgPSBrZXk7XG4gICAgdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RJbmRleDtcbiAgfSxcbiAgX3RyYW5zZm9ybUtleTogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyTmFOKGtleSkgPyBuYW5LZXkgOiBrZXk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAga2V5ID0gdGhpcy5fdHJhbnNmb3JtS2V5KGtleSk7XG4gICAgdmFyIGlkeCA9IHRoaXMuX2lkeChrZXkpO1xuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW2lkeF07XG4gICAgfVxuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIGlkeCA9IHRoaXMuX2xhc3RJbmRleCA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLl9rZXlzW2lkeF0gPSBrZXk7XG4gICAgdGhpcy5fdmFsdWVzW2lkeF0gPSB2YWx1ZTtcblxuICAgIC8vIFN1cHBvcnQ6IElFMTFcbiAgICAvLyBEbyBub3QgYHJldHVybiB0aGlzYCB0byBzaW11bGF0ZSB0aGUgcGFydGlhbCBJRTExIGltcGxlbWVudGF0aW9uXG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAga2V5ID0gdGhpcy5fdHJhbnNmb3JtS2V5KGtleSk7XG4gICAgdmFyIGlkeCA9IHRoaXMuX2lkeChrZXkpO1xuICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX2tleXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgdGhpcy5fdmFsdWVzLnNwbGljZShpZHgsIDEpO1xuICAgIHRoaXMuX2xhc3RLZXkgPSBOYU47XG4gICAgdGhpcy5fbGFzdEluZGV4ID0gLTE7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8vIEZvciBub3csIGFsd2F5cyB1c2UgYE5nTWFwU2hpbWAsIGV2ZW4gaWYgYHdpbmRvdy5NYXBgIGlzIGF2YWlsYWJsZS4gU29tZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zXG4vLyBhcmUgc3RpbGwgYnVnZ3kgKG9mdGVuIGluIHN1YnRsZSB3YXlzKSBhbmQgY2FuIGNhdXNlIGhhcmQtdG8tZGVidWcgZmFpbHVyZXMuIFdoZW4gbmF0aXZlIGBNYXBgXG4vLyBpbXBsZW1lbnRhdGlvbnMgZ2V0IG1vcmUgc3RhYmxlLCB3ZSBjYW4gcmVjb25zaWRlciBzd2l0Y2hpbmcgdG8gYHdpbmRvdy5NYXBgICh3aGVuIGF2YWlsYWJsZSkuXG52YXIgTmdNYXAgPSBOZ01hcFNoaW07XG5cbnZhciAkJE1hcFByb3ZpZGVyID0gWy8qKiBAdGhpcyAqL2Z1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE5nTWFwO1xuICB9XTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgYW5ndWxhci5pbmplY3RvclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW4gaW5qZWN0b3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3JcbiAqIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChzZWUge0BsaW5rIGd1aWRlL2RpIGRlcGVuZGVuY3kgaW5qZWN0aW9ufSkuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAqICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gW3N0cmljdERpPWZhbHNlXSBXaGV0aGVyIHRoZSBpbmplY3RvciBzaG91bGQgYmUgaW4gc3RyaWN0IG1vZGUsIHdoaWNoXG4gKiAgICAgZGlzYWxsb3dzIGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKiBAcmV0dXJucyB7aW5qZWN0b3J9IEluamVjdG9yIG9iamVjdC4gU2VlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBUeXBpY2FsIHVzYWdlXG4gKiBgYGBqc1xuICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3JcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTtcbiAqXG4gKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvblxuICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvblxuICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRyb290U2NvcGUsICRjb21waWxlLCAkZG9jdW1lbnQpIHtcbiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xuICogICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIFNvbWV0aW1lcyB5b3Ugd2FudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBpbmplY3RvciBvZiBhIGN1cnJlbnRseSBydW5uaW5nIEFuZ3VsYXIgYXBwXG4gKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZVxuICogYXBwbGljYXRpb24gaGFzIGJlZW4gYm9vdHN0cmFwcGVkLiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhlIGV4dHJhIGBpbmplY3RvcigpYCBhZGRlZFxuICogdG8gSlF1ZXJ5L2pxTGl0ZSBlbGVtZW50cy4gU2VlIHtAbGluayBhbmd1bGFyLmVsZW1lbnR9LlxuICpcbiAqICpUaGlzIGlzIGZhaXJseSByYXJlIGJ1dCBjb3VsZCBiZSB0aGUgY2FzZSBpZiBhIHRoaXJkIHBhcnR5IGxpYnJhcnkgaXMgaW5qZWN0aW5nIHRoZVxuICogbWFya3VwLipcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYSBuZXcgYmxvY2sgb2YgSFRNTCBjb250YWluaW5nIGEgYG5nLWNvbnRyb2xsZXJgXG4gKiBkaXJlY3RpdmUgaXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keSBieSBKUXVlcnkuIFdlIHRoZW4gY29tcGlsZSBhbmQgbGlua1xuICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuXG4gKlxuICogYGBganNcbiAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDdHJsXCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTtcbiAqICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCRkaXYpO1xuICpcbiAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAqICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KCRkaXYpLnNjb3BlKCk7XG4gKiAgICRjb21waWxlKCRkaXYpKHNjb3BlKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIGF1dG9cbiAqIEBpbnN0YWxsYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqL1xuXG52YXIgQVJST1dfQVJHID0gL14oW14oXSs/KT0+LztcbnZhciBGTl9BUkdTID0gL15bXihdKlxcKFxccyooW14pXSopXFwpL207XG52YXIgRk5fQVJHX1NQTElUID0gLywvO1xudmFyIEZOX0FSRyA9IC9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvO1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUZuKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmbik7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RBcmdzKGZuKSB7XG4gIHZhciBmblRleHQgPSBzdHJpbmdpZnlGbihmbikucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpLFxuICAgICAgYXJncyA9IGZuVGV4dC5tYXRjaChBUlJPV19BUkcpIHx8IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIGFub25Gbihmbikge1xuICAvLyBGb3IgYW5vbnltb3VzIGZ1bmN0aW9ucywgc2hvd2luZyBhdCB0aGUgdmVyeSBsZWFzdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGNhbiBoZWxwIGluXG4gIC8vIGRlYnVnZ2luZy5cbiAgdmFyIGFyZ3MgPSBleHRyYWN0QXJncyhmbik7XG4gIGlmIChhcmdzKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgKGFyZ3NbMV0gfHwgJycpLnJlcGxhY2UoL1tcXHNcXHJcXG5dKy8sICcgJykgKyAnKSc7XG4gIH1cbiAgcmV0dXJuICdmbic7XG59XG5cbmZ1bmN0aW9uIGFubm90YXRlKGZuLCBzdHJpY3REaSwgbmFtZSkge1xuICB2YXIgJGluamVjdCxcbiAgICAgIGFyZ0RlY2wsXG4gICAgICBsYXN0O1xuXG4gIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoISgkaW5qZWN0ID0gZm4uJGluamVjdCkpIHtcbiAgICAgICRpbmplY3QgPSBbXTtcbiAgICAgIGlmIChmbi5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHN0cmljdERpKSB7XG4gICAgICAgICAgaWYgKCFpc1N0cmluZyhuYW1lKSB8fCAhbmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IGZuLm5hbWUgfHwgYW5vbkZuKGZuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdzdHJpY3RkaScsXG4gICAgICAgICAgICAnezB9IGlzIG5vdCB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIGFuZCBjYW5ub3QgYmUgaW52b2tlZCBpbiBzdHJpY3QgbW9kZScsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ0RlY2wgPSBleHRyYWN0QXJncyhmbik7XG4gICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSkge1xuICAgICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxO1xuICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTtcbiAgICAkaW5qZWN0ID0gZm4uc2xpY2UoMCwgbGFzdCk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpO1xuICB9XG4gIHJldHVybiAkaW5qZWN0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGluamVjdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnlcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLFxuICogYW5kIGxvYWQgbW9kdWxlcy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKSkudG9CZSgkaW5qZWN0b3IpO1xuICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAqICAgICByZXR1cm4gJGluamVjdG9yO1xuICogICB9KSkudG9CZSgkaW5qZWN0b3IpO1xuICogYGBgXG4gKlxuICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvblxuICpcbiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcbiAqIGZvbGxvd2luZyBhcmUgYWxsIHZhbGlkIHdheXMgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pO1xuICpcbiAqICAgLy8gYW5ub3RhdGVkXG4gKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTtcbiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcbiAqICAgJGluamVjdG9yLmludm9rZShleHBsaWNpdCk7XG4gKlxuICogICAvLyBpbmxpbmVcbiAqICAgJGluamVjdG9yLmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTtcbiAqIGBgYFxuICpcbiAqICMjIEluZmVyZW5jZVxuICpcbiAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvblxuICogY2FuIHRoZW4gYmUgcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuIFRoaXMgbWV0aG9kIG9mIGRpc2NvdmVyaW5nXG4gKiBhbm5vdGF0aW9ucyBpcyBkaXNhbGxvd2VkIHdoZW4gdGhlIGluamVjdG9yIGlzIGluIHN0cmljdCBtb2RlLlxuICogKk5PVEU6KiBUaGlzIGRvZXMgbm90IHdvcmsgd2l0aCBtaW5pZmljYXRpb24sIGFuZCBvYmZ1c2NhdGlvbiB0b29scyBzaW5jZSB0aGVzZSB0b29scyBjaGFuZ2UgdGhlXG4gKiBhcmd1bWVudCBuYW1lcy5cbiAqXG4gKiAjIyBgJGluamVjdGAgQW5ub3RhdGlvblxuICogQnkgYWRkaW5nIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBvbnRvIGEgZnVuY3Rpb24gdGhlIGluamVjdGlvbiBwYXJhbWV0ZXJzIGNhbiBiZSBzcGVjaWZpZWQuXG4gKlxuICogIyMgSW5saW5lXG4gKiBBcyBhbiBhcnJheSBvZiBpbmplY3Rpb24gbmFtZXMsIHdoZXJlIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGFycmF5IGlzIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkaW5qZWN0b3IjbW9kdWxlc1xuICogQHR5cGUge09iamVjdH1cbiAqIEBkZXNjcmlwdGlvblxuICogQSBoYXNoIGNvbnRhaW5pbmcgYWxsIHRoZSBtb2R1bGVzIHRoYXQgaGF2ZSBiZWVuIGxvYWRlZCBpbnRvIHRoZVxuICogJGluamVjdG9yLlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoaXMgcHJvcGVydHkgdG8gZmluZCBvdXQgaW5mb3JtYXRpb24gYWJvdXQgYSBtb2R1bGUgdmlhIHRoZVxuICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2luZm8gYG15TW9kdWxlLmluZm8oLi4uKWB9IG1ldGhvZC5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHZhciBpbmZvID0gJGluamVjdG9yLm1vZHVsZXNbJ25nQW5pbWF0ZSddLmluZm8oKTtcbiAqIGBgYFxuICpcbiAqICoqRG8gbm90IHVzZSB0aGlzIHByb3BlcnR5IHRvIGF0dGVtcHQgdG8gbW9kaWZ5IHRoZSBtb2R1bGVzIGFmdGVyIHRoZSBhcHBsaWNhdGlvblxuICogaGFzIGJlZW4gYm9vdHN0cmFwcGVkLioqXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNnZXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiBhbiBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UgdG8gcmV0cmlldmUuXG4gKiBAcGFyYW0ge3N0cmluZz19IGNhbGxlciBBbiBvcHRpb25hbCBzdHJpbmcgdG8gcHJvdmlkZSB0aGUgb3JpZ2luIG9mIHRoZSBmdW5jdGlvbiBjYWxsIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEByZXR1cm4geyp9IFRoZSBpbnN0YW5jZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNpbnZva2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZSB0aGUgbWV0aG9kIGFuZCBzdXBwbHkgdGhlIG1ldGhvZCBhcmd1bWVudHMgZnJvbSB0aGUgYCRpbmplY3RvcmAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZm4gVGhlIGluamVjdGFibGUgZnVuY3Rpb24gdG8gaW52b2tlLiBGdW5jdGlvbiBwYXJhbWV0ZXJzIGFyZVxuICogICBpbmplY3RlZCBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBndWlkZS9kaSAkaW5qZWN0IEFubm90YXRpb259IHJ1bGVzLlxuICogQHBhcmFtIHtPYmplY3Q9fSBzZWxmIFRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGludm9rZWQgYGZuYCBmdW5jdGlvbi5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNoYXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0aGUgdXNlciB0byBxdWVyeSBpZiB0aGUgcGFydGljdWxhciBzZXJ2aWNlIGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBpbmplY3RvciBoYXMgZ2l2ZW4gc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNpbnN0YW50aWF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgSlMgdHlwZS4gVGhlIG1ldGhvZCB0YWtlcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBpbnZva2VzIHRoZSBuZXdcbiAqIG9wZXJhdG9yLCBhbmQgc3VwcGxpZXMgYWxsIG9mIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGFzIHNwZWNpZmllZCBieSB0aGVcbiAqIGNvbnN0cnVjdG9yIGFubm90YXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gVHlwZSBBbm5vdGF0ZWQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXNcbiAqIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBuZXcgaW5zdGFuY2Ugb2YgYFR5cGVgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2Fubm90YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHNlcnZpY2UgbmFtZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIHJlcXVlc3RpbmcgZm9yIGluamVjdGlvbi4gVGhpcyBBUEkgaXNcbiAqIHVzZWQgYnkgdGhlIGluamVjdG9yIHRvIGRldGVybWluZSB3aGljaCBzZXJ2aWNlcyBuZWVkIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uIHdoZW4gdGhlXG4gKiBmdW5jdGlvbiBpcyBpbnZva2VkLiBUaGVyZSBhcmUgdGhyZWUgd2F5cyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBuZWVkZWRcbiAqIGRlcGVuZGVuY2llcy5cbiAqXG4gKiAjIEFyZ3VtZW50IG5hbWVzXG4gKlxuICogVGhlIHNpbXBsZXN0IGZvcm0gaXMgdG8gZXh0cmFjdCB0aGUgZGVwZW5kZW5jaWVzIGZyb20gdGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24uIFRoaXMgaXMgZG9uZVxuICogYnkgY29udmVydGluZyB0aGUgZnVuY3Rpb24gaW50byBhIHN0cmluZyB1c2luZyBgdG9TdHJpbmcoKWAgbWV0aG9kIGFuZCBleHRyYWN0aW5nIHRoZSBhcmd1bWVudFxuICogbmFtZXMuXG4gKiBgYGBqc1xuICogICAvLyBHaXZlblxuICogICBmdW5jdGlvbiBNeUNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfVxuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGRpc2FsbG93IHRoaXMgbWV0aG9kIGJ5IHVzaW5nIHN0cmljdCBpbmplY3Rpb24gbW9kZS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB3b3JrIHdpdGggY29kZSBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHRoZSBmb2xsb3dpbmdcbiAqIGFubm90YXRpb24gc3RyYXRlZ2llcyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqICMgVGhlIGAkaW5qZWN0YCBwcm9wZXJ0eVxuICpcbiAqIElmIGEgZnVuY3Rpb24gaGFzIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBhbmQgaXRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIHRoZW4gdGhlIHN0cmluZ3NcbiAqIHJlcHJlc2VudCBuYW1lcyBvZiBzZXJ2aWNlcyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbi5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIHZhciBNeUNvbnRyb2xsZXIgPSBmdW5jdGlvbihvYmZ1c2NhdGVkU2NvcGUsIG9iZnVzY2F0ZWRSb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKiAgIC8vIERlZmluZSBmdW5jdGlvbiBkZXBlbmRlbmNpZXNcbiAqICAgTXlDb250cm9sbGVyWyckaW5qZWN0J10gPSBbJyRzY29wZScsICckcm91dGUnXTtcbiAqXG4gKiAgIC8vIFRoZW5cbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pO1xuICogYGBgXG4gKlxuICogIyBUaGUgYXJyYXkgbm90YXRpb25cbiAqXG4gKiBJdCBpcyBvZnRlbiBkZXNpcmFibGUgdG8gaW5saW5lIEluamVjdGVkIGZ1bmN0aW9ucyBhbmQgdGhhdCdzIHdoZW4gc2V0dGluZyB0aGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKiBpcyB2ZXJ5IGluY29udmVuaWVudC4gSW4gdGhlc2Ugc2l0dWF0aW9ucyB1c2luZyB0aGUgYXJyYXkgbm90YXRpb24gdG8gc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGluXG4gKiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbiBpcyBhIGJldHRlciBjaG9pY2U6XG4gKlxuICogYGBganNcbiAqICAgLy8gV2Ugd2lzaCB0byB3cml0ZSB0aGlzIChub3QgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24gc2FmZSlcbiAqICAgaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gV2UgYXJlIGZvcmNlZCB0byB3cml0ZSBicmVhayBpbmxpbmluZ1xuICogICB2YXIgdG1wRm4gPSBmdW5jdGlvbihvYmZ1c2NhdGVkQ29tcGlsZSwgb2JmdXNjYXRlZFJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9O1xuICogICB0bXBGbi4kaW5qZWN0ID0gWyckY29tcGlsZScsICckcm9vdFNjb3BlJ107XG4gKiAgIGluamVjdG9yLmludm9rZSh0bXBGbik7XG4gKlxuICogICAvLyBUbyBiZXR0ZXIgc3VwcG9ydCBpbmxpbmUgZnVuY3Rpb24gdGhlIGlubGluZSBhbm5vdGF0aW9uIGlzIHN1cHBvcnRlZFxuICogICBpbmplY3Rvci5pbnZva2UoWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmQ29tcGlsZSwgb2JmUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1dKTtcbiAqXG4gKiAgIC8vIFRoZXJlZm9yZVxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoXG4gKiAgICAgIFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZnVzXyRjb21waWxlLCBvYmZ1c18kcm9vdFNjb3BlKSB7fV0pXG4gKiAgICApLnRvRXF1YWwoWyckY29tcGlsZScsICckcm9vdFNjb3BlJ10pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZm4gRnVuY3Rpb24gZm9yIHdoaWNoIGRlcGVuZGVudCBzZXJ2aWNlIG5hbWVzIG5lZWQgdG9cbiAqIGJlIHJldHJpZXZlZCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gW3N0cmljdERpPWZhbHNlXSBEaXNhbGxvdyBhcmd1bWVudCBuYW1lIGFubm90YXRpb24gaW5mZXJlbmNlLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gVGhlIG5hbWVzIG9mIHRoZSBzZXJ2aWNlcyB3aGljaCB0aGUgZnVuY3Rpb24gcmVxdWlyZXMuXG4gKi9cblxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwcm92aWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhIG51bWJlciBvZiBtZXRob2RzIGZvciByZWdpc3RlcmluZyBjb21wb25lbnRzXG4gKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gTWFueSBvZiB0aGVzZSBmdW5jdGlvbnMgYXJlIGFsc28gZXhwb3NlZCBvblxuICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS5cbiAqXG4gKiBBbiBBbmd1bGFyICoqc2VydmljZSoqIGlzIGEgc2luZ2xldG9uIG9iamVjdCBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIGZhY3RvcnkqKi4gIFRoZXNlICoqc2VydmljZVxuICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi5cbiAqIFRoZSAqKnNlcnZpY2UgcHJvdmlkZXJzKiogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucy4gV2hlbiBpbnN0YW50aWF0ZWQgdGhleSBtdXN0IGNvbnRhaW4gYVxuICogcHJvcGVydHkgY2FsbGVkIGAkZ2V0YCwgd2hpY2ggaG9sZHMgdGhlICoqc2VydmljZSBmYWN0b3J5KiogZnVuY3Rpb24uXG4gKlxuICogV2hlbiB5b3UgcmVxdWVzdCBhIHNlcnZpY2UsIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSBpcyByZXNwb25zaWJsZSBmb3IgZmluZGluZyB0aGVcbiAqIGNvcnJlY3QgKipzZXJ2aWNlIHByb3ZpZGVyKiosIGluc3RhbnRpYXRpbmcgaXQgYW5kIHRoZW4gY2FsbGluZyBpdHMgYCRnZXRgICoqc2VydmljZSBmYWN0b3J5KipcbiAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLlxuICpcbiAqIE9mdGVuIHNlcnZpY2VzIGhhdmUgbm8gY29uZmlndXJhdGlvbiBvcHRpb25zIGFuZCB0aGVyZSBpcyBubyBuZWVkIHRvIGFkZCBtZXRob2RzIHRvIHRoZSBzZXJ2aWNlXG4gKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvclxuICogdGhlc2UgY2FzZXMgdGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIHRvIHJlZ2lzdGVyXG4gKiBzZXJ2aWNlcyB3aXRob3V0IHNwZWNpZnlpbmcgYSBwcm92aWRlci5cbiAqXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyKX0gLSByZWdpc3RlcnMgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiB3aXRoIHRoZVxuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9XG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50IGNvbnN0YW50KG5hbWUsIG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgcHJvdmlkZXJzIGFuZCBzZXJ2aWNlcy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWUobmFtZSwgb2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gb25seSBiZSBhY2Nlc3NlZCBieVxuICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5IGZhY3RvcnkobmFtZSwgZm4pfSAtIHJlZ2lzdGVycyBhIHNlcnZpY2UgKipmYWN0b3J5IGZ1bmN0aW9uKipcbiAqICAgICB0aGF0IHdpbGwgYmUgd3JhcHBlZCBpbiBhICoqc2VydmljZSBwcm92aWRlcioqIG9iamVjdCwgd2hvc2UgYCRnZXRgIHByb3BlcnR5IHdpbGwgY29udGFpbiB0aGVcbiAqICAgICBnaXZlbiBmYWN0b3J5IGZ1bmN0aW9uLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2UobmFtZSwgRm4pfSAtIHJlZ2lzdGVycyBhICoqY29uc3RydWN0b3IgZnVuY3Rpb24qKlxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBpbnN0YW50aWF0ZVxuICogICAgICBhIG5ldyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yKG5hbWUsIGRlY29yRm4pfSAtIHJlZ2lzdGVycyBhICoqZGVjb3JhdG9yIGZ1bmN0aW9uKiogdGhhdFxuICogICAgICB3aWxsIGJlIGFibGUgdG8gbW9kaWZ5IG9yIHJlcGxhY2UgdGhlIGltcGxlbWVudGF0aW9uIG9mIGFub3RoZXIgc2VydmljZS5cbiAqXG4gKiBTZWUgdGhlIGluZGl2aWR1YWwgbWV0aG9kcyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNwcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnByb3ZpZGVyIGZ1bmN0aW9uKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFByb3ZpZGVyIGZ1bmN0aW9uc1xuICogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgd2hvc2UgaW5zdGFuY2VzIGFyZSByZXNwb25zaWJsZSBmb3IgXCJwcm92aWRpbmdcIiBhIGZhY3RvcnkgZm9yIGFcbiAqIHNlcnZpY2UuXG4gKlxuICogU2VydmljZSBwcm92aWRlciBuYW1lcyBzdGFydCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRoZXkgcHJvdmlkZSBmb2xsb3dlZCBieSBgUHJvdmlkZXJgLlxuICogRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIGhhcyBhIHByb3ZpZGVyIGNhbGxlZFxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9LlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgb2JqZWN0cyBjYW4gaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgd2hpY2ggYWxsb3cgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXJcbiAqIGFuZCBpdHMgc2VydmljZS4gSW1wb3J0YW50bHksIHlvdSBjYW4gY29uZmlndXJlIHdoYXQga2luZCBvZiBzZXJ2aWNlIGlzIGNyZWF0ZWQgYnkgdGhlIGAkZ2V0YFxuICogbWV0aG9kLCBvciBob3cgdGhhdCBzZXJ2aWNlIHdpbGwgYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfSBoYXMgYVxuICogbWV0aG9kIHtAbGluayBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkIGRlYnVnRW5hYmxlZH1cbiAqIHdoaWNoIGxldHMgeW91IHNwZWNpZnkgd2hldGhlciB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB3aWxsIGxvZyBkZWJ1ZyBtZXNzYWdlcyB0byB0aGVcbiAqIGNvbnNvbGUgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdQcm92aWRlcidgIGtleS5cbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbigpKX0gcHJvdmlkZXIgSWYgdGhlIHByb3ZpZGVyIGlzOlxuICpcbiAqICAgLSBgT2JqZWN0YDogdGhlbiBpdCBzaG91bGQgaGF2ZSBhIGAkZ2V0YCBtZXRob2QuIFRoZSBgJGdldGAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgJGluamVjdG9yLmludm9rZSgpfSB3aGVuIGFuIGluc3RhbmNlIG5lZWRzIHRvIGJlIGNyZWF0ZWQuXG4gKiAgIC0gYENvbnN0cnVjdG9yYDogYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByb3ZpZGVyIHdpbGwgYmUgY3JlYXRlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG5cbiAqIEBleGFtcGxlXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgZXZlbnQgdHJhY2tpbmcgc2VydmljZSBhbmQgcmVnaXN0ZXIgaXQgdXNpbmdcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICpcbiAqIGBgYGpzXG4gKiAgLy8gRGVmaW5lIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICBmdW5jdGlvbiBFdmVudFRyYWNrZXJQcm92aWRlcigpIHtcbiAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snO1xuICpcbiAqICAgIC8vIEEgcHJvdmlkZXIgbWV0aG9kIGZvciBjb25maWd1cmluZyB3aGVyZSB0aGUgdHJhY2tlZCBldmVudHMgc2hvdWxkIGJlZW4gc2F2ZWRcbiAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAqICAgICAgdHJhY2tpbmdVcmwgPSB1cmw7XG4gKiAgICB9O1xuICpcbiAqICAgIC8vIFRoZSBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb25cbiAqICAgIHRoaXMuJGdldCA9IFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9O1xuICogICAgICByZXR1cm4ge1xuICogICAgICAgIC8vIENhbGwgdGhpcyB0byB0cmFjayBhbiBldmVudFxuICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICogICAgICAgICAgdmFyIGNvdW50ID0gdHJhY2tlZEV2ZW50c1tldmVudF0gfHwgMDtcbiAqICAgICAgICAgIGNvdW50ICs9IDE7XG4gKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50O1xuICogICAgICAgICAgcmV0dXJuIGNvdW50O1xuICogICAgICAgIH0sXG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybFxuICogICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgJGh0dHAucG9zdCh0cmFja2luZ1VybCwgdHJhY2tlZEV2ZW50cyk7XG4gKiAgICAgICAgfVxuICogICAgICB9O1xuICogICAgfV07XG4gKiAgfVxuICpcbiAqICBkZXNjcmliZSgnZXZlbnRUcmFja2VyJywgZnVuY3Rpb24oKSB7XG4gKiAgICB2YXIgcG9zdFNweTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkge1xuICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCdldmVudFRyYWNrZXInLCBFdmVudFRyYWNrZXJQcm92aWRlcik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oZXZlbnRUcmFja2VyUHJvdmlkZXIpIHtcbiAqICAgICAgLy8gQ29uZmlndXJlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikge1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDEpO1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCdzYXZlcyB0byB0aGUgdHJhY2tpbmcgdXJsJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlciwgJGh0dHApIHtcbiAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpO1xuICogICAgICBldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5zYXZlKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLm5vdC50b0VxdWFsKCcvdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkudG9FcXVhbCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTtcbiAqICAgIH0pKTtcbiAqICB9KTtcbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZmFjdG9yeVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyIGNvbnNpc3RzIG9mIG9ubHkgYSBgJGdldGAgcHJvcGVydHksXG4gKiB3aGljaCBpcyB0aGUgZ2l2ZW4gc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KGdldEZuKX0gaWYgeW91IGRvIG5vdCBuZWVkIHRvXG4gKiBjb25maWd1cmUgeW91ciBzZXJ2aWNlIGluIGEgcHJvdmlkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gJGdldEZuIFRoZSBpbmplY3RhYmxlICRnZXRGbiBmb3IgdGhlIGluc3RhbmNlIGNyZWF0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3IgYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2VcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmZhY3RvcnkoJ3BpbmcnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24gcGluZygpIHtcbiAqICAgICAgIHJldHVybiAkaHR0cC5zZW5kKCcvcGluZycpO1xuICogICAgIH07XG4gKiAgIH1dKTtcbiAqIGBgYFxuICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAqICAgICBwaW5nKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNzZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBjb25zdHJ1Y3RvcioqLCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCBgbmV3YCB0byBjcmVhdGUgdGhlIHNlcnZpY2VcbiAqIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyBhIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBpbnN0YW5jZSBpbnN0YW50aWF0ZWQgYnkgdGhlIGluamVjdG9yIGZyb20gdGhlIHNlcnZpY2UgY29uc3RydWN0b3JcbiAqIGZ1bmN0aW9uLlxuICpcbiAqIEludGVybmFsbHkgaXQgbG9va3MgYSBiaXQgbGlrZSB0aGlzOlxuICpcbiAqIGBgYFxuICoge1xuICogICAkZ2V0OiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gJGluamVjdG9yLmluc3RhbnRpYXRlKGNvbnN0cnVjdG9yKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICpcbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlXG4gKiBhcyBhIHR5cGUvY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gY29uc3RydWN0b3IgQW4gaW5qZWN0YWJsZSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pXG4gKiAgICAgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0uXG4gKiBgYGBqc1xuICogICB2YXIgUGluZyA9IGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICogICB9O1xuICpcbiAqICAgUGluZy4kaW5qZWN0ID0gWyckaHR0cCddO1xuICpcbiAqICAgUGluZy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB0aGlzLiRodHRwLmdldCgnL3BpbmcnKTtcbiAqICAgfTtcbiAqICAgJHByb3ZpZGUuc2VydmljZSgncGluZycsIFBpbmcpO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcuc2VuZCgpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjdmFsdWVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKip2YWx1ZSBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsIGFcbiAqIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzXG4gKiBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyBhIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB0YWtlcyBubyBhcmd1bWVudHMgYW5kIHJldHVybnMgdGhlICoqdmFsdWVcbiAqIHNlcnZpY2UqKi4gVGhhdCBhbHNvIG1lYW5zIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmplY3Qgb3RoZXIgc2VydmljZXMgaW50byBhIHZhbHVlIHNlcnZpY2UuXG4gKlxuICogVmFsdWUgc2VydmljZXMgYXJlIHNpbWlsYXIgdG8gY29uc3RhbnQgc2VydmljZXMsIGV4Y2VwdCB0aGF0IHRoZXkgY2Fubm90IGJlIGluamVjdGVkIGludG8gYVxuICogbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYnV0IHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnlcbiAqIGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgdmFsdWUgc2VydmljZXMuXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS52YWx1ZSgnQURNSU5fVVNFUicsICdhZG1pbicpO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ1JvbGVMb29rdXAnLCB7IGFkbWluOiAwLCB3cml0ZXI6IDEsIHJlYWRlcjogMiB9KTtcbiAqXG4gKiAgICRwcm92aWRlLnZhbHVlKCdoYWxmT2YnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZSAvIDI7XG4gKiAgIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2NvbnN0YW50XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqY29uc3RhbnQgc2VydmljZSoqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBzdWNoIGFzIGEgc3RyaW5nLFxuICogYSBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbi4gTGlrZSB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9LCBpdCBpcyBub3RcbiAqIHBvc3NpYmxlIHRvIGluamVjdCBvdGhlciBzZXJ2aWNlcyBpbnRvIGEgY29uc3RhbnQuXG4gKlxuICogQnV0IHVubGlrZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0sIGEgY29uc3RhbnQgY2FuIGJlXG4gKiBpbmplY3RlZCBpbnRvIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYW5kIGl0IGNhbm5vdFxuICogYmUgb3ZlcnJpZGRlbiBieSBhbiBBbmd1bGFyIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb25zdGFudC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGNvbnN0YW50IHZhbHVlLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGEgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyBjb25zdGFudHM6XG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5jb25zdGFudCgnU0hBUkRfSEVJR0hUJywgMzA2KTtcbiAqXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdNWV9DT0xPVVJTJywgWydyZWQnLCAnYmx1ZScsICdncmV5J10pO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ2RvdWJsZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlICogMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZGVjb3JhdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqZGVjb3JhdG9yIGZ1bmN0aW9uKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIEEgZGVjb3JhdG9yIGZ1bmN0aW9uXG4gKiBpbnRlcmNlcHRzIHRoZSBjcmVhdGlvbiBvZiBhIHNlcnZpY2UsIGFsbG93aW5nIGl0IHRvIG92ZXJyaWRlIG9yIG1vZGlmeSB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBzZXJ2aWNlLiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBkZWNvcmF0b3IgZnVuY3Rpb24gbWF5IGJlIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLCBvciBhIG5ldyBzZXJ2aWNlXG4gKiB0aGF0IHJlcGxhY2VzIChvciB3cmFwcyBhbmQgZGVsZWdhdGVzIHRvKSB0aGUgb3JpZ2luYWwgc2VydmljZS5cbiAqXG4gKiBZb3UgY2FuIGZpbmQgb3V0IG1vcmUgYWJvdXQgdXNpbmcgZGVjb3JhdG9ycyBpbiB0aGUge0BsaW5rIGd1aWRlL2RlY29yYXRvcnN9IGd1aWRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZGVjb3JhdG9yIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAqICAgIHByb3ZpZGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS4gVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB1c2luZ1xuICogICAgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgaW5qZWN0b3IuaW52b2tlfSBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBmdWxseSBpbmplY3RhYmxlLlxuICogICAgTG9jYWwgaW5qZWN0aW9uIGFyZ3VtZW50czpcbiAqXG4gKiAgICAqIGAkZGVsZWdhdGVgIC0gVGhlIG9yaWdpbmFsIHNlcnZpY2UgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSByZXBsYWNlZCwgbW9ua2V5IHBhdGNoZWQsIGNvbmZpZ3VyZWQsXG4gKiAgICAgIGRlY29yYXRlZCBvciBkZWxlZ2F0ZWQgdG8uXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgd2UgZGVjb3JhdGUgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgdG8gY29udmVydCB3YXJuaW5ncyB0byBlcnJvcnMgYnkgaW50ZXJjZXB0aW5nXG4gKiBjYWxscyB0byB7QGxpbmsgbmcuJGxvZyNlcnJvciAkbG9nLndhcm4oKX0uXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRsb2cnLCBbJyRkZWxlZ2F0ZScsIGZ1bmN0aW9uKCRkZWxlZ2F0ZSkge1xuICogICAgICRkZWxlZ2F0ZS53YXJuID0gJGRlbGVnYXRlLmVycm9yO1xuICogICAgIHJldHVybiAkZGVsZWdhdGU7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlSW5qZWN0b3IobW9kdWxlc1RvTG9hZCwgc3RyaWN0RGkpIHtcbiAgc3RyaWN0RGkgPSAoc3RyaWN0RGkgPT09IHRydWUpO1xuICB2YXIgSU5TVEFOVElBVElORyA9IHt9LFxuICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLFxuICAgICAgcGF0aCA9IFtdLFxuICAgICAgbG9hZGVkTW9kdWxlcyA9IG5ldyBOZ01hcCgpLFxuICAgICAgcHJvdmlkZXJDYWNoZSA9IHtcbiAgICAgICAgJHByb3ZpZGU6IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSxcbiAgICAgICAgICAgIGZhY3Rvcnk6IHN1cHBvcnRPYmplY3QoZmFjdG9yeSksXG4gICAgICAgICAgICBzZXJ2aWNlOiBzdXBwb3J0T2JqZWN0KHNlcnZpY2UpLFxuICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLFxuICAgICAgICAgICAgY29uc3RhbnQ6IHN1cHBvcnRPYmplY3QoY29uc3RhbnQpLFxuICAgICAgICAgICAgZGVjb3JhdG9yOiBkZWNvcmF0b3JcbiAgICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvdmlkZXJJbmplY3RvciA9IChwcm92aWRlckNhY2hlLiRpbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3Rvcihwcm92aWRlckNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhjYWxsZXIpKSB7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChjYWxsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgJ1Vua25vd24gcHJvdmlkZXI6IHswfScsIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgICB9KSksXG4gICAgICBpbnN0YW5jZUNhY2hlID0ge30sXG4gICAgICBwcm90b0luc3RhbmNlSW5qZWN0b3IgPVxuICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24oc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZU5hbWUgKyBwcm92aWRlclN1ZmZpeCwgY2FsbGVyKTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShcbiAgICAgICAgICAgICAgICBwcm92aWRlci4kZ2V0LCBwcm92aWRlciwgdW5kZWZpbmVkLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgfSksXG4gICAgICBpbnN0YW5jZUluamVjdG9yID0gcHJvdG9JbnN0YW5jZUluamVjdG9yO1xuXG4gIHByb3ZpZGVyQ2FjaGVbJyRpbmplY3RvcicgKyBwcm92aWRlclN1ZmZpeF0gPSB7ICRnZXQ6IHZhbHVlRm4ocHJvdG9JbnN0YW5jZUluamVjdG9yKSB9O1xuICBpbnN0YW5jZUluamVjdG9yLm1vZHVsZXMgPSBwcm92aWRlckluamVjdG9yLm1vZHVsZXMgPSBjcmVhdGVNYXAoKTtcbiAgdmFyIHJ1bkJsb2NrcyA9IGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpO1xuICBpbnN0YW5jZUluamVjdG9yID0gcHJvdG9JbnN0YW5jZUluamVjdG9yLmdldCgnJGluamVjdG9yJyk7XG4gIGluc3RhbmNlSW5qZWN0b3Iuc3RyaWN0RGkgPSBzdHJpY3REaTtcbiAgZm9yRWFjaChydW5CbG9ja3MsIGZ1bmN0aW9uKGZuKSB7IGlmIChmbikgaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZm4pOyB9KTtcblxuICByZXR1cm4gaW5zdGFuY2VJbmplY3RvcjtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gJHByb3ZpZGVyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIHN1cHBvcnRPYmplY3QoZGVsZWdhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgZm9yRWFjaChrZXksIHJldmVyc2VQYXJhbXMoZGVsZWdhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWxlZ2F0ZShrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ3NlcnZpY2UnKTtcbiAgICBpZiAoaXNGdW5jdGlvbihwcm92aWRlcl8pIHx8IGlzQXJyYXkocHJvdmlkZXJfKSkge1xuICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pO1xuICAgIH1cbiAgICBpZiAoIXByb3ZpZGVyXy4kZ2V0KSB7XG4gICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3BnZXQnLCAnUHJvdmlkZXIgXFwnezB9XFwnIG11c3QgZGVmaW5lICRnZXQgZmFjdG9yeSBtZXRob2QuJywgbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiAocHJvdmlkZXJDYWNoZVtuYW1lICsgcHJvdmlkZXJTdWZmaXhdID0gcHJvdmlkZXJfKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIC8qKiBAdGhpcyAqLyBmdW5jdGlvbiBlbmZvcmNlZFJldHVyblZhbHVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZhY3RvcnksIHRoaXMpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bmRlZicsICdQcm92aWRlciBcXCd7MH1cXCcgbXVzdCByZXR1cm4gYSB2YWx1ZSBmcm9tICRnZXQgZmFjdG9yeSBtZXRob2QuJywgbmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkge1xuICAgIHJldHVybiBwcm92aWRlcihuYW1lLCB7XG4gICAgICAkZ2V0OiBlbmZvcmNlICE9PSBmYWxzZSA/IGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5Rm4pIDogZmFjdG9yeUZuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgIH1dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbCksIGZhbHNlKTsgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7XG4gICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIGluc3RhbmNlQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xuICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSxcbiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDtcblxuICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7XG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZGVjb3JGbiwgbnVsbCwgeyRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNb2R1bGUgTG9hZGluZ1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCkge1xuICAgIGFzc2VydEFyZyhpc1VuZGVmaW5lZChtb2R1bGVzVG9Mb2FkKSB8fCBpc0FycmF5KG1vZHVsZXNUb0xvYWQpLCAnbW9kdWxlc1RvTG9hZCcsICdub3QgYW4gYXJyYXknKTtcbiAgICB2YXIgcnVuQmxvY2tzID0gW10sIG1vZHVsZUZuO1xuICAgIGZvckVhY2gobW9kdWxlc1RvTG9hZCwgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBpZiAobG9hZGVkTW9kdWxlcy5nZXQobW9kdWxlKSkgcmV0dXJuO1xuICAgICAgbG9hZGVkTW9kdWxlcy5zZXQobW9kdWxlLCB0cnVlKTtcblxuICAgICAgZnVuY3Rpb24gcnVuSW52b2tlUXVldWUocXVldWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHF1ZXVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgaW52b2tlQXJncyA9IHF1ZXVlW2ldLFxuICAgICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KGludm9rZUFyZ3NbMF0pO1xuXG4gICAgICAgICAgcHJvdmlkZXJbaW52b2tlQXJnc1sxXV0uYXBwbHkocHJvdmlkZXIsIGludm9rZUFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhtb2R1bGUpKSB7XG4gICAgICAgICAgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7XG4gICAgICAgICAgaW5zdGFuY2VJbmplY3Rvci5tb2R1bGVzW21vZHVsZV0gPSBtb2R1bGVGbjtcbiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpO1xuICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2NvbmZpZ0Jsb2Nrcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PT0gLTEpIHtcbiAgICAgICAgICAvLyBTYWZhcmkgJiBGRidzIHN0YWNrIHRyYWNlcyBkb24ndCBjb250YWluIGVycm9yLm1lc3NhZ2UgY29udGVudFxuICAgICAgICAgIC8vIHVubGlrZSB0aG9zZSBvZiBDaHJvbWUgYW5kIElFXG4gICAgICAgICAgLy8gU28gaWYgc3RhY2sgZG9lc24ndCBjb250YWluIG1lc3NhZ2UsIHdlIGNyZWF0ZSBhIG5ldyBzdHJpbmcgdGhhdCBjb250YWlucyBib3RoLlxuICAgICAgICAgIC8vIFNpbmNlIGVycm9yLnN0YWNrIGlzIHJlYWQtb25seSBpbiBTYWZhcmksIEknbSBvdmVycmlkaW5nIGUgYW5kIG5vdCBlLnN0YWNrIGhlcmUuXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4LWFzc2lnblxuICAgICAgICAgIGUgPSBlLm1lc3NhZ2UgKyAnXFxuJyArIGUuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdtb2R1bGVycicsICdGYWlsZWQgdG8gaW5zdGFudGlhdGUgbW9kdWxlIHswfSBkdWUgdG86XFxuezF9JyxcbiAgICAgICAgICAgICAgICAgIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJ1bkJsb2NrcztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBpbnRlcm5hbCBJbmplY3RvclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xuICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7XG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gZmFjdG9yeShzZXJ2aWNlTmFtZSwgY2FsbGVyKTtcbiAgICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgcGF0aC5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbmplY3Rpb25BcmdzKGZuLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICRpbmplY3QgPSBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlKGZuLCBzdHJpY3REaSwgc2VydmljZU5hbWUpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gJGluamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gJGluamVjdFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdpdGtuJyxcbiAgICAgICAgICAgICAgICAgICdJbmNvcnJlY3QgaW5qZWN0aW9uIHRva2VuISBFeHBlY3RlZCBzZXJ2aWNlIG5hbWUgYXMgc3RyaW5nLCBnb3QgezB9Jywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2gobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gbG9jYWxzW2tleV0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2VydmljZShrZXksIHNlcnZpY2VOYW1lKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJncztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NsYXNzKGZ1bmMpIHtcbiAgICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgICAgLy8gSUUgOS0xMSBkbyBub3Qgc3VwcG9ydCBjbGFzc2VzIGFuZCBJRTkgbGVha3Mgd2l0aCB0aGUgY29kZSBiZWxvdy5cbiAgICAgIGlmIChtc2llIHx8IHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBmdW5jLiQkbmdJc0NsYXNzO1xuICAgICAgaWYgKCFpc0Jvb2xlYW4ocmVzdWx0KSkge1xuICAgICAgICAvLyBTdXBwb3J0OiBFZGdlIDEyLTEzIG9ubHlcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy82MTU2MTM1L1xuICAgICAgICByZXN1bHQgPSBmdW5jLiQkbmdJc0NsYXNzID0gL14oPzpjbGFzc1xcYnxjb25zdHJ1Y3RvclxcKCkvLnRlc3Qoc3RyaW5naWZ5Rm4oZnVuYykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxzID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZXJ2aWNlTmFtZSA9IGxvY2FscztcbiAgICAgICAgbG9jYWxzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ3MgPSBpbmplY3Rpb25BcmdzKGZuLCBsb2NhbHMsIHNlcnZpY2VOYW1lKTtcbiAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICBmbiA9IGZuW2ZuLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQ2xhc3MoZm4pKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1pbnZva2UtYXBwbHktdnMtc3dpdGNoXG4gICAgICAgIC8vICM1Mzg4XG4gICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoZm4sIGFyZ3MpKSgpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gaW5zdGFudGlhdGUoVHlwZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgLy8gQ2hlY2sgaWYgVHlwZSBpcyBhbm5vdGF0ZWQgYW5kIHVzZSBqdXN0IHRoZSBnaXZlbiBmdW5jdGlvbiBhdCBuLTEgYXMgcGFyYW1ldGVyXG4gICAgICAvLyBlLmcuIHNvbWVNb2R1bGUuZmFjdG9yeSgnZ3JlZXRlcicsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKHJlbmFtZWQkd2luZG93KSB7fV0pO1xuICAgICAgdmFyIGN0b3IgPSAoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpO1xuICAgICAgdmFyIGFyZ3MgPSBpbmplY3Rpb25BcmdzKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpO1xuICAgICAgLy8gRW1wdHkgb2JqZWN0IGF0IHBvc2l0aW9uIDAgaXMgaWdub3JlZCBmb3IgaW52b2NhdGlvbiB3aXRoIGBuZXdgLCBidXQgcmVxdWlyZWQuXG4gICAgICBhcmdzLnVuc2hpZnQobnVsbCk7XG4gICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShjdG9yLCBhcmdzKSkoKTtcbiAgICB9XG5cblxuICAgIHJldHVybiB7XG4gICAgICBpbnZva2U6IGludm9rZSxcbiAgICAgIGluc3RhbnRpYXRlOiBpbnN0YW50aWF0ZSxcbiAgICAgIGdldDogZ2V0U2VydmljZSxcbiAgICAgIGFubm90YXRlOiBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlLFxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlckNhY2hlLmhhc093blByb3BlcnR5KG5hbWUgKyBwcm92aWRlclN1ZmZpeCkgfHwgY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5jcmVhdGVJbmplY3Rvci4kJGFubm90YXRlID0gYW5ub3RhdGU7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgYCRhbmNob3JTY3JvbGxQcm92aWRlcmAgdG8gZGlzYWJsZSBhdXRvbWF0aWMgc2Nyb2xsaW5nIHdoZW5ldmVyXG4gKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gJEFuY2hvclNjcm9sbFByb3ZpZGVyKCkge1xuXG4gIHZhciBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCeSBkZWZhdWx0LCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCAkYW5jaG9yU2Nyb2xsKCl9IHdpbGwgYXV0b21hdGljYWxseSBkZXRlY3QgY2hhbmdlcyB0b1xuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kIHNjcm9sbCB0byB0aGUgZWxlbWVudCBtYXRjaGluZyB0aGUgbmV3IGhhc2guPGJyIC8+XG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcuXG4gICAqXG4gICAqIElmIGF1dG9tYXRpYyBzY3JvbGxpbmcgaXMgZGlzYWJsZWQsIG9uZSBtdXN0IGV4cGxpY2l0bHkgY2FsbFxuICAgKiB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCAkYW5jaG9yU2Nyb2xsKCl9IGluIG9yZGVyIHRvIHNjcm9sbCB0byB0aGUgZWxlbWVudCByZWxhdGVkIHRvIHRoZVxuICAgKiBjdXJyZW50IGhhc2guXG4gICAqL1xuICB0aGlzLmRpc2FibGVBdXRvU2Nyb2xsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGFuY2hvclNjcm9sbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uXG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXaGVuIGNhbGxlZCwgaXQgc2Nyb2xscyB0byB0aGUgZWxlbWVudCByZWxhdGVkIHRvIHRoZSBzcGVjaWZpZWQgYGhhc2hgIG9yIChpZiBvbWl0dGVkKSB0byB0aGVcbiAgICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0sIGFjY29yZGluZyB0byB0aGUgcnVsZXMgc3BlY2lmaWVkXG4gICAqIGluIHRoZVxuICAgKiBbSFRNTDUgc3BlY10oaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvYnJvd3NlcnMuaHRtbCNhbi1pbmRpY2F0ZWQtcGFydC1vZi10aGUtZG9jdW1lbnQpLlxuICAgKlxuICAgKiBJdCBhbHNvIHdhdGNoZXMgdGhlIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgYXV0b21hdGljYWxseSBzY3JvbGxzIHRvXG4gICAqIG1hdGNoIGFueSBhbmNob3Igd2hlbmV2ZXIgaXQgY2hhbmdlcy4gVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY2FsbGluZ1xuICAgKiB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nICRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpfS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHVzZSBpdHMge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCB5T2Zmc2V0fSBwcm9wZXJ0eSB0byBzcGVjaWZ5IGFcbiAgICogdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoZWl0aGVyIGZpeGVkIG9yIGR5bmFtaWMpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGhhc2ggVGhlIGhhc2ggc3BlY2lmeWluZyB0aGUgZWxlbWVudCB0byBzY3JvbGwgdG8uIElmIG9taXR0ZWQsIHRoZSB2YWx1ZSBvZlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogQHByb3BlcnR5IHsobnVtYmVyfGZ1bmN0aW9ufGpxTGl0ZSl9IHlPZmZzZXRcbiAgICogSWYgc2V0LCBzcGVjaWZpZXMgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0LiBUaGlzIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHRoZXJlIGFyZSBmaXhlZFxuICAgKiBwb3NpdGlvbmVkIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UsIHN1Y2ggYXMgbmF2YmFycywgaGVhZGVycyBldGMuXG4gICAqXG4gICAqIGB5T2Zmc2V0YCBjYW4gYmUgc3BlY2lmaWVkIGluIHZhcmlvdXMgd2F5czpcbiAgICogLSAqKm51bWJlcioqOiBBIGZpeGVkIG51bWJlciBvZiBwaXhlbHMgdG8gYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipmdW5jdGlvbioqOiBBIGdldHRlciBmdW5jdGlvbiBjYWxsZWQgZXZlcnl0aW1lIGAkYW5jaG9yU2Nyb2xsKClgIGlzIGV4ZWN1dGVkLiBNdXN0IHJldHVyblxuICAgKiAgIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IChpbiBwaXhlbHMpLjxiciAvPjxiciAvPlxuICAgKiAtICoqanFMaXRlKio6IEEganFMaXRlL2pRdWVyeSBlbGVtZW50IHRvIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIG9mZnNldC4gVGhlIGRpc3RhbmNlIGZyb21cbiAgICogICB0aGUgdG9wIG9mIHRoZSBwYWdlIHRvIHRoZSBlbGVtZW50J3MgYm90dG9tIHdpbGwgYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+XG4gICAqICAgKipOb3RlKio6IFRoZSBlbGVtZW50IHdpbGwgYmUgdGFrZW4gaW50byBhY2NvdW50IG9ubHkgYXMgbG9uZyBhcyBpdHMgYHBvc2l0aW9uYCBpcyBzZXQgdG9cbiAgICogICBgZml4ZWRgLiBUaGlzIG9wdGlvbiBpcyB1c2VmdWwsIHdoZW4gZGVhbGluZyB3aXRoIHJlc3BvbnNpdmUgbmF2YmFycy9oZWFkZXJzIHRoYXQgYWRqdXN0XG4gICAqICAgdGhlaXIgaGVpZ2h0IGFuZC9vciBwb3NpdGlvbmluZyBhY2NvcmRpbmcgdG8gdGhlIHZpZXdwb3J0J3Mgc2l6ZS5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqIEluIG9yZGVyIGZvciBgeU9mZnNldGAgdG8gd29yayBwcm9wZXJseSwgc2Nyb2xsaW5nIHNob3VsZCB0YWtlIHBsYWNlIG9uIHRoZSBkb2N1bWVudCdzIHJvb3QgYW5kXG4gICAqIG5vdCBzb21lIGNoaWxkIGVsZW1lbnQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxFeGFtcGxlXCIgbmFtZT1cImFuY2hvci1zY3JvbGxcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBpZD1cInNjcm9sbEFyZWFcIiBuZy1jb250cm9sbGVyPVwiU2Nyb2xsQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8YSBuZy1jbGljaz1cImdvdG9Cb3R0b20oKVwiPkdvIHRvIGJvdHRvbTwvYT5cbiAgICAgICAgICAgPGEgaWQ9XCJib3R0b21cIj48L2E+IFlvdSdyZSBhdCB0aGUgYm90dG9tIVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdTY3JvbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRhbmNob3JTY3JvbGwnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCAkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZ290b0JvdHRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGxvY2F0aW9uLmhhc2ggdG8gdGhlIGlkIG9mXG4gICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IHlvdSB3aXNoIHRvIHNjcm9sbCB0by5cbiAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2JvdHRvbScpO1xuXG4gICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpXG4gICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAjc2Nyb2xsQXJlYSB7XG4gICAgICAgICAgIGhlaWdodDogMjgwcHg7XG4gICAgICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICAgfVxuXG4gICAgICAgICAjYm90dG9tIHtcbiAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICpcbiAgICogPGhyIC8+XG4gICAqIFRoZSBleGFtcGxlIGJlbG93IGlsbHVzdHJhdGVzIHRoZSB1c2Ugb2YgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChzcGVjaWZpZWQgYXMgYSBmaXhlZCB2YWx1ZSkuXG4gICAqIFNlZSB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0ICRhbmNob3JTY3JvbGwueU9mZnNldH0gZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZVwiIG5hbWU9XCJhbmNob3Itc2Nyb2xsLW9mZnNldFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwiZml4ZWQtaGVhZGVyXCIgbmctY29udHJvbGxlcj1cImhlYWRlckN0cmxcIj5cbiAgICAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiZ290b0FuY2hvcih4KVwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgICBHbyB0byBhbmNob3Ige3t4fX1cbiAgICAgICAgICAgPC9hPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8ZGl2IGlkPVwiYW5jaG9ye3t4fX1cIiBjbGFzcz1cImFuY2hvclwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgQW5jaG9yIHt7eH19IG9mIDVcbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAucnVuKFsnJGFuY2hvclNjcm9sbCcsIGZ1bmN0aW9uKCRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsLnlPZmZzZXQgPSA1MDsgICAvLyBhbHdheXMgc2Nyb2xsIGJ5IDUwIGV4dHJhIHBpeGVsc1xuICAgICAgICAgICB9XSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ2hlYWRlckN0cmwnLCBbJyRhbmNob3JTY3JvbGwnLCAnJGxvY2F0aW9uJywgJyRzY29wZScsXG4gICAgICAgICAgICAgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCwgJGxvY2F0aW9uLCAkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQW5jaG9yID0gZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICB2YXIgbmV3SGFzaCA9ICdhbmNob3InICsgeDtcbiAgICAgICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5oYXNoKCkgIT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlICRsb2NhdGlvbi5oYXNoIHRvIGBuZXdIYXNoYCBhbmRcbiAgICAgICAgICAgICAgICAgICAvLyAkYW5jaG9yU2Nyb2xsIHdpbGwgYXV0b21hdGljYWxseSBzY3JvbGwgdG8gaXRcbiAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYW5jaG9yJyArIHgpO1xuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpIGV4cGxpY2l0bHksXG4gICAgICAgICAgICAgICAgICAgLy8gc2luY2UgJGxvY2F0aW9uLmhhc2ggaGFzbid0IGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICBdKTtcbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgYm9keSB7XG4gICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgICAgICAgfVxuXG4gICAgICAgICAuYW5jaG9yIHtcbiAgICAgICAgICAgYm9yZGVyOiAycHggZGFzaGVkIERhcmtPcmNoaWQ7XG4gICAgICAgICAgIHBhZGRpbmc6IDEwcHggMTBweCAyMDBweCAxMHB4O1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyIHtcbiAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmZpeGVkLWhlYWRlciA+IGEge1xuICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgIG1hcmdpbjogNXB4IDE1cHg7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSAkd2luZG93LmRvY3VtZW50O1xuXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0XG4gICAgLy8gKHVzaW5nIGBBcnJheSNzb21lKClgIGluc3RlYWQgb2YgYGFuZ3VsYXIjZm9yRWFjaCgpYCBzaW5jZSBpdCdzIG1vcmUgcGVyZm9ybWFudFxuICAgIC8vICBhbmQgd29ya2luZyBpbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLilcbiAgICBmdW5jdGlvbiBnZXRGaXJzdEFuY2hvcihsaXN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwobGlzdCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAobm9kZU5hbWVfKGVsZW1lbnQpID09PSAnYScpIHtcbiAgICAgICAgICByZXN1bHQgPSBlbGVtZW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0WU9mZnNldCgpIHtcblxuICAgICAgdmFyIG9mZnNldCA9IHNjcm9sbC55T2Zmc2V0O1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCgpO1xuICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQob2Zmc2V0KSkge1xuICAgICAgICB2YXIgZWxlbSA9IG9mZnNldFswXTtcbiAgICAgICAgdmFyIHN0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc051bWJlcihvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG8oZWxlbSkge1xuICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgZWxlbS5zY3JvbGxJbnRvVmlldygpO1xuXG4gICAgICAgIHZhciBvZmZzZXQgPSBnZXRZT2Zmc2V0KCk7XG5cbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIC8vIGBvZmZzZXRgIGlzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHdlIHNob3VsZCBzY3JvbGwgVVAgaW4gb3JkZXIgdG8gYWxpZ24gYGVsZW1gIHByb3Blcmx5LlxuICAgICAgICAgIC8vIFRoaXMgaXMgdHJ1ZSBPTkxZIGlmIHRoZSBjYWxsIHRvIGBlbGVtLnNjcm9sbEludG9WaWV3KClgIGluaXRpYWxseSBhbGlnbnMgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIHRvcCBvZiB0aGUgdmlld3BvcnQuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBJRiB0aGUgbnVtYmVyIG9mIHBpeGVscyBmcm9tIHRoZSB0b3Agb2YgYGVsZW1gIHRvIHRoZSBlbmQgb2YgdGhlIHBhZ2UncyBjb250ZW50IGlzIGxlc3NcbiAgICAgICAgICAvLyB0aGFuIHRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB0aGVuIGBlbGVtLnNjcm9sbEludG9WaWV3KClgIHdpbGwgYWxpZ24gdGhlIGBlbGVtYCBzb21lXG4gICAgICAgICAgLy8gd2F5IGRvd24gdGhlIHBhZ2UuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGlzIGlzIG9mdGVuIHRoZSBjYXNlIGZvciBlbGVtZW50cyBuZWFyIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBJbiBzdWNoIGNhc2VzIHdlIGRvIG5vdCBuZWVkIHRvIHNjcm9sbCB0aGUgd2hvbGUgYG9mZnNldGAgdXAsIGp1c3QgdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICAgICAgICAgIC8vIHRoZSB0b3Agb2YgdGhlIGVsZW1lbnQgYW5kIHRoZSBvZmZzZXQsIHdoaWNoIGlzIGVub3VnaCB0byBhbGlnbiB0aGUgdG9wIG9mIGBlbGVtYCBhdCB0aGVcbiAgICAgICAgICAvLyBkZXNpcmVkIHBvc2l0aW9uLlxuICAgICAgICAgIHZhciBlbGVtVG9wID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgJHdpbmRvdy5zY3JvbGxCeSgwLCBlbGVtVG9wIC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGwoaGFzaCkge1xuICAgICAgLy8gQWxsb3cgbnVtZXJpYyBoYXNoZXNcbiAgICAgIGhhc2ggPSBpc1N0cmluZyhoYXNoKSA/IGhhc2ggOiBpc051bWJlcihoYXNoKSA/IGhhc2gudG9TdHJpbmcoKSA6ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAgICB2YXIgZWxtO1xuXG4gICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgaWYgKCFoYXNoKSBzY3JvbGxUbyhudWxsKTtcblxuICAgICAgLy8gZWxlbWVudCB3aXRoIGdpdmVuIGlkXG4gICAgICBlbHNlIGlmICgoZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkpKSBzY3JvbGxUbyhlbG0pO1xuXG4gICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRFxuICAgICAgZWxzZSBpZiAoKGVsbSA9IGdldEZpcnN0QW5jaG9yKGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGhhc2gpKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIG5vIGVsZW1lbnQgYW5kIGhhc2ggPT09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgZWxzZSBpZiAoaGFzaCA9PT0gJ3RvcCcpIHNjcm9sbFRvKG51bGwpO1xuICAgIH1cblxuICAgIC8vIGRvZXMgbm90IHNjcm9sbCB3aGVuIHVzZXIgY2xpY2tzIG9uIGFuY2hvciBsaW5rIHRoYXQgaXMgY3VycmVudGx5IG9uXG4gICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGxcbiAgICBpZiAoYXV0b1Njcm9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaCgpIHtyZXR1cm4gJGxvY2F0aW9uLmhhc2goKTt9LFxuICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSBpbml0aWFsIHNjcm9sbCBpZiAkbG9jYXRpb24uaGFzaCBpcyBlbXB0eVxuICAgICAgICAgIGlmIChuZXdWYWwgPT09IG9sZFZhbCAmJiBuZXdWYWwgPT09ICcnKSByZXR1cm47XG5cbiAgICAgICAgICBqcUxpdGVEb2N1bWVudExvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhzY3JvbGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Nyb2xsO1xuICB9XTtcbn1cblxudmFyICRhbmltYXRlTWluRXJyID0gbWluRXJyKCckYW5pbWF0ZScpO1xudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgTkdfQU5JTUFURV9DTEFTU05BTUUgPSAnbmctYW5pbWF0ZSc7XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NlcyhhLGIpIHtcbiAgaWYgKCFhICYmICFiKSByZXR1cm4gJyc7XG4gIGlmICghYSkgcmV0dXJuIGI7XG4gIGlmICghYikgcmV0dXJuIGE7XG4gIGlmIChpc0FycmF5KGEpKSBhID0gYS5qb2luKCcgJyk7XG4gIGlmIChpc0FycmF5KGIpKSBiID0gYi5qb2luKCcgJyk7XG4gIHJldHVybiBhICsgJyAnICsgYjtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsbSA9IGVsZW1lbnRbaV07XG4gICAgaWYgKGVsbS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm4gZWxtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdENsYXNzZXMoY2xhc3Nlcykge1xuICBpZiAoaXNTdHJpbmcoY2xhc3NlcykpIHtcbiAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuICB9XG5cbiAgLy8gVXNlIGNyZWF0ZU1hcCgpIHRvIHByZXZlbnQgY2xhc3MgYXNzdW1wdGlvbnMgaW52b2x2aW5nIHByb3BlcnR5IG5hbWVzIGluXG4gIC8vIE9iamVjdC5wcm90b3R5cGVcbiAgdmFyIG9iaiA9IGNyZWF0ZU1hcCgpO1xuICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGtsYXNzKSB7XG4gICAgLy8gc29tZXRpbWVzIHRoZSBzcGxpdCBsZWF2ZXMgZW1wdHkgc3RyaW5nIHZhbHVlc1xuICAgIC8vIGluY2FzZSBleHRyYSBzcGFjZXMgd2VyZSBhcHBsaWVkIHRvIHRoZSBvcHRpb25zXG4gICAgaWYgKGtsYXNzLmxlbmd0aCkge1xuICAgICAgb2JqW2tsYXNzXSA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gaWYgYW55IG90aGVyIHR5cGUgb2Ygb3B0aW9ucyB2YWx1ZSBiZXNpZGVzIGFuIE9iamVjdCB2YWx1ZSBpc1xuLy8gcGFzc2VkIGludG8gdGhlICRhbmltYXRlLm1ldGhvZCgpIGFuaW1hdGlvbiB0aGVuIHRoaXMgaGVscGVyIGNvZGVcbi8vIHdpbGwgYmUgcnVuIHdoaWNoIHdpbGwgaWdub3JlIGl0LiBXaGlsZSB0aGlzIHBhdGNoIGlzIG5vdCB0aGVcbi8vIGdyZWF0ZXN0IHNvbHV0aW9uIHRvIHRoaXMsIGEgbG90IG9mIGV4aXN0aW5nIHBsdWdpbnMgZGVwZW5kIG9uXG4vLyAkYW5pbWF0ZSB0byBlaXRoZXIgY2FsbCB0aGUgY2FsbGJhY2sgKDwgMS4yKSBvciByZXR1cm4gYSBwcm9taXNlXG4vLyB0aGF0IGNhbiBiZSBjaGFuZ2VkLiBUaGlzIGhlbHBlciBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgdGhlIG9wdGlvbnNcbi8vIGFyZSB3aXBlZCBjbGVhbiBpbmNhc2UgYSBjYWxsYmFjayBmdW5jdGlvbiBpcyBwcm92aWRlZC5cbmZ1bmN0aW9uIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBpc09iamVjdChvcHRpb25zKVxuICAgICAgPyBvcHRpb25zXG4gICAgICA6IHt9O1xufVxuXG52YXIgJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IG5vb3A7XG59O1xuXG4vLyB0aGlzIGlzIHByZWZpeGVkIHdpdGggQ29yZSBzaW5jZSBpdCBjb25mbGljdHMgd2l0aFxuLy8gdGhlIGFuaW1hdGVRdWV1ZVByb3ZpZGVyIGRlZmluZWQgaW4gbmdBbmltYXRlL2FuaW1hdGVRdWV1ZS5qc1xudmFyICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gbmV3IE5nTWFwKCk7XG4gIHZhciBwb3N0RGlnZXN0RWxlbWVudHMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyQkQW5pbWF0ZVJ1bm5lcicsICckcm9vdFNjb3BlJyxcbiAgICAgICBmdW5jdGlvbigkJEFuaW1hdGVSdW5uZXIsICAgJHJvb3RTY29wZSkge1xuICAgIHJldHVybiB7XG4gICAgICBlbmFibGVkOiBub29wLFxuICAgICAgb246IG5vb3AsXG4gICAgICBvZmY6IG5vb3AsXG4gICAgICBwaW46IG5vb3AsXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBkb21PcGVyYXRpb24pIHtcbiAgICAgICAgaWYgKGRvbU9wZXJhdGlvbikge1xuICAgICAgICAgIGRvbU9wZXJhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcyB8fCBvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xuXG4gICAgICAgIC8vIHNpbmNlIHRoZXJlIGFyZSBubyBhbmltYXRpb25zIHRvIHJ1biB0aGUgcnVubmVyIG5lZWRzIHRvIGJlXG4gICAgICAgIC8vIG5vdGlmaWVkIHRoYXQgdGhlIGFuaW1hdGlvbiBjYWxsIGlzIGNvbXBsZXRlLlxuICAgICAgICBydW5uZXIuY29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVEYXRhKGRhdGEsIGNsYXNzZXMsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgY2xhc3NlcyA9IGlzU3RyaW5nKGNsYXNzZXMpID8gY2xhc3Nlcy5zcGxpdCgnICcpIDpcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogW107XG4gICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICBkYXRhW2NsYXNzTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzKCkge1xuICAgICAgZm9yRWFjaChwb3N0RGlnZXN0RWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBwb3N0RGlnZXN0UXVldWUuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHZhciBleGlzdGluZyA9IHNwbGl0Q2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJykpO1xuICAgICAgICAgIHZhciB0b0FkZCA9ICcnO1xuICAgICAgICAgIHZhciB0b1JlbW92ZSA9ICcnO1xuICAgICAgICAgIGZvckVhY2goZGF0YSwgZnVuY3Rpb24oc3RhdHVzLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBoYXNDbGFzcyA9ICEhZXhpc3RpbmdbY2xhc3NOYW1lXTtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IGhhc0NsYXNzKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSAodG9BZGQubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvUmVtb3ZlICs9ICh0b1JlbW92ZS5sZW5ndGggPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgICAgICAgICBpZiAodG9BZGQpIHtcbiAgICAgICAgICAgICAganFMaXRlQWRkQ2xhc3MoZWxtLCB0b0FkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAganFMaXRlUmVtb3ZlQ2xhc3MoZWxtLCB0b1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwb3N0RGlnZXN0RWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZFJlbW92ZUNsYXNzZXNQb3N0RGlnZXN0KGVsZW1lbnQsIGFkZCwgcmVtb3ZlKSB7XG4gICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCkgfHwge307XG5cbiAgICAgIHZhciBjbGFzc2VzQWRkZWQgPSB1cGRhdGVEYXRhKGRhdGEsIGFkZCwgdHJ1ZSk7XG4gICAgICB2YXIgY2xhc3Nlc1JlbW92ZWQgPSB1cGRhdGVEYXRhKGRhdGEsIHJlbW92ZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoY2xhc3Nlc0FkZGVkIHx8IGNsYXNzZXNSZW1vdmVkKSB7XG5cbiAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnNldChlbGVtZW50LCBkYXRhKTtcbiAgICAgICAgcG9zdERpZ2VzdEVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChoYW5kbGVDU1NDbGFzc0NoYW5nZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mICRhbmltYXRlIHRoYXQgZG9lc24ndCBwZXJmb3JtIGFueSBhbmltYXRpb25zLCBpbnN0ZWFkIGp1c3RcbiAqIHN5bmNocm9ub3VzbHkgcGVyZm9ybXMgRE9NIHVwZGF0ZXMgYW5kIHJlc29sdmVzIHRoZSByZXR1cm5lZCBydW5uZXIgcHJvbWlzZS5cbiAqXG4gKiBJbiBvcmRlciB0byBlbmFibGUgYW5pbWF0aW9ucyB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGhhcyB0byBiZSBsb2FkZWQuXG4gKlxuICogVG8gc2VlIHRoZSBmdW5jdGlvbmFsIGltcGxlbWVudGF0aW9uIGNoZWNrIG91dCBgc3JjL25nQW5pbWF0ZS9hbmltYXRlLmpzYC5cbiAqL1xudmFyICRBbmltYXRlUHJvdmlkZXIgPSBbJyRwcm92aWRlJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gIHZhciBwcm92aWRlciA9IHRoaXM7XG4gIHZhciBjbGFzc05hbWVGaWx0ZXIgPSBudWxsO1xuXG4gIHRoaXMuJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAqICAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIGFuZCB0aGUgb3B0aW9ucyBmZWQgaW50byB0aGUgYW5pbWF0aW9uLiBEZXBlbmRpbmdcbiAgICogICBvbiB0aGUgdHlwZSBvZiBhbmltYXRpb24gYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBhbmltYXRpb24gZnVuY3Rpb24uIFRoZVxuICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAqXG4gICAqICAgLSBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBlbnRlciwgbGVhdmUsIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqXG4gICAqICAgTWFrZSBzdXJlIHRvIHRyaWdnZXIgdGhlIGBkb25lRnVuY3Rpb25gIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSwgb3B0aW9ucykge1xuICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZ1bmN0aW9uKHdhc0NhbmNlbGxlZCkge1xuICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiAodGhpcyBpcyB3aGF0IHRoZSBjbGFzcy1iYXNlZCBDU1MgdmFsdWUgd2lsbCBiZSBjb21wYXJlZCB0bykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsICdFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCBcXCcuXFwnIGdvdCBcXCd7MH1cXCcuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBDU1MgY2xhc3MgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgY2hlY2tlZCB3aGVuIHBlcmZvcm1pbmdcbiAgICogYW4gYW5pbWF0aW9uLiBVcG9uIGJvb3RzdHJhcCB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlIGlzIG5vdCBzZXQgYXQgYWxsIGFuZCB3aWxsXG4gICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudCB0aGF0IGlzIHRyaWdnZXJlZC5cbiAgICogV2hlbiBzZXR0aW5nIHRoZSBgY2xhc3NOYW1lRmlsdGVyYCB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzXG4gICAqIHRoYXQgc3VjY2Vzc2Z1bGx5IG1hdGNoIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbi4gVGhpcyBpbiB0dXJuIGNhbiBib29zdCBwZXJmb3JtYW5jZVxuICAgKiBmb3IgbG93LXBvd2VyZWQgZGV2aWNlcyBhcyB3ZWxsIGFzIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9uc1xuICAgKiBAcmV0dXJuIHtSZWdFeHB9IFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgZXhwcmVzc2lvbiB2YWx1ZS4gSWYgbnVsbCB0aGVuIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24gdmFsdWVcbiAgICovXG4gIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjbGFzc05hbWVGaWx0ZXIgPSAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cCkgPyBleHByZXNzaW9uIDogbnVsbDtcbiAgICAgIGlmIChjbGFzc05hbWVGaWx0ZXIpIHtcbiAgICAgICAgdmFyIHJlc2VydmVkUmVnZXggPSBuZXcgUmVnRXhwKCdbKFxcXFxzfFxcXFwvKV0nICsgTkdfQU5JTUFURV9DTEFTU05BTUUgKyAnWyhcXFxcc3xcXFxcLyldJyk7XG4gICAgICAgIGlmIChyZXNlcnZlZFJlZ2V4LnRlc3QoY2xhc3NOYW1lRmlsdGVyLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgY2xhc3NOYW1lRmlsdGVyID0gbnVsbDtcbiAgICAgICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm9uZ2NscycsICckYW5pbWF0ZVByb3ZpZGVyLmNsYXNzTmFtZUZpbHRlcihyZWdleCkgcHJvaGliaXRzIGFjY2VwdGluZyBhIHJlZ2V4IHZhbHVlIHdoaWNoIG1hdGNoZXMvY29udGFpbnMgdGhlIFwiezB9XCIgQ1NTIGNsYXNzLicsIE5HX0FOSU1BVEVfQ0xBU1NOQU1FKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3NOYW1lRmlsdGVyO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJCRhbmltYXRlUXVldWUnLCBmdW5jdGlvbigkJGFuaW1hdGVRdWV1ZSkge1xuICAgIGZ1bmN0aW9uIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQpIHtcbiAgICAgIC8vIGlmIGZvciBzb21lIHJlYXNvbiB0aGUgcHJldmlvdXMgZWxlbWVudCB3YXMgcmVtb3ZlZFxuICAgICAgLy8gZnJvbSB0aGUgZG9tIHNvbWV0aW1lIGJlZm9yZSB0aGlzIGNvZGUgcnVucyB0aGVuIGxldCdzXG4gICAgICAvLyBqdXN0IHN0aWNrIHRvIHVzaW5nIHRoZSBwYXJlbnQgZWxlbWVudCBhcyB0aGUgYW5jaG9yXG4gICAgICBpZiAoYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAgIHZhciBhZnRlck5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoYWZ0ZXJFbGVtZW50KTtcbiAgICAgICAgaWYgKGFmdGVyTm9kZSAmJiAhYWZ0ZXJOb2RlLnBhcmVudE5vZGUgJiYgIWFmdGVyTm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgYWZ0ZXJFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFmdGVyRWxlbWVudCkge1xuICAgICAgICBhZnRlckVsZW1lbnQuYWZ0ZXIoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRFbGVtZW50LnByZXBlbmQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkYW5pbWF0ZVxuICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgJGFuaW1hdGUgc2VydmljZSBleHBvc2VzIGEgc2VyaWVzIG9mIERPTSB1dGlsaXR5IG1ldGhvZHMgdGhhdCBwcm92aWRlIHN1cHBvcnRcbiAgICAgKiBmb3IgYW5pbWF0aW9uIGhvb2tzLiBUaGUgZGVmYXVsdCBiZWhhdmlvciBpcyB0aGUgYXBwbGljYXRpb24gb2YgRE9NIG9wZXJhdGlvbnMsIGhvd2V2ZXIsXG4gICAgICogd2hlbiBhbiBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgKGFuZCBhbmltYXRpb25zIGFyZSBlbmFibGVkKSwgJGFuaW1hdGUgd2lsbCBkbyB0aGUgaGVhdnkgbGlmdGluZ1xuICAgICAqIHRvIGVuc3VyZSB0aGF0IGFuaW1hdGlvbiBydW5zIHdpdGggdGhlIHRyaWdnZXJlZCBET00gb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCAkYW5pbWF0ZSBkb2Vzbid0IHRyaWdnZXIgYW55IGFuaW1hdGlvbnMuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGlzbid0XG4gICAgICogaW5jbHVkZWQgYW5kIG9ubHkgd2hlbiBpdCBpcyBhY3RpdmUgdGhlbiB0aGUgYW5pbWF0aW9uIGhvb2tzIHRoYXQgYCRhbmltYXRlYCB0cmlnZ2VycyB3aWxsIGJlXG4gICAgICogZnVuY3Rpb25hbC4gT25jZSBhY3RpdmUgdGhlbiBhbGwgc3RydWN0dXJhbCBgbmctYCBkaXJlY3RpdmVzIHdpbGwgdHJpZ2dlciBhbmltYXRpb25zIGFzIHRoZXkgcGVyZm9ybVxuICAgICAqIHRoZWlyIERPTS1yZWxhdGVkIG9wZXJhdGlvbnMgKGVudGVyLCBsZWF2ZSBhbmQgbW92ZSkuIE90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgbmdDbGFzc2AsXG4gICAgICogYG5nU2hvd2AsIGBuZ0hpZGVgIGFuZCBgbmdNZXNzYWdlc2AgYWxzbyBwcm92aWRlIHN1cHBvcnQgZm9yIGFuaW1hdGlvbnMuXG4gICAgICpcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoZWAkYW5pbWF0ZWAgc2VydmljZSBpcyBhbHdheXMgdXNlZCB3aGVuIGV4ZWN1dGluZyBET00tcmVsYXRlZCBwcm9jZWR1cmVzIHdpdGhpbiBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGVcbiAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGUgcGFnZX0uXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHdlIGRvbid0IGNhbGwgaXQgZGlyZWN0bHkgc2luY2Ugbm9uLWV4aXN0YW50IGFyZ3VtZW50cyBtYXlcbiAgICAgIC8vIGJlIGludGVycHJldGVkIGFzIG51bGwgd2l0aGluIHRoZSBzdWIgZW5hYmxlZCBmdW5jdGlvblxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHVwIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGZpcmUgd2hlbmV2ZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZW50ZXIsIGxlYXZlLCBtb3ZlLCBldGMuLi4pXG4gICAgICAgKiAgICBoYXMgZmlyZWQgb24gdGhlIGdpdmVuIGVsZW1lbnQgb3IgYW1vbmcgYW55IG9mIGl0cyBjaGlsZHJlbi4gT25jZSB0aGUgbGlzdGVuZXIgaXMgZmlyZWQsIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgICogICAgaXMgZmlyZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtczpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogJGFuaW1hdGUub24oJ2VudGVyJywgY29udGFpbmVyLFxuICAgICAgICogICAgZnVuY3Rpb24gY2FsbGJhY2soZWxlbWVudCwgcGhhc2UpIHtcbiAgICAgICAqICAgICAgLy8gY29vbCB3ZSBkZXRlY3RlZCBhbiBlbnRlciBhbmltYXRpb24gd2l0aGluIHRoZSBjb250YWluZXJcbiAgICAgICAqICAgIH1cbiAgICAgICAqICk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGFuaW1hdGlvbiBldmVudCB0aGF0IHdpbGwgYmUgY2FwdHVyZWQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLilcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGF0IHdpbGwgY2FwdHVyZSBlYWNoIG9mIHRoZSBhbmltYXRpb24gZXZlbnRzIHRoYXQgYXJlIGZpcmVkIG9uIGl0c2VsZlxuICAgICAgICogICAgIGFzIHdlbGwgYXMgYW1vbmcgaXRzIGNoaWxkcmVuXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGxpc3RlbmVyIGlzIHRyaWdnZXJlZFxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgcHJlc2VudCBpbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYXJlOlxuICAgICAgICogKiBgZWxlbWVudGAgLSBUaGUgY2FwdHVyZWQgRE9NIGVsZW1lbnQgdGhhdCB0aGUgYW5pbWF0aW9uIHdhcyBmaXJlZCBvbi5cbiAgICAgICAqICogYHBoYXNlYCAtIFRoZSBwaGFzZSBvZiB0aGUgYW5pbWF0aW9uLiBUaGUgdHdvIHBvc3NpYmxlIHBoYXNlcyBhcmUgKipzdGFydCoqICh3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRzKSBhbmQgKipjbG9zZSoqICh3aGVuIGl0IGVuZHMpLlxuICAgICAgICovXG4gICAgICBvbjogJCRhbmltYXRlUXVldWUub24sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29mZlxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lciBiYXNlZCBvbiB0aGUgZXZlbnQgd2hpY2ggaGFzIGJlZW4gYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBlbGVtZW50LiBUaGlzIG1ldGhvZFxuICAgICAgICogY2FuIGJlIHVzZWQgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJyk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGxpc3RlbmVycyBmb3IgYWxsIGFuaW1hdGlvbiBldmVudHMgZnJvbSB0aGUgY29udGFpbmVyIGVsZW1lbnRcbiAgICAgICAqICRhbmltYXRlLm9mZihjb250YWluZXIpO1xuICAgICAgICpcbiAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgIG9uIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInLCBjb250YWluZXIpO1xuICAgICAgICpcbiAgICAgICAqIC8vIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gcHJvdmlkZWQgYnkgYGNhbGxiYWNrYCB0aGF0IGlzIHNldFxuICAgICAgICogLy8gdG8gbGlzdGVuIGZvciBgZW50ZXJgIG9uIHRoZSBnaXZlbiBgY29udGFpbmVyYCBhcyB3ZWxsIGFzIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZXZlbnR8Y29udGFpbmVyIHRoZSBhbmltYXRpb24gZXZlbnQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlLFxuICAgICAgICogYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBldGMuLi4pLCBvciB0aGUgY29udGFpbmVyIGVsZW1lbnQuIElmIGl0IGlzIHRoZSBlbGVtZW50LCBhbGwgb3RoZXJcbiAgICAgICAqIGFyZ3VtZW50cyBhcmUgaWdub3JlZC5cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGNvbnRhaW5lciB0aGUgY29udGFpbmVyIGVsZW1lbnQgdGhlIGV2ZW50IGxpc3RlbmVyIHdhcyBwbGFjZWQgb25cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3YXMgcmVnaXN0ZXJlZCBhcyB0aGUgbGlzdGVuZXJcbiAgICAgICAqL1xuICAgICAgb2ZmOiAkJGFuaW1hdGVRdWV1ZS5vZmYsXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcGluXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEFzc29jaWF0ZXMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgd2l0aCBhIGhvc3QgcGFyZW50IGVsZW1lbnQgdG8gYWxsb3cgdGhlIGVsZW1lbnQgdG8gYmUgYW5pbWF0ZWQgZXZlbiBpZiBpdCBleGlzdHNcbiAgICAgICAqICAgIG91dHNpZGUgb2YgdGhlIERPTSBzdHJ1Y3R1cmUgb2YgdGhlIEFuZ3VsYXIgYXBwbGljYXRpb24uIEJ5IGRvaW5nIHNvLCBhbnkgYW5pbWF0aW9uIHRyaWdnZXJlZCB2aWEgYCRhbmltYXRlYCBjYW4gYmUgaXNzdWVkIG9uIHRoZVxuICAgICAgICogICAgZWxlbWVudCBkZXNwaXRlIGJlaW5nIG91dHNpZGUgdGhlIHJlYWxtIG9mIHRoZSBhcHBsaWNhdGlvbiBvciB3aXRoaW4gYW5vdGhlciBhcHBsaWNhdGlvbi4gU2F5IGZvciBleGFtcGxlIGlmIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICogICAgd2FzIGJvb3RzdHJhcHBlZCBvbiBhbiBlbGVtZW50IHRoYXQgaXMgc29tZXdoZXJlIGluc2lkZSBvZiB0aGUgYDxib2R5PmAgdGFnLCBidXQgd2Ugd2FudGVkIHRvIGFsbG93IGZvciBhbiBlbGVtZW50IHRvIGJlIHNpdHVhdGVkXG4gICAgICAgKiAgICBhcyBhIGRpcmVjdCBjaGlsZCBvZiBgZG9jdW1lbnQuYm9keWAsIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcGlubmluZyB0aGUgZWxlbWVudCB2aWEgYCRhbmltYXRlLnBpbihlbGVtZW50KWAuIEtlZXAgaW4gbWluZFxuICAgICAgICogICAgdGhhdCBjYWxsaW5nIGAkYW5pbWF0ZS5waW4oZWxlbWVudCwgcGFyZW50RWxlbWVudClgIHdpbGwgbm90IGFjdHVhbGx5IGluc2VydCBpbnRvIHRoZSBET00gYW55d2hlcmU7IGl0IHdpbGwganVzdCBjcmVhdGUgdGhlIGFzc29jaWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqICAgIE5vdGUgdGhhdCB0aGlzIGZlYXR1cmUgaXMgb25seSBhY3RpdmUgd2hlbiB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGlzIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBleHRlcm5hbCBlbGVtZW50IHRoYXQgd2lsbCBiZSBwaW5uZWRcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50RWxlbWVudCB0aGUgaG9zdCBwYXJlbnQgZWxlbWVudCB0aGF0IHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBleHRlcm5hbCBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgIHBpbjogJCRhbmltYXRlUXVldWUucGluLFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbmFibGVkXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFVzZWQgdG8gZ2V0IGFuZCBzZXQgd2hldGhlciBhbmltYXRpb25zIGFyZSBlbmFibGVkIG9yIG5vdCBvbiB0aGUgZW50aXJlIGFwcGxpY2F0aW9uIG9yIG9uIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi4gVGhpc1xuICAgICAgICogZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBpbiBmb3VyIHdheXM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIC8vIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCgpO1xuICAgICAgICpcbiAgICAgICAqIC8vIGNoYW5nZXMgdGhlIGVuYWJsZWQgc3RhdGUgZm9yIGFsbCBhbmltYXRpb25zXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGZhbHNlKTtcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQodHJ1ZSk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGFuIGVsZW1lbnRcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIHRydWUpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBjb25zaWRlcmVkIGZvciBjaGVja2luZy9zZXR0aW5nIHRoZSBlbmFibGVkIHN0YXRlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHdoZXRoZXIgb3Igbm90IHRoZSBhbmltYXRpb25zIHdpbGwgYmUgZW5hYmxlZCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCBhbmltYXRpb25zIGFyZSBlbmFibGVkXG4gICAgICAgKi9cbiAgICAgIGVuYWJsZWQ6ICQkYW5pbWF0ZVF1ZXVlLmVuYWJsZWQsXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjY2FuY2VsXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIENhbmNlbHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Byb21pc2V9IGFuaW1hdGlvblByb21pc2UgVGhlIGFuaW1hdGlvbiBwcm9taXNlIHRoYXQgaXMgcmV0dXJuZWQgd2hlbiBhbiBhbmltYXRpb24gaXMgc3RhcnRlZC5cbiAgICAgICAqL1xuICAgICAgY2FuY2VsOiBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgaWYgKHJ1bm5lci5lbmQpIHtcbiAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VudGVyXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3JcbiAgICAgICAqICAgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudCBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uXG4gICAgICAgKiAgIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb25cbiAgICAgICAqICAgaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhc1xuICAgICAgICogICBhIGNoaWxkIChzbyBsb25nIGFzIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCBhZnRlciB3aGljaCB0aGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdlbnRlcicsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgKG1vdmVzKSB0aGUgZWxlbWVudCBpbnRvIGl0cyBuZXcgcG9zaXRpb24gaW4gdGhlIERPTSBlaXRoZXIgYWZ0ZXJcbiAgICAgICAqICAgdGhlIGBhZnRlcmAgZWxlbWVudCAoaWYgcHJvdmlkZWQpIG9yIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnRcbiAgICAgICAqICAgYW5kIHRoZW4gdHJpZ2dlcnMgYW4gYW5pbWF0aW9uLiBBIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gICAgICAgKiAgIGR1cmluZyB0aGUgbmV4dCBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgbW92ZWQgaW50byB0aGUgbmV3IERPTSBwb3NpdGlvblxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50ICYmIGpxTGl0ZShwYXJlbnQpO1xuICAgICAgICBhZnRlciA9IGFmdGVyICYmIGpxTGl0ZShhZnRlcik7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBhZnRlci5wYXJlbnQoKTtcbiAgICAgICAgZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbW92ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGFuIGFuaW1hdGlvbiBhbmQgdGhlbiByZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgICAqIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGR1cmluZyB0aGUgbmV4dFxuICAgICAgICogZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbGVhdmUnLCBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYWRkQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBhZGRpdGlvbiBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSBhZGRDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGFscmVhZHkgY29udGFpbnMgdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgcmVtb3ZlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRjbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhIHJlbW92ZUNsYXNzIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgcmVtb3ZhbCBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSByZW1vdmVDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgYWRkZWQgYXQgYSBsYXRlciBzdGVwLlxuICAgICAgICogICBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtcyBib3RoIHRoZSBhZGRpdGlvbiBhbmQgcmVtb3ZhbCBvZiBhIENTUyBjbGFzc2VzIG9uIGFuIGVsZW1lbnQgYW5kIChkdXJpbmcgdGhlIHByb2Nlc3MpXG4gICAgICAgKiAgICB0cmlnZ2VycyBhbiBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGNsYXNzIGFkZGl0aW9uL3JlbW92YWwuIE11Y2ggbGlrZSBgJGFuaW1hdGUuYWRkQ2xhc3NgIGFuZFxuICAgICAgICogICAgYCRhbmltYXRlLnJlbW92ZUNsYXNzYCwgYHNldENsYXNzYCB3aWxsIG9ubHkgZXZhbHVhdGUgdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQvcmVtb3ZlZCBvbmNlIGEgZGlnZXN0IGhhc1xuICAgICAgICogICAgcGFzc2VkLiBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3ZlIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmFkZENsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIGFkZCk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgcmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3NldENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FuaW1hdGVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGFuIGlubGluZSBhbmltYXRpb24gb24gdGhlIGVsZW1lbnQgd2hpY2ggYXBwbGllcyB0aGUgcHJvdmlkZWQgdG8gYW5kIGZyb20gQ1NTIHN0eWxlcyB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIElmIGFueSBkZXRlY3RlZCBDU1MgdHJhbnNpdGlvbiwga2V5ZnJhbWUgb3IgSmF2YVNjcmlwdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgdmFsdWUsIHRoZW4gdGhlIGFuaW1hdGlvbiB3aWxsIHRha2VcbiAgICAgICAqIG9uIHRoZSBwcm92aWRlZCBzdHlsZXMuIEZvciBleGFtcGxlLCBpZiBhIHRyYW5zaXRpb24gYW5pbWF0aW9uIGlzIHNldCBmb3IgdGhlIGdpdmVuIGNsYXNzTmFtZSwgdGhlbiB0aGUgcHJvdmlkZWQgYGZyb21gIGFuZFxuICAgICAgICogYHRvYCBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIGFsb25nc2lkZSB0aGUgZ2l2ZW4gdHJhbnNpdGlvbi4gSWYgdGhlIENTUyBzdHlsZSBwcm92aWRlZCBpbiBgZnJvbWAgZG9lcyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmdcbiAgICAgICAqIHN0eWxlIGluIGB0b2AsIHRoZSBzdHlsZSBpbiBgZnJvbWAgaXMgYXBwbGllZCBpbW1lZGlhdGVseSwgYW5kIG5vIGFuaW1hdGlvbiBpcyBydW4uXG4gICAgICAgKiBJZiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzIGRldGVjdGVkIHRoZW4gdGhlIHByb3ZpZGVkIHN0eWxlcyB3aWxsIGJlIGdpdmVuIGluIGFzIGZ1bmN0aW9uIHBhcmFtZXRlcnMgaW50byB0aGUgYGFuaW1hdGVgXG4gICAgICAgKiBtZXRob2QgKG9yIGFzIHBhcnQgb2YgdGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIpOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiBuZ01vZHVsZS5hbmltYXRpb24oJy5teS1pbmxpbmUtYW5pbWF0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgKiAgICAgYW5pbWF0ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvLCBkb25lLCBvcHRpb25zKSB7XG4gICAgICAgKiAgICAgICAvL2FuaW1hdGlvblxuICAgICAgICogICAgICAgZG9uZSgpO1xuICAgICAgICogICAgIH1cbiAgICAgICAqICAgfVxuICAgICAgICogfSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gZnJvbSB0aGUgZnJvbSAoc3RhcnRpbmcpIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRvIHRoZSB0byAoZGVzdGluYXRpb24pIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBjbGFzc05hbWUgYW4gb3B0aW9uYWwgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi4gSWZcbiAgICAgICAqICAgIHRoaXMgdmFsdWUgaXMgbGVmdCBhcyBlbXB0eSB0aGVuIGEgQ1NTIGNsYXNzIG9mIGBuZy1pbmxpbmUtYW5pbWF0ZWAgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICAgKE5vdGUgdGhhdCBpZiBubyBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgbm90IGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmZyb20gPSBvcHRpb25zLmZyb20gPyBleHRlbmQob3B0aW9ucy5mcm9tLCBmcm9tKSA6IGZyb207XG4gICAgICAgIG9wdGlvbnMudG8gICA9IG9wdGlvbnMudG8gICA/IGV4dGVuZChvcHRpb25zLnRvLCB0bykgICAgIDogdG87XG5cbiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICduZy1pbmxpbmUtYW5pbWF0ZSc7XG4gICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy50ZW1wQ2xhc3NlcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2FuaW1hdGUnLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn1dO1xuXG52YXIgJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCBmdW5jdGlvbigkJHJBRikge1xuICAgIHZhciB3YWl0UXVldWUgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHdhaXRGb3JUaWNrKGZuKSB7XG4gICAgICB3YWl0UXVldWUucHVzaChmbik7XG4gICAgICBpZiAod2FpdFF1ZXVlLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdhaXRRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHdhaXRRdWV1ZVtpXSgpO1xuICAgICAgICB9XG4gICAgICAgIHdhaXRRdWV1ZSA9IFtdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgd2FpdEZvclRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhc3NlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YWl0Rm9yVGljayhjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfV07XG59O1xuXG52YXIgJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRxJywgJyRzbmlmZmVyJywgJyQkYW5pbWF0ZUFzeW5jUnVuJywgJyQkaXNEb2N1bWVudEhpZGRlbicsICckdGltZW91dCcsXG4gICAgICAgZnVuY3Rpb24oJHEsICAgJHNuaWZmZXIsICAgJCRhbmltYXRlQXN5bmNSdW4sICAgJCRpc0RvY3VtZW50SGlkZGVuLCAgICR0aW1lb3V0KSB7XG5cbiAgICB2YXIgSU5JVElBTF9TVEFURSA9IDA7XG4gICAgdmFyIERPTkVfUEVORElOR19TVEFURSA9IDE7XG4gICAgdmFyIERPTkVfQ09NUExFVEVfU1RBVEUgPSAyO1xuXG4gICAgQW5pbWF0ZVJ1bm5lci5jaGFpbiA9IGZ1bmN0aW9uKGNoYWluLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGluZGV4ID0gMDtcblxuICAgICAgbmV4dCgpO1xuICAgICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjaGFpbltpbmRleF0oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQW5pbWF0ZVJ1bm5lci5hbGwgPSBmdW5jdGlvbihydW5uZXJzLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHZhciBzdGF0dXMgPSB0cnVlO1xuICAgICAgZm9yRWFjaChydW5uZXJzLCBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgcnVubmVyLmRvbmUob25Qcm9ncmVzcyk7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gb25Qcm9ncmVzcyhyZXNwb25zZSkge1xuICAgICAgICBzdGF0dXMgPSBzdGF0dXMgJiYgcmVzcG9uc2U7XG4gICAgICAgIGlmICgrK2NvdW50ID09PSBydW5uZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGNhbGxiYWNrKHN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQW5pbWF0ZVJ1bm5lcihob3N0KSB7XG4gICAgICB0aGlzLnNldEhvc3QoaG9zdCk7XG5cbiAgICAgIHZhciByYWZUaWNrID0gJCRhbmltYXRlQXN5bmNSdW4oKTtcbiAgICAgIHZhciB0aW1lb3V0VGljayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICR0aW1lb3V0KGZuLCAwLCBmYWxzZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzID0gW107XG4gICAgICB0aGlzLl90aWNrID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKCQkaXNEb2N1bWVudEhpZGRlbigpKSB7XG4gICAgICAgICAgdGltZW91dFRpY2soZm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhZlRpY2soZm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5fc3RhdGUgPSAwO1xuICAgIH1cblxuICAgIEFuaW1hdGVSdW5uZXIucHJvdG90eXBlID0ge1xuICAgICAgc2V0SG9zdDogZnVuY3Rpb24oaG9zdCkge1xuICAgICAgICB0aGlzLmhvc3QgPSBob3N0IHx8IHt9O1xuICAgICAgfSxcblxuICAgICAgZG9uZTogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBET05FX0NPTVBMRVRFX1NUQVRFKSB7XG4gICAgICAgICAgZm4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBwcm9ncmVzczogbm9vcCxcblxuICAgICAgZ2V0UHJvbWlzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9taXNlKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgIHRoaXMucHJvbWlzZSA9ICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgc2VsZi5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICAgIH0sXG5cbiAgICAgIHRoZW46IGZ1bmN0aW9uKHJlc29sdmVIYW5kbGVyLCByZWplY3RIYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKS50aGVuKHJlc29sdmVIYW5kbGVyLCByZWplY3RIYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgICdjYXRjaCc6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydjYXRjaCddKGhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgJ2ZpbmFsbHknOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKVsnZmluYWxseSddKGhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LnBhdXNlKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QucmVzdW1lKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LmVuZCkge1xuICAgICAgICAgIHRoaXMuaG9zdC5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKHRydWUpO1xuICAgICAgfSxcblxuICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5jYW5jZWwpIHtcbiAgICAgICAgICB0aGlzLmhvc3QuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x2ZShmYWxzZSk7XG4gICAgICB9LFxuXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoc2VsZi5fc3RhdGUgPT09IElOSVRJQUxfU1RBVEUpIHtcbiAgICAgICAgICBzZWxmLl9zdGF0ZSA9IERPTkVfUEVORElOR19TVEFURTtcbiAgICAgICAgICBzZWxmLl90aWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5fcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIF9yZXNvbHZlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IERPTkVfQ09NUExFVEVfU1RBVEUpIHtcbiAgICAgICAgICBmb3JFYWNoKHRoaXMuX2RvbmVDYWxsYmFja3MsIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICBmbihyZXNwb25zZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5fZG9uZUNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgICAgIHRoaXMuX3N0YXRlID0gRE9ORV9DT01QTEVURV9TVEFURTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQW5pbWF0ZVJ1bm5lcjtcbiAgfV07XG59O1xuXG4vKiBleHBvcnRlZCAkQ29yZUFuaW1hdGVDc3NQcm92aWRlciAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkYW5pbWF0ZUNzc1xuICogQGtpbmQgb2JqZWN0XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB0aGUgY29yZSB2ZXJzaW9uIG9mIGAkYW5pbWF0ZUNzc2AuIEJ5IGRlZmF1bHQsIG9ubHkgd2hlbiB0aGUgYG5nQW5pbWF0ZWAgaXMgaW5jbHVkZWQsXG4gKiB0aGVuIHRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2Ugd2lsbCBhY3R1YWxseSBwZXJmb3JtIGFuaW1hdGlvbnMuXG4gKlxuICogQ2xpY2sgaGVyZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzIHRvIHJlYWQgdGhlIGRvY3VtZW50YXRpb24gZm9yICRhbmltYXRlQ3NzfS5cbiAqL1xudmFyICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCAnJHEnLCAnJCRBbmltYXRlUnVubmVyJywgZnVuY3Rpb24oJCRyQUYsICRxLCAkJEFuaW1hdGVSdW5uZXIpIHtcblxuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBpbml0aWFsT3B0aW9ucykge1xuICAgICAgLy8gYWxsIG9mIHRoZSBhbmltYXRpb24gZnVuY3Rpb25zIHNob3VsZCBjcmVhdGVcbiAgICAgIC8vIGEgY29weSBvZiB0aGUgb3B0aW9ucyBkYXRhLCBob3dldmVyLCBpZiBhXG4gICAgICAvLyBwYXJlbnQgc2VydmljZSBoYXMgYWxyZWFkeSBjcmVhdGVkIGEgY29weSB0aGVuXG4gICAgICAvLyB3ZSBzaG91bGQgc3RpY2sgdG8gdXNpbmcgdGhhdFxuICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghb3B0aW9ucy4kJHByZXBhcmVkKSB7XG4gICAgICAgIG9wdGlvbnMgPSBjb3B5KG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGVyZSBpcyBubyBwb2ludCBpbiBhcHBseWluZyB0aGUgc3R5bGVzIHNpbmNlXG4gICAgICAvLyB0aGVyZSBpcyBubyBhbmltYXRpb24gdGhhdCBnb2VzIG9uIGF0IGFsbCBpblxuICAgICAgLy8gdGhpcyB2ZXJzaW9uIG9mICRhbmltYXRlQ3NzLlxuICAgICAgaWYgKG9wdGlvbnMuY2xlYW51cFN0eWxlcykge1xuICAgICAgICBvcHRpb25zLmZyb20gPSBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xvc2VkLCBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogcnVuLFxuICAgICAgICBlbmQ6IHJ1blxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcnVuKCkge1xuICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcHBseUFuaW1hdGlvbkNvbnRlbnRzKCk7XG4gICAgICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Db250ZW50cygpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYWRkQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xuICAgICAgICAgIG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59O1xuXG4vKiBnbG9iYWwgc3RyaXBIYXNoOiB0cnVlICovXG5cbi8qKlxuICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhXG4gKlxuICogQG5hbWUgJGJyb3dzZXJcbiAqIEByZXF1aXJlcyAkbG9nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6XG4gKlxuICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdFxuICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzXG4gKlxuICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYFxuICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLlxuICovXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LlxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LlxuICogQHBhcmFtIHtvYmplY3R9ICRsb2cgd2luZG93LmNvbnNvbGUgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHtvYmplY3R9ICRzbmlmZmVyICRzbmlmZmVyIHNlcnZpY2VcbiAqL1xuZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSxcbiAgICAgIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCxcbiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsXG4gICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTtcblxuICBzZWxmLmlzTW9jayA9IGZhbHNlO1xuXG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IDA7XG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTtcblxuICAvLyBUT0RPKHZvanRhKTogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGFwaVxuICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDtcbiAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7IG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7IH07XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uKHN1cHBvcnRzIGN1cnJ5aW5nKSBhbmQgZGVjcmVtZW50cyB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2BcbiAgICogY291bnRlci4gSWYgdGhlIGNvdW50ZXIgcmVhY2hlcyAwLCBhbGwgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgIGFyZSBleGVjdXRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQtLTtcbiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgICB3aGlsZSAob3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEhhc2godXJsKSB7XG4gICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gJycgOiB1cmwuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyXG4gICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIG5vIG91dHN0YW5kaW5nIHJlcXVlc3RcbiAgICovXG4gIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVSTCBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2YXIgY2FjaGVkU3RhdGUsIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsXG4gICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSxcbiAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IG51bGwsXG4gICAgICBnZXRDdXJyZW50U3RhdGUgPSAhJHNuaWZmZXIuaGlzdG9yeSA/IG5vb3AgOiBmdW5jdGlvbiBnZXRDdXJyZW50U3RhdGUoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGhpc3Rvcnkuc3RhdGU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBNU0lFIGNhbiByZXBvcnRlZGx5IHRocm93IHdoZW4gdGhlcmUgaXMgbm8gc3RhdGUgKFVOQ09ORklSTUVEKS5cbiAgICAgICAgfVxuICAgICAgfTtcblxuICBjYWNoZVN0YXRlKCk7XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR0VUVEVSOlxuICAgKiBXaXRob3V0IGFueSBhcmd1bWVudCwgdGhpcyBtZXRob2QganVzdCByZXR1cm5zIGN1cnJlbnQgdmFsdWUgb2YgbG9jYXRpb24uaHJlZi5cbiAgICpcbiAgICogU0VUVEVSOlxuICAgKiBXaXRoIGF0IGxlYXN0IG9uZSBhcmd1bWVudCwgdGhpcyBtZXRob2Qgc2V0cyB1cmwgdG8gbmV3IHZhbHVlLlxuICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlXG4gICAqIGxvY2F0aW9uLmhyZWYvbG9jYXRpb24ucmVwbGFjZSBpcyB1c2VkLlxuICAgKiBSZXR1cm5zIGl0cyBvd24gaW5zdGFuY2UgdG8gYWxsb3cgY2hhaW5pbmdcbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGVcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gY2hhbmdlIHVybC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBOZXcgdXJsICh3aGVuIHVzZWQgYXMgc2V0dGVyKVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZXBsYWNlIFNob3VsZCBuZXcgdXJsIHJlcGxhY2UgY3VycmVudCBoaXN0b3J5IHJlY29yZD9cbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBvYmplY3QgdG8gdXNlIHdpdGggcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZVxuICAgKi9cbiAgc2VsZi51cmwgPSBmdW5jdGlvbih1cmwsIHJlcGxhY2UsIHN0YXRlKSB7XG4gICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzIGBoaXN0b3J5LnN0YXRlYCBpcyBgbnVsbGAgYnkgZGVmYXVsdDsgdHJlYXRpbmcgaXQgc2VwYXJhdGVseVxuICAgIC8vIGZyb20gYHVuZGVmaW5lZGAgd291bGQgY2F1c2UgYCRicm93c2VyLnVybCgnL2ZvbycpYCB0byBjaGFuZ2UgYGhpc3Rvcnkuc3RhdGVgXG4gICAgLy8gdG8gdW5kZWZpbmVkIHZpYSBgcHVzaFN0YXRlYC4gSW5zdGVhZCwgbGV0J3MgY2hhbmdlIGB1bmRlZmluZWRgIHRvIGBudWxsYCBoZXJlLlxuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBBbmRyb2lkIEJyb3dzZXIgQkZDYWNoZSBjYXVzZXMgbG9jYXRpb24sIGhpc3RvcnkgcmVmZXJlbmNlIHRvIGJlY29tZSBzdGFsZS5cbiAgICBpZiAobG9jYXRpb24gIT09IHdpbmRvdy5sb2NhdGlvbikgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG4gICAgaWYgKGhpc3RvcnkgIT09IHdpbmRvdy5oaXN0b3J5KSBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgICAvLyBzZXR0ZXJcbiAgICBpZiAodXJsKSB7XG4gICAgICB2YXIgc2FtZVN0YXRlID0gbGFzdEhpc3RvcnlTdGF0ZSA9PT0gc3RhdGU7XG5cbiAgICAgIC8vIERvbid0IGNoYW5nZSBhbnl0aGluZyBpZiBwcmV2aW91cyBhbmQgY3VycmVudCBVUkxzIGFuZCBzdGF0ZXMgbWF0Y2guIFRoaXMgYWxzbyBwcmV2ZW50c1xuICAgICAgLy8gSUU8MTAgZnJvbSBnZXR0aW5nIGludG8gcmVkaXJlY3QgbG9vcCB3aGVuIGluIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIG1vZGUuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9jb21taXQvZmZiMjcwMVxuICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSB1cmwgJiYgKCEkc25pZmZlci5oaXN0b3J5IHx8IHNhbWVTdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG4gICAgICB2YXIgc2FtZUJhc2UgPSBsYXN0QnJvd3NlclVybCAmJiBzdHJpcEhhc2gobGFzdEJyb3dzZXJVcmwpID09PSBzdHJpcEhhc2godXJsKTtcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gdXJsO1xuICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IHN0YXRlO1xuICAgICAgLy8gRG9uJ3QgdXNlIGhpc3RvcnkgQVBJIGlmIG9ubHkgdGhlIGhhc2ggY2hhbmdlZFxuICAgICAgLy8gZHVlIHRvIGEgYnVnIGluIElFMTAvSUUxMSB3aGljaCBsZWFkc1xuICAgICAgLy8gdG8gbm90IGZpcmluZyBhIGBoYXNoY2hhbmdlYCBub3IgYHBvcHN0YXRlYCBldmVudFxuICAgICAgLy8gaW4gc29tZSBjYXNlcyAoc2VlICM5MTQzKS5cbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5ICYmICghc2FtZUJhc2UgfHwgIXNhbWVTdGF0ZSkpIHtcbiAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpO1xuICAgICAgICBjYWNoZVN0YXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXNhbWVCYXNlKSB7XG4gICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgbG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGdldEhhc2godXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYXRpb24uaHJlZiAhPT0gdXJsKSB7XG4gICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIC8vIGdldHRlclxuICAgIH0gZWxzZSB7XG4gICAgICAvLyAtIHBlbmRpbmdMb2NhdGlvbiBpcyBuZWVkZWQgYXMgYnJvd3NlcnMgZG9uJ3QgYWxsb3cgdG8gcmVhZCBvdXRcbiAgICAgIC8vICAgdGhlIG5ldyBsb2NhdGlvbi5ocmVmIGlmIGEgcmVsb2FkIGhhcHBlbmVkIG9yIGlmIHRoZXJlIGlzIGEgYnVnIGxpa2UgaW4gaU9TIDkgKHNlZVxuICAgICAgLy8gICBodHRwczovL29wZW5yYWRhci5hcHBzcG90LmNvbS8yMjE4NjEwOSkuXG4gICAgICAvLyAtIHRoZSByZXBsYWNlbWVudCBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQwNzE3MlxuICAgICAgcmV0dXJuIHBlbmRpbmdMb2NhdGlvbiB8fCBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyUyNy9nLCdcXCcnKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI3N0YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBhIGdldHRlci5cbiAgICpcbiAgICogUmV0dXJuIGhpc3Rvcnkuc3RhdGUgb3IgbnVsbCBpZiBoaXN0b3J5LnN0YXRlIGlzIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gc3RhdGVcbiAgICovXG4gIHNlbGYuc3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2FjaGVkU3RhdGU7XG4gIH07XG5cbiAgdmFyIHVybENoYW5nZUxpc3RlbmVycyA9IFtdLFxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKCkge1xuICAgIHBlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG4gICAgZmlyZVN0YXRlT3JVcmxDaGFuZ2UoKTtcbiAgfVxuXG4gIC8vIFRoaXMgdmFyaWFibGUgc2hvdWxkIGJlIHVzZWQgKm9ubHkqIGluc2lkZSB0aGUgY2FjaGVTdGF0ZSBmdW5jdGlvbi5cbiAgdmFyIGxhc3RDYWNoZWRTdGF0ZSA9IG51bGw7XG4gIGZ1bmN0aW9uIGNhY2hlU3RhdGUoKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIG9ubHkgcGxhY2UgaW4gJGJyb3dzZXIgd2hlcmUgYGhpc3Rvcnkuc3RhdGVgIGlzIHJlYWQuXG4gICAgY2FjaGVkU3RhdGUgPSBnZXRDdXJyZW50U3RhdGUoKTtcbiAgICBjYWNoZWRTdGF0ZSA9IGlzVW5kZWZpbmVkKGNhY2hlZFN0YXRlKSA/IG51bGwgOiBjYWNoZWRTdGF0ZTtcblxuICAgIC8vIFByZXZlbnQgY2FsbGJhY2tzIGZvIGZpcmUgdHdpY2UgaWYgYm90aCBoYXNoY2hhbmdlICYgcG9wc3RhdGUgd2VyZSBmaXJlZC5cbiAgICBpZiAoZXF1YWxzKGNhY2hlZFN0YXRlLCBsYXN0Q2FjaGVkU3RhdGUpKSB7XG4gICAgICBjYWNoZWRTdGF0ZSA9IGxhc3RDYWNoZWRTdGF0ZTtcbiAgICB9XG5cbiAgICBsYXN0Q2FjaGVkU3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBmaXJlU3RhdGVPclVybENoYW5nZSgpIHtcbiAgICB2YXIgcHJldkxhc3RIaXN0b3J5U3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlO1xuICAgIGNhY2hlU3RhdGUoKTtcblxuICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gc2VsZi51cmwoKSAmJiBwcmV2TGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XG4gICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSwgY2FjaGVkU3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKlxuICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOlxuICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmtcbiAgICpcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAqXG4gICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuXG4gICAqL1xuICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50c1xuICAgIGlmICghdXJsQ2hhbmdlSW5pdCkge1xuICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIGRvbid0XG4gICAgICAvLyBmaXJlIHBvcHN0YXRlIHdoZW4gdXNlciBjaGFuZ2VzIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXG4gICAgICAvLyBjaGFuZ2VkIGJ5IHB1c2gvcmVwbGFjZVN0YXRlXG5cbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSBqcUxpdGUod2luZG93KS5vbigncG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XG4gICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmVtb3ZlIHBvcHN0YXRlIGFuZCBoYXNoY2hhbmdlIGhhbmRsZXIgZnJvbSB3aW5kb3cuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSAkcm9vdFNjb3BlLlxuICAgKi9cbiAgc2VsZi4kJGFwcGxpY2F0aW9uRGVzdHJveWVkID0gZnVuY3Rpb24oKSB7XG4gICAganFMaXRlKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlIHBvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci5cbiAgICogTmVlZHMgdG8gYmUgZXhwb3J0ZWQgdG8gYmUgYWJsZSB0byBjaGVjayBmb3IgY2hhbmdlcyB0aGF0IGhhdmUgYmVlbiBkb25lIGluIHN5bmMsXG4gICAqIGFzIGhhc2hjaGFuZ2UvcG9wc3RhdGUgZXZlbnRzIGZpcmUgaW4gYXN5bmMuXG4gICAqL1xuICBzZWxmLiQkY2hlY2tVcmxDaGFuZ2UgPSBmaXJlU3RhdGVPclVybENoYW5nZTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNaXNjIEFQSVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNiYXNlSHJlZlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyBjdXJyZW50IDxiYXNlIGhyZWY+XG4gICAqIChhbHdheXMgcmVsYXRpdmUgLSB3aXRob3V0IGRvbWFpbilcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgYmFzZSBocmVmXG4gICAqL1xuICBzZWxmLmJhc2VIcmVmID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhyZWYgPSBiYXNlRWxlbWVudC5hdHRyKCdocmVmJyk7XG4gICAgcmV0dXJuIGhyZWYgPyBocmVmLnJlcGxhY2UoL14oaHR0cHM/Oik/XFwvXFwvW14vXSovLCAnJykgOiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uLCB3aG8ncyBleGVjdXRpb24gc2hvdWxkIGJlIGRlZmVycmVkLlxuICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBvZiBtaWxsaXNlY29uZHMgdG8gZGVmZXIgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC5cbiAgICpcbiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmdcbiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWRcbiAgICogdmlhIGAkYnJvd3Nlci5kZWZlci5mbHVzaCgpYC5cbiAgICpcbiAgICovXG4gIHNlbGYuZGVmZXIgPSBmdW5jdGlvbihmbiwgZGVsYXkpIHtcbiAgICB2YXIgdGltZW91dElkO1xuICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTtcbiAgICB9LCBkZWxheSB8fCAwKTtcbiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7XG4gICAgcmV0dXJuIHRpbWVvdXRJZDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLlxuICAgKi9cbiAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbihkZWZlcklkKSB7XG4gICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXTtcbiAgICAgIGNsZWFyVGltZW91dChkZWZlcklkKTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxufVxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRCcm93c2VyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsXG4gICAgICBmdW5jdGlvbigkd2luZG93LCAkbG9nLCAkc25pZmZlciwgJGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgQnJvd3Nlcigkd2luZG93LCAkZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKTtcbiAgICAgIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY2FjaGVGYWN0b3J5XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdHMgYW5kIGdpdmVzIGFjY2VzcyB0b1xuICogdGhlbS5cbiAqXG4gKiBgYGBqc1xuICpcbiAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnbm9TdWNoQ2FjaGVJZCcpKS5ub3QudG9CZURlZmluZWQoKTtcbiAqXG4gKiAgY2FjaGUucHV0KFwia2V5XCIsIFwidmFsdWVcIik7XG4gKiAgY2FjaGUucHV0KFwiYW5vdGhlciBrZXlcIiwgXCJhbm90aGVyIHZhbHVlXCIpO1xuICpcbiAqICAvLyBXZSd2ZSBzcGVjaWZpZWQgbm8gb3B0aW9ucyBvbiBjcmVhdGlvblxuICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS5cbiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6XG4gKlxuICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBOZXdseSBjcmVhdGVkIGNhY2hlIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc2V0IG9mIG1ldGhvZHM6XG4gKlxuICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS5cbiAqIC0gYHt7Kn19YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnNcbiAqICAgaXQuXG4gKiAtIGB7eyp9fWAgYGdldCh7c3RyaW5nfSBrZXkpYCDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDigJQgUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNhY2hlLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLlxuICogLSBge3ZvaWR9YCBgZGVzdHJveSgpYCDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjYWNoZUV4YW1wbGVBcHBcIiBuYW1lPVwiY2FjaGUtZmFjdG9yeVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhY2hlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmV3Q2FjaGVLZXlcIiBwbGFjZWhvbGRlcj1cIktleVwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmV3Q2FjaGVWYWx1ZVwiIHBsYWNlaG9sZGVyPVwiVmFsdWVcIj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwdXQobmV3Q2FjaGVLZXksIG5ld0NhY2hlVmFsdWUpXCI+Q2FjaGU8L2J1dHRvbj5cblxuICAgICAgICAgPHAgbmctaWY9XCJrZXlzLmxlbmd0aFwiPkNhY2hlZCBWYWx1ZXM8L3A+XG4gICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cImtleSBpbiBrZXlzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwiY2FjaGUuZ2V0KGtleSlcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgPHA+Q2FjaGUgSW5mbzwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwiKGtleSwgdmFsdWUpIGluIGNhY2hlLmluZm8oKVwiPlxuICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj5cbiAgICAgICAgICAgPGIgbmctYmluZD1cInZhbHVlXCI+PC9iPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjYWNoZUV4YW1wbGVBcHAnLCBbXSkuXG4gICAgICAgICBjb250cm9sbGVyKCdDYWNoZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJHNjb3BlLCAkY2FjaGVGYWN0b3J5KSB7XG4gICAgICAgICAgICRzY29wZS5rZXlzID0gW107XG4gICAgICAgICAgICRzY29wZS5jYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAgICAgICAgICAgJHNjb3BlLnB1dCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCgkc2NvcGUuY2FjaGUuZ2V0KGtleSkpKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUua2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICRzY29wZS5jYWNoZS5wdXQoa2V5LCBhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSA/IG51bGwgOiB2YWx1ZSk7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIHAge1xuICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4O1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhY2hlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KGNhY2hlSWQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgJ0NhY2hlSWQgXFwnezB9XFwnIGlzIGFscmVhZHkgdGFrZW4hJywgY2FjaGVJZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaXplID0gMCxcbiAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywge2lkOiBjYWNoZUlkfSksXG4gICAgICAgICAgZGF0YSA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgIGNhcGFjaXR5ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5jYXBhY2l0eSkgfHwgTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICBscnVIYXNoID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgZnJlc2hFbmQgPSBudWxsLFxuICAgICAgICAgIHN0YWxlRW5kID0gbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgdHlwZVxuICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBjYWNoZSBvYmplY3QgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgZGF0YSwgcHJpbWFyaWx5IHVzZWQgYnlcbiAgICAgICAqIHtAbGluayAkaHR0cCAkaHR0cH0gYW5kIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNjcmlwdCBzY3JpcHR9IGRpcmVjdGl2ZSB0byBjYWNoZVxuICAgICAgICogdGVtcGxhdGVzIGFuZCBvdGhlciBkYXRhLlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgYW5ndWxhci5tb2R1bGUoJ3N1cGVyQ2FjaGUnKVxuICAgICAgICogICAgLmZhY3RvcnkoJ3N1cGVyQ2FjaGUnLCBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgICAgKiAgICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCdzdXBlci1jYWNoZScpO1xuICAgICAgICogICAgfV0pO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZSB0ZXN0OlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgaXQoJ3Nob3VsZCBiZWhhdmUgbGlrZSBhIGNhY2hlJywgaW5qZWN0KGZ1bmN0aW9uKHN1cGVyQ2FjaGUpIHtcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdrZXknLCAndmFsdWUnKTtcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdhbm90aGVyIGtleScsICdhbm90aGVyIHZhbHVlJyk7XG4gICAgICAgKlxuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDJcbiAgICAgICAqICAgIH0pO1xuICAgICAgICpcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlKCdhbm90aGVyIGtleScpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuZ2V0KCdhbm90aGVyIGtleScpKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmVBbGwoKTtcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICogICAgICBzaXplOiAwXG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqICB9KSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIChjYWNoZXNbY2FjaGVJZF0gPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNwdXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEluc2VydHMgYSBuYW1lZCBlbnRyeSBpbnRvIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IHRvIGJlXG4gICAgICAgICAqIHJldHJpZXZlZCBsYXRlciwgYW5kIGluY3JlbWVudGluZyB0aGUgc2l6ZSBvZiB0aGUgY2FjaGUgaWYgdGhlIGtleSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICogcHJlc2VudCBpbiB0aGUgY2FjaGUuIElmIGJlaGF2aW5nIGxpa2UgYW4gTFJVIGNhY2hlLCBpdCB3aWxsIGFsc28gcmVtb3ZlIHN0YWxlXG4gICAgICAgICAqIGVudHJpZXMgZnJvbSB0aGUgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCB3aWxsIG5vdCBpbnNlcnQgdW5kZWZpbmVkIHZhbHVlcyBpbnRvIHRoZSBjYWNoZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHVuZGVyIHdoaWNoIHRoZSBjYWNoZWQgZGF0YSBpcyBzdG9yZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgdGhlIHZhbHVlIHRvIHN0b3JlIGFsb25nc2lkZSB0aGUga2V5LiBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBrZXlcbiAgICAgICAgICogICAgd2lsbCBub3QgYmUgc3RvcmVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV0gfHwgKGxydUhhc2hba2V5XSA9IHtrZXk6IGtleX0pO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHNpemUrKztcbiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChzaXplID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZ2V0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZGF0YSB0byBiZSByZXRyaWV2ZWRcbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBlbnRyeSB0byBiZSByZW1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7XG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT09IHN0YWxlRW5kKSBzdGFsZUVuZCA9IGxydUVudHJ5Lm47XG4gICAgICAgICAgICBsaW5rKGxydUVudHJ5Lm4sbHJ1RW50cnkucCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBscnVIYXNoW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSByZXR1cm47XG5cbiAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAgICAgIHNpemUtLTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcmVtb3ZlQWxsXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBDbGVhcnMgdGhlIGNhY2hlIG9iamVjdCBvZiBhbnkgZW50cmllcy5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIHNpemUgPSAwO1xuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICBmcmVzaEVuZCA9IHN0YWxlRW5kID0gbnVsbDtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZGVzdHJveVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRGVzdHJveXMgdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgZW50aXJlbHksXG4gICAgICAgICAqIHJlbW92aW5nIGl0IGZyb20gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9IHNldC5cbiAgICAgICAgICovXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICAgIHN0YXRzID0gbnVsbDtcbiAgICAgICAgICBscnVIYXNoID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgY2FjaGVzW2NhY2hlSWRdO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNpbmZvXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZXRyaWV2ZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgYSBwYXJ0aWN1bGFyIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge29iamVjdH0gYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICAgKiAgIDx1bD5cbiAgICAgICAgICogICAgIDxsaT4qKmlkKio6IHRoZSBpZCBvZiB0aGUgY2FjaGUgaW5zdGFuY2U8L2xpPlxuICAgICAgICAgKiAgICAgPGxpPioqc2l6ZSoqOiB0aGUgbnVtYmVyIG9mIGVudHJpZXMga2VwdCBpbiB0aGUgY2FjaGUgaW5zdGFuY2U8L2xpPlxuICAgICAgICAgKiAgICAgPGxpPioqLi4uKio6IGFueSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgZnJvbSB0aGUgb3B0aW9ucyBvYmplY3Qgd2hlbiBjcmVhdGluZyB0aGVcbiAgICAgICAgICogICAgICAgY2FjaGUuPC9saT5cbiAgICAgICAgICogICA8L3VsPlxuICAgICAgICAgKi9cbiAgICAgICAgaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgc3RhdHMsIHtzaXplOiBzaXplfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG5cbiAgICAgIC8qKlxuICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVmcmVzaChlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgIT09IGZyZXNoRW5kKSB7XG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09PSBlbnRyeSkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeS5uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmsoZW50cnkubiwgZW50cnkucCk7XG4gICAgICAgICAgbGluayhlbnRyeSwgZnJlc2hFbmQpO1xuICAgICAgICAgIGZyZXNoRW5kID0gZW50cnk7XG4gICAgICAgICAgZnJlc2hFbmQubiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIGJpZGlyZWN0aW9uYWxseSBsaW5rcyB0d28gZW50cmllcyBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGxpbmsobmV4dEVudHJ5LCBwcmV2RW50cnkpIHtcbiAgICAgICAgaWYgKG5leHRFbnRyeSAhPT0gcHJldkVudHJ5KSB7XG4gICAgICAgICAgaWYgKG5leHRFbnRyeSkgbmV4dEVudHJ5LnAgPSBwcmV2RW50cnk7IC8vcCBzdGFuZHMgZm9yIHByZXZpb3VzLCAncHJldicgZGlkbid0IG1pbmlmeVxuICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNpbmZvXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHRoZSBjYWNoZXMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIGtleS12YWx1ZSBtYXAgb2YgYGNhY2hlSWRgIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBgY2FjaGUjaW5mb2BcbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmluZm8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbmZvID0ge307XG4gICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHtcbiAgICAgICAgaW5mb1tjYWNoZUlkXSA9IGNhY2hlLmluZm8oKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjZ2V0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgYWNjZXNzIHRvIGEgY2FjaGUgb2JqZWN0IGJ5IHRoZSBgY2FjaGVJZGAgdXNlZCB3aGVuIGl0IHdhcyBjcmVhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBDYWNoZSBvYmplY3QgaWRlbnRpZmllZCBieSB0aGUgY2FjaGVJZCBvciB1bmRlZmluZWQgaWYgbm8gc3VjaCBjYWNoZS5cbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGNhY2hlSWQpIHtcbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF07XG4gICAgfTtcblxuXG4gICAgcmV0dXJuIGNhY2hlRmFjdG9yeTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHRlbXBsYXRlQ2FjaGVcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGVcbiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgc2NyaXB0YCB0YWc6XG4gKlxuICogYGBgaHRtbFxuICogICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJ0ZW1wbGF0ZUlkLmh0bWxcIj5cbiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD5cbiAqICAgPC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYSBkZXNjZW5kZW50IG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RFbGVtZW50ICRyb290RWxlbWVudH0gKElFLFxuICogZWxlbWVudCB3aXRoIG5nLWFwcCBhdHRyaWJ1dGUpLCBvdGhlcndpc2UgdGhlIHRlbXBsYXRlIHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2U6XG4gKlxuICogYGBganNcbiAqIHZhciBteUFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKTtcbiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICogICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlSWQuaHRtbCcsICdUaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBUbyByZXRyaWV2ZSB0aGUgdGVtcGxhdGUgbGF0ZXIsIHNpbXBseSB1c2UgaXQgaW4geW91ciBjb21wb25lbnQ6XG4gKiBgYGBqc1xuICogbXlBcHAuY29tcG9uZW50KCdteUNvbXBvbmVudCcsIHtcbiAqICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVJZC5odG1sJ1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBvciBnZXQgaXQgdmlhIHRoZSBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2U6XG4gKiBgYGBqc1xuICogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd0ZW1wbGF0ZUlkLmh0bWwnKVxuICogYGBgXG4gKlxuICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LlxuICpcbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCd0ZW1wbGF0ZXMnKTtcbiAgfV07XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxuLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhXG4gKlxuICogRE9NLXJlbGF0ZWQgdmFyaWFibGVzOlxuICpcbiAqIC0gXCJub2RlXCIgLSBET00gTm9kZVxuICogLSBcImVsZW1lbnRcIiAtIERPTSBFbGVtZW50IG9yIE5vZGVcbiAqIC0gXCIkbm9kZVwiIG9yIFwiJGVsZW1lbnRcIiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudFxuICpcbiAqXG4gKiBDb21waWxlciByZWxhdGVkIHN0dWZmOlxuICpcbiAqIC0gXCJsaW5rRm5cIiAtIGxpbmtpbmcgZm4gb2YgYSBzaW5nbGUgZGlyZWN0aXZlXG4gKiAtIFwibm9kZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjaGlsZExpbmtGblwiIC0gIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGNoaWxkIG5vZGVzIG9mIGEgcGFydGljdWxhciBub2RlXG4gKiAtIFwiY29tcG9zaXRlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIGNvbXBpbGF0aW9uIHJvb3QgKG5vZGVMaXN0KVxuICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNvbXBpbGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21waWxlcyBhbiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaFxuICogY2FuIHRoZW4gYmUgdXNlZCB0byBsaW5rIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBzY29wZWB9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuXG4gKlxuICogVGhlIGNvbXBpbGF0aW9uIGlzIGEgcHJvY2VzcyBvZiB3YWxraW5nIHRoZSBET00gdHJlZSBhbmQgbWF0Y2hpbmcgRE9NIGVsZW1lbnRzIHRvXG4gKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGlzIGRvY3VtZW50IGlzIGFuIGluLWRlcHRoIHJlZmVyZW5jZSBvZiBhbGwgZGlyZWN0aXZlIG9wdGlvbnMuXG4gKiBGb3IgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIGRpcmVjdGl2ZXMgd2l0aCBleGFtcGxlcyBvZiBjb21tb24gdXNlIGNhc2VzLFxuICogc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBDb21wcmVoZW5zaXZlIERpcmVjdGl2ZSBBUElcbiAqXG4gKiBUaGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgYSBkaXJlY3RpdmUuXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgcmVzaWRlcyBpbiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IGNhbiBlaXRoZXIgcmV0dXJuIGEge0BsaW5rICRjb21waWxlI2RpcmVjdGl2ZS1kZWZpbml0aW9uLW9iamVjdCBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3QgKHNlZSBiZWxvdyl9XG4gKiB0aGF0IGRlZmluZXMgdGhlIGRpcmVjdGl2ZSBwcm9wZXJ0aWVzLCBvciBqdXN0IHRoZSBgcG9zdExpbmtgIGZ1bmN0aW9uIChhbGwgb3RoZXIgcHJvcGVydGllcyB3aWxsIGhhdmVcbiAqIHRoZSBkZWZhdWx0IHZhbHVlcykuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgXCJkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3RcIiBmb3JtLlxuICogPC9kaXY+XG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgZGlyZWN0aXZlIGRlY2xhcmVkIHdpdGggYSBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3Q6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtcHJpb3JpdHktIHByaW9yaXR5fTogMCxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGUtIHRlbXBsYXRlfTogJzxkaXY+PC9kaXY+JywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIC8vIG9yXG4gKiAgICAgICAvLyB7QGxpbmsgJGNvbXBpbGUjLXRlbXBsYXRldXJsLSB0ZW1wbGF0ZVVybH06ICdkaXJlY3RpdmUuaHRtbCcsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXRyYW5zY2x1ZGUtIHRyYW5zY2x1ZGV9OiBmYWxzZSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtcmVzdHJpY3QtIHJlc3RyaWN0fTogJ0EnLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy10ZW1wbGF0ZW5hbWVzcGFjZS0gdGVtcGxhdGVOYW1lc3BhY2V9OiAnaHRtbCcsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXNjb3BlLSBzY29wZX06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1jb250cm9sbGVyLSBjb250cm9sbGVyfTogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgb3RoZXJJbmplY3RhYmxlcykgeyAuLi4gfSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtY29udHJvbGxlcmFzLSBjb250cm9sbGVyQXN9OiAnc3RyaW5nSWRlbnRpZmllcicsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGJpbmRUb0NvbnRyb2xsZXJ9OiBmYWxzZSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtcmVxdWlyZS0gcmVxdWlyZX06ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLW11bHRpZWxlbWVudC0gbXVsdGlFbGVtZW50fTogZmFsc2UsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbXBpbGUtIGNvbXBpbGV9OiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICAge0BsaW5rICRjb21waWxlI3ByZS1saW5raW5nLWZ1bmN0aW9uIHByZX06IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sXG4gKiAgICAgICAgICAgIHtAbGluayAkY29tcGlsZSNwb3N0LWxpbmtpbmctZnVuY3Rpb24gcG9zdH06IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgLy8gb3JcbiAqICAgICAgICAgLy8gcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgICB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtbGluay0gbGlua306IHtcbiAqICAgICAgIC8vICB7QGxpbmsgJGNvbXBpbGUjcHJlLWxpbmtpbmctZnVuY3Rpb24gcHJlfTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgIC8vICB7QGxpbmsgJGNvbXBpbGUjcG9zdC1saW5raW5nLWZ1bmN0aW9uIHBvc3R9OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgLy8gfVxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtbGluay0gbGlua306IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICAgIH07XG4gKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gKiAgICAgLy8gb3JcbiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH1cbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyMgTGlmZS1jeWNsZSBob29rc1xuICogRGlyZWN0aXZlIGNvbnRyb2xsZXJzIGNhbiBwcm92aWRlIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyB0aGF0IGFyZSBjYWxsZWQgYnkgQW5ndWxhciBhdCBwb2ludHMgaW4gdGhlIGxpZmUtY3ljbGUgb2YgdGhlXG4gKiBkaXJlY3RpdmU6XG4gKiAqIGAkb25Jbml0KClgIC0gQ2FsbGVkIG9uIGVhY2ggY29udHJvbGxlciBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzIG9uIGFuIGVsZW1lbnQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGFuZFxuICogICBoYWQgdGhlaXIgYmluZGluZ3MgaW5pdGlhbGl6ZWQgKGFuZCBiZWZvcmUgdGhlIHByZSAmYW1wOyBwb3N0IGxpbmtpbmcgZnVuY3Rpb25zIGZvciB0aGUgZGlyZWN0aXZlcyBvblxuICogICB0aGlzIGVsZW1lbnQpLiBUaGlzIGlzIGEgZ29vZCBwbGFjZSB0byBwdXQgaW5pdGlhbGl6YXRpb24gY29kZSBmb3IgeW91ciBjb250cm9sbGVyLlxuICogKiBgJG9uQ2hhbmdlcyhjaGFuZ2VzT2JqKWAgLSBDYWxsZWQgd2hlbmV2ZXIgb25lLXdheSAoYDxgKSBvciBpbnRlcnBvbGF0aW9uIChgQGApIGJpbmRpbmdzIGFyZSB1cGRhdGVkLiBUaGVcbiAqICAgYGNoYW5nZXNPYmpgIGlzIGEgaGFzaCB3aG9zZSBrZXlzIGFyZSB0aGUgbmFtZXMgb2YgdGhlIGJvdW5kIHByb3BlcnRpZXMgdGhhdCBoYXZlIGNoYW5nZWQsIGFuZCB0aGUgdmFsdWVzIGFyZSBhblxuICogICBvYmplY3Qgb2YgdGhlIGZvcm0gYHsgY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlLCBpc0ZpcnN0Q2hhbmdlKCkgfWAuIFVzZSB0aGlzIGhvb2sgdG8gdHJpZ2dlciB1cGRhdGVzIHdpdGhpbiBhXG4gKiAgIGNvbXBvbmVudCBzdWNoIGFzIGNsb25pbmcgdGhlIGJvdW5kIHZhbHVlIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBtdXRhdGlvbiBvZiB0aGUgb3V0ZXIgdmFsdWUuIE5vdGUgdGhhdCB0aGlzIHdpbGxcbiAqICAgYWxzbyBiZSBjYWxsZWQgd2hlbiB5b3VyIGJpbmRpbmdzIGFyZSBpbml0aWFsaXplZC5cbiAqICogYCRkb0NoZWNrKClgIC0gQ2FsbGVkIG9uIGVhY2ggdHVybiBvZiB0aGUgZGlnZXN0IGN5Y2xlLiBQcm92aWRlcyBhbiBvcHBvcnR1bml0eSB0byBkZXRlY3QgYW5kIGFjdCBvblxuICogICBjaGFuZ2VzLiBBbnkgYWN0aW9ucyB0aGF0IHlvdSB3aXNoIHRvIHRha2UgaW4gcmVzcG9uc2UgdG8gdGhlIGNoYW5nZXMgdGhhdCB5b3UgZGV0ZWN0IG11c3QgYmVcbiAqICAgaW52b2tlZCBmcm9tIHRoaXMgaG9vazsgaW1wbGVtZW50aW5nIHRoaXMgaGFzIG5vIGVmZmVjdCBvbiB3aGVuIGAkb25DaGFuZ2VzYCBpcyBjYWxsZWQuIEZvciBleGFtcGxlLCB0aGlzIGhvb2tcbiAqICAgY291bGQgYmUgdXNlZnVsIGlmIHlvdSB3aXNoIHRvIHBlcmZvcm0gYSBkZWVwIGVxdWFsaXR5IGNoZWNrLCBvciB0byBjaGVjayBhIERhdGUgb2JqZWN0LCBjaGFuZ2VzIHRvIHdoaWNoIHdvdWxkIG5vdFxuICogICBiZSBkZXRlY3RlZCBieSBBbmd1bGFyJ3MgY2hhbmdlIGRldGVjdG9yIGFuZCB0aHVzIG5vdCB0cmlnZ2VyIGAkb25DaGFuZ2VzYC4gVGhpcyBob29rIGlzIGludm9rZWQgd2l0aCBubyBhcmd1bWVudHM7XG4gKiAgIGlmIGRldGVjdGluZyBjaGFuZ2VzLCB5b3UgbXVzdCBzdG9yZSB0aGUgcHJldmlvdXMgdmFsdWUocykgZm9yIGNvbXBhcmlzb24gdG8gdGhlIGN1cnJlbnQgdmFsdWVzLlxuICogKiBgJG9uRGVzdHJveSgpYCAtIENhbGxlZCBvbiBhIGNvbnRyb2xsZXIgd2hlbiBpdHMgY29udGFpbmluZyBzY29wZSBpcyBkZXN0cm95ZWQuIFVzZSB0aGlzIGhvb2sgZm9yIHJlbGVhc2luZ1xuICogICBleHRlcm5hbCByZXNvdXJjZXMsIHdhdGNoZXMgYW5kIGV2ZW50IGhhbmRsZXJzLiBOb3RlIHRoYXQgY29tcG9uZW50cyBoYXZlIHRoZWlyIGAkb25EZXN0cm95KClgIGhvb2tzIGNhbGxlZCBpblxuICogICB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYCRzY29wZS4kYnJvYWRjYXN0YCBldmVudHMgYXJlIHRyaWdnZXJlZCwgd2hpY2ggaXMgdG9wIGRvd24uIFRoaXMgbWVhbnMgdGhhdCBwYXJlbnRcbiAqICAgY29tcG9uZW50cyB3aWxsIGhhdmUgdGhlaXIgYCRvbkRlc3Ryb3koKWAgaG9vayBjYWxsZWQgYmVmb3JlIGNoaWxkIGNvbXBvbmVudHMuXG4gKiAqIGAkcG9zdExpbmsoKWAgLSBDYWxsZWQgYWZ0ZXIgdGhpcyBjb250cm9sbGVyJ3MgZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuIGhhdmUgYmVlbiBsaW5rZWQuIFNpbWlsYXIgdG8gdGhlIHBvc3QtbGlua1xuICogICBmdW5jdGlvbiB0aGlzIGhvb2sgY2FuIGJlIHVzZWQgdG8gc2V0IHVwIERPTSBldmVudCBoYW5kbGVycyBhbmQgZG8gZGlyZWN0IERPTSBtYW5pcHVsYXRpb24uXG4gKiAgIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZCBhbmQgbGlua2VkIHNpbmNlXG4gKiAgIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93biBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlblxuICogICBzdXNwZW5kZWQgdW50aWwgdGhhdCBvY2N1cnMuXG4gKlxuICogIyMjIyBDb21wYXJpc29uIHdpdGggQW5ndWxhciAyIGxpZmUtY3ljbGUgaG9va3NcbiAqIEFuZ3VsYXIgMiBhbHNvIHVzZXMgbGlmZS1jeWNsZSBob29rcyBmb3IgaXRzIGNvbXBvbmVudHMuIFdoaWxlIHRoZSBBbmd1bGFyIDEgbGlmZS1jeWNsZSBob29rcyBhcmUgc2ltaWxhciB0aGVyZSBhcmVcbiAqIHNvbWUgZGlmZmVyZW5jZXMgdGhhdCB5b3Ugc2hvdWxkIGJlIGF3YXJlIG9mLCBlc3BlY2lhbGx5IHdoZW4gaXQgY29tZXMgdG8gbW92aW5nIHlvdXIgY29kZSBmcm9tIEFuZ3VsYXIgMSB0byBBbmd1bGFyIDI6XG4gKlxuICogKiBBbmd1bGFyIDEgaG9va3MgYXJlIHByZWZpeGVkIHdpdGggYCRgLCBzdWNoIGFzIGAkb25Jbml0YC4gQW5ndWxhciAyIGhvb2tzIGFyZSBwcmVmaXhlZCB3aXRoIGBuZ2AsIHN1Y2ggYXMgYG5nT25Jbml0YC5cbiAqICogQW5ndWxhciAxIGhvb2tzIGNhbiBiZSBkZWZpbmVkIG9uIHRoZSBjb250cm9sbGVyIHByb3RvdHlwZSBvciBhZGRlZCB0byB0aGUgY29udHJvbGxlciBpbnNpZGUgaXRzIGNvbnN0cnVjdG9yLlxuICogICBJbiBBbmd1bGFyIDIgeW91IGNhbiBvbmx5IGRlZmluZSBob29rcyBvbiB0aGUgcHJvdG90eXBlIG9mIHRoZSBDb21wb25lbnQgY2xhc3MuXG4gKiAqIER1ZSB0byB0aGUgZGlmZmVyZW5jZXMgaW4gY2hhbmdlLWRldGVjdGlvbiwgeW91IG1heSBnZXQgbWFueSBtb3JlIGNhbGxzIHRvIGAkZG9DaGVja2AgaW4gQW5ndWxhciAxIHRoYW4geW91IHdvdWxkIHRvXG4gKiAgIGBuZ0RvQ2hlY2tgIGluIEFuZ3VsYXIgMlxuICogKiBDaGFuZ2VzIHRvIHRoZSBtb2RlbCBpbnNpZGUgYCRkb0NoZWNrYCB3aWxsIHRyaWdnZXIgbmV3IHR1cm5zIG9mIHRoZSBkaWdlc3QgbG9vcCwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgY2hhbmdlcyB0byBiZVxuICogICBwcm9wYWdhdGVkIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uLlxuICogICBBbmd1bGFyIDIgZG9lcyBub3QgYWxsb3cgdGhlIGBuZ0RvQ2hlY2tgIGhvb2sgdG8gdHJpZ2dlciBhIGNoYW5nZSBvdXRzaWRlIG9mIHRoZSBjb21wb25lbnQuIEl0IHdpbGwgZWl0aGVyIHRocm93IGFuXG4gKiAgIGVycm9yIG9yIGRvIG5vdGhpbmcgZGVwZW5kaW5nIHVwb24gdGhlIHN0YXRlIG9mIGBlbmFibGVQcm9kTW9kZSgpYC5cbiAqXG4gKiAjIyMjIExpZmUtY3ljbGUgaG9vayBleGFtcGxlc1xuICpcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgeW91IGNhbiBjaGVjayBmb3IgbXV0YXRpb25zIHRvIGEgRGF0ZSBvYmplY3QgZXZlbiB0aG91Z2ggdGhlIGlkZW50aXR5IG9mIHRoZSBvYmplY3RcbiAqIGhhcyBub3QgY2hhbmdlZC5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwiZG9DaGVja0RhdGVFeGFtcGxlXCIgbW9kdWxlPVwiZG8tY2hlY2stbW9kdWxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnZG8tY2hlY2stbW9kdWxlJywgW10pXG4gKiAgICAgICAuY29tcG9uZW50KCdhcHAnLCB7XG4gKiAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICdNb250aDogPGlucHV0IG5nLW1vZGVsPVwiJGN0cmwubW9udGhcIiBuZy1jaGFuZ2U9XCIkY3RybC51cGRhdGVEYXRlKClcIj4nICtcbiAqICAgICAgICAgICAnRGF0ZToge3sgJGN0cmwuZGF0ZSB9fScgK1xuICogICAgICAgICAgICc8dGVzdCBkYXRlPVwiJGN0cmwuZGF0ZVwiPjwvdGVzdD4nLFxuICogICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICogICAgICAgICAgIHRoaXMubW9udGggPSB0aGlzLmRhdGUuZ2V0TW9udGgoKTtcbiAqICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGUgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIHRoaXMuZGF0ZS5zZXRNb250aCh0aGlzLm1vbnRoKTtcbiAqICAgICAgICAgICB9O1xuICogICAgICAgICB9XG4gKiAgICAgICB9KVxuICogICAgICAgLmNvbXBvbmVudCgndGVzdCcsIHtcbiAqICAgICAgICAgYmluZGluZ3M6IHsgZGF0ZTogJzwnIH0sXG4gKiAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICc8cHJlPnt7ICRjdHJsLmxvZyB8IGpzb24gfX08L3ByZT4nLFxuICogICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICB2YXIgcHJldmlvdXNWYWx1ZTtcbiAqICAgICAgICAgICB0aGlzLmxvZyA9IFtdO1xuICogICAgICAgICAgIHRoaXMuJGRvQ2hlY2sgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmRhdGUgJiYgdGhpcy5kYXRlLnZhbHVlT2YoKTtcbiAqICAgICAgICAgICAgIGlmIChwcmV2aW91c1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAqICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogZGF0ZSBtdXRhdGVkOiAnICsgdGhpcy5kYXRlKTtcbiAqICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICB9O1xuICogICAgICAgICB9XG4gKiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxhcHA+PC9hcHA+XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgc2hvdyBob3cgeW91IG1pZ2h0IHVzZSBgJGRvQ2hlY2tgIHRvIHRyaWdnZXIgY2hhbmdlcyBpbiB5b3VyIGNvbXBvbmVudCdzIGlucHV0cyBldmVuIGlmIHRoZVxuICogYWN0dWFsIGlkZW50aXR5IG9mIHRoZSBjb21wb25lbnQgZG9lc24ndCBjaGFuZ2UuIChCZSBhd2FyZSB0aGF0IGNsb25pbmcgYW5kIGRlZXAgZXF1YWxpdHkgY2hlY2tzIG9uIGxhcmdlXG4gKiBhcnJheXMgb3Igb2JqZWN0cyBjYW4gaGF2ZSBhIG5lZ2F0aXZlIGltcGFjdCBvbiB5b3VyIGFwcGxpY2F0aW9uIHBlcmZvcm1hbmNlKVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJkb0NoZWNrQXJyYXlFeGFtcGxlXCIgbW9kdWxlPVwiZG8tY2hlY2stbW9kdWxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGRpdiBuZy1pbml0PVwiaXRlbXMgPSBbXVwiPlxuICogICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIml0ZW1zLnB1c2goaXRlbXMubGVuZ3RoKVwiPkFkZCBJdGVtPC9idXR0b24+XG4gKiAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiaXRlbXMgPSBbXVwiPlJlc2V0IEl0ZW1zPC9idXR0b24+XG4gKiAgICAgICA8cHJlPnt7IGl0ZW1zIH19PC9wcmU+XG4gKiAgICAgICA8dGVzdCBpdGVtcz1cIml0ZW1zXCI+PC90ZXN0PlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvLWNoZWNrLW1vZHVsZScsIFtdKVxuICogICAgICAgIC5jb21wb25lbnQoJ3Rlc3QnLCB7XG4gKiAgICAgICAgICBiaW5kaW5nczogeyBpdGVtczogJzwnIH0sXG4gKiAgICAgICAgICB0ZW1wbGF0ZTpcbiAqICAgICAgICAgICAgJzxwcmU+e3sgJGN0cmwubG9nIHwganNvbiB9fTwvcHJlPicsXG4gKiAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgdGhpcy5sb2cgPSBbXTtcbiAqXG4gKiAgICAgICAgICAgIHRoaXMuJGRvQ2hlY2sgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtc19yZWYgIT09IHRoaXMuaXRlbXMpIHtcbiAqICAgICAgICAgICAgICAgIHRoaXMubG9nLnB1c2goJ2RvQ2hlY2s6IGl0ZW1zIGNoYW5nZWQnKTtcbiAqICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNfcmVmID0gdGhpcy5pdGVtcztcbiAqICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh0aGlzLml0ZW1zX2Nsb25lLCB0aGlzLml0ZW1zKSkge1xuICogICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogaXRlbXMgbXV0YXRlZCcpO1xuICogICAgICAgICAgICAgICAgdGhpcy5pdGVtc19jbG9uZSA9IGFuZ3VsYXIuY29weSh0aGlzLml0ZW1zKTtcbiAqICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgIH07XG4gKiAgICAgICAgICB9XG4gKiAgICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdFxuICpcbiAqIFRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGVcbiAqIGNvbXBpbGVyfS4gVGhlIGF0dHJpYnV0ZXMgYXJlOlxuICpcbiAqICMjIyMgYG11bHRpRWxlbWVudGBcbiAqIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSAoZGVmYXVsdCBpcyBgZmFsc2VgKSwgdGhlIEhUTUwgY29tcGlsZXIgd2lsbCBjb2xsZWN0IERPTSBub2RlcyBiZXR3ZWVuXG4gKiBub2RlcyB3aXRoIHRoZSBhdHRyaWJ1dGVzIGBkaXJlY3RpdmUtbmFtZS1zdGFydGAgYW5kIGBkaXJlY3RpdmUtbmFtZS1lbmRgLCBhbmQgZ3JvdXAgdGhlbVxuICogdG9nZXRoZXIgYXMgdGhlIGRpcmVjdGl2ZSBlbGVtZW50cy4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB0aGlzIGZlYXR1cmUgYmUgdXNlZCBvbiBkaXJlY3RpdmVzXG4gKiB3aGljaCBhcmUgbm90IHN0cmljdGx5IGJlaGF2aW9yYWwgKHN1Y2ggYXMge0BsaW5rIG5nQ2xpY2t9KSwgYW5kIHdoaWNoXG4gKiBkbyBub3QgbWFuaXB1bGF0ZSBvciByZXBsYWNlIGNoaWxkIG5vZGVzIChzdWNoIGFzIHtAbGluayBuZ0luY2x1ZGV9KS5cbiAqXG4gKiAjIyMjIGBwcmlvcml0eWBcbiAqIFdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGRpcmVjdGl2ZXMgZGVmaW5lZCBvbiBhIHNpbmdsZSBET00gZWxlbWVudCwgc29tZXRpbWVzIGl0XG4gKiBpcyBuZWNlc3NhcnkgdG8gc3BlY2lmeSB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFwcGxpZWQuIFRoZSBgcHJpb3JpdHlgIGlzIHVzZWRcbiAqIHRvIHNvcnQgdGhlIGRpcmVjdGl2ZXMgYmVmb3JlIHRoZWlyIGBjb21waWxlYCBmdW5jdGlvbnMgZ2V0IGNhbGxlZC4gUHJpb3JpdHkgaXMgZGVmaW5lZCBhcyBhXG4gKiBudW1iZXIuIERpcmVjdGl2ZXMgd2l0aCBncmVhdGVyIG51bWVyaWNhbCBgcHJpb3JpdHlgIGFyZSBjb21waWxlZCBmaXJzdC4gUHJlLWxpbmsgZnVuY3Rpb25zXG4gKiBhcmUgYWxzbyBydW4gaW4gcHJpb3JpdHkgb3JkZXIsIGJ1dCBwb3N0LWxpbmsgZnVuY3Rpb25zIGFyZSBydW4gaW4gcmV2ZXJzZSBvcmRlci4gVGhlIG9yZGVyXG4gKiBvZiBkaXJlY3RpdmVzIHdpdGggdGhlIHNhbWUgcHJpb3JpdHkgaXMgdW5kZWZpbmVkLiBUaGUgZGVmYXVsdCBwcmlvcml0eSBpcyBgMGAuXG4gKlxuICogIyMjIyBgdGVybWluYWxgXG4gKiBJZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBjdXJyZW50IGBwcmlvcml0eWAgd2lsbCBiZSB0aGUgbGFzdCBzZXQgb2YgZGlyZWN0aXZlc1xuICogd2hpY2ggd2lsbCBleGVjdXRlIChhbnkgZGlyZWN0aXZlcyBhdCB0aGUgY3VycmVudCBwcmlvcml0eSB3aWxsIHN0aWxsIGV4ZWN1dGVcbiAqIGFzIHRoZSBvcmRlciBvZiBleGVjdXRpb24gb24gc2FtZSBgcHJpb3JpdHlgIGlzIHVuZGVmaW5lZCkuIE5vdGUgdGhhdCBleHByZXNzaW9uc1xuICogYW5kIG90aGVyIGRpcmVjdGl2ZXMgdXNlZCBpbiB0aGUgZGlyZWN0aXZlJ3MgdGVtcGxhdGUgd2lsbCBhbHNvIGJlIGV4Y2x1ZGVkIGZyb20gZXhlY3V0aW9uLlxuICpcbiAqICMjIyMgYHNjb3BlYFxuICogVGhlIHNjb3BlIHByb3BlcnR5IGNhbiBiZSBgZmFsc2VgLCBgdHJ1ZWAsIG9yIGFuIG9iamVjdDpcbiAqXG4gKiAqICoqYGZhbHNlYCAoZGVmYXVsdCk6KiogTm8gc2NvcGUgd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgZGlyZWN0aXZlLiBUaGUgZGlyZWN0aXZlIHdpbGwgdXNlIGl0c1xuICogcGFyZW50J3Mgc2NvcGUuXG4gKlxuICogKiAqKmB0cnVlYDoqKiBBIG5ldyBjaGlsZCBzY29wZSB0aGF0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRzIGZyb20gaXRzIHBhcmVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yXG4gKiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC4gSWYgbXVsdGlwbGUgZGlyZWN0aXZlcyBvbiB0aGUgc2FtZSBlbGVtZW50IHJlcXVlc3QgYSBuZXcgc2NvcGUsXG4gKiBvbmx5IG9uZSBuZXcgc2NvcGUgaXMgY3JlYXRlZC5cbiAqXG4gKiAqICoqYHsuLi59YCAoYW4gb2JqZWN0IGhhc2gpOioqIEEgbmV3IFwiaXNvbGF0ZVwiIHNjb3BlIGlzIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZS5cbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgZGlmZmVycyBmcm9tIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5XG4gKiBpbmhlcml0IGZyb20gaXRzIHBhcmVudCBzY29wZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBjcmVhdGluZyByZXVzYWJsZSBjb21wb25lbnRzLCB3aGljaCBzaG91bGQgbm90XG4gKiBhY2NpZGVudGFsbHkgcmVhZCBvciBtb2RpZnkgZGF0YSBpbiB0aGUgcGFyZW50IHNjb3BlLiBOb3RlIHRoYXQgYW4gaXNvbGF0ZSBzY29wZVxuICogZGlyZWN0aXZlIHdpdGhvdXQgYSBgdGVtcGxhdGVgIG9yIGB0ZW1wbGF0ZVVybGAgd2lsbCBub3QgYXBwbHkgdGhlIGlzb2xhdGUgc2NvcGVcbiAqIHRvIGl0cyBjaGlsZHJlbiBlbGVtZW50cy5cbiAqXG4gKiBUaGUgJ2lzb2xhdGUnIHNjb3BlIG9iamVjdCBoYXNoIGRlZmluZXMgYSBzZXQgb2YgbG9jYWwgc2NvcGUgcHJvcGVydGllcyBkZXJpdmVkIGZyb20gYXR0cmlidXRlcyBvbiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQuIFRoZXNlIGxvY2FsIHByb3BlcnRpZXMgYXJlIHVzZWZ1bCBmb3IgYWxpYXNpbmcgdmFsdWVzIGZvciB0ZW1wbGF0ZXMuIFRoZSBrZXlzIGluXG4gKiB0aGUgb2JqZWN0IGhhc2ggbWFwIHRvIHRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBvbiB0aGUgaXNvbGF0ZSBzY29wZTsgdGhlIHZhbHVlcyBkZWZpbmUgaG93IHRoZSBwcm9wZXJ0eVxuICogaXMgYm91bmQgdG8gdGhlIHBhcmVudCBzY29wZSwgdmlhIG1hdGNoaW5nIGF0dHJpYnV0ZXMgb24gdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQ6XG4gKlxuICogKiBgQGAgb3IgYEBhdHRyYCAtIGJpbmQgYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byB0aGUgdmFsdWUgb2YgRE9NIGF0dHJpYnV0ZS4gVGhlIHJlc3VsdCBpc1xuICogICBhbHdheXMgYSBzdHJpbmcgc2luY2UgRE9NIGF0dHJpYnV0ZXMgYXJlIHN0cmluZ3MuIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZVxuICogICBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLiBHaXZlbiBgPG15LWNvbXBvbmVudFxuICogICBteS1hdHRyPVwiaGVsbG8ge3tuYW1lfX1cIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLFxuICogICB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgcHJvcGVydHkgYGxvY2FsTmFtZWAgd2lsbCByZWZsZWN0IHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgYGhlbGxvXG4gKiAgIHt7bmFtZX19YC4gQXMgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgY2hhbmdlcyBzbyB3aWxsIHRoZSBgbG9jYWxOYW1lYCBwcm9wZXJ0eSBvbiB0aGUgZGlyZWN0aXZlJ3NcbiAqICAgc2NvcGUuIFRoZSBgbmFtZWAgaXMgcmVhZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUgKG5vdCB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUpLlxuICpcbiAqICogYD1gIG9yIGA9YXR0cmAgLSBzZXQgdXAgYSBiaWRpcmVjdGlvbmFsIGJpbmRpbmcgYmV0d2VlbiBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IGFuZCBhbiBleHByZXNzaW9uXG4gKiAgIHBhc3NlZCB2aWEgdGhlIGF0dHJpYnV0ZSBgYXR0cmAuIFRoZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLlxuICogICBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWxcbiAqICAgbmFtZS4gR2l2ZW4gYDxteS1jb21wb25lbnQgbXktYXR0cj1cInBhcmVudE1vZGVsXCI+YCBhbmQgdGhlIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBgc2NvcGU6IHtcbiAqICAgbG9jYWxNb2RlbDogJz1teUF0dHInIH1gLCB0aGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIG9uIHRoZSBkaXJlY3RpdmUncyBzY29wZSB3aWxsIHJlZmxlY3QgdGhlXG4gKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQ2hhbmdlcyB0byBgcGFyZW50TW9kZWxgIHdpbGwgYmUgcmVmbGVjdGVkIGluXG4gKiAgIGBsb2NhbE1vZGVsYCBhbmQgdmljZSB2ZXJzYS4gT3B0aW9uYWwgYXR0cmlidXRlcyBzaG91bGQgYmUgbWFya2VkIGFzIHN1Y2ggd2l0aCBhIHF1ZXN0aW9uIG1hcms6XG4gKiAgIGA9P2Agb3IgYD0/YXR0cmAuIElmIHRoZSBiaW5kaW5nIGV4cHJlc3Npb24gaXMgbm9uLWFzc2lnbmFibGUsIG9yIGlmIHRoZSBhdHRyaWJ1dGUgaXNuJ3RcbiAqICAgb3B0aW9uYWwgYW5kIGRvZXNuJ3QgZXhpc3QsIGFuIGV4Y2VwdGlvbiAoe0BsaW5rIGVycm9yLyRjb21waWxlL25vbmFzc2lnbiBgJGNvbXBpbGU6bm9uYXNzaWduYH0pXG4gKiAgIHdpbGwgYmUgdGhyb3duIHVwb24gZGlzY292ZXJpbmcgY2hhbmdlcyB0byB0aGUgbG9jYWwgdmFsdWUsIHNpbmNlIGl0IHdpbGwgYmUgaW1wb3NzaWJsZSB0byBzeW5jXG4gKiAgIHRoZW0gYmFjayB0byB0aGUgcGFyZW50IHNjb3BlLiBCeSBkZWZhdWx0LCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIGAkd2F0Y2hgfVxuICogICBtZXRob2QgaXMgdXNlZCBmb3IgdHJhY2tpbmcgY2hhbmdlcywgYW5kIHRoZSBlcXVhbGl0eSBjaGVjayBpcyBiYXNlZCBvbiBvYmplY3QgaWRlbnRpdHkuXG4gKiAgIEhvd2V2ZXIsIGlmIGFuIG9iamVjdCBsaXRlcmFsIG9yIGFuIGFycmF5IGxpdGVyYWwgaXMgcGFzc2VkIGFzIHRoZSBiaW5kaW5nIGV4cHJlc3Npb24sIHRoZVxuICogICBlcXVhbGl0eSBjaGVjayBpcyBkb25lIGJ5IHZhbHVlICh1c2luZyB0aGUge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBmdW5jdGlvbikuIEl0J3MgYWxzbyBwb3NzaWJsZVxuICogICB0byB3YXRjaCB0aGUgZXZhbHVhdGVkIHZhbHVlIHNoYWxsb3dseSB3aXRoIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAqICAgYCR3YXRjaENvbGxlY3Rpb25gfTogdXNlIGA9KmAgb3IgYD0qYXR0cmAgKGA9Kj9gIG9yIGA9Kj9hdHRyYCBpZiB0aGUgYXR0cmlidXRlIGlzIG9wdGlvbmFsKS5cbiAqXG4gICogKiBgPGAgb3IgYDxhdHRyYCAtIHNldCB1cCBhIG9uZS13YXkgKG9uZS1kaXJlY3Rpb25hbCkgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuXG4gKiAgIGV4cHJlc3Npb24gcGFzc2VkIHZpYSB0aGUgYXR0cmlidXRlIGBhdHRyYC4gVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZVxuICogICBwYXJlbnQgc2NvcGUuIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZVxuICogICBsb2NhbCBuYW1lLiBZb3UgY2FuIGFsc28gbWFrZSB0aGUgYmluZGluZyBvcHRpb25hbCBieSBhZGRpbmcgYD9gOiBgPD9gIG9yIGA8P2F0dHJgLlxuICpcbiAqICAgRm9yIGV4YW1wbGUsIGdpdmVuIGA8bXktY29tcG9uZW50IG15LWF0dHI9XCJwYXJlbnRNb2RlbFwiPmAgYW5kIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9mXG4gKiAgIGBzY29wZTogeyBsb2NhbE1vZGVsOic8bXlBdHRyJyB9YCwgdGhlbiB0aGUgaXNvbGF0ZWQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCB0aGVcbiAqICAgdmFsdWUgb2YgYHBhcmVudE1vZGVsYCBvbiB0aGUgcGFyZW50IHNjb3BlLiBBbnkgY2hhbmdlcyB0byBgcGFyZW50TW9kZWxgIHdpbGwgYmUgcmVmbGVjdGVkXG4gKiAgIGluIGBsb2NhbE1vZGVsYCwgYnV0IGNoYW5nZXMgaW4gYGxvY2FsTW9kZWxgIHdpbGwgbm90IHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gVGhlcmUgYXJlIGhvd2V2ZXJcbiAqICAgdHdvIGNhdmVhdHM6XG4gKiAgICAgMS4gb25lLXdheSBiaW5kaW5nIGRvZXMgbm90IGNvcHkgdGhlIHZhbHVlIGZyb20gdGhlIHBhcmVudCB0byB0aGUgaXNvbGF0ZSBzY29wZSwgaXQgc2ltcGx5XG4gKiAgICAgc2V0cyB0aGUgc2FtZSB2YWx1ZS4gVGhhdCBtZWFucyBpZiB5b3VyIGJvdW5kIHZhbHVlIGlzIGFuIG9iamVjdCwgY2hhbmdlcyB0byBpdHMgcHJvcGVydGllc1xuICogICAgIGluIHRoZSBpc29sYXRlZCBzY29wZSB3aWxsIGJlIHJlZmxlY3RlZCBpbiB0aGUgcGFyZW50IHNjb3BlIChiZWNhdXNlIGJvdGggcmVmZXJlbmNlIHRoZSBzYW1lIG9iamVjdCkuXG4gKiAgICAgMi4gb25lLXdheSBiaW5kaW5nIHdhdGNoZXMgY2hhbmdlcyB0byB0aGUgKippZGVudGl0eSoqIG9mIHRoZSBwYXJlbnQgdmFsdWUuIFRoYXQgbWVhbnMgdGhlXG4gKiAgICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIGAkd2F0Y2hgfSBvbiB0aGUgcGFyZW50IHZhbHVlIG9ubHkgZmlyZXMgaWYgdGhlIHJlZmVyZW5jZVxuICogICAgIHRvIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZC4gSW4gbW9zdCBjYXNlcywgdGhpcyBzaG91bGQgbm90IGJlIG9mIGNvbmNlcm4sIGJ1dCBjYW4gYmUgaW1wb3J0YW50XG4gKiAgICAgdG8ga25vdyBpZiB5b3Ugb25lLXdheSBiaW5kIHRvIGFuIG9iamVjdCwgYW5kIHRoZW4gcmVwbGFjZSB0aGF0IG9iamVjdCBpbiB0aGUgaXNvbGF0ZWQgc2NvcGUuXG4gKiAgICAgSWYgeW91IG5vdyBjaGFuZ2UgYSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IGluIHlvdXIgcGFyZW50IHNjb3BlLCB0aGUgY2hhbmdlIHdpbGwgbm90IGJlXG4gKiAgICAgcHJvcGFnYXRlZCB0byB0aGUgaXNvbGF0ZWQgc2NvcGUsIGJlY2F1c2UgdGhlIGlkZW50aXR5IG9mIHRoZSBvYmplY3Qgb24gdGhlIHBhcmVudCBzY29wZVxuICogICAgIGhhcyBub3QgY2hhbmdlZC4gSW5zdGVhZCB5b3UgbXVzdCBhc3NpZ24gYSBuZXcgb2JqZWN0LlxuICpcbiAqICAgT25lLXdheSBiaW5kaW5nIGlzIHVzZWZ1bCBpZiB5b3UgZG8gbm90IHBsYW4gdG8gcHJvcGFnYXRlIGNoYW5nZXMgdG8geW91ciBpc29sYXRlZCBzY29wZSBiaW5kaW5nc1xuICogICBiYWNrIHRvIHRoZSBwYXJlbnQuIEhvd2V2ZXIsIGl0IGRvZXMgbm90IG1ha2UgdGhpcyBjb21wbGV0ZWx5IGltcG9zc2libGUuXG4gKlxuICogKiBgJmAgb3IgYCZhdHRyYCAtIHByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLiBJZlxuICogICBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZS5cbiAqICAgR2l2ZW4gYDxteS1jb21wb25lbnQgbXktYXR0cj1cImNvdW50ID0gY291bnQgKyB2YWx1ZVwiPmAgYW5kIHRoZSBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gYHNjb3BlOiB7XG4gKiAgIGxvY2FsRm46JyZteUF0dHInIH1gLCB0aGUgaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0byBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yXG4gKiAgIHRoZSBgY291bnQgPSBjb3VudCArIHZhbHVlYCBleHByZXNzaW9uLiBPZnRlbiBpdCdzIGRlc2lyYWJsZSB0byBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGVcbiAqICAgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZS4gVGhpcyBjYW4gYmUgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzXG4gKiAgIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLiBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYFxuICogICB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWUgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLlxuICpcbiAqIEluIGdlbmVyYWwgaXQncyBwb3NzaWJsZSB0byBhcHBseSBtb3JlIHRoYW4gb25lIGRpcmVjdGl2ZSB0byBvbmUgZWxlbWVudCwgYnV0IHRoZXJlIG1pZ2h0IGJlIGxpbWl0YXRpb25zXG4gKiBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygc2NvcGUgcmVxdWlyZWQgYnkgdGhlIGRpcmVjdGl2ZXMuIFRoZSBmb2xsb3dpbmcgcG9pbnRzIHdpbGwgaGVscCBleHBsYWluIHRoZXNlIGxpbWl0YXRpb25zLlxuICogRm9yIHNpbXBsaWNpdHkgb25seSB0d28gZGlyZWN0aXZlcyBhcmUgdGFrZW4gaW50byBhY2NvdW50LCBidXQgaXQgaXMgYWxzbyBhcHBsaWNhYmxlIGZvciBzZXZlcmFsIGRpcmVjdGl2ZXM6XG4gKlxuICogKiAqKm5vIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gVHdvIGRpcmVjdGl2ZXMgd2hpY2ggZG9uJ3QgcmVxdWlyZSB0aGVpciBvd24gc2NvcGUgd2lsbCB1c2UgdGhlaXIgcGFyZW50J3Mgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipubyBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqY2hpbGQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgQm90aCBkaXJlY3RpdmVzIHdpbGwgc2hhcmUgb25lIHNpbmdsZSBjaGlsZCBzY29wZVxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIFRoZSBpc29sYXRlZCBkaXJlY3RpdmUgd2lsbCB1c2UgaXQncyBvd24gY3JlYXRlZCBpc29sYXRlZCBzY29wZS4gVGhlIG90aGVyIGRpcmVjdGl2ZSB3aWxsIHVzZVxuICogaXRzIHBhcmVudCdzIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlcyBjYW5ub3RcbiAqIGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKippc29sYXRlZCBzY29wZSoqICA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlc1xuICogY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqXG4gKlxuICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmBcbiAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byBiaW5kIHNjb3BlIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXIuIEl0IGNhbiBiZSBlaXRoZXJcbiAqIGB0cnVlYCBvciBhbiBvYmplY3QgaGFzaCB3aXRoIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUgYHNjb3BlYCBwcm9wZXJ0eS5cbiAqXG4gKiBXaGVuIGFuIGlzb2xhdGUgc2NvcGUgaXMgdXNlZCBmb3IgYSBkaXJlY3RpdmUgKHNlZSBhYm92ZSksIGBiaW5kVG9Db250cm9sbGVyOiB0cnVlYCB3aWxsXG4gKiBhbGxvdyBhIGNvbXBvbmVudCB0byBoYXZlIGl0cyBwcm9wZXJ0aWVzIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyLCByYXRoZXIgdGhhbiB0byBzY29wZS5cbiAqXG4gKiBBZnRlciB0aGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQsIHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyB3aWxsIGJlIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyXG4gKiBwcm9wZXJ0aWVzLiBZb3UgY2FuIGFjY2VzcyB0aGVzZSBiaW5kaW5ncyBvbmNlIHRoZXkgaGF2ZSBiZWVuIGluaXRpYWxpemVkIGJ5IHByb3ZpZGluZyBhIGNvbnRyb2xsZXIgbWV0aG9kIGNhbGxlZFxuICogYCRvbkluaXRgLCB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZSBjb250cm9sbGVycyBvbiBhbiBlbGVtZW50IGhhdmUgYmVlbiBjb25zdHJ1Y3RlZCBhbmQgaGFkIHRoZWlyIGJpbmRpbmdzXG4gKiBpbml0aWFsaXplZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipEZXByZWNhdGlvbiB3YXJuaW5nOioqIGlmIGAkY29tcGlsZVByb2N2aWRlci5wcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQodHJ1ZSlgIHdhcyBjYWxsZWQsIGJpbmRpbmdzIGZvciBub24tRVM2IGNsYXNzXG4gKiBjb250cm9sbGVycyBhcmUgYm91bmQgdG8gYHRoaXNgIGJlZm9yZSB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBpcyBjYWxsZWQgYnV0IHRoaXMgdXNlIGlzIG5vdyBkZXByZWNhdGVkLiBQbGVhc2VcbiAqIHBsYWNlIGluaXRpYWxpemF0aW9uIGNvZGUgdGhhdCByZWxpZXMgdXBvbiBiaW5kaW5ncyBpbnNpZGUgYSBgJG9uSW5pdGAgbWV0aG9kIG9uIHRoZSBjb250cm9sbGVyLCBpbnN0ZWFkLlxuICogPC9kaXY+XG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgYGJpbmRUb0NvbnRyb2xsZXJgIHRvIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICogVGhpcyB3aWxsIHNldCB1cCB0aGUgc2NvcGUgYmluZGluZ3MgdG8gdGhlIGNvbnRyb2xsZXIgZGlyZWN0bHkuIE5vdGUgdGhhdCBgc2NvcGVgIGNhbiBzdGlsbCBiZSB1c2VkXG4gKiB0byBkZWZpbmUgd2hpY2gga2luZCBvZiBzY29wZSBpcyBjcmVhdGVkLiBCeSBkZWZhdWx0LCBubyBzY29wZSBpcyBjcmVhdGVkLiBVc2UgYHNjb3BlOiB7fWAgdG8gY3JlYXRlIGFuIGlzb2xhdGVcbiAqIHNjb3BlICh1c2VmdWwgZm9yIGNvbXBvbmVudCBkaXJlY3RpdmVzKS5cbiAqXG4gKiBJZiBib3RoIGBiaW5kVG9Db250cm9sbGVyYCBhbmQgYHNjb3BlYCBhcmUgZGVmaW5lZCBhbmQgaGF2ZSBvYmplY3QgaGFzaGVzLCBgYmluZFRvQ29udHJvbGxlcmAgb3ZlcnJpZGVzIGBzY29wZWAuXG4gKlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJgXG4gKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZVxuICogcHJlLWxpbmtpbmcgcGhhc2UgYW5kIGNhbiBiZSBhY2Nlc3NlZCBieSBvdGhlciBkaXJlY3RpdmVzIChzZWVcbiAqIGByZXF1aXJlYCBhdHRyaWJ1dGUpLiBUaGlzIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIgYW5kIGF1Z21lbnRcbiAqIGVhY2ggb3RoZXIncyBiZWhhdmlvci4gVGhlIGNvbnRyb2xsZXIgaXMgaW5qZWN0YWJsZSAoYW5kIHN1cHBvcnRzIGJyYWNrZXQgbm90YXRpb24pIHdpdGggdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gKlxuICogKiBgJHNjb3BlYCAtIEN1cnJlbnQgc2NvcGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiAqIGAkZWxlbWVudGAgLSBDdXJyZW50IGVsZW1lbnRcbiAqICogYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICogKiBgJHRyYW5zY2x1ZGVgIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZTpcbiAqICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzbG90TmFtZSlgOlxuICogICAgKiBgc2NvcGVgOiAob3B0aW9uYWwpIG92ZXJyaWRlIHRoZSBzY29wZS5cbiAqICAgICogYGNsb25lTGlua2luZ0ZuYDogKG9wdGlvbmFsKSBhcmd1bWVudCB0byBjcmVhdGUgY2xvbmVzIG9mIHRoZSBvcmlnaW5hbCB0cmFuc2NsdWRlZCBjb250ZW50LlxuICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGAgKG9wdGlvbmFsKTpcbiAqICAgICAgICAqIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lTGlua2luZ0ZuYCB3aWxsIGFkZCB0aGUgY2xvbmVkIGVsZW1lbnRzLlxuICogICAgICAgICogZGVmYXVsdDogYCRlbGVtZW50LnBhcmVudCgpYCByZXNwLiBgJGVsZW1lbnRgIGZvciBgdHJhbnNjbHVkZTonZWxlbWVudCdgIHJlc3AuIGB0cmFuc2NsdWRlOnRydWVgLlxuICogICAgICAgICogb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbCBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpXG4gKiAgICAgICAgICBhbmQgd2hlbiB0aGUgYGNsb25lTGlua2luZ0ZuYCBpcyBwYXNzZWQsXG4gKiAgICAgICAgICBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGNyZWF0ZWQgYW5kIGNsb25lZCBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyXG4gKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuXG4gKiAgICAgICAgKiBTZWUgYWxzbyB0aGUgYGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZWAgcHJvcGVydHkuXG4gKiAgICAqIGBzbG90TmFtZWA6IChvcHRpb25hbCkgdGhlIG5hbWUgb2YgdGhlIHNsb3QgdG8gdHJhbnNjbHVkZS4gSWYgZmFsc3kgKGUuZy4gYG51bGxgLCBgdW5kZWZpbmVkYCBvciBgJydgKVxuICogICAgICB0aGVuIHRoZSBkZWZhdWx0IHRyYW5zY2x1c2lvbiBpcyBwcm92aWRlZC5cbiAqICAgIFRoZSBgJHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIGFsc28gaGFzIGEgbWV0aG9kIG9uIGl0LCBgJHRyYW5zY2x1ZGUuaXNTbG90RmlsbGVkKHNsb3ROYW1lKWAsIHdoaWNoIHJldHVybnNcbiAqICAgIGB0cnVlYCBpZiB0aGUgc3BlY2lmaWVkIHNsb3QgY29udGFpbnMgY29udGVudCAoaS5lLiBvbmUgb3IgbW9yZSBET00gbm9kZXMpLlxuICpcbiAqICMjIyMgYHJlcXVpcmVgXG4gKiBSZXF1aXJlIGFub3RoZXIgZGlyZWN0aXZlIGFuZCBpbmplY3QgaXRzIGNvbnRyb2xsZXIgYXMgdGhlIGZvdXJ0aCBhcmd1bWVudCB0byB0aGUgbGlua2luZyBmdW5jdGlvbi4gVGhlXG4gKiBgcmVxdWlyZWAgcHJvcGVydHkgY2FuIGJlIGEgc3RyaW5nLCBhbiBhcnJheSBvciBhbiBvYmplY3Q6XG4gKiAqIGEgKipzdHJpbmcqKiBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gcGFzcyB0byB0aGUgbGlua2luZyBmdW5jdGlvblxuICogKiBhbiAqKmFycmF5KiogY29udGFpbmluZyB0aGUgbmFtZXMgb2YgZGlyZWN0aXZlcyB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUgYXJndW1lbnQgcGFzc2VkIHRvIHRoZVxuICogbGlua2luZyBmdW5jdGlvbiB3aWxsIGJlIGFuIGFycmF5IG9mIGNvbnRyb2xsZXJzIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBuYW1lcyBpbiB0aGUgYHJlcXVpcmVgIHByb3BlcnR5XG4gKiAqIGFuICoqb2JqZWN0Kiogd2hvc2UgcHJvcGVydHkgdmFsdWVzIGFyZSB0aGUgbmFtZXMgb2YgdGhlIGRpcmVjdGl2ZXMgdG8gcGFzcyB0byB0aGUgbGlua2luZyBmdW5jdGlvbi4gVGhlIGFyZ3VtZW50XG4gKiBwYXNzZWQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBhbHNvIGJlIGFuIG9iamVjdCB3aXRoIG1hdGNoaW5nIGtleXMsIHdob3NlIHZhbHVlcyB3aWxsIGhvbGQgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGNvbnRyb2xsZXJzLlxuICpcbiAqIElmIHRoZSBgcmVxdWlyZWAgcHJvcGVydHkgaXMgYW4gb2JqZWN0IGFuZCBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1dGh5LCB0aGVuIHRoZSByZXF1aXJlZCBjb250cm9sbGVycyBhcmVcbiAqIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyIHVzaW5nIHRoZSBrZXlzIG9mIHRoZSBgcmVxdWlyZWAgcHJvcGVydHkuIFRoaXMgYmluZGluZyBvY2N1cnMgYWZ0ZXIgYWxsIHRoZSBjb250cm9sbGVyc1xuICogaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGJ1dCBiZWZvcmUgYCRvbkluaXRgIGlzIGNhbGxlZC5cbiAqIElmIHRoZSBuYW1lIG9mIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGlzIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lICh0aGUga2V5KSwgdGhlIG5hbWUgY2FuIGJlXG4gKiBvbWl0dGVkLiBGb3IgZXhhbXBsZSwgYHtwYXJlbnREaXI6ICdeXid9YCBpcyBlcXVpdmFsZW50IHRvIGB7cGFyZW50RGlyOiAnXl5wYXJlbnREaXInfWAuXG4gKiBTZWUgdGhlIHtAbGluayAkY29tcGlsZVByb3ZpZGVyI2NvbXBvbmVudH0gaGVscGVyIGZvciBhbiBleGFtcGxlIG9mIGhvdyB0aGlzIGNhbiBiZSB1c2VkLlxuICogSWYgbm8gc3VjaCByZXF1aXJlZCBkaXJlY3RpdmUocykgY2FuIGJlIGZvdW5kLCBvciBpZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYSBjb250cm9sbGVyLCB0aGVuIGFuIGVycm9yIGlzXG4gKiByYWlzZWQgKHVubGVzcyBubyBsaW5rIGZ1bmN0aW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIGFyZSBub3QgYmVpbmcgYm91bmQgdG8gdGhlIGRpcmVjdGl2ZVxuICogY29udHJvbGxlciwgaW4gd2hpY2ggY2FzZSBlcnJvciBjaGVja2luZyBpcyBza2lwcGVkKS4gVGhlIG5hbWUgY2FuIGJlIHByZWZpeGVkIHdpdGg6XG4gKlxuICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGA/YCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9yIHBhc3MgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICogKiBgXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgXl5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGA/Xl5gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cywgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJBc2BcbiAqIElkZW50aWZpZXIgbmFtZSBmb3IgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRyb2xsZXIgaW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlLlxuICogVGhpcyBhbGxvd3MgdGhlIGNvbnRyb2xsZXIgdG8gYmUgcmVmZXJlbmNlZCBmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUuIFRoaXMgaXMgZXNwZWNpYWxseVxuICogdXNlZnVsIHdoZW4gYSBkaXJlY3RpdmUgaXMgdXNlZCBhcyBjb21wb25lbnQsIGkuZS4gd2l0aCBhbiBgaXNvbGF0ZWAgc2NvcGUuIEl0J3MgYWxzbyBwb3NzaWJsZVxuICogdG8gdXNlIGl0IGluIGEgZGlyZWN0aXZlIHdpdGhvdXQgYW4gYGlzb2xhdGVgIC8gYG5ld2Agc2NvcGUsIGJ1dCB5b3UgbmVlZCB0byBiZSBhd2FyZSB0aGF0IHRoZVxuICogYGNvbnRyb2xsZXJBc2AgcmVmZXJlbmNlIG1pZ2h0IG92ZXJ3cml0ZSBhIHByb3BlcnR5IHRoYXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIHBhcmVudCBzY29wZS5cbiAqXG4gKlxuICogIyMjIyBgcmVzdHJpY3RgXG4gKiBTdHJpbmcgb2Ygc3Vic2V0IG9mIGBFQUNNYCB3aGljaCByZXN0cmljdHMgdGhlIGRpcmVjdGl2ZSB0byBhIHNwZWNpZmljIGRpcmVjdGl2ZVxuICogZGVjbGFyYXRpb24gc3R5bGUuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0cyAoZWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMpIGFyZSB1c2VkLlxuICpcbiAqICogYEVgIC0gRWxlbWVudCBuYW1lIChkZWZhdWx0KTogYDxteS1kaXJlY3RpdmU+PC9teS1kaXJlY3RpdmU+YFxuICogKiBgQWAgLSBBdHRyaWJ1dGUgKGRlZmF1bHQpOiBgPGRpdiBteS1kaXJlY3RpdmU9XCJleHBcIj48L2Rpdj5gXG4gKiAqIGBDYCAtIENsYXNzOiBgPGRpdiBjbGFzcz1cIm15LWRpcmVjdGl2ZTogZXhwO1wiPjwvZGl2PmBcbiAqICogYE1gIC0gQ29tbWVudDogYDwhLS0gZGlyZWN0aXZlOiBteS1kaXJlY3RpdmUgZXhwIC0tPmBcbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVOYW1lc3BhY2VgXG4gKiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkb2N1bWVudCB0eXBlIHVzZWQgYnkgdGhlIG1hcmt1cCBpbiB0aGUgdGVtcGxhdGUuXG4gKiBBbmd1bGFySlMgbmVlZHMgdGhpcyBpbmZvcm1hdGlvbiBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIGNsb25lZFxuICogaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpciB1c3VhbCBjb250YWluZXJzIGxpa2UgYDxzdmc+YCBhbmQgYDxtYXRoPmAuXG4gKlxuICogKiBgaHRtbGAgLSBBbGwgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIEhUTUwuIFJvb3Qgbm9kZXMgbWF5IGFsc28gYmVcbiAqICAgdG9wLWxldmVsIGVsZW1lbnRzIHN1Y2ggYXMgYDxzdmc+YCBvciBgPG1hdGg+YC5cbiAqICogYHN2Z2AgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIFNWRyBlbGVtZW50cyAoZXhjbHVkaW5nIGA8bWF0aD5gKS5cbiAqICogYG1hdGhgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBNYXRoTUwgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPHN2Zz5gKS5cbiAqXG4gKiBJZiBubyBgdGVtcGxhdGVOYW1lc3BhY2VgIGlzIHNwZWNpZmllZCwgdGhlbiB0aGUgbmFtZXNwYWNlIGlzIGNvbnNpZGVyZWQgdG8gYmUgYGh0bWxgLlxuICpcbiAqICMjIyMgYHRlbXBsYXRlYFxuICogSFRNTCBtYXJrdXAgdGhhdCBtYXk6XG4gKiAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChkZWZhdWx0KS5cbiAqICogUmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpdHNlbGYgKGlmIGByZXBsYWNlYCBpcyB0cnVlIC0gREVQUkVDQVRFRCkuXG4gKiAqIFdyYXAgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChpZiBgdHJhbnNjbHVkZWAgaXMgdHJ1ZSkuXG4gKlxuICogVmFsdWUgbWF5IGJlOlxuICpcbiAqICogQSBzdHJpbmcuIEZvciBleGFtcGxlIGA8ZGl2IHJlZC1vbi1ob3Zlcj57e2RlbGV0ZV9zdHJ9fTwvZGl2PmAuXG4gKiAqIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWBcbiAqICAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJucyBhIHN0cmluZyB2YWx1ZS5cbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVVcmxgXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gYHRlbXBsYXRlYCBidXQgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBmcm9tIHRoZSBzcGVjaWZpZWQgVVJMLCBhc3luY2hyb25vdXNseS5cbiAqXG4gKiBCZWNhdXNlIHRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIHRoZSBjb21waWxlciB3aWxsIHN1c3BlbmQgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlcyBvbiB0aGF0IGVsZW1lbnRcbiAqIGZvciBsYXRlciB3aGVuIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiByZXNvbHZlZC4gIEluIHRoZSBtZWFudGltZSBpdCB3aWxsIGNvbnRpbnVlIHRvIGNvbXBpbGUgYW5kIGxpbmtcbiAqIHNpYmxpbmcgYW5kIHBhcmVudCBlbGVtZW50cyBhcyB0aG91Z2ggdGhpcyBlbGVtZW50IGhhZCBub3QgY29udGFpbmVkIGFueSBkaXJlY3RpdmVzLlxuICpcbiAqIFRoZSBjb21waWxlciBkb2VzIG5vdCBzdXNwZW5kIHRoZSBlbnRpcmUgY29tcGlsYXRpb24gdG8gd2FpdCBmb3IgdGVtcGxhdGVzIHRvIGJlIGxvYWRlZCBiZWNhdXNlIHRoaXNcbiAqIHdvdWxkIHJlc3VsdCBpbiB0aGUgd2hvbGUgYXBwIFwic3RhbGxpbmdcIiB1bnRpbCBhbGwgdGVtcGxhdGVzIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHkgLSBldmVuIGluIHRoZVxuICogY2FzZSB3aGVuIG9ubHkgb25lIGRlZXBseSBuZXN0ZWQgZGlyZWN0aXZlIGhhcyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIFRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIGV2ZW4gaWYgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHByZWxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgJHRlbXBsYXRlQ2FjaGV9XG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGB0ZW1wbGF0ZVVybGAgYXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBVUkwgb3IgYXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d29cbiAqIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJuc1xuICogYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB1cmwuICBJbiBlaXRoZXIgY2FzZSwgdGhlIHRlbXBsYXRlIFVSTCBpcyBwYXNzZWQgdGhyb3VnaCB7QGxpbmtcbiAqICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfS5cbiAqXG4gKlxuICogIyMjIyBgcmVwbGFjZWAgKFsqREVQUkVDQVRFRCohXSwgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZSAtIGkuZS4gdjIuMClcbiAqIHNwZWNpZnkgd2hhdCB0aGUgdGVtcGxhdGUgc2hvdWxkIHJlcGxhY2UuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogKiBgdHJ1ZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICogKiBgZmFsc2VgIC0gdGhlIHRlbXBsYXRlIHdpbGwgcmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKlxuICogVGhlIHJlcGxhY2VtZW50IHByb2Nlc3MgbWlncmF0ZXMgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIC8gY2xhc3NlcyBmcm9tIHRoZSBvbGQgZWxlbWVudCB0byB0aGUgbmV3XG4gKiBvbmUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSN0ZW1wbGF0ZS1leHBhbmRpbmctZGlyZWN0aXZlXG4gKiBEaXJlY3RpdmVzIEd1aWRlfSBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiBUaGVyZSBhcmUgdmVyeSBmZXcgc2NlbmFyaW9zIHdoZXJlIGVsZW1lbnQgcmVwbGFjZW1lbnQgaXMgcmVxdWlyZWQgZm9yIHRoZSBhcHBsaWNhdGlvbiBmdW5jdGlvbixcbiAqIHRoZSBtYWluIG9uZSBiZWluZyByZXVzYWJsZSBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBTVkcgY29udGV4dHNcbiAqIChiZWNhdXNlIFNWRyBkb2Vzbid0IHdvcmsgd2l0aCBjdXN0b20gZWxlbWVudHMgaW4gdGhlIERPTSB0cmVlKS5cbiAqXG4gKiAjIyMjIGB0cmFuc2NsdWRlYFxuICogRXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBhcHBlYXJzIGFuZCBtYWtlIGl0IGF2YWlsYWJsZSB0byB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGNvbnRlbnRzIGFyZSBjb21waWxlZCBhbmQgcHJvdmlkZWQgdG8gdGhlIGRpcmVjdGl2ZSBhcyBhICoqdHJhbnNjbHVzaW9uIGZ1bmN0aW9uKiouIFNlZSB0aGVcbiAqIHtAbGluayAkY29tcGlsZSN0cmFuc2NsdXNpb24gVHJhbnNjbHVzaW9ufSBzZWN0aW9uIGJlbG93LlxuICpcbiAqXG4gKiAjIyMjIGBjb21waWxlYFxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGNvbXBpbGUgZnVuY3Rpb24gZGVhbHMgd2l0aCB0cmFuc2Zvcm1pbmcgdGhlIHRlbXBsYXRlIERPTS4gU2luY2UgbW9zdCBkaXJlY3RpdmVzIGRvIG5vdCBkb1xuICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAqXG4gKiAgICogYHRFbGVtZW50YCAtIHRlbXBsYXRlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIGRlY2xhcmVkLiBJdCBpc1xuICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuXG4gKlxuICogICAqIGB0QXR0cnNgIC0gdGVtcGxhdGUgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWRcbiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlYCAtICBbKkRFUFJFQ0FURUQqIV0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb246IGBmdW5jdGlvbihzY29wZSwgY2xvbmVMaW5raW5nRm4pYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIHRlbXBsYXRlIGluc3RhbmNlIGFuZCB0aGUgbGluayBpbnN0YW5jZSBtYXkgYmUgZGlmZmVyZW50IG9iamVjdHMgaWYgdGhlIHRlbXBsYXRlIGhhc1xuICogYmVlbiBjbG9uZWQuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyAqKm5vdCoqIHNhZmUgdG8gZG8gYW55dGhpbmcgb3RoZXIgdGhhbiBET00gdHJhbnNmb3JtYXRpb25zIHRoYXRcbiAqIGFwcGx5IHRvIGFsbCBjbG9uZWQgRE9NIG5vZGVzIHdpdGhpbiB0aGUgY29tcGlsZSBmdW5jdGlvbi4gU3BlY2lmaWNhbGx5LCBET00gbGlzdGVuZXIgcmVnaXN0cmF0aW9uXG4gKiBzaG91bGQgYmUgZG9uZSBpbiBhIGxpbmtpbmcgZnVuY3Rpb24gcmF0aGVyIHRoYW4gaW4gYSBjb21waWxlIGZ1bmN0aW9uLlxuICogPC9kaXY+XG5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIGNvbXBpbGUgZnVuY3Rpb24gY2Fubm90IGhhbmRsZSBkaXJlY3RpdmVzIHRoYXQgcmVjdXJzaXZlbHkgdXNlIHRoZW1zZWx2ZXMgaW4gdGhlaXJcbiAqIG93biB0ZW1wbGF0ZXMgb3IgY29tcGlsZSBmdW5jdGlvbnMuIENvbXBpbGluZyB0aGVzZSBkaXJlY3RpdmVzIHJlc3VsdHMgaW4gYW4gaW5maW5pdGUgbG9vcCBhbmRcbiAqIHN0YWNrIG92ZXJmbG93IGVycm9ycy5cbiAqXG4gKiBUaGlzIGNhbiBiZSBhdm9pZGVkIGJ5IG1hbnVhbGx5IHVzaW5nICRjb21waWxlIGluIHRoZSBwb3N0TGluayBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgY29tcGlsZVxuICogYSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gYXV0b21hdGljIHRlbXBsYXRlIGNvbXBpbGF0aW9uIHZpYSBgdGVtcGxhdGVgIG9yXG4gKiBgdGVtcGxhdGVVcmxgIGRlY2xhcmF0aW9uIG9yIG1hbnVhbCBjb21waWxhdGlvbiBpbnNpZGUgdGhlIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogVGhlIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBhcyBpdFxuICogICBlLmcuIGRvZXMgbm90IGtub3cgYWJvdXQgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgdXNlIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkXG4gKiAgIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gKiA8L2Rpdj5cblxuICogQSBjb21waWxlIGZ1bmN0aW9uIGNhbiBoYXZlIGEgcmV0dXJuIHZhbHVlIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QuXG4gKlxuICogKiByZXR1cm5pbmcgYSAocG9zdC1saW5rKSBmdW5jdGlvbiAtIGlzIGVxdWl2YWxlbnQgdG8gcmVnaXN0ZXJpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdmlhIHRoZVxuICogICBgbGlua2AgcHJvcGVydHkgb2YgdGhlIGNvbmZpZyBvYmplY3Qgd2hlbiB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBlbXB0eS5cbiAqXG4gKiAqIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBmdW5jdGlvbihzKSByZWdpc3RlcmVkIHZpYSBgcHJlYCBhbmQgYHBvc3RgIHByb3BlcnRpZXMgLSBhbGxvd3MgeW91IHRvXG4gKiAgIGNvbnRyb2wgd2hlbiBhIGxpbmtpbmcgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UuIFNlZSBpbmZvIGFib3V0XG4gKiAgIHByZS1saW5raW5nIGFuZCBwb3N0LWxpbmtpbmcgZnVuY3Rpb25zIGJlbG93LlxuICpcbiAqXG4gKiAjIyMjIGBsaW5rYFxuICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIG9ubHkgaWYgdGhlIGBjb21waWxlYCBwcm9wZXJ0eSBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBgYGBqc1xuICogICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBsaW5rIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyBET00gbGlzdGVuZXJzIGFzIHdlbGwgYXMgdXBkYXRpbmcgdGhlIERPTS4gSXQgaXNcbiAqIGV4ZWN1dGVkIGFmdGVyIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBjbG9uZWQuIFRoaXMgaXMgd2hlcmUgbW9zdCBvZiB0aGUgZGlyZWN0aXZlIGxvZ2ljIHdpbGwgYmVcbiAqIHB1dC5cbiAqXG4gKiAgICogYHNjb3BlYCAtIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSAtIFRoZSBzY29wZSB0byBiZSB1c2VkIGJ5IHRoZVxuICogICAgIGRpcmVjdGl2ZSBmb3IgcmVnaXN0ZXJpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXN9LlxuICpcbiAqICAgKiBgaUVsZW1lbnRgIC0gaW5zdGFuY2UgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaXMgdG8gYmUgdXNlZC4gSXQgaXMgc2FmZSB0b1xuICogICAgIG1hbmlwdWxhdGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBlbGVtZW50IG9ubHkgaW4gYHBvc3RMaW5rYCBmdW5jdGlvbiBzaW5jZSB0aGUgY2hpbGRyZW4gaGF2ZVxuICogICAgIGFscmVhZHkgYmVlbiBsaW5rZWQuXG4gKlxuICogICAqIGBpQXR0cnNgIC0gaW5zdGFuY2UgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWRcbiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgbGlua2luZyBmdW5jdGlvbnMuXG4gKlxuICogICAqIGBjb250cm9sbGVyYCAtIHRoZSBkaXJlY3RpdmUncyByZXF1aXJlZCBjb250cm9sbGVyIGluc3RhbmNlKHMpIC0gSW5zdGFuY2VzIGFyZSBzaGFyZWRcbiAqICAgICBhbW9uZyBhbGwgZGlyZWN0aXZlcywgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgY29udHJvbGxlcnMgYXMgYSBjb21tdW5pY2F0aW9uXG4gKiAgICAgY2hhbm5lbC4gVGhlIGV4YWN0IHZhbHVlIGRlcGVuZHMgb24gdGhlIGRpcmVjdGl2ZSdzIGByZXF1aXJlYCBwcm9wZXJ0eTpcbiAqICAgICAgICogbm8gY29udHJvbGxlcihzKSByZXF1aXJlZDogdGhlIGRpcmVjdGl2ZSdzIG93biBjb250cm9sbGVyLCBvciBgdW5kZWZpbmVkYCBpZiBpdCBkb2Vzbid0IGhhdmUgb25lXG4gKiAgICAgICAqIGBzdHJpbmdgOiB0aGUgY29udHJvbGxlciBpbnN0YW5jZVxuICogICAgICAgKiBgYXJyYXlgOiBhcnJheSBvZiBjb250cm9sbGVyIGluc3RhbmNlc1xuICpcbiAqICAgICBJZiBhIHJlcXVpcmVkIGNvbnRyb2xsZXIgY2Fubm90IGJlIGZvdW5kLCBhbmQgaXQgaXMgb3B0aW9uYWwsIHRoZSBpbnN0YW5jZSBpcyBgbnVsbGAsXG4gKiAgICAgb3RoZXJ3aXNlIHRoZSB7QGxpbmsgZXJyb3I6JGNvbXBpbGU6Y3RyZXEgTWlzc2luZyBSZXF1aXJlZCBDb250cm9sbGVyfSBlcnJvciBpcyB0aHJvd24uXG4gKlxuICogICAgIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gcmVxdWlyZSB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIgLSBpdCB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIGxpa2VcbiAqICAgICBhbnkgb3RoZXIgY29udHJvbGxlci5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVGbmAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogICAgIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGAkdHJhbnNjbHVkZWAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycyxcbiAqICAgICBzZWUge0BsaW5rIG5nLiRjb21waWxlIy1jb250cm9sbGVyLSB0aGUgY29udHJvbGxlciBzZWN0aW9uIGZvciBkZXRhaWxzfS5cbiAqICAgICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC5cbiAqXG4gKiAjIyMjIFByZS1saW5raW5nIGZ1bmN0aW9uXG4gKlxuICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLiBOb3Qgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gc2luY2UgdGhlXG4gKiBjb21waWxlciBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgZmFpbCB0byBsb2NhdGUgdGhlIGNvcnJlY3QgZWxlbWVudHMgZm9yIGxpbmtpbmcuXG4gKlxuICogIyMjIyBQb3N0LWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBhZnRlciB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGxpbmtlZC5cbiAqXG4gKiBOb3RlIHRoYXQgY2hpbGQgZWxlbWVudHMgdGhhdCBjb250YWluIGB0ZW1wbGF0ZVVybGAgZGlyZWN0aXZlcyB3aWxsIG5vdCBoYXZlIGJlZW4gY29tcGlsZWRcbiAqIGFuZCBsaW5rZWQgc2luY2UgdGhleSBhcmUgd2FpdGluZyBmb3IgdGhlaXIgdGVtcGxhdGUgdG8gbG9hZCBhc3luY2hyb25vdXNseSBhbmQgdGhlaXIgb3duXG4gKiBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlbiBzdXNwZW5kZWQgdW50aWwgdGhhdCBvY2N1cnMuXG4gKlxuICogSXQgaXMgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gaW4gdGhlIHBvc3QtbGlua2luZyBmdW5jdGlvbiBvbiBlbGVtZW50cyB0aGF0IGFyZSBub3Qgd2FpdGluZ1xuICogZm9yIHRoZWlyIGFzeW5jIHRlbXBsYXRlcyB0byBiZSByZXNvbHZlZC5cbiAqXG4gKlxuICogIyMjIFRyYW5zY2x1c2lvblxuICpcbiAqIFRyYW5zY2x1c2lvbiBpcyB0aGUgcHJvY2VzcyBvZiBleHRyYWN0aW5nIGEgY29sbGVjdGlvbiBvZiBET00gZWxlbWVudHMgZnJvbSBvbmUgcGFydCBvZiB0aGUgRE9NIGFuZFxuICogY29weWluZyB0aGVtIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgRE9NLCB3aGlsZSBtYWludGFpbmluZyB0aGVpciBjb25uZWN0aW9uIHRvIHRoZSBvcmlnaW5hbCBBbmd1bGFySlNcbiAqIHNjb3BlIGZyb20gd2hlcmUgdGhleSB3ZXJlIHRha2VuLlxuICpcbiAqIFRyYW5zY2x1c2lvbiBpcyB1c2VkIChvZnRlbiB3aXRoIHtAbGluayBuZ1RyYW5zY2x1ZGV9KSB0byBpbnNlcnQgdGhlXG4gKiBvcmlnaW5hbCBjb250ZW50cyBvZiBhIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaW50byBhIHNwZWNpZmllZCBwbGFjZSBpbiB0aGUgdGVtcGxhdGUgb2YgdGhlIGRpcmVjdGl2ZS5cbiAqIFRoZSBiZW5lZml0IG9mIHRyYW5zY2x1c2lvbiwgb3ZlciBzaW1wbHkgbW92aW5nIHRoZSBET00gZWxlbWVudHMgbWFudWFsbHksIGlzIHRoYXQgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgb24gdGhlIHNjb3BlIGZyb20gd2hpY2ggaXQgd2FzIHRha2VuLCBldmVuIGlmIHRoZSBkaXJlY3RpdmVcbiAqIGhhcyBpc29sYXRlZCBzY29wZS5cbiAqIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNjcmVhdGluZy1hLWRpcmVjdGl2ZS10aGF0LXdyYXBzLW90aGVyLWVsZW1lbnRzIERpcmVjdGl2ZXMgR3VpZGV9LlxuICpcbiAqIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIHRoZSB3aWRnZXQgdG8gaGF2ZSBwcml2YXRlIHN0YXRlIGZvciBpdHMgdGVtcGxhdGUsIHdoaWxlIHRoZSB0cmFuc2NsdWRlZFxuICogY29udGVudCBoYXMgYWNjZXNzIHRvIGl0cyBvcmlnaW5hdGluZyBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFdoZW4gdGVzdGluZyBhbiBlbGVtZW50IHRyYW5zY2x1ZGUgZGlyZWN0aXZlIHlvdSBtdXN0IG5vdCBwbGFjZSB0aGUgZGlyZWN0aXZlIGF0IHRoZSByb290IG9mIHRoZVxuICogRE9NIGZyYWdtZW50IHRoYXQgaXMgYmVpbmcgY29tcGlsZWQuIFNlZSB7QGxpbmsgZ3VpZGUvdW5pdC10ZXN0aW5nI3Rlc3RpbmctdHJhbnNjbHVzaW9uLWRpcmVjdGl2ZXNcbiAqIFRlc3RpbmcgVHJhbnNjbHVzaW9uIERpcmVjdGl2ZXN9LlxuICogPC9kaXY+XG4gKlxuICogVGhlcmUgYXJlIHRocmVlIGtpbmRzIG9mIHRyYW5zY2x1c2lvbiBkZXBlbmRpbmcgdXBvbiB3aGV0aGVyIHlvdSB3YW50IHRvIHRyYW5zY2x1ZGUganVzdCB0aGUgY29udGVudHMgb2YgdGhlXG4gKiBkaXJlY3RpdmUncyBlbGVtZW50LCB0aGUgZW50aXJlIGVsZW1lbnQgb3IgbXVsdGlwbGUgcGFydHMgb2YgdGhlIGVsZW1lbnQgY29udGVudHM6XG4gKlxuICogKiBgdHJ1ZWAgLSB0cmFuc2NsdWRlIHRoZSBjb250ZW50IChpLmUuIHRoZSBjaGlsZCBub2Rlcykgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGAnZWxlbWVudCdgIC0gdHJhbnNjbHVkZSB0aGUgd2hvbGUgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaW5jbHVkaW5nIGFueSBkaXJlY3RpdmVzIG9uIHRoaXNcbiAqICAgZWxlbWVudCB0aGF0IGRlZmluZWQgYXQgYSBsb3dlciBwcmlvcml0eSB0aGFuIHRoaXMgZGlyZWN0aXZlLiBXaGVuIHVzZWQsIHRoZSBgdGVtcGxhdGVgXG4gKiAgIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gKiAqICoqYHsuLi59YCAoYW4gb2JqZWN0IGhhc2gpOioqIC0gbWFwIGVsZW1lbnRzIG9mIHRoZSBjb250ZW50IG9udG8gdHJhbnNjbHVzaW9uIFwic2xvdHNcIiBpbiB0aGUgdGVtcGxhdGUuXG4gKlxuICogKipNdWx0LXNsb3QgdHJhbnNjbHVzaW9uKiogaXMgZGVjbGFyZWQgYnkgcHJvdmlkaW5nIGFuIG9iamVjdCBmb3IgdGhlIGB0cmFuc2NsdWRlYCBwcm9wZXJ0eS5cbiAqXG4gKiBUaGlzIG9iamVjdCBpcyBhIG1hcCB3aGVyZSB0aGUga2V5cyBhcmUgdGhlIG5hbWUgb2YgdGhlIHNsb3QgdG8gZmlsbCBhbmQgdGhlIHZhbHVlIGlzIGFuIGVsZW1lbnQgc2VsZWN0b3JcbiAqIHVzZWQgdG8gbWF0Y2ggdGhlIEhUTUwgdG8gdGhlIHNsb3QuIFRoZSBlbGVtZW50IHNlbGVjdG9yIHNob3VsZCBiZSBpbiBub3JtYWxpemVkIGZvcm0gKGUuZy4gYG15RWxlbWVudGApXG4gKiBhbmQgd2lsbCBtYXRjaCB0aGUgc3RhbmRhcmQgZWxlbWVudCB2YXJpYW50cyAoZS5nLiBgbXktZWxlbWVudGAsIGBteTplbGVtZW50YCwgYGRhdGEtbXktZWxlbWVudGAsIGV0YykuXG4gKlxuICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gY2hlY2sgb3V0IHRoZSBndWlkZSBvbiB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI21hdGNoaW5nLWRpcmVjdGl2ZXMgTWF0Y2hpbmcgRGlyZWN0aXZlc31cbiAqXG4gKiBJZiB0aGUgZWxlbWVudCBzZWxlY3RvciBpcyBwcmVmaXhlZCB3aXRoIGEgYD9gIHRoZW4gdGhhdCBzbG90IGlzIG9wdGlvbmFsLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGUgdHJhbnNjbHVkZSBvYmplY3QgYHsgc2xvdEE6ICc/bXlDdXN0b21FbGVtZW50JyB9YCBtYXBzIGA8bXktY3VzdG9tLWVsZW1lbnQ+YCBlbGVtZW50cyB0b1xuICogdGhlIGBzbG90QWAgc2xvdCwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkIHZpYSB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvbiBvciB2aWEgdGhlIHtAbGluayBuZ1RyYW5zY2x1ZGV9IGRpcmVjdGl2ZS5cbiAqXG4gKiBTbG90cyB0aGF0IGFyZSBub3QgbWFya2VkIGFzIG9wdGlvbmFsIChgP2ApIHdpbGwgdHJpZ2dlciBhIGNvbXBpbGUgdGltZSBlcnJvciBpZiB0aGVyZSBhcmUgbm8gbWF0Y2hpbmcgZWxlbWVudHNcbiAqIGluIHRoZSB0cmFuc2NsdWRlIGNvbnRlbnQuIElmIHlvdSB3aXNoIHRvIGtub3cgaWYgYW4gb3B0aW9uYWwgc2xvdCB3YXMgZmlsbGVkIHdpdGggY29udGVudCwgdGhlbiB5b3UgY2FuIGNhbGxcbiAqIGAkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpYCBvbiB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBwYXNzZWQgdG8gdGhlIGRpcmVjdGl2ZSdzIGxpbmsgZnVuY3Rpb24gYW5kXG4gKiBpbmplY3RhYmxlIGludG8gdGhlIGRpcmVjdGl2ZSdzIGNvbnRyb2xsZXIuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIEZ1bmN0aW9uc1xuICpcbiAqIFdoZW4gYSBkaXJlY3RpdmUgcmVxdWVzdHMgdHJhbnNjbHVzaW9uLCB0aGUgY29tcGlsZXIgZXh0cmFjdHMgaXRzIGNvbnRlbnRzIGFuZCBwcm92aWRlcyBhICoqdHJhbnNjbHVzaW9uXG4gKiBmdW5jdGlvbioqIHRvIHRoZSBkaXJlY3RpdmUncyBgbGlua2AgZnVuY3Rpb24gYW5kIGBjb250cm9sbGVyYC4gVGhpcyB0cmFuc2NsdXNpb24gZnVuY3Rpb24gaXMgYSBzcGVjaWFsXG4gKiAqKmxpbmtpbmcgZnVuY3Rpb24qKiB0aGF0IHdpbGwgcmV0dXJuIHRoZSBjb21waWxlZCBjb250ZW50cyBsaW5rZWQgdG8gYSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBJZiB5b3UgYXJlIGp1c3QgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdGhlbiB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGZ1bmN0aW9uLCBzaW5jZVxuICogbmdUcmFuc2NsdWRlIHdpbGwgZGVhbCB3aXRoIGl0IGZvciB1cy5cbiAqIDwvZGl2PlxuICpcbiAqIElmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGNvbnRyb2wgdGhlIGluc2VydGlvbiBhbmQgcmVtb3ZhbCBvZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpbiB5b3VyIGRpcmVjdGl2ZVxuICogdGhlbiB5b3UgbXVzdCB1c2UgdGhpcyB0cmFuc2NsdWRlIGZ1bmN0aW9uLiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgYSBqcUxpdGUvSlF1ZXJ5XG4gKiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgY29tcGlsZWQgRE9NLCB3aGljaCBpcyBsaW5rZWQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdXNpb24gZnVuY3Rpb24geW91IGNhbiBwYXNzIGluIGEgKipjbG9uZSBhdHRhY2ggZnVuY3Rpb24qKi4gVGhpcyBmdW5jdGlvbiBhY2NlcHRzXG4gKiB0d28gcGFyYW1ldGVycywgYGZ1bmN0aW9uKGNsb25lLCBzY29wZSkgeyAuLi4gfWAsIHdoZXJlIHRoZSBgY2xvbmVgIGlzIGEgZnJlc2ggY29tcGlsZWQgY29weSBvZiB5b3VyIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGFuZCB0aGUgYHNjb3BlYCBpcyB0aGUgbmV3bHkgY3JlYXRlZCB0cmFuc2NsdXNpb24gc2NvcGUsIHdoaWNoIHRoZSBjbG9uZSB3aWxsIGJlIGxpbmtlZCB0by5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IEFsd2F5cyBwcm92aWRlIGEgYGNsb25lRm5gIChjbG9uZSBhdHRhY2ggZnVuY3Rpb24pIHdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uXG4gKiBzaW5jZSB5b3UgdGhlbiBnZXQgYSBmcmVzaCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgRE9NIGFuZCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogSXQgaXMgbm9ybWFsIHByYWN0aWNlIHRvIGF0dGFjaCB5b3VyIHRyYW5zY2x1ZGVkIGNvbnRlbnQgKGBjbG9uZWApIHRvIHRoZSBET00gaW5zaWRlIHlvdXIgKipjbG9uZVxuICogYXR0YWNoIGZ1bmN0aW9uKio6XG4gKlxuICogYGBganNcbiAqIHZhciB0cmFuc2NsdWRlZENvbnRlbnQsIHRyYW5zY2x1c2lvblNjb3BlO1xuICpcbiAqICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBzY29wZSkge1xuICogICBlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gKiAgIHRyYW5zY2x1ZGVkQ29udGVudCA9IGNsb25lO1xuICogICB0cmFuc2NsdXNpb25TY29wZSA9IHNjb3BlO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBMYXRlciwgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGZyb20geW91ciBET00gdGhlbiB5b3Ugc2hvdWxkIGFsc28gZGVzdHJveSB0aGVcbiAqIGFzc29jaWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2NsdWRlZENvbnRlbnQucmVtb3ZlKCk7XG4gKiB0cmFuc2NsdXNpb25TY29wZS4kZGVzdHJveSgpO1xuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBpZiB5b3UgaW50ZW5kIHRvIGFkZCBhbmQgcmVtb3ZlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgbWFudWFsbHkgaW4geW91ciBkaXJlY3RpdmVcbiAqIChieSBjYWxsaW5nIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRvIGdldCB0aGUgRE9NIGFuZCBjYWxsaW5nIGBlbGVtZW50LnJlbW92ZSgpYCB0byByZW1vdmUgaXQpLFxuICogdGhlbiB5b3UgYXJlIGFsc28gcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgYCRkZXN0cm95YCBvbiB0aGUgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogVGhlIGJ1aWx0LWluIERPTSBtYW5pcHVsYXRpb24gZGlyZWN0aXZlcywgc3VjaCBhcyB7QGxpbmsgbmdJZn0sIHtAbGluayBuZ1N3aXRjaH0gYW5kIHtAbGluayBuZ1JlcGVhdH1cbiAqIGF1dG9tYXRpY2FsbHkgZGVzdHJveSB0aGVpciB0cmFuc2NsdWRlZCBjbG9uZXMgYXMgbmVjZXNzYXJ5IHNvIHlvdSBkbyBub3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGlmXG4gKiB5b3UgYXJlIHNpbXBseSB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0byBpbmplY3QgdGhlIHRyYW5zY2x1c2lvbiBpbnRvIHlvdXIgZGlyZWN0aXZlLlxuICpcbiAqXG4gKiAjIyMjIFRyYW5zY2x1c2lvbiBTY29wZXNcbiAqXG4gKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgRE9NIGZyYWdtZW50IHRoYXQgaXMgcHJlLWJvdW5kIHRvIGEgKip0cmFuc2NsdXNpb25cbiAqIHNjb3BlKiouIFRoaXMgc2NvcGUgaXMgc3BlY2lhbCwgaW4gdGhhdCBpdCBpcyBhIGNoaWxkIG9mIHRoZSBkaXJlY3RpdmUncyBzY29wZSAoYW5kIHNvIGdldHMgZGVzdHJveWVkXG4gKiB3aGVuIHRoZSBkaXJlY3RpdmUncyBzY29wZSBnZXRzIGRlc3Ryb3llZCkgYnV0IGl0IGluaGVyaXRzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzY29wZSBmcm9tIHdoaWNoIGl0XG4gKiB3YXMgdGFrZW4uXG4gKlxuICogRm9yIGV4YW1wbGUgY29uc2lkZXIgYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbiBhbmQgaXNvbGF0ZWQgc2NvcGUuIFRoZSBET00gaGllcmFyY2h5IG1pZ2h0IGxvb2tcbiAqIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWFwcD5cbiAqICAgPGRpdiBpc29sYXRlPlxuICogICAgIDxkaXYgdHJhbnNjbHVzaW9uPlxuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlIGAkcGFyZW50YCBzY29wZSBoaWVyYXJjaHkgd2lsbCBsb29rIGxpa2UgdGhpczpcbiAqXG4gICBgYGBcbiAgIC0gJHJvb3RTY29wZVxuICAgICAtIGlzb2xhdGVcbiAgICAgICAtIHRyYW5zY2x1c2lvblxuICAgYGBgXG4gKlxuICogYnV0IHRoZSBzY29wZXMgd2lsbCBpbmhlcml0IHByb3RvdHlwaWNhbGx5IGZyb20gZGlmZmVyZW50IHNjb3BlcyB0byB0aGVpciBgJHBhcmVudGAuXG4gKlxuICAgYGBgXG4gICAtICRyb290U2NvcGVcbiAgICAgLSB0cmFuc2NsdXNpb25cbiAgIC0gaXNvbGF0ZVxuICAgYGBgXG4gKlxuICpcbiAqICMjIyBBdHRyaWJ1dGVzXG4gKlxuICogVGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyBBdHRyaWJ1dGVzfSBvYmplY3QgLSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlXG4gKiBgbGluaygpYCBvciBgY29tcGlsZSgpYCBmdW5jdGlvbnMuIEl0IGhhcyBhIHZhcmlldHkgb2YgdXNlcy5cbiAqXG4gKiAqICpBY2Nlc3Npbmcgbm9ybWFsaXplZCBhdHRyaWJ1dGUgbmFtZXM6KiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6XG4gKiAgICduZzpiaW5kJywgYGRhdGEtbmctYmluZGAsIG9yICd4LW5nLWJpbmQnLiBUaGUgYXR0cmlidXRlcyBvYmplY3QgYWxsb3dzIGZvciBub3JtYWxpemVkIGFjY2Vzc1xuICogICB0byB0aGUgYXR0cmlidXRlcy5cbiAqXG4gKiAqICpEaXJlY3RpdmUgaW50ZXItY29tbXVuaWNhdGlvbjoqIEFsbCBkaXJlY3RpdmVzIHNoYXJlIHRoZSBzYW1lIGluc3RhbmNlIG9mIHRoZSBhdHRyaWJ1dGVzXG4gKiAgIG9iamVjdCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhcyBpbnRlciBkaXJlY3RpdmVcbiAqICAgY29tbXVuaWNhdGlvbi5cbiAqXG4gKiAqICpTdXBwb3J0cyBpbnRlcnBvbGF0aW9uOiogSW50ZXJwb2xhdGlvbiBhdHRyaWJ1dGVzIGFyZSBhc3NpZ25lZCB0byB0aGUgYXR0cmlidXRlIG9iamVjdFxuICogICBhbGxvd2luZyBvdGhlciBkaXJlY3RpdmVzIHRvIHJlYWQgdGhlIGludGVycG9sYXRlZCB2YWx1ZS5cbiAqXG4gKiAqICpPYnNlcnZpbmcgaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZXM6KiBVc2UgYCRvYnNlcnZlYCB0byBvYnNlcnZlIHRoZSB2YWx1ZSBjaGFuZ2VzIG9mIGF0dHJpYnV0ZXNcbiAqICAgdGhhdCBjb250YWluIGludGVycG9sYXRpb24gKGUuZy4gYHNyYz1cInt7YmFyfX1cImApLiBOb3Qgb25seSBpcyB0aGlzIHZlcnkgZWZmaWNpZW50IGJ1dCBpdCdzIGFsc29cbiAqICAgdGhlIG9ubHkgd2F5IHRvIGVhc2lseSBnZXQgdGhlIGFjdHVhbCB2YWx1ZSBiZWNhdXNlIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZSB0aGUgaW50ZXJwb2xhdGlvblxuICogICBoYXNuJ3QgYmVlbiBldmFsdWF0ZWQgeWV0IGFuZCBzbyB0aGUgdmFsdWUgaXMgYXQgdGhpcyB0aW1lIHNldCB0byBgdW5kZWZpbmVkYC5cbiAqXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gbGlua2luZ0ZuKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG4gKiAgIC8vIGdldCB0aGUgYXR0cmlidXRlIHZhbHVlXG4gKiAgIGNvbnNvbGUubG9nKGF0dHJzLm5nTW9kZWwpO1xuICpcbiAqICAgLy8gY2hhbmdlIHRoZSBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJHNldCgnbmdNb2RlbCcsICduZXcgdmFsdWUnKTtcbiAqXG4gKiAgIC8vIG9ic2VydmUgY2hhbmdlcyB0byBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlXG4gKiAgIGF0dHJzLiRvYnNlcnZlKCduZ01vZGVsJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICBjb25zb2xlLmxvZygnbmdNb2RlbCBoYXMgY2hhbmdlZCB2YWx1ZSB0byAnICsgdmFsdWUpO1xuICogICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlKio6IFR5cGljYWxseSBkaXJlY3RpdmVzIGFyZSByZWdpc3RlcmVkIHdpdGggYG1vZHVsZS5kaXJlY3RpdmVgLiBUaGUgZXhhbXBsZSBiZWxvdyBpc1xuICogdG8gaWxsdXN0cmF0ZSBob3cgYCRjb21waWxlYCB3b3Jrcy5cbiAqIDwvZGl2PlxuICpcbiA8ZXhhbXBsZSBtb2R1bGU9XCJjb21waWxlRXhhbXBsZVwiIG5hbWU9XCJjb21waWxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZUV4YW1wbGUnLCBbXSwgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZVxuICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnXG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCdjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRldmFsKGF0dHJzLmNvbXBpbGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlICdjb21waWxlJyBleHByZXNzaW9uIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET01cbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHNjb3BlLlxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIG9ubHkgY29tcGlsZSAuY2hpbGROb2RlcyBzbyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzXG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNvbnRyb2xsZXIoJ0dyZWV0ZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7XG4gICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JztcbiAgICAgIH1dKTtcbiAgICA8L3NjcmlwdD5cbiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHcmVldGVyQ29udHJvbGxlclwiPlxuICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPiA8YnIvPlxuICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwiaHRtbFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICA8ZGl2IGNvbXBpbGU9XCJodG1sXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgdmFyIHRleHRhcmVhID0gJCgndGV4dGFyZWEnKTtcbiAgICAgICB2YXIgb3V0cHV0ID0gJCgnZGl2W2NvbXBpbGVdJyk7XG4gICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLlxuICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7XG4gICAgICAgdGV4dGFyZWEuY2xlYXIoKTtcbiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7XG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7XG4gICAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cblxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyAtIERFUFJFQ0FURUQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogKipOb3RlOioqIFBhc3NpbmcgYSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdG8gdGhlICRjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gd2lsbCBub3QgdXNlIHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHBhc3MgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gYXMgYVxuICogICBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4UHJpb3JpdHkgb25seSBhcHBseSBkaXJlY3RpdmVzIGxvd2VyIHRoYW4gZ2l2ZW4gcHJpb3JpdHkgKE9ubHkgZWZmZWN0cyB0aGVcbiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbilcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzY29wZSwgY2xvbmVBdHRhY2hGbj0sIG9wdGlvbnM9KX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZVxuICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6XG4gKlxuICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uXG4gKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGVcbiAqICBgdGVtcGxhdGVgIGFuZCBjYWxsIHRoZSBgY2xvbmVBdHRhY2hGbmAgZnVuY3Rpb24gYWxsb3dpbmcgdGhlIGNhbGxlciB0byBhdHRhY2ggdGhlXG4gKiAgY2xvbmVkIGVsZW1lbnRzIHRvIHRoZSBET00gZG9jdW1lbnQgYXQgdGhlIGFwcHJvcHJpYXRlIHBsYWNlLiBUaGUgYGNsb25lQXR0YWNoRm5gIGlzXG4gKiAgY2FsbGVkIGFzOiA8YnIvPiBgY2xvbmVBdHRhY2hGbihjbG9uZWRFbGVtZW50LCBzY29wZSlgIHdoZXJlOlxuICpcbiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLlxuICogICAgICAqIGBzY29wZWAgLSBpcyB0aGUgY3VycmVudCBzY29wZSB3aXRoIHdoaWNoIHRoZSBsaW5raW5nIGZ1bmN0aW9uIGlzIHdvcmtpbmcgd2l0aC5cbiAqXG4gKiAgKiBgb3B0aW9uc2AgLSBBbiBvcHRpb25hbCBvYmplY3QgaGFzaCB3aXRoIGxpbmtpbmcgb3B0aW9ucy4gSWYgYG9wdGlvbnNgIGlzIHByb3ZpZGVkLCB0aGVuIHRoZSBmb2xsb3dpbmdcbiAqICBrZXlzIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgbGlua2luZyBiZWhhdmlvcjpcbiAqXG4gKiAgICAgICogYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCAtIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIG1hZGUgYXZhaWxhYmxlIHRvXG4gKiAgICAgICAgZGlyZWN0aXZlczsgaWYgZ2l2ZW4sIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGxpbmsgZnVuY3Rpb25zIG9mXG4gKiAgICAgICAgZGlyZWN0aXZlcyBmb3VuZCBpbiBgZWxlbWVudGAgZHVyaW5nIGNvbXBpbGF0aW9uLlxuICogICAgICAqIGB0cmFuc2NsdWRlQ29udHJvbGxlcnNgIC0gYW4gb2JqZWN0IGhhc2ggd2l0aCBrZXlzIHRoYXQgbWFwIGNvbnRyb2xsZXIgbmFtZXNcbiAqICAgICAgICB0byBhIGhhc2ggd2l0aCB0aGUga2V5IGBpbnN0YW5jZWAsIHdoaWNoIG1hcHMgdG8gdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2U7XG4gKiAgICAgICAgaWYgZ2l2ZW4sIGl0IHdpbGwgbWFrZSB0aGUgY29udHJvbGxlcnMgYXZhaWxhYmxlIHRvIGRpcmVjdGl2ZXMgb24gdGhlIGNvbXBpbGVOb2RlOlxuICogICAgICAgIGBgYFxuICogICAgICAgIHtcbiAqICAgICAgICAgIHBhcmVudDoge1xuICogICAgICAgICAgICBpbnN0YW5jZTogcGFyZW50Q29udHJvbGxlckluc3RhbmNlXG4gKiAgICAgICAgICB9XG4gKiAgICAgICAgfVxuICogICAgICAgIGBgYFxuICogICAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAtIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lQXR0YWNoRm5gIHdpbGwgYWRkXG4gKiAgICAgICAgdGhlIGNsb25lZCBlbGVtZW50czsgb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbFxuICogICAgICAgIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cykuIFNlZSBhbHNvIHRoZSBkaXJlY3RpdmUuY29udHJvbGxlciBwcm9wZXJ0eS5cbiAqXG4gKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsXG4gKiBlbGVtZW50IHBhc3NlZCBpbiwgb3IgdGhlIGNsb25lIG9mIHRoZSBlbGVtZW50IGlmIHRoZSBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQuXG4gKlxuICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieVxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OlxuICpcbiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKVxuICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLlxuICogICBgYGBqc1xuICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7XG4gKiAgIGBgYFxuICpcbiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsXG4gKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJblxuICogICB0aGlzIGNhc2UsIHlvdSBjYW4gYWNjZXNzIHRoZSBjbG9uZSB2aWEgdGhlIGNsb25lQXR0YWNoRm46XG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLFxuICogICAgICAgICBzY29wZSA9IC4uLi47XG4gKlxuICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHtcbiAqICAgICAgIC8vYXR0YWNoIHRoZSBjbG9uZSB0byBET00gZG9jdW1lbnQgYXQgdGhlIHJpZ2h0IHBsYWNlXG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vbm93IHdlIGhhdmUgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgRE9NIHZpYSBgY2xvbmVkRWxlbWVudGBcbiAqICAgYGBgXG4gKlxuICpcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuXG4gKlxuICogQGtub3duSXNzdWVcbiAqXG4gKiAjIyMgRG91YmxlIENvbXBpbGF0aW9uXG4gKlxuICAgRG91YmxlIGNvbXBpbGF0aW9uIG9jY3VycyB3aGVuIGFuIGFscmVhZHkgY29tcGlsZWQgcGFydCBvZiB0aGUgRE9NIGdldHNcbiAgIGNvbXBpbGVkIGFnYWluLiBUaGlzIGlzIGFuIHVuZGVzaXJlZCBlZmZlY3QgYW5kIGNhbiBsZWFkIHRvIG1pc2JlaGF2aW5nIGRpcmVjdGl2ZXMsIHBlcmZvcm1hbmNlIGlzc3VlcyxcbiAgIGFuZCBtZW1vcnkgbGVha3MuIFJlZmVyIHRvIHRoZSBDb21waWxlciBHdWlkZSB7QGxpbmsgZ3VpZGUvY29tcGlsZXIjZG91YmxlLWNvbXBpbGF0aW9uLWFuZC1ob3ctdG8tYXZvaWQtaXRcbiAgIHNlY3Rpb24gb24gZG91YmxlIGNvbXBpbGF0aW9ufSBmb3IgYW4gaW4tZGVwdGggZXhwbGFuYXRpb24gYW5kIHdheXMgdG8gYXZvaWQgaXQuXG4gKlxuICovXG5cbnZhciAkY29tcGlsZU1pbkVyciA9IG1pbkVycignJGNvbXBpbGUnKTtcblxuZnVuY3Rpb24gVU5JTklUSUFMSVpFRF9WQUxVRSgpIHt9XG52YXIgX1VOSU5JVElBTElaRURfVkFMVUUgPSBuZXcgVU5JTklUSUFMSVpFRF9WQUxVRSgpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbXBpbGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICovXG4kQ29tcGlsZVByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJywgJyQkc2FuaXRpemVVcmlQcm92aWRlciddO1xuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkQ29tcGlsZVByb3ZpZGVyKCRwcm92aWRlLCAkJHNhbml0aXplVXJpUHJvdmlkZXIpIHtcbiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSxcbiAgICAgIFN1ZmZpeCA9ICdEaXJlY3RpdmUnLFxuICAgICAgQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQID0gL15cXHMqZGlyZWN0aXZlOlxccyooW1xcdy1dKylcXHMrKC4qKSQvLFxuICAgICAgQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCA9IC8oKFtcXHctXSspKD86OihbXjtdKykpPzs/KS8sXG4gICAgICBBTExfT1JfTk9USElOR19BVFRSUyA9IG1ha2VNYXAoJ25nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXQnKSxcbiAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxcXlxcXj8pPyhcXD8pPyhcXF5cXF4/KT8pPy87XG5cbiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzXG4gIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgZnV0dXJlIERPTSBldmVudCBhdHRyaWJ1dGUgbmFtZXMgd2lsbCBiZWdpbiB3aXRoXG4gIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLlxuICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0rfGZvcm1hY3Rpb24pJC87XG4gIHZhciBiaW5kaW5nQ2FjaGUgPSBjcmVhdGVNYXAoKTtcblxuICBmdW5jdGlvbiBwYXJzZUlzb2xhdGVCaW5kaW5ncyhzY29wZSwgZGlyZWN0aXZlTmFtZSwgaXNDb250cm9sbGVyKSB7XG4gICAgdmFyIExPQ0FMX1JFR0VYUCA9IC9eXFxzKihbQCY8XXw9KFxcKj8pKShcXD8/KVxccyooW1xcdyRdKilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSBjcmVhdGVNYXAoKTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgaWYgKGRlZmluaXRpb24gaW4gYmluZGluZ0NhY2hlKSB7XG4gICAgICAgIGJpbmRpbmdzW3Njb3BlTmFtZV0gPSBiaW5kaW5nQ2FjaGVbZGVmaW5pdGlvbl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaXNjcCcsXG4gICAgICAgICAgICAnSW52YWxpZCB7M30gZm9yIGRpcmVjdGl2ZSBcXCd7MH1cXCcuJyArXG4gICAgICAgICAgICAnIERlZmluaXRpb246IHsuLi4gezF9OiBcXCd7Mn1cXCcgLi4ufScsXG4gICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCBzY29wZU5hbWUsIGRlZmluaXRpb24sXG4gICAgICAgICAgICAoaXNDb250cm9sbGVyID8gJ2NvbnRyb2xsZXIgYmluZGluZ3MgZGVmaW5pdGlvbicgOlxuICAgICAgICAgICAgJ2lzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbicpKTtcbiAgICAgIH1cblxuICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHtcbiAgICAgICAgbW9kZTogbWF0Y2hbMV1bMF0sXG4gICAgICAgIGNvbGxlY3Rpb246IG1hdGNoWzJdID09PSAnKicsXG4gICAgICAgIG9wdGlvbmFsOiBtYXRjaFszXSA9PT0gJz8nLFxuICAgICAgICBhdHRyTmFtZTogbWF0Y2hbNF0gfHwgc2NvcGVOYW1lXG4gICAgICB9O1xuICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgIGJpbmRpbmdDYWNoZVtkZWZpbml0aW9uXSA9IGJpbmRpbmdzW3Njb3BlTmFtZV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBiaW5kaW5ncyA9IHtcbiAgICAgIGlzb2xhdGVTY29wZTogbnVsbCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG51bGxcbiAgICB9O1xuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICBpZiAoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgPT09IHRydWUpIHtcbiAgICAgICAgYmluZGluZ3MuYmluZFRvQ29udHJvbGxlciA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIpKSB7XG4gICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID1cbiAgICAgICAgICBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciwgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyICYmICFkaXJlY3RpdmUuY29udHJvbGxlcikge1xuICAgICAgLy8gVGhlcmUgaXMgbm8gY29udHJvbGxlclxuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vY3RybCcsXG4gICAgICAgICAgICAnQ2Fubm90IGJpbmQgdG8gY29udHJvbGxlciB3aXRob3V0IGRpcmVjdGl2ZSBcXCd7MH1cXCdzIGNvbnRyb2xsZXIuJyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSkge1xuICAgIHZhciBsZXR0ZXIgPSBuYW1lLmNoYXJBdCgwKTtcbiAgICBpZiAoIWxldHRlciB8fCBsZXR0ZXIgIT09IGxvd2VyY2FzZShsZXR0ZXIpKSB7XG4gICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignYmFkZGlyJywgJ0RpcmVjdGl2ZS9Db21wb25lbnQgbmFtZSBcXCd7MH1cXCcgaXMgaW52YWxpZC4gVGhlIGZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbG93ZXJjYXNlIGxldHRlcicsIG5hbWUpO1xuICAgIH1cbiAgICBpZiAobmFtZSAhPT0gbmFtZS50cmltKCkpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLFxuICAgICAgICAgICAgJ0RpcmVjdGl2ZS9Db21wb25lbnQgbmFtZSBcXCd7MH1cXCcgaXMgaW52YWxpZC4gVGhlIG5hbWUgc2hvdWxkIG5vdCBjb250YWluIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZXMnLFxuICAgICAgICAgICAgbmFtZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlUmVxdWlyZShkaXJlY3RpdmUpIHtcbiAgICB2YXIgcmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7XG5cbiAgICBpZiAoIWlzQXJyYXkocmVxdWlyZSkgJiYgaXNPYmplY3QocmVxdWlyZSkpIHtcbiAgICAgIGZvckVhY2gocmVxdWlyZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSB2YWx1ZS5tYXRjaChSRVFVSVJFX1BSRUZJWF9SRUdFWFApO1xuICAgICAgICB2YXIgbmFtZSA9IHZhbHVlLnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICBpZiAoIW5hbWUpIHJlcXVpcmVba2V5XSA9IG1hdGNoWzBdICsga2V5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXVpcmU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3RpdmVSZXN0cmljdChyZXN0cmljdCwgbmFtZSkge1xuICAgIGlmIChyZXN0cmljdCAmJiAhKGlzU3RyaW5nKHJlc3RyaWN0KSAmJiAvW0VBQ01dLy50ZXN0KHJlc3RyaWN0KSkpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRyZXN0cmljdCcsXG4gICAgICAgICAgJ1Jlc3RyaWN0IHByb3BlcnR5IFxcJ3swfVxcJyBvZiBkaXJlY3RpdmUgXFwnezF9XFwnIGlzIGludmFsaWQnLFxuICAgICAgICAgIHJlc3RyaWN0LFxuICAgICAgICAgIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN0cmljdCB8fCAnRUEnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2hcbiAgICogICAgd2lsbCBtYXRjaCBhcyA8Y29kZT5uZy1iaW5kPC9jb2RlPiksIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlXG4gICAqICAgIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZSB0aGVcbiAgICogICAge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmUgZ3VpZGV9IGFuZCB0aGUge0BsaW5rICRjb21waWxlIGNvbXBpbGUgQVBJfSBmb3IgbW9yZSBpbmZvLlxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHtcbiAgICBhc3NlcnRBcmcobmFtZSwgJ25hbWUnKTtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnZGlyZWN0aXZlJyk7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTtcbiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XG4gICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVzID0gW107XG4gICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9ICRpbmplY3Rvci5pbnZva2UoZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXJlY3RpdmUuY29tcGlsZSAmJiBkaXJlY3RpdmUubGluaykge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5IHx8IDA7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXF1aXJlID0gZ2V0RGlyZWN0aXZlUmVxdWlyZShkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGdldERpcmVjdGl2ZVJlc3RyaWN0KGRpcmVjdGl2ZS5yZXN0cmljdCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSA9IGRpcmVjdGl2ZUZhY3RvcnkuJCRtb2R1bGVOYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICAgICAgfV0pO1xuICAgICAgfVxuICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKG5hbWUsIHJldmVyc2VQYXJhbXMocmVnaXN0ZXJEaXJlY3RpdmUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNjb21wb25lbnRcbiAgICogQG1vZHVsZSBuZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWxDYXNlIChpLmUuIGBteUNvbXBgIHdoaWNoIHdpbGwgbWF0Y2ggYDxteS1jb21wPmApXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdCAoYSBzaW1wbGlmaWVkXG4gICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSksXG4gICAqICAgIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIChhbGwgb3B0aW9uYWwpOlxuICAgKlxuICAgKiAgICAtIGBjb250cm9sbGVyYCDigJMgYHsoc3RyaW5nfGZ1bmN0aW9uKCk9fWAg4oCTIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmVcbiAgICogICAgICBhc3NvY2lhdGVkIHdpdGggbmV3bHkgY3JlYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHtAbGluayBuZy4kY29tcGlsZSMtY29udHJvbGxlci1cbiAgICogICAgICByZWdpc3RlcmVkIGNvbnRyb2xsZXJ9IGlmIHBhc3NlZCBhcyBhIHN0cmluZy4gQW4gZW1wdHkgYG5vb3BgIGZ1bmN0aW9uIGJ5IGRlZmF1bHQuXG4gICAqICAgIC0gYGNvbnRyb2xsZXJBc2Ag4oCTIGB7c3RyaW5nPX1gIOKAkyBpZGVudGlmaWVyIG5hbWUgZm9yIHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbGxlciBpbiB0aGUgY29tcG9uZW50J3Mgc2NvcGUuXG4gICAqICAgICAgSWYgcHJlc2VudCwgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgdG8gc2NvcGUgdW5kZXIgdGhlIGBjb250cm9sbGVyQXNgIG5hbWUuXG4gICAqICAgICAgSWYgbm90IHByZXNlbnQsIHRoaXMgd2lsbCBkZWZhdWx0IHRvIGJlIGAkY3RybGAuXG4gICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqICAgICAgcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIHdoaWNoIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogICAgICBFbXB0eSBzdHJpbmcgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGB0ZW1wbGF0ZVVybGAg4oCTIGB7c3RyaW5nPXxmdW5jdGlvbigpPX1gIOKAkyBwYXRoIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBhdGggdG8gYW4gaHRtbFxuICAgKiAgICAgIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVVcmxgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGBiaW5kaW5nc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBkZWZpbmVzIGJpbmRpbmdzIGJldHdlZW4gRE9NIGF0dHJpYnV0ZXMgYW5kIGNvbXBvbmVudCBwcm9wZXJ0aWVzLlxuICAgKiAgICAgIENvbXBvbmVudCBwcm9wZXJ0aWVzIGFyZSBhbHdheXMgYm91bmQgdG8gdGhlIGNvbXBvbmVudCBjb250cm9sbGVyIGFuZCBub3QgdG8gdGhlIHNjb3BlLlxuICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGBiaW5kVG9Db250cm9sbGVyYH0uXG4gICAqICAgIC0gYHRyYW5zY2x1ZGVgIOKAkyBge2Jvb2xlYW49fWAg4oCTIHdoZXRoZXIge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBjb250ZW50IHRyYW5zY2x1c2lvbn0gaXMgZW5hYmxlZC5cbiAgICogICAgICBEaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgKiAgICAtIGByZXF1aXJlYCAtIGB7T2JqZWN0PHN0cmluZywgc3RyaW5nPj19YCAtIHJlcXVpcmVzIHRoZSBjb250cm9sbGVycyBvZiBvdGhlciBkaXJlY3RpdmVzIGFuZCBiaW5kcyB0aGVtIHRvXG4gICAqICAgICAgdGhpcyBjb21wb25lbnQncyBjb250cm9sbGVyLiBUaGUgb2JqZWN0IGtleXMgc3BlY2lmeSB0aGUgcHJvcGVydHkgbmFtZXMgdW5kZXIgd2hpY2ggdGhlIHJlcXVpcmVkXG4gICAqICAgICAgY29udHJvbGxlcnMgKG9iamVjdCB2YWx1ZXMpIHdpbGwgYmUgYm91bmQuIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLXJlcXVpcmUtIGByZXF1aXJlYH0uXG4gICAqICAgIC0gYCQuLi5gIOKAkyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYXR0YWNoIHRvIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2xsZXJcbiAgICogICAgICBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gKFRoaXMgaXMgdXNlZCBieSB0aGUgY29tcG9uZW50IHJvdXRlciB0byBhbm5vdGF0ZSlcbiAgICpcbiAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IHRoZSBjb21waWxlIHByb3ZpZGVyIGl0c2VsZiwgZm9yIGNoYWluaW5nIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSAqKmNvbXBvbmVudCBkZWZpbml0aW9uKiogd2l0aCB0aGUgY29tcGlsZXIuIFRoaXMgaXMgYSBzaG9ydGhhbmQgZm9yIHJlZ2lzdGVyaW5nIGEgc3BlY2lhbFxuICAgKiB0eXBlIG9mIGRpcmVjdGl2ZSwgd2hpY2ggcmVwcmVzZW50cyBhIHNlbGYtY29udGFpbmVkIFVJIGNvbXBvbmVudCBpbiB5b3VyIGFwcGxpY2F0aW9uLiBTdWNoIGNvbXBvbmVudHNcbiAgICogYXJlIGFsd2F5cyBpc29sYXRlZCAoaS5lLiBgc2NvcGU6IHt9YCkgYW5kIGFyZSBhbHdheXMgcmVzdHJpY3RlZCB0byBlbGVtZW50cyAoaS5lLiBgcmVzdHJpY3Q6ICdFJ2ApLlxuICAgKlxuICAgKiBDb21wb25lbnQgZGVmaW5pdGlvbnMgYXJlIHZlcnkgc2ltcGxlIGFuZCBkbyBub3QgcmVxdWlyZSBhcyBtdWNoIGNvbmZpZ3VyYXRpb24gYXMgZGVmaW5pbmcgZ2VuZXJhbFxuICAgKiBkaXJlY3RpdmVzLiBDb21wb25lbnQgZGVmaW5pdGlvbnMgdXN1YWxseSBjb25zaXN0IG9ubHkgb2YgYSB0ZW1wbGF0ZSBhbmQgYSBjb250cm9sbGVyIGJhY2tpbmcgaXQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRlZmluaXRpb24gZWFzaWVyLCBjb21wb25lbnRzIGVuZm9yY2UgYmVzdCBwcmFjdGljZXMgbGlrZSB1c2Ugb2YgYGNvbnRyb2xsZXJBc2AsXG4gICAqIGBiaW5kVG9Db250cm9sbGVyYC4gVGhleSBhbHdheXMgaGF2ZSAqKmlzb2xhdGUgc2NvcGUqKiBhbmQgYXJlIHJlc3RyaWN0ZWQgdG8gZWxlbWVudHMuXG4gICAqXG4gICAqIEhlcmUgYXJlIGEgZmV3IGV4YW1wbGVzIG9mIGhvdyB5b3Ugd291bGQgdXN1YWxseSBkZWZpbmUgY29tcG9uZW50czpcbiAgICpcbiAgICogYGBganNcbiAgICogICB2YXIgbXlNb2QgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHRoaXMubmFtZSA9ICdzaGFoYXInO1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAqICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL215LWNvbXAuaHRtbCcsXG4gICAqICAgICBjb250cm9sbGVyOiAnTXlDdHJsJyxcbiAgICogICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIGBgYFxuICAgKiBGb3IgbW9yZSBleGFtcGxlcywgYW5kIGFuIGluLWRlcHRoIGd1aWRlLCBzZWUgdGhlIHtAbGluayBndWlkZS9jb21wb25lbnQgY29tcG9uZW50IGd1aWRlfS5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIFNlZSBhbHNvIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICovXG4gIHRoaXMuY29tcG9uZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgb3B0aW9ucykge1xuICAgIHZhciBjb250cm9sbGVyID0gb3B0aW9ucy5jb250cm9sbGVyIHx8IGZ1bmN0aW9uKCkge307XG5cbiAgICBmdW5jdGlvbiBmYWN0b3J5KCRpbmplY3Rvcikge1xuICAgICAgZnVuY3Rpb24gbWFrZUluamVjdGFibGUoZm4pIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZm4pIHx8IGlzQXJyYXkoZm4pKSB7XG4gICAgICAgICAgcmV0dXJuIC8qKiBAdGhpcyAqLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgICAgICByZXR1cm4gJGluamVjdG9yLmludm9rZShmbiwgdGhpcywgeyRlbGVtZW50OiB0RWxlbWVudCwgJGF0dHJzOiB0QXR0cnN9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdGVtcGxhdGUgPSAoIW9wdGlvbnMudGVtcGxhdGUgJiYgIW9wdGlvbnMudGVtcGxhdGVVcmwgPyAnJyA6IG9wdGlvbnMudGVtcGxhdGUpO1xuICAgICAgdmFyIGRkbyA9IHtcbiAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICAgICAgY29udHJvbGxlckFzOiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihvcHRpb25zLmNvbnRyb2xsZXIpIHx8IG9wdGlvbnMuY29udHJvbGxlckFzIHx8ICckY3RybCcsXG4gICAgICAgIHRlbXBsYXRlOiBtYWtlSW5qZWN0YWJsZSh0ZW1wbGF0ZSksXG4gICAgICAgIHRlbXBsYXRlVXJsOiBtYWtlSW5qZWN0YWJsZShvcHRpb25zLnRlbXBsYXRlVXJsKSxcbiAgICAgICAgdHJhbnNjbHVkZTogb3B0aW9ucy50cmFuc2NsdWRlLFxuICAgICAgICBzY29wZToge30sXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG9wdGlvbnMuYmluZGluZ3MgfHwge30sXG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHJlcXVpcmU6IG9wdGlvbnMucmVxdWlyZVxuICAgICAgfTtcblxuICAgICAgLy8gQ29weSBhbm5vdGF0aW9ucyAoc3RhcnRpbmcgd2l0aCAkKSBvdmVyIHRvIHRoZSBERE9cbiAgICAgIGZvckVhY2gob3B0aW9ucywgZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJykgZGRvW2tleV0gPSB2YWw7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRkbztcbiAgICB9XG5cbiAgICAvLyBUT0RPKHBldGUpIHJlbW92ZSB0aGUgZm9sbG93aW5nIGBmb3JFYWNoYCBiZWZvcmUgd2UgcmVsZWFzZSAxLjYuMFxuICAgIC8vIFRoZSBjb21wb25lbnQtcm91dGVyQDAuMi4wIGxvb2tzIGZvciB0aGUgYW5ub3RhdGlvbnMgb24gdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3JcbiAgICAvLyBOb3RoaW5nIGluIEFuZ3VsYXIgbG9va3MgZm9yIGFubm90YXRpb25zIG9uIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIGJ1dCB3ZSBjYW4ndCByZW1vdmVcbiAgICAvLyBpdCBmcm9tIDEuNS54IHlldC5cblxuICAgIC8vIENvcHkgYW55IGFubm90YXRpb24gcHJvcGVydGllcyAoc3RhcnRpbmcgd2l0aCAkKSBvdmVyIHRvIHRoZSBmYWN0b3J5IGFuZCBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uc1xuICAgIC8vIFRoZXNlIGNvdWxkIGJlIHVzZWQgYnkgbGlicmFyaWVzIHN1Y2ggYXMgdGhlIG5ldyBjb21wb25lbnQgcm91dGVyXG4gICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJykge1xuICAgICAgICBmYWN0b3J5W2tleV0gPSB2YWw7XG4gICAgICAgIC8vIERvbid0IHRyeSB0byBjb3B5IG92ZXIgYW5ub3RhdGlvbnMgdG8gbmFtZWQgY29udHJvbGxlclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVyKSkgY29udHJvbGxlcltrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZmFjdG9yeS4kaW5qZWN0ID0gWyckaW5qZWN0b3InXTtcblxuICAgIHJldHVybiB0aGlzLmRpcmVjdGl2ZShuYW1lLCBmYWN0b3J5KTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgYVtocmVmXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnRpbmcgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QoKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2ltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAgJGNvbXBpbGVQcm92aWRlciNkZWJ1Z0luZm9FbmFibGVkXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgdXBkYXRlIHRoZSBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKlxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBlbmFibGUvZGlzYWJsZSB2YXJpb3VzIGRlYnVnIHJ1bnRpbWUgaW5mb3JtYXRpb24gaW4gdGhlIGNvbXBpbGVyIHN1Y2ggYXMgYWRkaW5nXG4gICAqIGJpbmRpbmcgaW5mb3JtYXRpb24gYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHNjb3BlIG9uIHRvIERPTSBlbGVtZW50cy5cbiAgICogSWYgZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgYWRkIHRoZSBmb2xsb3dpbmcgdG8gRE9NIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGJvdW5kIHRvIHRoZSBzY29wZVxuICAgKiAqIGBuZy1iaW5kaW5nYCBDU1MgY2xhc3NcbiAgICogKiBgJGJpbmRpbmdgIGRhdGEgcHJvcGVydHkgY29udGFpbmluZyBhbiBhcnJheSBvZiB0aGUgYmluZGluZyBleHByZXNzaW9uc1xuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGlzIGluIHByb2R1Y3Rpb24gZm9yIGEgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgYm9vc3QuIFNlZVxuICAgKiB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEaXNhYmxpbmcgRGVidWcgRGF0YX0gZm9yIG1vcmUuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICB2YXIgZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gIHRoaXMuZGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBpZiAoaXNEZWZpbmVkKGVuYWJsZWQpKSB7XG4gICAgICBkZWJ1Z0luZm9FbmFibGVkID0gZW5hYmxlZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZGVidWdJbmZvRW5hYmxlZDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAgJGNvbXBpbGVQcm92aWRlciNwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCBzdGF0ZSBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZVxuICAgKiBjdXJyZW50IHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCBzdGF0ZVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKlxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBlbmFibGUvZGlzYWJsZSB3aGV0aGVyIGRpcmVjdGl2ZSBjb250cm9sbGVycyBhcmUgYXNzaWduZWQgYmluZGluZ3MgYmVmb3JlXG4gICAqIGNhbGxpbmcgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3Rvci5cbiAgICogSWYgZW5hYmxlZCAodHJ1ZSksIHRoZSBjb21waWxlciBhc3NpZ25zIHRoZSB2YWx1ZSBvZiBlYWNoIG9mIHRoZSBiaW5kaW5ncyB0byB0aGVcbiAgICogcHJvcGVydGllcyBvZiB0aGUgY29udHJvbGxlciBvYmplY3QgYmVmb3JlIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGlzIG9iamVjdCBpcyBjYWxsZWQuXG4gICAqXG4gICAqIElmIGRpc2FibGVkIChmYWxzZSksIHRoZSBjb21waWxlciBjYWxscyB0aGUgY29uc3RydWN0b3IgZmlyc3QgYmVmb3JlIGFzc2lnbmluZyBiaW5kaW5ncy5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIHNpbmNlVmVyc2lvbj1cIjEuNi4wXCJcbiAgICogcmVtb3ZlVmVyc2lvbj1cIjEuNy4wXCJcbiAgICpcbiAgICogVGhpcyBtZXRob2QgYW5kIHRoZSBvcHRpb24gdG8gYXNzaWduIHRoZSBiaW5kaW5ncyBiZWZvcmUgY2FsbGluZyB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yXG4gICAqIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MS43LjAuXG4gICAqL1xuICB2YXIgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZmFsc2U7XG4gIHRoaXMucHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZDtcbiAgfTtcblxuXG4gIHZhciBUVEwgPSAxMDtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNvbkNoYW5nZXNUdGxcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiB0aW1lcyBgJG9uQ2hhbmdlc2AgaG9va3MgY2FuIHRyaWdnZXIgbmV3IGNoYW5nZXMgYmVmb3JlIGdpdmluZyB1cCBhbmRcbiAgICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXG4gICAqXG4gICAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy5cbiAgICpcbiAgICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IGRlcGVuZGVuY2llcyBiZXR3ZWVuIGAkb25DaGFuZ2VzYCBob29rcyBhbmQgYmluZGluZ3Mgd2lsbCByZXN1bHRcbiAgICogaW4gc2V2ZXJhbCBpdGVyYXRpb25zIG9mIGNhbGxzIHRvIHRoZXNlIGhvb2tzLiBIb3dldmVyIGlmIGFuIGFwcGxpY2F0aW9uIG5lZWRzIG1vcmUgdGhhbiB0aGUgZGVmYXVsdCAxMFxuICAgKiBpdGVyYXRpb25zIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0byBjb250aW51b3VzbHkgY2hhbmdlIGR1cmluZ1xuICAgKiB0aGUgYCRvbkNoYW5nZXNgIGhvb2sgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0IHByb3BlciBqdXN0aWZpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBgJG9uQ2hhbmdlc2AgaG9vayBpdGVyYXRpb25zLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfG9iamVjdH0gdGhlIGN1cnJlbnQgbGltaXQgKG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIgZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgdGhpcy5vbkNoYW5nZXNUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBUVEwgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVFRMO1xuICB9O1xuXG4gIHZhciBjb21tZW50RGlyZWN0aXZlc0VuYWJsZWRDb25maWcgPSB0cnVlO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2NvbW1lbnREaXJlY3RpdmVzRW5hYmxlZFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSXQgaW5kaWNhdGVzIHRvIHRoZSBjb21waWxlclxuICAgKiB3aGV0aGVyIG9yIG5vdCBkaXJlY3RpdmVzIG9uIGNvbW1lbnRzIHNob3VsZCBiZSBjb21waWxlZC5cbiAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKlxuICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2l0aCBmYWxzZSBkaXNhYmxlcyB0aGUgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlc1xuICAgKiBvbiBjb21tZW50cyBmb3IgdGhlIHdob2xlIGFwcGxpY2F0aW9uLlxuICAgKiBUaGlzIHJlc3VsdHMgaW4gYSBjb21waWxhdGlvbiBwZXJmb3JtYW5jZSBnYWluLFxuICAgKiBhcyB0aGUgY29tcGlsZXIgZG9lc24ndCBoYXZlIHRvIGNoZWNrIGNvbW1lbnRzIHdoZW4gbG9va2luZyBmb3IgZGlyZWN0aXZlcy5cbiAgICogVGhpcyBzaG91bGQgaG93ZXZlciBvbmx5IGJlIHVzZWQgaWYgeW91IGFyZSBzdXJlIHRoYXQgbm8gY29tbWVudCBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAqIHRoZSBhcHBsaWNhdGlvbiAoaW5jbHVkaW5nIGFueSAzcmQgcGFydHkgZGlyZWN0aXZlcykuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gY29tbWVudHNcbiAgICogQHJldHVybnMge2Jvb2xlYW58b2JqZWN0fSB0aGUgY3VycmVudCB2YWx1ZSAob3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlciBmb3IgY2hhaW5pbmcpXG4gICAqL1xuICB0aGlzLmNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBjb21tZW50RGlyZWN0aXZlc0VuYWJsZWRDb25maWc7XG4gIH07XG5cblxuICB2YXIgY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSXQgaW5kaWNhdGVzIHRvIHRoZSBjb21waWxlclxuICAgKiB3aGV0aGVyIG9yIG5vdCBkaXJlY3RpdmVzIG9uIGVsZW1lbnQgY2xhc3NlcyBzaG91bGQgYmUgY29tcGlsZWQuXG4gICAqIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICpcbiAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIHdpdGggZmFsc2UgZGlzYWJsZXMgdGhlIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXNcbiAgICogb24gZWxlbWVudCBjbGFzc2VzIGZvciB0aGUgd2hvbGUgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgcmVzdWx0cyBpbiBhIGNvbXBpbGF0aW9uIHBlcmZvcm1hbmNlIGdhaW4sXG4gICAqIGFzIHRoZSBjb21waWxlciBkb2Vzbid0IGhhdmUgdG8gY2hlY2sgZWxlbWVudCBjbGFzc2VzIHdoZW4gbG9va2luZyBmb3IgZGlyZWN0aXZlcy5cbiAgICogVGhpcyBzaG91bGQgaG93ZXZlciBvbmx5IGJlIHVzZWQgaWYgeW91IGFyZSBzdXJlIHRoYXQgbm8gY2xhc3MgZGlyZWN0aXZlcyBhcmUgdXNlZCBpblxuICAgKiB0aGUgYXBwbGljYXRpb24gKGluY2x1ZGluZyBhbnkgM3JkIHBhcnR5IGRpcmVjdGl2ZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgYGZhbHNlYCBpZiB0aGUgY29tcGlsZXIgbWF5IGlnbm9yZSBkaXJlY3RpdmVzIG9uIGVsZW1lbnQgY2xhc3Nlc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IHRoZSBjdXJyZW50IHZhbHVlIChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICovXG4gIHRoaXMuY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWcgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbXG4gICAgICAgICAgICAnJGluamVjdG9yJywgJyRpbnRlcnBvbGF0ZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckdGVtcGxhdGVSZXF1ZXN0JywgJyRwYXJzZScsXG4gICAgICAgICAgICAnJGNvbnRyb2xsZXInLCAnJHJvb3RTY29wZScsICckc2NlJywgJyRhbmltYXRlJywgJyQkc2FuaXRpemVVcmknLFxuICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkaW50ZXJwb2xhdGUsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJHRlbXBsYXRlUmVxdWVzdCwgICAkcGFyc2UsXG4gICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkc2NlLCAgICRhbmltYXRlLCAgICQkc2FuaXRpemVVcmkpIHtcblxuICAgIHZhciBTSU1QTEVfQVRUUl9OQU1FID0gL15cXHcvO1xuICAgIHZhciBzcGVjaWFsQXR0ckhvbGRlciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXG4gICAgdmFyIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCA9IGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgICB2YXIgY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCA9IGNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWc7XG5cblxuICAgIHZhciBvbkNoYW5nZXNUdGwgPSBUVEw7XG4gICAgLy8gVGhlIG9uQ2hhbmdlcyBob29rcyBzaG91bGQgYWxsIGJlIHJ1biB0b2dldGhlciBpbiBhIHNpbmdsZSBkaWdlc3RcbiAgICAvLyBXaGVuIGNoYW5nZXMgb2NjdXIsIHRoZSBjYWxsIHRvIHRyaWdnZXIgdGhlaXIgaG9va3Mgd2lsbCBiZSBhZGRlZCB0byB0aGlzIHF1ZXVlXG4gICAgdmFyIG9uQ2hhbmdlc1F1ZXVlO1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gYSAkJHBvc3REaWdlc3QgdG8gdHJpZ2dlciBhbGwgdGhlIG9uQ2hhbmdlcyBob29rcyBpbiBhIHNpbmdsZSBkaWdlc3RcbiAgICBmdW5jdGlvbiBmbHVzaE9uQ2hhbmdlc1F1ZXVlKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCEoLS1vbkNoYW5nZXNUdGwpKSB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSBoaXQgdGhlIFRUTCBsaW1pdCBzbyByZXNldCBldmVyeXRoaW5nXG4gICAgICAgICAgb25DaGFuZ2VzUXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2luZmNobmcnLCAnezB9ICRvbkNoYW5nZXMoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicsIFRUTCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbXVzdCBydW4gdGhpcyBob29rIGluIGFuIGFwcGx5IHNpbmNlIHRoZSAkJHBvc3REaWdlc3QgcnVucyBvdXRzaWRlIGFwcGx5XG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBvbkNoYW5nZXNRdWV1ZS5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBvbkNoYW5nZXNRdWV1ZVtpXSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHF1ZXVlIHRvIHRyaWdnZXIgYSBuZXcgc2NoZWR1bGUgbmV4dCB0aW1lIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgICAgICAgb25DaGFuZ2VzUXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9ycztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgb25DaGFuZ2VzVHRsKys7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlc1RvQ29weSk7XG4gICAgICAgIHZhciBpLCBsLCBrZXk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGF0dHIgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIEF0dHJpYnV0ZXMucHJvdG90eXBlID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkbm9ybWFsaXplXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ29udmVydHMgYW4gYXR0cmlidXRlIG5hbWUgKGUuZy4gZGFzaC9jb2xvbi91bmRlcnNjb3JlLWRlbGltaXRlZCBzdHJpbmcsIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgeC1gIG9yXG4gICAgICAgKiBgZGF0YS1gKSB0byBpdHMgbm9ybWFsaXplZCwgY2FtZWxDYXNlIGZvcm0uXG4gICAgICAgKlxuICAgICAgICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gICAgICAgKi9cbiAgICAgICRub3JtYWxpemU6IGRpcmVjdGl2ZU5vcm1hbGl6ZSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciB0byB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9uc1xuICAgICAgICogYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyBhZGRpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJGFkZENsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHJlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIGZyb20gdGhlIGVsZW1lbnQuIElmXG4gICAgICAgKiBhbmltYXRpb25zIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgcmVtb3ZhbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRyZW1vdmVDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyR1cGRhdGVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgYW5kIHJlbW92ZXMgdGhlIGFwcHJvcHJpYXRlIENTUyBjbGFzcyB2YWx1ZXMgdG8gdGhlIGVsZW1lbnQgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2VcbiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3Q2xhc3NlcyBUaGUgY3VycmVudCBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqL1xuICAgICAgJHVwZGF0ZUNsYXNzOiBmdW5jdGlvbihuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKSB7XG4gICAgICAgIHZhciB0b0FkZCA9IHRva2VuRGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCB0b0FkZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9SZW1vdmUgPSB0b2tlbkRpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b1JlbW92ZSAmJiB0b1JlbW92ZS5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlc1xuICAgICAgICogY2FuIHNoYXJlIHRoZSBhdHRyaWJ1dGUuIFRoaXMgZnVuY3Rpb24gcHJvcGVybHkgaGFuZGxlcyBib29sZWFuIGF0dHJpYnV0ZXMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHdyaXRlQXR0ciBJZiBmYWxzZSwgZG9lcyBub3Qgd3JpdGUgdGhlIHZhbHVlIHRvIERPTSBlbGVtZW50IGF0dHJpYnV0ZS5cbiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LlxuICAgICAgICovXG4gICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7XG4gICAgICAgIC8vIFRPRE86IGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byB0aHJvdyBhbiBlcnJvciBpZiBcImNsYXNzXCJcbiAgICAgICAgLy9pcyBzZXQgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNpbmNlIGl0IG1heSBjYXVzZSAkdXBkYXRlQ2xhc3MgdG9cbiAgICAgICAgLy9iZWNvbWUgdW5zdGFibGUuXG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLiQkZWxlbWVudFswXSxcbiAgICAgICAgICAgIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwga2V5KSxcbiAgICAgICAgICAgIGFsaWFzZWRLZXkgPSBnZXRBbGlhc2VkQXR0ck5hbWUoa2V5KSxcbiAgICAgICAgICAgIG9ic2VydmVyID0ga2V5LFxuICAgICAgICAgICAgbm9kZU5hbWU7XG5cbiAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHtcbiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpO1xuICAgICAgICAgIGF0dHJOYW1lID0gYm9vbGVhbktleTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VkS2V5KSB7XG4gICAgICAgICAgdGhpc1thbGlhc2VkS2V5XSA9IHZhbHVlO1xuICAgICAgICAgIG9ic2VydmVyID0gYWxpYXNlZEtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgIC8vIHRyYW5zbGF0ZSBub3JtYWxpemVkIGtleSB0byBhY3R1YWwga2V5XG4gICAgICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldO1xuICAgICAgICAgIGlmICghYXR0ck5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lID0gc25ha2VfY2FzZShrZXksICctJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8odGhpcy4kJGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICgobm9kZU5hbWUgPT09ICdhJyAmJiAoa2V5ID09PSAnaHJlZicgfHwga2V5ID09PSAneGxpbmtIcmVmJykpIHx8XG4gICAgICAgICAgICAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyYycpKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgYVtocmVmXSBhbmQgaW1nW3NyY10gdmFsdWVzXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSAkJHNhbml0aXplVXJpKHZhbHVlLCBrZXkgPT09ICdzcmMnKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3Jjc2V0JyAmJiBpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgaW1nW3NyY3NldF0gdmFsdWVzXG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIHNwYWNlcyBiZWNhdXNlIGl0J3Mgbm90IHRoZSBzYW1lIHBhdHRlcm5cbiAgICAgICAgICB2YXIgdHJpbW1lZFNyY3NldCA9IHRyaW0odmFsdWUpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICggICA5OTl4ICAgLHwgICA5OTl3ICAgLHwgICAsfCwgICApXG4gICAgICAgICAgdmFyIHNyY1BhdHRlcm4gPSAvKFxccytcXGQreFxccyosfFxccytcXGQrd1xccyosfFxccyssfCxcXHMrKS87XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXFxzLy50ZXN0KHRyaW1tZWRTcmNzZXQpID8gc3JjUGF0dGVybiA6IC8oLCkvO1xuXG4gICAgICAgICAgLy8gc3BsaXQgc3Jjc2V0IGludG8gdHVwbGUgb2YgdXJpIGFuZCBkZXNjcmlwdG9yIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXRlbVxuICAgICAgICAgIHZhciByYXdVcmlzID0gdHJpbW1lZFNyY3NldC5zcGxpdChwYXR0ZXJuKTtcblxuICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlc1xuICAgICAgICAgIHZhciBuYnJVcmlzV2l0aDJwYXJ0cyA9IE1hdGguZmxvb3IocmF3VXJpcy5sZW5ndGggLyAyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkgKiAyO1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgdGhlIHVyaVxuICAgICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShyYXdVcmlzW2lubmVySWR4XSksIHRydWUpO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICByZXN1bHQgKz0gKCcgJyArIHRyaW0ocmF3VXJpc1tpbm5lcklkeCArIDFdKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc3BsaXQgdGhlIGxhc3QgaXRlbSBpbnRvIHVyaSBhbmQgZGVzY3JpcHRvclxuICAgICAgICAgIHZhciBsYXN0VHVwbGUgPSB0cmltKHJhd1VyaXNbaSAqIDJdKS5zcGxpdCgvXFxzLyk7XG5cbiAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgbGFzdCB1cmlcbiAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKGxhc3RUdXBsZVswXSksIHRydWUpO1xuXG4gICAgICAgICAgLy8gYW5kIGFkZCB0aGUgbGFzdCBkZXNjcmlwdG9yIGlmIGFueVxuICAgICAgICAgIGlmIChsYXN0VHVwbGUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gKCcgJyArIHRyaW0obGFzdFR1cGxlWzFdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdyaXRlQXR0ciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5yZW1vdmVBdHRyKGF0dHJOYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFNJTVBMRV9BVFRSX05BTUUudGVzdChhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQuYXR0cihhdHRyTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0U3BlY2lhbEF0dHIodGhpcy4kJGVsZW1lbnRbMF0sIGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlyZSBvYnNlcnZlcnNcbiAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVycztcbiAgICAgICAgaWYgKCQkb2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgZm9yRWFjaCgkJG9ic2VydmVyc1tvYnNlcnZlcl0sIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmbih2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBPYnNlcnZlcyBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBvYnNlcnZlciBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBkdXJpbmcgdGhlIG5leHQgYCRkaWdlc3RgIGZvbGxvd2luZ1xuICAgICAgICogY29tcGlsYXRpb24uIFRoZSBvYnNlcnZlciBpcyB0aGVuIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAgICogY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICAgKiAgICAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNob3ctdGV4dC1hbmQtYXR0cmlidXRlLWJpbmRpbmdzLXdvcmsgSW50ZXJwb2xhdGlvblxuICAgICAgICogICAgICAgIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBvYnNlcnZlci5cbiAgICAgICAqL1xuICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uKGtleSwgZm4pIHtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcyxcbiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSAoJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKSk7XG5cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlciAmJiBhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFpc1VuZGVmaW5lZChhdHRyc1trZXldKSkge1xuICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseVxuICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNldFNwZWNpYWxBdHRyKGVsZW1lbnQsIGF0dHJOYW1lLCB2YWx1ZSkge1xuICAgICAgLy8gQXR0cmlidXRlcyBuYW1lcyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoIGxldHRlcnMgKHN1Y2ggYXMgYChjbGljaylgKSBjYW5ub3QgYmUgc2V0IHVzaW5nIGBzZXRBdHRyaWJ1dGVgXG4gICAgICAvLyBzbyB3ZSBoYXZlIHRvIGp1bXAgdGhyb3VnaCBzb21lIGhvb3BzIHRvIGdldCBzdWNoIGFuIGF0dHJpYnV0ZVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzMzE4XG4gICAgICBzcGVjaWFsQXR0ckhvbGRlci5pbm5lckhUTUwgPSAnPHNwYW4gJyArIGF0dHJOYW1lICsgJz4nO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzcGVjaWFsQXR0ckhvbGRlci5maXJzdENoaWxkLmF0dHJpYnV0ZXM7XG4gICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1swXTtcbiAgICAgIC8vIFdlIGhhdmUgdG8gcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgZnJvbSBpdHMgY29udGFpbmVyIGVsZW1lbnQgYmVmb3JlIHdlIGNhbiBhZGQgaXQgdG8gdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnRcbiAgICAgIGF0dHJpYnV0ZXMucmVtb3ZlTmFtZWRJdGVtKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgIGF0dHJpYnV0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgZWxlbWVudC5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbShhdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmUsIHNpbmNlIGl0IG1lYW5zIHRoYXQgd2UgYXJlIHRyeWluZyB0byBzZXQgY2xhc3Mgb25cbiAgICAgICAgLy8gU1ZHIGVsZW1lbnQsIHdoZXJlIGNsYXNzIG5hbWUgaXMgcmVhZC1vbmx5LlxuICAgICAgfVxuICAgIH1cblxuXG4gICAgdmFyIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksXG4gICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSxcbiAgICAgICAgZGVub3JtYWxpemVUZW1wbGF0ZSA9IChzdGFydFN5bWJvbCA9PT0gJ3t7JyAmJiBlbmRTeW1ib2wgID09PSAnfX0nKVxuICAgICAgICAgICAgPyBpZGVudGl0eVxuICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgICAgIH0sXG4gICAgICAgIE5HX0FUVFJfQklORElORyA9IC9ebmdBdHRyW0EtWl0vO1xuICAgIHZhciBNVUxUSV9FTEVNRU5UX0RJUl9SRSA9IC9eKC4rKVN0YXJ0JC87XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nSW5mbygkZWxlbWVudCwgYmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmdzID0gJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTtcblxuICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5ncy5jb25jYXQoYmluZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgfVxuXG4gICAgICAkZWxlbWVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nQ2xhc3MoJGVsZW1lbnQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgJ25nLWJpbmRpbmcnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIHNjb3BlLCBpc29sYXRlZCwgbm9UZW1wbGF0ZSkge1xuICAgICAgdmFyIGRhdGFOYW1lID0gaXNvbGF0ZWQgPyAobm9UZW1wbGF0ZSA/ICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScgOiAnJGlzb2xhdGVTY29wZScpIDogJyRzY29wZSc7XG4gICAgICAkZWxlbWVudC5kYXRhKGRhdGFOYW1lLCBzY29wZSk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkKSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkID8gJ25nLWlzb2xhdGUtc2NvcGUnIDogJ25nLXNjb3BlJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkY3JlYXRlQ29tbWVudCA9IGZ1bmN0aW9uKGRpcmVjdGl2ZU5hbWUsIGNvbW1lbnQpIHtcbiAgICAgIHZhciBjb250ZW50ID0gJyc7XG4gICAgICBpZiAoZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgICBjb250ZW50ID0gJyAnICsgKGRpcmVjdGl2ZU5hbWUgfHwgJycpICsgJzogJztcbiAgICAgICAgaWYgKGNvbW1lbnQpIGNvbnRlbnQgKz0gY29tbWVudCArICcgJztcbiAgICAgIH1cbiAgICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNvbXBpbGU7XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIGlmICghKCRjb21waWxlTm9kZXMgaW5zdGFuY2VvZiBqcUxpdGUpKSB7XG4gICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhblxuICAgICAgICAvLyBtb2RpZnkgaXQuXG4gICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICB9XG4gICAgICB2YXIgY29tcG9zaXRlTGlua0ZuID1cbiAgICAgICAgICAgICAgY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICB2YXIgbmFtZXNwYWNlID0gbnVsbDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBwdWJsaWNMaW5rRm4oc2NvcGUsIGNsb25lQ29ubmVjdEZuLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghJGNvbXBpbGVOb2Rlcykge1xuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWxpbmsnLCAnVGhpcyBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gbGlua2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZyhzY29wZSwgJ3Njb3BlJyk7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29tcGlsZUNvbnRleHQgJiYgcHJldmlvdXNDb21waWxlQ29udGV4dC5uZWVkc05ld1Njb3BlKSB7XG4gICAgICAgICAgLy8gQSBwYXJlbnQgZGlyZWN0aXZlIGRpZCBhIHJlcGxhY2UgYW5kIGEgZGlyZWN0aXZlIG9uIHRoaXMgZWxlbWVudCBhc2tlZFxuICAgICAgICAgIC8vIGZvciB0cmFuc2NsdXNpb24sIHdoaWNoIGNhdXNlZCB1cyB0byBsb3NlIGEgbGF5ZXIgb2YgZWxlbWVudCBvbiB3aGljaFxuICAgICAgICAgIC8vIHdlIGNvdWxkIGhvbGQgdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUsIHNvIHdlIHdpbGwgY3JlYXRlIGl0IG1hbnVhbGx5XG4gICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQuJG5ldygpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiA9IG9wdGlvbnMucGFyZW50Qm91bmRUcmFuc2NsdWRlRm4sXG4gICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gb3B0aW9ucy50cmFuc2NsdWRlQ29udHJvbGxlcnMsXG4gICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IG9wdGlvbnMuZnV0dXJlUGFyZW50RWxlbWVudDtcblxuICAgICAgICAvLyBXaGVuIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgaXMgcGFzc2VkLCBpdCBpcyBhXG4gICAgICAgIC8vIGBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZWAgZnVuY3Rpb24gKGl0IHdhcyBwcmV2aW91c2x5IHBhc3NlZFxuICAgICAgICAvLyBhcyBgdHJhbnNjbHVkZWAgdG8gZGlyZWN0aXZlLmxpbmspIHNvIHdlIG11c3QgdW53cmFwIGl0IHRvIGdldFxuICAgICAgICAvLyBpdHMgYGJvdW5kVHJhbnNjbHVkZUZuYFxuICAgICAgICBpZiAocGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGUpIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgICBuYW1lc3BhY2UgPSBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKGZ1dHVyZVBhcmVudEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkbGlua05vZGU7XG4gICAgICAgIGlmIChuYW1lc3BhY2UgIT09ICdodG1sJykge1xuICAgICAgICAgIC8vIFdoZW4gdXNpbmcgYSBkaXJlY3RpdmUgd2l0aCByZXBsYWNlOnRydWUgYW5kIHRlbXBsYXRlVXJsIHRoZSAkY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gKG9yIGEgY2hpbGQgZWxlbWVudCBpbnNpZGUgb2YgdGhlbSlcbiAgICAgICAgICAvLyBtaWdodCBjaGFuZ2UsIHNvIHdlIG5lZWQgdG8gcmVjcmVhdGUgdGhlIG5hbWVzcGFjZSBhZGFwdGVkIGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIGZvciBjYWxsIHRvIHRoZSBsaW5rIGZ1bmN0aW9uLlxuICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHJlYWR5IGNsb25lIHRoZSBub2Rlcy4uLlxuICAgICAgICAgICRsaW5rTm9kZSA9IGpxTGl0ZShcbiAgICAgICAgICAgIHdyYXBUZW1wbGF0ZShuYW1lc3BhY2UsIGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoJGNvbXBpbGVOb2RlcykuaHRtbCgpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xvbmVDb25uZWN0Rm4pIHtcbiAgICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnRcbiAgICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLlxuICAgICAgICAgICRsaW5rTm9kZSA9IEpRTGl0ZVByb3RvdHlwZS5jbG9uZS5jYWxsKCRjb21waWxlTm9kZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRsaW5rTm9kZSA9ICRjb21waWxlTm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgY29udHJvbGxlck5hbWUgaW4gdHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICAkbGlua05vZGUuZGF0YSgnJCcgKyBjb250cm9sbGVyTmFtZSArICdDb250cm9sbGVyJywgdHJhbnNjbHVkZUNvbnRyb2xsZXJzW2NvbnRyb2xsZXJOYW1lXS5pbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkbGlua05vZGUsIHNjb3BlKTtcblxuICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpO1xuICAgICAgICBpZiAoY29tcG9zaXRlTGlua0ZuKSBjb21wb3NpdGVMaW5rRm4oc2NvcGUsICRsaW5rTm9kZSwgJGxpbmtOb2RlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgaWYgKCFjbG9uZUNvbm5lY3RGbikge1xuICAgICAgICAgICRjb21waWxlTm9kZXMgPSBjb21wb3NpdGVMaW5rRm4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkbGlua05vZGU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMocGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGRldGVjdCBNYXRoTUwgYXMgd2VsbC4uLlxuICAgICAgdmFyIG5vZGUgPSBwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnRbMF07XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuICdodG1sJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlTmFtZV8obm9kZSkgIT09ICdmb3JlaWdub2JqZWN0JyAmJiB0b1N0cmluZy5jYWxsKG5vZGUpLm1hdGNoKC9TVkcvKSA/ICdzdmcnIDogJ2h0bWwnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xuICAgICAqIGZvciBhIHBhcnRpY3VsYXIgbm9kZSBhcmUgY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhlIGNvbXBpbGVcbiAgICAgKiBmdW5jdGlvbnMgcmV0dXJuIHZhbHVlcyAtIHRoZSBsaW5raW5nIGZ1bmN0aW9ucyAtIGFyZSBjb21iaW5lZCBpbnRvIGEgY29tcG9zaXRlIGxpbmtpbmdcbiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBhbiBhcnJheSBvZiBub2RlcyBvciBOb2RlTGlzdCB0byBjb21waWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gJHJvb3RFbGVtZW50IElmIHRoZSBub2RlTGlzdCBpcyB0aGUgcm9vdCBvZiB0aGUgY29tcGlsYXRpb24gdHJlZSB0aGVuXG4gICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xuICAgICAqICAgICAgICBuZWVkZWQgc28gdGhhdCB0aGUganFMaXRlIGNvbGxlY3Rpb24gaXRlbXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggd2lkZ2V0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua0ZucyA9IFtdLFxuICAgICAgICAgIC8vIGBub2RlTGlzdGAgY2FuIGJlIGVpdGhlciBhbiBlbGVtZW50J3MgYC5jaGlsZE5vZGVzYCAobGl2ZSBOb2RlTGlzdClcbiAgICAgICAgICAvLyBvciBhIGpxTGl0ZS9qUXVlcnkgY29sbGVjdGlvbiBvciBhbiBhcnJheVxuICAgICAgICAgIG5vdExpdmVMaXN0ID0gaXNBcnJheShub2RlTGlzdCkgfHwgKG5vZGVMaXN0IGluc3RhbmNlb2YganFMaXRlKSxcbiAgICAgICAgICBhdHRycywgZGlyZWN0aXZlcywgbm9kZUxpbmtGbiwgY2hpbGROb2RlcywgY2hpbGRMaW5rRm4sIGxpbmtGbkZvdW5kLCBub2RlTGlua0ZuRm91bmQ7XG5cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgMTEgb25seVxuICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciAjMTE3ODEgYW5kICMxNDkyNFxuICAgICAgICBpZiAobXNpZSA9PT0gMTEpIHtcbiAgICAgICAgICBtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzKG5vZGVMaXN0LCBpLCBub3RMaXZlTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBtdXN0IGFsd2F5cyByZWZlciB0byBgbm9kZUxpc3RbaV1gIGhlcmVhZnRlcixcbiAgICAgICAgLy8gc2luY2UgdGhlIG5vZGVzIGNhbiBiZSByZXBsYWNlZCB1bmRlcm5lYXRoIHVzLlxuICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PT0gMCA/IG1heFByaW9yaXR5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgbm9kZUxpbmtGbiA9IChkaXJlY3RpdmVzLmxlbmd0aClcbiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIFtdLCBbXSwgcHJldmlvdXNDb21waWxlQ29udGV4dClcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoYXR0cnMuJCRlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICEoY2hpbGROb2RlcyA9IG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIWNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGNvbXBpbGVOb2RlcyhjaGlsZE5vZGVzLFxuICAgICAgICAgICAgICAgICBub2RlTGlua0ZuID8gKFxuICAgICAgICAgICAgICAgICAgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgfHwgIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZUxpbmtGbi50cmFuc2NsdWRlKSA6IHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBsaW5rRm5zLnB1c2goaSwgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pO1xuICAgICAgICAgIGxpbmtGbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBub2RlTGlua0ZuRm91bmQgPSBub2RlTGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwXG4gICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXG4gICAgICByZXR1cm4gbGlua0ZuRm91bmQgPyBjb21wb3NpdGVMaW5rRm4gOiBudWxsO1xuXG4gICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIGlkeCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgdmFyIHN0YWJsZU5vZGVMaXN0O1xuXG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm5Gb3VuZCkge1xuICAgICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBpZiBhIG5vZGVMaW5rRm4gcmVtb3ZlcyBvciBhZGRzIGFuIGVsZW1lbnQgYXQgdGhpcyBET00gbGV2ZWwgb3VyXG4gICAgICAgICAgLy8gb2Zmc2V0cyBkb24ndCBnZXQgc2NyZXdlZCB1cFxuICAgICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5ldyBBcnJheShub2RlTGlzdExlbmd0aCk7XG5cbiAgICAgICAgICAvLyBjcmVhdGUgYSBzcGFyc2UgYXJyYXkgYnkgb25seSBjb3B5aW5nIHRoZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgbGlua0ZuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtGbnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGlkeCA9IGxpbmtGbnNbaV07XG4gICAgICAgICAgICBzdGFibGVOb2RlTGlzdFtpZHhdID0gbm9kZUxpc3RbaWR4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBub2RlTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gbGlua0Zucy5sZW5ndGg7IGkgPCBpaTspIHtcbiAgICAgICAgICBub2RlID0gc3RhYmxlTm9kZUxpc3RbbGlua0Zuc1tpKytdXTtcbiAgICAgICAgICBub2RlTGlua0ZuID0gbGlua0Zuc1tpKytdO1xuICAgICAgICAgIGNoaWxkTGlua0ZuID0gbGlua0Zuc1tpKytdO1xuXG4gICAgICAgICAgaWYgKG5vZGVMaW5rRm4pIHtcbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oanFMaXRlKG5vZGUpLCBjaGlsZFNjb3BlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKFxuICAgICAgICAgICAgICAgICAgc2NvcGUsIG5vZGVMaW5rRm4udHJhbnNjbHVkZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCAkcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChjaGlsZExpbmtGbikge1xuICAgICAgICAgICAgY2hpbGRMaW5rRm4oc2NvcGUsIG5vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25zZWN1dGl2ZVRleHROb2Rlcyhub2RlTGlzdCwgaWR4LCBub3RMaXZlTGlzdCkge1xuICAgICAgdmFyIG5vZGUgPSBub2RlTGlzdFtpZHhdO1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIHZhciBzaWJsaW5nO1xuXG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX1RFWFQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50ID8gbm9kZS5uZXh0U2libGluZyA6IG5vZGVMaXN0W2lkeCArIDFdO1xuICAgICAgICBpZiAoIXNpYmxpbmcgfHwgc2libGluZy5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX1RFWFQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUubm9kZVZhbHVlID0gbm9kZS5ub2RlVmFsdWUgKyBzaWJsaW5nLm5vZGVWYWx1ZTtcblxuICAgICAgICBpZiAoc2libGluZy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3RMaXZlTGlzdCAmJiBzaWJsaW5nID09PSBub2RlTGlzdFtpZHggKyAxXSkge1xuICAgICAgICAgIG5vZGVMaXN0LnNwbGljZShpZHggKyAxLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgIGZ1bmN0aW9uIGJvdW5kVHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIGNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBjb250YWluaW5nU2NvcGUpIHtcblxuICAgICAgICBpZiAoIXRyYW5zY2x1ZGVkU2NvcGUpIHtcbiAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlID0gc2NvcGUuJG5ldyhmYWxzZSwgY29udGFpbmluZ1Njb3BlKTtcbiAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlLiQkdHJhbnNjbHVkZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zY2x1ZGVGbih0cmFuc2NsdWRlZFNjb3BlLCBjbG9uZUZuLCB7XG4gICAgICAgICAgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm46IHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4sXG4gICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzOiBjb250cm9sbGVycyxcbiAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50OiBmdXR1cmVQYXJlbnRFbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBuZWVkICB0byBhdHRhY2ggdGhlIHRyYW5zY2x1c2lvbiBzbG90cyBvbnRvIHRoZSBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAvLyBzbyB0aGF0IHRoZXkgYXJlIGF2YWlsYWJsZSBpbnNpZGUgdGhlIGBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZWAgZnVuY3Rpb25cbiAgICAgIHZhciBib3VuZFNsb3RzID0gYm91bmRUcmFuc2NsdWRlRm4uJCRzbG90cyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgZm9yICh2YXIgc2xvdE5hbWUgaW4gdHJhbnNjbHVkZUZuLiQkc2xvdHMpIHtcbiAgICAgICAgaWYgKHRyYW5zY2x1ZGVGbi4kJHNsb3RzW3Nsb3ROYW1lXSkge1xuICAgICAgICAgIGJvdW5kU2xvdHNbc2xvdE5hbWVdID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbi4kJHNsb3RzW3Nsb3ROYW1lXSwgcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYm91bmRTbG90c1tzbG90TmFtZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29rcyBmb3IgZGlyZWN0aXZlcyBvbiB0aGUgZ2l2ZW4gbm9kZSBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkaXJlY3RpdmUgY29sbGVjdGlvbiB3aGljaCBpc1xuICAgICAqIHNvcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSBkaXJlY3RpdmVzIEFuIGFycmF5IHRvIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhZGRlZCB0by4gVGhpcyBhcnJheSBpcyBzb3J0ZWQgYmVmb3JlXG4gICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLlxuICAgICAqIEBwYXJhbSBhdHRycyBUaGUgc2hhcmVkIGF0dHJzIG9iamVjdCB3aGljaCBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBub3JtYWxpemVkIGF0dHJpYnV0ZXMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbGxlY3REaXJlY3RpdmVzKG5vZGUsIGRpcmVjdGl2ZXMsIGF0dHJzLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlLFxuICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgbm9kZU5hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lO1xuXG4gICAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgTk9ERV9UWVBFX0VMRU1FTlQ6IC8qIEVsZW1lbnQgKi9cblxuICAgICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKG5vZGUpO1xuXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGF0dHJpYnV0ZXNcbiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgaiA9IDAsIGpqID0gbkF0dHJzICYmIG5BdHRycy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICB2YXIgYXR0clN0YXJ0TmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGF0dHJFbmROYW1lID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGF0dHIgPSBuQXR0cnNbal07XG4gICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgdmFsdWUgPSBhdHRyLnZhbHVlO1xuXG4gICAgICAgICAgICAvLyBzdXBwb3J0IG5nQXR0ciBhdHRyaWJ1dGUgYmluZGluZ1xuICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlzTmdBdHRyID0gTkdfQVRUUl9CSU5ESU5HLnRlc3QobmdBdHRyTmFtZSk7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJylcbiAgICAgICAgICAgICAgICAuc3Vic3RyKDgpLnJlcGxhY2UoL18oLikvZywgZnVuY3Rpb24obWF0Y2gsIGxldHRlcikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbXVsdGlFbGVtZW50TWF0Y2ggPSBuZ0F0dHJOYW1lLm1hdGNoKE1VTFRJX0VMRU1FTlRfRElSX1JFKTtcbiAgICAgICAgICAgIGlmIChtdWx0aUVsZW1lbnRNYXRjaCAmJiBkaXJlY3RpdmVJc011bHRpRWxlbWVudChtdWx0aUVsZW1lbnRNYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgYXR0clN0YXJ0TmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgIGF0dHJFbmROYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSA1KSArICdlbmQnO1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSA2KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGF0dHJzTWFwW25OYW1lXSA9IG5hbWU7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgfHwgIWF0dHJzLmhhc093blByb3BlcnR5KG5OYW1lKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cnVlOyAvLyBwcmVzZW5jZSBtZWFucyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuTmFtZSwgaXNOZ0F0dHIpO1xuICAgICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIGF0dHJTdGFydE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgIC8vIEhpZGRlbiBpbnB1dCBlbGVtZW50cyBjYW4gaGF2ZSBzdHJhbmdlIGJlaGF2aW91ciB3aGVuIG5hdmlnYXRpbmcgYmFjayB0byB0aGUgcGFnZVxuICAgICAgICAgICAgLy8gVGhpcyB0ZWxscyB0aGUgYnJvd3NlciBub3QgdG8gdHJ5IHRvIGNhY2hlIGFuZCByZWluc3RhdGUgcHJldmlvdXMgdmFsdWVzXG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmVcbiAgICAgICAgICBpZiAoIWNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWQpIGJyZWFrO1xuICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgICAgIGlmIChpc09iamVjdChjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIC8vIE1heWJlIFNWR0FuaW1hdGVkU3RyaW5nXG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5hbmltVmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNTdHJpbmcoY2xhc3NOYW1lKSAmJiBjbGFzc05hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gQ0xBU1NfRElSRUNUSVZFX1JFR0VYUC5leGVjKGNsYXNzTmFtZSkpKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0MnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfVEVYVDogLyogVGV4dCBOb2RlICovXG4gICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfQ09NTUVOVDogLyogQ29tbWVudCAqL1xuICAgICAgICAgIGlmICghY29tbWVudERpcmVjdGl2ZXNFbmFibGVkKSBicmVhaztcbiAgICAgICAgICBjb2xsZWN0Q29tbWVudERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2xsZWN0Q29tbWVudERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgIC8vIGZ1bmN0aW9uIGNyZWF0ZWQgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSwgdHJ5L2NhdGNoIGRpc2FibGVzXG4gICAgICAvLyB0aGUgb3B0aW1pemF0aW9uIG9mIHRoZSB3aG9sZSBmdW5jdGlvbiAjMTQ4NDhcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTtcbiAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnTScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzJdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gdHVybnMgb3V0IHRoYXQgdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzIElFOSB0aHJvd3MgZXJyb3JzIHdoZW4gb25lIGF0dGVtcHRzIHRvIHJlYWRcbiAgICAgICAgLy8gY29tbWVudCdzIG5vZGUgdmFsdWUuXG4gICAgICAgIC8vIEp1c3QgaWdub3JlIGl0IGFuZCBjb250aW51ZS4gKENhbid0IHNlZW0gdG8gcmVwcm9kdWNlIGluIHRlc3QgY2FzZS4pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBub2RlIHdpdGggYSBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kc1xuICAgICAqIGRpcmVjdGl2ZS1lbmQuXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLFxuICAgICAgICAgICAgICAgICAgICAgICdVbnRlcm1pbmF0ZWQgYXR0cmlidXRlLCBmb3VuZCBcXCd7MH1cXCcgYnV0IG5vIG1hdGNoaW5nIFxcJ3sxfVxcJyBmb3VuZC4nLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIGRlcHRoKys7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gd2hpbGUgKGRlcHRoID4gMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ganFMaXRlKG5vZGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcmFwcGVyIGZvciBsaW5raW5nIGZ1bmN0aW9uIHdoaWNoIGNvbnZlcnRzIG5vcm1hbCBsaW5raW5nIGZ1bmN0aW9uIGludG8gYSBncm91cGVkXG4gICAgICogbGlua2luZyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gbGlua0ZuXG4gICAgICogQHBhcmFtIGF0dHJTdGFydFxuICAgICAqIEBwYXJhbSBhdHRyRW5kXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ3JvdXBlZEVsZW1lbnRzTGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gZ2VuZXJhdG9yIHRoYXQgaXMgdXNlZCB0byBzdXBwb3J0IGJvdGggZWFnZXIgYW5kIGxhenkgY29tcGlsYXRpb25cbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBlYWdlclxuICAgICAqIEBwYXJhbSAkY29tcGlsZU5vZGVzXG4gICAgICogQHBhcmFtIHRyYW5zY2x1ZGVGblxuICAgICAqIEBwYXJhbSBtYXhQcmlvcml0eVxuICAgICAqIEBwYXJhbSBpZ25vcmVEaXJlY3RpdmVcbiAgICAgKiBAcGFyYW0gcHJldmlvdXNDb21waWxlQ29udGV4dFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxhdGlvbkdlbmVyYXRvcihlYWdlciwgJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgY29tcGlsZWQ7XG5cbiAgICAgIGlmIChlYWdlcikge1xuICAgICAgICByZXR1cm4gY29tcGlsZSgkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qKiBAdGhpcyAqLyBmdW5jdGlvbiBsYXp5Q29tcGlsYXRpb24oKSB7XG4gICAgICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgICAgICBjb21waWxlZCA9IGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcblxuICAgICAgICAgIC8vIE51bGwgb3V0IGFsbCBvZiB0aGVzZSByZWZlcmVuY2VzIGluIG9yZGVyIHRvIG1ha2UgdGhlbSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHBvdGVudGlhbGx5IGxvbmcgbGl2ZWQgY2xvc3VyZVxuICAgICAgICAgICRjb21waWxlTm9kZXMgPSB0cmFuc2NsdWRlRm4gPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkLCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoaXMgbWV0aG9kXG4gICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBvZiB0aGUgZGlyZWN0aXZlcyBpZiB0aGUgdGVybWluYWwgZGlyZWN0aXZlIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi5cbiAgICAgKiAgICAgICAgdGhpcyBuZWVkcyB0byBiZSBwcmUtc29ydGVkIGJ5IHByaW9yaXR5IG9yZGVyLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gY29tcGlsZU5vZGUgVGhlIHJhdyBET00gbm9kZSB0byBhcHBseSB0aGUgY29tcGlsZSBmdW5jdGlvbnMgdG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ld1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSB7SlFMaXRlfSBqcUNvbGxlY3Rpb24gSWYgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZSB0aGVuIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUgQW4gb3B0aW9uYWwgZGlyZWN0aXZlIHRoYXQgd2lsbCBiZSBpZ25vcmVkIHdoZW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxpbmcgdGhlIHRyYW5zY2x1c2lvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHBvc3RMaW5rRm5zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgQ29udGV4dCB1c2VkIGZvciBwcmV2aW91cyBjb21waWxhdGlvbiBvZiB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGxpbmtGblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcUNvbGxlY3Rpb24sIG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IHx8IHt9O1xuXG4gICAgICB2YXIgdGVybWluYWxQcmlvcml0eSA9IC1OdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc1RlbXBsYXRlID0gZmFsc2UsXG4gICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcbiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgZGlkU2NhbkZvck11bHRpcGxlVHJhbnNjbHVzaW9uID0gZmFsc2UsXG4gICAgICAgICAgbWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciA9IGZhbHNlLFxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlO1xuXG4gICAgICAvLyBleGVjdXRlcyBhbGwgZGlyZWN0aXZlcyBvbiB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgdmFyIGF0dHJTdGFydCA9IGRpcmVjdGl2ZS4kJHN0YXJ0O1xuICAgICAgICB2YXIgYXR0ckVuZCA9IGRpcmVjdGl2ZS4kJGVuZDtcblxuICAgICAgICAvLyBjb2xsZWN0IG11bHRpYmxvY2sgc2VjdGlvbnNcbiAgICAgICAgaWYgKGF0dHJTdGFydCkge1xuICAgICAgICAgICRjb21waWxlTm9kZSA9IGdyb3VwU2Nhbihjb21waWxlTm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgfVxuICAgICAgICAkdGVtcGxhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRlcm1pbmFsUHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpIHtcbiAgICAgICAgICBicmVhazsgLy8gcHJldmVudCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgZGlyZWN0aXZlc1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGU7XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlKSB7XG5cbiAgICAgICAgICAvLyBza2lwIHRoZSBjaGVjayBmb3IgZGlyZWN0aXZlcyB3aXRoIGFzeW5jIHRlbXBsYXRlcywgd2UnbGwgY2hlY2sgdGhlIGRlcml2ZWQgc3luY1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSB3aGVuIHRoZSB0ZW1wbGF0ZSBhcnJpdmVzXG4gICAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhbiBpc29sYXRlZCBzY29wZS5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBzY29wZSBvZiBhbnkga2luZCBhbHJlYWR5XG4gICAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCduZXcvaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhIGNoaWxkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIGlzb2xhdGVkIHNjb3BlIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gbmV3U2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lO1xuXG4gICAgICAgIC8vIElmIHdlIGVuY291bnRlciBhIGNvbmRpdGlvbiB0aGF0IGNhbiByZXN1bHQgaW4gdHJhbnNjbHVzaW9uIG9uIHRoZSBkaXJlY3RpdmUsXG4gICAgICAgIC8vIHRoZW4gc2NhbiBhaGVhZCBpbiB0aGUgcmVtYWluaW5nIGRpcmVjdGl2ZXMgZm9yIG90aGVycyB0aGF0IG1heSBjYXVzZSBhIG11bHRpcGxlXG4gICAgICAgIC8vIHRyYW5zY2x1c2lvbiBlcnJvciB0byBiZSB0aHJvd24gZHVyaW5nIHRoZSBjb21waWxhdGlvbiBwcm9jZXNzLiAgSWYgYSBtYXRjaGluZyBkaXJlY3RpdmVcbiAgICAgICAgLy8gaXMgZm91bmQsIHRoZW4gd2Uga25vdyB0aGF0IHdoZW4gd2UgZW5jb3VudGVyIGEgdHJhbnNjbHVkZWQgZGlyZWN0aXZlLCB3ZSBuZWVkIHRvIGVhZ2VybHlcbiAgICAgICAgLy8gY29tcGlsZSB0aGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGRvaW5nIGl0IGxhemlseSBpbiBvcmRlciB0byB0aHJvd1xuICAgICAgICAvLyBleGNlcHRpb25zIGF0IHRoZSBjb3JyZWN0IHRpbWVcbiAgICAgICAgaWYgKCFkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gJiYgKChkaXJlY3RpdmUucmVwbGFjZSAmJiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsIHx8IGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICB8fCAoZGlyZWN0aXZlLnRyYW5zY2x1ZGUgJiYgIWRpcmVjdGl2ZS4kJHRsYikpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbmRpZGF0ZURpcmVjdGl2ZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNjYW5uaW5nSW5kZXggPSBpICsgMTsgKGNhbmRpZGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbc2Nhbm5pbmdJbmRleCsrXSk7KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2FuZGlkYXRlRGlyZWN0aXZlLnRyYW5zY2x1ZGUgJiYgIWNhbmRpZGF0ZURpcmVjdGl2ZS4kJHRsYilcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IChjYW5kaWRhdGVEaXJlY3RpdmUucmVwbGFjZSAmJiAoY2FuZGlkYXRlRGlyZWN0aXZlLnRlbXBsYXRlVXJsIHx8IGNhbmRpZGF0ZURpcmVjdGl2ZS50ZW1wbGF0ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGlkU2NhbkZvck11bHRpcGxlVHJhbnNjbHVzaW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGlyZWN0aXZlLnRlbXBsYXRlVXJsICYmIGRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBjb250cm9sbGVyRGlyZWN0aXZlcyB8fCBjcmVhdGVNYXAoKTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnXFwnJyArIGRpcmVjdGl2ZU5hbWUgKyAnXFwnIGNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUudHJhbnNjbHVkZTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUpIHtcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBuZ0lmIGFuZCBuZ1JlcGVhdCBzbyB0aGF0IHdlIGRvbid0IGNvbXBsYWluIGFib3V0IGR1cGxpY2F0ZSB0cmFuc2NsdXNpb24uXG4gICAgICAgICAgLy8gVGhpcyBvcHRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBkaXJlY3RpdmVzIHRoYXQga25vdyBob3cgdG8gc2FmZWx5IGhhbmRsZSBlbGVtZW50IHRyYW5zY2x1c2lvbixcbiAgICAgICAgICAvLyB3aGVyZSB0aGUgdHJhbnNjbHVkZWQgbm9kZXMgYXJlIGFkZGVkIG9yIHJlcGxhY2VkIGFmdGVyIGxpbmtpbmcuXG4gICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCR0bGIpIHtcbiAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgJHRlbXBsYXRlID0gJGNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPVxuICAgICAgICAgICAgICAgIGpxTGl0ZShjb21waWxlLiQkY3JlYXRlQ29tbWVudChkaXJlY3RpdmVOYW1lLCB0ZW1wbGF0ZUF0dHJzW2RpcmVjdGl2ZU5hbWVdKSk7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDwgNTBcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0MDQxXG5cbiAgICAgICAgICAgIC8vIEluIHRoZSB2ZXJzaW9ucyBvZiBWOCBwcmlvciB0byBDaHJvbWUgNTAsIHRoZSBkb2N1bWVudCBmcmFnbWVudCB0aGF0IGlzIGNyZWF0ZWRcbiAgICAgICAgICAgIC8vIGluIHRoZSBgcmVwbGFjZVdpdGhgIGZ1bmN0aW9uIGlzIGltcHJvcGVybHkgZ2FyYmFnZSBjb2xsZWN0ZWQgZGVzcGl0ZSBzdGlsbFxuICAgICAgICAgICAgLy8gYmVpbmcgcmVmZXJlbmNlZCBieSB0aGUgYHBhcmVudE5vZGVgIHByb3BlcnR5IG9mIGFsbCBvZiB0aGUgY2hpbGQgbm9kZXMuICBCeSBhZGRpbmdcbiAgICAgICAgICAgIC8vIGEgcmVmZXJlbmNlIHRvIHRoZSBmcmFnbWVudCB2aWEgYSBkaWZmZXJlbnQgcHJvcGVydHksIHdlIGNhbiBhdm9pZCB0aGF0IGluY29ycmVjdFxuICAgICAgICAgICAgLy8gYmVoYXZpb3IuXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBsaW5lIGFmdGVyIENocm9tZSA1MCBoYXMgYmVlbiByZWxlYXNlZFxuICAgICAgICAgICAgJHRlbXBsYXRlWzBdLiQkcGFyZW50Tm9kZSA9ICR0ZW1wbGF0ZVswXS5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IGNvbXBpbGF0aW9uR2VuZXJhdG9yKG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IsICR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBwYXNzIGluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZWxlbWVudCB0cmFuc2NsdXNpb24gZG9lc24ndCBtYWtlIHNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB2YXIgc2xvdHMgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0cmFuc2NsdXNpb24gc2xvdHMsXG4gICAgICAgICAgICAgIC8vIGNvbGxlY3QgdGhlbSB1cCwgY29tcGlsZSB0aGVtIGFuZCBzdG9yZSB0aGVpciB0cmFuc2NsdXNpb24gZnVuY3Rpb25zXG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuXG4gICAgICAgICAgICAgIHZhciBzbG90TWFwID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgICAgIHZhciBmaWxsZWRTbG90cyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBlbGVtZW50IHNlbGVjdG9yc1xuICAgICAgICAgICAgICBmb3JFYWNoKGRpcmVjdGl2ZVZhbHVlLCBmdW5jdGlvbihlbGVtZW50U2VsZWN0b3IsIHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgYW4gZWxlbWVudCBzZWxlY3RvciBzdGFydHMgd2l0aCBhID8gdGhlbiBpdCBpcyBvcHRpb25hbFxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25hbCA9IChlbGVtZW50U2VsZWN0b3IuY2hhckF0KDApID09PSAnPycpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRTZWxlY3RvciA9IG9wdGlvbmFsID8gZWxlbWVudFNlbGVjdG9yLnN1YnN0cmluZygxKSA6IGVsZW1lbnRTZWxlY3RvcjtcblxuICAgICAgICAgICAgICAgIHNsb3RNYXBbZWxlbWVudFNlbGVjdG9yXSA9IHNsb3ROYW1lO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgZXhwbGljaXRseSBhc3NpZ24gYG51bGxgIHNpbmNlIHRoaXMgaW1wbGllcyB0aGF0IGEgc2xvdCB3YXMgZGVmaW5lZCBidXQgbm90IGZpbGxlZC5cbiAgICAgICAgICAgICAgICAvLyBMYXRlciB3aGVuIGNhbGxpbmcgYm91bmRUcmFuc2NsdXNpb24gZnVuY3Rpb25zIHdpdGggYSBzbG90IG5hbWUgd2Ugb25seSBlcnJvciBpZiB0aGVcbiAgICAgICAgICAgICAgICAvLyBzbG90IGlzIGB1bmRlZmluZWRgXG4gICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIGZpbGxlZFNsb3RzIGNvbnRhaW5zIGB0cnVlYCBmb3IgYWxsIHNsb3RzIHRoYXQgYXJlIGVpdGhlciBvcHRpb25hbCBvciBoYXZlIGJlZW5cbiAgICAgICAgICAgICAgICAvLyBmaWxsZWQuIFRoaXMgaXMgdXNlZCB0byBjaGVjayB0aGF0IHdlIGhhdmUgbm90IG1pc3NlZCBhbnkgcmVxdWlyZWQgc2xvdHNcbiAgICAgICAgICAgICAgICBmaWxsZWRTbG90c1tzbG90TmFtZV0gPSBvcHRpb25hbDtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gQWRkIHRoZSBtYXRjaGluZyBlbGVtZW50cyBpbnRvIHRoZWlyIHNsb3RcbiAgICAgICAgICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGUuY29udGVudHMoKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBzbG90TmFtZSA9IHNsb3RNYXBbZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSldO1xuICAgICAgICAgICAgICAgIGlmIChzbG90TmFtZSkge1xuICAgICAgICAgICAgICAgICAgZmlsbGVkU2xvdHNbc2xvdE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3ROYW1lXSA9IHNsb3RzW3Nsb3ROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3ROYW1lXS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAkdGVtcGxhdGUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vIENoZWNrIGZvciByZXF1aXJlZCBzbG90cyB0aGF0IHdlcmUgbm90IGZpbGxlZFxuICAgICAgICAgICAgICBmb3JFYWNoKGZpbGxlZFNsb3RzLCBmdW5jdGlvbihmaWxsZWQsIHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdyZXFzbG90JywgJ1JlcXVpcmVkIHRyYW5zY2x1c2lvbiBzbG90IGB7MH1gIHdhcyBub3QgZmlsbGVkLicsIHNsb3ROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIHNsb3ROYW1lIGluIHNsb3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsb3RzW3Nsb3ROYW1lXSkge1xuICAgICAgICAgICAgICAgICAgLy8gT25seSBkZWZpbmUgYSB0cmFuc2NsdXNpb24gZnVuY3Rpb24gaWYgdGhlIHNsb3Qgd2FzIGZpbGxlZFxuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgc2xvdHNbc2xvdE5hbWVdLCB0cmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTsgLy8gY2xlYXIgY29udGVudHNcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsIHsgbmVlZHNOZXdTY29wZTogZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlIHx8IGRpcmVjdGl2ZS4kJG5ld1Njb3BlfSk7XG4gICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbi4kJHNsb3RzID0gc2xvdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZSkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKVxuICAgICAgICAgICAgICA/IGRpcmVjdGl2ZS50ZW1wbGF0ZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMpXG4gICAgICAgICAgICAgIDogZGlyZWN0aXZlLnRlbXBsYXRlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGRpcmVjdGl2ZVZhbHVlKTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZShkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oZGlyZWN0aXZlVmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT09IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxydCcsXG4gICAgICAgICAgICAgICAgICAnVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSBcXCd7MH1cXCcgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9JyxcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgdmFyIG5ld1RlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcblxuICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOlxuICAgICAgICAgICAgLy8gLSB0YWtlIHRoZSBhcnJheSBvZiBkaXJlY3RpdmVzIGZvciB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gc3BsaXQgaXQgaW50byB0d28gcGFydHMsIHRob3NlIHRoYXQgYWxyZWFkeSBhcHBsaWVkIChwcm9jZXNzZWQpIGFuZCB0aG9zZSB0aGF0IHdlcmVuJ3QgKHVucHJvY2Vzc2VkKVxuICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eVxuICAgICAgICAgICAgLy8gLSBjb21iaW5lIGRpcmVjdGl2ZXMgYXM6IHByb2Nlc3NlZCArIHRlbXBsYXRlICsgdW5wcm9jZXNzZWRcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIG5ld1RlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpO1xuXG4gICAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgIC8vIFRoZSBvcmlnaW5hbCBkaXJlY3RpdmUgY2F1c2VkIHRoZSBjdXJyZW50IGVsZW1lbnQgdG8gYmUgcmVwbGFjZWQgYnV0IHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgICAvLyBhbHNvIG5lZWRzIHRvIGhhdmUgYSBuZXcgc2NvcGUsIHNvIHdlIG5lZWQgdG8gdGVsbCB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlc1xuICAgICAgICAgICAgICAvLyB0aGF0IHRoZXkgd291bGQgbmVlZCB0byBnZXQgdGhlaXIgc2NvcGUgZnJvbSBmdXJ0aGVyIHVwLCBpZiB0aGV5IHJlcXVpcmUgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVTY29wZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgbmV3U2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KHRlbXBsYXRlRGlyZWN0aXZlcykuY29uY2F0KHVucHJvY2Vzc2VkRGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0ZW1wbGF0ZUF0dHJzLCBuZXdUZW1wbGF0ZUF0dHJzKTtcblxuICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoZGlyZWN0aXZlVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZnVuYy1hc3NpZ25cbiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksICRjb21waWxlTm9kZSxcbiAgICAgICAgICAgICAgdGVtcGxhdGVBdHRycywganFDb2xsZWN0aW9uLCBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlICYmIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0Zucywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzOiBjb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZTogKG5ld1Njb3BlRGlyZWN0aXZlICE9PSBkaXJlY3RpdmUpICYmIG5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZTogbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlOiB0ZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aXZlLmNvbXBpbGUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGlua0ZuID0gZGlyZWN0aXZlLmNvbXBpbGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGRpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcbiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBiaW5kKGNvbnRleHQsIGxpbmtGbiksIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtGbikge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKGJpbmQoY29udGV4dCwgbGlua0ZuLnByZSksIGJpbmQoY29udGV4dCwgbGlua0ZuLnBvc3QpLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHtcbiAgICAgICAgICBub2RlTGlua0ZuLnRlcm1pbmFsID0gdHJ1ZTtcbiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIG5vZGVMaW5rRm4uc2NvcGUgPSBuZXdTY29wZURpcmVjdGl2ZSAmJiBuZXdTY29wZURpcmVjdGl2ZS5zY29wZSA9PT0gdHJ1ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlO1xuICAgICAgbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgPSBoYXNUZW1wbGF0ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZSA9IGNoaWxkVHJhbnNjbHVkZUZuO1xuXG4gICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmU7XG5cbiAgICAgIC8vIG1pZ2h0IGJlIG5vcm1hbCBvciBkZWxheWVkIG5vZGVMaW5rRm4gZGVwZW5kaW5nIG9uIGlmIHRlbXBsYXRlVXJsIGlzIHByZXNlbnRcbiAgICAgIHJldHVybiBub2RlTGlua0ZuO1xuXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICBmdW5jdGlvbiBhZGRMaW5rRm5zKHByZSwgcG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICAgIGlmIChwcmUpIHtcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwcmUgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwcmUsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcHJlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBwcmUuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7XG4gICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkge1xuICAgICAgICAgICAgcHJlID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHByZSwge2lzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmVMaW5rRm5zLnB1c2gocHJlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zdCkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHBvc3QgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIHBvc3QucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHBvc3QuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7XG4gICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkge1xuICAgICAgICAgICAgcG9zdCA9IGNsb25lQW5kQW5ub3RhdGVGbihwb3N0LCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvc3RMaW5rRm5zLnB1c2gocG9zdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBpLCBpaSwgbGlua0ZuLCBpc29sYXRlU2NvcGUsIGNvbnRyb2xsZXJTY29wZSwgZWxlbWVudENvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4sICRlbGVtZW50LFxuICAgICAgICAgICAgYXR0cnMsIHNjb3BlQmluZGluZ0luZm87XG5cbiAgICAgICAgaWYgKGNvbXBpbGVOb2RlID09PSBsaW5rTm9kZSkge1xuICAgICAgICAgIGF0dHJzID0gdGVtcGxhdGVBdHRycztcbiAgICAgICAgICAkZWxlbWVudCA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50ID0ganFMaXRlKGxpbmtOb2RlKTtcbiAgICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCRlbGVtZW50LCB0ZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAvLyB0cmFjayBgYm91bmRUcmFuc2NsdWRlRm5gIHNvIGl0IGNhbiBiZSB1bndyYXBwZWQgaWYgYHRyYW5zY2x1ZGVGbmBcbiAgICAgICAgICAvLyBpcyBsYXRlciBwYXNzZWQgYXMgYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCB0byBgcHVibGljTGlua0ZuYFxuICAgICAgICAgIHRyYW5zY2x1ZGVGbiA9IGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlO1xuICAgICAgICAgIHRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgIC8vIGV4cG9zZSB0aGUgc2xvdHMgb24gdGhlIGAkdHJhbnNjbHVkZWAgZnVuY3Rpb25cbiAgICAgICAgICB0cmFuc2NsdWRlRm4uaXNTbG90RmlsbGVkID0gZnVuY3Rpb24oc2xvdE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWJvdW5kVHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAvLyBJbml0aWFsaXplIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgZm9yIG5ldyBpc29sYXRlIHNjb3BlIGRpcmVjdGl2ZS5cbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRlbGVtZW50LCBpc29sYXRlU2NvcGUsIHRydWUsICEodGVtcGxhdGVEaXJlY3RpdmUgJiYgKHRlbXBsYXRlRGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHxcbiAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlKSkpO1xuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3MgPVxuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUuJCRpc29sYXRlQmluZGluZ3M7XG4gICAgICAgICAgc2NvcGVCaW5kaW5nSW5mbyA9IGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhzY29wZSwgYXR0cnMsIGlzb2xhdGVTY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgICBpZiAoc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKSB7XG4gICAgICAgICAgICBpc29sYXRlU2NvcGUuJG9uKCckZGVzdHJveScsIHNjb3BlQmluZGluZ0luZm8ucmVtb3ZlV2F0Y2hlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBiaW5kVG9Db250cm9sbGVyIGJpbmRpbmdzXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gZWxlbWVudENvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXJEaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXTtcbiAgICAgICAgICB2YXIgYmluZGluZ3MgPSBjb250cm9sbGVyRGlyZWN0aXZlLiQkYmluZGluZ3MuYmluZFRvQ29udHJvbGxlcjtcblxuICAgICAgICAgIGlmIChwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIGlmIChiaW5kaW5ncykge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID1cbiAgICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29udHJvbGxlclJlc3VsdCA9IGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyUmVzdWx0ICE9PSBjb250cm9sbGVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGhhcyBhIHJldHVybiB2YWx1ZSwgb3ZlcndyaXRlIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAvLyBmcm9tIHNldHVwQ29udHJvbGxlcnNcbiAgICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXJSZXN1bHQ7XG4gICAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgY29udHJvbGxlckRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVyUmVzdWx0KTtcbiAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuYmluZGluZ0luZm8ucmVtb3ZlV2F0Y2hlcykge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8ucmVtb3ZlV2F0Y2hlcygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaW5zdGFuY2UgPSBjb250cm9sbGVyKCk7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGNvbnRyb2xsZXJEaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlci5pbnN0YW5jZSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID1cbiAgICAgICAgICAgICAgaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIHRoZSByZXF1aXJlZCBjb250cm9sbGVycyB0byB0aGUgY29udHJvbGxlciwgaWYgYHJlcXVpcmVgIGlzIGFuIG9iamVjdCBhbmQgYGJpbmRUb0NvbnRyb2xsZXJgIGlzIHRydXRoeVxuICAgICAgICBmb3JFYWNoKGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBmdW5jdGlvbihjb250cm9sbGVyRGlyZWN0aXZlLCBuYW1lKSB7XG4gICAgICAgICAgdmFyIHJlcXVpcmUgPSBjb250cm9sbGVyRGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciAmJiAhaXNBcnJheShyZXF1aXJlKSAmJiBpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgICAgICAgZXh0ZW5kKGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXS5pbnN0YW5jZSwgZ2V0Q29udHJvbGxlcnMobmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBpbml0IGFuZCBkZXN0cm95IGxpZmVjeWNsZSBob29rcyBvbiBhbGwgY29udHJvbGxlcnMgdGhhdCBoYXZlIHRoZW1cbiAgICAgICAgZm9yRWFjaChlbGVtZW50Q29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICB2YXIgY29udHJvbGxlckluc3RhbmNlID0gY29udHJvbGxlci5pbnN0YW5jZTtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJG9uQ2hhbmdlcykpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZS4kb25DaGFuZ2VzKGNvbnRyb2xsZXIuYmluZGluZ0luZm8uaW5pdGlhbENoYW5nZXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkluaXQpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJG9uSW5pdCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRkb0NoZWNrKSkge1xuICAgICAgICAgICAgY29udHJvbGxlclNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgY29udHJvbGxlckluc3RhbmNlLiRkb0NoZWNrKCk7IH0pO1xuICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRkb0NoZWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kb25EZXN0cm95KSkge1xuICAgICAgICAgICAgY29udHJvbGxlclNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiBjYWxsT25EZXN0cm95SG9vaygpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUFJFTElOS0lOR1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZUxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGxpbmtGbiA9IHByZUxpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSRUNVUlNJT05cbiAgICAgICAgLy8gV2Ugb25seSBwYXNzIHRoZSBpc29sYXRlIHNjb3BlLCBpZiB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUgaGFzIGEgdGVtcGxhdGUsXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGUgY2hpbGQgZWxlbWVudHMgZG8gbm90IGJlbG9uZyB0byB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUuXG4gICAgICAgIHZhciBzY29wZVRvQ2hpbGQgPSBzY29wZTtcbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSAmJiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlIHx8IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZVVybCA9PT0gbnVsbCkpIHtcbiAgICAgICAgICBzY29wZVRvQ2hpbGQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgY2hpbGRMaW5rRm4oc2NvcGVUb0NoaWxkLCBsaW5rTm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBPU1RMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IHBvc3RMaW5rRm5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgbGlua0ZuID0gcG9zdExpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmlnZ2VyICRwb3N0TGluayBsaWZlY3ljbGUgaG9va3NcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Q29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICB2YXIgY29udHJvbGxlckluc3RhbmNlID0gY29udHJvbGxlci5pbnN0YW5jZTtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKSkge1xuICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRwb3N0TGluaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBhcyBgJHRyYW5zY2x1ZGVgLlxuICAgICAgICAvLyBOb3RlOiBhbGwgYXJndW1lbnRzIGFyZSBvcHRpb25hbCFcbiAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNsb3ROYW1lKSB7XG4gICAgICAgICAgdmFyIHRyYW5zY2x1ZGVDb250cm9sbGVycztcbiAgICAgICAgICAvLyBObyBzY29wZSBwYXNzZWQgaW46XG4gICAgICAgICAgaWYgKCFpc1Njb3BlKHNjb3BlKSkge1xuICAgICAgICAgICAgc2xvdE5hbWUgPSBmdXR1cmVQYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGNsb25lQXR0YWNoRm47XG4gICAgICAgICAgICBjbG9uZUF0dGFjaEZuID0gc2NvcGU7XG4gICAgICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IGVsZW1lbnRDb250cm9sbGVycztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPyAkZWxlbWVudC5wYXJlbnQoKSA6ICRlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2xvdE5hbWUpIHtcbiAgICAgICAgICAgIC8vIHNsb3RUcmFuc2NsdWRlRm4gY2FuIGJlIG9uZSBvZiB0aHJlZSB0aGluZ3M6XG4gICAgICAgICAgICAvLyAgKiBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gLSBhIGZpbGxlZCBzbG90XG4gICAgICAgICAgICAvLyAgKiBgbnVsbGAgLSBhbiBvcHRpb25hbCBzbG90IHRoYXQgd2FzIG5vdCBmaWxsZWRcbiAgICAgICAgICAgIC8vICAqIGB1bmRlZmluZWRgIC0gYSBzbG90IHRoYXQgd2FzIG5vdCBkZWNsYXJlZCAoaS5lLiBpbnZhbGlkKVxuICAgICAgICAgICAgdmFyIHNsb3RUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbi4kJHNsb3RzW3Nsb3ROYW1lXTtcbiAgICAgICAgICAgIGlmIChzbG90VHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzbG90VHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKHNsb3RUcmFuc2NsdWRlRm4pKSB7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub3Nsb3QnLFxuICAgICAgICAgICAgICAgJ05vIHBhcmVudCBkaXJlY3RpdmUgdGhhdCByZXF1aXJlcyBhIHRyYW5zY2x1c2lvbiB3aXRoIHNsb3QgbmFtZSBcInswfVwiLiAnICtcbiAgICAgICAgICAgICAgICdFbGVtZW50OiB7MX0nLFxuICAgICAgICAgICAgICAgc2xvdE5hbWUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2xvbmVBdHRhY2hGbiwgdHJhbnNjbHVkZUNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzY29wZVRvQ2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgaWYgKGlzU3RyaW5nKHJlcXVpcmUpKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJlcXVpcmUubWF0Y2goUkVRVUlSRV9QUkVGSVhfUkVHRVhQKTtcbiAgICAgICAgdmFyIG5hbWUgPSByZXF1aXJlLnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICB2YXIgaW5oZXJpdFR5cGUgPSBtYXRjaFsxXSB8fCBtYXRjaFszXTtcbiAgICAgICAgdmFyIG9wdGlvbmFsID0gbWF0Y2hbMl0gPT09ICc/JztcblxuICAgICAgICAvL0lmIG9ubHkgcGFyZW50cyB0aGVuIHN0YXJ0IGF0IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICBpZiAoaW5oZXJpdFR5cGUgPT09ICdeXicpIHtcbiAgICAgICAgICAkZWxlbWVudCA9ICRlbGVtZW50LnBhcmVudCgpO1xuICAgICAgICAvL090aGVyd2lzZSBhdHRlbXB0IGdldHRpbmcgdGhlIGNvbnRyb2xsZXIgZnJvbSBlbGVtZW50Q29udHJvbGxlcnMgaW4gY2FzZVxuICAgICAgICAvL3RoZSBlbGVtZW50IGlzIHRyYW5zY2x1ZGVkIChhbmQgaGFzIG5vIGRhdGEpIGFuZCB0byBhdm9pZCAuZGF0YSBpZiBwb3NzaWJsZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gZWxlbWVudENvbnRyb2xsZXJzICYmIGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXTtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlLmluc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHZhciBkYXRhTmFtZSA9ICckJyArIG5hbWUgKyAnQ29udHJvbGxlcic7XG4gICAgICAgICAgdmFsdWUgPSBpbmhlcml0VHlwZSA/ICRlbGVtZW50LmluaGVyaXRlZERhdGEoZGF0YU5hbWUpIDogJGVsZW1lbnQuZGF0YShkYXRhTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlICYmICFvcHRpb25hbCkge1xuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdjdHJlcScsXG4gICAgICAgICAgICAgICdDb250cm9sbGVyIFxcJ3swfVxcJywgcmVxdWlyZWQgYnkgZGlyZWN0aXZlIFxcJ3sxfVxcJywgY2FuXFwndCBiZSBmb3VuZCEnLFxuICAgICAgICAgICAgICBuYW1lLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHJlcXVpcmUpKSB7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlcXVpcmUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhbHVlW2ldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZVtpXSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocmVxdWlyZSkpIHtcbiAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbihjb250cm9sbGVyLCBwcm9wZXJ0eSkge1xuICAgICAgICAgIHZhbHVlW3Byb3BlcnR5XSA9IGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIGNvbnRyb2xsZXIsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXBDb250cm9sbGVycygkZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgY29udHJvbGxlckRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgc2NvcGUsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgdmFyIGVsZW1lbnRDb250cm9sbGVycyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgZm9yICh2YXIgY29udHJvbGxlcktleSBpbiBjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0gY29udHJvbGxlckRpcmVjdGl2ZXNbY29udHJvbGxlcktleV07XG4gICAgICAgIHZhciBsb2NhbHMgPSB7XG4gICAgICAgICAgJHNjb3BlOiBkaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAkZWxlbWVudDogJGVsZW1lbnQsXG4gICAgICAgICAgJGF0dHJzOiBhdHRycyxcbiAgICAgICAgICAkdHJhbnNjbHVkZTogdHJhbnNjbHVkZUZuXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgPT09ICdAJykge1xuICAgICAgICAgIGNvbnRyb2xsZXIgPSBhdHRyc1tkaXJlY3RpdmUubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzLCB0cnVlLCBkaXJlY3RpdmUuY29udHJvbGxlckFzKTtcblxuICAgICAgICAvLyBGb3IgZGlyZWN0aXZlcyB3aXRoIGVsZW1lbnQgdHJhbnNjbHVzaW9uIHRoZSBlbGVtZW50IGlzIGEgY29tbWVudC5cbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlIC5kYXRhIHdpbGwgbm90IGF0dGFjaCBhbnkgZGF0YS5cbiAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhXG4gICAgICAgIC8vIGxhdGVyLCBvbmNlIHdlIGhhdmUgdGhlIGFjdHVhbCBlbGVtZW50LlxuICAgICAgICBlbGVtZW50Q29udHJvbGxlcnNbZGlyZWN0aXZlLm5hbWVdID0gY29udHJvbGxlckluc3RhbmNlO1xuICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVySW5zdGFuY2UuaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDb250cm9sbGVycztcbiAgICB9XG5cbiAgICAvLyBEZXBlbmRpbmcgdXBvbiB0aGUgY29udGV4dCBpbiB3aGljaCBhIGRpcmVjdGl2ZSBmaW5kcyBpdHNlbGYgaXQgbWlnaHQgbmVlZCB0byBoYXZlIGEgbmV3IGlzb2xhdGVkXG4gICAgLy8gb3IgY2hpbGQgc2NvcGUgY3JlYXRlZC4gRm9yIGluc3RhbmNlOlxuICAgIC8vICogaWYgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBwdWxsZWQgaW50byBhIHRlbXBsYXRlIGJlY2F1c2UgYW5vdGhlciBkaXJlY3RpdmUgd2l0aCBhIGhpZ2hlciBwcmlvcml0eVxuICAgIC8vIGFza2VkIGZvciBlbGVtZW50IHRyYW5zY2x1c2lvblxuICAgIC8vICogaWYgdGhlIGRpcmVjdGl2ZSBpdHNlbGYgYXNrcyBmb3IgdHJhbnNjbHVzaW9uIGJ1dCBpdCBpcyBhdCB0aGUgcm9vdCBvZiBhIHRlbXBsYXRlIGFuZCB0aGUgb3JpZ2luYWxcbiAgICAvLyBlbGVtZW50IHdhcyByZXBsYWNlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEyOTM2XG4gICAgZnVuY3Rpb24gbWFya0RpcmVjdGl2ZVNjb3BlKGRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgbmV3U2NvcGUpIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICBkaXJlY3RpdmVzW2pdID0gaW5oZXJpdChkaXJlY3RpdmVzW2pdLCB7JCRpc29sYXRlU2NvcGU6IGlzb2xhdGVTY29wZSwgJCRuZXdTY29wZTogbmV3U2NvcGV9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCBkZWNvcmF0ZXMgaXQgd2l0aCBleGNlcHRpb24gaGFuZGxpbmcgYW5kIHByb3BlciBwYXJhbWV0ZXJzLiBXZVxuICAgICAqIGNhbGwgdGhpcyB0aGUgYm91bmREaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gVGhlIGRpcmVjdGl2ZSBtdXN0IGJlIGZvdW5kIGluIHNwZWNpZmljIGZvcm1hdC5cbiAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczpcbiAgICAgKlxuICAgICAqICAgKiBgRWA6IGVsZW1lbnQgbmFtZVxuICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZVxuICAgICAqICAgKiBgQ2A6IGNsYXNzXG4gICAgICogICAqIGBNYDogY29tbWVudFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgc3RhcnRBdHRyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQXR0ck5hbWUpIHtcbiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsO1xuICAgICAgdmFyIG1hdGNoID0gbnVsbDtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgIGlmICgoaXNVbmRlZmluZWQobWF4UHJpb3JpdHkpIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJlxuICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0QXR0ck5hbWUpIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkYmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgdmFyIGJpbmRpbmdzID0gZGlyZWN0aXZlLiQkYmluZGluZ3MgPVxuICAgICAgICAgICAgICAgICAgcGFyc2VEaXJlY3RpdmVCaW5kaW5ncyhkaXJlY3RpdmUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGJpbmRpbmdzLmlzb2xhdGVTY29wZSkpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRpc29sYXRlQmluZGluZ3MgPSBiaW5kaW5ncy5pc29sYXRlU2NvcGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgcmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgbXVsdGktZWxlbWVudCBkaXJlY3RpdmUsXG4gICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICogdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgIGlmIChkaXJlY3RpdmUubXVsdGlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlbGVtZW50IGlzIHJlcGxhY2VkIHdpdGggSFRNTCB0ZW1wbGF0ZSB0aGVuIHRoZSBuZXcgYXR0cmlidXRlc1xuICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uXG4gICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7XG4gICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcbiAgICAgICAgICBkc3RBdHRyID0gZHN0LiRhdHRyO1xuXG4gICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnRcbiAgICAgIGZvckVhY2goZHN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICBpZiAoc3JjW2tleV0gJiYgc3JjW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHNyY1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3RcbiAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGFscmVhZHkgc2V0IHRoaXMgYXR0cmlidXRlIGluIHRoZSBsb29wIGFib3ZlLlxuICAgICAgICAvLyBgZHN0YCB3aWxsIG5ldmVyIGNvbnRhaW4gaGFzT3duUHJvcGVydHkgYXMgRE9NIHBhcnNlciB3b24ndCBsZXQgaXQuXG4gICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiBcIkludmFsaWRDaGFyYWN0ZXJFcnJvcjogRE9NIEV4Y2VwdGlvbiA1XCIgZXJyb3IgaWYgeW91XG4gICAgICAgIC8vIGhhdmUgYW4gYXR0cmlidXRlIGxpa2UgXCJoYXMtb3duLXByb3BlcnR5XCIgb3IgXCJkYXRhLWhhcy1vd24tcHJvcGVydHlcIiwgZXRjLlxuICAgICAgICBpZiAoIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgIGRzdFtrZXldID0gdmFsdWU7XG5cbiAgICAgICAgICBpZiAoa2V5ICE9PSAnY2xhc3MnICYmIGtleSAhPT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgZHN0QXR0cltrZXldID0gc3JjQXR0cltrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICRyb290RWxlbWVudCwgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua1F1ZXVlID0gW10sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLFxuICAgICAgICAgIGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF0sXG4gICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLFxuICAgICAgICAgIGRlcml2ZWRTeW5jRGlyZWN0aXZlID0gaW5oZXJpdChvcmlnQXN5bmNEaXJlY3RpdmUsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCByZXBsYWNlOiBudWxsLCAkJG9yaWdpbmFsRGlyZWN0aXZlOiBvcmlnQXN5bmNEaXJlY3RpdmVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0ZW1wbGF0ZVVybCA9IChpc0Z1bmN0aW9uKG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCkpXG4gICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKVxuICAgICAgICAgICAgICA6IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCxcbiAgICAgICAgICB0ZW1wbGF0ZU5hbWVzcGFjZSA9IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZTtcblxuICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7XG5cbiAgICAgICR0ZW1wbGF0ZVJlcXVlc3QodGVtcGxhdGVVcmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG5cbiAgICAgICAgICBjb250ZW50ID0gZGVub3JtYWxpemVUZW1wbGF0ZShjb250ZW50KTtcblxuICAgICAgICAgIGlmIChvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUodGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oY29udGVudCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgICdUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0nLFxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLm5hbWUsIHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVtcFRlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnQXN5bmNEaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBkaXJlY3RpdmUgdGhhdCBjYXVzZWQgdGhlIHRlbXBsYXRlIHRvIGJlIGxvYWRlZCBhc3luYyByZXF1aXJlZFxuICAgICAgICAgICAgICAvLyBhbiBpc29sYXRlIHNjb3BlXG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVTY29wZSh0ZW1wbGF0ZURpcmVjdGl2ZXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcblxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbihub2RlLCBpKSB7XG4gICAgICAgICAgICBpZiAobm9kZSA9PT0gY29tcGlsZU5vZGUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2ldID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVbMF0uY2hpbGROb2RlcywgY2hpbGRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgd2hpbGUgKGxpbmtRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBzY29wZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTGlua05vZGUgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBsaW5rUm9vdEVsZW1lbnQgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBib3VuZFRyYW5zY2x1ZGVGbiA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSAhPT0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IGJlZm9yZVRlbXBsYXRlTGlua05vZGUuY2xhc3NOYW1lO1xuXG4gICAgICAgICAgICAgIGlmICghKHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSkge1xuICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpO1xuXG4gICAgICAgICAgICAgIC8vIENvcHkgaW4gQ1NTIGNsYXNzZXMgZnJvbSBvcmlnaW5hbCBub2RlXG4gICAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobGlua05vZGUpLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+JyArIHRlbXBsYXRlICsgJzwvJyArIHR5cGUgKyAnPic7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2RlcztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIGF0dHJOb3JtYWxpemVkTmFtZSkge1xuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyY2RvYycpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBBbGwgdGFncyB3aXRoIHNyYyBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBSRVNPVVJDRV9VUkwgdmFsdWUsIGV4Y2VwdCBmb3JcbiAgICAgIC8vIGltZyBhbmQgdmFyaW91cyBodG1sNSBtZWRpYSB0YWdzLlxuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyYycgfHwgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnbmdTcmMnKSB7XG4gICAgICAgIGlmIChbJ2ltZycsICd2aWRlbycsICdhdWRpbycsICdzb3VyY2UnLCAndHJhY2snXS5pbmRleE9mKHRhZykgPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgICB9XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICB9IGVsc2UgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3hsaW5rSHJlZicgfHxcbiAgICAgICAgICAodGFnID09PSAnZm9ybScgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnYWN0aW9uJykgfHxcbiAgICAgICAgICAvLyBsaW5rcyBjYW4gYmUgc3R5bGVzaGVldHMgb3IgaW1wb3J0cywgd2hpY2ggY2FuIHJ1biBzY3JpcHQgaW4gdGhlIGN1cnJlbnQgb3JpZ2luXG4gICAgICAgICAgKHRhZyA9PT0gJ2xpbmsnICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ2hyZWYnKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAkc2NlLlJFU09VUkNFX1VSTDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSwgaXNOZ0F0dHIpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgdmFyIG11c3RIYXZlRXhwcmVzc2lvbiA9ICFpc05nQXR0cjtcbiAgICAgIHZhciBhbGxPck5vdGhpbmcgPSBBTExfT1JfTk9USElOR19BVFRSU1tuYW1lXSB8fCBpc05nQXR0cjtcblxuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgaWYgKG5hbWUgPT09ICdtdWx0aXBsZScgJiYgbm9kZU5hbWVfKG5vZGUpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignc2VsbXVsdGknLFxuICAgICAgICAgICAgJ0JpbmRpbmcgdG8gdGhlIFxcJ211bHRpcGxlXFwnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0nLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2RvbWV2ZW50cycsXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnbmctIHZlcnNpb25zIChzdWNoIGFzIG5nLWNsaWNrIGluc3RlYWQgb2Ygb25jbGljaykgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgZGlyZWN0aXZlcy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHVwZGF0ZUNsYXNzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBqcUxpdGUucmVwbGFjZVdpdGgsIHdoaWNoIGNhbiByZXBsYWNlIGl0ZW1zIHdoaWNoXG4gICAgICogaGF2ZSBubyBwYXJlbnRzLCBwcm92aWRlZCB0aGF0IHRoZSBjb250YWluaW5nIGpxTGl0ZSBjb2xsZWN0aW9uIGlzIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtKcUxpdGU9fSAkcm9vdEVsZW1lbnQgVGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZS4gVXNlZCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHJvb3Qgb2YgdGhlIHRyZWUuXG4gICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoZWxsLCBidXQgcmVwbGFjZSBpdHMgRE9NIG5vZGUgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbmV3IERPTSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgZWxlbWVudHNUb1JlbW92ZSwgbmV3Tm9kZSkge1xuICAgICAgdmFyIGZpcnN0RWxlbWVudFRvUmVtb3ZlID0gZWxlbWVudHNUb1JlbW92ZVswXSxcbiAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLFxuICAgICAgICAgIHBhcmVudCA9IGZpcnN0RWxlbWVudFRvUmVtb3ZlLnBhcmVudE5vZGUsXG4gICAgICAgICAgaSwgaWk7XG5cbiAgICAgIGlmICgkcm9vdEVsZW1lbnQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnRbaV0gPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xuICAgICAgICAgICAgICBpZiAoajIgPCBqaikge1xuICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0XG4gICAgICAgICAgICAvLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGV4dC9cbiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGVuZCBhbGwgdGhlIGBlbGVtZW50c1RvUmVtb3ZlYCB0byBhIGZyYWdtZW50LiBUaGlzIHdpbGwuLi5cbiAgICAgIC8vIC0gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgRE9NXG4gICAgICAvLyAtIGFsbG93IHRoZW0gdG8gc3RpbGwgYmUgdHJhdmVyc2VkIHdpdGggLm5leHRTaWJsaW5nXG4gICAgICAvLyAtIGFsbG93IGEgc2luZ2xlIGZyYWdtZW50LnFTQSB0byBmZXRjaCBhbGwgZWxlbWVudHMgYmVpbmcgcmVtb3ZlZFxuICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnRzVG9SZW1vdmVbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZS5kYXRhKG5ld05vZGUsIGpxTGl0ZS5kYXRhKGZpcnN0RWxlbWVudFRvUmVtb3ZlKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlICRkZXN0cm95IGV2ZW50IGxpc3RlbmVycyBmcm9tIGBmaXJzdEVsZW1lbnRUb1JlbW92ZWBcbiAgICAgICAganFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5vZmYoJyRkZXN0cm95Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgYW55IGRhdGEvbGlzdGVuZXJzIG9uIHRoZSBlbGVtZW50cyBhbmQgY2hpbGRyZW4uXG4gICAgICAvLyBUaGlzIGluY2x1ZGVzIGludm9raW5nIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbnkgZWxlbWVudHMgd2l0aCBsaXN0ZW5lcnMuXG4gICAgICBqcUxpdGUuY2xlYW5EYXRhKGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUganFMaXRlIGNvbGxlY3Rpb24gdG8gb25seSBjb250YWluIHRoZSBgbmV3Tm9kZWBcbiAgICAgIGZvciAoaSA9IDE7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2ldO1xuICAgICAgfVxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBTZXQgdXAgJHdhdGNoZXMgZm9yIGlzb2xhdGUgc2NvcGUgYW5kIGNvbnRyb2xsZXIgYmluZGluZ3MuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgZGVzdGluYXRpb24sIGJpbmRpbmdzLCBkaXJlY3RpdmUpIHtcbiAgICAgIHZhciByZW1vdmVXYXRjaENvbGxlY3Rpb24gPSBbXTtcbiAgICAgIHZhciBpbml0aWFsQ2hhbmdlcyA9IHt9O1xuICAgICAgdmFyIGNoYW5nZXM7XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbiBpbml0aWFsaXplQmluZGluZyhkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gZGVmaW5pdGlvbi5hdHRyTmFtZSxcbiAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLFxuICAgICAgICBtb2RlID0gZGVmaW5pdGlvbi5tb2RlLCAvLyBALCA9LCA8LCBvciAmXG4gICAgICAgIGxhc3RWYWx1ZSxcbiAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmUsIHJlbW92ZVdhdGNoO1xuXG4gICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICBpZiAoIW9wdGlvbmFsICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gYXR0cnMuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHwgaXNCb29sZWFuKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV07XG4gICAgICAgICAgICAgICAgcmVjb3JkQ2hhbmdlcyhzY29wZU5hbWUsIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF0dHJzLiQkb2JzZXJ2ZXJzW2F0dHJOYW1lXS4kJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGhhcyBiZWVuIHByb3ZpZGVkIHRoZW4gd2UgdHJpZ2dlciBhbiBpbnRlcnBvbGF0aW9uIHRvIGVuc3VyZVxuICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgdGhlcmUgZm9yIHVzZSBpbiB0aGUgbGluayBmblxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gJGludGVycG9sYXRlKGxhc3RWYWx1ZSkoc2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Jvb2xlYW4obGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlcyBpcyBvbmUgb2YgdGhlIEJPT0xFQU5fQVRUUiB0aGVuIEFuZ3VsYXIgd2lsbCBoYXZlIGNvbnZlcnRlZFxuICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgdG8gYm9vbGVhbiByYXRoZXIgdGhhbiBhIHN0cmluZywgc28gd2Ugc3BlY2lhbCBjYXNlIHRoaXMgc2l0dWF0aW9uXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbml0aWFsQ2hhbmdlc1tzY29wZU5hbWVdID0gbmV3IFNpbXBsZUNoYW5nZShfVU5JTklUSUFMSVpFRF9WQUxVRSwgZGVzdGluYXRpb25bc2NvcGVOYW1lXSk7XG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSBicmVhaztcbiAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsICYmICFhdHRyc1thdHRyTmFtZV0pIGJyZWFrO1xuXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICBjb21wYXJlID0gZXF1YWxzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IHNpbXBsZUNvbXBhcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRTZXQgPSBwYXJlbnRHZXQuYXNzaWduIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3RcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLFxuICAgICAgICAgICAgICAgICAgJ0V4cHJlc3Npb24gXFwnezB9XFwnIGluIGF0dHJpYnV0ZSBcXCd7MX1cXCcgdXNlZCB3aXRoIGRpcmVjdGl2ZSBcXCd7Mn1cXCcgaXMgbm9uLWFzc2lnbmFibGUhJyxcbiAgICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSwgYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBjaGFuZ2VkIGFuZCBpdCBoYXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGNhbiBiZSBhc3NpZ25lZCB0aGVuIGRvIHNvXG4gICAgICAgICAgICAgICAgICBwYXJlbnRTZXQoc2NvcGUsIHBhcmVudFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBhcmVudFZhbHVlV2F0Y2guJHN0YXRlZnVsID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaCgkcGFyc2UoYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKSwgbnVsbCwgcGFyZW50R2V0LmxpdGVyYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLnB1c2gocmVtb3ZlV2F0Y2gpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25hbCkgYnJlYWs7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICB2YXIgZGVlcFdhdGNoID0gcGFyZW50R2V0LmxpdGVyYWw7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcblxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2gocGFyZW50R2V0LCBmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoQWN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBpbml0aWFsVmFsdWUgfHwgKGRlZXBXYXRjaCAmJiBlcXVhbHMob2xkVmFsdWUsIGluaXRpYWxWYWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlY29yZENoYW5nZXMoc2NvcGVOYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9LCBkZWVwV2F0Y2gpO1xuXG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIE9iamVjdC5wcm90b3R5cGUgbWV0aG9kIHRvIHNjb3BlXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSBhdHRycy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkgPyAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBub29wIHRvIGRlc3RpbmF0aW9uIGlmIGV4cHJlc3Npb24gaXMgbm90IHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyZW50R2V0ID09PSBub29wICYmIG9wdGlvbmFsKSBicmVhaztcblxuICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyZW50R2V0KHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gcmVjb3JkQ2hhbmdlcyhrZXksIGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihkZXN0aW5hdGlvbi4kb25DaGFuZ2VzKSAmJiAhc2ltcGxlQ29tcGFyZShjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpKSB7XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBub3QgYWxyZWFkeSBzY2hlZHVsZWQgdGhlIHRvcCBsZXZlbCBvbkNoYW5nZXNRdWV1ZSBoYW5kbGVyIHRoZW4gZG8gc28gbm93XG4gICAgICAgICAgaWYgKCFvbkNoYW5nZXNRdWV1ZSkge1xuICAgICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZsdXNoT25DaGFuZ2VzUXVldWUpO1xuICAgICAgICAgICAgb25DaGFuZ2VzUXVldWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBub3QgYWxyZWFkeSBxdWV1ZWQgYSB0cmlnZ2VyIG9mIG9uQ2hhbmdlcyBmb3IgdGhpcyBjb250cm9sbGVyIHRoZW4gZG8gc28gbm93XG4gICAgICAgICAgaWYgKCFjaGFuZ2VzKSB7XG4gICAgICAgICAgICBjaGFuZ2VzID0ge307XG4gICAgICAgICAgICBvbkNoYW5nZXNRdWV1ZS5wdXNoKHRyaWdnZXJPbkNoYW5nZXNIb29rKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSWYgdGhlIGhhcyBiZWVuIGEgY2hhbmdlIG9uIHRoaXMgcHJvcGVydHkgYWxyZWFkeSB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgICAgaWYgKGNoYW5nZXNba2V5XSkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IGNoYW5nZXNba2V5XS5wcmV2aW91c1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBTdG9yZSB0aGlzIGNoYW5nZVxuICAgICAgICAgIGNoYW5nZXNba2V5XSA9IG5ldyBTaW1wbGVDaGFuZ2UocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmlnZ2VyT25DaGFuZ2VzSG9vaygpIHtcbiAgICAgICAgZGVzdGluYXRpb24uJG9uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICAgICAgLy8gTm93IGNsZWFyIHRoZSBjaGFuZ2VzIHNvIHRoYXQgd2Ugc2NoZWR1bGUgb25DaGFuZ2VzIHdoZW4gbW9yZSBjaGFuZ2VzIGFycml2ZVxuICAgICAgICBjaGFuZ2VzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbml0aWFsQ2hhbmdlczogaW5pdGlhbENoYW5nZXMsXG4gICAgICAgIHJlbW92ZVdhdGNoZXM6IHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGggJiYgZnVuY3Rpb24gcmVtb3ZlV2F0Y2hlcygpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZW1vdmVXYXRjaENvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uW2ldKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfV07XG59XG5cbmZ1bmN0aW9uIFNpbXBsZUNoYW5nZShwcmV2aW91cywgY3VycmVudCkge1xuICB0aGlzLnByZXZpb3VzVmFsdWUgPSBwcmV2aW91cztcbiAgdGhpcy5jdXJyZW50VmFsdWUgPSBjdXJyZW50O1xufVxuU2ltcGxlQ2hhbmdlLnByb3RvdHlwZS5pc0ZpcnN0Q2hhbmdlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnByZXZpb3VzVmFsdWUgPT09IF9VTklOSVRJQUxJWkVEX1ZBTFVFOyB9O1xuXG5cbnZhciBQUkVGSVhfUkVHRVhQID0gL14oKD86eHxkYXRhKVs6XFwtX10pL2k7XG52YXIgU1BFQ0lBTF9DSEFSU19SRUdFWFAgPSAvWzpcXC1fXSsoLikvZztcblxuLyoqXG4gKiBDb252ZXJ0cyBhbGwgYWNjZXB0ZWQgZGlyZWN0aXZlcyBmb3JtYXQgaW50byBwcm9wZXIgZGlyZWN0aXZlIG5hbWUuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSkge1xuICByZXR1cm4gbmFtZVxuICAgIC5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgIC5yZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmbkNhbWVsQ2FzZVJlcGxhY2UpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzaGFyZWQgb2JqZWN0IGJldHdlZW4gZGlyZWN0aXZlIGNvbXBpbGUgLyBsaW5raW5nIGZ1bmN0aW9ucyB3aGljaCBjb250YWlucyBub3JtYWxpemVkIERPTVxuICogZWxlbWVudCBhdHRyaWJ1dGVzLiBUaGUgdmFsdWVzIHJlZmxlY3QgY3VycmVudCBiaW5kaW5nIHN0YXRlIGB7eyB9fWAuIFRoZSBub3JtYWxpemF0aW9uIGlzXG4gKiBuZWVkZWQgc2luY2UgYWxsIG9mIHRoZXNlIGFyZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgaW4gQW5ndWxhcjpcbiAqXG4gKiBgYGBcbiAqICAgIDxzcGFuIG5nOmJpbmQ9XCJhXCIgbmctYmluZD1cImFcIiBkYXRhLW5nLWJpbmQ9XCJhXCIgeC1uZy1iaW5kPVwiYVwiPlxuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvcGVydHlcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIG1hcCBvZiBET00gZWxlbWVudCBhdHRyaWJ1dGUgbmFtZXMgdG8gdGhlIG5vcm1hbGl6ZWQgbmFtZS4gVGhpcyBpc1xuICogbmVlZGVkIHRvIGRvIHJldmVyc2UgbG9va3VwIGZyb20gbm9ybWFsaXplZCBuYW1lIGJhY2sgdG8gYWN0dWFsIG5hbWUuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXRcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXQgRE9NIGVsZW1lbnQgYXR0cmlidXRlIHZhbHVlLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb3JtYWxpemVkIGVsZW1lbnQgYXR0cmlidXRlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIG1vZGlmeS4gVGhlIG5hbWUgaXNcbiAqICAgICAgICAgIHJldmVyc2UtdHJhbnNsYXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyICRhdHRyfVxuICogICAgICAgICAgcHJvcGVydHkgdG8gdGhlIG9yaWdpbmFsIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uIFRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50ZXJwb2xhdGVkIHN0cmluZy5cbiAqL1xuXG5cblxuLyoqXG4gKiBDbG9zdXJlIGNvbXBpbGVyIHR5cGUgaW5mb3JtYXRpb25cbiAqL1xuXG5mdW5jdGlvbiBub2Rlc2V0TGlua2luZ0ZuKFxuICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLFxuICAvKiBOb2RlTGlzdCAqLyBub2RlTGlzdCxcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXG4pIHt9XG5cbmZ1bmN0aW9uIGRpcmVjdGl2ZUxpbmtpbmdGbihcbiAgLyogbm9kZXNldExpbmtpbmdGbiAqLyBub2Rlc2V0TGlua2luZ0ZuLFxuICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLFxuICAvKiBOb2RlICovIG5vZGUsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiB0b2tlbkRpZmZlcmVuY2Uoc3RyMSwgc3RyMikge1xuICB2YXIgdmFsdWVzID0gJycsXG4gICAgICB0b2tlbnMxID0gc3RyMS5zcGxpdCgvXFxzKy8pLFxuICAgICAgdG9rZW5zMiA9IHN0cjIuc3BsaXQoL1xccysvKTtcblxuICBvdXRlcjpcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgfVxuICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhqcU5vZGVzKSB7XG4gIGpxTm9kZXMgPSBqcUxpdGUoanFOb2Rlcyk7XG4gIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKGkgPD0gMSkge1xuICAgIHJldHVybiBqcU5vZGVzO1xuICB9XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBub2RlID0ganFOb2Rlc1tpXTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQgfHxcbiAgICAgICAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSAnJykpIHtcbiAgICAgICAgIHNwbGljZS5jYWxsKGpxTm9kZXMsIGksIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ganFOb2Rlcztcbn1cblxudmFyICRjb250cm9sbGVyTWluRXJyID0gbWluRXJyKCckY29udHJvbGxlcicpO1xuXG5cbnZhciBDTlRSTF9SRUcgPSAvXihcXFMrKShcXHMrYXNcXHMrKFtcXHckXSspKT8kLztcbmZ1bmN0aW9uIGlkZW50aWZpZXJGb3JDb250cm9sbGVyKGNvbnRyb2xsZXIsIGlkZW50KSB7XG4gIGlmIChpZGVudCAmJiBpc1N0cmluZyhpZGVudCkpIHJldHVybiBpZGVudDtcbiAgaWYgKGlzU3RyaW5nKGNvbnRyb2xsZXIpKSB7XG4gICAgdmFyIG1hdGNoID0gQ05UUkxfUkVHLmV4ZWMoY29udHJvbGxlcik7XG4gICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbM107XG4gIH1cbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXIgJGNvbnRyb2xsZXIgc2VydmljZX0gaXMgdXNlZCBieSBBbmd1bGFyIHRvIGNyZWF0ZSBuZXdcbiAqIGNvbnRyb2xsZXJzLlxuICpcbiAqIFRoaXMgcHJvdmlkZXIgYWxsb3dzIGNvbnRyb2xsZXIgcmVnaXN0cmF0aW9uIHZpYSB0aGVcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyIHJlZ2lzdGVyfSBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uICRDb250cm9sbGVyUHJvdmlkZXIoKSB7XG4gIHZhciBjb250cm9sbGVycyA9IHt9LFxuICAgICAgZ2xvYmFscyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjaGFzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENvbnRyb2xsZXIgbmFtZSB0byBjaGVjay5cbiAgICovXG4gIHRoaXMuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlIGtleXMgYXJlXG4gICAqICAgIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheX0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmbiAob3B0aW9uYWxseSBkZWNvcmF0ZWQgd2l0aCBESVxuICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnRyb2xsZXInKTtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIGV4dGVuZChjb250cm9sbGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzXG4gICAqIEBkZXNjcmlwdGlvbiBJZiBjYWxsZWQsIGFsbG93cyBgJGNvbnRyb2xsZXJgIHRvIGZpbmQgY29udHJvbGxlciBjb25zdHJ1Y3RvcnMgb24gYHdpbmRvd2BcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogc2luY2VWZXJzaW9uPVwidjEuMy4wXCJcbiAgICogcmVtb3ZlVmVyc2lvbj1cInYxLjcuMFwiXG4gICAqIFRoaXMgbWV0aG9kIG9mIGZpbmRpbmcgY29udHJvbGxlcnMgaGFzIGJlZW4gZGVwcmVjYXRlZC5cbiAgICovXG4gIHRoaXMuYWxsb3dHbG9iYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgZ2xvYmFscyA9IHRydWU7XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRjb250cm9sbGVyXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlXG4gICAgICogICAgY29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gT3RoZXJ3aXNlIGl0J3MgY29uc2lkZXJlZCB0byBiZSBhIHN0cmluZyB3aGljaCBpcyB1c2VkXG4gICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgKlxuICAgICAqICAgICogY2hlY2sgaWYgYSBjb250cm9sbGVyIHdpdGggZ2l2ZW4gbmFtZSBpcyByZWdpc3RlcmVkIHZpYSBgJGNvbnRyb2xsZXJQcm92aWRlcmBcbiAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3JcbiAgICAgKiAgICAqIGlmICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzLCBjaGVjayBgd2luZG93W2NvbnN0cnVjdG9yXWAgb24gdGhlIGdsb2JhbFxuICAgICAqICAgICAgYHdpbmRvd2Agb2JqZWN0IChkZXByZWNhdGVkLCBub3QgcmVjb21tZW5kZWQpXG4gICAgICpcbiAgICAgKiAgICBUaGUgc3RyaW5nIGNhbiB1c2UgdGhlIGBjb250cm9sbGVyIGFzIHByb3BlcnR5YCBzeW50YXgsIHdoZXJlIHRoZSBjb250cm9sbGVyIGluc3RhbmNlIGlzIHB1Ymxpc2hlZFxuICAgICAqICAgIGFzIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb24gdGhlIGBzY29wZWA7IHRoZSBgc2NvcGVgIG11c3QgYmUgaW5qZWN0ZWQgaW50byBgbG9jYWxzYCBwYXJhbSBmb3IgdGhpc1xuICAgICAqICAgIHRvIHdvcmsgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cbiAgICAgKlxuICAgICAqIEl0J3MganVzdCBhIHNpbXBsZSBjYWxsIHRvIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBidXQgZXh0cmFjdGVkIGludG9cbiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uICRjb250cm9sbGVyKGV4cHJlc3Npb24sIGxvY2FscywgbGF0ZXIsIGlkZW50KSB7XG4gICAgICAvLyBQUklWQVRFIEFQSTpcbiAgICAgIC8vICAgcGFyYW0gYGxhdGVyYCAtLS0gaW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpcyBpbnZva2VkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgSWYgdHJ1ZSwgJGNvbnRyb2xsZXIgd2lsbCBhbGxvY2F0ZSB0aGUgb2JqZWN0IHdpdGggdGhlIGNvcnJlY3RcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgIC8vICAgcGFyYW0gYGlkZW50YCAtLS0gQW4gb3B0aW9uYWwgbGFiZWwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBsYWJlbCBwYXJzZWQgZnJvbSB0aGUgY29udHJvbGxlclxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuXG4gICAgICB2YXIgaW5zdGFuY2UsIG1hdGNoLCBjb25zdHJ1Y3RvciwgaWRlbnRpZmllcjtcbiAgICAgIGxhdGVyID0gbGF0ZXIgPT09IHRydWU7XG4gICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7XG4gICAgICAgIGlkZW50aWZpZXIgPSBpZGVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGV4cHJlc3Npb24pKSB7XG4gICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxmbXQnLFxuICAgICAgICAgICAgJ0JhZGx5IGZvcm1lZCBjb250cm9sbGVyIHN0cmluZyBcXCd7MH1cXCcuICcgK1xuICAgICAgICAgICAgJ011c3QgbWF0Y2ggYF9fbmFtZV9fIGFzIF9faWRfX2Agb3IgYF9fbmFtZV9fYC4nLCBleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3RvciA9IG1hdGNoWzFdO1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnRpZmllciB8fCBtYXRjaFszXTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl1cbiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIGNvbnN0cnVjdG9yLCB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChnbG9iYWxzID8gZ2V0dGVyKCR3aW5kb3csIGNvbnN0cnVjdG9yLCB0cnVlKSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxyZWcnLFxuICAgICAgICAgICAgJ1RoZSBjb250cm9sbGVyIHdpdGggdGhlIG5hbWUgXFwnezB9XFwnIGlzIG5vdCByZWdpc3RlcmVkLicsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhdGVyKSB7XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIGNvbnRyb2xsZXIgbGF0ZXI6XG4gICAgICAgIC8vIFRoaXMgbWFjaGluZXJ5IGlzIHVzZWQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICAgIC8vIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpdHNlbGYuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgYmVmb3JlIHRoZSBjb25zdHJ1Y3RvciBpc1xuICAgICAgICAvLyBpbnZva2VkLiBQcmltYXJpbHksIHRoaXMgaXMgdXNlZCBmb3IgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBpbiAkY29tcGlsZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBmZWF0dXJlIGlzIG5vdCBpbnRlbmRlZCBmb3IgdXNlIGJ5IGFwcGxpY2F0aW9ucywgYW5kIGlzIHRodXMgbm90IGRvY3VtZW50ZWRcbiAgICAgICAgLy8gcHVibGljbHkuXG4gICAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJQcm90b3R5cGUgPSAoaXNBcnJheShleHByZXNzaW9uKSA/XG4gICAgICAgICAgZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdIDogZXhwcmVzc2lvbikucHJvdG90eXBlO1xuICAgICAgICBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY29udHJvbGxlclByb3RvdHlwZSB8fCBudWxsKTtcblxuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJGNvbnRyb2xsZXJJbml0KCkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGV4cHJlc3Npb24sIGluc3RhbmNlLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSBpbnN0YW5jZSAmJiAoaXNPYmplY3QocmVzdWx0KSB8fCBpc0Z1bmN0aW9uKHJlc3VsdCkpKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgIC8vIElmIHJlc3VsdCBjaGFuZ2VkLCByZS1hc3NpZ24gY29udHJvbGxlckFzIHZhbHVlIHRvIHNjb3BlLlxuICAgICAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZSA9ICRpbmplY3Rvci5pbnN0YW50aWF0ZShleHByZXNzaW9uLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcblxuICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgbmFtZSkge1xuICAgICAgaWYgKCEobG9jYWxzICYmIGlzT2JqZWN0KGxvY2Fscy4kc2NvcGUpKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjb250cm9sbGVyJykoJ25vc2NwJyxcbiAgICAgICAgICAnQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyIFxcJ3swfVxcJyBhcyBcXCd7MX1cXCchIE5vICRzY29wZSBvYmplY3QgcHJvdmlkZWQgdmlhIGBsb2NhbHNgLicsXG4gICAgICAgICAgbmFtZSwgaWRlbnRpZmllcik7XG4gICAgICB9XG5cbiAgICAgIGxvY2Fscy4kc2NvcGVbaWRlbnRpZmllcl0gPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSB7QGxpbmsgYW5ndWxhci5lbGVtZW50IGpRdWVyeSBvciBqcUxpdGV9IHdyYXBwZXIgZm9yIHRoZSBicm93c2VyJ3MgYHdpbmRvdy5kb2N1bWVudGAgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJkb2N1bWVudEV4YW1wbGVcIiBuYW1lPVwiZG9jdW1lbnRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHA+JGRvY3VtZW50IHRpdGxlOiA8YiBuZy1iaW5kPVwidGl0bGVcIj48L2I+PC9wPlxuICAgICAgICAgPHA+d2luZG93LmRvY3VtZW50IHRpdGxlOiA8YiBuZy1iaW5kPVwid2luZG93VGl0bGVcIj48L2I+PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZG9jdW1lbnRFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRkb2N1bWVudCkge1xuICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAkZG9jdW1lbnRbMF0udGl0bGU7XG4gICAgICAgICAgICRzY29wZS53aW5kb3dUaXRsZSA9IGFuZ3VsYXIuZWxlbWVudCh3aW5kb3cuZG9jdW1lbnQpWzBdLnRpdGxlO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICREb2N1bWVudFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICByZXR1cm4ganFMaXRlKHdpbmRvdy5kb2N1bWVudCk7XG4gIH1dO1xufVxuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEB0aGlzXG4gKiBMaXN0ZW5zIGZvciBkb2N1bWVudCB2aXNpYmlsaXR5IGNoYW5nZSBhbmQgbWFrZXMgdGhlIGN1cnJlbnQgc3RhdHVzIGFjY2Vzc2libGUuXG4gKi9cbmZ1bmN0aW9uICQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRkb2N1bWVudCcsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJGRvY3VtZW50LCAkcm9vdFNjb3BlKSB7XG4gICAgdmFyIGRvYyA9ICRkb2N1bWVudFswXTtcbiAgICB2YXIgaGlkZGVuID0gZG9jICYmIGRvYy5oaWRkZW47XG5cbiAgICAkZG9jdW1lbnQub24oJ3Zpc2liaWxpdHljaGFuZ2UnLCBjaGFuZ2VMaXN0ZW5lcik7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ3Zpc2liaWxpdHljaGFuZ2UnLCBjaGFuZ2VMaXN0ZW5lcik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VMaXN0ZW5lcigpIHtcbiAgICAgIGhpZGRlbiA9IGRvYy5oaWRkZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGhpZGRlbjtcbiAgICB9O1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgZGVsZWdhdGVzIHRvIGAkbG9nLmVycm9yYCB3aGljaCBsb2dzIGl0IGludG9cbiAqIHRoZSBicm93c2VyIGNvbnNvbGUuXG4gKlxuICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnlcbiAqIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXIgbW9jayAkZXhjZXB0aW9uSGFuZGxlcn0gd2hpY2ggYWlkcyBpbiB0ZXN0aW5nLlxuICpcbiAqICMjIEV4YW1wbGU6XG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgd2lsbCBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgYCRleGNlcHRpb25IYW5kbGVyYCBpbiBvcmRlciB0byAoYSkgbG9nIHVuY2F1Z2h0XG4gKiBlcnJvcnMgdG8gdGhlIGJhY2tlbmQgZm9yIGxhdGVyIGluc3BlY3Rpb24gYnkgdGhlIGRldmVsb3BlcnMgYW5kIChiKSB0byB1c2UgYCRsb2cud2FybigpYCBpbnN0ZWFkXG4gKiBvZiBgJGxvZy5lcnJvcigpYC5cbiAqXG4gKiBgYGBqc1xuICogICBhbmd1bGFyLlxuICogICAgIG1vZHVsZSgnZXhjZXB0aW9uT3ZlcndyaXRlJywgW10pLlxuICogICAgIGZhY3RvcnkoJyRleGNlcHRpb25IYW5kbGVyJywgWyckbG9nJywgJ2xvZ0Vycm9yc1RvQmFja2VuZCcsIGZ1bmN0aW9uKCRsb2csIGxvZ0Vycm9yc1RvQmFja2VuZCkge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIG15RXhjZXB0aW9uSGFuZGxlcihleGNlcHRpb24sIGNhdXNlKSB7XG4gKiAgICAgICAgIGxvZ0Vycm9yc1RvQmFja2VuZChleGNlcHRpb24sIGNhdXNlKTtcbiAqICAgICAgICAgJGxvZy53YXJuKGV4Y2VwdGlvbiwgY2F1c2UpO1xuICogICAgICAgfTtcbiAqICAgICB9XSk7XG4gKiBgYGBcbiAqXG4gKiA8aHIgLz5cbiAqIE5vdGUsIHRoYXQgY29kZSBleGVjdXRlZCBpbiBldmVudC1saXN0ZW5lcnMgKGV2ZW4gdGhvc2UgcmVnaXN0ZXJlZCB1c2luZyBqcUxpdGUncyBgb25gL2BiaW5kYFxuICogbWV0aG9kcykgZG9lcyBub3QgZGVsZWdhdGUgZXhjZXB0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfVxuICogKHVubGVzcyBleGVjdXRlZCBkdXJpbmcgYSBkaWdlc3QpLlxuICpcbiAqIElmIHlvdSB3aXNoLCB5b3UgY2FuIG1hbnVhbGx5IGRlbGVnYXRlIGV4Y2VwdGlvbnMsIGUuZy5cbiAqIGB0cnkgeyAuLi4gfSBjYXRjaChlKSB7ICRleGNlcHRpb25IYW5kbGVyKGUpOyB9YFxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGV4Y2VwdGlvbiBFeGNlcHRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2UgT3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2hcbiAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLlxuICpcbiAqL1xuZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckbG9nJywgZnVuY3Rpb24oJGxvZykge1xuICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAkbG9nLmVycm9yLmFwcGx5KCRsb2csIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkJEZvcmNlUmVmbG93UHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJGRvY3VtZW50JywgZnVuY3Rpb24oJGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRvbU5vZGUpIHtcbiAgICAgIC8vdGhlIGxpbmUgYmVsb3cgd2lsbCBmb3JjZSB0aGUgYnJvd3NlciB0byBwZXJmb3JtIGEgcmVwYWludCBzb1xuICAgICAgLy90aGF0IGFsbCB0aGUgYW5pbWF0ZWQgZWxlbWVudHMgd2l0aGluIHRoZSBhbmltYXRpb24gZnJhbWUgd2lsbFxuICAgICAgLy9iZSBwcm9wZXJseSB1cGRhdGVkIGFuZCBkcmF3biBvbiBzY3JlZW4uIFRoaXMgaXMgcmVxdWlyZWQgdG9cbiAgICAgIC8vZW5zdXJlIHRoYXQgdGhlIHByZXBhcmF0aW9uIGFuaW1hdGlvbiBpcyBwcm9wZXJseSBmbHVzaGVkIHNvIHRoYXRcbiAgICAgIC8vdGhlIGFjdGl2ZSBzdGF0ZSBwaWNrcyB1cCBmcm9tIHRoZXJlLiBETyBOT1QgUkVNT1ZFIFRISVMgTElORS5cbiAgICAgIC8vRE8gTk9UIE9QVElNSVpFIFRISVMgTElORS4gVEhFIE1JTklGSUVSIFdJTEwgUkVNT1ZFIElUIE9USEVSV0lTRSBXSElDSFxuICAgICAgLy9XSUxMIFJFU1VMVCBJTiBBTiBVTlBSRURJQ1RBQkxFIEJVRyBUSEFUIElTIFZFUlkgSEFSRCBUTyBUUkFDSyBET1dOIEFORFxuICAgICAgLy9XSUxMIFRBS0UgWUVBUlMgQVdBWSBGUk9NIFlPVVIgTElGRS5cbiAgICAgIGlmIChkb21Ob2RlKSB7XG4gICAgICAgIGlmICghZG9tTm9kZS5ub2RlVHlwZSAmJiBkb21Ob2RlIGluc3RhbmNlb2YganFMaXRlKSB7XG4gICAgICAgICAgZG9tTm9kZSA9IGRvbU5vZGVbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbU5vZGUgPSAkZG9jdW1lbnRbMF0uYm9keTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb21Ob2RlLm9mZnNldFdpZHRoICsgMTtcbiAgICB9O1xuICB9XTtcbn07XG5cbnZhciBBUFBMSUNBVElPTl9KU09OID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xudmFyIENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OID0geydDb250ZW50LVR5cGUnOiBBUFBMSUNBVElPTl9KU09OICsgJztjaGFyc2V0PXV0Zi04J307XG52YXIgSlNPTl9TVEFSVCA9IC9eXFxbfF5cXHsoPyFcXHspLztcbnZhciBKU09OX0VORFMgPSB7XG4gICdbJzogL10kLyxcbiAgJ3snOiAvfSQvXG59O1xudmFyIEpTT05fUFJPVEVDVElPTl9QUkVGSVggPSAvXlxcKV1cXH0nLD9cXG4vO1xudmFyICRodHRwTWluRXJyID0gbWluRXJyKCckaHR0cCcpO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2KSB7XG4gIGlmIChpc09iamVjdCh2KSkge1xuICAgIHJldHVybiBpc0RhdGUodikgPyB2LnRvSVNPU3RyaW5nKCkgOiB0b0pzb24odik7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmF1bHQge0BsaW5rICRodHRwIGAkaHR0cGB9IHBhcmFtcyBzZXJpYWxpemVyIHRoYXQgY29udmVydHMgb2JqZWN0cyB0byBzdHJpbmdzXG4gICAqIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgKlxuICAgKiAqIGB7J2Zvbyc6ICdiYXInfWAgcmVzdWx0cyBpbiBgZm9vPWJhcmBcbiAgICogKiBgeydmb28nOiBEYXRlLm5vdygpfWAgcmVzdWx0cyBpbiBgZm9vPTIwMTUtMDQtMDFUMDklM0E1MCUzQTQ5LjI2MlpgIChgdG9JU09TdHJpbmcoKWAgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYSBEYXRlIG9iamVjdClcbiAgICogKiBgeydmb28nOiBbJ2JhcicsICdiYXonXX1gIHJlc3VsdHMgaW4gYGZvbz1iYXImZm9vPWJhemAgKHJlcGVhdGVkIGtleSBmb3IgZWFjaCBhcnJheSBlbGVtZW50KVxuICAgKiAqIGB7J2Zvbyc6IHsnYmFyJzonYmF6J319YCByZXN1bHRzIGluIGBmb289JTdCJTIyYmFyJTIyJTNBJTIyYmF6JTIyJTdEYCAoc3RyaW5naWZpZWQgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0KVxuICAgKlxuICAgKiBOb3RlIHRoYXQgc2VyaWFsaXplciB3aWxsIHNvcnQgdGhlIHJlcXVlc3QgcGFyYW1ldGVycyBhbHBoYWJldGljYWxseS5cbiAgICogKi9cblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbmdQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuICcnO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSAgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQWx0ZXJuYXRpdmUge0BsaW5rICRodHRwIGAkaHR0cGB9IHBhcmFtcyBzZXJpYWxpemVyIHRoYXQgZm9sbG93c1xuICAgKiBqUXVlcnkncyBbYHBhcmFtKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vanF1ZXJ5LnBhcmFtLykgbWV0aG9kIGxvZ2ljLlxuICAgKiBUaGUgc2VyaWFsaXplciB3aWxsIGFsc28gc29ydCB0aGUgcGFyYW1zIGFscGhhYmV0aWNhbGx5LlxuICAgKlxuICAgKiBUbyB1c2UgaXQgZm9yIHNlcmlhbGl6aW5nIGAkaHR0cGAgcmVxdWVzdCBwYXJhbWV0ZXJzLCBzZXQgaXQgYXMgdGhlIGBwYXJhbVNlcmlhbGl6ZXJgIHByb3BlcnR5OlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAkaHR0cCh7XG4gICAqICAgdXJsOiBteVVybCxcbiAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgKiAgIHBhcmFtczogbXlQYXJhbXMsXG4gICAqICAgcGFyYW1TZXJpYWxpemVyOiAnJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UnXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgaXQgYXMgdGhlIGRlZmF1bHQgYHBhcmFtU2VyaWFsaXplcmAgaW4gdGhlXG4gICAqIHtAbGluayAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzIGAkaHR0cFByb3ZpZGVyYH0uXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBpbmplY3QgdGhlIHNlcmlhbGl6ZXIgYW5kIHVzZSBpdCBleHBsaWNpdGx5LCBmb3IgZXhhbXBsZSB0byBzZXJpYWxpemVcbiAgICogZm9ybSBkYXRhIGZvciBzdWJtaXNzaW9uOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAuY29udHJvbGxlcihmdW5jdGlvbigkaHR0cCwgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UpIHtcbiAgICogICAvLy4uLlxuICAgKlxuICAgKiAgICRodHRwKHtcbiAgICogICAgIHVybDogbXlVcmwsXG4gICAqICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICogICAgIGRhdGE6ICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKG15RGF0YSksXG4gICAqICAgICBoZWFkZXJzOiB7XG4gICAqICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqICovXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBqUXVlcnlMaWtlUGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgc2VyaWFsaXplKHBhcmFtcywgJycsIHRydWUpO1xuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcblxuICAgICAgZnVuY3Rpb24gc2VyaWFsaXplKHRvU2VyaWFsaXplLCBwcmVmaXgsIHRvcExldmVsKSB7XG4gICAgICAgIGlmICh0b1NlcmlhbGl6ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh0b1NlcmlhbGl6ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKGlzQXJyYXkodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgZm9yRWFjaCh0b1NlcmlhbGl6ZSwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIHByZWZpeCArICdbJyArIChpc09iamVjdCh2YWx1ZSkgPyBpbmRleCA6ICcnKSArICddJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodG9TZXJpYWxpemUpICYmICFpc0RhdGUodG9TZXJpYWxpemUpKSB7XG4gICAgICAgICAgZm9yRWFjaFNvcnRlZCh0b1NlcmlhbGl6ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggK1xuICAgICAgICAgICAgICAgICh0b3BMZXZlbCA/ICcnIDogJ1snKSArXG4gICAgICAgICAgICAgICAga2V5ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICddJykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkocHJlZml4KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHRvU2VyaWFsaXplKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybShkYXRhLCBoZWFkZXJzKSB7XG4gIGlmIChpc1N0cmluZyhkYXRhKSkge1xuICAgIC8vIFN0cmlwIGpzb24gdnVsbmVyYWJpbGl0eSBwcm90ZWN0aW9uIHByZWZpeCBhbmQgdHJpbSB3aGl0ZXNwYWNlXG4gICAgdmFyIHRlbXBEYXRhID0gZGF0YS5yZXBsYWNlKEpTT05fUFJPVEVDVElPTl9QUkVGSVgsICcnKS50cmltKCk7XG5cbiAgICBpZiAodGVtcERhdGEpIHtcbiAgICAgIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgaWYgKChjb250ZW50VHlwZSAmJiAoY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMCkpIHx8IGlzSnNvbkxpa2UodGVtcERhdGEpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGF0YSA9IGZyb21Kc29uKHRlbXBEYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93ICRodHRwTWluRXJyKCdiYWRkYXRhJywgJ0RhdGEgbXVzdCBiZSBhIHZhbGlkIEpTT04gb2JqZWN0LiBSZWNlaXZlZDogXCJ7MH1cIi4gJyArXG4gICAgICAgICAgJ1BhcnNlIGVycm9yOiBcInsxfVwiJywgZGF0YSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gaXNKc29uTGlrZShzdHIpIHtcbiAgICB2YXIganNvblN0YXJ0ID0gc3RyLm1hdGNoKEpTT05fU1RBUlQpO1xuICAgIHJldHVybiBqc29uU3RhcnQgJiYgSlNPTl9FTkRTW2pzb25TdGFydFswXV0udGVzdChzdHIpO1xufVxuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBrZXkgdmFsdWUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhcnNlZCBoZWFkZXJzIGFzIGtleSB2YWx1ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IGNyZWF0ZU1hcCgpLCBpO1xuXG4gIGZ1bmN0aW9uIGZpbGxJblBhcnNlZChrZXksIHZhbCkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGhlYWRlcnMpKSB7XG4gICAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgICAgZmlsbEluUGFyc2VkKGxvd2VyY2FzZSh0cmltKGxpbmUuc3Vic3RyKDAsIGkpKSksIHRyaW0obGluZS5zdWJzdHIoaSArIDEpKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGVhZGVycykpIHtcbiAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlclZhbCwgaGVhZGVyS2V5KSB7XG4gICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKGhlYWRlcktleSksIHRyaW0oaGVhZGVyVmFsKSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHBhcnNlZCBoZWFkZXJzLlxuICpcbiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLlxuICogQHNlZSBwYXJzZUhlYWRlcnNcbiAqXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLlxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZz0pfSBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHdoaWNoIGlmIGNhbGxlZCB3aXRoOlxuICpcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudCByZXR1cm5zIGEgc2luZ2xlIGhlYWRlciB2YWx1ZSBvciBudWxsXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIGhlYWRlcnNHZXR0ZXIoaGVhZGVycykge1xuICB2YXIgaGVhZGVyc09iajtcblxuICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gaGVhZGVyc09ialtsb3dlcmNhc2UobmFtZSldO1xuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzT2JqO1xuICB9O1xufVxuXG5cbi8qKlxuICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9uc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1pbmdcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgRGF0YSB0byB0cmFuc2Zvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZz0pfSBoZWFkZXJzIEhUVFAgaGVhZGVycyBnZXR0ZXIgZm4uXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHsoRnVuY3Rpb258QXJyYXkuPEZ1bmN0aW9uPil9IGZucyBGdW5jdGlvbiBvciBhbiBhcnJheSBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBzdGF0dXMsIGZucykge1xuICBpZiAoaXNGdW5jdGlvbihmbnMpKSB7XG4gICAgcmV0dXJuIGZucyhkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9XG5cbiAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5cbmZ1bmN0aW9uIGlzU3VjY2VzcyhzdGF0dXMpIHtcbiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaHR0cFByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIGAkaHR0cFByb3ZpZGVyYCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gc2VydmljZS5cbiAqICovXG5mdW5jdGlvbiAkSHR0cFByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjZGVmYXVsdHNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwge0BsaW5rIG5nLiRodHRwICRodHRwfSByZXF1ZXN0cy5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5jYWNoZWAqKiAtIHtib29sZWFufE9iamVjdH0gLSBBIGJvb2xlYW4gdmFsdWUgb3Igb2JqZWN0IGNyZWF0ZWQgd2l0aFxuICAgKiB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9IHRvIGVuYWJsZSBvciBkaXNhYmxlIGNhY2hpbmcgb2YgSFRUUCByZXNwb25zZXNcbiAgICogYnkgZGVmYXVsdC4gU2VlIHtAbGluayAkaHR0cCNjYWNoaW5nICRodHRwIENhY2hpbmd9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZDb29raWVOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgKiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1hTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZVxuICAgKiBYU1JGIHRva2VuLiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1gtWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmhlYWRlcnNgKiogLSB7T2JqZWN0fSAtIERlZmF1bHQgaGVhZGVycyBmb3IgYWxsICRodHRwIHJlcXVlc3RzLlxuICAgKiBSZWZlciB0byB7QGxpbmsgbmcuJGh0dHAjc2V0dGluZy1odHRwLWhlYWRlcnMgJGh0dHB9IGZvciBkb2N1bWVudGF0aW9uIG9uXG4gICAqIHNldHRpbmcgZGVmYXVsdCBoZWFkZXJzLlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBvc3RgKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wdXRgKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wYXRjaGAqKlxuICAgKlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcmAqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uXG4gICAqICB1c2VkIHRvIHRoZSBwcmVwYXJlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgKiAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgYSBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgKiAgRGVmYXVsdHMgdG8ge0BsaW5rIG5nLiRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfS5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1gKiogLSBge3N0cmluZ31gIC0gdGhlIG5hbWUgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlciB0aGF0IHBhc3NlcyB0aGUgbmFtZSBvZiB0aGVcbiAgICogY2FsbGJhY2sgaW4gYSBKU09OUCByZXF1ZXN0LiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBleHByZXNzaW9uIGdlbmVyYXRlZCBieSB0aGVcbiAgICoge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS4gRGVmYXVsdHMgdG8gYCdjYWxsYmFjaydgLlxuICAgKlxuICAgKiovXG4gIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgLy8gdHJhbnNmb3JtIGluY29taW5nIHJlc3BvbnNlIGRhdGFcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2RlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm1dLFxuXG4gICAgLy8gdHJhbnNmb3JtIG91dGdvaW5nIHJlcXVlc3QgZGF0YVxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpICYmICFpc0Zvcm1EYXRhKGQpID8gdG9Kc29uKGQpIDogZDtcbiAgICB9XSxcblxuICAgIC8vIGRlZmF1bHQgaGVhZGVyc1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGNvbW1vbjoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICAgIH0sXG4gICAgICBwb3N0OiAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHB1dDogICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcGF0Y2g6ICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTilcbiAgICB9LFxuXG4gICAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplcicsXG5cbiAgICBqc29ucENhbGxiYWNrUGFyYW06ICdjYWxsYmFjaydcbiAgfTtcblxuICB2YXIgdXNlQXBwbHlBc3luYyA9IGZhbHNlO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI3VzZUFwcGx5QXN5bmNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSAkaHR0cCBzZXJ2aWNlIHRvIGNvbWJpbmUgcHJvY2Vzc2luZyBvZiBtdWx0aXBsZSBodHRwIHJlc3BvbnNlcyByZWNlaXZlZCBhdCBhcm91bmRcbiAgICogdGhlIHNhbWUgdGltZSB2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmMgJHJvb3RTY29wZS4kYXBwbHlBc3luY30uIFRoaXMgY2FuIHJlc3VsdCBpblxuICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzXG4gICAqIGNvbmN1cnJlbnRseSAoY29tbW9uIGR1cmluZyBhcHBsaWNhdGlvbiBib290c3RyYXApLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRodHRwQmFja2VuZCcsICckJGNvb2tpZVJlYWRlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywgJyRzY2UnLFxuICAgICAgZnVuY3Rpb24oJGJyb3dzZXIsICRodHRwQmFja2VuZCwgJCRjb29raWVSZWFkZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IsICRzY2UpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgZGVmYXVsdCBwYXJhbSBzZXJpYWxpemVyIGlzIGV4cG9zZWQgYXMgYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgJGluamVjdG9yLmdldChkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIpIDogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSB7QGxpbmsgJGh0dHAjdXNhZ2UgY29uZmlndXJhdGlvbiBvYmplY3R9IOKAlFxuICAgICAqIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhbiBIVFRQIHJlcXVlc3QgYW5kIHJldHVybnMgIGEge0BsaW5rIG5nLiRxIHByb21pc2V9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIFNpbXBsZSBHRVQgcmVxdWVzdCBleGFtcGxlOlxuICAgICAqICAgJGh0dHAoe1xuICAgICAqICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgICB1cmw6ICcvc29tZVVybCdcbiAgICAgKiAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAqICAgICAgIC8vIHdoZW4gdGhlIHJlc3BvbnNlIGlzIGF2YWlsYWJsZVxuICAgICAqICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGFuIGVycm9yIG9jY3Vyc1xuICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggYW4gZXJyb3Igc3RhdHVzLlxuICAgICAqICAgICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgKiAgIC0gKipzdGF0dXNUZXh0Kiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgc3RhdHVzIHRleHQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQSByZXNwb25zZSBzdGF0dXMgY29kZSBiZXR3ZWVuIDIwMCBhbmQgMjk5IGlzIGNvbnNpZGVyZWQgYSBzdWNjZXNzIHN0YXR1cyBhbmQgd2lsbCByZXN1bHQgaW5cbiAgICAgKiB0aGUgc3VjY2VzcyBjYWxsYmFjayBiZWluZyBjYWxsZWQuIEFueSByZXNwb25zZSBzdGF0dXMgY29kZSBvdXRzaWRlIG9mIHRoYXQgcmFuZ2UgaXNcbiAgICAgKiBjb25zaWRlcmVkIGFuIGVycm9yIHN0YXR1cyBhbmQgd2lsbCByZXN1bHQgaW4gdGhlIGVycm9yIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC5cbiAgICAgKiBBbHNvLCBzdGF0dXMgY29kZXMgbGVzcyB0aGFuIC0xIGFyZSBub3JtYWxpemVkIHRvIHplcm8uIC0xIHVzdWFsbHkgbWVhbnMgdGhlIHJlcXVlc3Qgd2FzXG4gICAgICogYWJvcnRlZCwgZS5nLiB1c2luZyBhIGBjb25maWcudGltZW91dGAuXG4gICAgICogTm90ZSB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LCBYTUxIdHRwUmVxdWVzdCB3aWxsIHRyYW5zcGFyZW50bHkgZm9sbG93IGl0LCBtZWFuaW5nXG4gICAgICogdGhhdCB0aGUgb3V0Y29tZSAoc3VjY2VzcyBvciBlcnJvcikgd2lsbCBiZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaW5hbCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgU2hvcnRjdXQgbWV0aG9kc1xuICAgICAqXG4gICAgICogU2hvcnRjdXQgbWV0aG9kcyBhcmUgYWxzbyBhdmFpbGFibGUuIEFsbCBzaG9ydGN1dCBtZXRob2RzIHJlcXVpcmUgcGFzc2luZyBpbiB0aGUgVVJMLCBhbmRcbiAgICAgKiByZXF1ZXN0IGRhdGEgbXVzdCBiZSBwYXNzZWQgaW4gZm9yIFBPU1QvUFVUIHJlcXVlc3RzLiBBbiBvcHRpb25hbCBjb25maWcgY2FuIGJlIHBhc3NlZCBhcyB0aGVcbiAgICAgKiBsYXN0IGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywgZGF0YSwgY29uZmlnKS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6XG4gICAgICpcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNnZXQgJGh0dHAuZ2V0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcHV0ICRodHRwLnB1dH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3BhdGNoICRodHRwLnBhdGNofVxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHBcbiAgICAgKiBXaGVuIHVuaXQgdGVzdGluZyAodXNpbmcge0BsaW5rIG5nTW9jayBuZ01vY2t9KSwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGxcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCNmbHVzaCAkaHR0cEJhY2tlbmQuZmx1c2goKX0gdG8gZmx1c2ggZWFjaCBwZW5kaW5nXG4gICAgICogcmVxdWVzdCB1c2luZyB0cmFpbmVkIHJlc3BvbnNlcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICRodHRwQmFja2VuZC5leHBlY3RHRVQoLi4uKTtcbiAgICAgKiAkaHR0cC5nZXQoLi4uKTtcbiAgICAgKiAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNldHRpbmcgSFRUUCBIZWFkZXJzXG4gICAgICpcbiAgICAgKiBUaGUgJGh0dHAgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGNlcnRhaW4gSFRUUCBoZWFkZXJzIHRvIGFsbCByZXF1ZXN0cy4gVGhlc2UgZGVmYXVsdHNcbiAgICAgKiBjYW4gYmUgZnVsbHkgY29uZmlndXJlZCBieSBhY2Nlc3NpbmcgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnNgIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBvYmplY3QsIHdoaWNoIGN1cnJlbnRseSBjb250YWlucyB0aGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbjpcbiAgICAgKlxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25gIChoZWFkZXJzIHRoYXQgYXJlIGNvbW1vbiBmb3IgYWxsIHJlcXVlc3RzKTpcbiAgICAgKiAgIC0gPGNvZGU+QWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCBcXComIzY1Mjc5Oy8mIzY1Mjc5O1xcKjwvY29kZT5cbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdGA6IChoZWFkZXIgZGVmYXVsdHMgZm9yIFBPU1QgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKVxuICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYFxuICAgICAqXG4gICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBvYmplY3RzLiBUbyBhZGQgaGVhZGVycyBmb3IgYW4gSFRUUCBtZXRob2Qgb3RoZXIgdGhhbiBQT1NUIG9yIFBVVCwgc2ltcGx5IGFkZCBhIG5ldyBvYmplY3RcbiAgICAgKiB3aXRoIHRoZSBsb3dlcmNhc2VkIEhUVFAgbWV0aG9kIG5hbWUgYXMgdGhlIGtleSwgZS5nLlxuICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfWAuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdHMgY2FuIGFsc28gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZVxuICAgICAqIGZhc2hpb24uIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogbW9kdWxlLnJ1bihmdW5jdGlvbigkaHR0cCkge1xuICAgICAqICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyBZbVZsY0RwaWIyOXcnO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24sIHlvdSBjYW4gc3VwcGx5IGEgYGhlYWRlcnNgIHByb3BlcnR5IGluIHRoZSBjb25maWcgb2JqZWN0IHBhc3NlZCB3aGVuXG4gICAgICogY2FsbGluZyBgJGh0dHAoY29uZmlnKWAsIHdoaWNoIG92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgd2l0aG91dCBjaGFuZ2luZyB0aGVtIGdsb2JhbGx5LlxuICAgICAqXG4gICAgICogVG8gZXhwbGljaXRseSByZW1vdmUgYSBoZWFkZXIgYXV0b21hdGljYWxseSBhZGRlZCB2aWEgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzIG9uIGEgcGVyIHJlcXVlc3QgYmFzaXMsXG4gICAgICogVXNlIHRoZSBgaGVhZGVyc2AgcHJvcGVydHksIHNldHRpbmcgdGhlIGRlc2lyZWQgaGVhZGVyIHRvIGB1bmRlZmluZWRgLiBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIHJlcSA9IHtcbiAgICAgKiAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICogIHVybDogJ2h0dHA6Ly9leGFtcGxlLmNvbScsXG4gICAgICogIGhlYWRlcnM6IHtcbiAgICAgKiAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgICogIH0sXG4gICAgICogIGRhdGE6IHsgdGVzdDogJ3Rlc3QnIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAkaHR0cChyZXEpLnRoZW4oZnVuY3Rpb24oKXsuLi59LCBmdW5jdGlvbigpey4uLn0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXNcbiAgICAgKlxuICAgICAqIEJvdGggcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBjYW4gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zOiBgdHJhbnNmb3JtUmVxdWVzdGBcbiAgICAgKiBhbmQgYHRyYW5zZm9ybVJlc3BvbnNlYC4gVGhlc2UgcHJvcGVydGllcyBjYW4gYmUgYSBzaW5nbGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHRyYW5zZm9ybWVkIHZhbHVlIChgZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKWApIG9yIGFuIGFycmF5IG9mIHN1Y2ggdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zLFxuICAgICAqIHdoaWNoIGFsbG93cyB5b3UgdG8gYHB1c2hgIG9yIGB1bnNoaWZ0YCBhIG5ldyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbiBpbnRvIHRoZSB0cmFuc2Zvcm1hdGlvbiBjaGFpbi5cbiAgICAgKlxuICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICogKipOb3RlOioqIEFuZ3VsYXIgZG9lcyBub3QgbWFrZSBhIGNvcHkgb2YgdGhlIGBkYXRhYCBwYXJhbWV0ZXIgYmVmb3JlIGl0IGlzIHBhc3NlZCBpbnRvIHRoZSBgdHJhbnNmb3JtUmVxdWVzdGAgcGlwZWxpbmUuXG4gICAgICogVGhhdCBtZWFucyBjaGFuZ2VzIHRvIHRoZSBwcm9wZXJ0aWVzIG9mIGBkYXRhYCBhcmUgbm90IGxvY2FsIHRvIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gKHNpbmNlIEphdmFzY3JpcHQgcGFzc2VzIG9iamVjdHMgYnkgcmVmZXJlbmNlKS5cbiAgICAgKiBGb3IgZXhhbXBsZSwgd2hlbiBjYWxsaW5nIGAkaHR0cC5nZXQodXJsLCAkc2NvcGUubXlPYmplY3QpYCwgbW9kaWZpY2F0aW9ucyB0byB0aGUgb2JqZWN0J3MgcHJvcGVydGllcyBpbiBhIHRyYW5zZm9ybVJlcXVlc3RcbiAgICAgKiBmdW5jdGlvbiB3aWxsIGJlIHJlZmxlY3RlZCBvbiB0aGUgc2NvcGUgYW5kIGluIGFueSB0ZW1wbGF0ZXMgd2hlcmUgdGhlIG9iamVjdCBpcyBkYXRhLWJvdW5kLlxuICAgICAqIFRvIHByZXZlbnQgdGhpcywgdHJhbnNmb3JtIGZ1bmN0aW9ucyBzaG91bGQgaGF2ZSBubyBzaWRlLWVmZmVjdHMuXG4gICAgICogSWYgeW91IG5lZWQgdG8gbW9kaWZ5IHByb3BlcnRpZXMsIGl0IGlzIHJlY29tbWVuZGVkIHRvIG1ha2UgYSBjb3B5IG9mIHRoZSBkYXRhLCBvciBjcmVhdGUgbmV3IG9iamVjdCB0byByZXR1cm4uXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnNcbiAgICAgKlxuICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgKiB0aGVuIHRoZXNlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3JcbiAgICAgKiByZXBsYWNpbmcgdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOlxuICAgICAqXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApOlxuICAgICAqXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0XG4gICAgICogICBpbnRvIEpTT04gZm9ybWF0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWApOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zIFBlciBSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGVcbiAgICAgKiBgdHJhbnNmb3JtUmVxdWVzdGAgYW5kL29yIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgcGFzc2VkXG4gICAgICogaW50byBgJGh0dHBgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZyBvYmplY3QgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHdpbGwgYmVcbiAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7XG4gICAgICpcbiAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107XG4gICAgICpcbiAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogJy4uLicsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvVHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIENhY2hpbmdcbiAgICAgKlxuICAgICAqIHtAbGluayBuZy4kaHR0cCBgJGh0dHBgfSByZXNwb25zZXMgYXJlIG5vdCBjYWNoZWQgYnkgZGVmYXVsdC4gVG8gZW5hYmxlIGNhY2hpbmcsIHlvdSBtdXN0XG4gICAgICogc2V0IHRoZSBjb25maWcuY2FjaGUgdmFsdWUgb3IgdGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUgdG8gVFJVRSBvciB0byBhIGNhY2hlIG9iamVjdCAoY3JlYXRlZFxuICAgICAqIHdpdGgge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSkuIElmIGRlZmluZWQsIHRoZSB2YWx1ZSBvZiBjb25maWcuY2FjaGUgdGFrZXNcbiAgICAgKiBwcmVjZWRlbmNlIG92ZXIgdGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0bzpcbiAgICAgKiAgICogY2FjaGUgYWxsIHJlc3BvbnNlcyAtIHNldCB0aGUgZGVmYXVsdCBjYWNoZSB2YWx1ZSB0byBUUlVFIG9yIHRvIGEgY2FjaGUgb2JqZWN0XG4gICAgICogICAqIGNhY2hlIGEgc3BlY2lmaWMgcmVzcG9uc2UgLSBzZXQgY29uZmlnLmNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3RcbiAgICAgKlxuICAgICAqIElmIGNhY2hpbmcgaXMgZW5hYmxlZCwgYnV0IG5laXRoZXIgdGhlIGRlZmF1bHQgY2FjaGUgbm9yIGNvbmZpZy5jYWNoZSBhcmUgc2V0IHRvIGEgY2FjaGUgb2JqZWN0LFxuICAgICAqIHRoZW4gdGhlIGRlZmF1bHQgYCRjYWNoZUZhY3RvcnkoXCIkaHR0cFwiKWAgb2JqZWN0IGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBjYWNoZSB2YWx1ZSBjYW4gYmUgc2V0IGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eSBvciB0aGVcbiAgICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5jYWNoZWB9IHByb3BlcnR5LlxuICAgICAqXG4gICAgICogV2hlbiBjYWNoaW5nIGlzIGVuYWJsZWQsIHtAbGluayBuZy4kaHR0cCBgJGh0dHBgfSBzdG9yZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciB1c2luZ1xuICAgICAqIHRoZSByZWxldmFudCBjYWNoZSBvYmplY3QuIFRoZSBuZXh0IHRpbWUgdGhlIHNhbWUgcmVxdWVzdCBpcyBtYWRlLCB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICAgKiBmcm9tIHRoZSBjYWNoZSB3aXRob3V0IHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBUYWtlIG5vdGUgdGhhdDpcbiAgICAgKlxuICAgICAqICAgKiBPbmx5IEdFVCBhbmQgSlNPTlAgcmVxdWVzdHMgYXJlIGNhY2hlZC5cbiAgICAgKiAgICogVGhlIGNhY2hlIGtleSBpcyB0aGUgcmVxdWVzdCBVUkwgaW5jbHVkaW5nIHNlYXJjaCBwYXJhbWV0ZXJzOyBoZWFkZXJzIGFyZSBub3QgY29uc2lkZXJlZC5cbiAgICAgKiAgICogQ2FjaGVkIHJlc3BvbnNlcyBhcmUgcmV0dXJuZWQgYXN5bmNocm9ub3VzbHksIGluIHRoZSBzYW1lIHdheSBhcyByZXNwb25zZXMgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqICAgKiBJZiBtdWx0aXBsZSBpZGVudGljYWwgcmVxdWVzdHMgYXJlIG1hZGUgdXNpbmcgdGhlIHNhbWUgY2FjaGUsIHdoaWNoIGlzIG5vdCB5ZXQgcG9wdWxhdGVkLFxuICAgICAqICAgICBvbmUgcmVxdWVzdCB3aWxsIGJlIG1hZGUgdG8gdGhlIHNlcnZlciBhbmQgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgcmV0dXJuIHRoZSBzYW1lIHJlc3BvbnNlLlxuICAgICAqICAgKiBBIGNhY2hlLWNvbnRyb2wgaGVhZGVyIG9uIHRoZSByZXNwb25zZSBkb2VzIG5vdCBhZmZlY3QgaWYgb3IgaG93IHJlc3BvbnNlcyBhcmUgY2FjaGVkLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBJbnRlcmNlcHRvcnNcbiAgICAgKlxuICAgICAqIEJlZm9yZSB5b3Ugc3RhcnQgY3JlYXRpbmcgaW50ZXJjZXB0b3JzLCBiZSBzdXJlIHRvIHVuZGVyc3RhbmQgdGhlXG4gICAgICoge0BsaW5rIG5nLiRxICRxIGFuZCBkZWZlcnJlZC9wcm9taXNlIEFQSXN9LlxuICAgICAqXG4gICAgICogRm9yIHB1cnBvc2VzIG9mIGdsb2JhbCBlcnJvciBoYW5kbGluZywgYXV0aGVudGljYXRpb24sIG9yIGFueSBraW5kIG9mIHN5bmNocm9ub3VzIG9yXG4gICAgICogYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmVcbiAgICAgKiBhYmxlIHRvIGludGVyY2VwdCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIHRvIHRoZSBzZXJ2ZXIgYW5kXG4gICAgICogcmVzcG9uc2VzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgb3ZlciB0byB0aGUgYXBwbGljYXRpb24gY29kZSB0aGF0XG4gICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHFcbiAgICAgKiBwcm9taXNlIEFQSXN9IHRvIGZ1bGZpbGwgdGhpcyBuZWVkIGZvciBib3RoIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3NpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgaW50ZXJjZXB0b3JzIGFyZSBzZXJ2aWNlIGZhY3RvcmllcyB0aGF0IGFyZSByZWdpc3RlcmVkIHdpdGggdGhlIGAkaHR0cFByb3ZpZGVyYCBieVxuICAgICAqIGFkZGluZyB0aGVtIHRvIHRoZSBgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kXG4gICAgICogaW5qZWN0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgKGlmIHNwZWNpZmllZCkgYW5kIHJldHVybnMgdGhlIGludGVyY2VwdG9yLlxuICAgICAqXG4gICAgICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiBpbnRlcmNlcHRvcnMgKGFuZCB0d28ga2luZHMgb2YgcmVqZWN0aW9uIGludGVyY2VwdG9ycyk6XG4gICAgICpcbiAgICAgKiAgICogYHJlcXVlc3RgOiBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZCB3aXRoIGEgaHR0cCB7QGxpbmsgJGh0dHAjdXNhZ2UgY29uZmlnfSBvYmplY3QuIFRoZSBmdW5jdGlvbiBpcyBmcmVlIHRvXG4gICAgICogICAgIG1vZGlmeSB0aGUgYGNvbmZpZ2Agb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGBjb25maWdgXG4gICAgICogICAgIG9iamVjdCBkaXJlY3RseSwgb3IgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGBjb25maWdgIG9yIGEgbmV3IGBjb25maWdgIG9iamVjdC5cbiAgICAgKiAgICogYHJlcXVlc3RFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvclxuICAgICAqICAgICByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLlxuICAgICAqICAgKiBgcmVzcG9uc2VgOiBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZCB3aXRoIGh0dHAgYHJlc3BvbnNlYCBvYmplY3QuIFRoZSBmdW5jdGlvbiBpcyBmcmVlIHRvXG4gICAgICogICAgIG1vZGlmeSB0aGUgYHJlc3BvbnNlYCBvYmplY3Qgb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYHJlc3BvbnNlYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGFzIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgcmVzcG9uc2VgIG9yIGEgbmV3IGByZXNwb25zZWAgb2JqZWN0LlxuICAgICAqICAgKiBgcmVzcG9uc2VFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvclxuICAgICAqICAgICByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIGFzIGEgc2VydmljZVxuICAgICAqICAgJHByb3ZpZGUuZmFjdG9yeSgnbXlIdHRwSW50ZXJjZXB0b3InLCBmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7XG4gICAgICogICAgIHJldHVybiB7XG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXG4gICAgICogICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICdyZXF1ZXN0RXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxuICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICpcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfVxuICAgICAqICAgICB9O1xuICAgICAqICAgfSk7XG4gICAgICpcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7XG4gICAgICpcbiAgICAgKlxuICAgICAqICAgLy8gYWx0ZXJuYXRpdmVseSwgcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeVxuICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7XG4gICAgICogICAgIHJldHVybiB7XG4gICAgICogICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAqICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfVxuICAgICAqICAgICB9O1xuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBTZWN1cml0eSBDb25zaWRlcmF0aW9uc1xuICAgICAqXG4gICAgICogV2hlbiBkZXNpZ25pbmcgd2ViIGFwcGxpY2F0aW9ucywgY29uc2lkZXIgc2VjdXJpdHkgdGhyZWF0cyBmcm9tOlxuICAgICAqXG4gICAgICogLSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpXG4gICAgICogLSBbWFNSRl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSlcbiAgICAgKlxuICAgICAqIEJvdGggc2VydmVyIGFuZCB0aGUgY2xpZW50IG11c3QgY29vcGVyYXRlIGluIG9yZGVyIHRvIGVsaW1pbmF0ZSB0aGVzZSB0aHJlYXRzLiBBbmd1bGFyIGNvbWVzXG4gICAgICogcHJlLWNvbmZpZ3VyZWQgd2l0aCBzdHJhdGVnaWVzIHRoYXQgYWRkcmVzcyB0aGVzZSBpc3N1ZXMsIGJ1dCBmb3IgdGhpcyB0byB3b3JrIGJhY2tlbmQgc2VydmVyXG4gICAgICogY29vcGVyYXRpb24gaXMgcmVxdWlyZWQuXG4gICAgICpcbiAgICAgKiAjIyMgSlNPTiBWdWxuZXJhYmlsaXR5IFByb3RlY3Rpb25cbiAgICAgKlxuICAgICAqIEEgW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIGFsbG93cyB0aGlyZCBwYXJ0eSB3ZWJzaXRlIHRvIHR1cm4geW91ciBKU09OIHJlc291cmNlIFVSTCBpbnRvXG4gICAgICogW0pTT05QXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QKSByZXF1ZXN0IHVuZGVyIHNvbWUgY29uZGl0aW9ucy4gVG9cbiAgICAgKiBjb3VudGVyIHRoaXMgeW91ciBzZXJ2ZXIgY2FuIHByZWZpeCBhbGwgSlNPTiByZXF1ZXN0cyB3aXRoIGZvbGxvd2luZyBzdHJpbmcgYFwiKV19JyxcXG5cImAuXG4gICAgICogQW5ndWxhciB3aWxsIGF1dG9tYXRpY2FsbHkgc3RyaXAgdGhlIHByZWZpeCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBhcyBKU09OLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGUgaWYgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogWydvbmUnLCd0d28nXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogd2hpY2ggaXMgdnVsbmVyYWJsZSB0byBhdHRhY2ssIHlvdXIgc2VydmVyIGNhbiByZXR1cm46XG4gICAgICogYGBganNcbiAgICAgKiApXX0nLFxuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEFuZ3VsYXIgd2lsbCBzdHJpcCB0aGUgcHJlZml4LCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgSlNPTi5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIENyb3NzIFNpdGUgUmVxdWVzdCBGb3JnZXJ5IChYU1JGKSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBbWFNSRl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSkgaXMgYW4gYXR0YWNrIHRlY2huaXF1ZSBieVxuICAgICAqIHdoaWNoIHRoZSBhdHRhY2tlciBjYW4gdHJpY2sgYW4gYXV0aGVudGljYXRlZCB1c2VyIGludG8gdW5rbm93aW5nbHkgZXhlY3V0aW5nIGFjdGlvbnMgb24geW91clxuICAgICAqIHdlYnNpdGUuIEFuZ3VsYXIgcHJvdmlkZXMgYSBtZWNoYW5pc20gdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGVcbiAgICAgKiAkaHR0cCBzZXJ2aWNlIHJlYWRzIGEgdG9rZW4gZnJvbSBhIGNvb2tpZSAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQXG4gICAgICogaGVhZGVyIChgWC1YU1JGLVRPS0VOYCkuIFNpbmNlIG9ubHkgSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGVcbiAgICAgKiBjb29raWUsIHlvdXIgc2VydmVyIGNhbiBiZSBhc3N1cmVkIHRoYXQgdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLlxuICAgICAqIFRoZSBoZWFkZXIgd2lsbCBub3QgYmUgc2V0IGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGVcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXG4gICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb21cbiAgICAgKiBtYWtpbmcgdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3NcbiAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSxcbiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvIHByZXZlbnQgY29sbGlzaW9ucyBpbiBlbnZpcm9ubWVudHMgd2hlcmUgbXVsdGlwbGUgQW5ndWxhciBhcHBzIHNoYXJlIHRoZVxuICAgICAqIHNhbWUgZG9tYWluIG9yIHN1YmRvbWFpbiwgd2UgcmVjb21tZW5kIHRoYXQgZWFjaCBhcHBsaWNhdGlvbiB1c2VzIHVuaXF1ZSBjb29raWUgbmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgT2JqZWN0IGRlc2NyaWJpbmcgdGhlIHJlcXVlc3QgdG8gYmUgbWFkZSBhbmQgaG93IGl0IHNob3VsZCBiZVxuICAgICAqICAgIHByb2Nlc3NlZC4gVGhlIG9iamVjdCBoYXMgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgICAtICoqbWV0aG9kKiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgbWV0aG9kIChlLmcuICdHRVQnLCAnUE9TVCcsIGV0YylcbiAgICAgKiAgICAtICoqdXJsKiog4oCTIGB7c3RyaW5nfFRydXN0ZWRPYmplY3R9YCDigJMgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogICAgLSAqKnBhcmFtcyoqIOKAkyBge09iamVjdC48c3RyaW5nfE9iamVjdD59YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aGljaCB3aWxsIGJlIHNlcmlhbGl6ZWRcbiAgICAgKiAgICAgIHdpdGggdGhlIGBwYXJhbVNlcmlhbGl6ZXJgIGFuZCBhcHBlbmRlZCBhcyBHRVQgcGFyYW1ldGVycy5cbiAgICAgKiAgICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgRGF0YSB0byBiZSBzZW50IGFzIHRoZSByZXF1ZXN0IG1lc3NhZ2UgZGF0YS5cbiAgICAgKiAgICAtICoqaGVhZGVycyoqIOKAkyBge09iamVjdH1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBmdW5jdGlvbnMgd2hpY2ggcmV0dXJuIHN0cmluZ3MgcmVwcmVzZW50aW5nXG4gICAgICogICAgICBIVFRQIGhlYWRlcnMgdG8gc2VuZCB0byB0aGUgc2VydmVyLiBJZiB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gaXMgbnVsbCwgdGhlXG4gICAgICogICAgICBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC4gRnVuY3Rpb25zIGFjY2VwdCBhIGNvbmZpZyBvYmplY3QgYXMgYW4gYXJndW1lbnQuXG4gICAgICogICAgLSAqKmV2ZW50SGFuZGxlcnMqKiAtIGB7T2JqZWN0fWAgLSBFdmVudCBsaXN0ZW5lcnMgdG8gYmUgYm91bmQgdG8gdGhlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC5cbiAgICAgKiAgICAgIFRvIGJpbmQgZXZlbnRzIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCB1cGxvYWQgb2JqZWN0LCB1c2UgYHVwbG9hZEV2ZW50SGFuZGxlcnNgLlxuICAgICAqICAgICAgVGhlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBgJGFwcGx5YCBibG9jay5cbiAgICAgKiAgICAtICoqdXBsb2FkRXZlbnRIYW5kbGVycyoqIC0gYHtPYmplY3R9YCAtIEV2ZW50IGxpc3RlbmVycyB0byBiZSBib3VuZCB0byB0aGUgWE1MSHR0cFJlcXVlc3QgdXBsb2FkXG4gICAgICogICAgICBvYmplY3QuIFRvIGJpbmQgZXZlbnRzIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QsIHVzZSBgZXZlbnRIYW5kbGVyc2AuXG4gICAgICogICAgICBUaGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgY29udGV4dCBvZiBhIGAkYXBwbHlgIGJsb2NrLlxuICAgICAqICAgIC0gKip4c3JmSGVhZGVyTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnhzcmZDb29raWVOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlcXVlc3QqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXNwb25zZSBib2R5LCBoZWFkZXJzIGFuZCBzdGF0dXMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnN9XG4gICAgICogICAgLSAqKnBhcmFtU2VyaWFsaXplcioqIC0gYHtzdHJpbmd8ZnVuY3Rpb24oT2JqZWN0PHN0cmluZyxzdHJpbmc+KTpzdHJpbmd9YCAtIEEgZnVuY3Rpb24gdXNlZCB0b1xuICAgICAqICAgICAgcHJlcGFyZSB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHJlcXVlc3QgcGFyYW1ldGVycyAoc3BlY2lmaWVkIGFzIGFuIG9iamVjdCkuXG4gICAgICogICAgICBJZiBzcGVjaWZpZWQgYXMgc3RyaW5nLCBpdCBpcyBpbnRlcnByZXRlZCBhcyBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlXG4gICAgICogICAgICB7QGxpbmsgJGluamVjdG9yICRpbmplY3Rvcn0sIHdoaWNoIG1lYW5zIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIHNlcmlhbGl6ZXJcbiAgICAgKiAgICAgIGJ5IHJlZ2lzdGVyaW5nIGl0IGFzIGEge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSBzZXJ2aWNlfS5cbiAgICAgKiAgICAgIFRoZSBkZWZhdWx0IHNlcmlhbGl6ZXIgaXMgdGhlIHtAbGluayAkaHR0cFBhcmFtU2VyaWFsaXplciAkaHR0cFBhcmFtU2VyaWFsaXplcn07XG4gICAgICogICAgICBhbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlfVxuICAgICAqICAgIC0gKipjYWNoZSoqIOKAkyBge2Jvb2xlYW58T2JqZWN0fWAg4oCTIEEgYm9vbGVhbiB2YWx1ZSBvciBvYmplY3QgY3JlYXRlZCB3aXRoXG4gICAgICogICAgICB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9IHRvIGVuYWJsZSBvciBkaXNhYmxlIGNhY2hpbmcgb2YgdGhlIEhUVFAgcmVzcG9uc2UuXG4gICAgICogICAgICBTZWUge0BsaW5rICRodHRwI2NhY2hpbmcgJGh0dHAgQ2FjaGluZ30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogICAgLSAqKnRpbWVvdXQqKiDigJMgYHtudW1iZXJ8UHJvbWlzZX1gIOKAkyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcywgb3Ige0BsaW5rIG5nLiRxIHByb21pc2V9XG4gICAgICogICAgICB0aGF0IHNob3VsZCBhYm9ydCB0aGUgcmVxdWVzdCB3aGVuIHJlc29sdmVkLlxuICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlXG4gICAgICogICAgICBYSFIgb2JqZWN0LiBTZWUgW3JlcXVlc3RzIHdpdGggY3JlZGVudGlhbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUVFAvQWNjZXNzX2NvbnRyb2xfQ09SUyNSZXF1ZXN0c193aXRoX2NyZWRlbnRpYWxzKVxuICAgICAqICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogICAgLSAqKnJlc3BvbnNlVHlwZSoqIC0gYHtzdHJpbmd9YCAtIHNlZVxuICAgICAqICAgICAgW1hNTEh0dHBSZXF1ZXN0LnJlc3BvbnNlVHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0I3htbGh0dHByZXF1ZXN0LXJlc3BvbnNldHlwZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgYFByb21pc2V9YCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSByZXNwb25zZSBvYmplY3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHBlbmRpbmdSZXF1ZXN0cyBBcnJheSBvZiBjb25maWcgb2JqZWN0cyBmb3IgY3VycmVudGx5IHBlbmRpbmdcbiAgICAgKiAgIHJlcXVlc3RzLiBUaGlzIGlzIHByaW1hcmlseSBtZWFudCB0byBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJodHRwRXhhbXBsZVwiIG5hbWU9XCJodHRwLXNlcnZpY2VcIj5cbjxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gIDxkaXYgbmctY29udHJvbGxlcj1cIkZldGNoQ29udHJvbGxlclwiPlxuICAgIDxzZWxlY3QgbmctbW9kZWw9XCJtZXRob2RcIiBhcmlhLWxhYmVsPVwiUmVxdWVzdCBtZXRob2RcIj5cbiAgICAgIDxvcHRpb24+R0VUPC9vcHRpb24+XG4gICAgICA8b3B0aW9uPkpTT05QPC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1cmxcIiBzaXplPVwiODBcIiBhcmlhLWxhYmVsPVwiVVJMXCIgLz5cbiAgICA8YnV0dG9uIGlkPVwiZmV0Y2hidG5cIiBuZy1jbGljaz1cImZldGNoKClcIj5mZXRjaDwvYnV0dG9uPjxicj5cbiAgICA8YnV0dG9uIGlkPVwic2FtcGxlZ2V0YnRuXCIgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnR0VUJywgJ2h0dHAtaGVsbG8uaHRtbCcpXCI+U2FtcGxlIEdFVDwvYnV0dG9uPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVqc29ucGJ0blwiXG4gICAgICBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdKU09OUCcsXG4gICAgICAgICAgICAgICAgICAgICdodHRwczovL2FuZ3VsYXJqcy5vcmcvZ3JlZXQucGhwP25hbWU9U3VwZXIlMjBIZXJvJylcIj5cbiAgICAgIFNhbXBsZSBKU09OUFxuICAgIDwvYnV0dG9uPlxuICAgIDxidXR0b24gaWQ9XCJpbnZhbGlkanNvbnBidG5cIlxuICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2RvZXNudGV4aXN0JylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29uZmlnKFsnJHNjZURlbGVnYXRlUHJvdmlkZXInLCBmdW5jdGlvbigkc2NlRGVsZWdhdGVQcm92aWRlcikge1xuICAgICAgLy8gV2UgbXVzdCB3aGl0ZWxpc3QgdGhlIEpTT05QIGVuZHBvaW50IHRoYXQgd2UgYXJlIHVzaW5nIHRvIHNob3cgdGhhdCB3ZSB0cnVzdCBpdFxuICAgICAgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3QoW1xuICAgICAgICAnc2VsZicsXG4gICAgICAgICdodHRwczovL2FuZ3VsYXJqcy5vcmcvKionXG4gICAgICBdKTtcbiAgICB9XSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwgJ1JlcXVlc3QgZmFpbGVkJztcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAgICAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgJHNjb3BlLnVybCA9IHVybDtcbiAgICAgICAgfTtcbiAgICAgIH1dKTtcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cbiAgSGVsbG8sICRodHRwIVxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICB2YXIgc3RhdHVzID0gZWxlbWVudChieS5iaW5kaW5nKCdzdGF0dXMnKSk7XG4gIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpO1xuICB2YXIgZmV0Y2hCdG4gPSBlbGVtZW50KGJ5LmlkKCdmZXRjaGJ0bicpKTtcbiAgdmFyIHNhbXBsZUdldEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWdldGJ0bicpKTtcbiAgdmFyIGludmFsaWRKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ludmFsaWRqc29ucGJ0bicpKTtcblxuICBpdCgnc2hvdWxkIG1ha2UgYW4geGhyIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2FtcGxlR2V0QnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9IZWxsbywgXFwkaHR0cCEvKTtcbiAgfSk7XG5cbi8vIENvbW1lbnRlZCBvdXQgZHVlIHRvIGZsYWtlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxODVcbi8vIGl0KCdzaG91bGQgbWFrZSBhIEpTT05QIHJlcXVlc3QgdG8gYW5ndWxhcmpzLm9yZycsIGZ1bmN0aW9uKCkge1xuLy8gICB2YXIgc2FtcGxlSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVqc29ucGJ0bicpKTtcbi8vICAgc2FtcGxlSnNvbnBCdG4uY2xpY2soKTtcbi8vICAgZmV0Y2hCdG4uY2xpY2soKTtcbi8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuLy8gICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XG4vLyB9KTtcblxuICBpdCgnc2hvdWxkIG1ha2UgSlNPTlAgcmVxdWVzdCB0byBpbnZhbGlkIFVSTCBhbmQgaW52b2tlIHRoZSBlcnJvciBoYW5kbGVyJyxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRodHRwKHJlcXVlc3RDb25maWcpIHtcblxuICAgICAgaWYgKCFpc09iamVjdChyZXF1ZXN0Q29uZmlnKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRodHRwJykoJ2JhZHJlcScsICdIdHRwIHJlcXVlc3QgY29uZmlndXJhdGlvbiBtdXN0IGJlIGFuIG9iamVjdC4gIFJlY2VpdmVkOiB7MH0nLCByZXF1ZXN0Q29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZygkc2NlLnZhbHVlT2YocmVxdWVzdENvbmZpZy51cmwpKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRodHRwJykoJ2JhZHJlcScsICdIdHRwIHJlcXVlc3QgY29uZmlndXJhdGlvbiB1cmwgbXVzdCBiZSBhIHN0cmluZyBvciBhICRzY2UgdHJ1c3RlZCBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZy51cmwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gZXh0ZW5kKHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICBwYXJhbVNlcmlhbGl6ZXI6IGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcixcbiAgICAgICAganNvbnBDYWxsYmFja1BhcmFtOiBkZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1cbiAgICAgIH0sIHJlcXVlc3RDb25maWcpO1xuXG4gICAgICBjb25maWcuaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXF1ZXN0Q29uZmlnKTtcbiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7XG4gICAgICBjb25maWcucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoY29uZmlnLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgICAgICRpbmplY3Rvci5nZXQoY29uZmlnLnBhcmFtU2VyaWFsaXplcikgOiBjb25maWcucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgICAkYnJvd3Nlci4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7XG5cbiAgICAgIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JzID0gW107XG4gICAgICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvcnMgPSBbXTtcbiAgICAgIHZhciBwcm9taXNlID0gJHEucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICAvLyBhcHBseSBpbnRlcmNlcHRvcnNcbiAgICAgIGZvckVhY2gocmV2ZXJzZWRJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXF1ZXN0IHx8IGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcikge1xuICAgICAgICAgIHJlcXVlc3RJbnRlcmNlcHRvcnMudW5zaGlmdChpbnRlcmNlcHRvci5yZXF1ZXN0LCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSB8fCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvci5yZXNwb25zZSwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlID0gY2hhaW5JbnRlcmNlcHRvcnMocHJvbWlzZSwgcmVxdWVzdEludGVyY2VwdG9ycyk7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHNlcnZlclJlcXVlc3QpO1xuICAgICAgcHJvbWlzZSA9IGNoYWluSW50ZXJjZXB0b3JzKHByb21pc2UsIHJlc3BvbnNlSW50ZXJjZXB0b3JzKTtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLmZpbmFsbHkoY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QpO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuXG4gICAgICBmdW5jdGlvbiBjaGFpbkludGVyY2VwdG9ycyhwcm9taXNlLCBpbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW50ZXJjZXB0b3JzLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIHZhciB0aGVuRm4gPSBpbnRlcmNlcHRvcnNbaSsrXTtcbiAgICAgICAgICB2YXIgcmVqZWN0Rm4gPSBpbnRlcmNlcHRvcnNbaSsrXTtcblxuICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4odGhlbkZuLCByZWplY3RGbik7XG4gICAgICAgIH1cblxuICAgICAgICBpbnRlcmNlcHRvcnMubGVuZ3RoID0gMDtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoKSB7XG4gICAgICAgICRicm93c2VyLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVIZWFkZXJGbnMoaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgIHZhciBoZWFkZXJDb250ZW50LCBwcm9jZXNzZWRIZWFkZXJzID0ge307XG5cbiAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJGbiwgaGVhZGVyKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGVhZGVyRm4pKSB7XG4gICAgICAgICAgICBoZWFkZXJDb250ZW50ID0gaGVhZGVyRm4oY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJDb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzc2VkSGVhZGVyc1toZWFkZXJdID0gaGVhZGVyQ29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc2VkSGVhZGVyc1toZWFkZXJdID0gaGVhZGVyRm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkSGVhZGVycztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWVyZ2VIZWFkZXJzKGNvbmZpZykge1xuICAgICAgICB2YXIgZGVmSGVhZGVycyA9IGRlZmF1bHRzLmhlYWRlcnMsXG4gICAgICAgICAgICByZXFIZWFkZXJzID0gZXh0ZW5kKHt9LCBjb25maWcuaGVhZGVycyksXG4gICAgICAgICAgICBkZWZIZWFkZXJOYW1lLCBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lLCByZXFIZWFkZXJOYW1lO1xuXG4gICAgICAgIGRlZkhlYWRlcnMgPSBleHRlbmQoe30sIGRlZkhlYWRlcnMuY29tbW9uLCBkZWZIZWFkZXJzW2xvd2VyY2FzZShjb25maWcubWV0aG9kKV0pO1xuXG4gICAgICAgIC8vIHVzaW5nIGZvci1pbiBpbnN0ZWFkIG9mIGZvckVhY2ggdG8gYXZvaWQgdW5uZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjpcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcbiAgICAgICAgICBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lID0gbG93ZXJjYXNlKGRlZkhlYWRlck5hbWUpO1xuXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UocmVxSGVhZGVyTmFtZSkgPT09IGxvd2VyY2FzZURlZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVyc1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUhlYWRlckZucyhyZXFIZWFkZXJzLCBzaGFsbG93Q29weShjb25maWcpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2VydmVyUmVxdWVzdChjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCB1bmRlZmluZWQsIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTtcblxuICAgICAgICAvLyBzdHJpcCBjb250ZW50LXR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlcURhdGEpKSB7XG4gICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwgaGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykgJiYgIWlzVW5kZWZpbmVkKGRlZmF1bHRzLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0XG4gICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGVcbiAgICAgICAgdmFyIHJlc3AgPSBleHRlbmQoe30sIHJlc3BvbnNlKTtcbiAgICAgICAgcmVzcC5kYXRhID0gdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIChpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSlcbiAgICAgICAgICA/IHJlc3BcbiAgICAgICAgICA6ICRxLnJlamVjdChyZXNwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNnZXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2RlbGV0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYERFTEVURWAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjaGVhZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEhFQURgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2pzb25wXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQsIHNpbmNlIEpTT05QIHJlcXVlc3RzIGFyZSBzZW5zaXRpdmUgYmVjYXVzZSB0aGUgcmVzcG9uc2UgaXMgZ2l2ZW4gZnVsbCBhY2Nlc3MgdG8gdGhlIGJyb3dzZXIsXG4gICAgICogdGhlIHVybCBtdXN0IGJlIGRlY2xhcmVkLCB2aWEge0BsaW5rICRzY2V9IGFzIGEgdHJ1c3RlZCByZXNvdXJjZSBVUkwuXG4gICAgICogWW91IGNhbiB0cnVzdCBhIFVSTCBieSBhZGRpbmcgaXQgdG8gdGhlIHdoaXRlbGlzdCB2aWFcbiAgICAgKiB7QGxpbmsgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgIGAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdGB9IG9yXG4gICAgICogYnkgZXhwbGljaXRseSB0cnVzdGluZyB0aGUgVVJMIHZpYSB7QGxpbmsgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgfS5cbiAgICAgKlxuICAgICAqIEpTT05QIHJlcXVlc3RzIG11c3Qgc3BlY2lmeSBhIGNhbGxiYWNrIHRvIGJlIHVzZWQgaW4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci4gVGhpcyBjYWxsYmFja1xuICAgICAqIGlzIHBhc3NlZCBhcyBhIHF1ZXJ5IHBhcmFtZXRlciBpbiB0aGUgcmVxdWVzdC4gWW91IG11c3Qgc3BlY2lmeSB0aGUgbmFtZSBvZiB0aGlzIHBhcmFtZXRlciBieVxuICAgICAqIHNldHRpbmcgdGhlIGBqc29ucENhbGxiYWNrUGFyYW1gIHByb3BlcnR5IG9uIHRoZSByZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAkaHR0cC5qc29ucCgnc29tZS90cnVzdGVkL3VybCcsIHtqc29ucENhbGxiYWNrUGFyYW06ICdjYWxsYmFjayd9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBkZWZhdWx0IGNhbGxiYWNrIHBhcmFtZXRlciBuYW1lIGluIGAkaHR0cC5kZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1gLlxuICAgICAqIEluaXRpYWxseSB0aGlzIGlzIHNldCB0byBgJ2NhbGxiYWNrJ2AuXG4gICAgICpcbiAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gICAgICogWW91IGNhbiBubyBsb25nZXIgdXNlIHRoZSBgSlNPTl9DQUxMQkFDS2Agc3RyaW5nIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHNwZWNpZnlpbmcgd2hlcmUgdGhlIGNhbGxiYWNrXG4gICAgICogcGFyYW1ldGVyIHZhbHVlIHNob3VsZCBnby5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKlxuICAgICAqIElmIHlvdSB3b3VsZCBsaWtlIHRvIGN1c3RvbWlzZSB3aGVyZSBhbmQgaG93IHRoZSBjYWxsYmFja3MgYXJlIHN0b3JlZCB0aGVuIHRyeSBvdmVycmlkaW5nXG4gICAgICogb3IgZGVjb3JhdGluZyB0aGUge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRPYmplY3R9IHVybCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzKCdnZXQnLCAnZGVsZXRlJywgJ2hlYWQnLCAnanNvbnAnKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwb3N0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcHV0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkaHR0cCNwYXRjaFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBBVENIYCByZXF1ZXN0LlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSgncG9zdCcsICdwdXQnLCAncGF0Y2gnKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAqIEBuYW1lICRodHRwI2RlZmF1bHRzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSdW50aW1lIGVxdWl2YWxlbnQgb2YgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzYCBwcm9wZXJ0eS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICogZGVmYXVsdCBoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMgYXMgd2VsbCBhcyByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBcIlNldHRpbmcgSFRUUCBIZWFkZXJzXCIgYW5kIFwiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXNcIiBzZWN0aW9ucyBhYm92ZS5cbiAgICAgICAgICovXG4gICAgJGh0dHAuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuXG4gICAgcmV0dXJuICRodHRwO1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHMobmFtZXMpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YShuYW1lKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZCh7fSwgY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzpcbiAgICAgKiAkaHR0cEJhY2tlbmQsIGRlZmF1bHRzLCAkbG9nLCAkcm9vdFNjb3BlLCBkZWZhdWx0Q2FjaGUsICRodHRwLnBlbmRpbmdSZXF1ZXN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgIGNhY2hlZFJlc3AsXG4gICAgICAgICAgcmVxSGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgICAgIGlzSnNvbnAgPSBsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCkgPT09ICdqc29ucCcsXG4gICAgICAgICAgdXJsID0gY29uZmlnLnVybDtcblxuICAgICAgaWYgKGlzSnNvbnApIHtcbiAgICAgICAgLy8gSlNPTlAgaXMgYSBwcmV0dHkgc2Vuc2l0aXZlIG9wZXJhdGlvbiB3aGVyZSB3ZSdyZSBhbGxvd2luZyBhIHNjcmlwdCB0byBoYXZlIGZ1bGwgYWNjZXNzIHRvXG4gICAgICAgIC8vIG91ciBET00gYW5kIEpTIHNwYWNlLiAgU28gd2UgcmVxdWlyZSB0aGF0IHRoZSBVUkwgc2F0aXNmaWVzIFNDRS5SRVNPVVJDRV9VUkwuXG4gICAgICAgIHVybCA9ICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHVybCk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1N0cmluZyh1cmwpKSB7XG4gICAgICAgIC8vIElmIGl0IGlzIG5vdCBhIHN0cmluZyB0aGVuIHRoZSBVUkwgbXVzdCBiZSBhICRzY2UgdHJ1c3RlZCBvYmplY3RcbiAgICAgICAgdXJsID0gJHNjZS52YWx1ZU9mKHVybCk7XG4gICAgICB9XG5cbiAgICAgIHVybCA9IGJ1aWxkVXJsKHVybCwgY29uZmlnLnBhcmFtU2VyaWFsaXplcihjb25maWcucGFyYW1zKSk7XG5cbiAgICAgIGlmIChpc0pzb25wKSB7XG4gICAgICAgIC8vIENoZWNrIHRoZSB1cmwgYW5kIGFkZCB0aGUgSlNPTlAgY2FsbGJhY2sgcGxhY2Vob2xkZXJcbiAgICAgICAgdXJsID0gc2FuaXRpemVKc29ucENhbGxiYWNrUGFyYW0odXJsLCBjb25maWcuanNvbnBDYWxsYmFja1BhcmFtKTtcbiAgICAgIH1cblxuICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTtcbiAgICAgIHByb21pc2UudGhlbihyZW1vdmVQZW5kaW5nUmVxLCByZW1vdmVQZW5kaW5nUmVxKTtcblxuICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHtcbiAgICAgICAgY2FjaGUgPSBpc09iamVjdChjb25maWcuY2FjaGUpID8gY29uZmlnLmNhY2hlXG4gICAgICAgICAgICA6IGlzT2JqZWN0KC8qKiBAdHlwZSB7P30gKi8gKGRlZmF1bHRzKS5jYWNoZSlcbiAgICAgICAgICAgICAgPyAvKiogQHR5cGUgez99ICovIChkZWZhdWx0cykuY2FjaGVcbiAgICAgICAgICAgICAgOiBkZWZhdWx0Q2FjaGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZWRSZXNwID0gY2FjaGUuZ2V0KHVybCk7XG4gICAgICAgIGlmIChpc0RlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiBzZW50LCBidXQgdGhlcmUgaXMgbm8gcmVzcG9uc2UgeWV0XG4gICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0LCByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2aW5nIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3AsIDIwMCwge30sICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kXG4gICAgICAvLyBzZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG4gICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKVxuICAgICAgICAgICAgPyAkJGNvb2tpZVJlYWRlcigpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxSGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCxcbiAgICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICBjcmVhdGVBcHBseUhhbmRsZXJzKGNvbmZpZy5ldmVudEhhbmRsZXJzKSxcbiAgICAgICAgICAgIGNyZWF0ZUFwcGx5SGFuZGxlcnMoY29uZmlnLnVwbG9hZEV2ZW50SGFuZGxlcnMpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFwcGx5SGFuZGxlcnMoZXZlbnRIYW5kbGVycykge1xuICAgICAgICBpZiAoZXZlbnRIYW5kbGVycykge1xuICAgICAgICAgIHZhciBhcHBseUhhbmRsZXJzID0ge307XG4gICAgICAgICAgZm9yRWFjaChldmVudEhhbmRsZXJzLCBmdW5jdGlvbihldmVudEhhbmRsZXIsIGtleSkge1xuICAgICAgICAgICAgYXBwbHlIYW5kbGVyc1trZXldID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKHVzZUFwcGx5QXN5bmMpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseUFzeW5jKGNhbGxFdmVudEhhbmRsZXIpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICAgIGNhbGxFdmVudEhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShjYWxsRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxFdmVudEhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXBwbHlIYW5kbGVycztcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbGJhY2sgcmVnaXN0ZXJlZCB0byAkaHR0cEJhY2tlbmQoKTpcbiAgICAgICAqICAtIGNhY2hlcyB0aGUgcmVzcG9uc2UgaWYgZGVzaXJlZFxuICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlXG4gICAgICAgKiAgLSBjYWxscyAkYXBwbHlcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGlmIChpc1N1Y2Nlc3Moc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKSwgc3RhdHVzVGV4dF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvbWlzZSBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUh0dHBQcm9taXNlKCkge1xuICAgICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUFwcGx5QXN5bmMpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseUFzeW5jKHJlc29sdmVIdHRwUHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZUh0dHBQcm9taXNlKCk7XG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgc3RhdHVzVGV4dCkge1xuICAgICAgICAvL3N0YXR1czogSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZSwgMCwgLTEgKGFib3J0ZWQgYnkgdGltZW91dCAvIHByb21pc2UpXG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyA+PSAtMSA/IHN0YXR1cyA6IDA7XG5cbiAgICAgICAgKGlzU3VjY2VzcyhzdGF0dXMpID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkoe1xuICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgc3RhdHVzVGV4dDogc3RhdHVzVGV4dFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQuZGF0YSwgcmVzdWx0LnN0YXR1cywgc2hhbGxvd0NvcHkocmVzdWx0LmhlYWRlcnMoKSksIHJlc3VsdC5zdGF0dXNUZXh0KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHtcbiAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICAgIGlmIChzZXJpYWxpemVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXJsICs9ICgodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEpID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtKHVybCwga2V5KSB7XG4gICAgICBpZiAoL1smP11bXj1dKz1KU09OX0NBTExCQUNLLy50ZXN0KHVybCkpIHtcbiAgICAgICAgLy8gVGhyb3cgaWYgdGhlIHVybCBhbHJlYWR5IGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvIEpTT05fQ0FMTEJBQ0tcbiAgICAgICAgdGhyb3cgJGh0dHBNaW5FcnIoJ2JhZGpzb25wJywgJ0lsbGVnYWwgdXNlIG9mIEpTT05fQ0FMTEJBQ0sgaW4gdXJsLCBcInswfVwiJywgdXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrUGFyYW1SZWdleCA9IG5ldyBSZWdFeHAoJ1smP10nICsga2V5ICsgJz0nKTtcbiAgICAgIGlmIChjYWxsYmFja1BhcmFtUmVnZXgudGVzdCh1cmwpKSB7XG4gICAgICAgIC8vIFRocm93IGlmIHRoZSBjYWxsYmFjayBwYXJhbSB3YXMgYWxyZWFkeSBwcm92aWRlZFxuICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkanNvbnAnLCAnSWxsZWdhbCB1c2Ugb2YgY2FsbGJhY2sgcGFyYW0sIFwiezB9XCIsIGluIHVybCwgXCJ7MX1cIicsIGtleSwgdXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIGluIHRoZSBKU09OX0NBTExCQUNLIGNhbGxiYWNrIHBhcmFtIHZhbHVlXG4gICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09PSAtMSkgPyAnPycgOiAnJicpICsga2V5ICsgJz1KU09OX0NBTExCQUNLJztcblxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkeGhyRmFjdG9yeVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqXG4gKiBSZXBsYWNlIG9yIGRlY29yYXRlIHRoaXMgc2VydmljZSB0byBjcmVhdGUgeW91ciBvd24gY3VzdG9tIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSlcbiAqIC5mYWN0b3J5KCckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCkge1xuICogICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKSB7XG4gKiAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3Qoe21velN5c3RlbTogdHJ1ZX0pO1xuICogICB9O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIEhUVFAgbWV0aG9kIG9mIHRoZSByZXF1ZXN0IChHRVQsIFBPU1QsIFBVVCwgLi4pXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCBvZiB0aGUgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gJHhockZhY3RvcnlQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVhocigpIHtcbiAgICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGh0dHBCYWNrZW5kXG4gKiBAcmVxdWlyZXMgJGpzb25wQ2FsbGJhY2tzXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHhockZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXG4gKiBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgb3IgSlNPTlAgYW5kIGRlYWxzIHdpdGggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XG4gKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IG9yIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZSAkcmVzb3VyY2V9LlxuICpcbiAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcbiAqICRodHRwQmFja2VuZH0gd2hpY2ggY2FuIGJlIHRyYWluZWQgd2l0aCByZXNwb25zZXMuXG4gKi9cbmZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRqc29ucENhbGxiYWNrcycsICckZG9jdW1lbnQnLCAnJHhockZhY3RvcnknLCBmdW5jdGlvbigkYnJvd3NlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCAkeGhyRmFjdG9yeSwgJGJyb3dzZXIuZGVmZXIsICRqc29ucENhbGxiYWNrcywgJGRvY3VtZW50WzBdKTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQpIHtcbiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlXG4gIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlLCBldmVudEhhbmRsZXJzLCB1cGxvYWRFdmVudEhhbmRsZXJzKSB7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09PSAnanNvbnAnKSB7XG4gICAgICB2YXIgY2FsbGJhY2tQYXRoID0gY2FsbGJhY2tzLmNyZWF0ZUNhbGxiYWNrKHVybCk7XG4gICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgICAgICAvLyBqc29ucFJlcSBvbmx5IGV2ZXIgc2V0cyBzdGF0dXMgdG8gMjAwIChPSyksIDQwNCAoRVJST1IpIG9yIC0xIChXQUlUSU5HKVxuICAgICAgICB2YXIgcmVzcG9uc2UgPSAoc3RhdHVzID09PSAyMDApICYmIGNhbGxiYWNrcy5nZXRSZXNwb25zZShjYWxsYmFja1BhdGgpO1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsICcnLCB0ZXh0KTtcbiAgICAgICAgY2FsbGJhY2tzLnJlbW92ZUNhbGxiYWNrKGNhbGxiYWNrUGF0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiByZXF1ZXN0TG9hZGVkKCkge1xuICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0IHx8ICcnO1xuXG4gICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOSlcbiAgICAgICAgLy8gcmVzcG9uc2UvcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXG4gICAgICAgIHZhciByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBJRTkgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIHdoZW4gaXQgaXMgMCAoMCBzdGF0dXMgaXMgdW5kb2N1bWVudGVkKS5cbiAgICAgICAgLy8gT2NjdXJzIHdoZW4gYWNjZXNzaW5nIGZpbGUgcmVzb3VyY2VzIG9yIG9uIEFuZHJvaWQgNC4xIHN0b2NrIGJyb3dzZXJcbiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UgPyAyMDAgOiB1cmxSZXNvbHZlKHVybCkucHJvdG9jb2wgPT09ICdmaWxlJyA/IDQwNCA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSxcbiAgICAgICAgICAgIHN0YXR1c1RleHQpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUaGUgcmVzcG9uc2UgaXMgYWx3YXlzIGVtcHR5XG4gICAgICAgIC8vIFNlZSBodHRwczovL3hoci5zcGVjLndoYXR3Zy5vcmcvI3JlcXVlc3QtZXJyb3Itc3RlcHMgYW5kIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5ldHdvcmstZXJyb3JcbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCAtMSwgbnVsbCwgbnVsbCwgJycpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSByZXF1ZXN0RXJyb3I7XG4gICAgICB4aHIub25hYm9ydCA9IHJlcXVlc3RFcnJvcjtcbiAgICAgIHhoci5vbnRpbWVvdXQgPSByZXF1ZXN0RXJyb3I7XG5cbiAgICAgIGZvckVhY2goZXZlbnRIYW5kbGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvckVhY2godXBsb2FkRXZlbnRIYW5kbGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHdpdGhDcmVkZW50aWFscykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3BvbnNlVHlwZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBXZWJLaXQgYWRkZWQgc3VwcG9ydCBmb3IgdGhlIGpzb24gcmVzcG9uc2VUeXBlIHZhbHVlIG9uIDA5LzAzLzIwMTNcbiAgICAgICAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzM2NDguIFZlcnNpb25zIG9mIFNhZmFyaSBwcmlvciB0byA3IGFyZVxuICAgICAgICAgIC8vIGtub3duIHRvIHRocm93IHdoZW4gc2V0dGluZyB0aGUgdmFsdWUgXCJqc29uXCIgYXMgdGhlIHJlc3BvbnNlIHR5cGUuIE90aGVyIG9sZGVyXG4gICAgICAgICAgLy8gYnJvd3NlcnMgaW1wbGVtZW50aW5nIHRoZSByZXNwb25zZVR5cGVcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoZSBqc29uIHJlc3BvbnNlIHR5cGUgY2FuIGJlIGlnbm9yZWQgaWYgbm90IHN1cHBvcnRlZCwgYmVjYXVzZSBKU09OIHBheWxvYWRzIGFyZVxuICAgICAgICAgIC8vIHBhcnNlZCBvbiB0aGUgY2xpZW50LXNpZGUgcmVnYXJkbGVzcy5cbiAgICAgICAgICBpZiAocmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKGlzVW5kZWZpbmVkKHBvc3QpID8gbnVsbCA6IHBvc3QpO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgdmFyIHRpbWVvdXRJZCA9ICRicm93c2VyRGVmZXIodGltZW91dFJlcXVlc3QsIHRpbWVvdXQpO1xuICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlTGlrZSh0aW1lb3V0KSkge1xuICAgICAgdGltZW91dC50aGVuKHRpbWVvdXRSZXF1ZXN0KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHRpbWVvdXRSZXF1ZXN0KCkge1xuICAgICAgaWYgKGpzb25wRG9uZSkge1xuICAgICAgICBqc29ucERvbmUoKTtcbiAgICAgIH1cbiAgICAgIGlmICh4aHIpIHtcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KSB7XG4gICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvblxuICAgICAgaWYgKGlzRGVmaW5lZCh0aW1lb3V0SWQpKSB7XG4gICAgICAgICRicm93c2VyRGVmZXIuY2FuY2VsKHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICBqc29ucERvbmUgPSB4aHIgPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayhzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGRvbmUpIHtcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsIGNhbGxiYWNrUGF0aCk7XG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHN0dWZmIHdpdGggc2NyaXB0IGVsZW1lbnRzLCBlLmcuOlxuICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW1cbiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50XG4gICAgdmFyIHNjcmlwdCA9IHJhd0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBjYWxsYmFjayA9IG51bGw7XG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG5cbiAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNhbGxiYWNrKTtcbiAgICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICB2YXIgc3RhdHVzID0gLTE7XG4gICAgICB2YXIgdGV4dCA9ICd1bmtub3duJztcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSAnbG9hZCcgJiYgIWNhbGxiYWNrcy53YXNDYWxsZWQoY2FsbGJhY2tQYXRoKSkge1xuICAgICAgICAgIGV2ZW50ID0geyB0eXBlOiAnZXJyb3InIH07XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGV2ZW50LnR5cGU7XG4gICAgICAgIHN0YXR1cyA9IGV2ZW50LnR5cGUgPT09ICdlcnJvcicgPyA0MDQgOiAyMDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGRvbmUoc3RhdHVzLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjYWxsYmFjayk7XG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgIHJhd0RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH1cbn1cblxudmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IGFuZ3VsYXIuJGludGVycG9sYXRlTWluRXJyID0gbWluRXJyKCckaW50ZXJwb2xhdGUnKTtcbiRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0ID0gZnVuY3Rpb24odGV4dCkge1xuICB0aHJvdyAkaW50ZXJwb2xhdGVNaW5FcnIoJ25vY29uY2F0JyxcbiAgICAgICdFcnJvciB3aGlsZSBpbnRlcnBvbGF0aW5nOiB7MH1cXG5TdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkaXNhbGxvd3MgJyArXG4gICAgICAnaW50ZXJwb2xhdGlvbnMgdGhhdCBjb25jYXRlbmF0ZSBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGVuIGEgdHJ1c3RlZCB2YWx1ZSBpcyAnICtcbiAgICAgICdyZXF1aXJlZC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlJywgdGV4dCk7XG59O1xuXG4kaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyID0gZnVuY3Rpb24odGV4dCwgZXJyKSB7XG4gIHJldHVybiAkaW50ZXJwb2xhdGVNaW5FcnIoJ2ludGVycicsICdDYW5cXCd0IGludGVycG9sYXRlOiB7MH1cXG57MX0nLCB0ZXh0LCBlcnIudG9TdHJpbmcoKSk7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIFRoaXMgZmVhdHVyZSBpcyBzb21ldGltZXMgdXNlZCB0byBtaXggZGlmZmVyZW50IG1hcmt1cCBsYW5ndWFnZXMsIGUuZy4gdG8gd3JhcCBhbiBBbmd1bGFyXG4gKiB0ZW1wbGF0ZSB3aXRoaW4gYSBQeXRob24gSmluamEgdGVtcGxhdGUgKG9yIGFueSBvdGhlciB0ZW1wbGF0ZSBsYW5ndWFnZSkuIE1peGluZyB0ZW1wbGF0aW5nXG4gKiBsYW5ndWFnZXMgaXMgKip2ZXJ5IGRhbmdlcm91cyoqLiBUaGUgZW1iZWRkaW5nIHRlbXBsYXRlIGxhbmd1YWdlIHdpbGwgbm90IHNhZmVseSBlc2NhcGUgQW5ndWxhclxuICogZXhwcmVzc2lvbnMsIHNvIGFueSB1c2VyLWNvbnRyb2xsZWQgdmFsdWVzIGluIHRoZSB0ZW1wbGF0ZSB3aWxsIGNhdXNlIENyb3NzIFNpdGUgU2NyaXB0aW5nIChYU1MpXG4gKiBzZWN1cml0eSBidWdzIVxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbjxleGFtcGxlIG5hbWU9XCJjdXN0b20taW50ZXJwb2xhdGlvbi1tYXJrdXBcIiBtb2R1bGU9XCJjdXN0b21JbnRlcnBvbGF0aW9uQXBwXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuPHNjcmlwdD5cbiAgdmFyIGN1c3RvbUludGVycG9sYXRpb25BcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCcsIFtdKTtcblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbmZpZyhmdW5jdGlvbigkaW50ZXJwb2xhdGVQcm92aWRlcikge1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCcvLycpO1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTtcbiAgfSk7XG5cblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbnRyb2xsZXIoJ0RlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxhYmVsID0gXCJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLlwiO1xuICB9KTtcbjwvc2NyaXB0PlxuPGRpdiBuZy1jb250cm9sbGVyPVwiRGVtb0NvbnRyb2xsZXIgYXMgZGVtb1wiPlxuICAgIC8vZGVtby5sYWJlbC8vXG48L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdkZW1vLmxhYmVsJykpLmdldFRleHQoKSkudG9CZSgnVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy4nKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkge1xuICB2YXIgc3RhcnRTeW1ib2wgPSAne3snO1xuICB2YXIgZW5kU3ltYm9sID0gJ319JztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgZW5kaW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHtcbiAgICB2YXIgc3RhcnRTeW1ib2xMZW5ndGggPSBzdGFydFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVzY2FwZWRTdGFydFJlZ2V4cCA9IG5ldyBSZWdFeHAoc3RhcnRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpLFxuICAgICAgICBlc2NhcGVkRW5kUmVnZXhwID0gbmV3IFJlZ0V4cChlbmRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7XG4gICAgICByZXR1cm4gJ1xcXFxcXFxcXFxcXCcgKyBjaDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmVzY2FwZVRleHQodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShlc2NhcGVkU3RhcnRSZWdleHAsIHN0YXJ0U3ltYm9sKS5cbiAgICAgICAgcmVwbGFjZShlc2NhcGVkRW5kUmVnZXhwLCBlbmRTeW1ib2wpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZSBpbiBwYXJzZS5qc1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBjb25zdGFudEludGVycCkge1xuICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gY29uc3RhbnRJbnRlcnBvbGF0ZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgcmV0dXJuIGNvbnN0YW50SW50ZXJwKHNjb3BlKTtcbiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7XG4gICAgICByZXR1cm4gdW53YXRjaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmVxdWlyZXMgJHBhcnNlXG4gICAgICogQHJlcXVpcmVzICRzY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQ29tcGlsZXMgYSBzdHJpbmcgd2l0aCBtYXJrdXAgaW50byBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBUaGlzIHNlcnZpY2UgaXMgdXNlZCBieSB0aGVcbiAgICAgKiBIVE1MIHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0gc2VydmljZSBmb3IgZGF0YSBiaW5kaW5nLiBTZWVcbiAgICAgKiB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIgJGludGVycG9sYXRlUHJvdmlkZXJ9IGZvciBjb25maWd1cmluZyB0aGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uIG1hcmt1cC5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCdIZWxsbyB7e25hbWUgfCB1cHBlcmNhc2V9fSEnKTtcbiAgICAgKiAgIGV4cGVjdChleHAoe25hbWU6J0FuZ3VsYXInfSkpLnRvRXF1YWwoJ0hlbGxvIEFOR1VMQVIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgJGludGVycG9sYXRlYCB0YWtlcyBhbiBvcHRpb25hbCBmb3VydGggYXJndW1lbnQsIGBhbGxPck5vdGhpbmdgLiBJZiBgYWxsT3JOb3RoaW5nYCBpc1xuICAgICAqIGB0cnVlYCwgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9uc1xuICAgICAqIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGNvbnRleHQgPSB7Z3JlZXRpbmc6ICdIZWxsbycsIG5hbWU6IHVuZGVmaW5lZCB9O1xuICAgICAqXG4gICAgICogICAvLyBkZWZhdWx0IFwiZm9yZ2l2aW5nXCIgbW9kZVxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gIScpO1xuICAgICAqXG4gICAgICogICAvLyBcImFsbE9yTm90aGluZ1wiIG1vZGVcbiAgICAgKiAgIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScsIGZhbHNlLCBudWxsLCB0cnVlKTtcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgKiAgIGNvbnRleHQubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvIEFuZ3VsYXIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYWxsT3JOb3RoaW5nYCBpcyB1c2VmdWwgZm9yIGludGVycG9sYXRpbmcgVVJMcy4gYG5nU3JjYCBhbmQgYG5nU3Jjc2V0YCB1c2UgdGhpcyBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXNjYXBlZCBJbnRlcnBvbGF0aW9uXG4gICAgICogJGludGVycG9sYXRlIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBlc2NhcGluZyBpbnRlcnBvbGF0aW9uIG1hcmtlcnMuIFN0YXJ0IGFuZCBlbmQgbWFya2Vyc1xuICAgICAqIGNhbiBiZSBlc2NhcGVkIGJ5IHByZWNlZGluZyBlYWNoIG9mIHRoZWlyIGNoYXJhY3RlcnMgd2l0aCBhIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaCkuXG4gICAgICogSXQgd2lsbCBiZSByZW5kZXJlZCBhcyBhIHJlZ3VsYXIgc3RhcnQvZW5kIG1hcmtlciwgYW5kIHdpbGwgbm90IGJlIGludGVycHJldGVkIGFzIGFuIGV4cHJlc3Npb25cbiAgICAgKiBvciBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBlbmFibGVzIHdlYi1zZXJ2ZXJzIHRvIHByZXZlbnQgc2NyaXB0IGluamVjdGlvbiBhdHRhY2tzIGFuZCBkZWZhY2luZyBhdHRhY2tzLCB0byBzb21lXG4gICAgICogZGVncmVlLCB3aGlsZSBhbHNvIGVuYWJsaW5nIGNvZGUgZXhhbXBsZXMgdG8gd29yayB3aXRob3V0IHJlbHlpbmcgb24gdGhlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ05vbkJpbmRhYmxlIG5nTm9uQmluZGFibGV9IGRpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqICoqRm9yIHNlY3VyaXR5IHB1cnBvc2VzLCBpdCBpcyBzdHJvbmdseSBlbmNvdXJhZ2VkIHRoYXQgd2ViIHNlcnZlcnMgZXNjYXBlIHVzZXItc3VwcGxpZWQgZGF0YSxcbiAgICAgKiByZXBsYWNpbmcgYW5nbGUgYnJhY2tldHMgKCZsdDssICZndDspIHdpdGggJmFtcDtsdDsgYW5kICZhbXA7Z3Q7IHJlc3BlY3RpdmVseSwgYW5kIHJlcGxhY2luZyBhbGxcbiAgICAgKiBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggdGhlaXIgZXNjYXBlZCBjb3VudGVycGFydHMuKipcbiAgICAgKlxuICAgICAqIEVzY2FwZWQgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGFyZSBvbmx5IHJlcGxhY2VkIHdpdGggdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgaW4gcmVuZGVyZWRcbiAgICAgKiBvdXRwdXQgd2hlbiB0aGUgJGludGVycG9sYXRlIHNlcnZpY2UgcHJvY2Vzc2VzIHRoZSB0ZXh0LiBTbywgZm9yIEhUTUwgZWxlbWVudHMgaW50ZXJwb2xhdGVkXG4gICAgICogYnkge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSwgb3Igb3RoZXJ3aXNlIGludGVycG9sYXRlZCB3aXRoIHRoZSBgbXVzdEhhdmVFeHByZXNzaW9uYCBwYXJhbWV0ZXJcbiAgICAgKiBzZXQgdG8gYHRydWVgLCB0aGUgaW50ZXJwb2xhdGVkIHRleHQgbXVzdCBjb250YWluIGFuIHVuZXNjYXBlZCBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24uIEFzIHN1Y2gsXG4gICAgICogdGhpcyBpcyB0eXBpY2FsbHkgdXNlZnVsIG9ubHkgd2hlbiB1c2VyLWRhdGEgaXMgdXNlZCBpbiByZW5kZXJpbmcgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBzZXJ2ZXIsIG9yXG4gICAgICogd2hlbiBvdGhlcndpc2UgdW50cnVzdGVkIGRhdGEgaXMgdXNlZCBieSBhIGRpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIDxleGFtcGxlIG5hbWU9XCJpbnRlcnBvbGF0aW9uXCI+XG4gICAgICogIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICogICAgPGRpdiBuZy1pbml0PVwidXNlcm5hbWU9J0EgdXNlcidcIj5cbiAgICAgKiAgICAgIDxwIG5nLWluaXQ9XCJhcHB0aXRsZT0nRXNjYXBpbmcgZGVtbydcIj57e2FwcHRpdGxlfX06IFxce1xceyB1c2VybmFtZSA9IFwiZGVmYWNlZCB2YWx1ZVwiOyBcXH1cXH1cbiAgICAgKiAgICAgICAgPC9wPlxuICAgICAqICAgICAgPHA+PHN0cm9uZz57e3VzZXJuYW1lfX08L3N0cm9uZz4gYXR0ZW1wdHMgdG8gaW5qZWN0IGNvZGUgd2hpY2ggd2lsbCBkZWZhY2UgdGhlXG4gICAgICogICAgICAgIGFwcGxpY2F0aW9uLCBidXQgZmFpbHMgdG8gYWNjb21wbGlzaCB0aGVpciB0YXNrLCBiZWNhdXNlIHRoZSBzZXJ2ZXIgaGFzIGNvcnJlY3RseVxuICAgICAqICAgICAgICBlc2NhcGVkIHRoZSBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKVxuICAgICAqICAgICAgICBjaGFyYWN0ZXJzLjwvcD5cbiAgICAgKiAgICAgIDxwPkluc3RlYWQsIHRoZSByZXN1bHQgb2YgdGhlIGF0dGVtcHRlZCBzY3JpcHQgaW5qZWN0aW9uIGlzIHZpc2libGUsIGFuZCBjYW4gYmUgcmVtb3ZlZFxuICAgICAqICAgICAgICBmcm9tIHRoZSBkYXRhYmFzZSBieSBhbiBhZG1pbmlzdHJhdG9yLjwvcD5cbiAgICAgKiAgICA8L2Rpdj5cbiAgICAgKiAgPC9maWxlPlxuICAgICAqIDwvZXhhbXBsZT5cbiAgICAgKlxuICAgICAqIEBrbm93bklzc3VlXG4gICAgICogSXQgaXMgY3VycmVudGx5IG5vdCBwb3NzaWJsZSBmb3IgYW4gaW50ZXJwb2xhdGVkIGV4cHJlc3Npb24gdG8gY29udGFpbiB0aGUgaW50ZXJwb2xhdGlvbiBlbmRcbiAgICAgKiBzeW1ib2wuIEZvciBleGFtcGxlLCBge3sgJ319JyB9fWAgd2lsbCBiZSBpbmNvcnJlY3RseSBpbnRlcnByZXRlZCBhcyBge3sgJyB9fWAgKyBgJyB9fWAsIGkuZS5cbiAgICAgKiBhbiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbiBjb25zaXN0aW5nIG9mIGEgc2luZ2xlLXF1b3RlIChgJ2ApIGFuZCB0aGUgYCcgfX1gIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBrbm93bklzc3VlXG4gICAgICogQWxsIGRpcmVjdGl2ZXMgYW5kIGNvbXBvbmVudHMgbXVzdCB1c2UgdGhlIHN0YW5kYXJkIGB7e2AgYH19YCBpbnRlcnBvbGF0aW9uIHN5bWJvbHNcbiAgICAgKiBpbiB0aGVpciB0ZW1wbGF0ZXMuIElmIHlvdSBjaGFuZ2UgdGhlIGFwcGxpY2F0aW9uIGludGVycG9sYXRpb24gc3ltYm9scyB0aGUge0BsaW5rICRjb21waWxlfVxuICAgICAqIHNlcnZpY2Ugd2lsbCBhdHRlbXB0IHRvIGRlbm9ybWFsaXplIHRoZSBzdGFuZGFyZCBzeW1ib2xzIHRvIHRoZSBjdXN0b20gc3ltYm9scy5cbiAgICAgKiBUaGUgZGVub3JtYWxpemF0aW9uIHByb2Nlc3MgaXMgbm90IGNsZXZlciBlbm91Z2ggdG8ga25vdyBub3QgdG8gcmVwbGFjZSBpbnN0YW5jZXMgb2YgdGhlIHN0YW5kYXJkXG4gICAgICogc3ltYm9scyB3aGVyZSB0aGV5IHdvdWxkIG5vdCBub3JtYWxseSBiZSB0cmVhdGVkIGFzIGludGVycG9sYXRpb24gc3ltYm9scy4gRm9yIGV4YW1wbGUgaW4gdGhlIGZvbGxvd2luZ1xuICAgICAqIGNvZGUgc25pcHBldCB0aGUgY2xvc2luZyBicmFjZXMgb2YgdGhlIGxpdGVyYWwgb2JqZWN0IHdpbGwgZ2V0IGluY29ycmVjdGx5IGRlbm9ybWFsaXplZDpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIDxkaXYgZGF0YS1jb250ZXh0PSd7XCJjb250ZXh0XCI6e1wiaWRcIjozLFwidHlwZVwiOlwicGFnZVwifX1cIj5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSB3b3JrYXJvdW5kIGlzIHRvIGVuc3VyZSB0aGF0IHN1Y2ggaW5zdGFuY2VzIGFyZSBzZXBhcmF0ZWQgYnkgd2hpdGVzcGFjZTpcbiAgICAgKiBgYGBcbiAgICAgKiA8ZGl2IGRhdGEtY29udGV4dD0ne1wiY29udGV4dFwiOntcImlkXCI6MyxcInR5cGVcIjpcInBhZ2VcIn0gfVwiPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xNDYxMCNpc3N1ZWNvbW1lbnQtMjE5NDAxMDk5IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBtYXJrdXAgdG8gaW50ZXJwb2xhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZVxuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBub1xuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gd2lsbCByZXR1cm4gbnVsbCBmb3IgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cnVzdGVkQ29udGV4dCB3aGVuIHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcGFzc2VzIHRoZSBpbnRlcnBvbGF0ZWRcbiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsXG4gICAgICogICAgdHJ1c3RlZENvbnRleHQpfSBiZWZvcmUgcmV0dXJuaW5nIGl0LiAgUmVmZXIgdG8gdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UgdGhhdFxuICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICogICAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9ucyBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6XG4gICAgICpcbiAgICAgKiAtIGBjb250ZXh0YDogZXZhbHVhdGlvbiBjb250ZXh0IGZvciBhbGwgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIGludGVycG9sYXRlZCB0ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGludGVycG9sYXRlKHRleHQsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZykge1xuICAgICAgLy8gUHJvdmlkZSBhIHF1aWNrIGV4aXQgYW5kIHNpbXBsaWZpZWQgcmVzdWx0IGZ1bmN0aW9uIGZvciB0ZXh0IHdpdGggbm8gaW50ZXJwb2xhdGlvblxuICAgICAgaWYgKCF0ZXh0Lmxlbmd0aCB8fCB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wpID09PSAtMSkge1xuICAgICAgICB2YXIgY29uc3RhbnRJbnRlcnA7XG4gICAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uKSB7XG4gICAgICAgICAgdmFyIHVuZXNjYXBlZFRleHQgPSB1bmVzY2FwZVRleHQodGV4dCk7XG4gICAgICAgICAgY29uc3RhbnRJbnRlcnAgPSB2YWx1ZUZuKHVuZXNjYXBlZFRleHQpO1xuICAgICAgICAgIGNvbnN0YW50SW50ZXJwLmV4cCA9IHRleHQ7XG4gICAgICAgICAgY29uc3RhbnRJbnRlcnAuZXhwcmVzc2lvbnMgPSBbXTtcbiAgICAgICAgICBjb25zdGFudEludGVycC4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnN0YW50SW50ZXJwO1xuICAgICAgfVxuXG4gICAgICBhbGxPck5vdGhpbmcgPSAhIWFsbE9yTm90aGluZztcbiAgICAgIHZhciBzdGFydEluZGV4LFxuICAgICAgICAgIGVuZEluZGV4LFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBleHByZXNzaW9ucyA9IFtdLFxuICAgICAgICAgIHBhcnNlRm5zID0gW10sXG4gICAgICAgICAgdGV4dExlbmd0aCA9IHRleHQubGVuZ3RoLFxuICAgICAgICAgIGV4cCxcbiAgICAgICAgICBjb25jYXQgPSBbXSxcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zID0gW107XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IHRleHRMZW5ndGgpIHtcbiAgICAgICAgaWYgKCgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPT0gLTEpICYmXG4gICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9PSAtMSkpIHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhwID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoLCBlbmRJbmRleCk7XG4gICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHApO1xuICAgICAgICAgIHBhcnNlRm5zLnB1c2goJHBhcnNlKGV4cCwgcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcikpO1xuICAgICAgICAgIGluZGV4ID0gZW5kSW5kZXggKyBlbmRTeW1ib2xMZW5ndGg7XG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucy5wdXNoKGNvbmNhdC5sZW5ndGgpO1xuICAgICAgICAgIGNvbmNhdC5wdXNoKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW4gaW50ZXJwb2xhdGlvbiwgc28gd2UgaGF2ZSB0byBhZGQgdGhlIHJlbWFpbmRlciB0byB0aGUgc2VwYXJhdG9ycyBhcnJheVxuICAgICAgICAgIGlmIChpbmRleCAhPT0gdGV4dExlbmd0aCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb25jYXRlbmF0aW5nIGV4cHJlc3Npb25zIG1ha2VzIGl0IGhhcmQgdG8gcmVhc29uIGFib3V0IHdoZXRoZXIgc29tZSBjb21iaW5hdGlvbiBvZlxuICAgICAgLy8gY29uY2F0ZW5hdGVkIHZhbHVlcyBhcmUgdW5zYWZlIHRvIHVzZSBhbmQgY291bGQgZWFzaWx5IGxlYWQgdG8gWFNTLiAgQnkgcmVxdWlyaW5nIHRoYXQgYVxuICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWVcbiAgICAgIC8vIHRoYXQncyB1c2VkIGlzIGFzc2lnbmVkIG9yIGNvbnN0cnVjdGVkIGJ5IHNvbWUgSlMgY29kZSBzb21ld2hlcmUgdGhhdCBpcyBtb3JlIHRlc3RhYmxlIG9yXG4gICAgICAvLyBtYWtlIGl0IG9idmlvdXMgdGhhdCB5b3UgYm91bmQgdGhlIHZhbHVlIHRvIHNvbWUgdXNlciBjb250cm9sbGVkIHZhbHVlLiAgVGhpcyBoZWxwcyByZWR1Y2VcbiAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuXG4gICAgICBpZiAodHJ1c3RlZENvbnRleHQgJiYgY29uY2F0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAkaW50ZXJwb2xhdGVNaW5FcnIudGhyb3dOb2NvbmNhdCh0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gfHwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb21wdXRlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFsbE9yTm90aGluZyAmJiBpc1VuZGVmaW5lZCh2YWx1ZXNbaV0pKSByZXR1cm47XG4gICAgICAgICAgICBjb25jYXRbZXhwcmVzc2lvblBvc2l0aW9uc1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZENvbnRleHQgP1xuICAgICAgICAgICAgJHNjZS5nZXRUcnVzdGVkKHRydXN0ZWRDb250ZXh0LCB2YWx1ZSkgOlxuICAgICAgICAgICAgJHNjZS52YWx1ZU9mKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uIGludGVycG9sYXRpb25Gbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGlpKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gcGFyc2VGbnNbaV0oY29udGV4dCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgLy8gYWxsIG9mIHRoZXNlIHByb3BlcnRpZXMgYXJlIHVuZG9jdW1lbnRlZCBmb3Igbm93XG4gICAgICAgICAgZXhwOiB0ZXh0LCAvL2p1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCByZWd1bGFyIHdhdGNoZXJzIGNyZWF0ZWQgdmlhICR3YXRjaFxuICAgICAgICAgIGV4cHJlc3Npb25zOiBleHByZXNzaW9ucyxcbiAgICAgICAgICAkJHdhdGNoRGVsZWdhdGU6IGZ1bmN0aW9uKHNjb3BlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2hHcm91cChwYXJzZUZucywgLyoqIEB0aGlzICovIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaGVyKHZhbHVlcywgb2xkVmFsdWVzKSB7XG4gICAgICAgICAgICAgIHZhciBjdXJyVmFsdWUgPSBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgY3VyclZhbHVlLCB2YWx1ZXMgIT09IG9sZFZhbHVlcyA/IGxhc3RWYWx1ZSA6IGN1cnJWYWx1ZSwgc2NvcGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGN1cnJWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gYWxsT3JOb3RoaW5nICYmICFpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcigkaW50ZXJwb2xhdGVNaW5FcnIuaW50ZXJyKHRleHQsIGVycikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0YXJ0IHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI2VuZFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBlbmQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfTtcblxuICAgIHJldHVybiAkaW50ZXJwb2xhdGU7XG4gIH1dO1xufVxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRJbnRlcnZhbFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJHdpbmRvdycsICckcScsICckJHEnLCAnJGJyb3dzZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJHdpbmRvdywgICAkcSwgICAkJHEsICAgJGJyb3dzZXIpIHtcbiAgICB2YXIgaW50ZXJ2YWxzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJGludGVydmFsXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRJbnRlcnZhbGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGV2ZXJ5IGBkZWxheWBcbiAgICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAgKlxuICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHJlZ2lzdGVyaW5nIGFuIGludGVydmFsIGZ1bmN0aW9uIGlzIGEgcHJvbWlzZS4gVGhpcyBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogbm90aWZpZWQgdXBvbiBlYWNoIHRpY2sgb2YgdGhlIGludGVydmFsLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBgY291bnRgIGl0ZXJhdGlvbnMsIG9yXG4gICAgICAqIHJ1biBpbmRlZmluaXRlbHkgaWYgYGNvdW50YCBpcyBub3QgZGVmaW5lZC4gVGhlIHZhbHVlIG9mIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSB0aGVcbiAgICAgICogbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdGhhdCBoYXZlIHJ1bi5cbiAgICAgICogVG8gY2FuY2VsIGFuIGludGVydmFsLCBjYWxsIGAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kaW50ZXJ2YWwjZmx1c2ggYCRpbnRlcnZhbC5mbHVzaChtaWxsaXMpYH0gdG9cbiAgICAgICogbW92ZSBmb3J3YXJkIGJ5IGBtaWxsaXNgIG1pbGxpc2Vjb25kcyBhbmQgdHJpZ2dlciBhbnkgZnVuY3Rpb25zIHNjaGVkdWxlZCB0byBydW4gaW4gdGhhdFxuICAgICAgKiB0aW1lLlxuICAgICAgKlxuICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgKiAqKk5vdGUqKjogSW50ZXJ2YWxzIGNyZWF0ZWQgYnkgdGhpcyBzZXJ2aWNlIG11c3QgYmUgZXhwbGljaXRseSBkZXN0cm95ZWQgd2hlbiB5b3UgYXJlIGZpbmlzaGVkXG4gICAgICAqIHdpdGggdGhlbS4gIEluIHBhcnRpY3VsYXIgdGhleSBhcmUgbm90IGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkIHdoZW4gYSBjb250cm9sbGVyJ3Mgc2NvcGUgb3IgYVxuICAgICAgKiBkaXJlY3RpdmUncyBlbGVtZW50IGFyZSBkZXN0cm95ZWQuXG4gICAgICAqIFlvdSBzaG91bGQgdGFrZSB0aGlzIGludG8gY29uc2lkZXJhdGlvbiBhbmQgbWFrZSBzdXJlIHRvIGFsd2F5cyBjYW5jZWwgdGhlIGludGVydmFsIGF0IHRoZVxuICAgICAgKiBhcHByb3ByaWF0ZSBtb21lbnQuICBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIG1vcmUgZGV0YWlscyBvbiBob3cgYW5kIHdoZW4gdG8gZG8gdGhpcy5cbiAgICAgICogPC9kaXY+XG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgcmVwZWF0ZWRseS4gSWYgbm8gYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgICogICBhcmUgcGFzc2VkIChzZWUgYmVsb3cpLCB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgaXRlcmF0aW9uIGNvdW50LlxuICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGVhY2ggZnVuY3Rpb24gY2FsbC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbY291bnQ9MF0gTnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC4gSWYgbm90IHNldCwgb3IgMCwgd2lsbCByZXBlYXRcbiAgICAgICogICBpbmRlZmluaXRlbHkuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi4gSXQgd2lsbCByZXNvbHZlIG9uY2UgYWxsIGl0ZXJhdGlvbnMgb2YgdGhlIGludGVydmFsIGNvbXBsZXRlLlxuICAgICAgKlxuICAgICAgKiBAZXhhbXBsZVxuICAgICAgKiA8ZXhhbXBsZSBtb2R1bGU9XCJpbnRlcnZhbEV4YW1wbGVcIiBuYW1lPVwiaW50ZXJ2YWwtc2VydmljZVwiPlxuICAgICAgKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgKiAgIDxzY3JpcHQ+XG4gICAgICAqICAgICBhbmd1bGFyLm1vZHVsZSgnaW50ZXJ2YWxFeGFtcGxlJywgW10pXG4gICAgICAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsXG4gICAgICAqICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICogICAgICAgICAgICRzY29wZS5mb3JtYXQgPSAnTS9kL3l5IGg6bW06c3MgYSc7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgdmFyIHN0b3A7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuZmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgLy8gRG9uJ3Qgc3RhcnQgYSBuZXcgZmlnaHQgaWYgd2UgYXJlIGFscmVhZHkgZmlnaHRpbmdcbiAgICAgICogICAgICAgICAgICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSApIHJldHVybjtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJsb29kXzEgPiAwICYmICRzY29wZS5ibG9vZF8yID4gMCkge1xuICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAkc2NvcGUuYmxvb2RfMSAtIDM7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9ICRzY29wZS5ibG9vZF8yIC0gNDtcbiAgICAgICogICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpO1xuICAgICAgKiAgICAgICAgICAgICAgIH1cbiAgICAgICogICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICogICAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSkge1xuICAgICAgKiAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcCk7XG4gICAgICAqICAgICAgICAgICAgICAgc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICogICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9IDEyMDtcbiAgICAgICogICAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaW50ZXJ2YWwgaXMgZGVzdHJveWVkIHRvb1xuICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICB9KTtcbiAgICAgICogICAgICAgICB9XSlcbiAgICAgICogICAgICAgLy8gUmVnaXN0ZXIgdGhlICdteUN1cnJlbnRUaW1lJyBkaXJlY3RpdmUgZmFjdG9yeSBtZXRob2QuXG4gICAgICAqICAgICAgIC8vIFdlIGluamVjdCAkaW50ZXJ2YWwgYW5kIGRhdGVGaWx0ZXIgc2VydmljZSBzaW5jZSB0aGUgZmFjdG9yeSBtZXRob2QgaXMgREkuXG4gICAgICAqICAgICAgIC5kaXJlY3RpdmUoJ215Q3VycmVudFRpbWUnLCBbJyRpbnRlcnZhbCcsICdkYXRlRmlsdGVyJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkaW50ZXJ2YWwsIGRhdGVGaWx0ZXIpIHtcbiAgICAgICogICAgICAgICAgIC8vIHJldHVybiB0aGUgZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb24uIChjb21waWxlIGZ1bmN0aW9uIG5vdCBuZWVkZWQpXG4gICAgICAqICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAqICAgICAgICAgICAgIHZhciBmb3JtYXQsICAvLyBkYXRlIGZvcm1hdFxuICAgICAgKiAgICAgICAgICAgICAgICAgc3RvcFRpbWU7IC8vIHNvIHRoYXQgd2UgY2FuIGNhbmNlbCB0aGUgdGltZSB1cGRhdGVzXG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIHVzZWQgdG8gdXBkYXRlIHRoZSBVSVxuICAgICAgKiAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUaW1lKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dChkYXRlRmlsdGVyKG5ldyBEYXRlKCksIGZvcm1hdCkpO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIHdhdGNoIHRoZSBleHByZXNzaW9uLCBhbmQgdXBkYXRlIHRoZSBVSSBvbiBjaGFuZ2UuXG4gICAgICAqICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRycy5teUN1cnJlbnRUaW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgKiAgICAgICAgICAgICAgIGZvcm1hdCA9IHZhbHVlO1xuICAgICAgKiAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICogICAgICAgICAgICAgfSk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIHN0b3BUaW1lID0gJGludGVydmFsKHVwZGF0ZVRpbWUsIDEwMDApO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICAvLyBsaXN0ZW4gb24gRE9NIGRlc3Ryb3kgKHJlbW92YWwpIGV2ZW50LCBhbmQgY2FuY2VsIHRoZSBuZXh0IFVJIHVwZGF0ZVxuICAgICAgKiAgICAgICAgICAgICAvLyB0byBwcmV2ZW50IHVwZGF0aW5nIHRpbWUgYWZ0ZXIgdGhlIERPTSBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgICAgKiAgICAgICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcFRpbWUpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICogICAgICAgICAgIH1cbiAgICAgICogICAgICAgICB9XSk7XG4gICAgICAqICAgPC9zY3JpcHQ+XG4gICAgICAqXG4gICAgICAqICAgPGRpdj5cbiAgICAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAqICAgICAgIDxsYWJlbD5EYXRlIGZvcm1hdDogPGlucHV0IG5nLW1vZGVsPVwiZm9ybWF0XCI+PC9sYWJlbD4gPGhyLz5cbiAgICAgICogICAgICAgQ3VycmVudCB0aW1lIGlzOiA8c3BhbiBteS1jdXJyZW50LXRpbWU9XCJmb3JtYXRcIj48L3NwYW4+XG4gICAgICAqICAgICAgIDxoci8+XG4gICAgICAqICAgICAgIEJsb29kIDEgOiA8Zm9udCBjb2xvcj0ncmVkJz57e2Jsb29kXzF9fTwvZm9udD5cbiAgICAgICogICAgICAgQmxvb2QgMiA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMn19PC9mb250PlxuICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwiZmlnaHQoKVwiPkZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJzdG9wRmlnaHQoKVwiPlN0b3BGaWdodDwvYnV0dG9uPlxuICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwicmVzZXRGaWdodCgpXCI+cmVzZXRGaWdodDwvYnV0dG9uPlxuICAgICAgKiAgICAgPC9kaXY+XG4gICAgICAqICAgPC9kaXY+XG4gICAgICAqXG4gICAgICAqIDwvZmlsZT5cbiAgICAgICogPC9leGFtcGxlPlxuICAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnRlcnZhbChmbiwgZGVsYXksIGNvdW50LCBpbnZva2VBcHBseSkge1xuICAgICAgdmFyIGhhc1BhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0LFxuICAgICAgICAgIGFyZ3MgPSBoYXNQYXJhbXMgPyBzbGljZUFyZ3MoYXJndW1lbnRzLCA0KSA6IFtdLFxuICAgICAgICAgIHNldEludGVydmFsID0gJHdpbmRvdy5zZXRJbnRlcnZhbCxcbiAgICAgICAgICBjbGVhckludGVydmFsID0gJHdpbmRvdy5jbGVhckludGVydmFsLFxuICAgICAgICAgIGl0ZXJhdGlvbiA9IDAsXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgY291bnQgPSBpc0RlZmluZWQoY291bnQpID8gY291bnQgOiAwO1xuXG4gICAgICBwcm9taXNlLiQkaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgIGlmIChza2lwQXBwbHkpIHtcbiAgICAgICAgICAkYnJvd3Nlci5kZWZlcihjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZlcnJlZC5ub3RpZnkoaXRlcmF0aW9uKyspO1xuXG4gICAgICAgIGlmIChjb3VudCA+IDAgJiYgaXRlcmF0aW9uID49IGNvdW50KSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVyYXRpb24pO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwocHJvbWlzZS4kJGludGVydmFsSWQpO1xuICAgICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG5cbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXSA9IGRlZmVycmVkO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgIGlmICghaGFzUGFyYW1zKSB7XG4gICAgICAgICAgZm4oaXRlcmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIHdhcyBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuXG4gICAgICAqL1xuICAgIGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCRpbnRlcnZhbElkIGluIGludGVydmFscykge1xuICAgICAgICAvLyBJbnRlcnZhbCBjYW5jZWxzIHNob3VsZCBub3QgcmVwb3J0IGFzIHVuaGFuZGxlZCBwcm9taXNlLlxuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICAkd2luZG93LmNsZWFySW50ZXJ2YWwocHJvbWlzZS4kJGludGVydmFsSWQpO1xuICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiBpbnRlcnZhbDtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRqc29ucENhbGxiYWNrc1xuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBzZXJ2aWNlIGhhbmRsZXMgdGhlIGxpZmVjeWNsZSBvZiBjYWxsYmFja3MgdG8gaGFuZGxlIEpTT05QIHJlcXVlc3RzLlxuICogT3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIGlmIHlvdSB3aXNoIHRvIGN1c3RvbWlzZSB3aGVyZSB0aGUgY2FsbGJhY2tzIGFyZSBzdG9yZWQgYW5kXG4gKiBob3cgdGhleSB2YXJ5IGNvbXBhcmVkIHRvIHRoZSByZXF1ZXN0ZWQgdXJsLlxuICovXG52YXIgJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSBhbmd1bGFyLmNhbGxiYWNrcztcbiAgICB2YXIgY2FsbGJhY2tNYXAgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrSWQpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2suZGF0YSA9IGRhdGE7XG4gICAgICAgIGNhbGxiYWNrLmNhbGxlZCA9IHRydWU7XG4gICAgICB9O1xuICAgICAgY2FsbGJhY2suaWQgPSBjYWxsYmFja0lkO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNjcmVhdGVDYWxsYmFja1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCB0aGUgdXJsIG9mIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgY2FsbGJhY2sgcGF0aCB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIgYXMgcGFydCBvZiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byBjcmVhdGUgYSBjYWxsYmFjayBhbmQgZ2V0IGhvbGQgb2YgdGhlIHBhdGggdG8gdGhlIGNhbGxiYWNrXG4gICAgICAgKiB0byBwYXNzIHRvIHRoZSBzZXJ2ZXIsIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBjYWxsIHRoZSBjYWxsYmFjayB3aXRoIGl0cyBwYXlsb2FkIGluIHRoZSBKU09OUCByZXNwb25zZS5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlQ2FsbGJhY2s6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICB2YXIgY2FsbGJhY2tJZCA9ICdfJyArIChjYWxsYmFja3MuJCRjb3VudGVyKyspLnRvU3RyaW5nKDM2KTtcbiAgICAgICAgdmFyIGNhbGxiYWNrUGF0aCA9ICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZDtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2tJZCk7XG4gICAgICAgIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF0gPSBjYWxsYmFja3NbY2FsbGJhY2tJZF0gPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrUGF0aDtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyN3YXNDYWxsZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFja1BhdGggdGhlIHBhdGggdG8gdGhlIGNhbGxiYWNrIHRoYXQgd2FzIHNlbnQgaW4gdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoZSBjYWxsYmFjayBoYXMgYmVlbiBjYWxsZWQsIGFzIGEgcmVzdWx0IG9mIHRoZSBKU09OUCByZXNwb25zZVxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byBmaW5kIG91dCB3aGV0aGVyIHRoZSBKU09OUCByZXNwb25zZSBhY3R1YWxseSBjYWxsZWQgdGhlXG4gICAgICAgKiBjYWxsYmFjayB0aGF0IHdhcyBwYXNzZWQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICAgKi9cbiAgICAgIHdhc0NhbGxlZDogZnVuY3Rpb24oY2FsbGJhY2tQYXRoKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdLmNhbGxlZDtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNnZXRSZXNwb25zZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQHJldHVybnMgeyp9IHRoZSBkYXRhIHJlY2VpdmVkIGZyb20gdGhlIHJlc3BvbnNlIHZpYSB0aGUgcmVnaXN0ZXJlZCBjYWxsYmFja1xuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byBnZXQgaG9sZCBvZiB0aGUgZGF0YSB0aGF0IHdhcyBwcm92aWRlZCB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAqIGluIHRoZSBKU09OUCByZXNwb25zZS5cbiAgICAgICAqL1xuICAgICAgZ2V0UmVzcG9uc2U6IGZ1bmN0aW9uKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXS5kYXRhO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGpzb25wQ2FsbGJhY2tzI3JlbW92ZUNhbGxiYWNrXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tQYXRoIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdhcyBzZW50IGluIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIHtAbGluayAkaHR0cEJhY2tlbmR9IGNhbGxzIHRoaXMgbWV0aG9kIHRvIHJlbW92ZSB0aGUgY2FsbGJhY2sgYWZ0ZXIgdGhlIEpTT05QIHJlcXVlc3QgaGFzXG4gICAgICAgKiBjb21wbGV0ZWQgb3IgdGltZWQtb3V0LlxuICAgICAgICovXG4gICAgICByZW1vdmVDYWxsYmFjazogZnVuY3Rpb24oY2FsbGJhY2tQYXRoKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF07XG4gICAgICAgIGRlbGV0ZSBjYWxsYmFja3NbY2FsbGJhY2suaWRdO1xuICAgICAgICBkZWxldGUgY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvY2FsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGVcbiAqIG9ubHkgcHVibGljIGFwaSBpczpcbiAqXG4gKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKVxuICovXG5cbnZhciBQQVRIX01BVENIID0gL14oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvLFxuICAgIERFRkFVTFRfUE9SVFMgPSB7J2h0dHAnOiA4MCwgJ2h0dHBzJzogNDQzLCAnZnRwJzogMjF9O1xudmFyICRsb2NhdGlvbk1pbkVyciA9IG1pbkVycignJGxvY2F0aW9uJyk7XG5cblxuLyoqXG4gKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgIGkgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHNlZ21lbnRzW2ldID0gZW5jb2RlVXJpU2VnbWVudChzZWdtZW50c1tpXSk7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudHMuam9pbignLycpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFic29sdXRlVXJsKGFic29sdXRlVXJsLCBsb2NhdGlvbk9iaikge1xuICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZShhYnNvbHV0ZVVybCk7XG5cbiAgbG9jYXRpb25PYmouJCRwcm90b2NvbCA9IHBhcnNlZFVybC5wcm90b2NvbDtcbiAgbG9jYXRpb25PYmouJCRob3N0ID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xuICBsb2NhdGlvbk9iai4kJHBvcnQgPSB0b0ludChwYXJzZWRVcmwucG9ydCkgfHwgREVGQVVMVF9QT1JUU1twYXJzZWRVcmwucHJvdG9jb2xdIHx8IG51bGw7XG59XG5cbnZhciBET1VCTEVfU0xBU0hfUkVHRVggPSAvXlxccypbXFxcXC9dezIsfS87XG5mdW5jdGlvbiBwYXJzZUFwcFVybCh1cmwsIGxvY2F0aW9uT2JqKSB7XG5cbiAgaWYgKERPVUJMRV9TTEFTSF9SRUdFWC50ZXN0KHVybCkpIHtcbiAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2JhZHBhdGgnLCAnSW52YWxpZCB1cmwgXCJ7MH1cIi4nLCB1cmwpO1xuICB9XG5cbiAgdmFyIHByZWZpeGVkID0gKHVybC5jaGFyQXQoMCkgIT09ICcvJyk7XG4gIGlmIChwcmVmaXhlZCkge1xuICAgIHVybCA9ICcvJyArIHVybDtcbiAgfVxuICB2YXIgbWF0Y2ggPSB1cmxSZXNvbHZlKHVybCk7XG4gIGxvY2F0aW9uT2JqLiQkcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXhlZCAmJiBtYXRjaC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/XG4gICAgICBtYXRjaC5wYXRobmFtZS5zdWJzdHJpbmcoMSkgOiBtYXRjaC5wYXRobmFtZSk7XG4gIGxvY2F0aW9uT2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpO1xuICBsb2NhdGlvbk9iai4kJGhhc2ggPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2guaGFzaCk7XG5cbiAgLy8gbWFrZSBzdXJlIHBhdGggc3RhcnRzIHdpdGggJy8nO1xuICBpZiAobG9jYXRpb25PYmouJCRwYXRoICYmIGxvY2F0aW9uT2JqLiQkcGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgIGxvY2F0aW9uT2JqLiQkcGF0aCA9ICcvJyArIGxvY2F0aW9uT2JqLiQkcGF0aDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoKSB7XG4gIHJldHVybiBzdHIuc2xpY2UoMCwgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgdGV4dCBmcm9tIGB1cmxgIGFmdGVyIGBiYXNlYCBvciBgdW5kZWZpbmVkYCBpZiBpdCBkb2VzIG5vdCBiZWdpbiB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICB0aGUgZXhwZWN0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VVcmwoYmFzZSwgdXJsKSB7XG4gIGlmIChzdGFydHNXaXRoKHVybCwgYmFzZSkpIHtcbiAgICByZXR1cm4gdXJsLnN1YnN0cihiYXNlLmxlbmd0aCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBpbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc3Vic3RyKDAsIGluZGV4KTtcbn1cblxuZnVuY3Rpb24gdHJpbUVtcHR5SGFzaCh1cmwpIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC8oIy4rKXwjJC8sICckMScpO1xufVxuXG5cbmZ1bmN0aW9uIHN0cmlwRmlsZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHIoMCwgc3RyaXBIYXNoKHVybCkubGFzdEluZGV4T2YoJy8nKSArIDEpO1xufVxuXG4vKiByZXR1cm4gdGhlIHNlcnZlciBvbmx5IChzY2hlbWU6Ly9ob3N0OnBvcnQpICovXG5mdW5jdGlvbiBzZXJ2ZXJCYXNlKHVybCkge1xuICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignLycsIHVybC5pbmRleE9mKCcvLycpICsgMikpO1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IdG1sNVVybCByZXByZXNlbnRzIGEgVVJMXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IFVSTCBwYXRoIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGJhc2VQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gSFRNTDUgKHJlZ3VsYXIpIFVSTCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgVVJMXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcGF0aFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpO1xuICAgIGlmICghaXNTdHJpbmcocGF0aFVybCkpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXB0aHByZngnLCAnSW52YWxpZCB1cmwgXCJ7MH1cIiwgbWlzc2luZyBwYXRoIHByZWZpeCBcInsxfVwiLicsIHVybCxcbiAgICAgICAgICBhcHBCYXNlTm9GaWxlKTtcbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybChwYXRoVXJsLCB0aGlzKTtcblxuICAgIGlmICghdGhpcy4kJHBhdGgpIHtcbiAgICAgIHRoaXMuJCRwYXRoID0gJy8nO1xuICAgIH1cblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZU5vRmlsZSArIHRoaXMuJCR1cmwuc3Vic3RyKDEpOyAvLyBmaXJzdCBjaGFyIGlzIGFsd2F5cyAnLydcblxuICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XG4gICAgdmFyIHJld3JpdHRlblVybDtcblxuXG4gICAgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZSwgdXJsKSkpIHtcbiAgICAgIHByZXZBcHBVcmwgPSBhcHBVcmw7XG4gICAgICBpZiAoYmFzZVByZWZpeCAmJiBpc0RlZmluZWQoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGJhc2VQcmVmaXgsIGFwcFVybCkpKSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyAoc3RyaXBCYXNlVXJsKCcvJywgYXBwVXJsKSB8fCBhcHBVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZSArIHByZXZBcHBVcmw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmluZWQoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PT0gdXJsICsgJy8nKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlO1xuICAgIH1cbiAgICBpZiAocmV3cml0dGVuVXJsKSB7XG4gICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmV3cml0dGVuVXJsO1xuICB9O1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIFVSTFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGRldmVsb3BlciBkb2Vzbid0IG9wdCBpbnRvIGh0bWw1IG1vZGUuXG4gKiBJdCBhbHNvIHNlcnZlcyBhcyB0aGUgYmFzZSBjbGFzcyBmb3IgaHRtbDUgbW9kZSBmYWxsYmFjayBvbiBsZWdhY3kgYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ1VybChhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCBoYXNoUHJlZml4KSB7XG5cbiAgcGFyc2VBYnNvbHV0ZVVybChhcHBCYXNlLCB0aGlzKTtcblxuXG4gIC8qKlxuICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyBVUkwgaW50byBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSGFzaGJhbmcgVVJMXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgd2l0aG91dEJhc2VVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZSwgdXJsKSB8fCBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICB2YXIgd2l0aG91dEhhc2hVcmw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSAmJiB3aXRob3V0QmFzZVVybC5jaGFyQXQoMCkgPT09ICcjJykge1xuXG4gICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgVVJMIHN0YXJ0cyB3aXRoIGEgaGFzaCBzbyB3ZSBoYXZlXG4gICAgICAvLyBnb3QgZWl0aGVyIGEgaGFzaGJhbmcgcGF0aCBvciBhIHBsYWluIGhhc2ggZnJhZ21lbnRcbiAgICAgIHdpdGhvdXRIYXNoVXJsID0gc3RyaXBCYXNlVXJsKGhhc2hQcmVmaXgsIHdpdGhvdXRCYXNlVXJsKTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh3aXRob3V0SGFzaFVybCkpIHtcbiAgICAgICAgLy8gVGhlcmUgd2FzIG5vIGhhc2hiYW5nIHByZWZpeCBzbyB3ZSBqdXN0IGhhdmUgYSBoYXNoIGZyYWdtZW50XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmw7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlcmUgd2FzIG5vIGhhc2hiYW5nIHBhdGggbm9yIGhhc2ggZnJhZ21lbnQ6XG4gICAgICAvLyBJZiB3ZSBhcmUgaW4gSFRNTDUgbW9kZSB3ZSB1c2Ugd2hhdCBpcyBsZWZ0IGFzIHRoZSBwYXRoO1xuICAgICAgLy8gT3RoZXJ3aXNlIHdlIGlnbm9yZSB3aGF0IGlzIGxlZnRcbiAgICAgIGlmICh0aGlzLiQkaHRtbDUpIHtcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gJyc7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkpIHtcbiAgICAgICAgICBhcHBCYXNlID0gdXJsO1xuICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpLnJlcGxhY2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzKTtcblxuICAgIHRoaXMuJCRwYXRoID0gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSh0aGlzLiQkcGF0aCwgd2l0aG91dEhhc2hVcmwsIGFwcEJhc2UpO1xuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIC8qXG4gICAgICogSW4gV2luZG93cywgb24gYW4gYW5jaG9yIG5vZGUgb24gZG9jdW1lbnRzIGxvYWRlZCBmcm9tXG4gICAgICogdGhlIGZpbGVzeXN0ZW0sIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIGEgcGF0aG5hbWVcbiAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGFcbiAgICAgKiBwYXRobmFtZSB3aXRob3V0IGEgZHJpdmUgaXMgc2V0OlxuICAgICAqICAqIGEuc2V0QXR0cmlidXRlKCdocmVmJywgJy9mb28nKVxuICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlXG4gICAgICpcbiAgICAgKiBJbnNpZGUgb2YgQW5ndWxhciwgd2UncmUgYWx3YXlzIHVzaW5nIHBhdGhuYW1lcyB0aGF0XG4gICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlV2luZG93c0RyaXZlTmFtZShwYXRoLCB1cmwsIGJhc2UpIHtcbiAgICAgIC8qXG4gICAgICBNYXRjaGVzIHBhdGhzIGZvciBmaWxlIHByb3RvY29sIG9uIHdpbmRvd3MsXG4gICAgICBzdWNoIGFzIC9DOi9mb28vYmFyLCBhbmQgY2FwdHVyZXMgb25seSAvZm9vL2Jhci5cbiAgICAgICovXG4gICAgICB2YXIgd2luZG93c0ZpbGVQYXRoRXhwID0gL15cXC9bQS1aXTooXFwvLiopLztcblxuICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDtcblxuICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLlxuICAgICAgaWYgKHN0YXJ0c1dpdGgodXJsLCBiYXNlKSkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShiYXNlLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBpbnB1dCBVUkwgaW50ZW50aW9uYWxseSBjb250YWlucyBhIGZpcnN0IHBhdGggc2VnbWVudCB0aGF0IGVuZHMgd2l0aCBhIGNvbG9uLlxuICAgICAgaWYgKHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA9IHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHBhdGgpO1xuICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIGhhc2hiYW5nIFVSTCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyAodGhpcy4kJHVybCA/IGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsIDogJycpO1xuXG4gICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VMaW5rVXJsID0gZnVuY3Rpb24odXJsLCByZWxIcmVmKSB7XG4gICAgaWYgKHN0cmlwSGFzaChhcHBCYXNlKSA9PT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHRoaXMuJCRwYXJzZSh1cmwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyBVUkxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlclxuICogZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybChhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCBoYXNoUHJlZml4KSB7XG4gIHRoaXMuJCRodG1sNSA9IHRydWU7XG4gIExvY2F0aW9uSGFzaGJhbmdVcmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICB0aGlzLiQkcGFyc2VMaW5rVXJsID0gZnVuY3Rpb24odXJsLCByZWxIcmVmKSB7XG4gICAgaWYgKHJlbEhyZWYgJiYgcmVsSHJlZlswXSA9PT0gJyMnKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOlxuICAgICAgLy8ga2VlcCB0aGUgb2xkIHVybCBhbmQgb25seSByZXBsYWNlIHRoZSBoYXNoIGZyYWdtZW50XG4gICAgICB0aGlzLmhhc2gocmVsSHJlZi5zbGljZSgxKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmV3cml0dGVuVXJsO1xuICAgIHZhciBhcHBVcmw7XG5cbiAgICBpZiAoYXBwQmFzZSA9PT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IHVybDtcbiAgICB9IGVsc2UgaWYgKChhcHBVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKSkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PT0gdXJsICsgJy8nKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlO1xuICAgIH1cbiAgICBpZiAocmV3cml0dGVuVXJsKSB7XG4gICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmV3cml0dGVuVXJsO1xuICB9O1xuXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICAvLyBpbmNsdWRlIGhhc2hQcmVmaXggaW4gJCRhYnNVcmwgd2hlbiAkJHVybCBpcyBlbXB0eSBzbyBJRTkgZG9lcyBub3QgcmVsb2FkIHBhZ2UgYmVjYXVzZSBvZiByZW1vdmFsIG9mICcjJ1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIHRoaXMuJCR1cmw7XG5cbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuICB9O1xuXG59XG5cblxudmFyIGxvY2F0aW9uUHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBFbnN1cmUgYWJzb2x1dGUgVVJMIGlzIGluaXRpYWxpemVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRhYnNVcmw6JycsXG5cbiAgLyoqXG4gICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRodG1sNTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRyZXBsYWNlOiBmYWxzZSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jYWJzVXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGZ1bGwgVVJMIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpblxuICAgKiBbUkZDIDM5ODZdKGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0KS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBhYnNVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAqIC8vID0+IFwiaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIFVSTFxuICAgKi9cbiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBVUkwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB1cmwgTmV3IFVSTCB3aXRob3V0IGJhc2UgcHJlZml4IChlLmcuIGAvcGF0aD9hPWIjaGFzaGApXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdXJsXG4gICAqL1xuICB1cmw6IGZ1bmN0aW9uKHVybCkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh1cmwpKSB7XG4gICAgICByZXR1cm4gdGhpcy4kJHVybDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWModXJsKTtcbiAgICBpZiAobWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSkpO1xuICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSB8fCB1cmwgPT09ICcnKSB0aGlzLnNlYXJjaChtYXRjaFszXSB8fCAnJyk7XG4gICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwcm90b2NvbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwcm90b2NvbCBvZiBjdXJyZW50IFVSTC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwcm90b2NvbCA9ICRsb2NhdGlvbi5wcm90b2NvbCgpO1xuICAgKiAvLyA9PiBcImh0dHBcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBwcm90b2NvbCBvZiBjdXJyZW50IFVSTFxuICAgKi9cbiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2hvc3RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gaG9zdCBvZiBjdXJyZW50IFVSTC5cbiAgICpcbiAgICogTm90ZTogY29tcGFyZWQgdG8gdGhlIG5vbi1hbmd1bGFyIHZlcnNpb24gYGxvY2F0aW9uLmhvc3RgIHdoaWNoIHJldHVybnMgYGhvc3RuYW1lOnBvcnRgLCB0aGlzIHJldHVybnMgdGhlIGBob3N0bmFtZWAgcG9ydGlvbiBvbmx5LlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuICAgKiAvLyA9PiBcImV4YW1wbGUuY29tXCJcbiAgICpcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly91c2VyOnBhc3N3b3JkQGV4YW1wbGUuY29tOjgwODAvIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqIGhvc3QgPSBsb2NhdGlvbi5ob3N0O1xuICAgKiAvLyA9PiBcImV4YW1wbGUuY29tOjgwODBcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBob3N0IG9mIGN1cnJlbnQgVVJMLlxuICAgKi9cbiAgaG9zdDogbG9jYXRpb25HZXR0ZXIoJyQkaG9zdCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwb3J0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIHBvcnQgb2YgY3VycmVudCBVUkwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcG9ydCA9ICRsb2NhdGlvbi5wb3J0KCk7XG4gICAqIC8vID0+IDgwXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBvcnRcbiAgICovXG4gIHBvcnQ6IGxvY2F0aW9uR2V0dGVyKCckJHBvcnQnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcGF0aFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IFVSTCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBwYXRoIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqIE5vdGU6IFBhdGggc2hvdWxkIGFsd2F5cyBiZWdpbiB3aXRoIGZvcndhcmQgc2xhc2ggKC8pLCB0aGlzIG1ldGhvZCB3aWxsIGFkZCB0aGUgZm9yd2FyZCBzbGFzaFxuICAgKiBpZiBpdCBpcyBtaXNzaW5nLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBhdGggPSAkbG9jYXRpb24ucGF0aCgpO1xuICAgKiAvLyA9PiBcIi9zb21lL3BhdGhcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBwYXRoIE5ldyBwYXRoXG4gICAqIEByZXR1cm4geyhzdHJpbmd8b2JqZWN0KX0gcGF0aCBpZiBjYWxsZWQgd2l0aCBubyBwYXJhbWV0ZXJzLCBvciBgJGxvY2F0aW9uYCBpZiBjYWxsZWQgd2l0aCBhIHBhcmFtZXRlclxuICAgKi9cbiAgcGF0aDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkcGF0aCcsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gcGF0aCAhPT0gbnVsbCA/IHBhdGgudG9TdHJpbmcoKSA6ICcnO1xuICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzZWFyY2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgVVJMIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgc2VhcmNoT2JqZWN0ID0gJGxvY2F0aW9uLnNlYXJjaCgpO1xuICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9XG4gICAqXG4gICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJ1xuICAgKiAkbG9jYXRpb24uc2VhcmNoKCdmb28nLCAneWlwZWUnKTtcbiAgICogLy8gJGxvY2F0aW9uLnNlYXJjaCgpID0+IHtmb286ICd5aXBlZScsIGJhejogJ3hveG8nfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICogaGFzaCBvYmplY3QuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICogb2YgYCRsb2NhdGlvbmAgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICpcbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICogYXMgZHVwbGljYXRlIHNlYXJjaCBwYXJhbWV0ZXJzIGluIHRoZSBVUkwuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgdHJ1ZWAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGFkZGVkIHdpdGggbm9cbiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIHBhcnNlZCBgc2VhcmNoYCBvYmplY3QuIElmIGNhbGxlZCB3aXRoXG4gICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkgfHwgaXNOdW1iZXIoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpO1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IGNvcHkoc2VhcmNoLCB7fSk7XG4gICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgZm9yRWFjaChzZWFyY2gsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLFxuICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNoYXNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybnMgdGhlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQ2hhbmdlcyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRoIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG8jaGFzaFZhbHVlXG4gICAqIHZhciBoYXNoID0gJGxvY2F0aW9uLmhhc2goKTtcbiAgICogLy8gPT4gXCJoYXNoVmFsdWVcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGZ1bmN0aW9uKGhhc2gpIHtcbiAgICByZXR1cm4gaGFzaCAhPT0gbnVsbCA/IGhhc2gudG9TdHJpbmcoKSA6ICcnO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcmVwbGFjZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIHRoZSBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIHJlcGxhY2UgdGhlIGN1cnJlbnQgaGlzdG9yeVxuICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIHJlcGxhY2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuZm9yRWFjaChbTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwsIExvY2F0aW9uSGFzaGJhbmdVcmwsIExvY2F0aW9uSHRtbDVVcmxdLCBmdW5jdGlvbihMb2NhdGlvbikge1xuICBMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxvY2F0aW9uUHJvdG90eXBlKTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aCBvbmUgcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBzdXBwb3J0ZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmdcbiAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydFxuICAgKiBvbGRlciBicm93c2VycyAobGlrZSBJRTkgb3IgQW5kcm9pZCA8IDQuMCksIGRvbid0IHVzZSB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGVcbiAgICogQHJldHVybiB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLiQkc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKExvY2F0aW9uICE9PSBMb2NhdGlvbkh0bWw1VXJsIHx8ICF0aGlzLiQkaHRtbDUpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9zdGF0ZScsICdIaXN0b3J5IEFQSSBzdGF0ZSBzdXBwb3J0IGlzIGF2YWlsYWJsZSBvbmx5ICcgK1xuICAgICAgICAnaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nIEhUTUw1IEhpc3RvcnkgQVBJJyk7XG4gICAgfVxuICAgIC8vIFRoZSB1c2VyIG1pZ2h0IG1vZGlmeSBgc3RhdGVPYmplY3RgIGFmdGVyIGludm9raW5nIGAkbG9jYXRpb24uc3RhdGUoc3RhdGVPYmplY3QpYFxuICAgIC8vIGJ1dCB3ZSdyZSBjaGFuZ2luZyB0aGUgJCRzdGF0ZSByZWZlcmVuY2UgdG8gJGJyb3dzZXIuc3RhdGUoKSBkdXJpbmcgdGhlICRkaWdlc3RcbiAgICAvLyBzbyB0aGUgbW9kaWZpY2F0aW9uIHdpbmRvdyBpcyBuYXJyb3cuXG4gICAgdGhpcy4kJHN0YXRlID0gaXNVbmRlZmluZWQoc3RhdGUpID8gbnVsbCA6IHN0YXRlO1xuICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyKHByb3BlcnR5KSB7XG4gIHJldHVybiAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7XG4gIHJldHVybiAvKiogQHRoaXMgKi8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgdGhpc1twcm9wZXJ0eV0gPSBwcmVwcm9jZXNzKHZhbHVlKTtcbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvY2F0aW9uXG4gKlxuICogQHJlcXVpcmVzICRyb290RWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlICRsb2NhdGlvbiBzZXJ2aWNlIHBhcnNlcyB0aGUgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyIChiYXNlZCBvbiB0aGVcbiAqIFt3aW5kb3cubG9jYXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3dpbmRvdy5sb2NhdGlvbikpIGFuZCBtYWtlcyB0aGUgVVJMXG4gKiBhdmFpbGFibGUgdG8geW91ciBhcHBsaWNhdGlvbi4gQ2hhbmdlcyB0byB0aGUgVVJMIGluIHRoZSBhZGRyZXNzIGJhciBhcmUgcmVmbGVjdGVkIGludG9cbiAqICRsb2NhdGlvbiBzZXJ2aWNlIGFuZCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBhcmUgcmVmbGVjdGVkIGludG8gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIuXG4gKlxuICogKipUaGUgJGxvY2F0aW9uIHNlcnZpY2U6KipcbiAqXG4gKiAtIEV4cG9zZXMgdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLCBzbyB5b3UgY2FuXG4gKiAgIC0gV2F0Y2ggYW5kIG9ic2VydmUgdGhlIFVSTC5cbiAqICAgLSBDaGFuZ2UgdGhlIFVSTC5cbiAqIC0gU3luY2hyb25pemVzIHRoZSBVUkwgd2l0aCB0aGUgYnJvd3NlciB3aGVuIHRoZSB1c2VyXG4gKiAgIC0gQ2hhbmdlcyB0aGUgYWRkcmVzcyBiYXIuXG4gKiAgIC0gQ2xpY2tzIHRoZSBiYWNrIG9yIGZvcndhcmQgYnV0dG9uIChvciBjbGlja3MgYSBIaXN0b3J5IGxpbmspLlxuICogICAtIENsaWNrcyBvbiBhIGxpbmsuXG4gKiAtIFJlcHJlc2VudHMgdGhlIFVSTCBvYmplY3QgYXMgYSBzZXQgb2YgbWV0aG9kcyAocHJvdG9jb2wsIGhvc3QsIHBvcnQsIHBhdGgsIHNlYXJjaCwgaGFzaCkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHtAbGluayBndWlkZS8kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBVc2luZyAkbG9jYXRpb259XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLlxuICovXG5mdW5jdGlvbiAkTG9jYXRpb25Qcm92aWRlcigpIHtcbiAgdmFyIGhhc2hQcmVmaXggPSAnIScsXG4gICAgICBodG1sNU1vZGUgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZXF1aXJlQmFzZTogdHJ1ZSxcbiAgICAgICAgcmV3cml0ZUxpbmtzOiB0cnVlXG4gICAgICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2hhc2hQcmVmaXhcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgcHJlZml4IGlzIGAnISdgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHByZWZpeCkpIHtcbiAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHsoYm9vbGVhbnxPYmplY3QpPX0gbW9kZSBJZiBib29sZWFuLCBzZXRzIGBodG1sNU1vZGUuZW5hYmxlZGAgdG8gdmFsdWUuXG4gICAqICAgSWYgb2JqZWN0LCBzZXRzIGBlbmFibGVkYCwgYHJlcXVpcmVCYXNlYCBhbmQgYHJld3JpdGVMaW5rc2AgdG8gcmVzcGVjdGl2ZSB2YWx1ZXMuIFN1cHBvcnRlZFxuICAgKiAgIHByb3BlcnRpZXM6XG4gICAqICAgLSAqKmVuYWJsZWQqKiDigJMgYHtib29sZWFufWAg4oCTIChkZWZhdWx0OiBmYWxzZSkgSWYgdHJ1ZSwgd2lsbCByZWx5IG9uIGBoaXN0b3J5LnB1c2hTdGF0ZWAgdG9cbiAgICogICAgIGNoYW5nZSB1cmxzIHdoZXJlIHN1cHBvcnRlZC4gV2lsbCBmYWxsIGJhY2sgdG8gaGFzaC1wcmVmaXhlZCBwYXRocyBpbiBicm93c2VycyB0aGF0IGRvIG5vdFxuICAgKiAgICAgc3VwcG9ydCBgcHVzaFN0YXRlYC5cbiAgICogICAtICoqcmVxdWlyZUJhc2UqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCwgc3BlY2lmaWVzXG4gICAqICAgICB3aGV0aGVyIG9yIG5vdCBhIDxiYXNlPiB0YWcgaXMgcmVxdWlyZWQgdG8gYmUgcHJlc2VudC4gSWYgYGVuYWJsZWRgIGFuZCBgcmVxdWlyZUJhc2VgIGFyZVxuICAgKiAgICAgdHJ1ZSwgYW5kIGEgYmFzZSB0YWcgaXMgbm90IHByZXNlbnQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIHdoZW4gYCRsb2NhdGlvbmAgaXMgaW5qZWN0ZWQuXG4gICAqICAgICBTZWUgdGhlIHtAbGluayBndWlkZS8kbG9jYXRpb24gJGxvY2F0aW9uIGd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuICAgKiAgIC0gKipyZXdyaXRlTGlua3MqKiAtIGB7Ym9vbGVhbnxzdHJpbmd9YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsXG4gICAqICAgICBlbmFibGVzL2Rpc2FibGVzIFVSTCByZXdyaXRpbmcgZm9yIHJlbGF0aXZlIGxpbmtzLiBJZiBzZXQgdG8gYSBzdHJpbmcsIFVSTCByZXdyaXRpbmcgd2lsbFxuICAgKiAgICAgb25seSBoYXBwZW4gb24gbGlua3Mgd2l0aCBhbiBhdHRyaWJ1dGUgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBzdHJpbmcuIEZvciBleGFtcGxlLCBpZiBzZXRcbiAgICogICAgIHRvIGAnaW50ZXJuYWwtbGluaydgLCB0aGVuIHRoZSBVUkwgd2lsbCBvbmx5IGJlIHJld3JpdHRlbiBmb3IgYDxhIGludGVybmFsLWxpbms+YCBsaW5rcy5cbiAgICogICAgIE5vdGUgdGhhdCBbYXR0cmlidXRlIG5hbWUgbm9ybWFsaXphdGlvbl0oZ3VpZGUvZGlyZWN0aXZlI25vcm1hbGl6YXRpb24pIGRvZXMgbm90IGFwcGx5XG4gICAqICAgICBoZXJlLCBzbyBgJ2ludGVybmFsTGluaydgIHdpbGwgKipub3QqKiBtYXRjaCBgJ2ludGVybmFsLWxpbmsnYC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gaHRtbDVNb2RlIG9iamVjdCBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5odG1sNU1vZGUgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgaWYgKGlzQm9vbGVhbihtb2RlKSkge1xuICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChtb2RlKSkge1xuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUuZW5hYmxlZCkpIHtcbiAgICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlLmVuYWJsZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXF1aXJlQmFzZSkpIHtcbiAgICAgICAgaHRtbDVNb2RlLnJlcXVpcmVCYXNlID0gbW9kZS5yZXF1aXJlQmFzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJld3JpdGVMaW5rcykgfHwgaXNTdHJpbmcobW9kZS5yZXdyaXRlTGlua3MpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXdyaXRlTGlua3MgPSBtb2RlLnJld3JpdGVMaW5rcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBodG1sNU1vZGU7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN0YXJ0XG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGJlZm9yZSBhIFVSTCB3aWxsIGNoYW5nZS5cbiAgICpcbiAgICogVGhpcyBjaGFuZ2UgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nXG4gICAqIGBwcmV2ZW50RGVmYXVsdGAgbWV0aG9kIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gZm9yIG1vcmVcbiAgICogZGV0YWlscyBhYm91dCBldmVudCBvYmplY3QuIFVwb24gc3VjY2Vzc2Z1bCBjaGFuZ2VcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3N9IGlzIGZpcmVkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzXG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGFmdGVyIGEgVVJMIHdhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywgJyR3aW5kb3cnLFxuICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGJyb3dzZXIsICRzbmlmZmVyLCAkcm9vdEVsZW1lbnQsICR3aW5kb3cpIHtcbiAgICB2YXIgJGxvY2F0aW9uLFxuICAgICAgICBMb2NhdGlvbk1vZGUsXG4gICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSwgLy8gaWYgYmFzZVtocmVmXSBpcyB1bmRlZmluZWQsIGl0IGRlZmF1bHRzIHRvICcnXG4gICAgICAgIGluaXRpYWxVcmwgPSAkYnJvd3Nlci51cmwoKSxcbiAgICAgICAgYXBwQmFzZTtcblxuICAgIGlmIChodG1sNU1vZGUuZW5hYmxlZCkge1xuICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub2Jhc2UnLFxuICAgICAgICAgICckbG9jYXRpb24gaW4gSFRNTDUgbW9kZSByZXF1aXJlcyBhIDxiYXNlPiB0YWcgdG8gYmUgcHJlc2VudCEnKTtcbiAgICAgIH1cbiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcbiAgICB9XG4gICAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG5cbiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChpbml0aWFsVXJsLCBpbml0aWFsVXJsKTtcblxuICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcblxuICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICBmdW5jdGlvbiBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdFxuICAgICAgICAvLyBsb29wLiBDaGVja2luZyBkZWVwIGVxdWFsaXR5IHdvdWxkIGJlIHRvbyBleHBlbnNpdmUuXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBvbGQgdmFsdWVzIGlmIHB1c2hTdGF0ZSBmYWlsc1xuICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciByZXdyaXRlTGlua3MgPSBodG1sNU1vZGUucmV3cml0ZUxpbmtzO1xuICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKVxuICAgICAgLy8gY3VycmVudGx5IHdlIG9wZW4gbmljZSB1cmwgbGluayBhbmQgcmVkaXJlY3QgdGhlblxuXG4gICAgICBpZiAoIXJld3JpdGVMaW5rcyB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQud2hpY2ggPT09IDIgfHwgZXZlbnQuYnV0dG9uID09PSAyKSByZXR1cm47XG5cbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnXG4gICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykge1xuICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhyZXdyaXRlTGlua3MpICYmIGlzVW5kZWZpbmVkKGVsbS5hdHRyKHJld3JpdGVMaW5rcykpKSByZXR1cm47XG5cbiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTtcbiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlXG4gICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgdmFyIHJlbEhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLlxuICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIC8vIElnbm9yZSB3aGVuIHVybCBpcyBzdGFydGVkIHdpdGggamF2YXNjcmlwdDogb3IgbWFpbHRvOlxuICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjtcblxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChhYnNIcmVmLCByZWxIcmVmKSkge1xuICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sXG4gICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgLy8gZ2V0dGluZyBkb3VibGUgZW50cmllcyBpbiB0aGUgbG9jYXRpb24gaGlzdG9yeS5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09ICRicm93c2VyLnVybCgpKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3NcbiAgICAgICAgICAgICR3aW5kb3cuYW5ndWxhclsnZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0J10gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAvLyByZXdyaXRlIGhhc2hiYW5nIHVybCA8PiBodG1sNSB1cmxcbiAgICBpZiAodHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpICE9PSB0cmltRW1wdHlIYXNoKGluaXRpYWxVcmwpKSB7XG4gICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCB0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgIC8vIHVwZGF0ZSAkbG9jYXRpb24gd2hlbiAkYnJvd3NlciB1cmwgY2hhbmdlc1xuICAgICRicm93c2VyLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKG5ld1VybCwgbmV3U3RhdGUpIHtcblxuICAgICAgaWYgKCFzdGFydHNXaXRoKG5ld1VybCwgYXBwQmFzZU5vRmlsZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSBvZiB0aGUgYXBwIHRoZW4gZm9yY2UgYSByZWxvYWRcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3VXJsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcbiAgICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG4gICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkO1xuICAgICAgICBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKG5ld1VybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG5ld1VybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gbmV3U3RhdGU7XG5cbiAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCxcbiAgICAgICAgICAgIG5ld1N0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgIC8vIHByb2Nlc3NpbmcgdGhpcyBsb2NhdGlvbiBjaGFuZ2VcbiAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShvbGRVcmwpO1xuICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayhvbGRVcmwsIGZhbHNlLCBvbGRTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgYnJvd3NlclxuICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkge1xuICAgICAgaWYgKGluaXRpYWxpemluZyB8fCAkbG9jYXRpb24uJCR1cmxVcGRhdGVkQnlMb2NhdGlvbikge1xuICAgICAgICAkbG9jYXRpb24uJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBvbGRVcmwgPSB0cmltRW1wdHlIYXNoKCRicm93c2VyLnVybCgpKTtcbiAgICAgICAgdmFyIG5ld1VybCA9IHRyaW1FbXB0eUhhc2goJGxvY2F0aW9uLmFic1VybCgpKTtcbiAgICAgICAgdmFyIG9sZFN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgICAgdmFyIHVybE9yU3RhdGVDaGFuZ2VkID0gb2xkVXJsICE9PSBuZXdVcmwgfHxcbiAgICAgICAgICAoJGxvY2F0aW9uLiQkaHRtbDUgJiYgJHNuaWZmZXIuaGlzdG9yeSAmJiBvbGRTdGF0ZSAhPT0gJGxvY2F0aW9uLiQkc3RhdGUpO1xuXG4gICAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcblxuICAgICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuZXdVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCxcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgICAgIC8vIHByb2Nlc3NpbmcgdGhpcyBsb2NhdGlvbiBjaGFuZ2VcbiAgICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShvbGRVcmwpO1xuICAgICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHVybE9yU3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayhuZXdVcmwsIGN1cnJlbnRSZXBsYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRsb2NhdGlvbi4kJHJlcGxhY2UgPSBmYWxzZTtcblxuICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byByZXR1cm4gYW55dGhpbmcgYmVjYXVzZSAkZXZhbEFzeW5jIHdpbGwgbWFrZSB0aGUgZGlnZXN0IGxvb3AgZGlydHkgd2hlblxuICAgICAgLy8gdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiAkbG9jYXRpb247XG5cbiAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsLFxuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSwgb2xkU3RhdGUpO1xuICAgIH1cbn1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9nXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZVxuICogaW50byB0aGUgYnJvd3NlcidzIGNvbnNvbGUgKGlmIHByZXNlbnQpLlxuICpcbiAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIHNpbXBsaWZ5IGRlYnVnZ2luZyBhbmQgdHJvdWJsZXNob290aW5nLlxuICpcbiAqIFRoZSBkZWZhdWx0IGlzIHRvIGxvZyBgZGVidWdgIG1lc3NhZ2VzLiBZb3UgY2FuIHVzZVxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibG9nRXhhbXBsZVwiIG5hbWU9XCJsb2ctc2VydmljZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2xvZ0V4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdMb2dDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZykge1xuICAgICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7XG4gICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJMb2dDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+XG4gICAgICAgICA8bGFiZWw+TWVzc2FnZTpcbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibWVzc2FnZVwiIC8+PC9sYWJlbD5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmxvZyhtZXNzYWdlKVwiPmxvZzwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cud2FybihtZXNzYWdlKVwiPndhcm48L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmluZm8obWVzc2FnZSlcIj5pbmZvPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5lcnJvcihtZXNzYWdlKVwiPmVycm9yPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5kZWJ1ZyhtZXNzYWdlKVwiPmRlYnVnPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvZ1Byb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlIDEyLTE0K1xuICAgIC8vIElFL0VkZ2UgZGlzcGxheSBlcnJvcnMgaW4gc3VjaCBhIHdheSB0aGF0IGl0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGNsaWNrIGluIDQgcGxhY2VzXG4gICAgLy8gdG8gc2VlIHRoZSBzdGFjayB0cmFjZS4gVGhlcmUgaXMgbm8gd2F5IHRvIGZlYXR1cmUtZGV0ZWN0IGl0IHNvIHRoZXJlJ3MgYSBjaGFuY2VcbiAgICAvLyBvZiB0aGUgdXNlciBhZ2VudCBzbmlmZmluZyB0byBnbyB3cm9uZyBidXQgc2luY2UgaXQncyBvbmx5IGFib3V0IGxvZ2dpbmcsIHRoaXMgc2hvdWxkbid0XG4gICAgLy8gYnJlYWsgYXBwcy4gT3RoZXIgYnJvd3NlcnMgZGlzcGxheSBlcnJvcnMgaW4gYSBzZW5zaWJsZSB3YXkgYW5kIHNvbWUgb2YgdGhlbSBtYXAgc3RhY2tcbiAgICAvLyB0cmFjZXMgYWxvbmcgc291cmNlIG1hcHMgaWYgYXZhaWxhYmxlIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGxldCBicm93c2VycyBkaXNwbGF5IGl0XG4gICAgLy8gYXMgdGhleSB3YW50LlxuICAgIHZhciBmb3JtYXRTdGFja1RyYWNlID0gbXNpZSB8fCAvXFxiRWRnZVxcLy8udGVzdCgkd2luZG93Lm5hdmlnYXRvciAmJiAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSgpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChhcmcuc3RhY2sgJiYgZm9ybWF0U3RhY2tUcmFjZSkge1xuICAgICAgICAgIGFyZyA9IChhcmcubWVzc2FnZSAmJiBhcmcuc3RhY2suaW5kZXhPZihhcmcubWVzc2FnZSkgPT09IC0xKVxuICAgICAgICAgICAgICA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc3RhY2tcbiAgICAgICAgICAgICAgOiBhcmcuc3RhY2s7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkge1xuICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xcbicgKyBhcmcuc291cmNlVVJMICsgJzonICsgYXJnLmxpbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc29sZUxvZyh0eXBlKSB7XG4gICAgICB2YXIgY29uc29sZSA9ICR3aW5kb3cuY29uc29sZSB8fCB7fSxcbiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcCxcbiAgICAgICAgICBoYXNBcHBseSA9IGZhbHNlO1xuXG4gICAgICAvLyBOb3RlOiByZWFkaW5nIGxvZ0ZuLmFwcGx5IHRocm93cyBhbiBlcnJvciBpbiBJRTExIGluIElFOCBkb2N1bWVudCBtb2RlLlxuICAgICAgLy8gVGhlIHJlYXNvbiBiZWhpbmQgdGhpcyBpcyB0aGF0IGNvbnNvbGUubG9nIGhhcyB0eXBlIFwib2JqZWN0XCIgaW4gSUU4Li4uXG4gICAgICB0cnkge1xuICAgICAgICBoYXNBcHBseSA9ICEhbG9nRm4uYXBwbHk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxuICAgICAgaWYgKGhhc0FwcGx5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcbiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJnc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbnZhciBvYmplY3RWYWx1ZU9mID0ge30uY29uc3RydWN0b3IucHJvdG90eXBlLnZhbHVlT2Y7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBubyBsb25nZXIgc2FuZGJveGVkLiBTbyBpdCBpcyBub3cgZXZlbiBlYXNpZXIgdG8gYWNjZXNzIGFyYml0cmFyeSBKUyBjb2RlIGJ5XG4vLyB2YXJpb3VzIG1lYW5zIHN1Y2ggYXMgb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIG5hdGl2ZSBKUyBmdW5jdGlvbnMgbGlrZSB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuXG4vL1xuLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XG4vL1xuLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcignYWxlcnQoXCJldmlsIEpTIGNvZGVcIiknKVxuLy9cbi8vIEl0IGlzIGltcG9ydGFudCB0byByZWFsaXplIHRoYXQgaWYgeW91IGNyZWF0ZSBhbiBleHByZXNzaW9uIGZyb20gYSBzdHJpbmcgdGhhdCBjb250YWlucyB1c2VyIHByb3ZpZGVkXG4vLyBjb250ZW50IHRoZW4gaXQgaXMgcG9zc2libGUgdGhhdCB5b3VyIGFwcGxpY2F0aW9uIGNvbnRhaW5zIGEgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSB0byBhbiBYU1Mgc3R5bGUgYXR0YWNrLlxuLy9cbi8vIFNlZSBodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9ndWlkZS9zZWN1cml0eVxuXG5cbmZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKG5hbWUpIHtcbiAgLy8gUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzdHJpbmdzLiBUaGlzIG1lYW5zIHRoYXQgbm9uLXN0cmluZyBvYmplY3RzIGNhbm5vdCBiZSB1c2VkXG4gIC8vIGFzIGtleXMgaW4gYW4gb2JqZWN0LiBBbnkgbm9uLXN0cmluZyBvYmplY3QsIGluY2x1ZGluZyBhIG51bWJlciwgaXMgdHlwZWNhc3RlZFxuICAvLyBpbnRvIGEgc3RyaW5nIHZpYSB0aGUgdG9TdHJpbmcgbWV0aG9kLlxuICAvLyAtLSBNRE4sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Qcm9wZXJ0eV9hY2Nlc3NvcnMjUHJvcGVydHlfbmFtZXNcbiAgLy9cbiAgLy8gU28sIHRvIGVuc3VyZSB0aGF0IHdlIGFyZSBjaGVja2luZyB0aGUgc2FtZSBgbmFtZWAgdGhhdCBKYXZhU2NyaXB0IHdvdWxkIHVzZSwgd2UgY2FzdCBpdFxuICAvLyB0byBhIHN0cmluZy4gSXQncyBub3QgYWx3YXlzIHBvc3NpYmxlLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGFuZCBpdHMgYHRvU3RyaW5nYCBtZXRob2QgaXNcbiAgLy8gJ2Jyb2tlbicgKGRvZXNuJ3QgcmV0dXJuIGEgc3RyaW5nLCBpc24ndCBhIGZ1bmN0aW9uLCBldGMuKSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd246XG4gIC8vXG4gIC8vIFR5cGVFcnJvcjogQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVxuICAvL1xuICAvLyBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgZG9uJ3QgY2F0Y2ggdGhpcyBlcnJvciBoZXJlIGFuZCBhbGxvdyBpdCB0byBwcm9wYWdhdGUgdXAgdGhlIGNhbGxcbiAgLy8gc3RhY2suIE5vdGUgdGhhdCB5b3UnbGwgZ2V0IHRoZSBzYW1lIGVycm9yIGluIEphdmFTY3JpcHQgaWYgeW91IHRyeSB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB1c2luZ1xuICAvLyBzdWNoIGEgJ2Jyb2tlbicgb2JqZWN0IGFzIGEga2V5LlxuICByZXR1cm4gbmFtZSArICcnO1xufVxuXG5cbnZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goJysgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfCcuc3BsaXQoJyAnKSwgZnVuY3Rpb24ob3BlcmF0b3IpIHsgT1BFUkFUT1JTW29wZXJhdG9yXSA9IHRydWU7IH0pO1xudmFyIEVTQ0FQRSA9IHsnbic6J1xcbicsICdmJzonXFxmJywgJ3InOidcXHInLCAndCc6J1xcdCcsICd2JzonXFx2JywgJ1xcJyc6J1xcJycsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMudG9rZW5zID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09ICdcXCcnKSB7XG4gICAgICAgIHRoaXMucmVhZFN0cmluZyhjaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5wZWVrTXVsdGljaGFyKCkpKSB7XG4gICAgICAgIHRoaXMucmVhZElkZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoY2gsICcoKXt9W10uLDs6PycpKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaH0pO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKGNoKSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2gyID0gY2ggKyB0aGlzLnBlZWsoKTtcbiAgICAgICAgdmFyIGNoMyA9IGNoMiArIHRoaXMucGVlaygyKTtcbiAgICAgICAgdmFyIG9wMSA9IE9QRVJBVE9SU1tjaF07XG4gICAgICAgIHZhciBvcDIgPSBPUEVSQVRPUlNbY2gyXTtcbiAgICAgICAgdmFyIG9wMyA9IE9QRVJBVE9SU1tjaDNdO1xuICAgICAgICBpZiAob3AxIHx8IG9wMiB8fCBvcDMpIHtcbiAgICAgICAgICB2YXIgdG9rZW4gPSBvcDMgPyBjaDMgOiAob3AyID8gY2gyIDogY2gpO1xuICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiB0b2tlbiwgb3BlcmF0b3I6IHRydWV9KTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgJywgdGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgfSxcblxuICBpczogZnVuY3Rpb24oY2gsIGNoYXJzKSB7XG4gICAgcmV0dXJuIGNoYXJzLmluZGV4T2YoY2gpICE9PSAtMTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihpKSB7XG4gICAgdmFyIG51bSA9IGkgfHwgMTtcbiAgICByZXR1cm4gKHRoaXMuaW5kZXggKyBudW0gPCB0aGlzLnRleHQubGVuZ3RoKSA/IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCArIG51bSkgOiBmYWxzZTtcbiAgfSxcblxuICBpc051bWJlcjogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCcwJyA8PSBjaCAmJiBjaCA8PSAnOScpICYmIHR5cGVvZiBjaCA9PT0gJ3N0cmluZyc7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnRpZmllclN0YXJ0OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQoY2gsIHRoaXMuY29kZVBvaW50QXQoY2gpKSA6XG4gICAgICAgIHRoaXMuaXNWYWxpZElkZW50aWZpZXJTdGFydChjaCk7XG4gIH0sXG5cbiAgaXNWYWxpZElkZW50aWZpZXJTdGFydDogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCdhJyA8PSBjaCAmJiBjaCA8PSAneicgfHxcbiAgICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHxcbiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7XG4gIH0sXG5cbiAgaXNJZGVudGlmaWVyQ29udGludWU6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZSA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZShjaCwgdGhpcy5jb2RlUG9pbnRBdChjaCkpIDpcbiAgICAgICAgdGhpcy5pc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlKGNoKTtcbiAgfSxcblxuICBpc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlOiBmdW5jdGlvbihjaCwgY3ApIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkSWRlbnRpZmllclN0YXJ0KGNoLCBjcCkgfHwgdGhpcy5pc051bWJlcihjaCk7XG4gIH0sXG5cbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgaWYgKGNoLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICByZXR1cm4gKGNoLmNoYXJDb2RlQXQoMCkgPDwgMTApICsgY2guY2hhckNvZGVBdCgxKSAtIDB4MzVGREMwMDtcbiAgfSxcblxuICBwZWVrTXVsdGljaGFyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgIHZhciBwZWVrID0gdGhpcy5wZWVrKCk7XG4gICAgaWYgKCFwZWVrKSB7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfVxuICAgIHZhciBjcDEgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBjcDIgPSBwZWVrLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNwMSA+PSAweEQ4MDAgJiYgY3AxIDw9IDB4REJGRiAmJiBjcDIgPj0gMHhEQzAwICYmIGNwMiA8PSAweERGRkYpIHtcbiAgICAgIHJldHVybiBjaCArIHBlZWs7XG4gICAgfVxuICAgIHJldHVybiBjaDtcbiAgfSxcblxuICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IGVuZCB8fCB0aGlzLmluZGV4O1xuICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KVxuICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nXG4gICAgICAgICAgICA6ICcgJyArIGVuZCk7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLFxuICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICB9LFxuXG4gIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBudW1iZXIgPSAnJztcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO1xuICAgICAgaWYgKGNoID09PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHtcbiAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpO1xuICAgICAgICBpZiAoY2ggPT09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgICghcGVla0NoIHx8ICF0aGlzLmlzTnVtYmVyKHBlZWtDaCkpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIGV4cG9uZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICBpbmRleDogc3RhcnQsXG4gICAgICB0ZXh0OiBudW1iZXIsXG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIHZhbHVlOiBOdW1iZXIobnVtYmVyKVxuICAgIH0pO1xuICB9LFxuXG4gIHJlYWRJZGVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLmluZGV4ICs9IHRoaXMucGVla011bHRpY2hhcigpLmxlbmd0aDtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMucGVla011bHRpY2hhcigpO1xuICAgICAgaWYgKCF0aGlzLmlzSWRlbnRpZmllckNvbnRpbnVlKGNoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXggKz0gY2gubGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IHRoaXMudGV4dC5zbGljZShzdGFydCwgdGhpcy5pbmRleCksXG4gICAgICBpZGVudGlmaWVyOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICByYXdTdHJpbmcgKz0gY2g7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgdmFyIGhleCA9IHRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgdGV4dDogcmF3U3RyaW5nLFxuICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50aHJvd0Vycm9yKCdVbnRlcm1pbmF0ZWQgcXVvdGUnLCBzdGFydCk7XG4gIH1cbn07XG5cbnZhciBBU1QgPSBmdW5jdGlvbiBBU1QobGV4ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xufTtcblxuQVNULlByb2dyYW0gPSAnUHJvZ3JhbSc7XG5BU1QuRXhwcmVzc2lvblN0YXRlbWVudCA9ICdFeHByZXNzaW9uU3RhdGVtZW50JztcbkFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiA9ICdBc3NpZ25tZW50RXhwcmVzc2lvbic7XG5BU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic7XG5BU1QuTG9naWNhbEV4cHJlc3Npb24gPSAnTG9naWNhbEV4cHJlc3Npb24nO1xuQVNULkJpbmFyeUV4cHJlc3Npb24gPSAnQmluYXJ5RXhwcmVzc2lvbic7XG5BU1QuVW5hcnlFeHByZXNzaW9uID0gJ1VuYXJ5RXhwcmVzc2lvbic7XG5BU1QuQ2FsbEV4cHJlc3Npb24gPSAnQ2FsbEV4cHJlc3Npb24nO1xuQVNULk1lbWJlckV4cHJlc3Npb24gPSAnTWVtYmVyRXhwcmVzc2lvbic7XG5BU1QuSWRlbnRpZmllciA9ICdJZGVudGlmaWVyJztcbkFTVC5MaXRlcmFsID0gJ0xpdGVyYWwnO1xuQVNULkFycmF5RXhwcmVzc2lvbiA9ICdBcnJheUV4cHJlc3Npb24nO1xuQVNULlByb3BlcnR5ID0gJ1Byb3BlcnR5JztcbkFTVC5PYmplY3RFeHByZXNzaW9uID0gJ09iamVjdEV4cHJlc3Npb24nO1xuQVNULlRoaXNFeHByZXNzaW9uID0gJ1RoaXNFeHByZXNzaW9uJztcbkFTVC5Mb2NhbHNFeHByZXNzaW9uID0gJ0xvY2Fsc0V4cHJlc3Npb24nO1xuXG4vLyBJbnRlcm5hbCB1c2Ugb25seVxuQVNULk5HVmFsdWVQYXJhbWV0ZXIgPSAnTkdWYWx1ZVBhcmFtZXRlcic7XG5cbkFTVC5wcm90b3R5cGUgPSB7XG4gIGFzdDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBwcm9ncmFtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm9keSA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIGJvZHkucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHl9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuRXhwcmVzc2lvblN0YXRlbWVudCwgZXhwcmVzc2lvbjogdGhpcy5maWx0ZXJDaGFpbigpIH07XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8JykpIHtcbiAgICAgIGxlZnQgPSB0aGlzLmZpbHRlcihsZWZ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudCgpO1xuICB9LFxuXG4gIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnRlcm5hcnkoKTtcbiAgICBpZiAodGhpcy5leHBlY3QoJz0nKSkge1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2x2YWwnLCAnVHJ5aW5nIHRvIGFzc2lnbiBhIHZhbHVlIHRvIGEgbm9uIGwtdmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IHJlc3VsdCwgcmlnaHQ6IHRoaXMuYXNzaWdubWVudCgpLCBvcGVyYXRvcjogJz0nfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICB0ZXJuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGVzdCA9IHRoaXMubG9naWNhbE9SKCk7XG4gICAgdmFyIGFsdGVybmF0ZTtcbiAgICB2YXIgY29uc2VxdWVudDtcbiAgICBpZiAodGhpcy5leHBlY3QoJz8nKSkge1xuICAgICAgYWx0ZXJuYXRlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICBpZiAodGhpcy5jb25zdW1lKCc6JykpIHtcbiAgICAgICAgY29uc2VxdWVudCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uLCB0ZXN0OiB0ZXN0LCBhbHRlcm5hdGU6IGFsdGVybmF0ZSwgY29uc2VxdWVudDogY29uc2VxdWVudH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXN0O1xuICB9LFxuXG4gIGxvZ2ljYWxPUjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxBTkQoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJ3x8JykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICd8fCcsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmxvZ2ljYWxBTkQoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBsb2dpY2FsQU5EOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuZXF1YWxpdHkoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJyYmJykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICcmJicsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmVxdWFsaXR5KCl9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnJlbGF0aW9uYWwoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnJlbGF0aW9uYWwoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICByZWxhdGlvbmFsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc8JywgJz4nLCAnPD0nLCAnPj0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuYWRkaXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLm11bHRpcGxpY2F0aXZlKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubXVsdGlwbGljYXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnVuYXJ5KCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgdW5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbjtcbiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCAnLScsICchJykpKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBBU1QuVW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgcHJlZml4OiB0cnVlLCBhcmd1bWVudDogdGhpcy51bmFyeSgpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByaW1hcnkoKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJpbWFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByaW1hcnk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmZpbHRlckNoYWluKCk7XG4gICAgICB0aGlzLmNvbnN1bWUoJyknKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmFycmF5RGVjbGFyYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCd7JykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxmUmVmZXJlbnRpYWwuaGFzT3duUHJvcGVydHkodGhpcy5wZWVrKCkudGV4dCkpIHtcbiAgICAgIHByaW1hcnkgPSBjb3B5KHRoaXMuc2VsZlJlZmVyZW50aWFsW3RoaXMuY29uc3VtZSgpLnRleHRdKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5saXRlcmFscy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLm9wdGlvbnMubGl0ZXJhbHNbdGhpcy5jb25zdW1lKCkudGV4dF19O1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cblxuICAgIHZhciBuZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB7dHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oYmFzZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgYXJncyA9IFtiYXNlRXhwcmVzc2lvbl07XG4gICAgdmFyIHJlc3VsdCA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogdGhpcy5pZGVudGlmaWVyKCksIGFyZ3VtZW50czogYXJncywgZmlsdGVyOiB0cnVlfTtcblxuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmZpbHRlckNoYWluKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LFxuXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuY29uc3VtZSgpO1xuICAgIGlmICghdG9rZW4uaWRlbnRpZmllcikge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBub3QgYSB2YWxpZCBpZGVudGlmaWVyJywgdG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuSWRlbnRpZmllciwgbmFtZTogdG9rZW4udGV4dCB9O1xuICB9LFxuXG4gIGNvbnN0YW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPIGNoZWNrIHRoYXQgaXQgaXMgYSBjb25zdGFudFxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogdGhpcy5jb25zdW1lKCkudmFsdWUgfTtcbiAgfSxcblxuICBhcnJheURlY2xhcmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnXScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkFycmF5RXhwcmVzc2lvbiwgZWxlbWVudHM6IGVsZW1lbnRzIH07XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdLCBwcm9wZXJ0eTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnfScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnfScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5ID0ge3R5cGU6IEFTVC5Qcm9wZXJ0eSwga2luZDogJ2luaXQnfTtcbiAgICAgICAgaWYgKHRoaXMucGVlaygpLmNvbnN0YW50KSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5jb25zdGFudCgpO1xuICAgICAgICAgIHByb3BlcnR5LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAodGhpcy5wZWVrKCc6JykpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSBwcm9wZXJ0eS5rZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygnWycpKSB7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCdbJyk7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpbnZhbGlkIGtleScsIHRoaXMucGVlaygpKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnfScpO1xuXG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuT2JqZWN0RXhwcmVzc2lvbiwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHJldHVybiB0aGlzLnBlZWtBaGVhZCgwLCBlMSwgZTIsIGUzLCBlNCk7XG4gIH0sXG5cbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHNlbGZSZWZlcmVudGlhbDoge1xuICAgICd0aGlzJzoge3R5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9LFxuICAgICckbG9jYWxzJzoge3R5cGU6IEFTVC5Mb2NhbHNFeHByZXNzaW9uIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaWZEZWZpbmVkKHYsIGQpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJyA/IHYgOiBkO1xufVxuXG5mdW5jdGlvbiBwbHVzRm4obCwgcikge1xuICBpZiAodHlwZW9mIGwgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gcjtcbiAgaWYgKHR5cGVvZiByID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGw7XG4gIHJldHVybiBsICsgcjtcbn1cblxuZnVuY3Rpb24gaXNTdGF0ZWxlc3MoJGZpbHRlciwgZmlsdGVyTmFtZSkge1xuICB2YXIgZm4gPSAkZmlsdGVyKGZpbHRlck5hbWUpO1xuICByZXR1cm4gIWZuLiRzdGF0ZWZ1bDtcbn1cblxuZnVuY3Rpb24gZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QsICRmaWx0ZXIpIHtcbiAgdmFyIGFsbENvbnN0YW50cztcbiAgdmFyIGFyZ3NUb1dhdGNoO1xuICB2YXIgaXNTdGF0ZWxlc3NGaWx0ZXI7XG4gIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgY2FzZSBBU1QuUHJvZ3JhbTpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwci5leHByZXNzaW9uLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgIGFzdC5jb25zdGFudCA9IHRydWU7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QuYXJndW1lbnQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuYXJndW1lbnQudG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmxlZnQudG9XYXRjaC5jb25jYXQoYXN0LnJpZ2h0LnRvV2F0Y2gpO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnRlc3QsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuY29uc2VxdWVudCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LnRlc3QuY29uc3RhbnQgJiYgYXN0LmFsdGVybmF0ZS5jb25zdGFudCAmJiBhc3QuY29uc2VxdWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5jb25zdGFudCA/IFtdIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5vYmplY3QsICRmaWx0ZXIpO1xuICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyKTtcbiAgICB9XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0Lm9iamVjdC5jb25zdGFudCAmJiAoIWFzdC5jb21wdXRlZCB8fCBhc3QucHJvcGVydHkuY29uc3RhbnQpO1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgIGlzU3RhdGVsZXNzRmlsdGVyID0gYXN0LmZpbHRlciA/IGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGFzdC5jYWxsZWUubmFtZSkgOiBmYWxzZTtcbiAgICBhbGxDb25zdGFudHMgPSBpc1N0YXRlbGVzc0ZpbHRlcjtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gaXNTdGF0ZWxlc3NGaWx0ZXIgPyBhcmdzVG9XYXRjaCA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlcik7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgZXhwci5jb25zdGFudDtcbiAgICAgIGlmICghZXhwci5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBleHByLnRvV2F0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFyZ3NUb1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5PYmplY3RFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhwcm9wZXJ0eS52YWx1ZSwgJGZpbHRlcik7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgcHJvcGVydHkudmFsdWUuY29uc3RhbnQgJiYgIXByb3BlcnR5LmNvbXB1dGVkO1xuICAgICAgaWYgKCFwcm9wZXJ0eS52YWx1ZS5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS52YWx1ZS50b1dhdGNoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKHByb3BlcnR5LmtleSwgJGZpbHRlcik7XG4gICAgICAgIGlmICghcHJvcGVydHkua2V5LmNvbnN0YW50KSB7XG4gICAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkua2V5LnRvV2F0Y2gpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVGhpc0V4cHJlc3Npb246XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuTG9jYWxzRXhwcmVzc2lvbjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldElucHV0cyhib2R5KSB7XG4gIGlmIChib2R5Lmxlbmd0aCAhPT0gMSkgcmV0dXJuO1xuICB2YXIgbGFzdEV4cHJlc3Npb24gPSBib2R5WzBdLmV4cHJlc3Npb247XG4gIHZhciBjYW5kaWRhdGUgPSBsYXN0RXhwcmVzc2lvbi50b1dhdGNoO1xuICBpZiAoY2FuZGlkYXRlLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgcmV0dXJuIGNhbmRpZGF0ZVswXSAhPT0gbGFzdEV4cHJlc3Npb24gPyBjYW5kaWRhdGUgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQXNzaWduYWJsZShhc3QpIHtcbiAgcmV0dXJuIGFzdC50eXBlID09PSBBU1QuSWRlbnRpZmllciB8fCBhc3QudHlwZSA9PT0gQVNULk1lbWJlckV4cHJlc3Npb247XG59XG5cbmZ1bmN0aW9uIGFzc2lnbmFibGVBU1QoYXN0KSB7XG4gIGlmIChhc3QuYm9keS5sZW5ndGggPT09IDEgJiYgaXNBc3NpZ25hYmxlKGFzdC5ib2R5WzBdLmV4cHJlc3Npb24pKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24sIHJpZ2h0OiB7dHlwZTogQVNULk5HVmFsdWVQYXJhbWV0ZXJ9LCBvcGVyYXRvcjogJz0nfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xpdGVyYWwoYXN0KSB7XG4gIHJldHVybiBhc3QuYm9keS5sZW5ndGggPT09IDAgfHxcbiAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiAoXG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5MaXRlcmFsIHx8XG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5BcnJheUV4cHJlc3Npb24gfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULk9iamVjdEV4cHJlc3Npb24pO1xufVxuXG5mdW5jdGlvbiBpc0NvbnN0YW50KGFzdCkge1xuICByZXR1cm4gYXN0LmNvbnN0YW50O1xufVxuXG5mdW5jdGlvbiBBU1RDb21waWxlcigkZmlsdGVyKSB7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oYXN0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuZXh0SWQ6IDAsXG4gICAgICBmaWx0ZXJzOiB7fSxcbiAgICAgIGZuOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGFzc2lnbjoge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX0sXG4gICAgICBpbnB1dHM6IFtdXG4gICAgfTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgc2VsZi4kZmlsdGVyKTtcbiAgICB2YXIgZXh0cmEgPSAnJztcbiAgICB2YXIgYXNzaWduYWJsZTtcbiAgICB0aGlzLnN0YWdlID0gJ2Fzc2lnbic7XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnYXNzaWduJztcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUsIHJlc3VsdCk7XG4gICAgICB0aGlzLnJldHVybl8ocmVzdWx0KTtcbiAgICAgIGV4dHJhID0gJ2ZuLmFzc2lnbj0nICsgdGhpcy5nZW5lcmF0ZUZ1bmN0aW9uKCdhc3NpZ24nLCAncyx2LGwnKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHNlbGYuc3RhZ2UgPSAnaW5wdXRzJztcbiAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgIHZhciBmbktleSA9ICdmbicgKyBrZXk7XG4gICAgICBzZWxmLnN0YXRlW2ZuS2V5XSA9IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319O1xuICAgICAgc2VsZi5zdGF0ZS5jb21wdXRpbmcgPSBmbktleTtcbiAgICAgIHZhciBpbnRvSWQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKHdhdGNoLCBpbnRvSWQpO1xuICAgICAgc2VsZi5yZXR1cm5fKGludG9JZCk7XG4gICAgICBzZWxmLnN0YXRlLmlucHV0cy5wdXNoKGZuS2V5KTtcbiAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnZm4nO1xuICAgIHRoaXMuc3RhZ2UgPSAnbWFpbic7XG4gICAgdGhpcy5yZWN1cnNlKGFzdCk7XG4gICAgdmFyIGZuU3RyaW5nID1cbiAgICAgIC8vIFRoZSBidWlsZCBhbmQgbWluaWZpY2F0aW9uIHN0ZXBzIHJlbW92ZSB0aGUgc3RyaW5nIFwidXNlIHN0cmljdFwiIGZyb20gdGhlIGNvZGUsIGJ1dCB0aGlzIGlzIGRvbmUgdXNpbmcgYSByZWdleC5cbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGlzIHVudGlsIHdlIGRvIGEgYmV0dGVyIGpvYiBhdCBvbmx5IHJlbW92aW5nIHRoZSBwcmVmaXggb25seSB3aGVuIHdlIHNob3VsZC5cbiAgICAgICdcIicgKyB0aGlzLlVTRSArICcgJyArIHRoaXMuU1RSSUNUICsgJ1wiO1xcbicgK1xuICAgICAgdGhpcy5maWx0ZXJQcmVmaXgoKSArXG4gICAgICAndmFyIGZuPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2ZuJywgJ3MsbCxhLGknKSArXG4gICAgICBleHRyYSArXG4gICAgICB0aGlzLndhdGNoRm5zKCkgK1xuICAgICAgJ3JldHVybiBmbjsnO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgdmFyIGZuID0gKG5ldyBGdW5jdGlvbignJGZpbHRlcicsXG4gICAgICAgICdnZXRTdHJpbmdWYWx1ZScsXG4gICAgICAgICdpZkRlZmluZWQnLFxuICAgICAgICAncGx1cycsXG4gICAgICAgIGZuU3RyaW5nKSkoXG4gICAgICAgICAgdGhpcy4kZmlsdGVyLFxuICAgICAgICAgIGdldFN0cmluZ1ZhbHVlLFxuICAgICAgICAgIGlmRGVmaW5lZCxcbiAgICAgICAgICBwbHVzRm4pO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YWdlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBmbjtcbiAgfSxcblxuICBVU0U6ICd1c2UnLFxuXG4gIFNUUklDVDogJ3N0cmljdCcsXG5cbiAgd2F0Y2hGbnM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgZm5zID0gdGhpcy5zdGF0ZS5pbnB1dHM7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZvckVhY2goZm5zLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXN1bHQucHVzaCgndmFyICcgKyBuYW1lICsgJz0nICsgc2VsZi5nZW5lcmF0ZUZ1bmN0aW9uKG5hbWUsICdzJykpO1xuICAgIH0pO1xuICAgIGlmIChmbnMubGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaCgnZm4uaW5wdXRzPVsnICsgZm5zLmpvaW4oJywnKSArICddOycpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICB9LFxuXG4gIGdlbmVyYXRlRnVuY3Rpb246IGZ1bmN0aW9uKG5hbWUsIHBhcmFtcykge1xuICAgIHJldHVybiAnZnVuY3Rpb24oJyArIHBhcmFtcyArICcpeycgK1xuICAgICAgICB0aGlzLnZhcnNQcmVmaXgobmFtZSkgK1xuICAgICAgICB0aGlzLmJvZHkobmFtZSkgK1xuICAgICAgICAnfTsnO1xuICB9LFxuXG4gIGZpbHRlclByZWZpeDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcnRzID0gW107XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZvckVhY2godGhpcy5zdGF0ZS5maWx0ZXJzLCBmdW5jdGlvbihpZCwgZmlsdGVyKSB7XG4gICAgICBwYXJ0cy5wdXNoKGlkICsgJz0kZmlsdGVyKCcgKyBzZWxmLmVzY2FwZShmaWx0ZXIpICsgJyknKTtcbiAgICB9KTtcbiAgICBpZiAocGFydHMubGVuZ3RoKSByZXR1cm4gJ3ZhciAnICsgcGFydHMuam9pbignLCcpICsgJzsnO1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICB2YXJzUHJlZml4OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5sZW5ndGggPyAndmFyICcgKyB0aGlzLnN0YXRlW3NlY3Rpb25dLnZhcnMuam9pbignLCcpICsgJzsnIDogJyc7XG4gIH0sXG5cbiAgYm9keTogZnVuY3Rpb24oc2VjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3NlY3Rpb25dLmJvZHkuam9pbignJyk7XG4gIH0sXG5cbiAgcmVjdXJzZTogZnVuY3Rpb24oYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjaykge1xuICAgIHZhciBsZWZ0LCByaWdodCwgc2VsZiA9IHRoaXMsIGFyZ3MsIGV4cHJlc3Npb24sIGNvbXB1dGVkO1xuICAgIHJlY3Vyc2lvbkZuID0gcmVjdXJzaW9uRm4gfHwgbm9vcDtcbiAgICBpZiAoIXNraXBXYXRjaElkQ2hlY2sgJiYgaXNEZWZpbmVkKGFzdC53YXRjaElkKSkge1xuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLmlmXygnaScsXG4gICAgICAgIHRoaXMubGF6eUFzc2lnbihpbnRvSWQsIHRoaXMuY29tcHV0ZWRNZW1iZXIoJ2knLCBhc3Qud2F0Y2hJZCkpLFxuICAgICAgICB0aGlzLmxhenlSZWN1cnNlKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHRydWUpXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSBBU1QuUHJvZ3JhbTpcbiAgICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHJlc3Npb24sIHBvcykge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwcmVzc2lvbi5leHByZXNzaW9uLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgICBpZiAocG9zICE9PSBhc3QuYm9keS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50KCkuYm9keS5wdXNoKHJpZ2h0LCAnOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYucmV0dXJuXyhyaWdodCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgIGV4cHJlc3Npb24gPSB0aGlzLmVzY2FwZShhc3QudmFsdWUpO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICBleHByZXNzaW9uID0gYXN0Lm9wZXJhdG9yICsgJygnICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApICsgJyknO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgbGVmdCA9IGV4cHI7IH0pO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5yaWdodCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGlmIChhc3Qub3BlcmF0b3IgPT09ICcrJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wbHVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH0gZWxzZSBpZiAoYXN0Lm9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuaWZEZWZpbmVkKGxlZnQsIDApICsgYXN0Lm9wZXJhdG9yICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9ICcoJyArIGxlZnQgKyAnKScgKyBhc3Qub3BlcmF0b3IgKyAnKCcgKyByaWdodCArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LmxlZnQsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhhc3Qub3BlcmF0b3IgPT09ICcmJicgPyBpbnRvSWQgOiBzZWxmLm5vdChpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5yaWdodCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LnRlc3QsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhpbnRvSWQsIHNlbGYubGF6eVJlY3Vyc2UoYXN0LmFsdGVybmF0ZSwgaW50b0lkKSwgc2VsZi5sYXp5UmVjdXJzZShhc3QuY29uc2VxdWVudCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICBuYW1lSWQuY29udGV4dCA9IHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnID8gJ3MnIDogdGhpcy5hc3NpZ24odGhpcy5uZXh0SWQoKSwgdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSArICc/bDpzJyk7XG4gICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5uYW1lO1xuICAgICAgfVxuICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgc2VsZi5ub3Qoc2VsZi5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSksXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnIHx8ICdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhcbiAgICAgICAgICAgICAgICBzZWxmLmlzTnVsbChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgICAgICAgICBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcigncycsIGFzdC5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgaW50b0lkICYmIHNlbGYubGF6eUFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ2wnLCBhc3QubmFtZSkpXG4gICAgICAgICk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSBuYW1lSWQgJiYgKG5hbWVJZC5jb250ZXh0ID0gdGhpcy5uZXh0SWQoKSkgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKGFzdC5vYmplY3QsIGxlZnQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChsZWZ0KSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgICAgc2VsZi5yZWN1cnNlKGFzdC5wcm9wZXJ0eSwgcmlnaHQpO1xuICAgICAgICAgICAgc2VsZi5nZXRTdHJpbmdWYWx1ZShyaWdodCk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdChzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSksIHNlbGYubGF6eUFzc2lnbihzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgbmFtZUlkLm5hbWUgPSByaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5pZl8oc2VsZi5pc051bGwoc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSkpLCBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSksICd7fScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKTtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5wcm9wZXJ0eS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgfSwgISFjcmVhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIGlmIChhc3QuZmlsdGVyKSB7XG4gICAgICAgIHJpZ2h0ID0gc2VsZi5maWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgICB2YXIgYXJndW1lbnQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhcmd1bWVudCk7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICBsZWZ0ID0ge307XG4gICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGFzdC5jYWxsZWUsIHJpZ2h0LCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwocmlnaHQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXN0LmNvbnN0YW50ID8gdW5kZWZpbmVkIDogc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobGVmdC5uYW1lKSB7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyAnKCcgKyBhcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgJ3VuZGVmaW5lZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMubmV4dElkKCk7XG4gICAgICBsZWZ0ID0ge307XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHVuZGVmaW5lZCwgbGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChsZWZ0LmNvbnRleHQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnJpZ2h0LCByaWdodCk7XG4gICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArIGFzdC5vcGVyYXRvciArIHJpZ2h0O1xuICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFzdC5jb25zdGFudCA/IHVuZGVmaW5lZCA6IHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oYXJndW1lbnQpIHtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZXhwcmVzc2lvbiA9ICdbJyArIGFyZ3Muam9pbignLCcpICsgJ10nO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBjb21wdXRlZCA9IGZhbHNlO1xuICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgICAgY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wdXRlZCkge1xuICAgICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAne30nKTtcbiAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGxlZnQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgICAgc2VsZi5yZWN1cnNlKHByb3BlcnR5LmtleSwgbGVmdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlZnQgPSBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5rZXkubmFtZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIHJpZ2h0KTtcbiAgICAgICAgICBzZWxmLmFzc2lnbihzZWxmLm1lbWJlcihpbnRvSWQsIGxlZnQsIHByb3BlcnR5LmNvbXB1dGVkKSwgcmlnaHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlLCBhc3QuY29uc3RhbnQgPyB1bmRlZmluZWQgOiBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChzZWxmLmVzY2FwZShcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgPyBwcm9wZXJ0eS5rZXkubmFtZSA6XG4gICAgICAgICAgICAgICAgICAoJycgKyBwcm9wZXJ0eS5rZXkudmFsdWUpKSArXG4gICAgICAgICAgICAgICAgJzonICsgZXhwcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBleHByZXNzaW9uID0gJ3snICsgYXJncy5qb2luKCcsJykgKyAnfSc7XG4gICAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3MnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCAncycpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTG9jYWxzRXhwcmVzc2lvbjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ2wnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCAnbCcpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTkdWYWx1ZVBhcmFtZXRlcjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3YnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCAndicpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIGdldEhhc093blByb3BlcnR5OiBmdW5jdGlvbihlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgIHZhciBrZXkgPSBlbGVtZW50ICsgJy4nICsgcHJvcGVydHk7XG4gICAgdmFyIG93biA9IHRoaXMuY3VycmVudCgpLm93bjtcbiAgICBpZiAoIW93bi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBvd25ba2V5XSA9IHRoaXMubmV4dElkKGZhbHNlLCBlbGVtZW50ICsgJyYmKCcgKyB0aGlzLmVzY2FwZShwcm9wZXJ0eSkgKyAnIGluICcgKyBlbGVtZW50ICsgJyknKTtcbiAgICB9XG4gICAgcmV0dXJuIG93bltrZXldO1xuICB9LFxuXG4gIGFzc2lnbjogZnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgaWYgKCFpZCkgcmV0dXJuO1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaChpZCwgJz0nLCB2YWx1ZSwgJzsnKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihmaWx0ZXJOYW1lKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmZpbHRlcnMuaGFzT3duUHJvcGVydHkoZmlsdGVyTmFtZSkpIHtcbiAgICAgIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXSA9IHRoaXMubmV4dElkKHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5maWx0ZXJzW2ZpbHRlck5hbWVdO1xuICB9LFxuXG4gIGlmRGVmaW5lZDogZnVuY3Rpb24oaWQsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiAnaWZEZWZpbmVkKCcgKyBpZCArICcsJyArIHRoaXMuZXNjYXBlKGRlZmF1bHRWYWx1ZSkgKyAnKSc7XG4gIH0sXG5cbiAgcGx1czogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gJ3BsdXMoJyArIGxlZnQgKyAnLCcgKyByaWdodCArICcpJztcbiAgfSxcblxuICByZXR1cm5fOiBmdW5jdGlvbihpZCkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCgncmV0dXJuICcsIGlkLCAnOycpO1xuICB9LFxuXG4gIGlmXzogZnVuY3Rpb24odGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50KSB7XG4gICAgaWYgKHRlc3QgPT09IHRydWUpIHtcbiAgICAgIGFsdGVybmF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYm9keSA9IHRoaXMuY3VycmVudCgpLmJvZHk7XG4gICAgICBib2R5LnB1c2goJ2lmKCcsIHRlc3QsICcpeycpO1xuICAgICAgYWx0ZXJuYXRlKCk7XG4gICAgICBib2R5LnB1c2goJ30nKTtcbiAgICAgIGlmIChjb25zZXF1ZW50KSB7XG4gICAgICAgIGJvZHkucHVzaCgnZWxzZXsnKTtcbiAgICAgICAgY29uc2VxdWVudCgpO1xuICAgICAgICBib2R5LnB1c2goJ30nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgbm90OiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuICchKCcgKyBleHByZXNzaW9uICsgJyknO1xuICB9LFxuXG4gIGlzTnVsbDogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBleHByZXNzaW9uICsgJz09bnVsbCc7XG4gIH0sXG5cbiAgbm90TnVsbDogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBleHByZXNzaW9uICsgJyE9bnVsbCc7XG4gIH0sXG5cbiAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIFNBRkVfSURFTlRJRklFUiA9IC9eWyRfYS16QS1aXVskX2EtekEtWjAtOV0qJC87XG4gICAgdmFyIFVOU0FGRV9DSEFSQUNURVJTID0gL1teJF9hLXpBLVowLTldL2c7XG4gICAgaWYgKFNBRkVfSURFTlRJRklFUi50ZXN0KHJpZ2h0KSkge1xuICAgICAgcmV0dXJuIGxlZnQgKyAnLicgKyByaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxlZnQgICsgJ1tcIicgKyByaWdodC5yZXBsYWNlKFVOU0FGRV9DSEFSQUNURVJTLCB0aGlzLnN0cmluZ0VzY2FwZUZuKSArICdcIl0nO1xuICAgIH1cbiAgfSxcblxuICBjb21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbGVmdCArICdbJyArIHJpZ2h0ICsgJ10nO1xuICB9LFxuXG4gIG1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbXB1dGVkKSB7XG4gICAgaWYgKGNvbXB1dGVkKSByZXR1cm4gdGhpcy5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gICAgcmV0dXJuIHRoaXMubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpO1xuICB9LFxuXG4gIGdldFN0cmluZ1ZhbHVlOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGhpcy5hc3NpZ24oaXRlbSwgJ2dldFN0cmluZ1ZhbHVlKCcgKyBpdGVtICsgJyknKTtcbiAgfSxcblxuICBsYXp5UmVjdXJzZTogZnVuY3Rpb24oYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjayk7XG4gICAgfTtcbiAgfSxcblxuICBsYXp5QXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5hc3NpZ24oaWQsIHZhbHVlKTtcbiAgICB9O1xuICB9LFxuXG4gIHN0cmluZ0VzY2FwZVJlZ2V4OiAvW14gYS16QS1aMC05XS9nLFxuXG4gIHN0cmluZ0VzY2FwZUZuOiBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyAoJzAwMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICB9LFxuXG4gIGVzY2FwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm4gJ1xcJycgKyB2YWx1ZS5yZXBsYWNlKHRoaXMuc3RyaW5nRXNjYXBlUmVnZXgsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgJ1xcJyc7XG4gICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSByZXR1cm4gJ3RydWUnO1xuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiAnZmFsc2UnO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuICd1bmRlZmluZWQnO1xuXG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdlc2MnLCAnSU1QT1NTSUJMRScpO1xuICB9LFxuXG4gIG5leHRJZDogZnVuY3Rpb24oc2tpcCwgaW5pdCkge1xuICAgIHZhciBpZCA9ICd2JyArICh0aGlzLnN0YXRlLm5leHRJZCsrKTtcbiAgICBpZiAoIXNraXApIHtcbiAgICAgIHRoaXMuY3VycmVudCgpLnZhcnMucHVzaChpZCArIChpbml0ID8gJz0nICsgaW5pdCA6ICcnKSk7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBjdXJyZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVt0aGlzLnN0YXRlLmNvbXB1dGluZ107XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gQVNUSW50ZXJwcmV0ZXIoJGZpbHRlcikge1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xufVxuXG5BU1RJbnRlcnByZXRlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGFzdCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgc2VsZi4kZmlsdGVyKTtcbiAgICB2YXIgYXNzaWduYWJsZTtcbiAgICB2YXIgYXNzaWduO1xuICAgIGlmICgoYXNzaWduYWJsZSA9IGFzc2lnbmFibGVBU1QoYXN0KSkpIHtcbiAgICAgIGFzc2lnbiA9IHRoaXMucmVjdXJzZShhc3NpZ25hYmxlKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHZhciBpbnB1dHM7XG4gICAgaWYgKHRvV2F0Y2gpIHtcbiAgICAgIGlucHV0cyA9IFtdO1xuICAgICAgZm9yRWFjaCh0b1dhdGNoLCBmdW5jdGlvbih3YXRjaCwga2V5KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHNlbGYucmVjdXJzZSh3YXRjaCk7XG4gICAgICAgIHdhdGNoLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIGlucHV0cy5wdXNoKGlucHV0KTtcbiAgICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgICBleHByZXNzaW9ucy5wdXNoKHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24pKTtcbiAgICB9KTtcbiAgICB2YXIgZm4gPSBhc3QuYm9keS5sZW5ndGggPT09IDAgPyBub29wIDpcbiAgICAgICAgICAgICBhc3QuYm9keS5sZW5ndGggPT09IDEgPyBleHByZXNzaW9uc1swXSA6XG4gICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2Fscykge1xuICAgICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgIGZvckVhY2goZXhwcmVzc2lvbnMsIGZ1bmN0aW9uKGV4cCkge1xuICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBleHAoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgfTtcbiAgICBpZiAoYXNzaWduKSB7XG4gICAgICBmbi5hc3NpZ24gPSBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gYXNzaWduKHNjb3BlLCBsb2NhbHMsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dHMpIHtcbiAgICAgIGZuLmlucHV0cyA9IGlucHV0cztcbiAgICB9XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIHJlY3Vyc2U6IGZ1bmN0aW9uKGFzdCwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncztcbiAgICBpZiAoYXN0LmlucHV0KSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dHMoYXN0LmlucHV0LCBhc3Qud2F0Y2hJZCk7XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgcmV0dXJuIHRoaXMudmFsdWUoYXN0LnZhbHVlLCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ3VuYXJ5JyArIGFzdC5vcGVyYXRvcl0ocmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkJpbmFyeUV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICByZXR1cm4gdGhpc1sndGVybmFyeT86J10oXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QudGVzdCksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuYWx0ZXJuYXRlKSxcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5jb25zZXF1ZW50KSxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgcmV0dXJuIHNlbGYuaWRlbnRpZmllcihhc3QubmFtZSwgY29udGV4dCwgY3JlYXRlKTtcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3Qub2JqZWN0LCBmYWxzZSwgISFjcmVhdGUpO1xuICAgICAgaWYgKCFhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgcmlnaHQgPSBhc3QucHJvcGVydHkubmFtZTtcbiAgICAgIH1cbiAgICAgIGlmIChhc3QuY29tcHV0ZWQpIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5wcm9wZXJ0eSk7XG4gICAgICByZXR1cm4gYXN0LmNvbXB1dGVkID9cbiAgICAgICAgdGhpcy5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlKSA6XG4gICAgICAgIHRoaXMubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSk7XG4gICAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgYXJncy5wdXNoKHNlbGYucmVjdXJzZShleHByKSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMuJGZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgaWYgKCFhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuY2FsbGVlLCB0cnVlKTtcbiAgICAgIHJldHVybiBhc3QuZmlsdGVyID9cbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2YWx1ZSA9IHJpZ2h0LmFwcGx5KHVuZGVmaW5lZCwgdmFsdWVzLCBpbnB1dHMpO1xuICAgICAgICAgIHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIGlmIChyaHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gcmhzLnZhbHVlLmFwcGx5KHJocy5jb250ZXh0LCB2YWx1ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH07XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB0cnVlLCAxKTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBsaHMuY29udGV4dFtsaHMubmFtZV0gPSByaHM7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiByaHN9IDogcmhzO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZS5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICBhcmdzLnB1c2goe2tleTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LmtleSksXG4gICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJncy5wdXNoKHtrZXk6IHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpZiAoYXJnc1tpXS5jb21wdXRlZCkge1xuICAgICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXkoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpXSA9IGFyZ3NbaV0udmFsdWUoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZVthcmdzW2ldLmtleV0gPSBhcmdzW2ldLnZhbHVlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogc2NvcGV9IDogc2NvcGU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULkxvY2Fsc0V4cHJlc3Npb246XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogbG9jYWxzfSA6IGxvY2FscztcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuTkdWYWx1ZVBhcmFtZXRlcjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFzc2lnbn0gOiBhc3NpZ247XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAndW5hcnkrJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gK2FyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnktJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gLWFyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IC0wO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ3VuYXJ5ISc6IGZ1bmN0aW9uKGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gIWFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkrJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgYXJnID0gcGx1c0ZuKGxocywgcmhzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnktJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgYXJnID0gKGlzRGVmaW5lZChsaHMpID8gbGhzIDogMCkgLSAoaXNEZWZpbmVkKHJocykgPyByaHMgOiAwKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkqJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAqIHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkvJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAvIHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnklJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAlIHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk9PT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID09PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5IT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAhPT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5IT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICE9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk8JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk+JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA+IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk8PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPD0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT49JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA+PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5JiYnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICYmIHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnl8fCc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgfHwgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ3Rlcm5hcnk/Oic6IGZ1bmN0aW9uKHRlc3QsIGFsdGVybmF0ZSwgY29uc2VxdWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IHRlc3Qoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID8gYWx0ZXJuYXRlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA6IGNvbnNlcXVlbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgdmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29udGV4dCA/IHtjb250ZXh0OiB1bmRlZmluZWQsIG5hbWU6IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfSA6IHZhbHVlOyB9O1xuICB9LFxuICBpZGVudGlmaWVyOiBmdW5jdGlvbihuYW1lLCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBiYXNlID0gbG9jYWxzICYmIChuYW1lIGluIGxvY2FscykgPyBsb2NhbHMgOiBzY29wZTtcbiAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxICYmIGJhc2UgJiYgYmFzZVtuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGJhc2VbbmFtZV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGJhc2UgPyBiYXNlW25hbWVdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBiYXNlLCBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgaWYgKGxocyAhPSBudWxsKSB7XG4gICAgICAgIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmhzID0gZ2V0U3RyaW5nVmFsdWUocmhzKTtcbiAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICBpZiAobGhzICYmICEobGhzW3Joc10pKSB7XG4gICAgICAgICAgICBsaHNbcmhzXSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IGxoc1tyaHNdO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBsaHMsIG5hbWU6IHJocywgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgaWYgKGxocyAmJiBsaHNbcmlnaHRdID09IG51bGwpIHtcbiAgICAgICAgICBsaHNbcmlnaHRdID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGxocyAhPSBudWxsID8gbGhzW3JpZ2h0XSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaWdodCwgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBpbnB1dHM6IGZ1bmN0aW9uKGlucHV0LCB3YXRjaElkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzLCBpbnB1dHMpIHtcbiAgICAgIGlmIChpbnB1dHMpIHJldHVybiBpbnB1dHNbd2F0Y2hJZF07XG4gICAgICByZXR1cm4gaW5wdXQoc2NvcGUsIHZhbHVlLCBsb2NhbHMpO1xuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhcnNlcihsZXhlciwgJGZpbHRlciwgb3B0aW9ucykge1xuICB0aGlzLmFzdCA9IG5ldyBBU1QobGV4ZXIsIG9wdGlvbnMpO1xuICB0aGlzLmFzdENvbXBpbGVyID0gb3B0aW9ucy5jc3AgPyBuZXcgQVNUSW50ZXJwcmV0ZXIoJGZpbHRlcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQVNUQ29tcGlsZXIoJGZpbHRlcik7XG59XG5cblBhcnNlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXJzZXIsXG5cbiAgcGFyc2U6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgYXN0ID0gdGhpcy5hc3QuYXN0KHRleHQpO1xuICAgIHZhciBmbiA9IHRoaXMuYXN0Q29tcGlsZXIuY29tcGlsZShhc3QpO1xuICAgIGZuLmxpdGVyYWwgPSBpc0xpdGVyYWwoYXN0KTtcbiAgICBmbi5jb25zdGFudCA9IGlzQ29uc3RhbnQoYXN0KTtcbiAgICByZXR1cm4gZm47XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFZhbHVlT2YodmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikgPyB2YWx1ZS52YWx1ZU9mKCkgOiBvYmplY3RWYWx1ZU9mLmNhbGwodmFsdWUpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcGFyc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7XG4gKiAgIHZhciBzZXR0ZXIgPSBnZXR0ZXIuYXNzaWduO1xuICogICB2YXIgY29udGV4dCA9IHt1c2VyOntuYW1lOidhbmd1bGFyJ319O1xuICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319O1xuICpcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0KSkudG9FcXVhbCgnYW5ndWxhcicpO1xuICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChjb250ZXh0LnVzZXIubmFtZSkudG9FcXVhbCgnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0LCBsb2NhbHMpKS50b0VxdWFsKCdsb2NhbCcpO1xuICogYGBgXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICpcbiAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICogICAgICBgY29udGV4dGAuXG4gKlxuICogICAgVGhlIHJldHVybmVkIGZ1bmN0aW9uIGFsc28gaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0XG4gKiAgICAgICAgbGl0ZXJhbC5cbiAqICAgICAgKiBgY29uc3RhbnRgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBtYWRlIGVudGlyZWx5IG9mIEphdmFTY3JpcHRcbiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy5cbiAqICAgICAgKiBgYXNzaWduYCDigJMgYHs/ZnVuY3Rpb24oY29udGV4dCwgdmFsdWUpfWAg4oCTIGlmIHRoZSBleHByZXNzaW9uIGlzIGFzc2lnbmFibGUsIHRoaXMgd2lsbCBiZVxuICogICAgICAgIHNldCB0byBhIGZ1bmN0aW9uIHRvIGNoYW5nZSBpdHMgdmFsdWUgb24gdGhlIGdpdmVuIGNvbnRleHQuXG4gKlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRwYXJzZVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRwYXJzZVByb3ZpZGVyYCBjYW4gYmUgdXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kcGFyc2UgJHBhcnNlfVxuICogIHNlcnZpY2UuXG4gKi9cbmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkge1xuICB2YXIgY2FjaGUgPSBjcmVhdGVNYXAoKTtcbiAgdmFyIGxpdGVyYWxzID0ge1xuICAgICd0cnVlJzogdHJ1ZSxcbiAgICAnZmFsc2UnOiBmYWxzZSxcbiAgICAnbnVsbCc6IG51bGwsXG4gICAgJ3VuZGVmaW5lZCc6IHVuZGVmaW5lZFxuICB9O1xuICB2YXIgaWRlbnRTdGFydCwgaWRlbnRDb250aW51ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcGFyc2VQcm92aWRlciNhZGRMaXRlcmFsXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb25maWd1cmUgJHBhcnNlIHNlcnZpY2UgdG8gYWRkIGxpdGVyYWwgdmFsdWVzIHRoYXQgd2lsbCBiZSBwcmVzZW50IGFzIGxpdGVyYWwgYXQgZXhwcmVzc2lvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXRlcmFsTmFtZSBUb2tlbiBmb3IgdGhlIGxpdGVyYWwgdmFsdWUuIFRoZSBsaXRlcmFsIG5hbWUgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGxpdGVyYWwgbmFtZS5cbiAgICogQHBhcmFtIHsqfSBsaXRlcmFsVmFsdWUgVmFsdWUgZm9yIHRoaXMgbGl0ZXJhbC4gQWxsIGxpdGVyYWwgdmFsdWVzIG11c3QgYmUgcHJpbWl0aXZlcyBvciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICoqL1xuICB0aGlzLmFkZExpdGVyYWwgPSBmdW5jdGlvbihsaXRlcmFsTmFtZSwgbGl0ZXJhbFZhbHVlKSB7XG4gICAgbGl0ZXJhbHNbbGl0ZXJhbE5hbWVdID0gbGl0ZXJhbFZhbHVlO1xuICB9O1xuXG4gLyoqXG4gICogQG5nZG9jIG1ldGhvZFxuICAqIEBuYW1lICRwYXJzZVByb3ZpZGVyI3NldElkZW50aWZpZXJGbnNcbiAgKlxuICAqIEBkZXNjcmlwdGlvblxuICAqXG4gICogQWxsb3dzIGRlZmluaW5nIHRoZSBzZXQgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBhbGxvd2VkIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFRoZSBmdW5jdGlvblxuICAqIGBpZGVudGlmaWVyU3RhcnRgIHdpbGwgZ2V0IGNhbGxlZCB0byBrbm93IGlmIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgdmFsaWQgY2hhcmFjdGVyIHRvIGJlIHRoZVxuICAqIGZpcnN0IGNoYXJhY3RlciBmb3IgYW4gaWRlbnRpZmllci4gVGhlIGZ1bmN0aW9uIGBpZGVudGlmaWVyQ29udGludWVgIHdpbGwgZ2V0IGNhbGxlZCB0byBrbm93IGlmXG4gICogYSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgdG8gYmUgYSBmb2xsb3ctdXAgaWRlbnRpZmllciBjaGFyYWN0ZXIuIFRoZSBmdW5jdGlvbnNcbiAgKiBgaWRlbnRpZmllclN0YXJ0YCBhbmQgYGlkZW50aWZpZXJDb250aW51ZWAgd2lsbCByZWNlaXZlIGFzIGFyZ3VtZW50cyB0aGUgc2luZ2xlIGNoYXJhY3RlciB0byBiZVxuICAqIGlkZW50aWZpZXIgYW5kIHRoZSBjaGFyYWN0ZXIgY29kZSBwb2ludC4gVGhlc2UgYXJndW1lbnRzIHdpbGwgYmUgYHN0cmluZ2AgYW5kIGBudW1lcmljYC4gS2VlcCBpblxuICAqIG1pbmQgdGhhdCB0aGUgYHN0cmluZ2AgcGFyYW1ldGVyIGNhbiBiZSB0d28gY2hhcmFjdGVycyBsb25nIGRlcGVuZGluZyBvbiB0aGUgY2hhcmFjdGVyXG4gICogcmVwcmVzZW50YXRpb24uIEl0IGlzIGV4cGVjdGVkIGZvciB0aGUgZnVuY3Rpb24gdG8gcmV0dXJuIGB0cnVlYCBvciBgZmFsc2VgLCB3aGV0aGVyIHRoYXRcbiAgKiBjaGFyYWN0ZXIgaXMgYWxsb3dlZCBvciBub3QuXG4gICpcbiAgKiBTaW5jZSB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGV4dGVuc2l2ZWx5LCBrZWVwIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGVzZSBmdW5jdGlvbnMgZmFzdCxcbiAgKiBhcyB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlc2UgZnVuY3Rpb25zIGhhdmUgYSBkaXJlY3QgaW1wYWN0IG9uIHRoZSBleHByZXNzaW9ucyBwYXJzaW5nIHNwZWVkLlxuICAqXG4gICogQHBhcmFtIHtmdW5jdGlvbj19IGlkZW50aWZpZXJTdGFydCBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGRlY2lkZSB3aGV0aGVyIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXNcbiAgKiAgIGEgdmFsaWQgaWRlbnRpZmllciBzdGFydCBjaGFyYWN0ZXIuXG4gICogQHBhcmFtIHtmdW5jdGlvbj19IGlkZW50aWZpZXJDb250aW51ZSBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGRlY2lkZSB3aGV0aGVyIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXNcbiAgKiAgIGEgdmFsaWQgaWRlbnRpZmllciBjb250aW51ZSBjaGFyYWN0ZXIuXG4gICovXG4gIHRoaXMuc2V0SWRlbnRpZmllckZucyA9IGZ1bmN0aW9uKGlkZW50aWZpZXJTdGFydCwgaWRlbnRpZmllckNvbnRpbnVlKSB7XG4gICAgaWRlbnRTdGFydCA9IGlkZW50aWZpZXJTdGFydDtcbiAgICBpZGVudENvbnRpbnVlID0gaWRlbnRpZmllckNvbnRpbnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsIGZ1bmN0aW9uKCRmaWx0ZXIpIHtcbiAgICB2YXIgbm9VbnNhZmVFdmFsID0gY3NwKCkubm9VbnNhZmVFdmFsO1xuICAgIHZhciAkcGFyc2VPcHRpb25zID0ge1xuICAgICAgICAgIGNzcDogbm9VbnNhZmVFdmFsLFxuICAgICAgICAgIGxpdGVyYWxzOiBjb3B5KGxpdGVyYWxzKSxcbiAgICAgICAgICBpc0lkZW50aWZpZXJTdGFydDogaXNGdW5jdGlvbihpZGVudFN0YXJ0KSAmJiBpZGVudFN0YXJ0LFxuICAgICAgICAgIGlzSWRlbnRpZmllckNvbnRpbnVlOiBpc0Z1bmN0aW9uKGlkZW50Q29udGludWUpICYmIGlkZW50Q29udGludWVcbiAgICAgICAgfTtcbiAgICByZXR1cm4gJHBhcnNlO1xuXG4gICAgZnVuY3Rpb24gJHBhcnNlKGV4cCwgaW50ZXJjZXB0b3JGbikge1xuICAgICAgdmFyIHBhcnNlZEV4cHJlc3Npb24sIG9uZVRpbWUsIGNhY2hlS2V5O1xuXG4gICAgICBzd2l0Y2ggKHR5cGVvZiBleHApIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBleHAgPSBleHAudHJpbSgpO1xuICAgICAgICAgIGNhY2hlS2V5ID0gZXhwO1xuXG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IGNhY2hlW2NhY2hlS2V5XTtcblxuICAgICAgICAgIGlmICghcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKGV4cC5jaGFyQXQoMCkgPT09ICc6JyAmJiBleHAuY2hhckF0KDEpID09PSAnOicpIHtcbiAgICAgICAgICAgICAgb25lVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgIGV4cCA9IGV4cC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIoJHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihsZXhlciwgJGZpbHRlciwgJHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi5jb25zdGFudCkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob25lVGltZSkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLm9uZVRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWRFeHByZXNzaW9uLmlucHV0cykge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBwYXJzZWRFeHByZXNzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IocGFyc2VkRXhwcmVzc2lvbiwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihleHAsIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKG5vb3AsIGludGVyY2VwdG9yRm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3VmFsdWUsIG9sZFZhbHVlT2ZWYWx1ZSwgY29tcGFyZU9iamVjdElkZW50aXR5KSB7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG9sZFZhbHVlT2ZWYWx1ZSA9PSBudWxsKSB7IC8vIG51bGwvdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgIC8vIGF0dGVtcHQgdG8gY29udmVydCB0aGUgdmFsdWUgdG8gYSBwcmltaXRpdmUgdHlwZVxuICAgICAgICAvLyBUT0RPKGRvY3MpOiBhZGQgYSBub3RlIHRvIGRvY3MgdGhhdCBieSBpbXBsZW1lbnRpbmcgdmFsdWVPZiBldmVuIG9iamVjdHMgYW5kIGFycmF5cyBjYW5cbiAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkXG4gICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVPZihuZXdWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgJiYgIWNvbXBhcmVPYmplY3RJZGVudGl0eSkge1xuICAgICAgICAgIC8vIG9iamVjdHMvYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIC0gZGVlcC13YXRjaGluZyB0aGVtIHdvdWxkIGJlIHRvbyBleHBlbnNpdmVcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmYWxsLXRocm91Z2ggdG8gdGhlIHByaW1pdGl2ZSBlcXVhbGl0eSBjaGVja1xuICAgICAgfVxuXG4gICAgICAvL1ByaW1pdGl2ZSBvciBOYU5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlIHx8IChuZXdWYWx1ZSAhPT0gbmV3VmFsdWUgJiYgb2xkVmFsdWVPZlZhbHVlICE9PSBvbGRWYWx1ZU9mVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlucHV0c1dhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgaW5wdXRFeHByZXNzaW9ucyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgdmFyIGxhc3RSZXN1bHQ7XG5cbiAgICAgIGlmIChpbnB1dEV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIGlucHV0RXhwcmVzc2lvbnMgPSBpbnB1dEV4cHJlc3Npb25zWzBdO1xuICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dFdhdGNoKHNjb3BlKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zKHNjb3BlKTtcbiAgICAgICAgICBpZiAoIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mLCBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwpKSB7XG4gICAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFtuZXdJbnB1dFZhbHVlXSk7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlT2YgPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMgPSBbXTtcbiAgICAgIHZhciBvbGRJbnB1dFZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICBvbGRJbnB1dFZhbHVlc1tpXSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0c1dhdGNoKHNjb3BlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zW2ldKHNjb3BlKTtcbiAgICAgICAgICBpZiAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9ICFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSwgcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsKSkpIHtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkSW5wdXRWYWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgaXNEb25lID0gcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsID8gaXNBbGxEZWZpbmVkIDogaXNEZWZpbmVkO1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmlucHV0cykge1xuICAgICAgICB1bndhdGNoID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgb25lVGltZUxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2gob25lVGltZVdhdGNoLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bndhdGNoO1xuXG4gICAgICBmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRG9uZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEb25lKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBbGxEZWZpbmVkKHZhbHVlKSB7XG4gICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQodmFsKSkgYWxsRGVmaW5lZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWxsRGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gY29uc3RhbnRXYXRjaChzY29wZSkge1xuICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7XG4gICAgICByZXR1cm4gdW53YXRjaDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICBpZiAoIWludGVyY2VwdG9yRm4pIHJldHVybiBwYXJzZWRFeHByZXNzaW9uO1xuICAgICAgdmFyIHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgIHZhciB1c2VJbnB1dHMgPSBmYWxzZTtcblxuICAgICAgdmFyIGlzRG9uZSA9IHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCA/IGlzQWxsRGVmaW5lZCA6IGlzRGVmaW5lZDtcblxuICAgICAgZnVuY3Rpb24gcmVndWxhckludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB1c2VJbnB1dHMgJiYgaW5wdXRzID8gaW5wdXRzWzBdIDogcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB1c2VJbnB1dHMgJiYgaW5wdXRzID8gaW5wdXRzWzBdIDogcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByZXN1bHQgPSBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgLy8gd2Ugb25seSByZXR1cm4gdGhlIGludGVyY2VwdG9yJ3MgcmVzdWx0IGlmIHRoZVxuICAgICAgICAvLyBpbml0aWFsIHZhbHVlIGlzIGRlZmluZWQgKGZvciBiaW5kLW9uY2UpXG4gICAgICAgIHJldHVybiBpc0RvbmUodmFsdWUpID8gcmVzdWx0IDogdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmbiA9IHBhcnNlZEV4cHJlc3Npb24ub25lVGltZSA/IG9uZVRpbWVJbnRlcmNlcHRlZEV4cHJlc3Npb24gOiByZWd1bGFySW50ZXJjZXB0ZWRFeHByZXNzaW9uO1xuXG4gICAgICAvLyBQcm9wb2dhdGUgdGhlIGxpdGVyYWwvb25lVGltZSBhdHRyaWJ1dGVzXG4gICAgICBmbi5saXRlcmFsID0gcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsO1xuICAgICAgZm4ub25lVGltZSA9IHBhcnNlZEV4cHJlc3Npb24ub25lVGltZTtcblxuICAgICAgLy8gUHJvcGFnYXRlIG9yIGNyZWF0ZSBpbnB1dHMgLyAkJHdhdGNoRGVsZWdhdGVzXG4gICAgICB1c2VJbnB1dHMgPSAhcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICBpZiAod2F0Y2hEZWxlZ2F0ZSAmJiB3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7XG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHdhdGNoRGVsZWdhdGU7XG4gICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgfSBlbHNlIGlmICghaW50ZXJjZXB0b3JGbi4kc3RhdGVmdWwpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gaW50ZXJjZXB0b3IsIGJ1dCBubyB3YXRjaERlbGVnYXRlIHRoZW4gdHJlYXQgdGhlIGludGVyY2VwdG9yIGxpa2VcbiAgICAgICAgLy8gd2UgdHJlYXQgZmlsdGVycyAtIGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBwdXJlIGZ1bmN0aW9uIHVubGVzcyBmbGFnZ2VkIHdpdGggJHN0YXRlZnVsXG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzID8gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgOiBbcGFyc2VkRXhwcmVzc2lvbl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcVxuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2VydmljZSB0aGF0IGhlbHBzIHlvdSBydW4gZnVuY3Rpb25zIGFzeW5jaHJvbm91c2x5LCBhbmQgdXNlIHRoZWlyIHJldHVybiB2YWx1ZXMgKG9yIGV4Y2VwdGlvbnMpXG4gKiB3aGVuIHRoZXkgYXJlIGRvbmUgcHJvY2Vzc2luZy5cbiAqXG4gKiBUaGlzIGlzIGEgW1Byb21pc2VzL0ErXShodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyktY29tcGxpYW50IGltcGxlbWVudGF0aW9uIG9mIHByb21pc2VzL2RlZmVycmVkXG4gKiBvYmplY3RzIGluc3BpcmVkIGJ5IFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS5cbiAqXG4gKiAkcSBjYW4gYmUgdXNlZCBpbiB0d28gZmFzaGlvbnMgLS0tIG9uZSB3aGljaCBpcyBtb3JlIHNpbWlsYXIgdG8gS3JpcyBLb3dhbCdzIFEgb3IgalF1ZXJ5J3MgRGVmZXJyZWRcbiAqIGltcGxlbWVudGF0aW9ucywgYW5kIHRoZSBvdGhlciB3aGljaCByZXNlbWJsZXMgRVM2IChFUzIwMTUpIHByb21pc2VzIHRvIHNvbWUgZGVncmVlLlxuICpcbiAqICMgJHEgY29uc3RydWN0b3JcbiAqXG4gKiBUaGUgc3RyZWFtbGluZWQgRVM2IHN0eWxlIHByb21pc2UgaXMgZXNzZW50aWFsbHkganVzdCB1c2luZyAkcSBhcyBhIGNvbnN0cnVjdG9yIHdoaWNoIHRha2VzIGEgYHJlc29sdmVyYFxuICogZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG5hdGl2ZSBQcm9taXNlIGltcGxlbWVudGF0aW9uIGZyb20gRVM2LFxuICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLlxuICpcbiAqIFdoaWxlIHRoZSBjb25zdHJ1Y3Rvci1zdHlsZSB1c2UgaXMgc3VwcG9ydGVkLCBub3QgYWxsIG9mIHRoZSBzdXBwb3J0aW5nIG1ldGhvZHMgZnJvbSBFUzYgcHJvbWlzZXMgYXJlXG4gKiBhdmFpbGFibGUgeWV0LlxuICpcbiAqIEl0IGNhbiBiZSB1c2VkIGxpa2Ugc286XG4gKlxuICogYGBganNcbiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGBcbiAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICpcbiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7XG4gKiAgICAgLy8gcGVyZm9ybSBzb21lIGFzeW5jaHJvbm91cyBvcGVyYXRpb24sIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBwcm9taXNlIHdoZW4gYXBwcm9wcmlhdGUuXG4gKiAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICogICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICogICAgICAgICAgIHJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgcmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sIDEwMDApO1xuICogICAgIH0pO1xuICogICB9XG4gKlxuICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7XG4gKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIE5vdGU6IHByb2dyZXNzL25vdGlmeSBjYWxsYmFja3MgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIHZpYSB0aGUgRVM2LXN0eWxlIGludGVyZmFjZS5cbiAqXG4gKiBOb3RlOiB1bmxpa2UgRVM2IGJlaGF2aW9yLCBhbiBleGNlcHRpb24gdGhyb3duIGluIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aWxsIE5PVCBpbXBsaWNpdGx5IHJlamVjdCB0aGUgcHJvbWlzZS5cbiAqXG4gKiBIb3dldmVyLCB0aGUgbW9yZSB0cmFkaXRpb25hbCBDb21tb25KUy1zdHlsZSB1c2FnZSBpcyBzdGlsbCBhdmFpbGFibGUsIGFuZCBkb2N1bWVudGVkIGJlbG93LlxuICpcbiAqIFtUaGUgQ29tbW9uSlMgUHJvbWlzZSBwcm9wb3NhbF0oaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMpIGRlc2NyaWJlcyBhIHByb21pc2UgYXMgYW5cbiAqIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYWN0aW9uIHRoYXQgaXNcbiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLlxuICpcbiAqIEZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIGRlYWxpbmcgd2l0aCBlcnJvciBoYW5kbGluZywgZGVmZXJyZWQgYW5kIHByb21pc2UgQVBJcyBhcmUgdG9cbiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICpcbiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgZGVmZXJyZWQubm90aWZ5KCdBYm91dCB0byBncmVldCAnICsgbmFtZSArICcuJyk7XG4gKlxuICogICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICogICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xuICogICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gKiAgICAgICB9XG4gKiAgICAgfSwgMTAwMCk7XG4gKlxuICogICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICogICB9XG4gKlxuICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7XG4gKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICogICB9LCBmdW5jdGlvbih1cGRhdGUpIHtcbiAqICAgICBhbGVydCgnR290IG5vdGlmaWNhdGlvbjogJyArIHVwZGF0ZSk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZlxuICogY29tZXMgaW4gdGhlIHdheSBvZiBndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlLCBzZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvdW5jb21tb25qcy9ibG9iL21hc3Rlci9wcm9taXNlcy9zcGVjaWZpY2F0aW9uLm1kLlxuICpcbiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZVxuICogdHJhZGl0aW9uYWwgY2FsbGJhY2sgKFtDUFNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29udGludWF0aW9uLXBhc3Npbmdfc3R5bGUpKSBhcHByb2FjaC5cbiAqIEZvciBtb3JlIG9uIHRoaXMgcGxlYXNlIHNlZSB0aGUgW1EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKSBlc3BlY2lhbGx5IHRoZVxuICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy5cbiAqXG4gKiAjIFRoZSBEZWZlcnJlZCBBUElcbiAqXG4gKiBBIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZCBpcyBjb25zdHJ1Y3RlZCBieSBjYWxsaW5nIGAkcS5kZWZlcigpYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJc1xuICogdGhhdCBjYW4gYmUgdXNlZCBmb3Igc2lnbmFsaW5nIHRoZSBzdWNjZXNzZnVsIG9yIHVuc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLCBhcyB3ZWxsIGFzIHRoZSBzdGF0dXNcbiAqIG9mIHRoZSB0YXNrLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvblxuICogICBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaW5zdGVhZC5cbiAqIC0gYHJlamVjdChyZWFzb24pYCDigJMgcmVqZWN0cyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGByZWFzb25gLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLlxuICogLSBgbm90aWZ5KHZhbHVlKWAgLSBwcm92aWRlcyB1cGRhdGVzIG9uIHRoZSBzdGF0dXMgb2YgdGhlIHByb21pc2UncyBleGVjdXRpb24uIFRoaXMgbWF5IGJlIGNhbGxlZFxuICogICBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgdGhlIHByb21pc2UgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICoqUHJvcGVydGllcyoqXG4gKlxuICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuXG4gKlxuICpcbiAqICMgVGhlIFByb21pc2UgQVBJXG4gKlxuICogQSBuZXcgcHJvbWlzZSBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoZW4gYSBkZWZlcnJlZCBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBjYW4gYmUgcmV0cmlldmVkIGJ5XG4gKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgcHJvbWlzZSBvYmplY3QgaXMgdG8gYWxsb3cgZm9yIGludGVyZXN0ZWQgcGFydGllcyB0byBnZXQgYWNjZXNzIHRvIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgdGhlbihzdWNjZXNzQ2FsbGJhY2ssIFtlcnJvckNhbGxiYWNrXSwgW25vdGlmeUNhbGxiYWNrXSlgIOKAkyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIHByb21pc2Ugd2FzIG9yXG4gKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XG4gKiAgIGFzIHNvb24gYXMgdGhlIHJlc3VsdCBpcyBhdmFpbGFibGUuIFRoZSBjYWxsYmFja3MgYXJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgcmVzdWx0XG4gKiAgIG9yIHJlamVjdGlvbiByZWFzb24uIEFkZGl0aW9uYWxseSwgdGhlIG5vdGlmeSBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIHplcm8gb3IgbW9yZSB0aW1lcyB0b1xuICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICAgVGhpcyBtZXRob2QgKnJldHVybnMgYSBuZXcgcHJvbWlzZSogd2hpY2ggaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlXG4gKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AgKHVubGVzcyB0aGF0IHZhbHVlIGlzIGEgcHJvbWlzZSwgaW4gd2hpY2ggY2FzZSBpdCBpcyByZXNvbHZlZFxuICogICB3aXRoIHRoZSB2YWx1ZSB3aGljaCBpcyByZXNvbHZlZCBpbiB0aGF0IHByb21pc2UgdXNpbmdcbiAqICAgW3Byb21pc2UgY2hhaW5pbmddKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2VzNi9wcm9taXNlcy8jdG9jLXByb21pc2VzLXF1ZXVlcykpLlxuICogICBJdCBhbHNvIG5vdGlmaWVzIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgbm90aWZ5Q2FsbGJhY2tgIG1ldGhvZC4gVGhlIHByb21pc2UgY2Fubm90IGJlXG4gKiAgIHJlc29sdmVkIG9yIHJlamVjdGVkIGZyb20gdGhlIG5vdGlmeUNhbGxiYWNrIG1ldGhvZC4gVGhlIGVycm9yQ2FsbGJhY2sgYW5kIG5vdGlmeUNhbGxiYWNrXG4gKiAgIGFyZ3VtZW50cyBhcmUgb3B0aW9uYWwuXG4gKlxuICogLSBgY2F0Y2goZXJyb3JDYWxsYmFjaylgIOKAkyBzaG9ydGhhbmQgZm9yIGBwcm9taXNlLnRoZW4obnVsbCwgZXJyb3JDYWxsYmFjaylgXG4gKlxuICogLSBgZmluYWxseShjYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgYWxsb3dzIHlvdSB0byBvYnNlcnZlIGVpdGhlciB0aGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIG9mIGEgcHJvbWlzZSxcbiAqICAgYnV0IHRvIGRvIHNvIHdpdGhvdXQgbW9kaWZ5aW5nIHRoZSBmaW5hbCB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgdG8gcmVsZWFzZSByZXNvdXJjZXMgb3IgZG8gc29tZVxuICogICBjbGVhbi11cCB0aGF0IG5lZWRzIHRvIGJlIGRvbmUgd2hldGhlciB0aGUgcHJvbWlzZSB3YXMgcmVqZWN0ZWQgb3IgcmVzb2x2ZWQuIFNlZSB0aGUgW2Z1bGxcbiAqICAgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL3dpa2kvQVBJLVJlZmVyZW5jZSNwcm9taXNlZmluYWxseWNhbGxiYWNrKSBmb3JcbiAqICAgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiAjIENoYWluaW5nIHByb21pc2VzXG4gKlxuICogQmVjYXVzZSBjYWxsaW5nIHRoZSBgdGhlbmAgbWV0aG9kIG9mIGEgcHJvbWlzZSByZXR1cm5zIGEgbmV3IGRlcml2ZWQgcHJvbWlzZSwgaXQgaXMgZWFzaWx5XG4gKiBwb3NzaWJsZSB0byBjcmVhdGUgYSBjaGFpbiBvZiBwcm9taXNlczpcbiAqXG4gKiBgYGBqc1xuICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gKiAgICAgcmV0dXJuIHJlc3VsdCArIDE7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gcHJvbWlzZUIgd2lsbCBiZSByZXNvbHZlZCBpbW1lZGlhdGVseSBhZnRlciBwcm9taXNlQSBpcyByZXNvbHZlZCBhbmQgaXRzIHZhbHVlXG4gKiAgIC8vIHdpbGwgYmUgdGhlIHJlc3VsdCBvZiBwcm9taXNlQSBpbmNyZW1lbnRlZCBieSAxXG4gKiBgYGBcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBjcmVhdGUgY2hhaW5zIG9mIGFueSBsZW5ndGggYW5kIHNpbmNlIGEgcHJvbWlzZSBjYW4gYmUgcmVzb2x2ZWQgd2l0aCBhbm90aGVyXG4gKiBwcm9taXNlICh3aGljaCB3aWxsIGRlZmVyIGl0cyByZXNvbHV0aW9uIGZ1cnRoZXIpLCBpdCBpcyBwb3NzaWJsZSB0byBwYXVzZS9kZWZlciByZXNvbHV0aW9uIG9mXG4gKiB0aGUgcHJvbWlzZXMgYXQgYW55IHBvaW50IGluIHRoZSBjaGFpbi4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byBpbXBsZW1lbnQgcG93ZXJmdWwgQVBJcyBsaWtlXG4gKiAkaHR0cCdzIHJlc3BvbnNlIGludGVyY2VwdG9ycy5cbiAqXG4gKlxuICogIyBEaWZmZXJlbmNlcyBiZXR3ZWVuIEtyaXMgS293YWwncyBRIGFuZCAkcVxuICpcbiAqICBUaGVyZSBhcmUgdHdvIG1haW4gZGlmZmVyZW5jZXM6XG4gKlxuICogLSAkcSBpcyBpbnRlZ3JhdGVkIHdpdGggdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlfSBTY29wZSBtb2RlbCBvYnNlcnZhdGlvblxuICogICBtZWNoYW5pc20gaW4gYW5ndWxhciwgd2hpY2ggbWVhbnMgZmFzdGVyIHByb3BhZ2F0aW9uIG9mIHJlc29sdXRpb24gb3IgcmVqZWN0aW9uIGludG8geW91clxuICogICBtb2RlbHMgYW5kIGF2b2lkaW5nIHVubmVjZXNzYXJ5IGJyb3dzZXIgcmVwYWludHMsIHdoaWNoIHdvdWxkIHJlc3VsdCBpbiBmbGlja2VyaW5nIFVJLlxuICogLSBRIGhhcyBtYW55IG1vcmUgZmVhdHVyZXMgdGhhbiAkcSwgYnV0IHRoYXQgY29tZXMgYXQgYSBjb3N0IG9mIGJ5dGVzLiAkcSBpcyB0aW55LCBidXQgY29udGFpbnNcbiAqICAgYWxsIHRoZSBpbXBvcnRhbnQgZnVuY3Rpb25hbGl0eSBuZWVkZWQgZm9yIGNvbW1vbiBhc3luYyB0YXNrcy5cbiAqXG4gKiAjIFRlc3RpbmdcbiAqXG4gKiAgYGBganNcbiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkge1xuICogICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICogICAgICB2YXIgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7XG4gKiAgICAgIHZhciByZXNvbHZlZFZhbHVlO1xuICpcbiAqICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7IHJlc29sdmVkVmFsdWUgPSB2YWx1ZTsgfSk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBTaW11bGF0ZSByZXNvbHZpbmcgb2YgcHJvbWlzZVxuICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7XG4gKiAgICAgIC8vIE5vdGUgdGhhdCB0aGUgJ3RoZW4nIGZ1bmN0aW9uIGRvZXMgbm90IGdldCBjYWxsZWQgc3luY2hyb25vdXNseS5cbiAqICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIHdhbnQgdGhlIHByb21pc2UgQVBJIHRvIGFsd2F5cyBiZSBhc3luYywgd2hldGhlciBvciBub3RcbiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9CZVVuZGVmaW5lZCgpO1xuICpcbiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLlxuICogICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9FcXVhbCgxMjMpO1xuICogICAgfSkpO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIGZ1bmN0aW9uKX0gcmVzb2x2ZXIgRnVuY3Rpb24gd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHJlc29sdmluZyBvclxuICogICByZWplY3RpbmcgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlc29sdmVzIHRoZVxuICogICBwcm9taXNlLCB0aGUgc2Vjb25kIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlamVjdHMgdGhlIHByb21pc2UuXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBuZXdseSBjcmVhdGVkIHByb21pc2UuXG4gKi9cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICovXG5mdW5jdGlvbiAkUVByb3ZpZGVyKCkge1xuICB2YXIgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB0cnVlO1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpO1xuICB9XTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcVByb3ZpZGVyI2Vycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhIHJlamVjdGVkIHByb21pc2UgaXMgbm90IGhhbmRsZWQuXG4gICAqIFRoaXMgZmVhdHVyZSBpcyBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIFdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhIHJlamVjdGVkIHByb21pc2UgaXMgbm90IGhhbmRsZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufG5nLiRxUHJvdmlkZXJ9IEN1cnJlbnQgdmFsdWUgd2hlbiBjYWxsZWQgd2l0aG91dCBhIG5ldyB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnM7XG4gICAgfVxuICB9O1xufVxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICQkUVByb3ZpZGVyKCkge1xuICB2YXIgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB0cnVlO1xuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24oJGJyb3dzZXIsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkYnJvd3Nlci5kZWZlcihjYWxsYmFjayk7XG4gICAgfSwgJGV4Y2VwdGlvbkhhbmRsZXIsIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zKTtcbiAgfV07XG5cbiAgdGhpcy5lcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBtYW5hZ2VyLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24pfSBuZXh0VGljayBGdW5jdGlvbiBmb3IgZXhlY3V0aW5nIGZ1bmN0aW9ucyBpbiB0aGUgbmV4dCB0dXJuLlxuICogQHBhcmFtIHtmdW5jdGlvbiguLi4qKX0gZXhjZXB0aW9uSGFuZGxlciBGdW5jdGlvbiBpbnRvIHdoaWNoIHVuZXhwZWN0ZWQgZXhjZXB0aW9ucyBhcmUgcGFzc2VkIGZvclxuICogICAgIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiBAIHBhcmFtIHs9Ym9vbGVhbn0gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgV2hldGhlciBhbiBlcnJvciBzaG91bGQgYmUgZ2VuZXJhdGVkIG9uIHVuaGFuZGxlZFxuICogICAgIHByb21pc2VzIHJlamVjdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgdmFyIHF1ZXVlU2l6ZSA9IDA7XG4gIHZhciBjaGVja1F1ZXVlID0gW107XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICBmdW5jdGlvbiBkZWZlcigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG4gICAgLy9Ob24gcHJvdG90eXBlIG1ldGhvZHMgbmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbih2YWwpIHsgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKTsgfTtcbiAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgeyByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7IH07XG4gICAgdGhpcy5ub3RpZnkgPSBmdW5jdGlvbihwcm9ncmVzcykgeyBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTsgfTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgZXh0ZW5kKFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9uRnVsZmlsbGVkKSAmJiBpc1VuZGVmaW5lZChvblJlamVjdGVkKSAmJiBpc1VuZGVmaW5lZChwcm9ncmVzc0JhY2spKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCk7XG5cbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nID0gdGhpcy4kJHN0YXRlLnBlbmRpbmcgfHwgW107XG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZy5wdXNoKFtyZXN1bHQsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2tdKTtcbiAgICAgIGlmICh0aGlzLiQkc3RhdGUuc3RhdHVzID4gMCkgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy4kJHN0YXRlKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGNhbGxiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCByZXNvbHZlLCBjYWxsYmFjayk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soZXJyb3IsIHJlamVjdCwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgc3RhdGUucHVyID0gdHJ1ZTtcbiAgICAgICAgcHJvbWlzZSA9IHBlbmRpbmdbaV1bMF07XG4gICAgICAgIGZuID0gcGVuZGluZ1tpXVtzdGF0ZS5zdGF0dXNdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgZm4oc3RhdGUudmFsdWUpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnN0YXR1cyA9PT0gMSkge1xuICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3RQcm9taXNlKHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3RQcm9taXNlKHByb21pc2UsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC0tcXVldWVTaXplO1xuICAgICAgaWYgKGVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zICYmIHF1ZXVlU2l6ZSA9PT0gMCkge1xuICAgICAgICBuZXh0VGljayhwcm9jZXNzQ2hlY2tzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzQ2hlY2tzKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bm1vZGlmaWVkLWxvb3AtY29uZGl0aW9uXG4gICAgd2hpbGUgKCFxdWV1ZVNpemUgJiYgY2hlY2tRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHZhciB0b0NoZWNrID0gY2hlY2tRdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKCF0b0NoZWNrLnB1cikge1xuICAgICAgICB0b0NoZWNrLnB1ciA9IHRydWU7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAnUG9zc2libHkgdW5oYW5kbGVkIHJlamVjdGlvbjogJyArIHRvRGVidWdTdHJpbmcodG9DaGVjay52YWx1ZSk7XG4gICAgICAgIGlmICh0b0NoZWNrLnZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKHRvQ2hlY2sudmFsdWUsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVQcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICBpZiAoZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgJiYgIXN0YXRlLnBlbmRpbmcgJiYgc3RhdGUuc3RhdHVzID09PSAyICYmICFzdGF0ZS5wdXIpIHtcbiAgICAgIGlmIChxdWV1ZVNpemUgPT09IDAgJiYgY2hlY2tRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmV4dFRpY2socHJvY2Vzc0NoZWNrcyk7XG4gICAgICB9XG4gICAgICBjaGVja1F1ZXVlLnB1c2goc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCB8fCAhc3RhdGUucGVuZGluZykgcmV0dXJuO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSB0cnVlO1xuICAgICsrcXVldWVTaXplO1xuICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgeyBwcm9jZXNzUXVldWUoc3RhdGUpOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHByb21pc2UsIHZhbCkge1xuICAgIGlmIChwcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgaWYgKHZhbCA9PT0gcHJvbWlzZSkge1xuICAgICAgJCRyZWplY3QocHJvbWlzZSwgJHFNaW5FcnIoXG4gICAgICAgICdxY3ljbGUnLFxuICAgICAgICAnRXhwZWN0ZWQgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aXRoIHZhbHVlIG90aGVyIHRoYW4gaXRzZWxmIFxcJ3swfVxcJycsXG4gICAgICAgIHZhbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkJHJlc29sdmUocHJvbWlzZSwgdmFsKTtcbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpIHtcbiAgICB2YXIgdGhlbjtcbiAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNPYmplY3QodmFsKSB8fCBpc0Z1bmN0aW9uKHZhbCkpIHRoZW4gPSB2YWwudGhlbjtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgdGhlbi5jYWxsKHZhbCwgZG9SZXNvbHZlLCBkb1JlamVjdCwgZG9Ob3RpZnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICBwcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMTtcbiAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUocHJvbWlzZS4kJHN0YXRlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkb1JlamVjdChlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb1Jlc29sdmUodmFsKSB7XG4gICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAkJHJlc29sdmUocHJvbWlzZSwgdmFsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZG9SZWplY3QodmFsKSB7XG4gICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAkJHJlamVjdChwcm9taXNlLCB2YWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb05vdGlmeShwcm9ncmVzcykge1xuICAgICAgbm90aWZ5UHJvbWlzZShwcm9taXNlLCBwcm9ncmVzcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pIHtcbiAgICBpZiAocHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuO1xuICAgICQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIH1cblxuICBmdW5jdGlvbiAkJHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgICBwcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgcHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDI7XG4gICAgc2NoZWR1bGVQcm9jZXNzUXVldWUocHJvbWlzZS4kJHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeVByb21pc2UocHJvbWlzZSwgcHJvZ3Jlc3MpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gcHJvbWlzZS4kJHN0YXRlLnBlbmRpbmc7XG5cbiAgICBpZiAoKHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FsbGJhY2ssIHJlc3VsdDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICByZXN1bHQgPSBjYWxsYmFja3NbaV1bMF07XG4gICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1bM107XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5vdGlmeVByb21pc2UocmVzdWx0LCBpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjcmVqZWN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIHNwZWNpZmllZCBgcmVhc29uYC4gVGhpcyBhcGkgc2hvdWxkIGJlXG4gICAqIHVzZWQgdG8gZm9yd2FyZCByZWplY3Rpb24gaW4gYSBjaGFpbiBvZiBwcm9taXNlcy4gSWYgeW91IGFyZSBkZWFsaW5nIHdpdGggdGhlIGxhc3QgcHJvbWlzZSBpblxuICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LlxuICAgKlxuICAgKiBXaGVuIGNvbXBhcmluZyBkZWZlcnJlZHMvcHJvbWlzZXMgdG8gdGhlIGZhbWlsaWFyIGJlaGF2aW9yIG9mIHRyeS9jYXRjaC90aHJvdywgdGhpbmsgb2ZcbiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgXCJjYXRjaFwiIGFuIGVycm9yIHZpYVxuICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGVcbiAgICogY3VycmVudCBwcm9taXNlLCB5b3UgaGF2ZSB0byBcInJldGhyb3dcIiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYVxuICAgKiBgcmVqZWN0YC5cbiAgICpcbiAgICogYGBganNcbiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAqICAgICAvLyBzdWNjZXNzOiBkbyBzb21ldGhpbmcgYW5kIHJlc29sdmUgcHJvbWlzZUJcbiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHRcbiAgICogICAgIHJldHVybiByZXN1bHQ7XG4gICAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmRcbiAgICogICAgIC8vICAgICAgICByZXNvbHZlIHByb21pc2VCIHdpdGggbmV3UHJvbWlzZU9yVmFsdWUsXG4gICAqICAgICAvLyAgICAgICAgb3RoZXJ3aXNlIGZvcndhcmQgdGhlIHJlamVjdGlvbiB0byBwcm9taXNlQlxuICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7XG4gICAqICAgICAgLy8gaGFuZGxlIHRoZSBlcnJvciBhbmQgcmVjb3ZlclxuICAgKiAgICAgIHJldHVybiBuZXdQcm9taXNlT3JWYWx1ZTtcbiAgICogICAgIH1cbiAgICogICAgIHJldHVybiAkcS5yZWplY3QocmVhc29uKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gcmVhc29uIENvbnN0YW50LCBtZXNzYWdlLCBleGNlcHRpb24gb3IgYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVqZWN0aW9uIHJlYXNvbi5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuXG4gICAqL1xuICBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCk7XG4gICAgcmVqZWN0UHJvbWlzZShyZXN1bHQsIHJlYXNvbik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCByZXNvbHZlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIGNhbGxiYWNrT3V0cHV0ID0gY2FsbGJhY2soKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KGUpO1xuICAgIH1cbiAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja091dHB1dCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFja091dHB1dC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZXIodmFsdWUpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc29sdmVyKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSN3aGVuXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXcmFwcyBhbiBvYmplY3QgdGhhdCBtaWdodCBiZSBhIHZhbHVlIG9yIGEgKDNyZCBwYXJ0eSkgdGhlbi1hYmxlIHByb21pc2UgaW50byBhICRxIHByb21pc2UuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGFyZSBkZWFsaW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgbWlnaHQgb3IgbWlnaHQgbm90IGJlIGEgcHJvbWlzZSwgb3IgaWZcbiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVycm9yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHByb2dyZXNzQ2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdoZW4odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcbiAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0LnRoZW4oY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZXNvbHZlXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbGlhcyBvZiB7QGxpbmsgbmcuJHEjd2hlbiB3aGVufSB0byBtYWludGFpbiBuYW1pbmcgY29uc2lzdGVuY3kgd2l0aCBFUzYuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVycm9yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHByb2dyZXNzQ2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cbiAgdmFyIHJlc29sdmUgPSB3aGVuO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI2FsbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0XG4gICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcyxcbiAgICogICBlYWNoIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21pc2UgYXQgdGhlIHNhbWUgaW5kZXgva2V5IGluIHRoZSBgcHJvbWlzZXNgIGFycmF5L2hhc2guXG4gICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAgICogICB3aXRoIHRoZSBzYW1lIHJlamVjdGlvbiB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCksXG4gICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9O1xuXG4gICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwga2V5KSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0c1trZXldID0gdmFsdWU7XG4gICAgICAgIGlmICghKC0tY291bnRlcikpIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgcmVzdWx0cyk7XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgcmVqZWN0UHJvbWlzZShyZXN1bHQsIHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQsIHJlc3VsdHMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyYWNlXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9yIHJlamVjdHMgYXMgc29vbiBhcyBvbmUgb2YgdGhvc2UgcHJvbWlzZXNcbiAgICogcmVzb2x2ZXMgb3IgcmVqZWN0cywgd2l0aCB0aGUgdmFsdWUgb3IgcmVhc29uIGZyb20gdGhhdCBwcm9taXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cyBhcyBzb29uIGFzIG9uZSBvZiB0aGUgYHByb21pc2VzYFxuICAgKiByZXNvbHZlcyBvciByZWplY3RzLCB3aXRoIHRoZSB2YWx1ZSBvciByZWFzb24gZnJvbSB0aGF0IHByb21pc2UuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJhY2UocHJvbWlzZXMpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgd2hlbihwcm9taXNlKS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uICRRKHJlc29sdmVyKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKHJlc29sdmVyKSkge1xuICAgICAgdGhyb3cgJHFNaW5FcnIoJ25vcnNsdnInLCAnRXhwZWN0ZWQgcmVzb2x2ZXJGbiwgZ290IFxcJ3swfVxcJycsIHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlRm4odmFsdWUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHtcbiAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9XG5cbiAgICByZXNvbHZlcihyZXNvbHZlRm4sIHJlamVjdEZuKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgLy8gTGV0J3MgbWFrZSB0aGUgaW5zdGFuY2VvZiBvcGVyYXRvciB3b3JrIGZvciBwcm9taXNlcywgc28gdGhhdFxuICAvLyBgbmV3ICRxKGZuKSBpbnN0YW5jZW9mICRxYCB3b3VsZCBldmFsdWF0ZSB0byB0cnVlLlxuICAkUS5wcm90b3R5cGUgPSBQcm9taXNlLnByb3RvdHlwZTtcblxuICAkUS5kZWZlciA9IGRlZmVyO1xuICAkUS5yZWplY3QgPSByZWplY3Q7XG4gICRRLndoZW4gPSB3aGVuO1xuICAkUS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgJFEuYWxsID0gYWxsO1xuICAkUS5yYWNlID0gcmFjZTtcblxuICByZXR1cm4gJFE7XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRSQUZQcm92aWRlcigpIHsgLy9yQUZcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHdpbmRvdywgJHRpbWVvdXQpIHtcbiAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIHJhZlN1cHBvcnRlZCA9ICEhcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIHZhciByYWYgPSByYWZTdXBwb3J0ZWRcbiAgICAgID8gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQoZm4sIDE2LjY2LCBmYWxzZSk7IC8vIDEwMDAgLyA2MCA9IDE2LjY2NlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgIHJhZi5zdXBwb3J0ZWQgPSByYWZTdXBwb3J0ZWQ7XG5cbiAgICByZXR1cm4gcmFmO1xuICB9XTtcbn1cblxuLyoqXG4gKiBERVNJR04gTk9URVNcbiAqXG4gKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIGFyZSBoZWF2aWx5IGZhdm9yZWQgZm9yIHNwZWVkIGFuZCBtZW1vcnkgY29uc3VtcHRpb24uXG4gKlxuICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWVcbiAqIHZhbHVlIGFzIGxhc3QgdGltZSBzbyB3ZSBvcHRpbWl6ZSB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6XG4gKiAgIC0gTm8gY2xvc3VyZXMsIGluc3RlYWQgdXNlIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJXG4gKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcbiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzXG4gKlxuICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxuICogICAtIFRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZFxuICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnaW5uaW5nICh1bnNoaWZ0KSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQgKHB1c2gpXG4gKlxuICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuXG4gKiAgIC0gVXNpbmcgYW4gYXJyYXkgd291bGQgYmUgc2xvdyBzaW5jZSBpbnNlcnRzIGluIHRoZSBtaWRkbGUgYXJlIGV4cGVuc2l2ZTsgc28gd2UgdXNlIGxpbmtlZCBsaXN0c1xuICpcbiAqIFRoZXJlIGFyZSBmZXdlciB3YXRjaGVzIHRoYW4gb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmUgaW1wbGVtZW50ZWRcbiAqIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIHRoZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiB3aGljaCBpcyBleHBlbnNpdmVcbiAqIHRvIGNvbnN0cnVjdC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kXG4gKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAqXG4gKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuXG4gKlxuICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdFxuICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0b1xuICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAqXG4gKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0XG4gKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb290U2NvcGVcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICogQWxsIG90aGVyIHNjb3BlcyBhcmUgZGVzY2VuZGFudCBzY29wZXMgb2YgdGhlIHJvb3Qgc2NvcGUuIFNjb3BlcyBwcm92aWRlIHNlcGFyYXRpb25cbiAqIGJldHdlZW4gdGhlIG1vZGVsIGFuZCB0aGUgdmlldywgdmlhIGEgbWVjaGFuaXNtIGZvciB3YXRjaGluZyB0aGUgbW9kZWwgZm9yIGNoYW5nZXMuXG4gKiBUaGV5IGFsc28gcHJvdmlkZSBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL3Njb3BlIGRldmVsb3BlciBndWlkZSBvbiBzY29wZXN9LlxuICovXG5mdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKSB7XG4gIHZhciBUVEwgPSAxMDtcbiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcbiAgdmFyIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgdmFyIGFwcGx5QXN5bmNJZCA9IG51bGw7XG5cbiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBUVEwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRUTDtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNjb3BlQ2xhc3MocGFyZW50KSB7XG4gICAgZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgIHRoaXMuJCR3YXRjaGVycyA9IHRoaXMuJCRuZXh0U2libGluZyA9XG4gICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCR3YXRjaGVyc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgICByZXR1cm4gQ2hpbGRTY29wZTtcbiAgfVxuXG4gIHRoaXMuJGdldCA9IFsnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkcGFyc2UsICRicm93c2VyKSB7XG5cbiAgICBmdW5jdGlvbiBkZXN0cm95Q2hpbGRTY29wZSgkZXZlbnQpIHtcbiAgICAgICAgJGV2ZW50LmN1cnJlbnRTY29wZS4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5VcFNjb3BlKCRzY29wZSkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBJRSA5IG9ubHlcbiAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIGEgbWVtb3J5IGxlYWsgaW4gSUU5IGlmIGFsbCBjaGlsZCBzY29wZXMgYXJlIG5vdCBkaXNjb25uZWN0ZWRcbiAgICAgICAgLy8gY29tcGxldGVseSB3aGVuIGEgc2NvcGUgaXMgZGVzdHJveWVkLiBTbyB0aGlzIGNvZGUgd2lsbCByZWN1cnNlIHVwIHRocm91Z2hcbiAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMDcwNlxuICAgICAgICBpZiAoJHNjb3BlLiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS4kJG5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJG5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29kZSBiZWxvdyB3b3JrcyBhcm91bmQgSUU5IGFuZCBWOCdzIG1lbW9yeSBsZWFrc1xuICAgICAgLy9cbiAgICAgIC8vIFNlZTpcbiAgICAgIC8vIC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzMjYzI2XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICRzY29wZS4kcGFyZW50ID0gJHNjb3BlLiQkbmV4dFNpYmxpbmcgPSAkc2NvcGUuJCRwcmV2U2libGluZyA9ICRzY29wZS4kJGNoaWxkSGVhZCA9XG4gICAgICAgICAgJHNjb3BlLiQkY2hpbGRUYWlsID0gJHNjb3BlLiRyb290ID0gJHNjb3BlLiQkd2F0Y2hlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKSBTZWUgYWxzbyB0aGUge0BsaW5rIGd1aWRlL3Njb3BlIFNjb3BlcyBndWlkZX0gZm9yXG4gICAgICogYW4gaW4tZGVwdGggaW50cm9kdWN0aW9uIGFuZCB1c2FnZSBleGFtcGxlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG5cbiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSBcIldlbGNvbWVcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICBleHBlY3QocGFyZW50LnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXaGVuIGludGVyYWN0aW5nIHdpdGggYFNjb3BlYCBpbiB0ZXN0cywgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBhcmUgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIGluc3RhbmNlcyBvZiBgU2NvcGVgIHR5cGUuIFNlZSB7QGxpbmsgbmdNb2NrLiRyb290U2NvcGUuU2NvcGUgbmdNb2NrIFNjb3BlfSBmb3IgYWRkaXRpb25hbFxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRwaGFzZSA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJCR3YXRjaGVycyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kcm9vdCA9IHRoaXM7XG4gICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkaWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nKSB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLlxuICAgICAgICovXG5cbiAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG5ld1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudC5cbiAgICAgICAqIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzXG4gICAgICAgKiBkZXNpcmVkIGZvciB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZFxuICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBJZiB0cnVlLCB0aGVuIHRoZSBzY29wZSBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzLCBpdCBpcyB1c2VmdWwgZm9yIHRoZSB3aWRnZXQgdG8gbm90IGFjY2lkZW50YWxseSByZWFkIHBhcmVudFxuICAgICAgICogICAgICAgICBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Njb3BlfSBbcGFyZW50PXRoaXNdIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgU2NvcGVgfSB0aGF0IHdpbGwgYmUgdGhlIGAkcGFyZW50YFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmV3bHkgY3JlYXRlZCBzY29wZS4gRGVmYXVsdHMgdG8gYHRoaXNgIHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2NvcGUgaGllcmFyY2h5IHdoaWxlIG1haW50YWluaW5nIHRoZSBjb3JyZWN0IHByb3RvdHlwaWNhbFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3bHkgY3JlYXRlZCBjaGlsZCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRuZXc6IGZ1bmN0aW9uKGlzb2xhdGUsIHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcbiAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgIGNoaWxkLiRyb290ID0gdGhpcy4kcm9vdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuXG4gICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT09IHRoaXMpIGNoaWxkLiRvbignJGRlc3Ryb3knLCBkZXN0cm95Q2hpbGRTY29wZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZ2lzdGVycyBhIGBsaXN0ZW5lcmAgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgY2FsbGVkIG9uIGV2ZXJ5IGNhbGwgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBub3QgY2hhbmdlXG4gICAgICAgKiAgIGl0cyB2YWx1ZSB3aGVuIGV4ZWN1dGVkIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWUgaW5wdXQgYmVjYXVzZSBpdCBtYXkgYmUgZXhlY3V0ZWQgbXVsdGlwbGVcbiAgICAgICAqICAgdGltZXMgYnkge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9LiBUaGF0IGlzLCBgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgYmVcbiAgICAgICAqICAgW2lkZW1wb3RlbnRdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSWRlbXBvdGVuY2UpLilcbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgKiAgIHByZXZpb3VzIGNhbGwgdG8gYHdhdGNoRXhwcmVzc2lvbmAgYXJlIG5vdCBlcXVhbCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBpbml0aWFsIHJ1bixcbiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSxcbiAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgKiAgICB2aWEgdGhlIGAhPT1gIEphdmFzY3JpcHQgb3BlcmF0b3IsIHVubGVzcyBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWBcbiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KVxuICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICogICBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yXG4gICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0XG4gICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAqIC0gVGhpcyBzaG91bGQgbm90IGJlIHVzZWQgdG8gd2F0Y2ggZm9yIGNoYW5nZXMgaW4gb2JqZWN0cyB0aGF0IGFyZVxuICAgICAgICogICBvciBjb250YWluIFtGaWxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmlsZSkgb2JqZWN0cyBkdWUgdG8gbGltaXRhdGlvbnMgd2l0aCB7QGxpbmsgYW5ndWxhci5jb3B5IGBhbmd1bGFyLmNvcHlgfS5cbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuXG4gICAgICAgKiAgIGl0ZXJhdGlvbiBsaW1pdCBpcyAxMCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgZGVhZGxvY2suXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICogbXVsdGlwbGUgY2FsbHMgdG8geW91ciBgd2F0Y2hFeHByZXNzaW9uYCBiZWNhdXNlIGl0IHdpbGwgZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBpbiBhXG4gICAgICAgKiBzaW5nbGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSBpZiBhIGNoYW5nZSBpcyBkZXRlY3RlZC4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbb2JqZWN0RXF1YWxpdHk9ZmFsc2VdIENvbXBhcmUgZm9yIG9iamVjdCBlcXVhbGl0eSB1c2luZyB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGluc3RlYWQgb2ZcbiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApO1xuXG4gICAgICAgIGlmIChnZXQuJCR3YXRjaERlbGVnYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldC4kJHdhdGNoRGVsZWdhdGUodGhpcywgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBnZXQsIHdhdGNoRXhwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLFxuICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsXG4gICAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgICBleHA6IHByZXR0eVByaW50RXhwcmVzc2lvbiB8fCB3YXRjaEV4cCxcbiAgICAgICAgICAgICAgZXE6ICEhb2JqZWN0RXF1YWxpdHlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICB3YXRjaGVyLmZuID0gbm9vcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXJyYXkpIHtcbiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTtcbiAgICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLlxuICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgICBhcnJheS51bnNoaWZ0KHdhdGNoZXIpO1xuICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXgrKztcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGFycmF5UmVtb3ZlKGFycmF5LCB3YXRjaGVyKTtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4KSB7XG4gICAgICAgICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSB0aGUgc3RhbmRhcmQgYCR3YXRjaGAgb3BlcmF0aW9uLiBUaGVpciByZXR1cm5cbiAgICAgICAqICAgdmFsdWVzIGFyZSBleGFtaW5lZCBmb3IgY2hhbmdlcyBvbiBldmVyeSBjYWxsIHRvIGAkZGlnZXN0YC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5XG4gICAgICAgKiB3YXRjaGVkIHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueVxuICAgICAgICogICAgZXhwcmVzc2lvbiBpbiBgd2F0Y2hFeHByZXNzaW9uc2AgY2hhbmdlc1xuICAgICAgICogICAgVGhlIGBuZXdWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlcyBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgLCB3aXRoIHRoZSBpbmRleGVzIG1hdGNoaW5nXG4gICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgYW5kIHRoZSBgb2xkVmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgYWxsIGxpc3RlbmVycy5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgbmV3VmFsdWVzID0gbmV3IEFycmF5KHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKTtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUFxuICAgICAgICAgIHZhciBzaG91bGRDYWxsID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2FsbCkgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgIHNob3VsZENhbGwgPSBmYWxzZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHNpemUgb2Ygb25lXG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbnNbMF0sIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBzY29wZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbMF0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgKHZhbHVlID09PSBvbGRWYWx1ZSkgPyBuZXdWYWx1ZXMgOiBvbGRWYWx1ZXMsIHNjb3BlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24oZXhwciwgaSkge1xuICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbaV0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLiRldmFsQXN5bmMod2F0Y2hHcm91cEFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVyZWdpc3RlckZucy5wdXNoKHVud2F0Y2hGbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24oKSB7XG4gICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICB3aGlsZSAoZGVyZWdpc3RlckZucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlXG4gICAgICAgKiAoZm9yIGFycmF5cywgdGhpcyBpbXBsaWVzIHdhdGNoaW5nIHRoZSBhcnJheSBpdGVtczsgZm9yIG9iamVjdCBtYXBzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmdcbiAgICAgICAqIHRoZSBwcm9wZXJ0aWVzKS4gSWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIHRoZSBgbGlzdGVuZXJgIGNhbGxiYWNrIGlzIGZpcmVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGBvYmpgIGNvbGxlY3Rpb24gaXMgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGlzIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgaGF2ZSBiZWVuIGFkZGVkLCByZW1vdmVkLCBvciBtb3ZlZC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGVcbiAgICAgICAqICAgYWRkaW5nLCByZW1vdmluZywgYW5kIG1vdmluZyBpdGVtcyBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddO1xuICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSA0O1xuXG4gICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YUNvdW50ID0gbmV3TmFtZXMubGVuZ3RoO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vc3RpbGwgYXQgNCAuLi4gbm8gY2hhbmdlc1xuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDQpO1xuXG4gICAgICAgICAgJHNjb3BlLm5hbWVzLnBvcCgpO1xuICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICAvL25vdyB0aGVyZSdzIGJlZW4gYSBjaGFuZ2VcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB2YWx1ZSBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IG9yIGFuIGFycmF5IHdoaWNoIGlzIG9ic2VydmVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEFueSBzaGFsbG93IGNoYW5nZSB3aXRoaW4gdGhlXG4gICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdDb2xsZWN0aW9uLCBvbGRDb2xsZWN0aW9uLCBzY29wZSl9IGxpc3RlbmVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkXG4gICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLlxuICAgICAgICogICAgLSBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uXG4gICAgICAgKiAgICAtIFRoZSBgb2xkQ29sbGVjdGlvbmAgb2JqZWN0IGlzIGEgY29weSBvZiB0aGUgZm9ybWVyIGNvbGxlY3Rpb24gZGF0YS5cbiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGVcbiAgICAgICAqICAgICAgYGxpc3RlbmVyYCBmdW5jdGlvbiBkZWNsYXJlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMuXG4gICAgICAgKiAgICAtIFRoZSBgc2NvcGVgIGFyZ3VtZW50IHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGVcbiAgICAgICAqICAgIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBpcyBleGVjdXRlZCwgdGhlIGludGVybmFsIHdhdGNoIG9wZXJhdGlvbiBpcyB0ZXJtaW5hdGVkLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmosIGxpc3RlbmVyKSB7XG4gICAgICAgICR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvci4kc3RhdGVmdWwgPSB0cnVlO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgdmFsdWUsIHVwZGF0ZWQgb24gZWFjaCBkaXJ0eS1jaGVjayBydW5cbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB0aGUgbGFzdCBkaXJ0eS1jaGVjayBydW4sXG4gICAgICAgIC8vIHVwZGF0ZWQgdG8gbWF0Y2ggbmV3VmFsdWUgZHVyaW5nIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgb2xkVmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHdoZW4gdGhlIGxhc3QgY2hhbmdlIGhhcHBlbmVkXG4gICAgICAgIHZhciB2ZXJ5T2xkVmFsdWU7XG4gICAgICAgIC8vIG9ubHkgdHJhY2sgdmVyeU9sZFZhbHVlIGlmIHRoZSBsaXN0ZW5lciBpcyBhc2tpbmcgZm9yIGl0XG4gICAgICAgIHZhciB0cmFja1ZlcnlPbGRWYWx1ZSA9IChsaXN0ZW5lci5sZW5ndGggPiAxKTtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yID0gJHBhcnNlKG9iaiwgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKTtcbiAgICAgICAgdmFyIGludGVybmFsQXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBpbml0UnVuID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9sZExlbmd0aCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleSwgYm90aE5hTiwgbmV3SXRlbSwgb2xkSXRlbTtcblxuICAgICAgICAgIC8vIElmIHRoZSBuZXcgdmFsdWUgaXMgdW5kZWZpbmVkLCB0aGVuIHJldHVybiB1bmRlZmluZWQgYXMgdGhlIHdhdGNoIG1heSBiZSBhIG9uZS10aW1lIHdhdGNoXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG5ld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsgLy8gaWYgcHJpbWl0aXZlXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxBcnJheSkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIGFycmF5IGludG8gYXJyYXkuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxBcnJheTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gb2xkVmFsdWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gbmV3VmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gaWYgbGVuZ3RocyBkbyBub3QgbWF0Y2ggd2UgbmVlZCB0byB0cmlnZ2VyIGNoYW5nZSBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgb2xkVmFsdWUubGVuZ3RoID0gb2xkTGVuZ3RoID0gbmV3TGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2ldO1xuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlW2ldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsT2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtrZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgrKztcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGFuZ2VEZXRlY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGluaXRSdW4pIHtcbiAgICAgICAgICAgIGluaXRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBuZXdWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCB2ZXJ5T2xkVmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGZvciB0aGUgbmV4dCB0aW1lIGEgY29sbGVjdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAgaWYgKHRyYWNrVmVyeU9sZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAvL3ByaW1pdGl2ZVxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ldyBBcnJheShuZXdWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIG9iamVjdFxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goY2hhbmdlRGV0ZWN0b3IsICR3YXRjaENvbGxlY3Rpb25BY3Rpb24pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZFxuICAgICAgICogaXRzIGNoaWxkcmVuLiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZVxuICAgICAgICogdGhlIG1vZGVsLCB0aGUgYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfVxuICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgICAgKiBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuXG4gICAgICAgKlxuICAgICAgICogVXN1YWxseSwgeW91IGRvbid0IGNhbGwgYCRkaWdlc3QoKWAgZGlyZWN0bHkgaW5cbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpblxuICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICAgICAgICogSW5zdGVhZCwgeW91IHNob3VsZCBjYWxsIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHkoKX0gKHR5cGljYWxseSBmcm9tIHdpdGhpblxuICAgICAgICogYSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlfSksIHdoaWNoIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC5cbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciBgJGRpZ2VzdCgpYCBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCwgZm4sIGdldCxcbiAgICAgICAgICAgIHdhdGNoZXJzLFxuICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCxcbiAgICAgICAgICAgIG5leHQsIGN1cnJlbnQsIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICB3YXRjaExvZyA9IFtdLFxuICAgICAgICAgICAgbG9nSWR4LCBhc3luY1Rhc2s7XG5cbiAgICAgICAgYmVnaW5QaGFzZSgnJGRpZ2VzdCcpO1xuICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGluIHN5bmMgYmVmb3JlIHRoZSBjYWxsIHRvICRkaWdlc3RcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlICYmIGFwcGx5QXN5bmNJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3Qgc2NvcGUsIGFuZCAkYXBwbHlBc3luYyBoYXMgc2NoZWR1bGVkIGEgZGVmZXJyZWQgJGFwcGx5KCksIHRoZW5cbiAgICAgICAgICAvLyBjYW5jZWwgdGhlIHNjaGVkdWxlZCAkYXBwbHkgYW5kIGZsdXNoIHRoZSBxdWV1ZSBvZiBleHByZXNzaW9ucyB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKGFwcGx5QXN5bmNJZCk7XG4gICAgICAgICAgZmx1c2hBcHBseUFzeW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgZG8geyAvLyBcIndoaWxlIGRpcnR5XCIgbG9vcFxuICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgY3VycmVudCA9IHRhcmdldDtcblxuICAgICAgICAgIC8vIEl0J3Mgc2FmZSBmb3IgYXN5bmNRdWV1ZVBvc2l0aW9uIHRvIGJlIGEgbG9jYWwgdmFyaWFibGUgaGVyZSBiZWNhdXNlIHRoaXMgbG9vcCBjYW4ndFxuICAgICAgICAgIC8vIGJlIHJlZW50ZXJlZCByZWN1cnNpdmVseS4gQ2FsbGluZyAkZGlnZXN0IGZyb20gYSBmdW5jdGlvbiBwYXNzZWQgdG8gJGV2YWxBc3luYyB3b3VsZFxuICAgICAgICAgIC8vIGxlYWQgdG8gYSAnJGRpZ2VzdCBhbHJlYWR5IGluIHByb2dyZXNzJyBlcnJvci5cbiAgICAgICAgICBmb3IgKHZhciBhc3luY1F1ZXVlUG9zaXRpb24gPSAwOyBhc3luY1F1ZXVlUG9zaXRpb24gPCBhc3luY1F1ZXVlLmxlbmd0aDsgYXN5bmNRdWV1ZVBvc2l0aW9uKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGFzeW5jVGFzayA9IGFzeW5jUXVldWVbYXN5bmNRdWV1ZVBvc2l0aW9uXTtcbiAgICAgICAgICAgICAgZm4gPSBhc3luY1Rhc2suZm47XG4gICAgICAgICAgICAgIGZuKGFzeW5jVGFzay5zY29wZSwgYXN5bmNUYXNrLmxvY2Fscyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3luY1F1ZXVlLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICB0cmF2ZXJzZVNjb3Blc0xvb3A6XG4gICAgICAgICAgZG8geyAvLyBcInRyYXZlcnNlIHRoZSBzY29wZXNcIiBsb29wXG4gICAgICAgICAgICBpZiAoKHdhdGNoZXJzID0gY3VycmVudC4kJHdhdGNoZXJzKSkge1xuICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzXG4gICAgICAgICAgICAgIHdhdGNoZXJzLiQkZGlnZXN0V2F0Y2hJbmRleCA9IHdhdGNoZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgd2hpbGUgKHdhdGNoZXJzLiQkZGlnZXN0V2F0Y2hJbmRleC0tKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHdhdGNoID0gd2F0Y2hlcnNbd2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4XTtcbiAgICAgICAgICAgICAgICAgIC8vIE1vc3QgY29tbW9uIHdhdGNoZXMgYXJlIG9uIHByaW1pdGl2ZXMsIGluIHdoaWNoIGNhc2Ugd2UgY2FuIHNob3J0XG4gICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzXG4gICAgICAgICAgICAgICAgICBpZiAod2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0ID0gd2F0Y2guZ2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID0gZ2V0KGN1cnJlbnQpKSAhPT0gKGxhc3QgPSB3YXRjaC5sYXN0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaC5lcVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGlzTnVtYmVyTmFOKHZhbHVlKSAmJiBpc051bWJlck5hTihsYXN0KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gd2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSwgbnVsbCkgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBmbiA9IHdhdGNoLmZuO1xuICAgICAgICAgICAgICAgICAgICAgIGZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nSWR4ID0gNCAtIHR0bDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBpc0Z1bmN0aW9uKHdhdGNoLmV4cCkgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpIDogd2F0Y2guZXhwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWw6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWw6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXRjaCA9PT0gbGFzdERpcnR5V2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gdGVzdGVkLlxuICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGJyb2FkY2FzdFxuICAgICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJHdhdGNoZXJzQ291bnQgJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7XG5cbiAgICAgICAgICAvLyBgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO2AgdGFrZXMgdXMgdG8gaGVyZVxuXG4gICAgICAgICAgaWYgKChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCkgJiYgISh0dGwtLSkpIHtcbiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsXG4gICAgICAgICAgICAgICAgJ3swfSAkZGlnZXN0KCkgaXRlcmF0aW9ucyByZWFjaGVkLiBBYm9ydGluZyFcXG4nICtcbiAgICAgICAgICAgICAgICAnV2F0Y2hlcnMgZmlyZWQgaW4gdGhlIGxhc3QgNSBpdGVyYXRpb25zOiB7MX0nLFxuICAgICAgICAgICAgICAgIFRUTCwgd2F0Y2hMb2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7XG5cbiAgICAgICAgY2xlYXJQaGFzZSgpO1xuXG4gICAgICAgIC8vIHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIGlzbid0IGxvY2FsIGhlcmUgYmVjYXVzZSB0aGlzIGxvb3AgY2FuIGJlIHJlZW50ZXJlZCByZWN1cnNpdmVseS5cbiAgICAgICAgd2hpbGUgKHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uIDwgcG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwb3N0RGlnZXN0UXVldWVbcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24rK10oKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCA9IHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uID0gMDtcblxuICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgICAgICAvLyAoZm9yIHdoaWNoIG5vIGV2ZW50IGlzIGZpcmVkOyBlLmcuIHZpYSBgaGlzdG9yeS5wdXNoU3RhdGUoKWApXG4gICAgICAgICRicm93c2VyLiQkY2hlY2tVcmxDaGFuZ2UoKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcbiAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHNjb3BlIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQnJvYWRjYXN0ZWQgd2hlbiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4gYXJlIGJlaW5nIGRlc3Ryb3llZC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgc2NvcGUgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFJlbW92YWwgaW1wbGllc1xuICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXJcbiAgICAgICAqIHByb3BhZ2F0ZSB0byB0aGUgY3VycmVudCBzY29wZSBhbmQgaXRzIGNoaWxkcmVuLiBSZW1vdmFsIGFsc28gaW1wbGllcyB0aGF0IHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBpcyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBgJGRlc3Ryb3koKWAgaXMgdXN1YWxseSB1c2VkIGJ5IGRpcmVjdGl2ZXMgc3VjaCBhc1xuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gZm9yIG1hbmFnaW5nIHRoZVxuICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLlxuICAgICAgICpcbiAgICAgICAqIEp1c3QgYmVmb3JlIGEgc2NvcGUgaXMgZGVzdHJveWVkLCBhIGAkZGVzdHJveWAgZXZlbnQgaXMgYnJvYWRjYXN0ZWQgb24gdGhpcyBzY29wZS5cbiAgICAgICAqIEFwcGxpY2F0aW9uIGNvZGUgY2FuIHJlZ2lzdGVyIGEgYCRkZXN0cm95YCBldmVudCBoYW5kbGVyIHRoYXQgd2lsbCBnaXZlIGl0IGEgY2hhbmNlIHRvXG4gICAgICAgKiBwZXJmb3JtIGFueSBuZWNlc3NhcnkgY2xlYW51cC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICovXG4gICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRlc3Ryb3kgYSBzY29wZSB0aGF0IGhhcyBiZWVuIGFscmVhZHkgZGVzdHJveWVkLlxuICAgICAgICBpZiAodGhpcy4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50O1xuXG4gICAgICAgIHRoaXMuJGJyb2FkY2FzdCgnJGRlc3Ryb3knKTtcbiAgICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUpIHtcbiAgICAgICAgICAvL1JlbW92ZSBoYW5kbGVycyBhdHRhY2hlZCB0byB3aW5kb3cgd2hlbiAkcm9vdFNjb3BlIGlzIHJlbW92ZWRcbiAgICAgICAgICAkYnJvd3Nlci4kJGFwcGxpY2F0aW9uRGVzdHJveWVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KHRoaXMsIC10aGlzLiQkd2F0Y2hlcnNDb3VudCk7XG4gICAgICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiB0aGlzLiQkbGlzdGVuZXJDb3VudCkge1xuICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQodGhpcywgdGhpcy4kJGxpc3RlbmVyQ291bnRbZXZlbnROYW1lXSwgZXZlbnROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldmVyIGFsbCB0aGUgcmVmZXJlbmNlcyB0byBwYXJlbnQgc2NvcGVzIChhZnRlciB0aGlzIGNsZWFudXAsIHRoZSBjdXJyZW50IHNjb3BlIHNob3VsZFxuICAgICAgICAvLyBub3QgYmUgcmV0YWluZWQgYnkgYW55IG9mIG91ciByZWZlcmVuY2VzIGFuZCBzaG91bGQgYmUgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbilcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuJCRjaGlsZEhlYWQgPT09IHRoaXMpIHBhcmVudC4kJGNoaWxkSGVhZCA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuJCRjaGlsZFRhaWwgPT09IHRoaXMpIHBhcmVudC4kJGNoaWxkVGFpbCA9IHRoaXMuJCRwcmV2U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRwcmV2U2libGluZykgdGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuXG4gICAgICAgIC8vIERpc2FibGUgbGlzdGVuZXJzLCB3YXRjaGVycyBhbmQgYXBwbHkvZGlnZXN0IG1ldGhvZHNcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gdGhpcy4kZXZhbEFzeW5jID0gdGhpcy4kYXBwbHlBc3luYyA9IG5vb3A7XG4gICAgICAgIHRoaXMuJG9uID0gdGhpcy4kd2F0Y2ggPSB0aGlzLiR3YXRjaEdyb3VwID0gZnVuY3Rpb24oKSB7IHJldHVybiBub29wOyB9O1xuICAgICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG5cbiAgICAgICAgLy8gRGlzY29ubmVjdCB0aGUgbmV4dCBzaWJsaW5nIHRvIHByZXZlbnQgYGNsZWFuVXBTY29wZWAgZGVzdHJveWluZyB0aG9zZSB0b29cbiAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gbnVsbDtcbiAgICAgICAgY2xlYW5VcFNjb3BlKHRoaXMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRXhlY3V0ZXMgdGhlIGBleHByZXNzaW9uYCBvbiB0aGUgY3VycmVudCBzY29wZSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LiBBbnkgZXhjZXB0aW9ucyBpblxuICAgICAgICogdGhlIGV4cHJlc3Npb24gYXJlIHByb3BhZ2F0ZWQgKHVuY2F1Z2h0KS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBldmFsdWF0aW5nIEFuZ3VsYXJcbiAgICAgICAqIGV4cHJlc3Npb25zLlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAgdmFyIHNjb3BlID0gbmcuJHJvb3RTY29wZS5TY29wZSgpO1xuICAgICAgICAgICBzY29wZS5hID0gMTtcbiAgICAgICAgICAgc2NvcGUuYiA9IDI7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKCdhK2InKSkudG9FcXVhbCgzKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKGZ1bmN0aW9uKHNjb3BlKXsgcmV0dXJuIHNjb3BlLmEgKyBzY29wZS5iOyB9KSkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cHJlc3Npb24gQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLlxuICAgICAgICovXG4gICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiAkcGFyc2UoZXhwcikodGhpcywgbG9jYWxzKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gb24gdGhlIGN1cnJlbnQgc2NvcGUgYXQgYSBsYXRlciBwb2ludCBpbiB0aW1lLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seVxuICAgICAgICogdGhhdDpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlZCB0aGUgZXZhbHVhdGlvbiAocHJlZmVyYWJseSBiZWZvcmUgRE9NXG4gICAgICAgKiAgICAgcmVuZGVyaW5nKS5cbiAgICAgICAqICAgLSBhdCBsZWFzdCBvbmUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0IGN5Y2xlfSB3aWxsIGJlIHBlcmZvcm1lZCBhZnRlclxuICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogX19Ob3RlOl9fIGlmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBgJGRpZ2VzdGAgY3ljbGUsIGEgbmV3IGAkZGlnZXN0YCBjeWNsZVxuICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsXG4gICAgICAgKiBmcm9tIHdpdGhpbiBhbiBgJGFwcGx5YCBjYWxsLiBUaGF0IGluY2x1ZGVzIGNvZGUgZXZhbHVhdGVkIHZpYSBgJGV2YWxBc3luY2AuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsob2JqZWN0KT19IGxvY2FscyBMb2NhbCB2YXJpYWJsZXMgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluIHNjb3BlLlxuICAgICAgICovXG4gICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jXG4gICAgICAgIC8vIHRhc2sgYWxzbyBzY2hlZHVsZSBhc3luYyBhdXRvLWZsdXNoXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlICYmICFhc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmNRdWV1ZS5wdXNoKHtzY29wZTogdGhpcywgZm46ICRwYXJzZShleHByKSwgbG9jYWxzOiBsb2NhbHN9KTtcbiAgICAgIH0sXG5cbiAgICAgICQkcG9zdERpZ2VzdDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnB1c2goZm4pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIGAkYXBwbHkoKWAgaXMgdXNlZCB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gYW5ndWxhciBmcm9tIG91dHNpZGUgb2YgdGhlIGFuZ3VsYXJcbiAgICAgICAqIGZyYW1ld29yay4gKEZvciBleGFtcGxlIGZyb20gYnJvd3NlciBET00gZXZlbnRzLCBzZXRUaW1lb3V0LCBYSFIgb3IgdGhpcmQgcGFydHkgbGlicmFyaWVzKS5cbiAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlXG4gICAgICAgKiBjeWNsZSBvZiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgZXhjZXB0aW9uIGhhbmRsaW5nfSxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LlxuICAgICAgICpcbiAgICAgICAqICMjIExpZmUgY3ljbGVcbiAgICAgICAqXG4gICAgICAgKiAjIFBzZXVkby1Db2RlIG9mIGAkYXBwbHkoKWBcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7XG4gICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgIHJldHVybiAkZXZhbChleHByKTtcbiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczpcbiAgICAgICAqXG4gICAgICAgKiAxLiBUaGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZXhlY3V0ZWQgdXNpbmcgdGhlXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbCAkZXZhbCgpfSBtZXRob2QuXG4gICAgICAgKiAyLiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqIDMuIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2h9IGxpc3RlbmVycyBhcmUgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRhcHBseTogZnVuY3Rpb24oZXhwcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGJlZ2luUGhhc2UoJyRhcHBseScpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNjaGVkdWxlIHRoZSBpbnZvY2F0aW9uIG9mICRhcHBseSB0byBvY2N1ciBhdCBhIGxhdGVyIHRpbWUuIFRoZSBhY3R1YWwgdGltZSBkaWZmZXJlbmNlXG4gICAgICAgKiB2YXJpZXMgYWNyb3NzIGJyb3dzZXJzLCBidXQgaXMgdHlwaWNhbGx5IGFyb3VuZCB+MTAgbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVldWUgdXAgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hpY2ggbmVlZCB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIHNhbWVcbiAgICAgICAqIGRpZ2VzdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKi9cbiAgICAgICRhcHBseUFzeW5jOiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgIGlmIChleHByKSB7XG4gICAgICAgICAgYXBwbHlBc3luY1F1ZXVlLnB1c2goJGFwcGx5QXN5bmNFeHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBleHByID0gJHBhcnNlKGV4cHIpO1xuICAgICAgICBzY2hlZHVsZUFwcGx5QXN5bmMoKTtcblxuICAgICAgICBmdW5jdGlvbiAkYXBwbHlBc3luY0V4cHJlc3Npb24oKSB7XG4gICAgICAgICAgc2NvcGUuJGV2YWwoZXhwcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yXG4gICAgICAgKiBkaXNjdXNzaW9uIG9mIGV2ZW50IGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIGZvcm1hdCBpczogYGZ1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKWAuIFRoZSBgZXZlbnRgIG9iamVjdFxuICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAgICAgKlxuICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSBvbiB3aGljaCB0aGUgZXZlbnQgd2FzIGAkZW1pdGAtZWQgb3JcbiAgICAgICAqICAgICBgJGJyb2FkY2FzdGAtZWQuXG4gICAgICAgKiAgIC0gYGN1cnJlbnRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSB0aGF0IGlzIGN1cnJlbnRseSBoYW5kbGluZyB0aGUgZXZlbnQuIE9uY2UgdGhlXG4gICAgICAgKiAgICAgZXZlbnQgcHJvcGFnYXRlcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHksIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIG51bGwuXG4gICAgICAgKiAgIC0gYG5hbWVgIC0gYHtzdHJpbmd9YDogbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSBge2Z1bmN0aW9uPX1gOiBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIGZ1bmN0aW9uIHdpbGwgY2FuY2VsXG4gICAgICAgKiAgICAgZnVydGhlciBldmVudCBwcm9wYWdhdGlvbiAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuXG4gICAgICAgKiAgIC0gYHByZXZlbnREZWZhdWx0YCAtIGB7ZnVuY3Rpb259YDogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWdcbiAgICAgICAqICAgICB0byB0cnVlLlxuICAgICAgICogICAtIGBkZWZhdWx0UHJldmVudGVkYCAtIGB7Ym9vbGVhbn1gOiB0cnVlIGlmIGBwcmV2ZW50RGVmYXVsdGAgd2FzIGNhbGxlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGxpc3RlbiBvbi5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQsIC4uLmFyZ3MpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkb246IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07XG4gICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJzW25hbWVdID0gbmFtZWRMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSB7XG4gICAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKys7XG4gICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluZGV4T2ZMaXN0ZW5lciA9IG5hbWVkTGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgIGlmIChpbmRleE9mTGlzdGVuZXIgIT09IC0xKSB7XG4gICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mTGlzdGVuZXJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQoc2VsZiwgMSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGVtaXRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsXG4gICAgICAgKiByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzXG4gICAgICAgKiBjYW5jZWxzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QgKHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259KS5cbiAgICAgICAqL1xuICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gW10sXG4gICAgICAgICAgICBuYW1lZExpc3RlbmVycyxcbiAgICAgICAgICAgIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtzdG9wUHJvcGFnYXRpb24gPSB0cnVlO30sXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGksIGxlbmd0aDtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lZExpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvL2FsbG93IGFsbCBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgc2NvcGUgdG8gcnVuXG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvL2lmIGFueSBsaXN0ZW5lciBvbiB0aGUgY3VycmVudCBzY29wZSBzdG9wcyBwcm9wYWdhdGlvbiwgcHJldmVudCBidWJibGluZ1xuICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vdHJhdmVyc2UgdXB3YXJkc1xuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAoc2NvcGUpO1xuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIGRvd253YXJkcyB0byBhbGwgY2hpbGQgc2NvcGVzIChhbmQgdGhlaXIgY2hpbGRyZW4pIG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgYW5kIGNhbGxzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgY2Fubm90IGJlIGNhbmNlbGVkLlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gYnJvYWRjYXN0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn1cbiAgICAgICAqL1xuICAgICAgJGJyb2FkY2FzdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQsXG4gICAgICAgICAgICBuZXh0ID0gdGFyZ2V0LFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiB0YXJnZXQsXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0YXJnZXQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSByZXR1cm4gZXZlbnQ7XG5cbiAgICAgICAgdmFyIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbGlzdGVuZXJzLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdFxuICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSkge1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgbGlzdGVuZXJzID0gY3VycmVudC4kJGxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsXG4gICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRkaWdlc3RcbiAgICAgICAgICAvLyAodGhvdWdoIGl0IGRpZmZlcnMgZHVlIHRvIGhhdmluZyB0aGUgZXh0cmEgY2hlY2sgZm9yICQkbGlzdGVuZXJDb3VudClcbiAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fFxuICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgJHJvb3RTY29wZSA9IG5ldyBTY29wZSgpO1xuXG4gICAgLy9UaGUgaW50ZXJuYWwgcXVldWVzLiBFeHBvc2UgdGhlbSBvbiB0aGUgJHJvb3RTY29wZSBmb3IgZGVidWdnaW5nL3Rlc3RpbmcgcHVycG9zZXMuXG4gICAgdmFyIGFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXN5bmNRdWV1ZSA9IFtdO1xuICAgIHZhciBwb3N0RGlnZXN0UXVldWUgPSAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdFF1ZXVlID0gW107XG4gICAgdmFyIGFwcGx5QXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhcHBseUFzeW5jUXVldWUgPSBbXTtcblxuICAgIHZhciBwb3N0RGlnZXN0UXVldWVQb3NpdGlvbiA9IDA7XG5cbiAgICByZXR1cm4gJHJvb3RTY29wZTtcblxuXG4gICAgZnVuY3Rpb24gYmVnaW5QaGFzZShwaGFzZSkge1xuICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbnByb2cnLCAnezB9IGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAkcm9vdFNjb3BlLiQkcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBwaGFzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhclBoYXNlKCkge1xuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KGN1cnJlbnQsIGNvdW50KSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICs9IGNvdW50O1xuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KGN1cnJlbnQsIGNvdW50LCBuYW1lKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdIC09IGNvdW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB1c2VkIGFzIGFuIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzLlxuICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWUgd2UgY2FuIGVhc2lseSB0ZWxsIGl0IGFwYXJ0IGZyb20gb3RoZXIgdmFsdWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge31cblxuICAgIGZ1bmN0aW9uIGZsdXNoQXBwbHlBc3luYygpIHtcbiAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXBwbHlBc3luY1F1ZXVlLnNoaWZ0KCkoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseUFzeW5jSWQgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlQXBwbHlBc3luYygpIHtcbiAgICAgIGlmIChhcHBseUFzeW5jSWQgPT09IG51bGwpIHtcbiAgICAgICAgYXBwbHlBc3luY0lkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZmx1c2hBcHBseUFzeW5jKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgcm9vdCBlbGVtZW50IG9mIEFuZ3VsYXIgYXBwbGljYXRpb24uIFRoaXMgaXMgZWl0aGVyIHRoZSBlbGVtZW50IHdoZXJlIHtAbGlua1xuICogbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSB3YXMgZGVjbGFyZWQgb3IgdGhlIGVsZW1lbnQgcGFzc2VkIGludG9cbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0uIFRoZSBlbGVtZW50IHJlcHJlc2VudHMgdGhlIHJvb3QgZWxlbWVudCBvZiBhcHBsaWNhdGlvbi4gSXQgaXMgYWxzbyB0aGVcbiAqIGxvY2F0aW9uIHdoZXJlIHRoZSBhcHBsaWNhdGlvbidzIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IHNlcnZpY2UgZ2V0c1xuICogcHVibGlzaGVkLCBhbmQgY2FuIGJlIHJldHJpZXZlZCB1c2luZyBgJHJvb3RFbGVtZW50LmluamVjdG9yKClgLlxuICovXG5cblxuLy8gdGhlIGltcGxlbWVudGF0aW9uIGlzIGluIGFuZ3VsYXIuYm9vdHN0cmFwXG5cbi8qKlxuICogQHRoaXNcbiAqIEBkZXNjcmlwdGlvblxuICogUHJpdmF0ZSBzZXJ2aWNlIHRvIHNhbml0aXplIHVyaXMgZm9yIGxpbmtzIGFuZCBpbWFnZXMuIFVzZWQgYnkgJGNvbXBpbGUgYW5kICRzYW5pdGl6ZS5cbiAqL1xuZnVuY3Rpb24gJCRTYW5pdGl6ZVVyaVByb3ZpZGVyKCkge1xuICB2YXIgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooaHR0cHM/fGZ0cHxtYWlsdG98dGVsfGZpbGUpOi8sXG4gICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKChodHRwcz98ZnRwfGZpbGV8YmxvYik6fGRhdGE6aW1hZ2VcXC8pLztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgYVtocmVmXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpIHtcbiAgICAgIHZhciByZWdleCA9IGlzSW1hZ2UgPyBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgOiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgICAgIHZhciBub3JtYWxpemVkVmFsO1xuICAgICAgbm9ybWFsaXplZFZhbCA9IHVybFJlc29sdmUodXJpKS5ocmVmO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRWYWwgIT09ICcnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICByZXR1cm4gJ3Vuc2FmZTonICsgbm9ybWFsaXplZFZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxuLyogZXhwb3J0ZWQgJFNjZVByb3ZpZGVyLCAkU2NlRGVsZWdhdGVQcm92aWRlciAqL1xuXG52YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xuXG52YXIgU0NFX0NPTlRFWFRTID0ge1xuICAvLyBIVE1MIGlzIHVzZWQgd2hlbiB0aGVyZSdzIEhUTUwgcmVuZGVyZWQgKGUuZy4gbmctYmluZC1odG1sLCBpZnJhbWUgc3JjZG9jIGJpbmRpbmcpLlxuICBIVE1MOiAnaHRtbCcsXG5cbiAgLy8gU3R5bGUgc3RhdGVtZW50cyBvciBzdHlsZXNoZWV0cy4gQ3VycmVudGx5IHVudXNlZCBpbiBBbmd1bGFySlMuXG4gIENTUzogJ2NzcycsXG5cbiAgLy8gQW4gVVJMIHVzZWQgaW4gYSBjb250ZXh0IHdoZXJlIGl0IGRvZXMgbm90IHJlZmVyIHRvIGEgcmVzb3VyY2UgdGhhdCBsb2FkcyBjb2RlLiBDdXJyZW50bHlcbiAgLy8gdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgVVJMOiAndXJsJyxcblxuICAvLyBSRVNPVVJDRV9VUkwgaXMgYSBzdWJ0eXBlIG9mIFVSTCB1c2VkIHdoZXJlIHRoZSByZWZlcnJlZC10byByZXNvdXJjZSBjb3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICAvLyBjb2RlLiAoZS5nLiBuZy1pbmNsdWRlLCBzY3JpcHQgc3JjIGJpbmRpbmcsIHRlbXBsYXRlVXJsKVxuICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsXG5cbiAgLy8gU2NyaXB0LiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgSlM6ICdqcydcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9sbG93LlxuXG52YXIgVU5ERVJTQ09SRV9MT1dFUkNBU0VfUkVHRVhQID0gL18oW2Etel0pL2c7XG5cbmZ1bmN0aW9uIHNuYWtlVG9DYW1lbChuYW1lKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnJlcGxhY2UoVU5ERVJTQ09SRV9MT1dFUkNBU0VfUkVHRVhQLCBmbkNhbWVsQ2FzZVJlcGxhY2UpO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RNYXRjaGVyKG1hdGNoZXIpIHtcbiAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykge1xuICAgIHJldHVybiBtYXRjaGVyO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKG1hdGNoZXIpKSB7XG4gICAgLy8gU3RyaW5ncyBtYXRjaCBleGFjdGx5IGV4Y2VwdCBmb3IgMiB3aWxkY2FyZHMgLSAnKicgYW5kICcqKicuXG4gICAgLy8gJyonIG1hdGNoZXMgYW55IGNoYXJhY3RlciBleGNlcHQgdGhvc2UgZnJvbSB0aGUgc2V0ICc6Ly4/JicuXG4gICAgLy8gJyoqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgKGxpa2UgLiogaW4gYSBSZWdFeHApLlxuICAgIC8vIE1vcmUgdGhhbiAyIConcyByYWlzZXMgYW4gZXJyb3IgYXMgaXQncyBpbGwgZGVmaW5lZC5cbiAgICBpZiAobWF0Y2hlci5pbmRleE9mKCcqKionKSA+IC0xKSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpd2NhcmQnLFxuICAgICAgICAgICdJbGxlZ2FsIHNlcXVlbmNlICoqKiBpbiBzdHJpbmcgbWF0Y2hlci4gIFN0cmluZzogezB9JywgbWF0Y2hlcik7XG4gICAgfVxuICAgIG1hdGNoZXIgPSBlc2NhcGVGb3JSZWdleHAobWF0Y2hlcikuXG4gICAgICAgICAgICAgICAgICByZXBsYWNlKC9cXFxcXFwqXFxcXFxcKi9nLCAnLionKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoL1xcXFxcXCovZywgJ1teOi8uPyY7XSonKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyICsgJyQnKTtcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkge1xuICAgIC8vIFRoZSBvbmx5IG90aGVyIHR5cGUgb2YgbWF0Y2hlciBhbGxvd2VkIGlzIGEgUmVnZXhwLlxuICAgIC8vIE1hdGNoIGVudGlyZSBVUkwgLyBkaXNhbGxvdyBwYXJ0aWFsIG1hdGNoZXMuXG4gICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlci5zb3VyY2UgKyAnJCcpO1xuICB9IGVsc2Uge1xuICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJyxcbiAgICAgICAgJ01hdGNoZXJzIG1heSBvbmx5IGJlIFwic2VsZlwiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXJzKG1hdGNoZXJzKSB7XG4gIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107XG4gIGlmIChpc0RlZmluZWQobWF0Y2hlcnMpKSB7XG4gICAgZm9yRWFjaChtYXRjaGVycywgZnVuY3Rpb24obWF0Y2hlcikge1xuICAgICAgYWRqdXN0ZWRNYXRjaGVycy5wdXNoKGFkanVzdE1hdGNoZXIobWF0Y2hlcikpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBhZGp1c3RlZE1hdGNoZXJzO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VEZWxlZ2F0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZURlbGVnYXRlYCBpcyBhIHNlcnZpY2UgdGhhdCBpcyB1c2VkIGJ5IHRoZSBgJHNjZWAgc2VydmljZSB0byBwcm92aWRlIHtAbGluayBuZy4kc2NlIFN0cmljdFxuICogQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0gc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqIEZvciBhbiBvdmVydmlldyBvZiB0aGlzIHNlcnZpY2UgYW5kIHRoZSBmdW5jdGlvbm5hbGl0eSBpdCBwcm92aWRlcyBpbiBBbmd1bGFySlMsIHNlZSB0aGUgbWFpblxuICogcGFnZSBmb3Ige0BsaW5rIG5nLiRzY2UgU0NFfS4gVGhlIGN1cnJlbnQgcGFnZSBpcyB0YXJnZXRlZCBmb3IgZGV2ZWxvcGVycyB3aG8gbmVlZCB0byBhbHRlciBob3dcbiAqIFNDRSB3b3JrcyBpbiB0aGVpciBhcHBsaWNhdGlvbiwgd2hpY2ggc2hvdWxkbid0IGJlIG5lZWRlZCBpbiBtb3N0IGNhc2VzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIEFuZ3VsYXJKUyBzdHJvbmdseSByZWxpZXMgb24gY29udGV4dHVhbCBlc2NhcGluZyBmb3IgdGhlIHNlY3VyaXR5IG9mIGJpbmRpbmdzOiBkaXNhYmxpbmcgb3JcbiAqIG1vZGlmeWluZyB0aGlzIG1pZ2h0IGNhdXNlIGNyb3NzIHNpdGUgc2NyaXB0aW5nIChYU1MpIHZ1bG5lcmFiaWxpdGllcy4gRm9yIGxpYnJhcmllcyBvd25lcnMsXG4gKiBjaGFuZ2VzIHRvIHRoaXMgc2VydmljZSB3aWxsIGFsc28gaW5mbHVlbmNlIHVzZXJzLCBzbyBiZSBleHRyYSBjYXJlZnVsIGFuZCBkb2N1bWVudCB5b3VyIGNoYW5nZXMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUeXBpY2FsbHksIHlvdSB3b3VsZCBjb25maWd1cmUgb3Igb3ZlcnJpZGUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBpbnN0ZWFkIG9mXG4gKiB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gY3VzdG9taXplIHRoZSB3YXkgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgd29ya3MgaW4gQW5ndWxhckpTLiAgVGhpcyBpc1xuICogYmVjYXVzZSwgd2hpbGUgdGhlIGAkc2NlYCBwcm92aWRlcyBudW1lcm91cyBzaG9ydGhhbmQgbWV0aG9kcywgZXRjLiwgeW91IHJlYWxseSBvbmx5IG5lZWQgdG9cbiAqIG92ZXJyaWRlIDMgY29yZSBmdW5jdGlvbnMgKGB0cnVzdEFzYCwgYGdldFRydXN0ZWRgIGFuZCBgdmFsdWVPZmApIHRvIHJlcGxhY2UgdGhlIHdheSB0aGluZ3NcbiAqIHdvcmsgYmVjYXVzZSBgJHNjZWAgZGVsZWdhdGVzIHRvIGAkc2NlRGVsZWdhdGVgIGZvciB0aGVzZSBvcGVyYXRpb25zLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gdG8gY29uZmlndXJlIHRoaXMgc2VydmljZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbnN0YW5jZSBvZiBgJHNjZURlbGVnYXRlYCBzaG91bGQgd29yayBvdXQgb2YgdGhlIGJveCB3aXRoIGxpdHRsZSBwYWluLiAgV2hpbGUgeW91XG4gKiBjYW4gb3ZlcnJpZGUgaXQgY29tcGxldGVseSB0byBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGAkc2NlYCwgdGhlIGNvbW1vbiBjYXNlIHdvdWxkXG4gKiBpbnZvbHZlIGNvbmZpZ3VyaW5nIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGluc3RlYWQgYnkgc2V0dGluZ1xuICogeW91ciBvd24gd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyBmb3IgdHJ1c3RpbmcgVVJMcyB1c2VkIGZvciBsb2FkaW5nIEFuZ3VsYXJKUyByZXNvdXJjZXMgc3VjaCBhc1xuICogdGVtcGxhdGVzLiAgUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gKiAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVxuICogJHNjZURlbGVnYXRlIHNlcnZpY2V9LCB1c2VkIGFzIGEgZGVsZWdhdGUgZm9yIHtAbGluayBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBUaGUgYCRzY2VEZWxlZ2F0ZVByb3ZpZGVyYCBhbGxvd3Mgb25lIHRvIGdldC9zZXQgdGhlIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgdXNlZCB0byBlbnN1cmVcbiAqIHRoYXQgdGhlIFVSTHMgdXNlZCBmb3Igc291cmNpbmcgQW5ndWxhckpTIHRlbXBsYXRlcyBhbmQgb3RoZXIgc2NyaXB0LXJ1bm5pbmcgVVJMcyBhcmUgc2FmZSAoYWxsXG4gKiBwbGFjZXMgdGhhdCB1c2UgdGhlIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCkuIFNlZVxuICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fVxuICogYW5kXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9LFxuICpcbiAqIEZvciB0aGUgZ2VuZXJhbCBkZXRhaWxzIGFib3V0IHRoaXMgc2VydmljZSBpbiBBbmd1bGFyLCByZWFkIHRoZSBtYWluIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogKipFeGFtcGxlKio6ICBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuIDxhIG5hbWU9XCJleGFtcGxlXCI+PC9hPlxuICpcbiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2BcbiAqIC0gYnV0IHNvbWUgb2YgeW91ciB0ZW1wbGF0ZXMgYXJlIGhvc3RlZCBvbiBvdGhlciBkb21haW5zIHlvdSBjb250cm9sIHN1Y2ggYXNcbiAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCwgYGh0dHA6Ly9zcnYwMi5hc3NldHMuZXhhbXBsZS5jb20vYCwgZXRjLlxuICogLSBhbmQgeW91IGhhdmUgYW4gb3BlbiByZWRpcmVjdCBhdCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydT8uLi5gLlxuICpcbiAqIEhlcmUgaXMgd2hhdCBhIHNlY3VyZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIHNjZW5hcmlvIG1pZ2h0IGxvb2sgbGlrZTpcbiAqXG4gKiBgYGBcbiAqICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdChbXG4gKiAgICAgIC8vIEFsbG93IHNhbWUgb3JpZ2luIHJlc291cmNlIGxvYWRzLlxuICogICAgICAnc2VsZicsXG4gKiAgICAgIC8vIEFsbG93IGxvYWRpbmcgZnJvbSBvdXIgYXNzZXRzIGRvbWFpbi4gIE5vdGljZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuICogYW5kICoqLlxuICogICAgICAnaHR0cDovL3NydiouYXNzZXRzLmV4YW1wbGUuY29tLyoqJ1xuICogICAgXSk7XG4gKlxuICogICAgLy8gVGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCBzbyB0aGUgb3BlbiByZWRpcmVjdCBoZXJlIGlzIGJsb2NrZWQuXG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbXG4gKiAgICAgICdodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1KionXG4gKiAgICBdKTtcbiAqICB9KTtcbiAqIGBgYFxuICogTm90ZSB0aGF0IGFuIGVtcHR5IHdoaXRlbGlzdCB3aWxsIGJsb2NrIGV2ZXJ5IHJlc291cmNlIFVSTCBmcm9tIGJlaW5nIGxvYWRlZCwgYW5kIHdpbGwgcmVxdWlyZVxuICogeW91IHRvIG1hbnVhbGx5IG1hcmsgZWFjaCBvbmUgYXMgdHJ1c3RlZCB3aXRoIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybGAuIEhvd2V2ZXIsIHRlbXBsYXRlc1xuICogcmVxdWVzdGVkIGJ5IHtAbGluayBuZy4kdGVtcGxhdGVSZXF1ZXN0ICR0ZW1wbGF0ZVJlcXVlc3R9IHRoYXQgYXJlIHByZXNlbnQgaW5cbiAqIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSAkdGVtcGxhdGVDYWNoZX0gd2lsbCBub3QgZ28gdGhyb3VnaCB0aGlzIGNoZWNrLiBJZiB5b3UgaGF2ZSBhIG1lY2hhbmlzbVxuICogdG8gcG9wdWxhdGUgeW91ciB0ZW1wbGF0ZXMgaW4gdGhhdCBjYWNoZSBhdCBjb25maWcgdGltZSwgdGhlbiBpdCBpcyBhIGdvb2QgaWRlYSB0byByZW1vdmUgJ3NlbGYnXG4gKiBmcm9tIHRoYXQgd2hpdGVsaXN0LiBUaGlzIGhlbHBzIHRvIG1pdGlnYXRlIHRoZSBzZWN1cml0eSBpbXBhY3Qgb2YgY2VydGFpbiB0eXBlcyBvZiBpc3N1ZXMsIGxpa2VcbiAqIGZvciBpbnN0YW5jZSBhdHRhY2tlci1jb250cm9sbGVkIGBuZy1pbmNsdWRlc2AuXG4gKi9cblxuZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7XG4gIHRoaXMuU0NFX0NPTlRFWFRTID0gU0NFX0NPTlRFWFRTO1xuXG4gIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXG4gIHZhciByZXNvdXJjZVVybFdoaXRlbGlzdCA9IFsnc2VsZiddLFxuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gd2hpdGVsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybFdoaXRlbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgd2hpdGVsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIGBbJ3NlbGYnXWAgYWxsb3dpbmcgb25seVxuICAgKiBzYW1lIG9yaWdpbiByZXNvdXJjZSByZXF1ZXN0cy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIHRoZSBkZWZhdWx0IHdoaXRlbGlzdCBvZiAnc2VsZicgaXMgbm90IHJlY29tbWVuZGVkIGlmIHlvdXIgYXBwIHNoYXJlcyBpdHMgb3JpZ2luXG4gICAqIHdpdGggb3RoZXIgYXBwcyEgSXQgaXMgYSBnb29kIGlkZWEgdG8gbGltaXQgaXQgdG8gb25seSB5b3VyIGFwcGxpY2F0aW9uJ3MgZGlyZWN0b3J5LlxuICAgKiA8L2Rpdj5cbiAgICovXG4gIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybFdoaXRlbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSBibGFja2xpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsQmxhY2tsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuPC9wPjxwPlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS48L3A+PHA+XG4gICAqICAgICBUaGUgdHlwaWNhbCB1c2FnZSBmb3IgdGhlIGJsYWNrbGlzdCBpcyB0byAqKmJsb2NrXG4gICAqICAgICBbb3BlbiByZWRpcmVjdHNdKGh0dHA6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNjAxLmh0bWwpKiogc2VydmVkIGJ5IHlvdXIgZG9tYWluIGFzXG4gICAqICAgICB0aGVzZSB3b3VsZCBvdGhlcndpc2UgYmUgdHJ1c3RlZCBidXQgYWN0dWFsbHkgcmV0dXJuIGNvbnRlbnQgZnJvbSB0aGUgcmVkaXJlY3RlZCBkb21haW4uXG4gICAqICAgICA8L3A+PHA+XG4gICAqICAgICBGaW5hbGx5LCAqKnRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3QqKiBhbmQgaGFzIHRoZSBmaW5hbCBzYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY3VycmVudGx5IHNldCBibGFja2xpc3QgYXJyYXkuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqXG4gICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyB0aGUgZW1wdHkgYXJyYXkgKGkuZS4gdGhlcmVcbiAgICogaXMgbm8gYmxhY2tsaXN0LilcbiAgICovXG5cbiAgdGhpcy5yZXNvdXJjZVVybEJsYWNrbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxCbGFja2xpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcblxuICAgIHZhciBodG1sU2FuaXRpemVyID0gZnVuY3Rpb24gaHRtbFNhbml0aXplcihodG1sKSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH07XG5cbiAgICBpZiAoJGluamVjdG9yLmhhcygnJHNhbml0aXplJykpIHtcbiAgICAgIGh0bWxTYW5pdGl6ZXIgPSAkaW5qZWN0b3IuZ2V0KCckc2FuaXRpemUnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1hdGNoVXJsKG1hdGNoZXIsIHBhcnNlZFVybCkge1xuICAgICAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykge1xuICAgICAgICByZXR1cm4gdXJsSXNTYW1lT3JpZ2luKHBhcnNlZFVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZpbml0ZWx5IGEgcmVnZXguICBTZWUgYWRqdXN0TWF0Y2hlcnMoKVxuICAgICAgICByZXR1cm4gISFtYXRjaGVyLmV4ZWMocGFyc2VkVXJsLmhyZWYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kodXJsKSB7XG4gICAgICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZSh1cmwudG9TdHJpbmcoKSk7XG4gICAgICB2YXIgaSwgbiwgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gZnJvbSB0aGUgd2hpdGVsaXN0IGFsbG93cyB0aGlzIHVybC5cbiAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybFdoaXRlbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsV2hpdGVsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgYWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbGxvd2VkKSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IG5vIGl0ZW0gZnJvbSB0aGUgYmxhY2tsaXN0IGJsb2NrZWQgdGhpcyB1cmwuXG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybEJsYWNrbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxCbGFja2xpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbG93ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVIb2xkZXJUeXBlKEJhc2UpIHtcbiAgICAgIHZhciBob2xkZXJUeXBlID0gZnVuY3Rpb24gVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWUpIHtcbiAgICAgICAgdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgaWYgKEJhc2UpIHtcbiAgICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUgPSBuZXcgQmFzZSgpO1xuICAgICAgfVxuICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uIHNjZVZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICB9O1xuICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBzY2VUb1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKS50b1N0cmluZygpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBob2xkZXJUeXBlO1xuICAgIH1cblxuICAgIHZhciB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlID0gZ2VuZXJhdGVIb2xkZXJUeXBlKCksXG4gICAgICAgIGJ5VHlwZSA9IHt9O1xuXG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5IVE1MXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkNTU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSlNdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZShieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0pO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGEgdHJ1c3RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcGFyYW1ldGVyIGZvciB0aGUgc3BlY2lmaWVkIGNvbnRleHQuIFRoaXMgdHJ1c3RlZFxuICAgICAqIG9iamVjdCB3aWxsIGxhdGVyIG9uIGJlIHVzZWQgYXMtaXMsIHdpdGhvdXQgYW55IHNlY3VyaXR5IGNoZWNrLCBieSBiaW5kaW5ncyBvciBkaXJlY3RpdmVzXG4gICAgICogdGhhdCByZXF1aXJlIHRoaXMgc2VjdXJpdHkgY29udGV4dC5cbiAgICAgKiBGb3IgaW5zdGFuY2UsIG1hcmtpbmcgYSBzdHJpbmcgYXMgdHJ1c3RlZCBmb3IgdGhlIGAkc2NlLkhUTUxgIGNvbnRleHQgd2lsbCBlbnRpcmVseSBieXBhc3NcbiAgICAgKiB0aGUgcG90ZW50aWFsIGAkc2FuaXRpemVgIGNhbGwgaW4gY29ycmVzcG9uZGluZyBgJHNjZS5IVE1MYCBiaW5kaW5ncyBvciBkaXJlY3RpdmVzLCBzdWNoIGFzXG4gICAgICogYG5nLWJpbmQtaHRtbGAuIE5vdGUgdGhhdCBpbiBtb3N0IGNhc2VzIHlvdSB3b24ndCBuZWVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbjogaWYgeW91IGhhdmUgdGhlXG4gICAgICogc2FuaXRpemVyIGxvYWRlZCwgcGFzc2luZyB0aGUgdmFsdWUgaXRzZWxmIHdpbGwgcmVuZGVyIGFsbCB0aGUgSFRNTCB0aGF0IGRvZXMgbm90IHBvc2UgYVxuICAgICAqIHNlY3VyaXR5IHJpc2suXG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGdldFRydXN0ZWR9IGZvciB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGNvbnN1bWUgdGhvc2VcbiAgICAgKiB0cnVzdGVkIHZhbHVlcywgYW5kIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBnZW5lcmFsIGRvY3VtZW50YXRpb24gYWJvdXQgc3RyaWN0IGNvbnRleHR1YWxcbiAgICAgKiBlc2NhcGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLCBlLmcuIGAkc2NlLlVSTGAsXG4gICAgICogICAgIGAkc2NlLlJFU09VUkNFX1VSTGAsIGAkc2NlLkhUTUxgLCBgJHNjZS5KU2Agb3IgYCRzY2UuQ1NTYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHRydXN0ZWQgcmVwcmVzZW50YXRpb24gb2YgdmFsdWUsIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIGdpdmVuIGNvbnRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1c3RBcyh0eXBlLCB0cnVzdGVkVmFsdWUpIHtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTtcbiAgICAgIGlmICghQ29uc3RydWN0b3IpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaWNvbnRleHQnLFxuICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIHZhbHVlIGluIGludmFsaWQgY29udGV4dC4gQ29udGV4dDogezB9OyBWYWx1ZTogezF9JyxcbiAgICAgICAgICAgIHR5cGUsIHRydXN0ZWRWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodHJ1c3RlZFZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHRydXN0ZWRWYWx1ZSkgfHwgdHJ1c3RlZFZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gQWxsIHRoZSBjdXJyZW50IGNvbnRleHRzIGluIFNDRV9DT05URVhUUyBoYXBwZW4gdG8gYmUgc3RyaW5ncy4gIEluIG9yZGVyIHRvIGF2b2lkIHRydXN0aW5nXG4gICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cbiAgICAgIGlmICh0eXBlb2YgdHJ1c3RlZFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpdHlwZScsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLFxuICAgICAgICAgICAgdHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN2YWx1ZU9mXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBoYWQgYmVlbiByZXR1cm5lZCBieSBhIHByaW9yIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgdGhlIHZhbHVlIHRoYXQgaGFkIGJlZW4gcGFzc2VkIHRvIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LlxuICAgICAqXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaXMgbm90IGEgdmFsdWUgdGhhdCBoYWQgYmVlbiByZXR1cm5lZCBieSB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgaXQgbXVzdCBiZSByZXR1cm5lZCBhcy1pcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfVxuICAgICAqICAgICBjYWxsIG9yIGFueXRoaW5nIGVsc2UuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIGB2YWx1ZWAgdGhhdCB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgYHZhbHVlYCBpcyB0aGUgcmVzdWx0IG9mIHN1Y2ggYSBjYWxsLiAgT3RoZXJ3aXNlLCByZXR1cm5zXG4gICAgICogICAgIGB2YWx1ZWAgdW5jaGFuZ2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YobWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSkge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGFrZXMgYW55IGlucHV0LCBhbmQgZWl0aGVyIHJldHVybnMgYSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIHNwZWNpZmllZCBjb250ZXh0LCBvclxuICAgICAqIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICpcbiAgICAgKiBJbiBwcmFjdGljZSwgdGhlcmUgYXJlIHNldmVyYWwgY2FzZXMuIFdoZW4gZ2l2ZW4gYSBzdHJpbmcsIHRoaXMgZnVuY3Rpb24gcnVucyBjaGVja3NcbiAgICAgKiBhbmQgc2FuaXRpemF0aW9uIHRvIG1ha2UgaXQgc2FmZSB3aXRob3V0IHByaW9yIGFzc3VtcHRpb25zLiBXaGVuIGdpdmVuIHRoZSByZXN1bHQgb2YgYSB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLCBpdCByZXR1cm5zIHRoZSBvcmlnaW5hbGx5IHN1cHBsaWVkXG4gICAgICogdmFsdWUgaWYgdGhhdCB2YWx1ZSdzIGNvbnRleHQgaXMgdmFsaWQgZm9yIHRoaXMgY2FsbCdzIGNvbnRleHQuIEZpbmFsbHksIHRoaXMgZnVuY3Rpb24gY2FuXG4gICAgICogYWxzbyB0aHJvdyB3aGVuIHRoZXJlIGlzIG5vIHdheSB0byB0dXJuIGBtYXliZVRydXN0ZWRgIGluIGEgc2FmZSB2YWx1ZSAoZS5nLiwgbm8gc2FuaXRpemF0aW9uXG4gICAgICogaXMgYXZhaWxhYmxlIG9yIHBvc3NpYmxlLilcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZCAoc3VjaCBhcyBgJHNjZS5IVE1MYCkuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLCBvciBhbnl0aGluZyBlbHNlICh3aGljaCB3aWxsIG5vdCBiZSBjb25zaWRlcmVkIHRydXN0ZWQuKVxuICAgICAqIEByZXR1cm4geyp9IEEgdmVyc2lvbiBvZiB0aGUgdmFsdWUgdGhhdCdzIHNhZmUgdG8gdXNlIGluIHRoZSBnaXZlbiBjb250ZXh0LCBvciB0aHJvd3MgYW5cbiAgICAgKiAgICAgZXhjZXB0aW9uIGlmIHRoaXMgaXMgaW1wb3NzaWJsZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkKHR5cGUsIG1heWJlVHJ1c3RlZCkge1xuICAgICAgaWYgKG1heWJlVHJ1c3RlZCA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZChtYXliZVRydXN0ZWQpIHx8IG1heWJlVHJ1c3RlZCA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgIH1cbiAgICAgIHZhciBjb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTtcbiAgICAgIC8vIElmIG1heWJlVHJ1c3RlZCBpcyBhIHRydXN0ZWQgY2xhc3MgaW5zdGFuY2Ugb3Igc3ViY2xhc3MgaW5zdGFuY2UsIHRoZW4gdW53cmFwIGFuZCByZXR1cm5cbiAgICAgIC8vIGFzLWlzLlxuICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgaWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgbWF5IGVpdGhlciBtYWtlIGl0IHNhZmUsIG9yIHRocm93IGFuIGV4Y2VwdGlvbi4gVGhpc1xuICAgICAgLy8gZGVwZW5kcyBvbiB0aGUgY29udGV4dDogc29tZSBhcmUgc2FuaXRpemF0aWJsZSAoSFRNTCksIHNvbWUgdXNlIHdoaXRlbGlzdHMgKFJFU09VUkNFX1VSTCksXG4gICAgICAvLyBzb21lIGFyZSBpbXBvc3NpYmxlIHRvIGRvIChKUykuIFRoaXMgc3RlcCBpc24ndCBpbXBsZW1lbnRlZCBmb3IgQ1NTIGFuZCBVUkwsIGFzIEFuZ3VsYXJKU1xuICAgICAgLy8gaGFzIG5vIGNvcnJlc3BvbmRpbmcgc2lua3MuXG4gICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkge1xuICAgICAgICAvLyBSRVNPVVJDRV9VUkwgdXNlcyBhIHdoaXRlbGlzdC5cbiAgICAgICAgaWYgKGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kobWF5YmVUcnVzdGVkKSkge1xuICAgICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaW5zZWN1cmwnLFxuICAgICAgICAgICAgICAnQmxvY2tlZCBsb2FkaW5nIHJlc291cmNlIGZyb20gdXJsIG5vdCBhbGxvd2VkIGJ5ICRzY2VEZWxlZ2F0ZSBwb2xpY3kuICBVUkw6IHswfScsXG4gICAgICAgICAgICAgIG1heWJlVHJ1c3RlZC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuSFRNTCkge1xuICAgICAgICAvLyBodG1sU2FuaXRpemVyIHRocm93cyBpdHMgb3duIGVycm9yIHdoZW4gbm8gc2FuaXRpemVyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgcmV0dXJuIGh0bWxTYW5pdGl6ZXIobWF5YmVUcnVzdGVkKTtcbiAgICAgIH1cbiAgICAgIC8vIERlZmF1bHQgZXJyb3Igd2hlbiB0aGUgJHNjZSBzZXJ2aWNlIGhhcyBubyB3YXkgdG8gbWFrZSB0aGUgaW5wdXQgc2FmZS5cbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdHJ1c3RBczogdHJ1c3RBcyxcbiAgICAgICAgICAgICBnZXRUcnVzdGVkOiBnZXRUcnVzdGVkLFxuICAgICAgICAgICAgIHZhbHVlT2Y6IHZhbHVlT2YgfTtcbiAgfV07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRzY2VQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgJHNjZVByb3ZpZGVyIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZS5cbiAqIC0gICBlbmFibGUvZGlzYWJsZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpbiBhIG1vZHVsZVxuICogLSAgIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHdpdGggYSBjdXN0b20gZGVsZWdhdGVcbiAqXG4gKiBSZWFkIG1vcmUgYWJvdXQge0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRzY2VgIGlzIGEgc2VydmljZSB0aGF0IHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cbiAqXG4gKiAjIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nXG4gKlxuICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaXMgYSBtb2RlIGluIHdoaWNoIEFuZ3VsYXJKUyBjb25zdHJhaW5zIGJpbmRpbmdzIHRvIG9ubHkgcmVuZGVyXG4gKiB0cnVzdGVkIHZhbHVlcy4gSXRzIGdvYWwgaXMgdG8gYXNzaXN0IGluIHdyaXRpbmcgY29kZSBpbiBhIHdheSB0aGF0IChhKSBpcyBzZWN1cmUgYnkgZGVmYXVsdCwgYW5kXG4gKiAoYikgbWFrZXMgYXVkaXRpbmcgZm9yIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci5cbiAqXG4gKiAjIyBPdmVydmlld1xuICpcbiAqIFRvIHN5c3RlbWF0aWNhbGx5IGJsb2NrIFhTUyBzZWN1cml0eSBidWdzLCBBbmd1bGFySlMgdHJlYXRzIGFsbCB2YWx1ZXMgYXMgdW50cnVzdGVkIGJ5IGRlZmF1bHQgaW5cbiAqIEhUTUwgb3Igc2Vuc2l0aXZlIFVSTCBiaW5kaW5ncy4gV2hlbiBiaW5kaW5nIHVudHJ1c3RlZCB2YWx1ZXMsIEFuZ3VsYXJKUyB3aWxsIGF1dG9tYXRpY2FsbHlcbiAqIHJ1biBzZWN1cml0eSBjaGVja3Mgb24gdGhlbSAoc2FuaXRpemF0aW9ucywgd2hpdGVsaXN0cywgZGVwZW5kaW5nIG9uIGNvbnRleHQpLCBvciB0aHJvdyB3aGVuIGl0XG4gKiBjYW5ub3QgZ3VhcmFudGVlIHRoZSBzZWN1cml0eSBvZiB0aGUgcmVzdWx0LiBUaGF0IGJlaGF2aW9yIGRlcGVuZHMgc3Ryb25nbHkgb24gY29udGV4dHM6IEhUTUxcbiAqIGNhbiBiZSBzYW5pdGl6ZWQsIGJ1dCB0ZW1wbGF0ZSBVUkxzIGNhbm5vdCwgZm9yIGluc3RhbmNlLlxuICpcbiAqIFRvIGlsbHVzdHJhdGUgdGhpcywgY29uc2lkZXIgdGhlIGBuZy1iaW5kLWh0bWxgIGRpcmVjdGl2ZS4gSXQgcmVuZGVycyBpdHMgdmFsdWUgZGlyZWN0bHkgYXMgSFRNTDpcbiAqIHdlIGNhbGwgdGhhdCB0aGUgKmNvbnRleHQqLiBXaGVuIGdpdmVuIGFuIHVudHJ1c3RlZCBpbnB1dCwgQW5ndWxhckpTIHdpbGwgYXR0ZW1wdCB0byBzYW5pdGl6ZSBpdFxuICogYmVmb3JlIHJlbmRlcmluZyBpZiBhIHNhbml0aXplciBpcyBhdmFpbGFibGUsIGFuZCB0aHJvdyBvdGhlcndpc2UuIFRvIGJ5cGFzcyBzYW5pdGl6YXRpb24gYW5kXG4gKiByZW5kZXIgdGhlIGlucHV0IGFzLWlzLCB5b3Ugd2lsbCBuZWVkIHRvIG1hcmsgaXQgYXMgdHJ1c3RlZCBmb3IgdGhhdCBjb250ZXh0IGJlZm9yZSBhdHRlbXB0aW5nXG4gKiB0byBiaW5kIGl0LlxuICpcbiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFySlMgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqICMjIEluIHByYWN0aWNlXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgb2YgYSBiaW5kaW5nIGluIGEgcHJpdmlsZWdlZCBjb250ZXh0OlxuICpcbiAqIGBgYFxuICogPGlucHV0IG5nLW1vZGVsPVwidXNlckh0bWxcIiBhcmlhLWxhYmVsPVwiVXNlciBpbnB1dFwiPlxuICogPGRpdiBuZy1iaW5kLWh0bWw9XCJ1c2VySHRtbFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgYG5nLWJpbmQtaHRtbGAgaXMgYm91bmQgdG8gYHVzZXJIdG1sYCBjb250cm9sbGVkIGJ5IHRoZSB1c2VyLiAgV2l0aCBTQ0VcbiAqIGRpc2FibGVkLCB0aGlzIGFwcGxpY2F0aW9uIGFsbG93cyB0aGUgdXNlciB0byByZW5kZXIgYXJiaXRyYXJ5IEhUTUwgaW50byB0aGUgRElWLCB3aGljaCB3b3VsZFxuICogYmUgYW4gWFNTIHNlY3VyaXR5IGJ1Zy4gSW4gYSBtb3JlIHJlYWxpc3RpYyBleGFtcGxlLCBvbmUgbWF5IGJlIHJlbmRlcmluZyB1c2VyIGNvbW1lbnRzLCBibG9nXG4gKiBhcnRpY2xlcywgZXRjLiB2aWEgYmluZGluZ3MuIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyXG4gKiBjb250cm9sbGVkIGlucHV0IGNyZWF0ZXMgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAqXG4gKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSxcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0XG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWVcbiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/XG4gKlxuICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIEFuZ3VsYXJKUyBtYWtlcyBzdXJlIGJpbmRpbmdzIGdvIHRocm91Z2ggdGhhdCBzYW5pdGl6YXRpb24sIG9yXG4gKiBhbnkgc2ltaWxhciB2YWxpZGF0aW9uIHByb2Nlc3MsIHVubGVzcyB0aGVyZSdzIGEgZ29vZCByZWFzb24gdG8gdHJ1c3QgdGhlIGdpdmVuIHZhbHVlIGluIHRoaXNcbiAqIGNvbnRleHQuICBUaGF0IHRydXN0IGlzIGZvcm1hbGl6ZWQgd2l0aCBhIGZ1bmN0aW9uIGNhbGwuIFRoaXMgbWVhbnMgdGhhdCBhcyBhIGRldmVsb3BlciwgeW91XG4gKiBjYW4gYXNzdW1lIGFsbCB1bnRydXN0ZWQgYmluZGluZ3MgYXJlIHNhZmUuIFRoZW4sIHRvIGF1ZGl0IHlvdXIgY29kZSBmb3IgYmluZGluZyBzZWN1cml0eSBpc3N1ZXMsXG4gKiB5b3UganVzdCBuZWVkIHRvIGVuc3VyZSB0aGUgdmFsdWVzIHlvdSBtYXJrIGFzIHRydXN0ZWQgaW5kZWVkIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmVcbiAqIHJlY2VpdmVkIGZyb20geW91ciBzZXJ2ZXIsIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gWW91IGNhbiBvcmdhbml6ZSB5b3VyIGNvZGViYXNlIHRvXG4gKiBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHMgYWxsb3dpbmcgb25seSB0aGUgZmlsZXMgaW4gYSBzcGVjaWZpYyBkaXJlY3RvcnkgdG8gZG8gdGhpcy5cbiAqIEVuc3VyaW5nIHRoYXQgdGhlIGludGVybmFsIEFQSSBleHBvc2VkIGJ5IHRoYXQgY29kZSBkb2Vzbid0IG1hcmt1cCBhcmJpdHJhcnkgdmFsdWVzIGFzIHNhZmUgdGhlblxuICogYmVjb21lcyBhIG1vcmUgbWFuYWdlYWJsZSB0YXNrLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIEFuZ3VsYXJKUycgU0NFIHNlcnZpY2UsIG9uZSB1c2VzIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfVxuICogKGFuZCBzaG9ydGhhbmQgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0b1xuICogYnVpbGQgdGhlIHRydXN0ZWQgdmVyc2lvbnMgb2YgeW91ciB2YWx1ZXMuXG4gKlxuICogIyMgSG93IGRvZXMgaXQgd29yaz9cbiAqXG4gKiBJbiBwcml2aWxlZ2VkIGNvbnRleHRzLCBkaXJlY3RpdmVzIGFuZCBjb2RlIHdpbGwgYmluZCB0byB0aGUgcmVzdWx0IG9mIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRcbiAqICRzY2UuZ2V0VHJ1c3RlZChjb250ZXh0LCB2YWx1ZSl9IHJhdGhlciB0aGFuIHRvIHRoZSB2YWx1ZSBkaXJlY3RseS4gIFRoaW5rIG9mIHRoaXMgZnVuY3Rpb24gYXNcbiAqIGEgd2F5IHRvIGVuZm9yY2UgdGhlIHJlcXVpcmVkIHNlY3VyaXR5IGNvbnRleHQgaW4geW91ciBkYXRhIHNpbmsuIERpcmVjdGl2ZXMgdXNlIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzICRzY2UucGFyc2VBc30gcmF0aGVyIHRoYW4gYCRwYXJzZWAgdG8gd2F0Y2ggYXR0cmlidXRlIGJpbmRpbmdzLCB3aGljaCBwZXJmb3Jtc1xuICogdGhlIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfSBiZWhpbmQgdGhlIHNjZW5lcyBvbiBub24tY29uc3RhbnQgbGl0ZXJhbHMuIEFsc28sXG4gKiB3aGVuIGJpbmRpbmcgd2l0aG91dCBkaXJlY3RpdmVzLCBBbmd1bGFySlMgd2lsbCB1bmRlcnN0YW5kIHRoZSBjb250ZXh0IG9mIHlvdXIgYmluZGluZ3NcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQXMgYW4gZXhhbXBsZSwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sIG5nQmluZEh0bWx9IHVzZXMge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXNIdG1sICRzY2UucGFyc2VBc0h0bWwoYmluZGluZyBleHByZXNzaW9uKX0uICBIZXJlJ3MgdGhlIGFjdHVhbCBjb2RlIChzbGlnaHRseVxuICogc2ltcGxpZmllZCk6XG4gKlxuICogYGBgXG4gKiB2YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAqICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gKiAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc0h0bWwoYXR0ci5uZ0JpbmRIdG1sKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7XG4gKiAgICAgfSk7XG4gKiAgIH07XG4gKiB9XTtcbiAqIGBgYFxuICpcbiAqICMjIEltcGFjdCBvbiBsb2FkaW5nIHRlbXBsYXRlc1xuICpcbiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzXG4gKiBgdGVtcGxhdGVVcmxgJ3Mgc3BlY2lmaWVkIGJ5IHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gKlxuICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uXG4gKiBkb2N1bWVudC4gIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIHRoZSB0ZW1wbGF0ZSBVUkwuICBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgYW5kL29yXG4gKiBwcm90b2NvbHMsIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RcbiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS5cbiAqXG4gKiAqUGxlYXNlIG5vdGUqOlxuICogVGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHlcbiAqIGxvYWRlZC4gIFRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRoZSByaWdodCBDT1JTIHBvbGljeSwgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBhIGRpZmZlcmVudCBkb21haW5cbiAqIHdvbid0IHdvcmsgb24gYWxsIGJyb3dzZXJzLiAgQWxzbywgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBgZmlsZTovL2AgVVJMIGRvZXMgbm90IHdvcmsgb24gc29tZVxuICogYnJvd3NlcnMuXG4gKlxuICogIyMgVGhpcyBmZWVscyBsaWtlIHRvbyBtdWNoIG92ZXJoZWFkXG4gKlxuICogSXQncyBpbXBvcnRhbnQgdG8gcmVtZW1iZXIgdGhhdCBTQ0Ugb25seSBhcHBsaWVzIHRvIGludGVycG9sYXRpb24gZXhwcmVzc2lvbnMuXG4gKlxuICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0b1xuICogY2FsbCBgJHNjZS50cnVzdEFzYCBvbiB0aGVtIChlLmcuXG4gKiBgPGRpdiBuZy1iaW5kLWh0bWw9XCInPGI+aW1wbGljaXRseSB0cnVzdGVkPC9iPidcIj48L2Rpdj5gKSBqdXN0IHdvcmtzLiBUaGUgYCRzY2VEZWxlZ2F0ZWAgd2lsbFxuICogYWxzbyB1c2UgdGhlIGAkc2FuaXRpemVgIHNlcnZpY2UgaWYgaXQgaXMgYXZhaWxhYmxlIHdoZW4gYmluZGluZyB1bnRydXN0ZWQgdmFsdWVzIHRvXG4gKiBgJHNjZS5IVE1MYCBjb250ZXh0LiBBbmd1bGFySlMgcHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gaW4gYGFuZ3VsYXItc2FuaXRpemUuanNgLCBhbmQgaWYgeW91XG4gKiB3aXNoIHRvIHVzZSBpdCwgeW91IHdpbGwgYWxzbyBuZWVkIHRvIGRlcGVuZCBvbiB0aGUge0BsaW5rIG5nU2FuaXRpemUgYG5nU2FuaXRpemVgfSBtb2R1bGUgaW5cbiAqIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogVGhlIGluY2x1ZGVkIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBjb21lcyB3aXRoIHNhbmUgZGVmYXVsdHMgdG8gYWxsb3cgeW91IHRvIGxvYWRcbiAqIHRlbXBsYXRlcyBpbiBgbmctaW5jbHVkZWAgZnJvbSB5b3VyIGFwcGxpY2F0aW9uJ3MgZG9tYWluIHdpdGhvdXQgaGF2aW5nIHRvIGV2ZW4ga25vdyBhYm91dCBTQ0UuXG4gKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzXG4gKiBzZXJ2ZWQgZG9jdW1lbnQuICBZb3UgY2FuIGNoYW5nZSB0aGVzZSBieSBzZXR0aW5nIHlvdXIgb3duIGN1c3RvbSB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdHN9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuXG4gKlxuICogVGhpcyBzaWduaWZpY2FudGx5IHJlZHVjZXMgdGhlIG92ZXJoZWFkLiAgSXQgaXMgZmFyIGVhc2llciB0byBwYXkgdGhlIHNtYWxsIG92ZXJoZWFkIGFuZCBoYXZlIGFuXG4gKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZ1xuICogc2VjdXJpdHkgb250byBhbiBhcHBsaWNhdGlvbiBsYXRlci5cbiAqXG4gKiA8YSBuYW1lPVwiY29udGV4dHNcIj48L2E+XG4gKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkP1xuICpcbiAqIHwgQ29udGV4dCAgICAgICAgICAgICB8IE5vdGVzICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gSWYgYW4gdW5zYWZlIHZhbHVlIGlzIGVuY291bnRlcmVkLCBhbmQgdGhlIHtAbGluayBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UgaXMgYXZhaWxhYmxlIChpbXBsZW1lbnRlZCBieSB0aGUge0BsaW5rIG5nU2FuaXRpemUgbmdTYW5pdGl6ZX0gbW9kdWxlKSB0aGlzIHdpbGwgc2FuaXRpemUgdGhlIHZhbHVlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuIHxcbiAqIHwgYCRzY2UuQ1NTYCAgICAgICAgICB8IEZvciBDU1MgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgQ3VycmVudGx5LCBubyBiaW5kaW5ncyByZXF1aXJlIHRoaXMgY29udGV4dC4gRmVlbCBmcmVlIHRvIHVzZSBpdCBpbiB5b3VyIG93biBkaXJlY3RpdmVzLiB8XG4gKiB8IGAkc2NlLlVSTGAgICAgICAgICAgfCBGb3IgVVJMcyB0aGF0IGFyZSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcy4gIEN1cnJlbnRseSB1bnVzZWQgKGA8YSBocmVmPWAsIGA8aW1nIHNyYz1gLCBhbmQgc29tZSBvdGhlcnMgc2FuaXRpemUgdGhlaXIgdXJscyBhbmQgZG9uJ3QgY29uc3RpdHV0ZSBhbiBTQ0UgY29udGV4dC4pIHxcbiAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AsIGBWSURFT2AsIGBBVURJT2AsIGBTT1VSQ0VgLCBhbmQgYFRSQUNLYCAoZS5nLiBgSUZSQU1FYCwgYE9CSkVDVGAsIGV0Yy4pICA8YnI+PGJyPk5vdGUgdGhhdCBgJHNjZS5SRVNPVVJDRV9VUkxgIG1ha2VzIGEgc3Ryb25nZXIgc3RhdGVtZW50IGFib3V0IHRoZSBVUkwgdGhhbiBgJHNjZS5VUkxgIGRvZXMgKGl0J3Mgbm90IGp1c3QgdGhlIFVSTCB0aGF0IG1hdHRlcnMsIGJ1dCBhbHNvIHdoYXQgaXMgYXQgdGhlIGVuZCBvZiBpdCksIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8XG4gKiB8IGAkc2NlLkpTYCAgICAgICAgICAgfCBGb3IgSmF2YVNjcmlwdCB0aGF0IGlzIHNhZmUgdG8gZXhlY3V0ZSBpbiB5b3VyIGFwcGxpY2F0aW9uJ3MgY29udGV4dC4gIEN1cnJlbnRseSwgbm8gYmluZGluZ3MgcmVxdWlyZSB0aGlzIGNvbnRleHQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqXG4gKlxuICogQmUgYXdhcmUgdGhhdCBgYVtocmVmXWAgYW5kIGBpbWdbc3JjXWAgYXV0b21hdGljYWxseSBzYW5pdGl6ZSB0aGVpciBVUkxzIGFuZCBkbyBub3QgcGFzcyB0aGVtXG4gKiB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfS4gVGhlcmUncyBubyBDU1MtLCBVUkwtLCBvciBKUy1jb250ZXh0IGJpbmRpbmdzXG4gKiBpbiBBbmd1bGFySlMgY3VycmVudGx5LCBzbyB0aGVpciBjb3JyZXNwb25kaW5nIGAkc2NlLnRydXN0QXNgIGZ1bmN0aW9ucyBhcmVuJ3QgdXNlZnVsIHlldC4gVGhpc1xuICogbWlnaHQgZXZvbHZlLlxuICpcbiAqICMjIEZvcm1hdCBvZiBpdGVtcyBpbiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgcmVzb3VyY2VVcmxXaGl0ZWxpc3R9L3tAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBCbGFja2xpc3R9IDxhIG5hbWU9XCJyZXNvdXJjZVVybFBhdHRlcm5JdGVtXCI+PC9hPlxuICpcbiAqICBFYWNoIGVsZW1lbnQgaW4gdGhlc2UgYXJyYXlzIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogIC0gKionc2VsZicqKlxuICogICAgLSBUaGUgc3BlY2lhbCAqKnN0cmluZyoqLCBgJ3NlbGYnYCwgY2FuIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCBhbGwgVVJMcyBvZiB0aGUgKipzYW1lXG4gKiAgICAgIGRvbWFpbioqIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB1c2luZyB0aGUgKipzYW1lIHByb3RvY29sKiouXG4gKiAgLSAqKlN0cmluZyoqIChleGNlcHQgdGhlIHNwZWNpYWwgdmFsdWUgYCdzZWxmJ2ApXG4gKiAgICAtIFRoZSBzdHJpbmcgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBmdWxsICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2VcbiAqICAgICAgYmVpbmcgdGVzdGVkIChzdWJzdHJpbmcgbWF0Y2hlcyBhcmUgbm90IGdvb2QgZW5vdWdoLilcbiAqICAgIC0gVGhlcmUgYXJlIGV4YWN0bHkgKip0d28gd2lsZGNhcmQgc2VxdWVuY2VzKiogLSBgKmAgYW5kIGAqKmAuICBBbGwgb3RoZXIgY2hhcmFjdGVyc1xuICogICAgICBtYXRjaCB0aGVtc2VsdmVzLlxuICogICAgLSBgKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mIGFueSBjaGFyYWN0ZXIgb3RoZXIgdGhhbiBvbmUgb2YgdGhlIGZvbGxvd2luZyA2XG4gKiAgICAgIGNoYXJhY3RlcnM6ICdgOmAnLCAnYC9gJywgJ2AuYCcsICdgP2AnLCAnYCZgJyBhbmQgJ2A7YCcuICBJdCdzIGEgdXNlZnVsIHdpbGRjYXJkIGZvciB1c2VcbiAqICAgICAgaW4gYSB3aGl0ZWxpc3QuXG4gKiAgICAtIGAqKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mICphbnkqIGNoYXJhY3Rlci4gIEFzIHN1Y2gsIGl0J3Mgbm90XG4gKiAgICAgIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gYSBzY2hlbWUsIGRvbWFpbiwgZXRjLiBhcyBpdCB3b3VsZCBtYXRjaCB0b28gbXVjaC4gIChlLmcuXG4gKiAgICAgIGh0dHA6Ly8qKi5leGFtcGxlLmNvbS8gd291bGQgbWF0Y2ggaHR0cDovL2V2aWwuY29tLz9pZ25vcmU9LmV4YW1wbGUuY29tLyBhbmQgdGhhdCBtaWdodFxuICogICAgICBub3QgaGF2ZSBiZWVuIHRoZSBpbnRlbnRpb24uKSAgSXRzIHVzYWdlIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgcGF0aCBpcyBvay4gIChlLmcuXG4gKiAgICAgIGh0dHA6Ly9mb28uZXhhbXBsZS5jb20vdGVtcGxhdGVzLyoqKS5cbiAqICAtICoqUmVnRXhwKiogKCpzZWUgY2F2ZWF0IGJlbG93KilcbiAqICAgIC0gKkNhdmVhdCo6ICBXaGlsZSByZWd1bGFyIGV4cHJlc3Npb25zIGFyZSBwb3dlcmZ1bCBhbmQgb2ZmZXIgZ3JlYXQgZmxleGliaWxpdHksICB0aGVpciBzeW50YXhcbiAqICAgICAgKGFuZCBhbGwgdGhlIGluZXZpdGFibGUgZXNjYXBpbmcpIG1ha2VzIHRoZW0gKmhhcmRlciB0byBtYWludGFpbiouICBJdCdzIGVhc3kgdG9cbiAqICAgICAgYWNjaWRlbnRhbGx5IGludHJvZHVjZSBhIGJ1ZyB3aGVuIG9uZSB1cGRhdGVzIGEgY29tcGxleCBleHByZXNzaW9uIChpbWhvLCBhbGwgcmVnZXhlcyBzaG91bGRcbiAqICAgICAgaGF2ZSBnb29kIHRlc3QgY292ZXJhZ2UpLiAgRm9yIGluc3RhbmNlLCB0aGUgdXNlIG9mIGAuYCBpbiB0aGUgcmVnZXggaXMgY29ycmVjdCBvbmx5IGluIGFcbiAqICAgICAgc21hbGwgbnVtYmVyIG9mIGNhc2VzLiAgQSBgLmAgY2hhcmFjdGVyIGluIHRoZSByZWdleCB1c2VkIHdoZW4gbWF0Y2hpbmcgdGhlIHNjaGVtZSBvciBhXG4gKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdFxuICogICAgICBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBzdHJpbmcgcGF0dGVybnMgYW5kIG9ubHkgZmFsbCBiYWNrIHRvIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAqICAgICAgYXMgYSBsYXN0IHJlc29ydC5cbiAqICAgIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFJlZ0V4cCAoaS5lLiBub3QgYSBzdHJpbmcuKSAgSXQgaXNcbiAqICAgICAgbWF0Y2hlZCBhZ2FpbnN0IHRoZSAqKmVudGlyZSoqICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2UgYmVpbmcgdGVzdGVkXG4gKiAgICAgIChldmVuIHdoZW4gdGhlIFJlZ0V4cCBkaWQgbm90IGhhdmUgdGhlIGBeYCBhbmQgYCRgIGNvZGVzLikgIEluIGFkZGl0aW9uLCBhbnkgZmxhZ3NcbiAqICAgICAgcHJlc2VudCBvbiB0aGUgUmVnRXhwIChzdWNoIGFzIG11bHRpbGluZSwgZ2xvYmFsLCBpZ25vcmVDYXNlKSBhcmUgaWdub3JlZC5cbiAqICAgIC0gSWYgeW91IGFyZSBnZW5lcmF0aW5nIHlvdXIgSmF2YVNjcmlwdCBmcm9tIHNvbWUgb3RoZXIgdGVtcGxhdGluZyBlbmdpbmUgKG5vdFxuICogICAgICByZWNvbW1lbmRlZCwgZS5nLiBpbiBpc3N1ZSBbIzQwMDZdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQwMDYpKSxcbiAqICAgICAgcmVtZW1iZXIgdG8gZXNjYXBlIHlvdXIgcmVndWxhciBleHByZXNzaW9uIChhbmQgYmUgYXdhcmUgdGhhdCB5b3UgbWlnaHQgbmVlZCBtb3JlIHRoYW5cbiAqICAgICAgb25lIGxldmVsIG9mIGVzY2FwaW5nIGRlcGVuZGluZyBvbiB5b3VyIHRlbXBsYXRpbmcgZW5naW5lIGFuZCB0aGUgd2F5IHlvdSBpbnRlcnBvbGF0ZWRcbiAqICAgICAgdGhlIHZhbHVlLikgIERvIG1ha2UgdXNlIG9mIHlvdXIgcGxhdGZvcm0ncyBlc2NhcGluZyBtZWNoYW5pc20gYXMgaXQgbWlnaHQgYmUgZ29vZFxuICogICAgICBlbm91Z2ggYmVmb3JlIGNvZGluZyB5b3VyIG93bi4gIEUuZy4gUnVieSBoYXNcbiAqICAgICAgW1JlZ2V4cC5lc2NhcGUoc3RyKV0oaHR0cDovL3d3dy5ydWJ5LWRvYy5vcmcvY29yZS0yLjAuMC9SZWdleHAuaHRtbCNtZXRob2QtYy1lc2NhcGUpXG4gKiAgICAgIGFuZCBQeXRob24gaGFzIFtyZS5lc2NhcGVdKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9yZS5odG1sI3JlLmVzY2FwZSkuXG4gKiAgICAgIEphdmFzY3JpcHQgbGFja3MgYSBzaW1pbGFyIGJ1aWx0IGluIGZ1bmN0aW9uIGZvciBlc2NhcGluZy4gIFRha2UgYSBsb29rIGF0IEdvb2dsZVxuICogICAgICBDbG9zdXJlIGxpYnJhcnkncyBbZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHMpXShcbiAqICAgICAgaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lOTYyKS5cbiAqXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqICMjIFNob3cgbWUgYW4gZXhhbXBsZSB1c2luZyBTQ0UuXG4gKlxuICogPGV4YW1wbGUgbW9kdWxlPVwibXlTY2VBcHBcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIG5hbWU9XCJzY2Utc2VydmljZVwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQXBwQ29udHJvbGxlciBhcyBteUN0cmxcIj5cbiAqICAgICA8aSBuZy1iaW5kLWh0bWw9XCJteUN0cmwuZXhwbGljaXRseVRydXN0ZWRIdG1sXCIgaWQ9XCJleHBsaWNpdGx5VHJ1c3RlZEh0bWxcIj48L2k+PGJyPjxicj5cbiAqICAgICA8Yj5Vc2VyIGNvbW1lbnRzPC9iPjxicj5cbiAqICAgICBCeSBkZWZhdWx0LCBIVE1MIHRoYXQgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkIChlLmcuIEFsaWNlJ3MgY29tbWVudCkgaXMgc2FuaXRpemVkIHdoZW5cbiAqICAgICAkc2FuaXRpemUgaXMgYXZhaWxhYmxlLiAgSWYgJHNhbml0aXplIGlzbid0IGF2YWlsYWJsZSwgdGhpcyByZXN1bHRzIGluIGFuIGVycm9yIGluc3RlYWQgb2YgYW5cbiAqICAgICBleHBsb2l0LlxuICogICAgIDxkaXYgY2xhc3M9XCJ3ZWxsXCI+XG4gKiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInVzZXJDb21tZW50IGluIG15Q3RybC51c2VyQ29tbWVudHNcIj5cbiAqICAgICAgICAgPGI+e3t1c2VyQ29tbWVudC5uYW1lfX08L2I+OlxuICogICAgICAgICA8c3BhbiBuZy1iaW5kLWh0bWw9XCJ1c2VyQ29tbWVudC5odG1sQ29tbWVudFwiIGNsYXNzPVwiaHRtbENvbW1lbnRcIj48L3NwYW4+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgIDwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqXG4gKiA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdteVNjZUFwcCcsIFsnbmdTYW5pdGl6ZSddKVxuICogICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckc2NlJyxcbiAqICAgICAgIGZ1bmN0aW9uIEFwcENvbnRyb2xsZXIoJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7XG4gKiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAqICAgICAgICAgJGh0dHAuZ2V0KCd0ZXN0X2RhdGEuanNvbicsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gKiAgICAgICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSByZXNwb25zZS5kYXRhO1xuICogICAgICAgICB9KTtcbiAqICAgICAgICAgc2VsZi5leHBsaWNpdGx5VHJ1c3RlZEh0bWwgPSAkc2NlLnRydXN0QXNIdG1sKFxuICogICAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgICAgfV0pO1xuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJ0ZXN0X2RhdGEuanNvblwiPlxuICogW1xuICogICB7IFwibmFtZVwiOiBcIkFsaWNlXCIsXG4gKiAgICAgXCJodG1sQ29tbWVudFwiOlxuICogICAgICAgICBcIjxzcGFuIG9ubW91c2VvdmVyPSd0aGlzLnRleHRDb250ZW50PVxcXCJQV04zRCFcXFwiJz5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+XCJcbiAqICAgfSxcbiAqICAgeyBcIm5hbWVcIjogXCJCb2JcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6IFwiPGk+WWVzITwvaT4gIEFtIEkgdGhlIG9ubHkgb3RoZXIgb25lP1wiXG4gKiAgIH1cbiAqIF1cbiAqIDwvZmlsZT5cbiAqXG4gKiA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgIGRlc2NyaWJlKCdTQ0UgZG9jIGRlbW8nLCBmdW5jdGlvbigpIHtcbiAqICAgICBpdCgnc2hvdWxkIHNhbml0aXplIHVudHJ1c3RlZCB2YWx1ZXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJy5odG1sQ29tbWVudCcpKS5maXJzdCgpLmdldEF0dHJpYnV0ZSgnaW5uZXJIVE1MJykpXG4gKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2V4cGxpY2l0bHlUcnVzdGVkSHRtbCcpKS5nZXRBdHRyaWJ1dGUoJ2lubmVySFRNTCcpKS50b0JlKFxuICogICAgICAgICAgICc8c3BhbiBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9JnF1b3Q7RXhwbGljaXRseSB0cnVzdGVkIEhUTUwgYnlwYXNzZXMgJyArXG4gKiAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgfSk7XG4gKiAgIH0pO1xuICogPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKlxuICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT9cbiAqXG4gKiBZZXMsIHlvdSBjYW4uICBIb3dldmVyLCB0aGlzIGlzIHN0cm9uZ2x5IGRpc2NvdXJhZ2VkLiAgU0NFIGdpdmVzIHlvdSBhIGxvdCBvZiBzZWN1cml0eSBiZW5lZml0c1xuICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZFxuICogZWl0aGVyIHNlY3VyZSBpdCBvbiB5b3VyIG93biBvciBlbmFibGUgU0NFIGF0IGEgbGF0ZXIgc3RhZ2UuICBJdCBtaWdodCBtYWtlIHNlbnNlIHRvIGRpc2FibGUgU0NFXG4gKiBmb3IgY2FzZXMgd2hlcmUgeW91IGhhdmUgYSBsb3Qgb2YgZXhpc3RpbmcgY29kZSB0aGF0IHdhcyB3cml0dGVuIGJlZm9yZSBTQ0Ugd2FzIGludHJvZHVjZWQgYW5kXG4gKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLiBBbHNvIGRvIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGFwcC13aWRlIHNldHRpbmcsIHNvIGlmXG4gKiB5b3UgYXJlIHdyaXRpbmcgYSBsaWJyYXJ5LCB5b3Ugd2lsbCBjYXVzZSBzZWN1cml0eSBidWdzIGFwcGxpY2F0aW9ucyB1c2luZyBpdC5cbiAqXG4gKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICogICAvLyBDb21wbGV0ZWx5IGRpc2FibGUgU0NFLiAgRm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgb25seSFcbiAqICAgLy8gRG8gbm90IHVzZSBpbiBuZXcgcHJvamVjdHMgb3IgbGlicmFyaWVzLlxuICogICAkc2NlUHJvdmlkZXIuZW5hYmxlZChmYWxzZSk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuXG5mdW5jdGlvbiAkU2NlUHJvdmlkZXIoKSB7XG4gIHZhciBlbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlUHJvdmlkZXIjZW5hYmxlZFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiBwcm92aWRlZCwgdGhlbiBlbmFibGVzL2Rpc2FibGVzIFNDRSBhcHBsaWNhdGlvbi13aWRlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFbmFibGVzL2Rpc2FibGVzIFNDRSBhbmQgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICovXG4gIHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGVuYWJsZWQgPSAhIXZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZW5hYmxlZDtcbiAgfTtcblxuXG4gIC8qIERlc2lnbiBub3RlcyBvbiB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3IgU0NFLlxuICAgKlxuICAgKiBUaGUgQVBJIGNvbnRyYWN0IGZvciB0aGUgU0NFIGRlbGVnYXRlXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogVGhlIFNDRSBkZWxlZ2F0ZSBvYmplY3QgbXVzdCBwcm92aWRlIHRoZSBmb2xsb3dpbmcgMyBtZXRob2RzOlxuICAgKlxuICAgKiAtIHRydXN0QXMoY29udGV4dEVudW0sIHZhbHVlKVxuICAgKiAgICAgVGhpcyBtZXRob2QgaXMgdXNlZCB0byB0ZWxsIHRoZSBTQ0Ugc2VydmljZSB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBPSyB0byB1c2UgaW4gdGhlXG4gICAqICAgICBjb250ZXh0cyBzcGVjaWZpZWQgYnkgY29udGV4dEVudW0uICBJdCBtdXN0IHJldHVybiBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5XG4gICAqICAgICBnZXRUcnVzdGVkKCkgZm9yIGEgY29tcGF0aWJsZSBjb250ZXh0RW51bSBhbmQgcmV0dXJuIHRoaXMgdmFsdWUuXG4gICAqXG4gICAqIC0gdmFsdWVPZih2YWx1ZSlcbiAgICogICAgIEZvciB2YWx1ZXMgdGhhdCB3ZXJlIG5vdCBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGVtIGFzIGlzLiAgRm9yIHZhbHVlcyB0aGF0IHdlcmVcbiAgICogICAgIHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IHZhbHVlIHRvIHRydXN0QXMuICBCYXNpY2FsbHksIGlmXG4gICAqICAgICB0cnVzdEFzIGlzIHdyYXBwaW5nIHRoZSBnaXZlbiB2YWx1ZXMgaW50byBzb21lIHR5cGUsIHRoaXMgb3BlcmF0aW9uIHVud3JhcHMgaXQgd2hlbiBnaXZlblxuICAgKiAgICAgc3VjaCBhIHZhbHVlLlxuICAgKlxuICAgKiAtIGdldFRydXN0ZWQoY29udGV4dEVudW0sIHZhbHVlKVxuICAgKiAgICAgVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRoZSBhIHZhbHVlIHRoYXQgaXMgc2FmZSB0byB1c2UgaW4gdGhlIGNvbnRleHQgc3BlY2lmaWVkIGJ5XG4gICAqICAgICBjb250ZXh0RW51bSBvciB0aHJvdyBhbmQgZXhjZXB0aW9uIG90aGVyd2lzZS5cbiAgICpcbiAgICogTk9URTogVGhpcyBjb250cmFjdCBkZWxpYmVyYXRlbHkgZG9lcyBOT1Qgc3RhdGUgdGhhdCB2YWx1ZXMgcmV0dXJuZWQgYnkgdHJ1c3RBcygpIG11c3QgYmVcbiAgICogb3BhcXVlIG9yIHdyYXBwZWQgaW4gc29tZSBob2xkZXIgb2JqZWN0LiAgVGhhdCBoYXBwZW5zIHRvIGJlIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC4gIEZvclxuICAgKiBpbnN0YW5jZSwgYW4gaW1wbGVtZW50YXRpb24gY291bGQgbWFpbnRhaW4gYSByZWdpc3RyeSBvZiBhbGwgdHJ1c3RlZCBvYmplY3RzIGJ5IGNvbnRleHQuICBJblxuICAgKiBzdWNoIGEgY2FzZSwgdHJ1c3RBcygpIHdvdWxkIHJldHVybiB0aGUgc2FtZSBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGluLiAgZ2V0VHJ1c3RlZCgpIHdvdWxkXG4gICAqIHJldHVybiB0aGUgc2FtZSBvYmplY3QgcGFzc2VkIGluIGlmIGl0IHdhcyBmb3VuZCBpbiB0aGUgcmVnaXN0cnkgdW5kZXIgYSBjb21wYXRpYmxlIGNvbnRleHQgb3JcbiAgICogdGhyb3cgYW4gZXhjZXB0aW9uIG90aGVyd2lzZS4gIEFuIGltcGxlbWVudGF0aW9uIG1pZ2h0IG9ubHkgd3JhcCB2YWx1ZXMgc29tZSBvZiB0aGUgdGltZSBiYXNlZFxuICAgKiBvbiBzb21lIGNyaXRlcmlhLiAgZ2V0VHJ1c3RlZCgpIG1pZ2h0IHJldHVybiBhIHZhbHVlIGFuZCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uIGZvciBzcGVjaWFsXG4gICAqIGNvbnN0YW50cyBvciBvYmplY3RzIGV2ZW4gaWYgbm90IHdyYXBwZWQuICBBbGwgc3VjaCBpbXBsZW1lbnRhdGlvbnMgZnVsZmlsbCB0aGlzIGNvbnRyYWN0LlxuICAgKlxuICAgKlxuICAgKiBBIG5vdGUgb24gdGhlIGluaGVyaXRhbmNlIG1vZGVsIGZvciBTQ0UgY29udGV4dHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEkndmUgdXNlZCBpbmhlcml0YW5jZSBhbmQgbWFkZSBSRVNPVVJDRV9VUkwgd3JhcHBlZCB0eXBlcyBhIHN1YnR5cGUgb2YgVVJMIHdyYXBwZWQgdHlwZXMuICBUaGlzXG4gICAqIGlzIHB1cmVseSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLlxuICAgKlxuICAgKiBUaGUgY29udHJhY3QgaXMgc2ltcGx5IHRoaXM6XG4gICAqXG4gICAqICAgICBnZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSkgc3VjY2VlZGluZyBpbXBsaWVzIHRoYXQgZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpXG4gICAqICAgICB3aWxsIGFsc28gc3VjY2VlZC5cbiAgICpcbiAgICogSW5oZXJpdGFuY2UgaGFwcGVucyB0byBjYXB0dXJlIHRoaXMgaW4gYSBuYXR1cmFsIHdheS4gSW4gc29tZSBmdXR1cmUsIHdlIG1heSBub3QgdXNlXG4gICAqIGluaGVyaXRhbmNlIGFueW1vcmUuIFRoYXQgaXMgT0sgYmVjYXVzZSBubyBjb2RlIG91dHNpZGUgb2Ygc2NlLmpzIGFuZCBzY2VTcGVjcy5qcyB3b3VsZCBuZWVkIHRvXG4gICAqIGJlIGF3YXJlIG9mIHRoaXMgZGV0YWlsLlxuICAgKi9cblxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckc2NlRGVsZWdhdGUnLCBmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAkcGFyc2UsICAgJHNjZURlbGVnYXRlKSB7XG4gICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgLy8gUHJlcmVxOiBFbnN1cmUgdGhhdCB3ZSdyZSBub3QgcnVubmluZyBpbiBJRTwxMSBxdWlya3MgbW9kZS4gIEluIHRoYXQgbW9kZSwgSUUgPCAxMSBhbGxvd1xuICAgIC8vIHRoZSBcImV4cHJlc3Npb24oamF2YXNjcmlwdCBleHByZXNzaW9uKVwiIHN5bnRheCB3aGljaCBpcyBpbnNlY3VyZS5cbiAgICBpZiAoZW5hYmxlZCAmJiBtc2llIDwgOCkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycignaWVxdWlya3MnLFxuICAgICAgICAnU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZG9lcyBub3Qgc3VwcG9ydCBJbnRlcm5ldCBFeHBsb3JlciB2ZXJzaW9uIDwgMTEgaW4gcXVpcmtzICcgK1xuICAgICAgICAnbW9kZS4gIFlvdSBjYW4gZml4IHRoaXMgYnkgYWRkaW5nIHRoZSB0ZXh0IDwhZG9jdHlwZSBodG1sPiB0byB0aGUgdG9wIG9mIHlvdXIgSFRNTCAnICtcbiAgICAgICAgJ2RvY3VtZW50LiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIHNjZSA9IHNoYWxsb3dDb3B5KFNDRV9DT05URVhUUyk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNpc0VuYWJsZWRcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLiAgSWYgeW91IHdhbnQgdG8gc2V0IHRoZSB2YWx1ZSwgeW91XG4gICAgICogICAgIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfTtcbiAgICBzY2UudHJ1c3RBcyA9ICRzY2VEZWxlZ2F0ZS50cnVzdEFzO1xuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjtcblxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgIHNjZS52YWx1ZU9mID0gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXG4gICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLFxuICAgICAqICpyZXN1bHQqKX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBTQ0UgY29udGV4dCBpbiB3aGljaCB0aGlzIHJlc3VsdCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZVxuICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlc1xuICAgICAqICAgICAgaW4gYGNvbnRleHRgLlxuICAgICAqL1xuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XG4gICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpO1xuICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiBBcyBzdWNoLCByZXR1cm5zIGFcbiAgICAgKiB3cmFwcGVkIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgeW91ciB2YWx1ZSwgYW5kIHRoZSB0cnVzdCB5b3UgaGF2ZSBpbiBpdHMgc2FmZXR5IGZvciB0aGUgZ2l2ZW5cbiAgICAgKiBjb250ZXh0LiBBbmd1bGFySlMgY2FuIHRoZW4gdXNlIHRoYXQgdmFsdWUgYXMtaXMgaW4gYmluZGluZ3Mgb2YgdGhlIHNwZWNpZmllZCBzZWN1cmUgY29udGV4dC5cbiAgICAgKiBUaGlzIGlzIHVzZWQgaW4gYmluZGluZ3MgZm9yIGBuZy1iaW5kLWh0bWxgLCBgbmctaW5jbHVkZWAsIGFuZCBtb3N0IGBzcmNgIGF0dHJpYnV0ZVxuICAgICAqIGludGVycG9sYXRpb25zLiBTZWUge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIHN0cmljdCBjb250ZXh0dWFsIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UsIGUuZy4gYCRzY2UuVVJMYCxcbiAgICAgKiAgICAgYCRzY2UuUkVTT1VSQ0VfVVJMYCwgYCRzY2UuSFRNTGAsIGAkc2NlLkpTYCBvciBgJHNjZS5DU1NgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQuXG4gICAgICogQHJldHVybiB7Kn0gQSB3cmFwcGVkIHZlcnNpb24gb2YgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRydXN0ZWQgdmFyaWFudCBvZiB5b3VyIGB2YWx1ZWBcbiAgICAgKiAgICAgaW4gdGhlIGNvbnRleHQgeW91IHNwZWNpZmllZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0h0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLkhUTUxgIGNvbnRleHQuXG4gICAgICogQHJldHVybiB7Kn0gQSB3cmFwcGVkIHZlcnNpb24gb2YgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRydXN0ZWQgdmFyaWFudCBvZiB5b3VyIGB2YWx1ZWBcbiAgICAgKiAgICAgaW4gYCRzY2UuSFRNTGAgY29udGV4dCAobGlrZSBgbmctYmluZC1odG1sYCkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuQ1NTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5DU1NgIGNvbnRleHQuXG4gICAgICogQHJldHVybiB7Kn0gQSB3cmFwcGVkIHZlcnNpb24gb2YgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRydXN0ZWQgdmFyaWFudFxuICAgICAqICAgICBvZiB5b3VyIGB2YWx1ZWAgaW4gYCRzY2UuQ1NTYCBjb250ZXh0LiBUaGlzIGNvbnRleHQgaXMgY3VycmVudGx5IHVudXNlZCwgc28gdGhlcmUgYXJlXG4gICAgICogICAgIGFsbW9zdCBubyByZWFzb25zIHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHNvIGZhci5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5VUkxgIGNvbnRleHQuIFRoYXQgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmUgYWxtb3N0IG5vIHJlYXNvbnNcbiAgICAgKiAgICAgdG8gdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5SRVNPVVJDRV9VUkxgIGNvbnRleHQgKHRlbXBsYXRlIFVSTHMgaW4gYG5nLWluY2x1ZGVgLCBtb3N0IGBzcmNgIGF0dHJpYnV0ZVxuICAgICAqICAgICBiaW5kaW5ncywgLi4uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuSlNgIGNvbnRleHQuXG4gICAgICogQHJldHVybiB7Kn0gQSB3cmFwcGVkIHZlcnNpb24gb2YgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHRydXN0ZWQgdmFyaWFudCBvZiB5b3VyIGB2YWx1ZWBcbiAgICAgKiAgICAgaW4gYCRzY2UuSlNgIGNvbnRleHQuIFRoYXQgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmUgYWxtb3N0IG5vIHJlYXNvbnMgdG9cbiAgICAgKiAgICAgdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgfS4gIEFzIHN1Y2gsXG4gICAgICogdGFrZXMgYW55IGlucHV0LCBhbmQgZWl0aGVyIHJldHVybnMgYSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIHNwZWNpZmllZCBjb250ZXh0LFxuICAgICAqIG9yIHRocm93cyBhbiBleGNlcHRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYXdhcmUgb2YgdHJ1c3RlZCB2YWx1ZXMgY3JlYXRlZCBieSB0aGUgYHRydXN0QXNgXG4gICAgICogZnVuY3Rpb24gYW5kIGl0cyBzaG9ydGhhbmRzLCBhbmQgd2hlbiBjb250ZXh0cyBhcmUgYXBwcm9wcmlhdGUsIHJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZVxuICAgICAqIGFzLWlzLiBGaW5hbGx5LCB0aGlzIGZ1bmN0aW9uIGNhbiBhbHNvIHRocm93IHdoZW4gdGhlcmUgaXMgbm8gd2F5IHRvIHR1cm4gYG1heWJlVHJ1c3RlZGAgaW4gYVxuICAgICAqIHNhZmUgdmFsdWUgKGUuZy4sIG5vIHNhbml0aXphdGlvbiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlLnRydXN0QXNgfSBjYWxsLCBvciBhbnl0aGluZyBlbHNlICh3aGljaCB3aWxsIG5vdCBiZSBjb25zaWRlcmVkIHRydXN0ZWQuKVxuICAgICAqIEByZXR1cm4geyp9IEEgdmVyc2lvbiBvZiB0aGUgdmFsdWUgdGhhdCdzIHNhZmUgdG8gdXNlIGluIHRoZSBnaXZlbiBjb250ZXh0LCBvciB0aHJvd3MgYW5cbiAgICAgKiAgICAgZXhjZXB0aW9uIGlmIHRoaXMgaXMgaW1wb3NzaWJsZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRKc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNIdG1sKGV4cHJlc3Npb24gc3RyaW5nKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZVxuICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlc1xuICAgICAqICAgICAgaW4gYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBBIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZVxuICAgICAqICAgICAgc3RyaW5ncyBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlc1xuICAgICAqICAgICAgaW4gYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLy8gU2hvcnRoYW5kIGRlbGVnYXRpb25zLlxuICAgIHZhciBwYXJzZSA9IHNjZS5wYXJzZUFzLFxuICAgICAgICBnZXRUcnVzdGVkID0gc2NlLmdldFRydXN0ZWQsXG4gICAgICAgIHRydXN0QXMgPSBzY2UudHJ1c3RBcztcblxuICAgIGZvckVhY2goU0NFX0NPTlRFWFRTLCBmdW5jdGlvbihlbnVtVmFsdWUsIG5hbWUpIHtcbiAgICAgIHZhciBsTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICAgIHNjZVtzbmFrZVRvQ2FtZWwoJ3BhcnNlX2FzXycgKyBsTmFtZSldID0gZnVuY3Rpb24oZXhwcikge1xuICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTtcbiAgICAgIH07XG4gICAgICBzY2Vbc25ha2VUb0NhbWVsKCdnZXRfdHJ1c3RlZF8nICsgbE5hbWUpXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBnZXRUcnVzdGVkKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIHNjZVtzbmFrZVRvQ2FtZWwoJ3RydXN0X2FzXycgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0QXMoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjZTtcbiAgfV07XG59XG5cbi8qIGV4cG9ydGVkICRTbmlmZmVyUHJvdmlkZXIgKi9cblxuLyoqXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgc2VydmljZSAhISFcbiAqXG4gKiBAbmFtZSAkc25pZmZlclxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqIEB0aGlzXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zaXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbiBldmVudHMgP1xuICogQHByb3BlcnR5IHtib29sZWFufSBhbmltYXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgYW5pbWF0aW9uIGV2ZW50cyA/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLlxuICovXG5mdW5jdGlvbiAkU25pZmZlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgdmFyIGV2ZW50U3VwcG9ydCA9IHt9LFxuICAgICAgICAvLyBDaHJvbWUgUGFja2FnZWQgQXBwcyBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzIGBoaXN0b3J5LnB1c2hTdGF0ZWAuXG4gICAgICAgIC8vIElmIG5vdCBzYW5kYm94ZWQsIHRoZXkgY2FuIGJlIGRldGVjdGVkIGJ5IHRoZSBwcmVzZW5jZSBvZiBgY2hyb21lLmFwcC5ydW50aW1lYFxuICAgICAgICAvLyAoc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYXBwcy9hcGlfaW5kZXgpLiBJZiBzYW5kYm94ZWQsIHRoZXkgY2FuIGJlIGRldGVjdGVkIGJ5XG4gICAgICAgIC8vIHRoZSBwcmVzZW5jZSBvZiBhbiBleHRlbnNpb24gcnVudGltZSBJRCBhbmQgdGhlIGFic2VuY2Ugb2Ygb3RoZXIgQ2hyb21lIHJ1bnRpbWUgQVBJc1xuICAgICAgICAvLyAoc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vYXBwcy9tYW5pZmVzdC9zYW5kYm94KS5cbiAgICAgICAgLy8gKE5XLmpzIGFwcHMgaGF2ZSBhY2Nlc3MgdG8gQ2hyb21lIEFQSXMsIGJ1dCBkbyBzdXBwb3J0IGBoaXN0b3J5YC4pXG4gICAgICAgIGlzTncgPSAkd2luZG93Lm53ICYmICR3aW5kb3cubncucHJvY2VzcyxcbiAgICAgICAgaXNDaHJvbWVQYWNrYWdlZEFwcCA9XG4gICAgICAgICAgICAhaXNOdyAmJlxuICAgICAgICAgICAgJHdpbmRvdy5jaHJvbWUgJiZcbiAgICAgICAgICAgICgkd2luZG93LmNocm9tZS5hcHAgJiYgJHdpbmRvdy5jaHJvbWUuYXBwLnJ1bnRpbWUgfHxcbiAgICAgICAgICAgICAgICAhJHdpbmRvdy5jaHJvbWUuYXBwICYmICR3aW5kb3cuY2hyb21lLnJ1bnRpbWUgJiYgJHdpbmRvdy5jaHJvbWUucnVudGltZS5pZCksXG4gICAgICAgIGhhc0hpc3RvcnlQdXNoU3RhdGUgPSAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiAkd2luZG93Lmhpc3RvcnkgJiYgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSxcbiAgICAgICAgYW5kcm9pZCA9XG4gICAgICAgICAgdG9JbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxuICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSxcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zID0gZmFsc2U7XG5cbiAgICBpZiAoYm9keVN0eWxlKSB7XG4gICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkIDw1LCBCbGFja2JlcnJ5IEJyb3dzZXIgMTAsIGRlZmF1bHQgQ2hyb21lIGluIEFuZHJvaWQgNC40LnhcbiAgICAgIC8vIE1lbnRpb25lZCBicm93c2VycyBuZWVkIGEgLXdlYmtpdC0gcHJlZml4IGZvciB0cmFuc2l0aW9ucyAmIGFuaW1hdGlvbnMuXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCd0cmFuc2l0aW9uJyBpbiBib2R5U3R5bGUgfHwgJ3dlYmtpdFRyYW5zaXRpb24nIGluIGJvZHlTdHlsZSk7XG4gICAgICBhbmltYXRpb25zID0gISEoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlIHx8ICd3ZWJraXRBbmltYXRpb24nIGluIGJvZHlTdHlsZSk7XG4gICAgfVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5XG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuXG4gICAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvYW5kcm9pZC9pc3N1ZXMvZGV0YWlsP2lkPTE3NDcxXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDRcblxuICAgICAgLy8gb2xkZXIgd2Via2l0IGJyb3dzZXIgKDUzMy45KSBvbiBCb3hlZSBib3ggaGFzIGV4YWN0bHkgdGhlIHNhbWUgcHJvYmxlbSBhcyBBbmRyb2lkIGhhc1xuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYWxzb1xuICAgICAgLy8gV2UgYXJlIHB1cnBvc2VmdWxseSB1c2luZyBgIShhbmRyb2lkIDwgNClgIHRvIGNvdmVyIHRoZSBjYXNlIHdoZW4gYGFuZHJvaWRgIGlzIHVuZGVmaW5lZFxuICAgICAgaGlzdG9yeTogISEoaGFzSGlzdG9yeVB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLFxuICAgICAgaGFzRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgICAgICAvLyBJRTkgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGl0J3Mgc28gZnViYXJlZCB0aGF0IHdlIHJhdGhlciBwcmV0ZW5kIHRoYXQgaXQgZG9lc24ndCBoYXZlXG4gICAgICAgIC8vIGl0LiBJbiBwYXJ0aWN1bGFyIHRoZSBldmVudCBpcyBub3QgZmlyZWQgd2hlbiBiYWNrc3BhY2Ugb3IgZGVsZXRlIGtleSBhcmUgcHJlc3NlZCBvclxuICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLlxuICAgICAgICAvLyBJRTEwKyBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgYnV0IGl0IGVycm9uZW91c2x5IGZpcmVzIHVuZGVyIHZhcmlvdXMgc2l0dWF0aW9ucyxcbiAgICAgICAgLy8gZS5nLiB3aGVuIHBsYWNlaG9sZGVyIGNoYW5nZXMsIG9yIGEgZm9ybSBpcyBmb2N1c2VkLlxuICAgICAgICBpZiAoZXZlbnQgPT09ICdpbnB1dCcgJiYgbXNpZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChldmVudFN1cHBvcnRbZXZlbnRdKSkge1xuICAgICAgICAgIHZhciBkaXZFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBldmVudFN1cHBvcnRbZXZlbnRdID0gJ29uJyArIGV2ZW50IGluIGRpdkVsbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVudFN1cHBvcnRbZXZlbnRdO1xuICAgICAgfSxcbiAgICAgIGNzcDogY3NwKCksXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgICAgYW5kcm9pZDogYW5kcm9pZFxuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJHRlbXBsYXRlUmVxdWVzdE1pbkVyciA9IG1pbkVycignJGNvbXBpbGUnKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZWQgdG8gY29uZmlndXJlIHRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGUge0BsaW5rICRodHRwfSBzZXJ2aWNlIHdoZW4gbWFraW5nIGEgdGVtcGxhdGUgcmVxdWVzdC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaXQgY2FuIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIFwiQWNjZXB0XCIgaGVhZGVyIHRoYXQgaXMgc2VudCB0byB0aGUgc2VydmVyLCB3aGVuXG4gKiByZXF1ZXN0aW5nIGEgdGVtcGxhdGUuXG4gKi9cbmZ1bmN0aW9uICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcigpIHtcblxuICB2YXIgaHR0cE9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyI2h0dHBPcHRpb25zXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgb3B0aW9ucyB0byBiZSBwYXNzZWQgdG8gdGhlIHtAbGluayAkaHR0cH0gc2VydmljZSB3aGVuIG1ha2luZyB0aGUgcmVxdWVzdC5cbiAgICogWW91IGNhbiB1c2UgdGhpcyB0byBvdmVycmlkZSBvcHRpb25zIHN1Y2ggYXMgdGhlIFwiQWNjZXB0XCIgaGVhZGVyIGZvciB0ZW1wbGF0ZSByZXF1ZXN0cy5cbiAgICpcbiAgICogVGhlIHtAbGluayAkdGVtcGxhdGVSZXF1ZXN0fSB3aWxsIHNldCB0aGUgYGNhY2hlYCBhbmQgdGhlIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvZiB0aGVcbiAgICogb3B0aW9ucyBpZiBub3Qgb3ZlcnJpZGRlbiBoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSBmb3IgdGhlIHtAbGluayAkaHR0cH0gb3B0aW9ucy5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSB7QGxpbmsgJGh0dHB9IG9wdGlvbnMgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuaHR0cE9wdGlvbnMgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICBodHRwT3B0aW9ucyA9IHZhbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gaHR0cE9wdGlvbnM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBydW5zIHNlY3VyaXR5IGNoZWNrcyB0aGVuIGRvd25sb2FkcyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUgdXNpbmdcbiAgICogYCRodHRwYCBhbmQsIHVwb24gc3VjY2Vzcywgc3RvcmVzIHRoZSBjb250ZW50cyBpbnNpZGUgb2YgYCR0ZW1wbGF0ZUNhY2hlYC4gSWYgdGhlIEhUVFAgcmVxdWVzdFxuICAgKiBmYWlscyBvciB0aGUgcmVzcG9uc2UgZGF0YSBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5LCBhIGAkY29tcGlsZWAgZXJyb3Igd2lsbCBiZSB0aHJvd24gKHRoZVxuICAgKiBleGNlcHRpb24gY2FuIGJlIHRod2FydGVkIGJ5IHNldHRpbmcgdGhlIDJuZCBwYXJhbWV0ZXIgb2YgdGhlIGZ1bmN0aW9uIHRvIHRydWUpLiBOb3RlIHRoYXQgdGhlXG4gICAqIGNvbnRlbnRzIG9mIGAkdGVtcGxhdGVDYWNoZWAgYXJlIHRydXN0ZWQsIHNvIHRoZSBjYWxsIHRvIGAkc2NlLmdldFRydXN0ZWRVcmwodHBsKWAgaXMgb21pdHRlZFxuICAgKiB3aGVuIGB0cGxgIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBgJHRlbXBsYXRlQ2FjaGVgIGhhcyB0aGUgbWF0Y2hpbmcgZW50cnkuXG4gICAqXG4gICAqIElmIHlvdSB3YW50IHRvIHBhc3MgY3VzdG9tIG9wdGlvbnMgdG8gdGhlIGAkaHR0cGAgc2VydmljZSwgc3VjaCBhcyBzZXR0aW5nIHRoZSBBY2NlcHQgaGVhZGVyIHlvdVxuICAgKiBjYW4gY29uZmlndXJlIHRoaXMgdmlhIHtAbGluayAkdGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIjaHR0cE9wdGlvbnN9LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkUmVzb3VyY2VVcmx9IHRwbCBUaGUgSFRUUCByZXF1ZXN0IHRlbXBsYXRlIFVSTFxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpZ25vcmVSZXF1ZXN0RXJyb3IgV2hldGhlciBvciBub3QgdG8gaWdub3JlIHRoZSBleGNlcHRpb24gd2hlbiB0aGUgcmVxdWVzdCBmYWlscyBvciB0aGUgdGVtcGxhdGUgaXMgZW1wdHlcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIGZvciB0aGUgSFRUUCByZXNwb25zZSBkYXRhIG9mIHRoZSBnaXZlbiBVUkwuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckZXhjZXB0aW9uSGFuZGxlcicsICckdGVtcGxhdGVDYWNoZScsICckaHR0cCcsICckcScsICckc2NlJyxcbiAgICBmdW5jdGlvbigkZXhjZXB0aW9uSGFuZGxlciwgJHRlbXBsYXRlQ2FjaGUsICRodHRwLCAkcSwgJHNjZSkge1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzKys7XG5cbiAgICAgICAgLy8gV2UgY29uc2lkZXIgdGhlIHRlbXBsYXRlIGNhY2hlIGhvbGRzIG9ubHkgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHNvXG4gICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBnbyB0aHJvdWdoIHdoaXRlbGlzdGluZyBhZ2FpbiBmb3Iga2V5cyB0aGF0IGFscmVhZHlcbiAgICAgICAgLy8gYXJlIGluY2x1ZGVkIGluIHRoZXJlLiBUaGlzIGFsc28gbWFrZXMgQW5ndWxhciBhY2NlcHQgYW55IHNjcmlwdFxuICAgICAgICAvLyBkaXJlY3RpdmUsIG5vIG1hdHRlciBpdHMgbmFtZS4gSG93ZXZlciwgd2Ugc3RpbGwgbmVlZCB0byB1bndyYXAgdHJ1c3RlZFxuICAgICAgICAvLyB0eXBlcy5cbiAgICAgICAgaWYgKCFpc1N0cmluZyh0cGwpIHx8IGlzVW5kZWZpbmVkKCR0ZW1wbGF0ZUNhY2hlLmdldCh0cGwpKSkge1xuICAgICAgICAgIHRwbCA9ICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHRwbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNmb3JtUmVzcG9uc2UgPSAkaHR0cC5kZWZhdWx0cyAmJiAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZTtcblxuICAgICAgICBpZiAoaXNBcnJheSh0cmFuc2Zvcm1SZXNwb25zZSkpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IHRyYW5zZm9ybVJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyICE9PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybVJlc3BvbnNlID09PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICRodHRwLmdldCh0cGwsIGV4dGVuZCh7XG4gICAgICAgICAgICBjYWNoZTogJHRlbXBsYXRlQ2FjaGUsXG4gICAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogdHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgICB9LCBodHRwT3B0aW9ucykpXG4gICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgIH0sIGhhbmRsZUVycm9yKTtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZXNwKSB7XG4gICAgICAgICAgaWYgKCFpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3AgPSAkdGVtcGxhdGVSZXF1ZXN0TWluRXJyKCd0cGxvYWQnLFxuICAgICAgICAgICAgICAgICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9IChIVFRQIHN0YXR1czogezF9IHsyfSknLFxuICAgICAgICAgICAgICAgIHRwbCwgcmVzcC5zdGF0dXMsIHJlc3Auc3RhdHVzVGV4dCk7XG5cbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKHJlc3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzID0gMDtcblxuICAgICAgcmV0dXJuIGhhbmRsZVJlcXVlc3RGbjtcbiAgICB9XG4gIF07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJGxvY2F0aW9uJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikge1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJHRlc3RhYmlsaXR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICovXG4gICAgdmFyIHRlc3RhYmlsaXR5ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5nc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSlcbiAgICAgKiB0byBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgYmluZGluZyBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nKSB7XG4gICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpO1xuICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICBmb3JFYWNoKGRhdGFCaW5kaW5nLCBmdW5jdGlvbihiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZUZvclJlZ2V4cChleHByZXNzaW9uKSArICcoXFxcXHN8XFxcXHx8JCknKTtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZS5pbmRleE9mKGV4cHJlc3Npb24pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRNb2RlbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdHdvLXdheSBmb3VuZCB2aWEgbmctbW9kZWwgdG9cbiAgICAgKiBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgbW9kZWwgZXhwcmVzc2lvbiB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9leGFjdE1hdGNoIElmIHRydWUsIG9ubHkgcmV0dXJucyBleGFjdCBtYXRjaGVzXG4gICAgICogICAgIGZvciB0aGUgZXhwcmVzc2lvbi5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5maW5kTW9kZWxzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBwcmVmaXhlcyA9IFsnbmctJywgJ2RhdGEtbmctJywgJ25nXFxcXDonXTtcbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcHJlZml4ZXMubGVuZ3RoOyArK3ApIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZUVxdWFscyA9IG9wdF9leGFjdE1hdGNoID8gJz0nIDogJyo9JztcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gJ1snICsgcHJlZml4ZXNbcF0gKyAnbW9kZWwnICsgYXR0cmlidXRlRXF1YWxzICsgJ1wiJyArIGV4cHJlc3Npb24gKyAnXCJdJztcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2dldExvY2F0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBmb3IgZ2V0dGluZyB0aGUgbG9jYXRpb24gaW4gYSBicm93c2VyIGFnbm9zdGljIHdheS4gUmV0dXJuc1xuICAgICAqICAgICB0aGUgcGF0aCwgc2VhcmNoLCBhbmQgaGFzaC4gKGUuZy4gL3BhdGg/YT1iI2hhc2gpXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZ2V0TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkbG9jYXRpb24udXJsKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjc2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBuYXZpZ2F0aW5nIHRvIGEgbG9jYXRpb24gd2l0aG91dCBkb2luZyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBsb2NhdGlvbiB1cmwgKHBhdGgsIHNlYXJjaCBhbmQgaGFzaCxcbiAgICAgKiAgICAgZS5nLiAvcGF0aD9hPWIjaGFzaCkgdG8gZ28gdG8uXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuc2V0TG9jYXRpb24gPSBmdW5jdGlvbih1cmwpIHtcbiAgICAgIGlmICh1cmwgIT09ICRsb2NhdGlvbi51cmwoKSkge1xuICAgICAgICAkbG9jYXRpb24udXJsKHVybCk7XG4gICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I3doZW5TdGFibGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENhbGxzIHRoZSBjYWxsYmFjayB3aGVuICR0aW1lb3V0IGFuZCAkaHR0cCByZXF1ZXN0cyBhcmUgY29tcGxldGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS53aGVuU3RhYmxlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMoY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGVzdGFiaWxpdHk7XG4gIH1dO1xufVxuXG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7XG5cbiAgICB2YXIgZGVmZXJyZWRzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJHRpbWVvdXRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcbiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgY2FsbGluZyBgJHRpbWVvdXRgIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAqIHRoZSBkZWxheSBoYXMgcGFzc2VkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiwgaWYgcHJvdmlkZWQsIGlzIGV4ZWN1dGVkLlxuICAgICAgKlxuICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xuICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAqXG4gICAgICAqIElmIHlvdSBvbmx5IHdhbnQgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBzb21lIHNwZWNpZmllZCBkZWxheVxuICAgICAgKiB0aGVuIHlvdSBjYW4gY2FsbCBgJHRpbWVvdXRgIHdpdGhvdXQgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgcHJvbWlzZVxuICAgICAgKiAgIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLlxuICAgICAgKlxuICAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgaW52b2tlQXBwbHkgPSBkZWxheTtcbiAgICAgICAgZGVsYXkgPSBmbjtcbiAgICAgICAgZm4gPSBub29wO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IHNsaWNlQXJncyhhcmd1bWVudHMsIDMpLFxuICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksXG4gICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgdGltZW91dElkO1xuXG4gICAgICB0aW1lb3V0SWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIHByb21pc2UuJCR0aW1lb3V0SWQgPSB0aW1lb3V0SWQ7XG4gICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkdGltZW91dCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLiBBcyBhIHJlc3VsdCBvZiB0aGlzLCB0aGUgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgUHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCR0aW1lb3V0YCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICAgICogICBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkdGltZW91dElkIGluIGRlZmVycmVkcykge1xuICAgICAgICAvLyBUaW1lb3V0IGNhbmNlbHMgc2hvdWxkIG5vdCByZXBvcnQgYW4gdW5oYW5kbGVkIHByb21pc2UuXG4gICAgICAgIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5wcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgICAgICBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICByZXR1cm4gJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHByb21pc2UuJCR0aW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGltZW91dDtcbiAgfV07XG59XG5cbi8vIE5PVEU6ICBUaGUgdXNhZ2Ugb2Ygd2luZG93IGFuZCBkb2N1bWVudCBpbnN0ZWFkIG9mICR3aW5kb3cgYW5kICRkb2N1bWVudCBoZXJlIGlzXG4vLyBkZWxpYmVyYXRlLiAgVGhpcyBzZXJ2aWNlIGRlcGVuZHMgb24gdGhlIHNwZWNpZmljIGJlaGF2aW9yIG9mIGFuY2hvciBub2RlcyBjcmVhdGVkIGJ5IHRoZVxuLy8gYnJvd3NlciAocmVzb2x2aW5nIGFuZCBwYXJzaW5nIFVSTHMpIHRoYXQgaXMgdW5saWtlbHkgdG8gYmUgcHJvdmlkZWQgYnkgbW9jayBvYmplY3RzIGFuZFxuLy8gY2F1c2UgdXMgdG8gYnJlYWsgdGVzdHMuICBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgYnJvd3NlciByZXNvbHZlcyBhIFVSTCBmb3IgWEhSLCBpdFxuLy8gZG9lc24ndCBrbm93IGFib3V0IG1vY2tlZCBsb2NhdGlvbnMgYW5kIHJlc29sdmVzIFVSTHMgdG8gdGhlIHJlYWwgZG9jdW1lbnQgLSB3aGljaCBpc1xuLy8gZXhhY3RseSB0aGUgYmVoYXZpb3IgbmVlZGVkIGhlcmUuICBUaGVyZSBpcyBsaXR0bGUgdmFsdWUgaXMgbW9ja2luZyB0aGVzZSBvdXQgZm9yIHRoaXNcbi8vIHNlcnZpY2UuXG52YXIgdXJsUGFyc2luZ05vZGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xudmFyIG9yaWdpblVybCA9IHVybFJlc29sdmUod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5cbi8qKlxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sXG4gKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmVcbiAqIFVSTCB3aWxsIGJlIHJlc29sdmVkIGludG8gYW4gYWJzb2x1dGUgVVJMIGluIHRoZSBjb250ZXh0IG9mIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkXG4gKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZVxuICogY29tcGF0aWJpbGl0eSAtIFNhZmFyaSAxKywgTW96aWxsYSAxKyBldGMuICBTZWVcbiAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBJRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBJRSA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXJcbiAqIGJyb3dzZXJzLiAgSG93ZXZlciwgdGhlIHBhcnNlZCBjb21wb25lbnRzIHdpbGwgbm90IGJlIHNldCBpZiB0aGUgVVJMIGFzc2lnbmVkIGRpZCBub3Qgc3BlY2lmeVxuICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gXCJmb29cIiwgdGhlbiBhLnByb3RvY29sLCBhLmhvc3QsIGV0Yy4gd2lsbCBiZSBlbXB0eS4pICBXZVxuICogd29yayBhcm91bmQgdGhhdCBieSBwZXJmb3JtaW5nIHRoZSBwYXJzaW5nIGluIGEgMm5kIHN0ZXAgYnkgdGFraW5nIGEgcHJldmlvdXNseSBub3JtYWxpemVkXG4gKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBldGMuXG4gKlxuICogUmVmZXJlbmNlczpcbiAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnRcbiAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXG4gKiAgIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMlxuICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS9cbiAqXG4gKiBAa2luZCBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZC5cbiAqIEBkZXNjcmlwdGlvbiBOb3JtYWxpemVzIGFuZCBwYXJzZXMgYSBVUkwuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBub3JtYWxpemVkIFVSTCBhcyBhIGRpY3Rpb25hcnkuXG4gKlxuICogICB8IG1lbWJlciBuYW1lICAgfCBEZXNjcmlwdGlvbiAgICB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBocmVmICAgICAgICAgIHwgQSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIHByb3ZpZGVkIFVSTCBpZiBpdCB3YXMgbm90IGFuIGFic29sdXRlIFVSTCB8XG4gKiAgIHwgcHJvdG9jb2wgICAgICB8IFRoZSBwcm90b2NvbCBpbmNsdWRpbmcgdGhlIHRyYWlsaW5nIGNvbG9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhvc3QgICAgICAgICAgfCBUaGUgaG9zdCBhbmQgcG9ydCAoaWYgdGhlIHBvcnQgaXMgbm9uLWRlZmF1bHQpIG9mIHRoZSBub3JtYWxpemVkVXJsICAgIHxcbiAqICAgfCBzZWFyY2ggICAgICAgIHwgVGhlIHNlYXJjaCBwYXJhbXMsIG1pbnVzIHRoZSBxdWVzdGlvbiBtYXJrICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaGFzaCAgICAgICAgICB8IFRoZSBoYXNoIHN0cmluZywgbWludXMgdGhlIGhhc2ggc3ltYm9sXG4gKiAgIHwgaG9zdG5hbWUgICAgICB8IFRoZSBob3N0bmFtZVxuICogICB8IHBvcnQgICAgICAgICAgfCBUaGUgcG9ydCwgd2l0aG91dCBcIjpcIlxuICogICB8IHBhdGhuYW1lICAgICAgfCBUaGUgcGF0aG5hbWUsIGJlZ2lubmluZyB3aXRoIFwiL1wiXG4gKlxuICovXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHVybCkge1xuICB2YXIgaHJlZiA9IHVybDtcblxuICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgaWYgKG1zaWUpIHtcbiAgICAvLyBOb3JtYWxpemUgYmVmb3JlIHBhcnNlLiAgUmVmZXIgSW1wbGVtZW50YXRpb24gTm90ZXMgb24gd2h5IHRoaXMgaXNcbiAgICAvLyBkb25lIGluIHR3byBzdGVwcyBvbiBJRS5cbiAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgfVxuXG4gIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgcmV0dXJuIHtcbiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKVxuICAgICAgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgOiAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgcmVxdWVzdCBVUkwgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBzYW1lLW9yaWdpbiByZXF1ZXN0IGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlcXVlc3RVcmwgVGhlIHVybCBvZiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAqIG9yIGEgcGFyc2VkIFVSTCBvYmplY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gdXJsSXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHtcbiAgdmFyIHBhcnNlZCA9IChpc1N0cmluZyhyZXF1ZXN0VXJsKSkgPyB1cmxSZXNvbHZlKHJlcXVlc3RVcmwpIDogcmVxdWVzdFVybDtcbiAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVybC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR3aW5kb3dcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2BcbiAqIGlzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0LCBpdCBjYXVzZXMgdGVzdGFiaWxpdHkgcHJvYmxlbXMsIGJlY2F1c2VcbiAqIGl0IGlzIGEgZ2xvYmFsIHZhcmlhYmxlLiBJbiBhbmd1bGFyIHdlIGFsd2F5cyByZWZlciB0byBpdCB0aHJvdWdoIHRoZVxuICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy5cbiAqXG4gKiBFeHByZXNzaW9ucywgbGlrZSB0aGUgb25lIGRlZmluZWQgZm9yIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlIGluIHRoZSBleGFtcGxlXG4gKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzXG4gKiBubyByaXNrIG9mIGluYWR2ZXJ0ZW50bHkgY29kaW5nIGluIGEgZGVwZW5kZW5jeSBvbiBhIGdsb2JhbCB2YWx1ZSBpbiBzdWNoIGFuXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJ3aW5kb3dFeGFtcGxlXCIgbmFtZT1cIndpbmRvdy1zZXJ2aWNlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd3aW5kb3dFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsICR3aW5kb3cpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnSGVsbG8sIFdvcmxkISc7XG4gICAgICAgICAgICAgJHNjb3BlLmRvR3JlZXRpbmcgPSBmdW5jdGlvbihncmVldGluZykge1xuICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImdyZWV0aW5nXCIgYXJpYS1sYWJlbD1cImdyZWV0aW5nXCIgLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJkb0dyZWV0aW5nKGdyZWV0aW5nKVwiPkFMRVJUPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBncmVldGluZyBpbiB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7XG4gICAgICAgZWxlbWVudChieS5tb2RlbCgnZ3JlZXRpbmcnKSkuc2VuZEtleXMoJ0hlbGxvLCBFMkUgVGVzdHMnKTtcbiAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyXG4gICAgICAgLy8gZWxlbWVudCgnOmJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IHZhbHVlRm4od2luZG93KTtcbn1cblxuLyoqXG4gKiBAbmFtZSAkJGNvb2tpZVJlYWRlclxuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyBhIHByaXZhdGUgc2VydmljZSBmb3IgcmVhZGluZyBjb29raWVzIHVzZWQgYnkgJGh0dHAgYW5kIG5nQ29va2llc1xuICpcbiAqIEByZXR1cm4ge09iamVjdH0gYSBrZXkvdmFsdWUgbWFwIG9mIHRoZSBjdXJyZW50IGNvb2tpZXNcbiAqL1xuZnVuY3Rpb24gJCRDb29raWVSZWFkZXIoJGRvY3VtZW50KSB7XG4gIHZhciByYXdEb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fTtcbiAgdmFyIGxhc3RDb29raWVzID0ge307XG4gIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7XG5cbiAgZnVuY3Rpb24gc2FmZUdldENvb2tpZShyYXdEb2N1bWVudCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmF3RG9jdW1lbnQuY29va2llIHx8ICcnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KHN0cikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4LCBuYW1lO1xuICAgIHZhciBjdXJyZW50Q29va2llU3RyaW5nID0gc2FmZUdldENvb2tpZShyYXdEb2N1bWVudCk7XG5cbiAgICBpZiAoY3VycmVudENvb2tpZVN0cmluZyAhPT0gbGFzdENvb2tpZVN0cmluZykge1xuICAgICAgbGFzdENvb2tpZVN0cmluZyA9IGN1cnJlbnRDb29raWVTdHJpbmc7XG4gICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoJzsgJyk7XG4gICAgICBsYXN0Q29va2llcyA9IHt9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29va2llID0gY29va2llQXJyYXlbaV07XG4gICAgICAgIGluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzXG4gICAgICAgICAgbmFtZSA9IHNhZmVEZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZygwLCBpbmRleCkpO1xuICAgICAgICAgIC8vIHRoZSBmaXJzdCB2YWx1ZSB0aGF0IGlzIHNlZW4gZm9yIGEgY29va2llIGlzIHRoZSBtb3N0XG4gICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0XG4gICAgICAgICAgLy8gZm9sbG93IGFyZSBmb3IgbGVzcyBzcGVjaWZpYyBwYXRocy5cbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobGFzdENvb2tpZXNbbmFtZV0pKSB7XG4gICAgICAgICAgICBsYXN0Q29va2llc1tuYW1lXSA9IHNhZmVEZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZyhpbmRleCArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxhc3RDb29raWVzO1xuICB9O1xufVxuXG4kJENvb2tpZVJlYWRlci4kaW5qZWN0ID0gWyckZG9jdW1lbnQnXTtcblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSAkJENvb2tpZVJlYWRlcjtcbn1cblxuLyogZ2xvYmFsIGN1cnJlbmN5RmlsdGVyOiB0cnVlLFxuIGRhdGVGaWx0ZXI6IHRydWUsXG4gZmlsdGVyRmlsdGVyOiB0cnVlLFxuIGpzb25GaWx0ZXI6IHRydWUsXG4gbGltaXRUb0ZpbHRlcjogdHJ1ZSxcbiBsb3dlcmNhc2VGaWx0ZXI6IHRydWUsXG4gbnVtYmVyRmlsdGVyOiB0cnVlLFxuIG9yZGVyQnlGaWx0ZXI6IHRydWUsXG4gdXBwZXJjYXNlRmlsdGVyOiB0cnVlLFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlXG4gKiBEZXBlbmRlbmN5IEluamVjdGVkLiBUbyBhY2hpZXZlIHRoaXMgYSBmaWx0ZXIgZGVmaW5pdGlvbiBjb25zaXN0cyBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXNcbiAqIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICogKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAqIDwvZGl2PlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb25cbiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikge1xuICogICAgIC8vIGNyZWF0ZSBhIHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgaW5qZWN0aW9uIChub3QgYWx3YXlzIG5lZWRlZClcbiAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXtcbiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGVcbiAqICAgICAvLyBncmVldCBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIERJLlxuICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7XG4gKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlXG4gKiAgICAgICAvLyB0byBnZW5lcmF0ZSBzYWx1dGF0aW9uXG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5XG4gKiAgICAgICAgIHJldHVybiB0ZXh0ICYmIGdyZWV0KHRleHQpIHx8IHRleHQ7XG4gKiAgICAgICB9O1xuICogICAgIH0pO1xuICogICB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgZmlsdGVyIGZ1bmN0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRpbmplY3RvcmAgdW5kZXIgdGhlIGZpbHRlciBuYW1lIHN1ZmZpeCB3aXRoXG4gKiBgRmlsdGVyYC5cbiAqXG4gKiBgYGBqc1xuICogICBpdCgnc2hvdWxkIGJlIHRoZSBzYW1lIGluc3RhbmNlJywgaW5qZWN0KFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikge1xuICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIC4uLjtcbiAqICAgICAgIH0pO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlciwgcmV2ZXJzZUZpbHRlcikge1xuICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTtcbiAqICAgICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYW5ndWxhciBmaWx0ZXJzIHdvcmssIGFuZCBob3cgdG8gY3JlYXRlIHlvdXIgb3duIGZpbHRlcnMsIHNlZVxuICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBkZXNjcmlwdGlvblxuICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci5cbiAqXG4gKiBUaGV5IGNhbiBiZSB1c2VkIGluIHZpZXcgdGVtcGxhdGVzLCBjb250cm9sbGVycyBvciBzZXJ2aWNlcy5Bbmd1bGFyIGNvbWVzXG4gKiB3aXRoIGEgY29sbGVjdGlvbiBvZiBbYnVpbHQtaW4gZmlsdGVyc10oYXBpL25nL2ZpbHRlciksIGJ1dCBpdCBpcyBlYXN5IHRvXG4gKiBkZWZpbmUgeW91ciBvd24gYXMgd2VsbC5cbiAqXG4gKiBUaGUgZ2VuZXJhbCBzeW50YXggaW4gdGVtcGxhdGVzIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogYGBgaHRtbFxuICoge3sgZXhwcmVzc2lvbiBbfCBmaWx0ZXJfbmFtZVs6cGFyYW1ldGVyX3ZhbHVlXSAuLi4gXSB9fVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCIkZmlsdGVyXCIgbW9kdWxlPVwiZmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5DdHJsXCI+XG4gICAgICAgIDxoMz57eyBvcmlnaW5hbFRleHQgfX08L2gzPlxuICAgICAgICA8aDM+e3sgZmlsdGVyZWRUZXh0IH19PC9oMz5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgJHNjb3BlLm9yaWdpbmFsVGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICovXG4kRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7XG4gIHZhciBzdWZmaXggPSAnRmlsdGVyJztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiwgb3IgYW4gb2JqZWN0IG1hcCBvZiBmaWx0ZXJzIHdoZXJlXG4gICAqICAgIHRoZSBrZXlzIGFyZSB0aGUgZmlsdGVyIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmlsdGVyIGZhY3Rvcmllcy5cbiAgICpcbiAgICogICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogICAgKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICogICAgTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICogICAgeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAqICAgIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAqICAgIDwvZGl2PlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBJZiB0aGUgZmlyc3QgYXJndW1lbnQgd2FzIGEgc3RyaW5nLCBhIGZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBmaWx0ZXIgdG8gYmUgcmVnaXN0ZXJlZC5cbiAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXBcbiAgICogICAgb2YgdGhlIHJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIHZhciBmaWx0ZXJzID0ge307XG4gICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uKGZpbHRlciwga2V5KSB7XG4gICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpO1xuICAgIH1cbiAgfVxuICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7XG4gICAgfTtcbiAgfV07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qIGdsb2JhbFxuICAgIGN1cnJlbmN5RmlsdGVyOiBmYWxzZSxcbiAgICBkYXRlRmlsdGVyOiBmYWxzZSxcbiAgICBmaWx0ZXJGaWx0ZXI6IGZhbHNlLFxuICAgIGpzb25GaWx0ZXI6IGZhbHNlLFxuICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLFxuICAgIGxvd2VyY2FzZUZpbHRlcjogZmFsc2UsXG4gICAgbnVtYmVyRmlsdGVyOiBmYWxzZSxcbiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSxcbiAgICB1cHBlcmNhc2VGaWx0ZXI6IGZhbHNlXG4gICovXG5cbiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpO1xuICByZWdpc3RlcignZGF0ZScsIGRhdGVGaWx0ZXIpO1xuICByZWdpc3RlcignZmlsdGVyJywgZmlsdGVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2xpbWl0VG8nLCBsaW1pdFRvRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2xvd2VyY2FzZScsIGxvd2VyY2FzZUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpO1xuICByZWdpc3Rlcignb3JkZXJCeScsIG9yZGVyQnlGaWx0ZXIpO1xuICByZWdpc3RlcigndXBwZXJjYXNlJywgdXBwZXJjYXNlRmlsdGVyKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBmaWx0ZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc291cmNlIGFycmF5LlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICAgKipOb3RlKio6IElmIHRoZSBhcnJheSBjb250YWlucyBvYmplY3RzIHRoYXQgcmVmZXJlbmNlIHRoZW1zZWx2ZXMsIGZpbHRlcmluZyBpcyBub3QgcG9zc2libGUuXG4gKiA8L2Rpdj5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cbiAqICAgYGFycmF5YC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIHVzZWQgZm9yIG1hdGNoaW5nIGFnYWluc3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBgYXJyYXlgLiBBbGwgc3RyaW5ncyBvclxuICogICAgIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgbWF0Y2ggdGhpcyBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBhbHNvXG4gKiAgICAgYXBwbGllcyB0byBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuXG4gKiAgICAgVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqXG4gKiAgIC0gYE9iamVjdGA6IEEgcGF0dGVybiBvYmplY3QgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHNwZWNpZmljIHByb3BlcnRpZXMgb24gb2JqZWN0cyBjb250YWluZWRcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXG4gKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAqICAgICBwcm9wZXJ0eSBuYW1lIChgJGAgYnkgZGVmYXVsdCkgY2FuIGJlIHVzZWQgKGUuZy4gYXMgaW4gYHskOiBcInRleHRcIn1gKSB0byBhY2NlcHQgYSBtYXRjaFxuICogICAgIGFnYWluc3QgYW55IHByb3BlcnR5IG9mIHRoZSBvYmplY3Qgb3IgaXRzIG5lc3RlZCBvYmplY3QgcHJvcGVydGllcy4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlXG4gKiAgICAgc2ltcGxlIHN1YnN0cmluZyBtYXRjaCB3aXRoIGEgYHN0cmluZ2AgYXMgZGVzY3JpYmVkIGFib3ZlLiBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIGNhbiBiZVxuICogICAgIG92ZXJ3cml0dGVuLCB1c2luZyB0aGUgYGFueVByb3BlcnR5S2V5YCBwYXJhbWV0ZXIuXG4gKiAgICAgVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqICAgICBGb3IgZXhhbXBsZSBge25hbWU6IFwiIU1cIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYFxuICogICAgIG5vdCBjb250YWluaW5nIFwiTVwiLlxuICpcbiAqICAgICBOb3RlIHRoYXQgYSBuYW1lZCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb25seSwgd2hpbGUgdGhlIHNwZWNpYWxcbiAqICAgICBgJGAgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9yIGRlZXBlci4gRS5nLiBhbiBhcnJheSBpdGVtIGxpa2VcbiAqICAgICBge25hbWU6IHtmaXJzdDogJ0pvaG4nLCBsYXN0OiAnRG9lJ319YCB3aWxsICoqbm90KiogYmUgbWF0Y2hlZCBieSBge25hbWU6ICdKb2huJ31gLCBidXRcbiAqICAgICAqKndpbGwqKiBiZSBtYXRjaGVkIGJ5IGB7JDogJ0pvaG4nfWAuXG4gKlxuICogICAtIGBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGFycmF5KWA6IEEgcHJlZGljYXRlIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHdyaXRlIGFyYml0cmFyeSBmaWx0ZXJzLlxuICogICAgIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIHdpdGggdGhlIGVsZW1lbnQsIGl0cyBpbmRleCwgYW5kXG4gKiAgICAgdGhlIGVudGlyZSBhcnJheSBpdHNlbGYgYXMgYXJndW1lbnRzLlxuICpcbiAqICAgICBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQgdGhlIHByZWRpY2F0ZSByZXR1cm5lZCB0cnVlIGZvci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpfHRydWV8ZmFsc2V9IFtjb21wYXJhdG9yXSBDb21wYXJhdG9yIHdoaWNoIGlzIHVzZWQgaW5cbiAqICAgICBkZXRlcm1pbmluZyBpZiB2YWx1ZXMgcmV0cmlldmVkIHVzaW5nIGBleHByZXNzaW9uYCAod2hlbiBpdCBpcyBub3QgYSBmdW5jdGlvbikgc2hvdWxkIGJlXG4gKiAgICAgY29uc2lkZXJlZCBhIG1hdGNoIGJhc2VkIG9uIHRoZSB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsXG4gKiAgICAgdmFsdWUgKGZyb20gdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpYDpcbiAqICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kXG4gKiAgICAgc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggdmFsdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkIGVxdWFsLlxuICpcbiAqICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoYWN0dWFsLCBleHBlY3RlZCl9YC5cbiAqICAgICBUaGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuXG4gKlxuICogICAtIGBmYWxzZWA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGEgY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS4gUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0XG4gKiAgICAgcHJpbWl0aXZlcywgdW5sZXNzIHRoZXkgaGF2ZSBhIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZCAoZS5nLiBgRGF0ZWAgb2JqZWN0cykuXG4gKlxuICpcbiAqICAgRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FueVByb3BlcnR5S2V5XSBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIHRoYXQgbWF0Y2hlcyBhZ2FpbnN0IGFueSBwcm9wZXJ0eS5cbiAqICAgICBCeSBkZWZhdWx0IGAkYC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjc2J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dXCI+PC9kaXY+XG5cbiAgICAgICA8bGFiZWw+U2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+PC9sYWJlbD5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hUZXh0UmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDxocj5cbiAgICAgICA8bGFiZWw+QW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPjwvbGFiZWw+IDxicj5cbiAgICAgICA8bGFiZWw+TmFtZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5uYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPkVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaE9ialJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZE9iaiBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaDpzdHJpY3RcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIGV4cGVjdEZyaWVuZE5hbWVzID0gZnVuY3Rpb24oZXhwZWN0ZWROYW1lcywga2V5KSB7XG4gICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKHdkLCBpKSB7XG4gICAgICAgICAgICAgZXhwZWN0KHdkLmdldFRleHQoKSkudG9NYXRjaChleHBlY3RlZE5hbWVzW2ldKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgICB9O1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaFRleHQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2hUZXh0JykpO1xuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnbScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnQWRhbSddLCAnZnJpZW5kJyk7XG5cbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJzc2Jyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoQW55ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLiQnKSk7XG4gICAgICAgICBzZWFyY2hBbnkuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaE5hbWUgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2gubmFtZScpKTtcbiAgICAgICAgIHZhciBzdHJpY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzdHJpY3QnKSk7XG4gICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hOYW1lLnNlbmRLZXlzKCdKdWxpZScpO1xuICAgICAgICAgc3RyaWN0LmNsaWNrKCk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSkge1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICBpZiAoYXJyYXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJ2ZpbHRlcicpKCdub3RhcnJheScsICdFeHBlY3RlZCBhcnJheSBidXQgcmVjZWl2ZWQ6IHswfScsIGFycmF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbnlQcm9wZXJ0eUtleSA9IGFueVByb3BlcnR5S2V5IHx8ICckJztcbiAgICB2YXIgZXhwcmVzc2lvblR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGV4cHJlc3Npb24pO1xuICAgIHZhciBwcmVkaWNhdGVGbjtcbiAgICB2YXIgbWF0Y2hBZ2FpbnN0QW55UHJvcDtcblxuICAgIHN3aXRjaCAoZXhwcmVzc2lvblR5cGUpIHtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgcHJlZGljYXRlRm4gPSBleHByZXNzaW9uO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbWF0Y2hBZ2FpbnN0QW55UHJvcCA9IHRydWU7XG4gICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFycmF5LCBwcmVkaWNhdGVGbik7XG4gIH07XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGBmaWx0ZXJGaWx0ZXJgXG5mdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICB2YXIgc2hvdWxkTWF0Y2hQcmltaXRpdmVzID0gaXNPYmplY3QoZXhwcmVzc2lvbikgJiYgKGFueVByb3BlcnR5S2V5IGluIGV4cHJlc3Npb24pO1xuICB2YXIgcHJlZGljYXRlRm47XG5cbiAgaWYgKGNvbXBhcmF0b3IgPT09IHRydWUpIHtcbiAgICBjb21wYXJhdG9yID0gZXF1YWxzO1xuICB9IGVsc2UgaWYgKCFpc0Z1bmN0aW9uKGNvbXBhcmF0b3IpKSB7XG4gICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhY3R1YWwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGB1bmRlZmluZWRgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoYWN0dWFsID09PSBudWxsKSB8fCAoZXhwZWN0ZWQgPT09IG51bGwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGBudWxsYDsgb25seSBtYXRjaCBhZ2FpbnN0IGBudWxsYFxuICAgICAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChleHBlY3RlZCkgfHwgKGlzT2JqZWN0KGFjdHVhbCkgJiYgIWhhc0N1c3RvbVRvU3RyaW5nKGFjdHVhbCkpKSB7XG4gICAgICAgIC8vIFNob3VsZCBub3QgY29tcGFyZSBwcmltaXRpdmVzIGFnYWluc3Qgb2JqZWN0cywgdW5sZXNzIHRoZXkgaGF2ZSBjdXN0b20gYHRvU3RyaW5nYCBtZXRob2RcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhY3R1YWwgPSBsb3dlcmNhc2UoJycgKyBhY3R1YWwpO1xuICAgICAgZXhwZWN0ZWQgPSBsb3dlcmNhc2UoJycgKyBleHBlY3RlZCk7XG4gICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpICE9PSAtMTtcbiAgICB9O1xuICB9XG5cbiAgcHJlZGljYXRlRm4gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKHNob3VsZE1hdGNoUHJpbWl0aXZlcyAmJiAhaXNPYmplY3QoaXRlbSkpIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHByZXNzaW9uW2FueVByb3BlcnR5S2V5XSwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfTtcblxuICByZXR1cm4gcHJlZGljYXRlRm47XG59XG5cbmZ1bmN0aW9uIGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwZWN0ZWQpO1xuXG4gIGlmICgoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJykgJiYgKGV4cGVjdGVkLmNoYXJBdCgwKSA9PT0gJyEnKSkge1xuICAgIHJldHVybiAhZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZC5zdWJzdHJpbmcoMSksIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGFjdHVhbCkpIHtcbiAgICAvLyBJbiBjYXNlIGBhY3R1YWxgIGlzIGFuIGFycmF5LCBjb25zaWRlciBpdCBhIG1hdGNoXG4gICAgLy8gaWYgQU5ZIG9mIGl0J3MgaXRlbXMgbWF0Y2hlcyBgZXhwZWN0ZWRgXG4gICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoIChhY3R1YWxUeXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAobWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICAvLyBVbmRlciBjZXJ0YWluLCByYXJlLCBjaXJjdW1zdGFuY2VzLCBrZXkgbWF5IG5vdCBiZSBhIHN0cmluZyBhbmQgYGNoYXJBdGAgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE1NjQ0XG4gICAgICAgICAgaWYgKGtleS5jaGFyQXQgJiYgKGtleS5jaGFyQXQoMCkgIT09ICckJykgJiZcbiAgICAgICAgICAgICAgZGVlcENvbXBhcmUoYWN0dWFsW2tleV0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gZXhwZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZFtrZXldO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVmFsKSB8fCBpc1VuZGVmaW5lZChleHBlY3RlZFZhbCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXRjaEFueVByb3BlcnR5ID0ga2V5ID09PSBhbnlQcm9wZXJ0eUtleTtcbiAgICAgICAgICB2YXIgYWN0dWFsVmFsID0gbWF0Y2hBbnlQcm9wZXJ0eSA/IGFjdHVhbCA6IGFjdHVhbFtrZXldO1xuICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICB9XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfVxufVxuXG4vLyBVc2VkIGZvciBlYXNpbHkgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gYG51bGxgIGFuZCBhY3R1YWwgYG9iamVjdGBcbmZ1bmN0aW9uIGdldFR5cGVGb3JGaWx0ZXIodmFsKSB7XG4gIHJldHVybiAodmFsID09PSBudWxsKSA/ICdudWxsJyA6IHR5cGVvZiB2YWw7XG59XG5cbnZhciBNQVhfRElHSVRTID0gMjI7XG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG52YXIgWkVST19DSEFSID0gJzAnO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCIgbmFtZT1cImN1cnJlbmN5LWZpbHRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cImFtb3VudFwiIGFyaWEtbGFiZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWRlZmF1bHRcIj57e2Ftb3VudCB8IGN1cnJlbmN5fX08L3NwYW4+PGJyPlxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWN1c3RvbVwiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBubyBmcmFjdGlvbnMgKDApOiA8c3BhbiBpZD1cImN1cnJlbmN5LW5vLWZyYWN0aW9uc1wiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCI6MH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJyQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNScpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnLSQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkgb3IgLUluZmluaXR5KSwgdGhlIEluZmluaXR5IHN5bWJvbCAn4oieJyBvciAnLeKInicgaXMgcmV0dXJuZWQsIHJlc3BlY3RpdmVseS5cbiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uXG4gKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICogQHJldHVybnMge3N0cmluZ30gTnVtYmVyIHJvdW5kZWQgdG8gYGZyYWN0aW9uU2l6ZWAgYXBwcm9wcmlhdGVseSBmb3JtYXR0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgIGxvY2FsZSAoZS5nLiwgaW4gdGhlIGVuX1VTIGxvY2FsZSBpdCB3aWxsIGhhdmUgXCIuXCIgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIGFuZFxuICogICAgICAgICAgICAgICAgICAgaW5jbHVkZSBcIixcIiBncm91cCBzZXBhcmF0b3JzIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQpLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCIgbmFtZT1cIm51bWJlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IDxzcGFuIGlkPSdudW1iZXItZGVmYXVsdCc+e3t2YWwgfCBudW1iZXJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+XG4gICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM0LjU2OCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbm51bWJlckZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uU2l6ZSkge1xuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChudW1iZXIgPT0gbnVsbClcbiAgICAgICAgPyBudW1iZXJcbiAgICAgICAgOiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCxcbiAgICAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25TaXplKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIG51bWJlciAoYXMgYSBzdHJpbmcpIGludG8gdGhyZWUgY29tcG9uZW50cyB0aGF0IGNhbiBiZSB1c2VkXG4gKiBmb3IgZm9ybWF0dGluZyB0aGUgbnVtYmVyLlxuICpcbiAqIChTaWduaWZpY2FudCBiaXRzIG9mIHRoaXMgcGFyc2UgYWxnb3JpdGhtIGNhbWUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvKVxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gbnVtU3RyIFRoZSBudW1iZXIgdG8gcGFyc2VcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhpcyBudW1iZXIsIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBrZXlzOlxuICogIC0gZCA6IGFuIGFycmF5IG9mIGRpZ2l0cyBjb250YWluaW5nIGxlYWRpbmcgemVyb3MgYXMgbmVjZXNzYXJ5XG4gKiAgLSBpIDogdGhlIG51bWJlciBvZiB0aGUgZGlnaXRzIGluIGBkYCB0aGF0IGFyZSB0byB0aGUgbGVmdCBvZiB0aGUgZGVjaW1hbCBwb2ludFxuICogIC0gZSA6IHRoZSBleHBvbmVudCBmb3IgbnVtYmVycyB0aGF0IHdvdWxkIG5lZWQgbW9yZSB0aGFuIGBNQVhfRElHSVRTYCBkaWdpdHMgaW4gYGRgXG4gKlxuICovXG5mdW5jdGlvbiBwYXJzZShudW1TdHIpIHtcbiAgdmFyIGV4cG9uZW50ID0gMCwgZGlnaXRzLCBudW1iZXJPZkludGVnZXJEaWdpdHM7XG4gIHZhciBpLCBqLCB6ZXJvcztcblxuICAvLyBEZWNpbWFsIHBvaW50P1xuICBpZiAoKG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IG51bVN0ci5pbmRleE9mKERFQ0lNQUxfU0VQKSkgPiAtMSkge1xuICAgIG51bVN0ciA9IG51bVN0ci5yZXBsYWNlKERFQ0lNQUxfU0VQLCAnJyk7XG4gIH1cblxuICAvLyBFeHBvbmVudGlhbCBmb3JtP1xuICBpZiAoKGkgPSBudW1TdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcbiAgICAvLyBXb3JrIG91dCB0aGUgZXhwb25lbnQuXG4gICAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA8IDApIG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IGk7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzICs9ICtudW1TdHIuc2xpY2UoaSArIDEpO1xuICAgIG51bVN0ciA9IG51bVN0ci5zdWJzdHJpbmcoMCwgaSk7XG4gIH0gZWxzZSBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkge1xuICAgIC8vIFRoZXJlIHdhcyBubyBkZWNpbWFsIHBvaW50IG9yIGV4cG9uZW50IHNvIGl0IGlzIGFuIGludGVnZXIuXG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmxlbmd0aDtcbiAgfVxuXG4gIC8vIENvdW50IHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcy5cbiAgZm9yIChpID0gMDsgbnVtU3RyLmNoYXJBdChpKSA9PT0gWkVST19DSEFSOyBpKyspIHsgLyogZW1wdHkgKi8gfVxuXG4gIGlmIChpID09PSAoemVyb3MgPSBudW1TdHIubGVuZ3RoKSkge1xuICAgIC8vIFRoZSBkaWdpdHMgYXJlIGFsbCB6ZXJvLlxuICAgIGRpZ2l0cyA9IFswXTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9IGVsc2Uge1xuICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3NcbiAgICB6ZXJvcy0tO1xuICAgIHdoaWxlIChudW1TdHIuY2hhckF0KHplcm9zKSA9PT0gWkVST19DSEFSKSB6ZXJvcy0tO1xuXG4gICAgLy8gVHJhaWxpbmcgemVyb3MgYXJlIGluc2lnbmlmaWNhbnQgc28gaWdub3JlIHRoZW1cbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgLT0gaTtcbiAgICBkaWdpdHMgPSBbXTtcbiAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLlxuICAgIGZvciAoaiA9IDA7IGkgPD0gemVyb3M7IGkrKywgaisrKSB7XG4gICAgICBkaWdpdHNbal0gPSArbnVtU3RyLmNoYXJBdChpKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG92ZXJmbG93cyB0aGUgbWF4aW11bSBhbGxvd2VkIGRpZ2l0cyB0aGVuIHVzZSBhbiBleHBvbmVudC5cbiAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA+IE1BWF9ESUdJVFMpIHtcbiAgICBkaWdpdHMgPSBkaWdpdHMuc3BsaWNlKDAsIE1BWF9ESUdJVFMgLSAxKTtcbiAgICBleHBvbmVudCA9IG51bWJlck9mSW50ZWdlckRpZ2l0cyAtIDE7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gMTtcbiAgfVxuXG4gIHJldHVybiB7IGQ6IGRpZ2l0cywgZTogZXhwb25lbnQsIGk6IG51bWJlck9mSW50ZWdlckRpZ2l0cyB9O1xufVxuXG4vKipcbiAqIFJvdW5kIHRoZSBwYXJzZWQgbnVtYmVyIHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBUaGlzIGZ1bmN0aW9uIGNoYW5nZWQgdGhlIHBhcnNlZE51bWJlciBpbi1wbGFjZVxuICovXG5mdW5jdGlvbiByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgbWluRnJhYywgbWF4RnJhYykge1xuICAgIHZhciBkaWdpdHMgPSBwYXJzZWROdW1iZXIuZDtcbiAgICB2YXIgZnJhY3Rpb25MZW4gPSBkaWdpdHMubGVuZ3RoIC0gcGFyc2VkTnVtYmVyLmk7XG5cbiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQ7IGArZnJhY3Rpb25TaXplYCBjb252ZXJ0cyBpdCB0byBhIG51bWJlclxuICAgIGZyYWN0aW9uU2l6ZSA9IChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSA/IE1hdGgubWluKE1hdGgubWF4KG1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgbWF4RnJhYykgOiArZnJhY3Rpb25TaXplO1xuXG4gICAgLy8gVGhlIGluZGV4IG9mIHRoZSBkaWdpdCB0byB3aGVyZSByb3VuZGluZyBpcyB0byBvY2N1clxuICAgIHZhciByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGRpZ2l0ID0gZGlnaXRzW3JvdW5kQXRdO1xuXG4gICAgaWYgKHJvdW5kQXQgPiAwKSB7XG4gICAgICAvLyBEcm9wIGZyYWN0aW9uYWwgZGlnaXRzIGJleW9uZCBgcm91bmRBdGBcbiAgICAgIGRpZ2l0cy5zcGxpY2UoTWF0aC5tYXgocGFyc2VkTnVtYmVyLmksIHJvdW5kQXQpKTtcblxuICAgICAgLy8gU2V0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0cyBiZXlvbmQgYHJvdW5kQXRgIHRvIDBcbiAgICAgIGZvciAodmFyIGogPSByb3VuZEF0OyBqIDwgZGlnaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRpZ2l0c1tqXSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHJvdW5kZWQgdG8gemVybyBzbyByZXNldCB0aGUgcGFyc2VkTnVtYmVyXG4gICAgICBmcmFjdGlvbkxlbiA9IE1hdGgubWF4KDAsIGZyYWN0aW9uTGVuKTtcbiAgICAgIHBhcnNlZE51bWJlci5pID0gMTtcbiAgICAgIGRpZ2l0cy5sZW5ndGggPSBNYXRoLm1heCgxLCByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgMSk7XG4gICAgICBkaWdpdHNbMF0gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCByb3VuZEF0OyBpKyspIGRpZ2l0c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGRpZ2l0ID49IDUpIHtcbiAgICAgIGlmIChyb3VuZEF0IC0gMSA8IDApIHtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPiByb3VuZEF0OyBrLS0pIHtcbiAgICAgICAgICBkaWdpdHMudW5zaGlmdCgwKTtcbiAgICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgICB9XG4gICAgICAgIGRpZ2l0cy51bnNoaWZ0KDEpO1xuICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlnaXRzW3JvdW5kQXQgLSAxXSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhZCBvdXQgd2l0aCB6ZXJvcyB0byBnZXQgdGhlIHJlcXVpcmVkIGZyYWN0aW9uIGxlbmd0aFxuICAgIGZvciAoOyBmcmFjdGlvbkxlbiA8IE1hdGgubWF4KDAsIGZyYWN0aW9uU2l6ZSk7IGZyYWN0aW9uTGVuKyspIGRpZ2l0cy5wdXNoKDApO1xuXG5cbiAgICAvLyBEbyBhbnkgY2FycnlpbmcsIGUuZy4gYSBkaWdpdCB3YXMgcm91bmRlZCB1cCB0byAxMFxuICAgIHZhciBjYXJyeSA9IGRpZ2l0cy5yZWR1Y2VSaWdodChmdW5jdGlvbihjYXJyeSwgZCwgaSwgZGlnaXRzKSB7XG4gICAgICBkID0gZCArIGNhcnJ5O1xuICAgICAgZGlnaXRzW2ldID0gZCAlIDEwO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCAvIDEwKTtcbiAgICB9LCAwKTtcbiAgICBpZiAoY2FycnkpIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KGNhcnJ5KTtcbiAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgfVxufVxuXG4vKipcbiAqIEZvcm1hdCBhIG51bWJlciBpbnRvIGEgc3RyaW5nXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIGZvcm1hdFxuICogQHBhcmFtICB7e1xuICogICAgICAgICAgIG1pbkZyYWMsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIG1heEZyYWMsIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIGdTaXplLCAgIC8vIG51bWJlciBvZiBkaWdpdHMgaW4gZWFjaCBncm91cCBvZiBzZXBhcmF0ZWQgZGlnaXRzXG4gKiAgICAgICAgICAgbGdTaXplLCAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgbGFzdCBncm91cCBvZiBkaWdpdHMgYmVmb3JlIHRoZSBkZWNpbWFsIHNlcGFyYXRvclxuICogICAgICAgICAgIG5lZ1ByZSwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gaW4gZnJvbnQgb2YgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYC1gIG9yIGAoYCkpXG4gKiAgICAgICAgICAgcG9zUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIHBvc2l0aXZlIG51bWJlclxuICogICAgICAgICAgIG5lZ1N1ZiwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYClgKVxuICogICAgICAgICAgIHBvc1N1ZiAgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICAgICAgfX0gcGF0dGVyblxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFNlcCAgICAgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBncm91cHMgb2YgbnVtYmVyIChlLmcuIGAsYClcbiAqIEBwYXJhbSAge3N0cmluZ30gZGVjaW1hbFNlcCAgIFRoZSBzdHJpbmcgdG8gYWN0IGFzIHRoZSBkZWNpbWFsIHNlcGFyYXRvciAoZS5nLiBgLmApXG4gKiBAcGFyYW0gIHtbdHlwZV19IGZyYWN0aW9uU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0IG9mIHRoZSBudW1iZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgIFRoZSBudW1iZXIgZm9ybWF0dGVkIGFzIGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcblxuICBpZiAoIShpc1N0cmluZyhudW1iZXIpIHx8IGlzTnVtYmVyKG51bWJlcikpIHx8IGlzTmFOKG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgaXNJbmZpbml0eSA9ICFpc0Zpbml0ZShudW1iZXIpO1xuICB2YXIgaXNaZXJvID0gZmFsc2U7XG4gIHZhciBudW1TdHIgPSBNYXRoLmFicyhudW1iZXIpICsgJycsXG4gICAgICBmb3JtYXR0ZWRUZXh0ID0gJycsXG4gICAgICBwYXJzZWROdW1iZXI7XG5cbiAgaWYgKGlzSW5maW5pdHkpIHtcbiAgICBmb3JtYXR0ZWRUZXh0ID0gJ1xcdTIyMWUnO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZE51bWJlciA9IHBhcnNlKG51bVN0cik7XG5cbiAgICByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgcGF0dGVybi5taW5GcmFjLCBwYXR0ZXJuLm1heEZyYWMpO1xuXG4gICAgdmFyIGRpZ2l0cyA9IHBhcnNlZE51bWJlci5kO1xuICAgIHZhciBpbnRlZ2VyTGVuID0gcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGV4cG9uZW50ID0gcGFyc2VkTnVtYmVyLmU7XG4gICAgdmFyIGRlY2ltYWxzID0gW107XG4gICAgaXNaZXJvID0gZGlnaXRzLnJlZHVjZShmdW5jdGlvbihpc1plcm8sIGQpIHsgcmV0dXJuIGlzWmVybyAmJiAhZDsgfSwgdHJ1ZSk7XG5cbiAgICAvLyBwYWQgemVyb3MgZm9yIHNtYWxsIG51bWJlcnNcbiAgICB3aGlsZSAoaW50ZWdlckxlbiA8IDApIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KDApO1xuICAgICAgaW50ZWdlckxlbisrO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgZGVjaW1hbHMgZGlnaXRzXG4gICAgaWYgKGludGVnZXJMZW4gPiAwKSB7XG4gICAgICBkZWNpbWFscyA9IGRpZ2l0cy5zcGxpY2UoaW50ZWdlckxlbiwgZGlnaXRzLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY2ltYWxzID0gZGlnaXRzO1xuICAgICAgZGlnaXRzID0gWzBdO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCB0aGUgaW50ZWdlciBkaWdpdHMgd2l0aCBncm91cGluZyBzZXBhcmF0b3JzXG4gICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgIGlmIChkaWdpdHMubGVuZ3RoID49IHBhdHRlcm4ubGdTaXplKSB7XG4gICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuc3BsaWNlKC1wYXR0ZXJuLmxnU2l6ZSwgZGlnaXRzLmxlbmd0aCkuam9pbignJykpO1xuICAgIH1cbiAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA+IHBhdHRlcm4uZ1NpemUpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5zcGxpY2UoLXBhdHRlcm4uZ1NpemUsIGRpZ2l0cy5sZW5ndGgpLmpvaW4oJycpKTtcbiAgICB9XG4gICAgaWYgKGRpZ2l0cy5sZW5ndGgpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5qb2luKCcnKSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZFRleHQgPSBncm91cHMuam9pbihncm91cFNlcCk7XG5cbiAgICAvLyBhcHBlbmQgdGhlIGRlY2ltYWwgZGlnaXRzXG4gICAgaWYgKGRlY2ltYWxzLmxlbmd0aCkge1xuICAgICAgZm9ybWF0dGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZGVjaW1hbHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgaWYgKGV4cG9uZW50KSB7XG4gICAgICBmb3JtYXR0ZWRUZXh0ICs9ICdlKycgKyBleHBvbmVudDtcbiAgICB9XG4gIH1cbiAgaWYgKG51bWJlciA8IDAgJiYgIWlzWmVybykge1xuICAgIHJldHVybiBwYXR0ZXJuLm5lZ1ByZSArIGZvcm1hdHRlZFRleHQgKyBwYXR0ZXJuLm5lZ1N1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGF0dGVybi5wb3NQcmUgKyBmb3JtYXR0ZWRUZXh0ICsgcGF0dGVybi5wb3NTdWY7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltLCBuZWdXcmFwKSB7XG4gIHZhciBuZWcgPSAnJztcbiAgaWYgKG51bSA8IDAgfHwgKG5lZ1dyYXAgJiYgbnVtIDw9IDApKSB7XG4gICAgaWYgKG5lZ1dyYXApIHtcbiAgICAgIG51bSA9IC1udW0gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW0gPSAtbnVtO1xuICAgICAgbmVnID0gJy0nO1xuICAgIH1cbiAgfVxuICBudW0gPSAnJyArIG51bTtcbiAgd2hpbGUgKG51bS5sZW5ndGggPCBkaWdpdHMpIG51bSA9IFpFUk9fQ0hBUiArIG51bTtcbiAgaWYgKHRyaW0pIHtcbiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICB9XG4gIHJldHVybiBuZWcgKyBudW07XG59XG5cblxuZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0sIG5lZ1dyYXApIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgaWYgKG9mZnNldCA+IDAgfHwgdmFsdWUgPiAtb2Zmc2V0KSB7XG4gICAgICB2YWx1ZSArPSBvZmZzZXQ7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltLCBuZWdXcmFwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0sIHN0YW5kQWxvbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgcHJvcFByZWZpeCA9IChzdGFuZEFsb25lID8gJ1NUQU5EQUxPTkUnIDogJycpICsgKHNob3J0Rm9ybSA/ICdTSE9SVCcgOiAnJyk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShwcm9wUHJlZml4ICsgbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSwgZm9ybWF0cywgb2Zmc2V0KSB7XG4gIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyAnKycgOiAnJztcblxuICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICByZXR1cm4gcGFkZGVkWm9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KVxuICAgIC8vIDExID0gaW5kZXggb2YgKm5leHQqIFRodXJzZGF5ICgrMSBhY2NvdW50IGZvciAxc3QgPSAxMilcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXlcbiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTtcbn1cblxuZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2Vla1xuXG4gICAgICByZXR1cm4gcGFkTnVtYmVyKHJlc3VsdCwgc2l6ZSk7XG4gICB9O1xufVxuXG5mdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07XG59XG5cbmZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBU1swXSA6IGZvcm1hdHMuRVJBU1sxXTtcbn1cblxuZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBTkFNRVNbMF0gOiBmb3JtYXRzLkVSQU5BTUVTWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQsIDAsIGZhbHNlLCB0cnVlKSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxLCAwLCBmYWxzZSwgdHJ1ZSksXG4gIE1NTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJyksXG4gICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksXG4gICAgTU06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMiwgMSksXG4gICAgIE06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMSwgMSksXG4gIExMTEw6IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgZmFsc2UsIHRydWUpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKSxcbiAgICAgRzogZXJhR2V0dGVyLFxuICAgICBHRzogZXJhR2V0dGVyLFxuICAgICBHR0c6IGVyYUdldHRlcixcbiAgICAgR0dHRzogbG9uZ0VyYUdldHRlclxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TUxkSGhtc2FaRXdHJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8TCt8ZCt8SCt8aCt8bSt8cyt8YXxafEcrfHcrKSkoW1xcc1xcU10qKS8sXG4gICAgTlVNQkVSX1NUUklORyA9IC9eLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnTExMTCdgOiBTdGFuZC1hbG9uZSBtb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ0cnYCwgYCdHRydgLCBgJ0dHRydgOiBUaGUgYWJicmV2aWF0ZWQgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQUQnKVxuICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZFxuICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAqXG4gKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGVcbiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IFBNKVxuICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBQTSlcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBlc2NhcGVkIGJ5IHN1cnJvdW5kaW5nIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLlxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgYSBzaW5nbGUgcXVvdGUsIGVzY2FwZSBpdCAtIGkuZS4sIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2VcbiAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAqXG4gKiAgIEFueSBvdGhlciBjaGFyYWN0ZXJzIGluIHRoZSBgZm9ybWF0YCBzdHJpbmcgd2lsbCBiZSBvdXRwdXQgYXMtaXMuXG4gKlxuICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5zc3NaIGFuZCBpdHNcbiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXG4gKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGltZXpvbmUgVGltZXpvbmUgdG8gYmUgdXNlZCBmb3IgZm9ybWF0dGluZy4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWRhdGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjpcbiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC9PY3QgMlxcZCwgMjAxMCBcXGR7MSwyfTpcXGR7Mn06XFxkezJ9IChBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzIwMTAtMTAtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIEAgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIGF0IFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5kYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xuXG5cbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcbiAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICB0ekhvdXIgPSAwLFxuICAgICAgICAgIHR6TWluICA9IDAsXG4gICAgICAgICAgZGF0ZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENGdWxsWWVhciA6IGRhdGUuc2V0RnVsbFllYXIsXG4gICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMV0pO1xuICAgICAgfVxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIHRvSW50KG1hdGNoWzFdKSwgdG9JbnQobWF0Y2hbMl0pIC0gMSwgdG9JbnQobWF0Y2hbM10pKTtcbiAgICAgIHZhciBoID0gdG9JbnQobWF0Y2hbNF0gfHwgMCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IHRvSW50KG1hdGNoWzZdIHx8IDApO1xuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KCcwLicgKyAobWF0Y2hbN10gfHwgMCkpICogMTAwMCk7XG4gICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgZm4sIG1hdGNoO1xuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gdG9JbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpIHx8ICFpc0Zpbml0ZShkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIGRhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMsIGRhdGVUaW1lem9uZU9mZnNldClcbiAgICAgICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ1xcJ1xcJycgPyAnXFwnJyA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csICdcXCcnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXh0O1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUganNvblxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy5cbiAqXG4gKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvblxuICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge251bWJlcj19IHNwYWNpbmcgVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gdXNlIHBlciBpbmRlbnRhdGlvbiwgZGVmYXVsdHMgdG8gMi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1qc29uXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHByZSBpZD1cImRlZmF1bHQtc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uIH19PC9wcmU+XG4gICAgICAgPHByZSBpZD1cImN1c3RvbS1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb246NCB9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGpzb25pZnkgZmlsdGVyZWQgb2JqZWN0cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RlZmF1bHQtc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7Mn1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7NH1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZVxuICovXG52YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpO1xuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdXBwZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZVxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMgYXJlXG4gKiB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBPdGhlciBhcnJheS1saWtlIG9iamVjdHMgYXJlIGFsc28gc3VwcG9ydGVkXG4gKiAoZS5nLiBhcnJheSBzdWJjbGFzc2VzLCBOb2RlTGlzdHMsIGpxTGl0ZS9qUXVlcnkgY29sbGVjdGlvbnMgZXRjKS4gSWYgYSBudW1iZXIgaXMgdXNlZCBhcyBpbnB1dCxcbiAqIGl0IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fEFycmF5TGlrZXxzdHJpbmd8bnVtYmVyfSBpbnB1dCAtIEFycmF5L2FycmF5LWxpa2UsIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgLSBUaGUgbGVuZ3RoIG9mIHRoZSByZXR1cm5lZCBhcnJheSBvciBzdHJpbmcuIElmIHRoZSBgbGltaXRgIG51bWJlclxuICogICAgIGlzIHBvc2l0aXZlLCBgbGltaXRgIG51bWJlciBvZiBpdGVtcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmcgYXJlIGNvcGllZC5cbiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nXG4gKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAuIElmIGBsaW1pdGAgaXMgdW5kZWZpbmVkLFxuICogICAgIHRoZSBpbnB1dCB3aWxsIGJlIHJldHVybmVkIHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gYmVnaW4gLSBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LFxuICogICAgIGBiZWdpbmAgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGlucHV0YC4gRGVmYXVsdHMgdG8gYDBgLlxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIHRoZSBpbnB1dCBoYWRcbiAqICAgICBsZXNzIHRoYW4gYGxpbWl0YCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibGltaXRUb0V4YW1wbGVcIiBuYW1lPVwibGltaXQtdG8tZmlsdGVyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibG9uZ051bWJlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gdG9JbnQobGltaXQpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXJOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5TGlrZShpbnB1dCkpIHJldHVybiBpbnB1dDtcblxuICAgIGJlZ2luID0gKCFiZWdpbiB8fCBpc05hTihiZWdpbikpID8gMCA6IHRvSW50KGJlZ2luKTtcbiAgICBiZWdpbiA9IChiZWdpbiA8IDApID8gTWF0aC5tYXgoMCwgaW5wdXQubGVuZ3RoICsgYmVnaW4pIDogYmVnaW47XG5cbiAgICBpZiAobGltaXQgPj0gMCkge1xuICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIGJlZ2luLCBiZWdpbiArIGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJlZ2luID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBsaW1pdCwgaW5wdXQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBNYXRoLm1heCgwLCBiZWdpbiArIGxpbWl0KSwgYmVnaW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2xpY2VGbihpbnB1dCwgYmVnaW4sIGVuZCkge1xuICBpZiAoaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgcmV0dXJuIHNsaWNlLmNhbGwoaW5wdXQsIGJlZ2luLCBlbmQpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZyb20gdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAsIG9yZGVyZWQgYnkgYSBgY29tcGFyYXRvcmBcbiAqIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSB2YWx1ZXMgY29tcHV0ZWQgdXNpbmcgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuXG4gKlxuICogRm9yIGV4YW1wbGUsIGBbe2lkOiAnZm9vJ30sIHtpZDogJ2Jhcid9XSB8IG9yZGVyQnk6J2lkJ2Agd291bGQgcmVzdWx0IGluXG4gKiBgW3tpZDogJ2Jhcid9LCB7aWQ6ICdmb28nfV1gLlxuICpcbiAqIFRoZSBgY29sbGVjdGlvbmAgY2FuIGJlIGFuIEFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChlLmcuIE5vZGVMaXN0LCBqUXVlcnkgb2JqZWN0LCBUeXBlZEFycmF5LFxuICogU3RyaW5nLCBldGMpLlxuICpcbiAqIFRoZSBgZXhwcmVzc2lvbmAgY2FuIGJlIGEgc2luZ2xlIHByZWRpY2F0ZSwgb3IgYSBsaXN0IG9mIHByZWRpY2F0ZXMgZWFjaCBzZXJ2aW5nIGFzIGEgdGllLWJyZWFrZXJcbiAqIGZvciB0aGUgcHJlY2VkaW5nIG9uZS4gVGhlIGBleHByZXNzaW9uYCBpcyBldmFsdWF0ZWQgYWdhaW5zdCBlYWNoIGl0ZW0gYW5kIHRoZSBvdXRwdXQgaXMgdXNlZFxuICogZm9yIGNvbXBhcmluZyB3aXRoIG90aGVyIGl0ZW1zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSBzb3J0aW5nIG9yZGVyIGJ5IHNldHRpbmcgYHJldmVyc2VgIHRvIGB0cnVlYC4gQnkgZGVmYXVsdCwgaXRlbXMgYXJlIHNvcnRlZCBpblxuICogYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIFRoZSBjb21wYXJpc29uIGlzIGRvbmUgdXNpbmcgdGhlIGBjb21wYXJhdG9yYCBmdW5jdGlvbi4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGEgZGVmYXVsdCwgYnVpbHQtaW5cbiAqIGNvbXBhcmF0b3IgaXMgdXNlZCAoc2VlIGJlbG93IGZvciBkZXRhaWxzIC0gaW4gYSBudXRzaGVsbCwgaXQgY29tcGFyZXMgbnVtYmVycyBudW1lcmljYWxseSBhbmRcbiAqIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHkpLlxuICpcbiAqICMjIyBVbmRlciB0aGUgaG9vZFxuICpcbiAqIE9yZGVyaW5nIHRoZSBzcGVjaWZpZWQgYGNvbGxlY3Rpb25gIGhhcHBlbnMgaW4gdHdvIHBoYXNlczpcbiAqXG4gKiAxLiBBbGwgaXRlbXMgYXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBwcmVkaWNhdGUgKG9yIHByZWRpY2F0ZXMpLCBhbmQgdGhlIHJldHVybmVkIHZhbHVlcyBhcmUgc2F2ZWRcbiAqICAgIGFsb25nIHdpdGggdGhlaXIgdHlwZSAoYHN0cmluZ2AsIGBudW1iZXJgIGV0YykuIEZvciBleGFtcGxlLCBhbiBpdGVtIGB7bGFiZWw6ICdmb28nfWAsIHBhc3NlZFxuICogICAgdGhyb3VnaCBhIHByZWRpY2F0ZSB0aGF0IGV4dHJhY3RzIHRoZSB2YWx1ZSBvZiB0aGUgYGxhYmVsYCBwcm9wZXJ0eSwgd291bGQgYmUgdHJhbnNmb3JtZWQgdG86XG4gKiAgICBgYGBcbiAqICAgIHtcbiAqICAgICAgdmFsdWU6ICdmb28nLFxuICogICAgICB0eXBlOiAnc3RyaW5nJyxcbiAqICAgICAgaW5kZXg6IC4uLlxuICogICAgfVxuICogICAgYGBgXG4gKiAyLiBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiBpcyB1c2VkIHRvIHNvcnQgdGhlIGl0ZW1zLCBiYXNlZCBvbiB0aGUgZGVyaXZlZCB2YWx1ZXMsIHR5cGVzIGFuZFxuICogICAgaW5kaWNlcy5cbiAqXG4gKiBJZiB5b3UgdXNlIGEgY3VzdG9tIGNvbXBhcmF0b3IsIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggcGFpcnMgb2Ygb2JqZWN0cyBvZiB0aGUgZm9ybVxuICogYHt2YWx1ZTogLi4uLCB0eXBlOiAnLi4uJywgaW5kZXg6IC4uLn1gIGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm4gYDBgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVhbFxuICogKGFzIGZhciBhcyB0aGUgY29tcGFyYXRvciBpcyBjb25jZXJuZWQpLCBgLTFgIGlmIHRoZSAxc3Qgb25lIHNob3VsZCBiZSByYW5rZWQgaGlnaGVyIHRoYW4gdGhlXG4gKiBzZWNvbmQsIG9yIGAxYCBvdGhlcndpc2UuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIHNvcnRpbmcgd2lsbCBiZSBkZXRlcm1pbmlzdGljIGFjcm9zcyBwbGF0Zm9ybXMsIGlmIG5vbmUgb2YgdGhlXG4gKiBzcGVjaWZpZWQgcHJlZGljYXRlcyBjYW4gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gaXRlbXMsIGBvcmRlckJ5YCB3aWxsIGF1dG9tYXRpY2FsbHkgaW50cm9kdWNlIGFcbiAqIGR1bW15IHByZWRpY2F0ZSB0aGF0IHJldHVybnMgdGhlIGl0ZW0ncyBpbmRleCBhcyBgdmFsdWVgLlxuICogKElmIHlvdSBhcmUgdXNpbmcgYSBjdXN0b20gY29tcGFyYXRvciwgbWFrZSBzdXJlIGl0IGNhbiBoYW5kbGUgdGhpcyBwcmVkaWNhdGUgYXMgd2VsbC4pXG4gKlxuICogRmluYWxseSwgaW4gYW4gYXR0ZW1wdCB0byBzaW1wbGlmeSB0aGluZ3MsIGlmIGEgcHJlZGljYXRlIHJldHVybnMgYW4gb2JqZWN0IGFzIHRoZSBleHRyYWN0ZWRcbiAqIHZhbHVlIGZvciBhbiBpdGVtLCBgb3JkZXJCeWAgd2lsbCB0cnkgdG8gY29udmVydCB0aGF0IG9iamVjdCB0byBhIHByaW1pdGl2ZSB2YWx1ZSwgYmVmb3JlIHBhc3NpbmdcbiAqIGl0IHRvIHRoZSBjb21wYXJhdG9yLiBUaGUgZm9sbG93aW5nIHJ1bGVzIGdvdmVybiB0aGUgY29udmVyc2lvbjpcbiAqXG4gKiAxLiBJZiB0aGUgb2JqZWN0IGhhcyBhIGB2YWx1ZU9mKClgIG1ldGhvZCB0aGF0IHJldHVybnMgYSBwcmltaXRpdmUsIGl0cyByZXR1cm4gdmFsdWUgd2lsbCBiZVxuICogICAgdXNlZCBpbnN0ZWFkLjxiciAvPlxuICogICAgKElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiAgICB3aWxsIGJlIHVzZWQgaW4gc3Vic2VxdWVudCBzdGVwcy4pXG4gKiAyLiBJZiB0aGUgb2JqZWN0IGhhcyBhIGN1c3RvbSBgdG9TdHJpbmcoKWAgbWV0aG9kIChpLmUuIG5vdCB0aGUgb25lIGluaGVyaXRlZCBmcm9tIGBPYmplY3RgKSB0aGF0XG4gKiAgICByZXR1cm5zIGEgcHJpbWl0aXZlLCBpdHMgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLjxiciAvPlxuICogICAgKElmIHRoZSBvYmplY3QgaGFzIGEgYHRvU3RyaW5nKClgIG1ldGhvZCB0aGF0IHJldHVybnMgYW5vdGhlciBvYmplY3QsIHRoZW4gdGhlIHJldHVybmVkIG9iamVjdFxuICogICAgd2lsbCBiZSB1c2VkIGluIHN1YnNlcXVlbnQgc3RlcHMuKVxuICogMy4gTm8gY29udmVyc2lvbjsgdGhlIG9iamVjdCBpdHNlbGYgaXMgdXNlZC5cbiAqXG4gKiAjIyMgVGhlIGRlZmF1bHQgY29tcGFyYXRvclxuICpcbiAqIFRoZSBkZWZhdWx0LCBidWlsdC1pbiBjb21wYXJhdG9yIHNob3VsZCBiZSBzdWZmaWNpZW50IGZvciBtb3N0IHVzZWNhc2VzLiBJbiBzaG9ydCwgaXQgY29tcGFyZXNcbiAqIG51bWJlcnMgbnVtZXJpY2FsbHksIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHkgKGFuZCBjYXNlLWluc2Vuc2l0aXZlbHkpLCBmb3Igb2JqZWN0cyBmYWxscyBiYWNrIHRvXG4gKiB1c2luZyB0aGVpciBpbmRleCBpbiB0aGUgb3JpZ2luYWwgY29sbGVjdGlvbiwgYW5kIHNvcnRzIHZhbHVlcyBvZiBkaWZmZXJlbnQgdHlwZXMgYnkgdHlwZS5cbiAqXG4gKiBNb3JlIHNwZWNpZmljYWxseSwgaXQgZm9sbG93cyB0aGVzZSBzdGVwcyB0byBkZXRlcm1pbmUgdGhlIHJlbGF0aXZlIG9yZGVyIG9mIGl0ZW1zOlxuICpcbiAqIDEuIElmIHRoZSBjb21wYXJlZCB2YWx1ZXMgYXJlIG9mIGRpZmZlcmVudCB0eXBlcywgY29tcGFyZSB0aGUgdHlwZXMgdGhlbXNlbHZlcyBhbHBoYWJldGljYWxseS5cbiAqIDIuIElmIGJvdGggdmFsdWVzIGFyZSBvZiB0eXBlIGBzdHJpbmdgLCBjb21wYXJlIHRoZW0gYWxwaGFiZXRpY2FsbHkgaW4gYSBjYXNlLSBhbmRcbiAqICAgIGxvY2FsZS1pbnNlbnNpdGl2ZSB3YXkuXG4gKiAzLiBJZiBib3RoIHZhbHVlcyBhcmUgb2JqZWN0cywgY29tcGFyZSB0aGVpciBpbmRpY2VzIGluc3RlYWQuXG4gKiA0LiBPdGhlcndpc2UsIHJldHVybjpcbiAqICAgIC0gIGAwYCwgaWYgdGhlIHZhbHVlcyBhcmUgZXF1YWwgKGJ5IHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29uLCBpLmUuIHVzaW5nIGA9PT1gKS5cbiAqICAgIC0gYC0xYCwgaWYgdGhlIDFzdCB2YWx1ZSBpcyBcImxlc3MgdGhhblwiIHRoZSAybmQgdmFsdWUgKGNvbXBhcmVkIHVzaW5nIHRoZSBgPGAgb3BlcmF0b3IpLlxuICogICAgLSAgYDFgLCBvdGhlcndpc2UuXG4gKlxuICogKipOb3RlOioqIElmIHlvdSBub3RpY2UgbnVtYmVycyBub3QgYmVpbmcgc29ydGVkIGFzIGV4cGVjdGVkLCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmdcbiAqICAgICAgICAgICBzYXZlZCBhcyBudW1iZXJzIGFuZCBub3Qgc3RyaW5ncy5cbiAqICoqTm90ZToqKiBGb3IgdGhlIHB1cnBvc2Ugb2Ygc29ydGluZywgYG51bGxgIHZhbHVlcyBhcmUgdHJlYXRlZCBhcyB0aGUgc3RyaW5nIGAnbnVsbCdgIChpLmUuXG4gKiAgICAgICAgICAgYHR5cGU6ICdzdHJpbmcnYCwgYHZhbHVlOiAnbnVsbCdgKS4gVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBzb3J0IG9yZGVyIHJlbGF0aXZlIHRvXG4gKiAgICAgICAgICAgb3RoZXIgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8QXJyYXlMaWtlfSBjb2xsZWN0aW9uIC0gVGhlIGNvbGxlY3Rpb24gKGFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0KSB0byBzb3J0LlxuICogQHBhcmFtIHsoRnVuY3Rpb258c3RyaW5nfEFycmF5LjxGdW5jdGlvbnxzdHJpbmc+KT19IGV4cHJlc3Npb24gLSBBIHByZWRpY2F0ZSAob3IgbGlzdCBvZlxuICogICAgcHJlZGljYXRlcykgdG8gYmUgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgRnVuY3Rpb25gOiBBIGdldHRlciBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoIGVhY2ggaXRlbSBhcyBhcmd1bWVudCBhbmRcbiAqICAgICAgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIHVzZWQgZm9yIHNvcnRpbmcuXG4gKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGV2YWx1YXRlZCBhZ2FpbnN0IGVhY2ggaXRlbSBhbmQgdGhlXG4gKiAgICAgIHJlc3VsdCB3aWxsIGJlIHVzZWQgZm9yIHNvcnRpbmcuIEZvciBleGFtcGxlLCB1c2UgYCdsYWJlbCdgIHRvIHNvcnQgYnkgYSBwcm9wZXJ0eSBjYWxsZWRcbiAqICAgICAgYGxhYmVsYCBvciBgJ2xhYmVsLnN1YnN0cmluZygwLCAzKSdgIHRvIHNvcnQgYnkgdGhlIGZpcnN0IDMgY2hhcmFjdGVycyBvZiB0aGUgYGxhYmVsYFxuICogICAgICBwcm9wZXJ0eS48YnIgLz5cbiAqICAgICAgKFRoZSByZXN1bHQgb2YgYSBjb25zdGFudCBleHByZXNzaW9uIGlzIGludGVycHJldGVkIGFzIGEgcHJvcGVydHkgbmFtZSB0byBiZSB1c2VkIGZvclxuICogICAgICBjb21wYXJpc29uLiBGb3IgZXhhbXBsZSwgdXNlIGAnXCJzcGVjaWFsIG5hbWVcIidgIChub3RlIHRoZSBleHRyYSBwYWlyIG9mIHF1b3RlcykgdG8gc29ydCBieSBhXG4gKiAgICAgIHByb3BlcnR5IGNhbGxlZCBgc3BlY2lhbCBuYW1lYC4pPGJyIC8+XG4gKiAgICAgIEFuIGV4cHJlc3Npb24gY2FuIGJlIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgK2Agb3IgYC1gIHRvIGNvbnRyb2wgdGhlIHNvcnRpbmcgZGlyZWN0aW9uLFxuICogICAgICBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZy4gRm9yIGV4YW1wbGUsIGAnK2xhYmVsJ2Agb3IgYCctbGFiZWwnYC4gSWYgbm8gcHJvcGVydHkgaXMgcHJvdmlkZWQsXG4gKiAgICAgIChlLmcuIGAnKydgIG9yIGAnLSdgKSwgdGhlIGNvbGxlY3Rpb24gZWxlbWVudCBpdHNlbGYgaXMgdXNlZCBpbiBjb21wYXJpc29ucy5cbiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gYW5kL29yIHN0cmluZyBwcmVkaWNhdGVzLiBJZiBhIHByZWRpY2F0ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZVxuICogICAgICByZWxhdGl2ZSBvcmRlciBvZiB0d28gaXRlbXMsIHRoZSBuZXh0IHByZWRpY2F0ZSBpcyB1c2VkIGFzIGEgdGllLWJyZWFrZXIuXG4gKlxuICogKipOb3RlOioqIElmIHRoZSBwcmVkaWNhdGUgaXMgbWlzc2luZyBvciBlbXB0eSB0aGVuIGl0IGRlZmF1bHRzIHRvIGAnKydgLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHJldmVyc2UgLSBJZiBgdHJ1ZWAsIHJldmVyc2UgdGhlIHNvcnRpbmcgb3JkZXIuXG4gKiBAcGFyYW0geyhGdW5jdGlvbik9fSBjb21wYXJhdG9yIC0gVGhlIGNvbXBhcmF0b3IgZnVuY3Rpb24gdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJlbGF0aXZlIG9yZGVyIG9mXG4gKiAgICB2YWx1ZSBwYWlycy4gSWYgb21pdHRlZCwgdGhlIGJ1aWx0LWluIGNvbXBhcmF0b3Igd2lsbCBiZSB1c2VkLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBUaGUgc29ydGVkIGFycmF5LlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIE9yZGVyaW5nIGEgdGFibGUgd2l0aCBgbmdSZXBlYXRgXG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGEgc2ltcGxlIHtAbGluayBuZ1JlcGVhdCBuZ1JlcGVhdH0sIHdoZXJlIHRoZSBkYXRhIGlzIHNvcnRlZCBieVxuICogYWdlIGluIGRlc2NlbmRpbmcgb3JkZXIgKGV4cHJlc3Npb24gaXMgc2V0IHRvIGAnLWFnZSdgKS4gVGhlIGBjb21wYXJhdG9yYCBpcyBub3Qgc2V0LCB3aGljaCBtZWFuc1xuICogaXQgZGVmYXVsdHMgdG8gdGhlIGJ1aWx0LWluIGNvbXBhcmF0b3IuXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktc3RhdGljXCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGUxXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZHNcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICA8dGg+UGhvbmUgTnVtYmVyPC90aD5cbiAgICAgICAgICAgICA8dGg+QWdlPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonLWFnZSdcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTEnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAge25hbWU6ICdNaWtlJywgICBwaG9uZTogJzU1NS00MzIxJywgIGFnZTogMjF9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgXTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICB2YXIgbmFtZXMgPSBlbGVtZW50LmFsbChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBieSBhZ2UgaW4gcmV2ZXJzZSBvcmRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgwKS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0JlKCdKdWxpZScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ01pa2UnKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDQpLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKiA8aHIgLz5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIENoYW5naW5nIHBhcmFtZXRlcnMgZHluYW1pY2FsbHlcbiAqXG4gKiBBbGwgcGFyYW1ldGVycyBjYW4gYmUgY2hhbmdlZCBkeW5hbWljYWxseS4gVGhlIG5leHQgZXhhbXBsZSBzaG93cyBob3cgeW91IGNhbiBtYWtlIHRoZSBjb2x1bW5zIG9mXG4gKiBhIHRhYmxlIHNvcnRhYmxlLCBieSBiaW5kaW5nIHRoZSBgZXhwcmVzc2lvbmAgYW5kIGByZXZlcnNlYCBwYXJhbWV0ZXJzIHRvIHNjb3BlIHByb3BlcnRpZXMuXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktZHluYW1pY1wiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlMlwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnQgYnkgPSB7e3Byb3BlcnR5TmFtZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicHJvcGVydHlOYW1lID0gbnVsbDsgcmV2ZXJzZSA9IGZhbHNlXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnYWdlJylcIj5BZ2U8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByb3BlcnR5TmFtZTpyZXZlcnNlXCI+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUyJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICB2YXIgZnJpZW5kcyA9IFtcbiAgICAgICAgICAgICB7bmFtZTogJ0pvaG4nLCAgIHBob25lOiAnNTU1LTEyMTInLCAgYWdlOiAxMH0sXG4gICAgICAgICAgICAge25hbWU6ICdNYXJ5JywgICBwaG9uZTogJzU1NS05ODc2JywgIGFnZTogMTl9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWlrZScsICAgcGhvbmU6ICc1NTUtNDMyMScsICBhZ2U6IDIxfSxcbiAgICAgICAgICAgICB7bmFtZTogJ0FkYW0nLCAgIHBob25lOiAnNTU1LTU2NzgnLCAgYWdlOiAzNX0sXG4gICAgICAgICAgICAge25hbWU6ICdKdWxpZScsICBwaG9uZTogJzU1NS04NzY1JywgIGFnZTogMjl9XG4gICAgICAgICAgIF07XG5cbiAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9ICdhZ2UnO1xuICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IHRydWU7XG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID0gZnJpZW5kcztcblxuICAgICAgICAgICAkc2NvcGUuc29ydEJ5ID0gZnVuY3Rpb24ocHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAoJHNjb3BlLnByb3BlcnR5TmFtZSA9PT0gcHJvcGVydHlOYW1lKSA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5mcmllbmRzIHtcbiAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZCwgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDtcbiAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZDpmaXJzdC1jaGlsZCwgLmZyaWVuZHMgdGg6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICAgfVxuXG4gICAgICAgLnNvcnRvcmRlcjphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWIyJzsgICAvLyBCTEFDSyBVUC1QT0lOVElORyBUUklBTkdMRVxuICAgICAgIH1cbiAgICAgICAuc29ydG9yZGVyLnJldmVyc2U6YWZ0ZXIge1xuICAgICAgICAgY29udGVudDogJ1xcMjViYyc7ICAgLy8gQkxBQ0sgRE9XTi1QT0lOVElORyBUUklBTkdMRVxuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgIHZhciB1bnNvcnRCdXR0b24gPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCd1bnNvcnRlZCcpKTtcbiAgICAgICB2YXIgbmFtZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ05hbWUnKSk7XG4gICAgICAgdmFyIHBob25lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnUGhvbmUnKSk7XG4gICAgICAgdmFyIGFnZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ0FnZScpKTtcbiAgICAgICB2YXIgZmlyc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coMCkpO1xuICAgICAgIHZhciBsYXN0TmFtZSA9IGVsZW1lbnQoYnkucmVwZWF0ZXIoJ2ZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykucm93KDQpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IHNvbWUgcHJvcGVydHksIHdoZW4gY2xpY2tpbmcgb24gdGhlIGNvbHVtbiBoZWFkZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG5cbiAgICAgICAgIHBob25lSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuXG4gICAgICAgICBuYW1lSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBpbiByZXZlcnNlIG9yZGVyLCB3aGVuIGNsaWNraW5nIG9uIHRoZSBzYW1lIGNvbHVtbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgYWdlSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHJlc3RvcmUgdGhlIG9yaWdpbmFsIG9yZGVyLCB3aGVuIGNsaWNraW5nIFwiU2V0IHRvIHVuc29ydGVkXCInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG5cbiAgICAgICAgIHVuc29ydEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqIDxociAvPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgVXNpbmcgYG9yZGVyQnlgIGluc2lkZSBhIGNvbnRyb2xsZXJcbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIGNhbGwgdGhlIGBvcmRlckJ5YCBmaWx0ZXIgbWFudWFsbHksIGJ5IGluamVjdGluZyBgb3JkZXJCeUZpbHRlcmAsIGFuZFxuICogY2FsbGluZyBpdCB3aXRoIHRoZSBkZXNpcmVkIHBhcmFtZXRlcnMuIChBbHRlcm5hdGl2ZWx5LCB5b3UgY291bGQgaW5qZWN0IHRoZSBgJGZpbHRlcmAgZmFjdG9yeVxuICogYW5kIHJldHJpZXZlIHRoZSBgb3JkZXJCeWAgZmlsdGVyIHdpdGggYCRmaWx0ZXIoJ29yZGVyQnknKWAuKVxuICpcbiAgIDxleGFtcGxlIG5hbWU9XCJvcmRlckJ5LWNhbGwtbWFudWFsbHlcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTNcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHByZT5Tb3J0IGJ5ID0ge3twcm9wZXJ0eU5hbWV9fTsgcmV2ZXJzZSA9IHt7cmV2ZXJzZX19PC9wcmU+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeShudWxsKVwiPlNldCB0byB1bnNvcnRlZDwvYnV0dG9uPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZHNcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ25hbWUnKVwiPk5hbWU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ25hbWUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCdwaG9uZScpXCI+UGhvbmUgTnVtYmVyPC9idXR0b24+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICdwaG9uZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ2FnZScpXCI+QWdlPC9idXR0b24+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICdhZ2UnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzXCI+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUzJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICdvcmRlckJ5RmlsdGVyJywgZnVuY3Rpb24oJHNjb3BlLCBvcmRlckJ5KSB7XG4gICAgICAgICAgIHZhciBmcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAge25hbWU6ICdNaWtlJywgICBwaG9uZTogJzU1NS00MzIxJywgIGFnZTogMjF9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgXTtcblxuICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gJ2FnZSc7XG4gICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KGZyaWVuZHMsICRzY29wZS5wcm9wZXJ0eU5hbWUsICRzY29wZS5yZXZlcnNlKTtcblxuICAgICAgICAgICAkc2NvcGUuc29ydEJ5ID0gZnVuY3Rpb24ocHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAocHJvcGVydHlOYW1lICE9PSBudWxsICYmICRzY29wZS5wcm9wZXJ0eU5hbWUgPT09IHByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICAgICAgPyAhJHNjb3BlLnJldmVyc2UgOiBmYWxzZTtcbiAgICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeShmcmllbmRzLCAkc2NvcGUucHJvcGVydHlOYW1lLCAkc2NvcGUucmV2ZXJzZSk7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5mcmllbmRzIHtcbiAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZCwgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDtcbiAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZDpmaXJzdC1jaGlsZCwgLmZyaWVuZHMgdGg6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICAgfVxuXG4gICAgICAgLnNvcnRvcmRlcjphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWIyJzsgICAvLyBCTEFDSyBVUC1QT0lOVElORyBUUklBTkdMRVxuICAgICAgIH1cbiAgICAgICAuc29ydG9yZGVyLnJldmVyc2U6YWZ0ZXIge1xuICAgICAgICAgY29udGVudDogJ1xcMjViYyc7ICAgLy8gQkxBQ0sgRE9XTi1QT0lOVElORyBUUklBTkdMRVxuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgIHZhciB1bnNvcnRCdXR0b24gPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCd1bnNvcnRlZCcpKTtcbiAgICAgICB2YXIgbmFtZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ05hbWUnKSk7XG4gICAgICAgdmFyIHBob25lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnUGhvbmUnKSk7XG4gICAgICAgdmFyIGFnZUhlYWRlciA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ0FnZScpKTtcbiAgICAgICB2YXIgZmlyc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coMCkpO1xuICAgICAgIHZhciBsYXN0TmFtZSA9IGVsZW1lbnQoYnkucmVwZWF0ZXIoJ2ZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykucm93KDQpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IHNvbWUgcHJvcGVydHksIHdoZW4gY2xpY2tpbmcgb24gdGhlIGNvbHVtbiBoZWFkZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG5cbiAgICAgICAgIHBob25lSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuXG4gICAgICAgICBuYW1lSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBpbiByZXZlcnNlIG9yZGVyLCB3aGVuIGNsaWNraW5nIG9uIHRoZSBzYW1lIGNvbHVtbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgYWdlSGVhZGVyLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHJlc3RvcmUgdGhlIG9yaWdpbmFsIG9yZGVyLCB3aGVuIGNsaWNraW5nIFwiU2V0IHRvIHVuc29ydGVkXCInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG5cbiAgICAgICAgIHVuc29ydEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqIDxociAvPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgVXNpbmcgYSBjdXN0b20gY29tcGFyYXRvclxuICpcbiAqIElmIHlvdSBoYXZlIHZlcnkgc3BlY2lmaWMgcmVxdWlyZW1lbnRzIGFib3V0IHRoZSB3YXkgaXRlbXMgYXJlIHNvcnRlZCwgeW91IGNhbiBwYXNzIHlvdXIgb3duXG4gKiBjb21wYXJhdG9yIGZ1bmN0aW9uLiBGb3IgZXhhbXBsZSwgeW91IG1pZ2h0IG5lZWQgdG8gY29tcGFyZSBzb21lIHN0cmluZ3MgaW4gYSBsb2NhbGUtc2Vuc2l0aXZlXG4gKiB3YXkuIChXaGVuIHNwZWNpZnlpbmcgYSBjdXN0b20gY29tcGFyYXRvciwgeW91IGFsc28gbmVlZCB0byBwYXNzIGEgdmFsdWUgZm9yIHRoZSBgcmV2ZXJzZWBcbiAqIGFyZ3VtZW50IC0gcGFzc2luZyBgZmFsc2VgIHJldGFpbnMgdGhlIGRlZmF1bHQgc29ydGluZyBvcmRlciwgaS5lLiBhc2NlbmRpbmcuKVxuICpcbiAgIDxleGFtcGxlIG5hbWU9XCJvcmRlckJ5LWN1c3RvbS1jb21wYXJhdG9yXCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGU0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmllbmRzLWNvbnRhaW5lciBjdXN0b20tY29tcGFyYXRvclwiPlxuICAgICAgICAgICA8aDM+TG9jYWxlLXNlbnNpdGl2ZSBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgIDx0aD5GYXZvcml0ZSBMZXR0ZXI8L3RoPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInOmZhbHNlOmxvY2FsZVNlbnNpdGl2ZUNvbXBhcmF0b3JcIj5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmZhdm9yaXRlTGV0dGVyfX08L3RkPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmcmllbmRzLWNvbnRhaW5lciBkZWZhdWx0LWNvbXBhcmF0b3JcIj5cbiAgICAgICAgICAgPGgzPkRlZmF1bHQgQ29tcGFyYXRvcjwvaDM+XG4gICAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZHNcIj5cbiAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgICAgICA8dGg+RmF2b3JpdGUgTGV0dGVyPC90aD5cbiAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6J2Zhdm9yaXRlTGV0dGVyJ1wiPlxuICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuZmF2b3JpdGVMZXR0ZXJ9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGU0JywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICAgICB7bmFtZTogJ0pvaG4nLCAgIGZhdm9yaXRlTGV0dGVyOiAnw4QnfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIGZhdm9yaXRlTGV0dGVyOiAnw5wnfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIGZhdm9yaXRlTGV0dGVyOiAnw5YnfSxcbiAgICAgICAgICAgICB7bmFtZTogJ0FkYW0nLCAgIGZhdm9yaXRlTGV0dGVyOiAnSCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgZmF2b3JpdGVMZXR0ZXI6ICdaJ31cbiAgICAgICAgICAgXTtcblxuICAgICAgICAgICAkc2NvcGUubG9jYWxlU2Vuc2l0aXZlQ29tcGFyYXRvciA9IGZ1bmN0aW9uKHYxLCB2Mikge1xuICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGdldCBzdHJpbmdzLCBqdXN0IGNvbXBhcmUgYnkgaW5kZXhcbiAgICAgICAgICAgICBpZiAodjEudHlwZSAhPT0gJ3N0cmluZycgfHwgdjIudHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgIHJldHVybiAodjEuaW5kZXggPCB2Mi5pbmRleCkgPyAtMSA6IDE7XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgLy8gQ29tcGFyZSBzdHJpbmdzIGFscGhhYmV0aWNhbGx5LCB0YWtpbmcgbG9jYWxlIGludG8gYWNjb3VudFxuICAgICAgICAgICAgIHJldHVybiB2MS52YWx1ZS5sb2NhbGVDb21wYXJlKHYyLnZhbHVlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMtY29udGFpbmVyIHtcbiAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgIG1hcmdpbjogMCAzMHB4O1xuICAgICAgIH1cblxuICAgICAgIC5mcmllbmRzIHtcbiAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZCwgLmZyaWVuZHMgdGgge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZDtcbiAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgIH1cbiAgICAgICAuZnJpZW5kcyB0ZDpmaXJzdC1jaGlsZCwgLmZyaWVuZHMgdGg6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuY3NzKCcuY3VzdG9tLWNvbXBhcmF0b3InKSk7XG4gICAgICAgdmFyIG5hbWVzID0gY29udGFpbmVyLmFsbChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNvcnQgZnJpZW5kcyBieSBmYXZvcml0ZSBsZXR0ZXIgKGluIGNvcnJlY3QgYWxwaGFiZXRpY2FsIG9yZGVyKScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgwKS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ01hcnknKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoNCkuZ2V0VGV4dCgpKS50b0JlKCdKdWxpZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG5vcmRlckJ5RmlsdGVyLiRpbmplY3QgPSBbJyRwYXJzZSddO1xuZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIsIGNvbXBhcmVGbikge1xuXG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBhcnJheTtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKGFycmF5KSkge1xuICAgICAgdGhyb3cgbWluRXJyKCdvcmRlckJ5JykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheShzb3J0UHJlZGljYXRlKSkgeyBzb3J0UHJlZGljYXRlID0gW3NvcnRQcmVkaWNhdGVdOyB9XG4gICAgaWYgKHNvcnRQcmVkaWNhdGUubGVuZ3RoID09PSAwKSB7IHNvcnRQcmVkaWNhdGUgPSBbJysnXTsgfVxuXG4gICAgdmFyIHByZWRpY2F0ZXMgPSBwcm9jZXNzUHJlZGljYXRlcyhzb3J0UHJlZGljYXRlKTtcblxuICAgIHZhciBkZXNjZW5kaW5nID0gcmV2ZXJzZU9yZGVyID8gLTEgOiAxO1xuXG4gICAgLy8gRGVmaW5lIHRoZSBgY29tcGFyZSgpYCBmdW5jdGlvbi4gVXNlIGEgZGVmYXVsdCBjb21wYXJhdG9yIGlmIG5vbmUgaXMgc3BlY2lmaWVkLlxuICAgIHZhciBjb21wYXJlID0gaXNGdW5jdGlvbihjb21wYXJlRm4pID8gY29tcGFyZUZuIDogZGVmYXVsdENvbXBhcmU7XG5cbiAgICAvLyBUaGUgbmV4dCB0aHJlZSBsaW5lcyBhcmUgYSB2ZXJzaW9uIG9mIGEgU3dhcnR6aWFuIFRyYW5zZm9ybSBpZGlvbSBmcm9tIFBlcmxcbiAgICAvLyAoc29tZXRpbWVzIGNhbGxlZCB0aGUgRGVjb3JhdGUtU29ydC1VbmRlY29yYXRlIGlkaW9tKVxuICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TY2h3YXJ0emlhbl90cmFuc2Zvcm1cbiAgICB2YXIgY29tcGFyZVZhbHVlcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcnJheSwgZ2V0Q29tcGFyaXNvbk9iamVjdCk7XG4gICAgY29tcGFyZVZhbHVlcy5zb3J0KGRvQ29tcGFyaXNvbik7XG4gICAgYXJyYXkgPSBjb21wYXJlVmFsdWVzLm1hcChmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtLnZhbHVlOyB9KTtcblxuICAgIHJldHVybiBhcnJheTtcblxuICAgIGZ1bmN0aW9uIGdldENvbXBhcmlzb25PYmplY3QodmFsdWUsIGluZGV4KSB7XG4gICAgICAvLyBOT1RFOiBXZSBhcmUgYWRkaW5nIGFuIGV4dHJhIGB0aWVCcmVha2VyYCB2YWx1ZSBiYXNlZCBvbiB0aGUgZWxlbWVudCdzIGluZGV4LlxuICAgICAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8ga2VlcCB0aGUgc29ydCBzdGFibGUgd2hlbiBub25lIG9mIHRoZSBpbnB1dCBwcmVkaWNhdGVzIGNhblxuICAgICAgLy8gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gZWxlbWVudHMuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHRpZUJyZWFrZXI6IHt2YWx1ZTogaW5kZXgsIHR5cGU6ICdudW1iZXInLCBpbmRleDogaW5kZXh9LFxuICAgICAgICBwcmVkaWNhdGVWYWx1ZXM6IHByZWRpY2F0ZXMubWFwKGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXRQcmVkaWNhdGVWYWx1ZShwcmVkaWNhdGUuZ2V0KHZhbHVlKSwgaW5kZXgpO1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb0NvbXBhcmlzb24odjEsIHYyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwcmVkaWNhdGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmUodjEucHJlZGljYXRlVmFsdWVzW2ldLCB2Mi5wcmVkaWNhdGVWYWx1ZXNbaV0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIHByZWRpY2F0ZXNbaV0uZGVzY2VuZGluZyAqIGRlc2NlbmRpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBhcmUodjEudGllQnJlYWtlciwgdjIudGllQnJlYWtlcikgKiBkZXNjZW5kaW5nO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBwcm9jZXNzUHJlZGljYXRlcyhzb3J0UHJlZGljYXRlcykge1xuICAgIHJldHVybiBzb3J0UHJlZGljYXRlcy5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICB2YXIgZGVzY2VuZGluZyA9IDEsIGdldCA9IGlkZW50aXR5O1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XG4gICAgICAgIGdldCA9IHByZWRpY2F0ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcocHJlZGljYXRlKSkge1xuICAgICAgICBpZiAoKHByZWRpY2F0ZS5jaGFyQXQoMCkgPT09ICcrJyB8fCBwcmVkaWNhdGUuY2hhckF0KDApID09PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVkaWNhdGUgIT09ICcnKSB7XG4gICAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7XG4gICAgICAgICAgaWYgKGdldC5jb25zdGFudCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGdldCgpO1xuICAgICAgICAgICAgZ2V0ID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlW2tleV07IH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge2dldDogZ2V0LCBkZXNjZW5kaW5nOiBkZXNjZW5kaW5nfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgJ251bWJlcic6IC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvYmplY3RWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIElmIGB2YWx1ZU9mYCBpcyBhIHZhbGlkIGZ1bmN0aW9uIHVzZSB0aGF0XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBJZiBgdG9TdHJpbmdgIGlzIGEgdmFsaWQgZnVuY3Rpb24gYW5kIG5vdCB0aGUgb25lIGZyb20gYE9iamVjdC5wcm90b3R5cGVgIHVzZSB0aGF0XG4gICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByZWRpY2F0ZVZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgdmFsdWUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsdWUgPSBvYmplY3RWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7dmFsdWU6IHZhbHVlLCB0eXBlOiB0eXBlLCBpbmRleDogaW5kZXh9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUodjEsIHYyKSB7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgdmFyIHR5cGUxID0gdjEudHlwZTtcbiAgICB2YXIgdHlwZTIgPSB2Mi50eXBlO1xuXG4gICAgaWYgKHR5cGUxID09PSB0eXBlMikge1xuICAgICAgdmFyIHZhbHVlMSA9IHYxLnZhbHVlO1xuICAgICAgdmFyIHZhbHVlMiA9IHYyLnZhbHVlO1xuXG4gICAgICBpZiAodHlwZTEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIENvbXBhcmUgc3RyaW5ncyBjYXNlLWluc2Vuc2l0aXZlbHlcbiAgICAgICAgdmFsdWUxID0gdmFsdWUxLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhbHVlMiA9IHZhbHVlMi50b0xvd2VyQ2FzZSgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gRm9yIGJhc2ljIG9iamVjdHMsIHVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdFxuICAgICAgICAvLyBpbiB0aGUgY29sbGVjdGlvbiBpbnN0ZWFkIG9mIHRoZSB2YWx1ZVxuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUxKSkgdmFsdWUxID0gdjEuaW5kZXg7XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZTIpKSB2YWx1ZTIgPSB2Mi5pbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlMSAhPT0gdmFsdWUyKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlMSA8IHZhbHVlMiA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gdHlwZTEgPCB0eXBlMiA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgYSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBGb3IgZHluYW1pY2FsbHkgY3JlYXRpbmcgYGhyZWZgIGF0dHJpYnV0ZXMgZm9yIGEgdGFncywgc2VlIHRoZSB7QGxpbmsgbmcubmdIcmVmIGBuZ0hyZWZgfSBkaXJlY3RpdmUuXG4gKi9cbnZhciBodG1sQW5jaG9yRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnRScsXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBpZiAoIWF0dHIuaHJlZiAmJiAhYXR0ci54bGlua0hyZWYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAvLyBJZiB0aGUgbGlua2VkIGVsZW1lbnQgaXMgbm90IGFuIGFuY2hvciB0YWcgYW55bW9yZSwgZG8gbm90aGluZ1xuICAgICAgICBpZiAoZWxlbWVudFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHJldHVybjtcblxuICAgICAgICAvLyBTVkdBRWxlbWVudCBkb2VzIG5vdCB1c2UgdGhlIGhyZWYgYXR0cmlidXRlLCBidXQgcmF0aGVyIHRoZSAneGxpbmtIcmVmJyBhdHRyaWJ1dGUuXG4gICAgICAgIHZhciBocmVmID0gdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScgP1xuICAgICAgICAgICAgICAgICAgICd4bGluazpocmVmJyA6ICdocmVmJztcbiAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuXG4gICAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoaHJlZikpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hyZWZcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhbiBocmVmIGF0dHJpYnV0ZSB3aWxsXG4gKiBtYWtlIHRoZSBsaW5rIGdvIHRvIHRoZSB3cm9uZyBVUkwgaWYgdGhlIHVzZXIgY2xpY2tzIGl0IGJlZm9yZVxuICogQW5ndWxhciBoYXMgYSBjaGFuY2UgdG8gcmVwbGFjZSB0aGUgYHt7aGFzaH19YCBtYXJrdXAgd2l0aCBpdHNcbiAqIHZhbHVlLiBVbnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBtYXJrdXAgdGhlIGxpbmsgd2lsbCBiZSBicm9rZW5cbiAqIGFuZCB3aWxsIG1vc3QgbGlrZWx5IHJldHVybiBhIDQwNCBlcnJvci4gVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZVxuICogc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgd3Jvbmcgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGEgaHJlZj1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiPmxpbmsxPC9hPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGEgbmctaHJlZj1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiPmxpbmsxPC9hPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgQVxuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdIcmVmIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIHZhcmlvdXMgY29tYmluYXRpb25zIG9mIGBocmVmYCwgYG5nLWhyZWZgIGFuZCBgbmctY2xpY2tgIGF0dHJpYnV0ZXNcbiAqIGluIGxpbmtzIGFuZCB0aGVpciBkaWZmZXJlbnQgYmVoYXZpb3JzOlxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1ocmVmXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWx1ZVwiIC8+PGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0zXCIgbmctaHJlZj1cIi97eycxMjMnfX1cIj5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNlwiIG5nLWhyZWY9XCJ7e3ZhbHVlfX1cIj5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzEyMyQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC8xMjMkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzYkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiIC8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3Jjc2V0XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Rpc2FibGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIHNldHMgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50ICh0eXBpY2FsbHkgYSBmb3JtIGNvbnRyb2wsXG4gKiBlLmcuIGBpbnB1dGAsIGBidXR0b25gLCBgc2VsZWN0YCBldGMuKSBpZiB0aGVcbiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGluc2lkZSBgbmdEaXNhYmxlZGAgZXZhbHVhdGVzIHRvIHRydXRoeS5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBkaXNhYmxlZGBcbiAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLWRpc2FibGVkXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8YnV0dG9uIG5nLW1vZGVsPVwiYnV0dG9uXCIgbmctZGlzYWJsZWQ9XCJjaGVja2VkXCI+QnV0dG9uPC9idXR0b24+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hlY2tlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldHMgdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdDaGVja2VkYCBpcyB0cnV0aHkuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZGlyZWN0aXZlIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sXG4gKiBhcyB0aGlzIGNhbiBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgY2hlY2tlZGBcbiAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNoZWNrZWRcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYXN0ZXJcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCBpZD1cImNoZWNrU2xhdmVcIiB0eXBlPVwiY2hlY2tib3hcIiBuZy1jaGVja2VkPVwibWFzdGVyXCIgYXJpYS1sYWJlbD1cIlNsYXZlIGlucHV0XCI+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgY2hlY2sgYm90aCBjaGVja0JveGVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ21hc3RlcicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoZWNrZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVhZG9ubHlcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgYHJlYWRvbmx5YCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdSZWFkb25seWAgaXMgdHJ1dGh5LlxuICogTm90ZSB0aGF0IGByZWFkb25seWAgYXBwbGllcyBvbmx5IHRvIGBpbnB1dGAgZWxlbWVudHMgd2l0aCBzcGVjaWZpYyB0eXBlcy4gW1NlZSB0aGUgaW5wdXQgZG9jcyBvblxuICogTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjYXR0ci1yZWFkb25seSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgcmVhZG9ubHlgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1yZWFkb25seVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIG1ha2UgdGV4dCByZWFkb25seTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctcmVhZG9ubHk9XCJjaGVja2VkXCIgdmFsdWU9XCJJJ20gQW5ndWxhclwiIGFyaWEtbGFiZWw9XCJSZWFkb25seSBmaWVsZFwiIC8+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIHJlYWRvbmx5IGF0dHInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPVwidGV4dFwiXScpKS5nZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPVwidGV4dFwiXScpKS5nZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUmVhZG9ubHkgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwicmVhZG9ubHlcIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NlbGVjdGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nU2VsZWN0ZWRgIGlzIHRydXRoeS5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBzZWxlY3RlZGBcbiAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAgICoqTm90ZToqKiBgbmdTZWxlY3RlZGAgZG9lcyBub3QgaW50ZXJhY3Qgd2l0aCB0aGUgYHNlbGVjdGAgYW5kIGBuZ01vZGVsYCBkaXJlY3RpdmVzLCBpdCBvbmx5XG4gKiAgIHNldHMgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LiBJZiB5b3UgYXJlIHVzaW5nIGBuZ01vZGVsYCBvbiB0aGUgc2VsZWN0LCB5b3VcbiAqICAgc2hvdWxkIG5vdCB1c2UgYG5nU2VsZWN0ZWRgIG9uIHRoZSBvcHRpb25zLCBhcyBgbmdNb2RlbGAgd2lsbCBzZXQgdGhlIHNlbGVjdCB2YWx1ZSBhbmRcbiAqICAgc2VsZWN0ZWQgb3B0aW9ucy5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLXNlbGVjdGVkXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gc2VsZWN0OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPHNlbGVjdCBhcmlhLWxhYmVsPVwibmdTZWxlY3RlZCBkZW1vXCI+XG4gICAgICAgICAgPG9wdGlvbj5IZWxsbyE8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIGlkPVwiZ3JlZXRcIiBuZy1zZWxlY3RlZD1cInNlbGVjdGVkXCI+R3JlZXRpbmdzITwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgR3JlZXRpbmdzIScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGVkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgT1BUSU9OXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2VsZWN0ZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwic2VsZWN0ZWRcIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdPcGVuXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIGBvcGVuYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdPcGVuYCBpcyB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgb3BlbmBcbiAqIGF0dHJpYnV0ZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBicm93c2VyIGNvbXBhdGliaWxpdHlcbiAqXG4gKiBFZGdlLCBGaXJlZm94LCBhbmQgSW50ZXJuZXQgRXhwbG9yZXIgZG8gbm90IHN1cHBvcnQgdGhlIGBkZXRhaWxzYCBlbGVtZW50LCBpdCBpc1xuICogcmVjb21tZW5kZWQgdG8gdXNlIHtAbGluayBuZy5uZ1Nob3d9IGFuZCB7QGxpbmsgbmcubmdIaWRlfSBpbnN0ZWFkLlxuICpcbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1vcGVuXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxsYWJlbD5DaGVjayBtZSBjaGVjayBtdWx0aXBsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwib3BlblwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgIDxkZXRhaWxzIGlkPVwiZGV0YWlsc1wiIG5nLW9wZW49XCJvcGVuXCI+XG4gICAgICAgICAgICA8c3VtbWFyeT5TaG93L0hpZGUgbWU8L3N1bW1hcnk+XG4gICAgICAgICA8L2RldGFpbHM+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIG9wZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdvcGVuJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICB9KTtcbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBERVRBSUxTXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nT3BlbiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJvcGVuXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG52YXIgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMgPSB7fTtcblxuLy8gYm9vbGVhbiBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEJPT0xFQU5fQVRUUiwgZnVuY3Rpb24ocHJvcE5hbWUsIGF0dHJOYW1lKSB7XG4gIC8vIGJpbmRpbmcgdG8gbXVsdGlwbGUgaXMgbm90IHN1cHBvcnRlZFxuICBpZiAocHJvcE5hbWUgPT09ICdtdWx0aXBsZScpIHJldHVybjtcblxuICBmdW5jdGlvbiBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCAhIXZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICB2YXIgbGlua0ZuID0gZGVmYXVsdExpbmtGbjtcblxuICBpZiAocHJvcE5hbWUgPT09ICdjaGVja2VkJykge1xuICAgIGxpbmtGbiA9IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAvLyBlbnN1cmluZyBuZ0NoZWNrZWQgZG9lc24ndCBpbnRlcmZlcmUgd2l0aCBuZ01vZGVsIHdoZW4gYm90aCBhcmUgc2V0IG9uIHRoZSBzYW1lIGlucHV0XG4gICAgICBpZiAoYXR0ci5uZ01vZGVsICE9PSBhdHRyW25vcm1hbGl6ZWRdKSB7XG4gICAgICAgIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGxpbmtGblxuICAgIH07XG4gIH07XG59KTtcblxuLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEFMSUFTRURfQVRUUiwgZnVuY3Rpb24oaHRtbEF0dHIsIG5nQXR0cikge1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tuZ0F0dHJdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvL3NwZWNpYWwgY2FzZSBuZ1BhdHRlcm4gd2hlbiBhIGxpdGVyYWwgcmVndWxhciBleHByZXNzaW9uIHZhbHVlXG4gICAgICAgIC8vaXMgdXNlZCBhcyB0aGUgZXhwcmVzc2lvbiAodGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB3YXRjaCBhbnl0aGluZykuXG4gICAgICAgIGlmIChuZ0F0dHIgPT09ICduZ1BhdHRlcm4nICYmIGF0dHIubmdQYXR0ZXJuLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gYXR0ci5uZ1BhdHRlcm4ubWF0Y2goUkVHRVhfU1RSSU5HX1JFR0VYUCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoJ25nUGF0dGVybicsIG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmdBdHRyXSwgZnVuY3Rpb24gbmdBdHRyQWxpYXNXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGF0dHIuJHNldChuZ0F0dHIsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vLyBuZy1zcmMsIG5nLXNyY3NldCwgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkXG5mb3JFYWNoKFsnc3JjJywgJ3NyY3NldCcsICdocmVmJ10sIGZ1bmN0aW9uKGF0dHJOYW1lKSB7XG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogOTksIC8vIGl0IG5lZWRzIHRvIHJ1biBhZnRlciB0aGUgYXR0cmlidXRlcyBhcmUgaW50ZXJwb2xhdGVkXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBhdHRyTmFtZSxcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyTmFtZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJyAmJlxuICAgICAgICAgICAgdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgICBuYW1lID0gJ3hsaW5rSHJlZic7XG4gICAgICAgICAgYXR0ci4kYXR0cltuYW1lXSA9ICd4bGluazpocmVmJztcbiAgICAgICAgICBwcm9wTmFtZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhdHRyLiRvYnNlcnZlKG5vcm1hbGl6ZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicpIHtcbiAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGF0dHIuJHNldChuYW1lLCB2YWx1ZSk7XG5cbiAgICAgICAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAgICAgICAvLyBPbiBJRSwgaWYgXCJuZzpzcmNcIiBkaXJlY3RpdmUgZGVjbGFyYXRpb24gaXMgdXNlZCBhbmQgXCJzcmNcIiBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdFxuICAgICAgICAgIC8vIHRoZW4gY2FsbGluZyBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ZvbycpIGRvZXNuJ3QgZG8gYW55dGhpbmcsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byBzZXQgdGhlIHByb3BlcnR5IGFzIHdlbGwgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAgICAgICAgLy8gV2UgdXNlIGF0dHJbYXR0ck5hbWVdIHZhbHVlIHNpbmNlICRzZXQgY2FuIHNhbml0aXplIHRoZSB1cmwuXG4gICAgICAgICAgaWYgKG1zaWUgJiYgcHJvcE5hbWUpIGVsZW1lbnQucHJvcChwcm9wTmFtZSwgYXR0cltuYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLyogZ2xvYmFsIC1udWxsRm9ybUN0cmwsIC1QRU5ESU5HX0NMQVNTLCAtU1VCTUlUVEVEX0NMQVNTXG4gKi9cbnZhciBudWxsRm9ybUN0cmwgPSB7XG4gICRhZGRDb250cm9sOiBub29wLFxuICAkJHJlbmFtZUNvbnRyb2w6IG51bGxGb3JtUmVuYW1lQ29udHJvbCxcbiAgJHJlbW92ZUNvbnRyb2w6IG5vb3AsXG4gICRzZXRWYWxpZGl0eTogbm9vcCxcbiAgJHNldERpcnR5OiBub29wLFxuICAkc2V0UHJpc3RpbmU6IG5vb3AsXG4gICRzZXRTdWJtaXR0ZWQ6IG5vb3Bcbn0sXG5QRU5ESU5HX0NMQVNTID0gJ25nLXBlbmRpbmcnLFxuU1VCTUlUVEVEX0NMQVNTID0gJ25nLXN1Ym1pdHRlZCc7XG5cbmZ1bmN0aW9uIG51bGxGb3JtUmVuYW1lQ29udHJvbChjb250cm9sLCBuYW1lKSB7XG4gIGNvbnRyb2wuJG5hbWUgPSBuYW1lO1xufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIGFsbCBvZiB0aGUgY29udGFpbmluZyBmb3JtcyBhbmQgY29udHJvbHMgYXJlIHZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBpbnZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcGVuZGluZyBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBwZW5kaW5nLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkc3VibWl0dGVkIFRydWUgaWYgdXNlciBoYXMgc3VibWl0dGVkIHRoZSBmb3JtIGV2ZW4gaWYgaXRzIGludmFsaWQuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBJcyBhbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yXG4gKiAgZm9ybXMgd2l0aCBmYWlsaW5nIHZhbGlkYXRvcnMsIHdoZXJlOlxuICpcbiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb24gdG9rZW5zIChlcnJvciBuYW1lcyksXG4gKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGhhdmUgYSBmYWlsaW5nIHZhbGlkYXRvciBmb3IgZ2l2ZW4gZXJyb3IgbmFtZS5cbiAqXG4gKiAgQnVpbHQtaW4gdmFsaWRhdGlvbiB0b2tlbnM6XG4gKlxuICogIC0gYGVtYWlsYFxuICogIC0gYG1heGBcbiAqICAtIGBtYXhsZW5ndGhgXG4gKiAgLSBgbWluYFxuICogIC0gYG1pbmxlbmd0aGBcbiAqICAtIGBudW1iZXJgXG4gKiAgLSBgcGF0dGVybmBcbiAqICAtIGByZXF1aXJlZGBcbiAqICAtIGB1cmxgXG4gKiAgLSBgZGF0ZWBcbiAqICAtIGBkYXRldGltZWxvY2FsYFxuICogIC0gYHRpbWVgXG4gKiAgLSBgd2Vla2BcbiAqICAtIGBtb250aGBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBGb3JtQ29udHJvbGxlcmAga2VlcHMgdHJhY2sgb2YgYWxsIGl0cyBjb250cm9scyBhbmQgbmVzdGVkIGZvcm1zIGFzIHdlbGwgYXMgdGhlIHN0YXRlIG9mIHRoZW0sXG4gKiBzdWNoIGFzIGJlaW5nIHZhbGlkL2ludmFsaWQgb3IgZGlydHkvcHJpc3RpbmUuXG4gKlxuICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2VcbiAqIG9mIGBGb3JtQ29udHJvbGxlcmAuXG4gKlxuICovXG4vL2Fza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuRm9ybUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRzY29wZScsICckYW5pbWF0ZScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIEZvcm1Db250cm9sbGVyKCRlbGVtZW50LCAkYXR0cnMsICRzY29wZSwgJGFuaW1hdGUsICRpbnRlcnBvbGF0ZSkge1xuICB0aGlzLiQkY29udHJvbHMgPSBbXTtcblxuICAvLyBpbml0IHN0YXRlXG4gIHRoaXMuJGVycm9yID0ge307XG4gIHRoaXMuJCRzdWNjZXNzID0ge307XG4gIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHJzLm5hbWUgfHwgJGF0dHJzLm5nRm9ybSB8fCAnJykoJHNjb3BlKTtcbiAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcbiAgdGhpcy4kc3VibWl0dGVkID0gZmFsc2U7XG4gIHRoaXMuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuXG4gIHRoaXMuJCRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gIHRoaXMuJCRhbmltYXRlID0gJGFuaW1hdGU7XG5cbiAgc2V0dXBWYWxpZGl0eSh0aGlzKTtcbn1cblxuRm9ybUNvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUm9sbGJhY2sgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBuZWVkZWQgYnkgdGhlIHJlc2V0IGJ1dHRvbiBvZlxuICAgKiBhIGZvcm0gdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBwZW5kIHVwZGF0ZXMuXG4gICAqL1xuICAkcm9sbGJhY2tWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGNvbW1pdFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tbWl0IGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICAkY29tbWl0Vmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkYWRkQ29udHJvbFxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udHJvbCBjb250cm9sIG9iamVjdCwgZWl0aGVyIGEge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXJ9IG9yIGFuXG4gICAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyfVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBjb250cm9sIHdpdGggdGhlIGZvcm0uIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseVxuICAgKiB3aGVuIHRoZXkgYXJlIGxpbmtlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb250cm9sIHdpbGwgbm90IGJlIHJlZmxlY3RlZCBvbiB0aGUgbmV3IHBhcmVudCBmb3JtLiBUaGlzXG4gICAqIGlzIG5vdCBhbiBpc3N1ZSB3aXRoIG5vcm1hbCB1c2UsIGFzIGZyZXNobHkgY29tcGlsZWQgYW5kIGxpbmtlZCBjb250cm9scyBhcmUgaW4gYSBgJHByaXN0aW5lYFxuICAgKiBzdGF0ZS5cbiAgICpcbiAgICogSG93ZXZlciwgaWYgdGhlIG1ldGhvZCBpcyB1c2VkIHByb2dyYW1tYXRpY2FsbHksIGZvciBleGFtcGxlIGJ5IGFkZGluZyBkeW5hbWljYWxseSBjcmVhdGVkIGNvbnRyb2xzLFxuICAgKiBvciBjb250cm9scyB0aGF0IGhhdmUgYmVlbiBwcmV2aW91c2x5IHJlbW92ZWQgd2l0aG91dCBkZXN0cm95aW5nIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnQsXG4gICAqIGl0J3MgdGhlIGRldmVsb3BlcnMgcmVzcG9uc2liaWxpdHkgdG8gbWFrZSBzdXJlIHRoZSBjdXJyZW50IHN0YXRlIHByb3BhZ2F0ZXMgdG8gdGhlIHBhcmVudCBmb3JtLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgYW4gaW5wdXQgY29udHJvbCBpcyBhZGRlZCB0aGF0IGlzIGFscmVhZHkgYCRkaXJ0eWAgYW5kIGhhcyBgJGVycm9yYCBwcm9wZXJ0aWVzLFxuICAgKiBjYWxsaW5nIGAkc2V0RGlydHkoKWAgYW5kIGAkdmFsaWRhdGUoKWAgYWZ0ZXJ3YXJkcyB3aWxsIHByb3BhZ2F0ZSB0aGUgc3RhdGUgdG8gdGhlIHBhcmVudCBmb3JtLlxuICAgKi9cbiAgJGFkZENvbnRyb2w6IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAvLyBCcmVha2luZyBjaGFuZ2UgLSBiZWZvcmUsIGlucHV0cyB3aG9zZSBuYW1lIHdhcyBcImhhc093blByb3BlcnR5XCIgd2VyZSBxdWlldGx5IGlnbm9yZWRcbiAgICAvLyBhbmQgbm90IGFkZGVkIHRvIHRoZSBzY29wZS4gIE5vdyB3ZSB0aHJvdyBhbiBlcnJvci5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lLCAnaW5wdXQnKTtcbiAgICB0aGlzLiQkY29udHJvbHMucHVzaChjb250cm9sKTtcblxuICAgIGlmIChjb250cm9sLiRuYW1lKSB7XG4gICAgICB0aGlzW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcbiAgICB9XG5cbiAgICBjb250cm9sLiQkcGFyZW50Rm9ybSA9IHRoaXM7XG4gIH0sXG5cbiAgLy8gUHJpdmF0ZSBBUEk6IHJlbmFtZSBhIGZvcm0gY29udHJvbFxuICAkJHJlbmFtZUNvbnRyb2w6IGZ1bmN0aW9uKGNvbnRyb2wsIG5ld05hbWUpIHtcbiAgICB2YXIgb2xkTmFtZSA9IGNvbnRyb2wuJG5hbWU7XG5cbiAgICBpZiAodGhpc1tvbGROYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIHRoaXNbb2xkTmFtZV07XG4gICAgfVxuICAgIHRoaXNbbmV3TmFtZV0gPSBjb250cm9sO1xuICAgIGNvbnRyb2wuJG5hbWUgPSBuZXdOYW1lO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJlbW92ZUNvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlcmVnaXN0ZXIgYSBjb250cm9sIGZyb20gdGhlIGZvcm0uXG4gICAqXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IG9ubHkgdGhlIHJlbW92ZWQgY29udHJvbCdzIHZhbGlkYXRpb24gc3RhdGUgKGAkZXJyb3JzYGV0Yy4pIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZVxuICAgKiBmb3JtLiBgJGRpcnR5YCwgYCRzdWJtaXR0ZWRgIHN0YXRlcyB3aWxsIG5vdCBiZSBjaGFuZ2VkLCBiZWNhdXNlIHRoZSBleHBlY3RlZCBiZWhhdmlvciBjYW4gYmVcbiAgICogZGlmZmVyZW50IGZyb20gY2FzZSB0byBjYXNlLiBGb3IgZXhhbXBsZSwgcmVtb3ZpbmcgdGhlIG9ubHkgYCRkaXJ0eWAgY29udHJvbCBmcm9tIGEgZm9ybSBtYXkgb3JcbiAgICogbWF5IG5vdCBtZWFuIHRoYXQgdGhlIGZvcm0gaXMgc3RpbGwgYCRkaXJ0eWAuXG4gICAqL1xuICAkcmVtb3ZlQ29udHJvbDogZnVuY3Rpb24oY29udHJvbCkge1xuICAgIGlmIChjb250cm9sLiRuYW1lICYmIHRoaXNbY29udHJvbC4kbmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW2NvbnRyb2wuJG5hbWVdO1xuICAgIH1cbiAgICBmb3JFYWNoKHRoaXMuJHBlbmRpbmcsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICB0aGlzLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9LCB0aGlzKTtcbiAgICBmb3JFYWNoKHRoaXMuJGVycm9yLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgdGhpcy4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSwgdGhpcyk7XG4gICAgZm9yRWFjaCh0aGlzLiQkc3VjY2VzcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgIHRoaXMuJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0sIHRoaXMpO1xuXG4gICAgYXJyYXlSZW1vdmUodGhpcy4kJGNvbnRyb2xzLCBjb250cm9sKTtcbiAgICBjb250cm9sLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXREaXJ0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBhIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIGFkZCB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGEgZGlydHlcbiAgICogc3RhdGUgKG5nLWRpcnR5IGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gICAqL1xuICAkc2V0RGlydHk6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICB0aGlzLiRkaXJ0eSA9IHRydWU7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNldHMgdGhlIGZvcm0ncyBgJHByaXN0aW5lYCBzdGF0ZSB0byB0cnVlLCB0aGUgYCRkaXJ0eWAgc3RhdGUgdG8gZmFsc2UsIHJlbW92ZXNcbiAgICogdGhlIGBuZy1kaXJ0eWAgY2xhc3MgYW5kIGFkZHMgdGhlIGBuZy1wcmlzdGluZWAgY2xhc3MuIEFkZGl0aW9uYWxseSwgaXQgc2V0cyB0aGUgYCRzdWJtaXR0ZWRgXG4gICAqIHN0YXRlIHRvIGZhbHNlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkIGluIHRoaXMgZm9ybS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXJcbiAgICogc2F2aW5nIG9yIHJlc2V0dGluZyBpdC5cbiAgICovXG4gICRzZXRQcmlzdGluZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJGFuaW1hdGUuc2V0Q2xhc3ModGhpcy4kJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTLCBESVJUWV9DTEFTUyArICcgJyArIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gICAgdGhpcy4kc3VibWl0dGVkID0gZmFsc2U7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFByaXN0aW5lKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdG91Y2hlZCcgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSBjb250cm9scyB0byB0aGVpclxuICAgKiB1bnRvdWNoZWQgc3RhdGUgKG5nLXVudG91Y2hlZCBjbGFzcykuXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGNvbnRyb2xzIGJhY2sgdG8gdGhlaXIgdW50b3VjaGVkIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHNldHRpbmcgdGhlIGZvcm1cbiAgICogYmFjayB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqL1xuICAkc2V0VW50b3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0VW50b3VjaGVkKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0U3VibWl0dGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBzdWJtaXR0ZWQgc3RhdGUuXG4gICAqL1xuICAkc2V0U3VibWl0dGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICB0aGlzLiRzdWJtaXR0ZWQgPSB0cnVlO1xuICAgIHRoaXMuJCRwYXJlbnRGb3JtLiRzZXRTdWJtaXR0ZWQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRWYWxpZGl0eVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0cyB0aGUgdmFsaWRpdHkgb2YgYSBmb3JtIGNvbnRyb2wuXG4gKlxuICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gKi9cbmFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgY2xheno6IEZvcm1Db250cm9sbGVyLFxuICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICBvYmplY3RbcHJvcGVydHldID0gW2NvbnRyb2xsZXJdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoY29udHJvbGxlcik7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIGxpc3QucHVzaChjb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhcnJheVJlbW92ZShsaXN0LCBjb250cm9sbGVyKTtcbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb3JtXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBOZXN0YWJsZSBhbGlhcyBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gYGZvcm1gfSBkaXJlY3RpdmUuIEhUTUxcbiAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhXG4gKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiBOb3RlOiB0aGUgcHVycG9zZSBvZiBgbmdGb3JtYCBpcyB0byBncm91cCBjb250cm9scyxcbiAqIGJ1dCBub3QgdG8gYmUgYSByZXBsYWNlbWVudCBmb3IgdGhlIGA8Zm9ybT5gIHRhZyB3aXRoIGFsbCBvZiBpdHMgY2FwYWJpbGl0aWVzXG4gKiAoZS5nLiBwb3N0aW5nIHRvIHRoZSBzZXJ2ZXIsIC4uLikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cbiAqXG4gKi9cblxuIC8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgZm9ybVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IGluc3RhbnRpYXRlc1xuICoge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LlxuICpcbiAqIElmIHRoZSBgbmFtZWAgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciBpcyBwdWJsaXNoZWQgb250byB0aGUgY3VycmVudCBzY29wZSB1bmRlclxuICogdGhpcyBuYW1lLlxuICpcbiAqICMgQWxpYXM6IHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfVxuICpcbiAqIEluIEFuZ3VsYXIsIGZvcm1zIGNhbiBiZSBuZXN0ZWQuIFRoaXMgbWVhbnMgdGhhdCB0aGUgb3V0ZXIgZm9ybSBpcyB2YWxpZCB3aGVuIGFsbCBvZiB0aGUgY2hpbGRcbiAqIGZvcm1zIGFyZSB2YWxpZCBhcyB3ZWxsLiBIb3dldmVyLCBicm93c2VycyBkbyBub3QgYWxsb3cgbmVzdGluZyBvZiBgPGZvcm0+YCBlbGVtZW50cywgc29cbiAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfSBkaXJlY3RpdmUsIHdoaWNoIGJlaGF2ZXMgaWRlbnRpY2FsbHkgdG9cbiAqIGBmb3JtYCBidXQgY2FuIGJlIG5lc3RlZC4gTmVzdGVkIGZvcm1zIGNhbiBiZSB1c2VmdWwsIGZvciBleGFtcGxlLCBpZiB0aGUgdmFsaWRpdHkgb2YgYSBzdWItZ3JvdXBcbiAqIG9mIGNvbnRyb2xzIG5lZWRzIHRvIGJlIGRldGVybWluZWQuXG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogIC0gYG5nLXZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgdmFsaWQuXG4gKiAgLSBgbmctaW52YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGludmFsaWQuXG4gKiAgLSBgbmctcGVuZGluZ2AgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHBlbmRpbmcuXG4gKiAgLSBgbmctcHJpc3RpbmVgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBwcmlzdGluZS5cbiAqICAtIGBuZy1kaXJ0eWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGRpcnR5LlxuICogIC0gYG5nLXN1Ym1pdHRlZGAgaXMgc2V0IGlmIHRoZSBmb3JtIHdhcyBzdWJtaXR0ZWQuXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gKlxuICpcbiAqICMgU3VibWl0dGluZyBhIGZvcm0gYW5kIHByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uXG4gKlxuICogU2luY2UgdGhlIHJvbGUgb2YgZm9ybXMgaW4gY2xpZW50LXNpZGUgQW5ndWxhciBhcHBsaWNhdGlvbnMgaXMgZGlmZmVyZW50IHRoYW4gaW4gY2xhc3NpY2FsXG4gKiByb3VuZHRyaXAgYXBwcywgaXQgaXMgZGVzaXJhYmxlIGZvciB0aGUgYnJvd3NlciBub3QgdG8gdHJhbnNsYXRlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW50byBhIGZ1bGxcbiAqIHBhZ2UgcmVsb2FkIHRoYXQgc2VuZHMgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4gSW5zdGVhZCBzb21lIGphdmFzY3JpcHQgbG9naWMgc2hvdWxkIGJlIHRyaWdnZXJlZFxuICogdG8gaGFuZGxlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW4gYW4gYXBwbGljYXRpb24tc3BlY2lmaWMgd2F5LlxuICpcbiAqIEZvciB0aGlzIHJlYXNvbiwgQW5ndWxhciBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKGZvcm0gc3VibWlzc2lvbiB0byB0aGUgc2VydmVyKSB1bmxlc3MgdGhlXG4gKiBgPGZvcm0+YCBlbGVtZW50IGhhcyBhbiBgYWN0aW9uYCBhdHRyaWJ1dGUgc3BlY2lmaWVkLlxuICpcbiAqIFlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byB3YXlzIHRvIHNwZWNpZnkgd2hhdCBqYXZhc2NyaXB0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW5cbiAqIGEgZm9ybSBpcyBzdWJtaXR0ZWQ6XG4gKlxuICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fSBkaXJlY3RpdmUgb24gdGhlIGZvcm0gZWxlbWVudFxuICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlIG9uIHRoZSBmaXJzdFxuICAqICBidXR0b24gb3IgaW5wdXQgZmllbGQgb2YgdHlwZSBzdWJtaXQgKGlucHV0W3R5cGU9c3VibWl0XSlcbiAqXG4gKiBUbyBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24gb2YgdGhlIGhhbmRsZXIsIHVzZSBvbmx5IG9uZSBvZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH1cbiAqIG9yIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmVzLlxuICogVGhpcyBpcyBiZWNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybSBzdWJtaXNzaW9uIHJ1bGVzIGluIHRoZSBIVE1MIHNwZWNpZmljYXRpb246XG4gKlxuICogLSBJZiBhIGZvcm0gaGFzIG9ubHkgb25lIGlucHV0IGZpZWxkIHRoZW4gaGl0dGluZyBlbnRlciBpbiB0aGlzIGZpZWxkIHRyaWdnZXJzIGZvcm0gc3VibWl0XG4gKiAoYG5nU3VibWl0YClcbiAqIC0gaWYgYSBmb3JtIGhhcyAyKyBpbnB1dCBmaWVsZHMgYW5kIG5vIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW4gaGl0dGluZyBlbnRlclxuICogZG9lc24ndCB0cmlnZ2VyIHN1Ym1pdFxuICogLSBpZiBhIGZvcm0gaGFzIG9uZSBvciBtb3JlIGlucHV0IGZpZWxkcyBhbmQgb25lIG9yIG1vcmUgYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlblxuICogaGl0dGluZyBlbnRlciBpbiBhbnkgb2YgdGhlIGlucHV0IGZpZWxkcyB3aWxsIHRyaWdnZXIgdGhlIGNsaWNrIGhhbmRsZXIgb24gdGhlICpmaXJzdCogYnV0dG9uIG9yXG4gKiBpbnB1dFt0eXBlPXN1Ym1pdF0gKGBuZ0NsaWNrYCkgKmFuZCogYSBzdWJtaXQgaGFuZGxlciBvbiB0aGUgZW5jbG9zaW5nIGZvcm0gKGBuZ1N1Ym1pdGApXG4gKlxuICogQW55IHBlbmRpbmcgYG5nTW9kZWxPcHRpb25zYCBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQuIE5vdGUgdGhhdCBgbmdDbGlja2AgZXZlbnRzIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBtb2RlbCBpcyB1cGRhdGVkLiBVc2UgYG5nU3VibWl0YFxuICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gKlxuICogIyMgQW5pbWF0aW9uIEhvb2tzXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQuXG4gKiBUaGVzZSBjbGFzc2VzIGFyZTogYC5uZy1wcmlzdGluZWAsIGAubmctZGlydHlgLCBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueVxuICogb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIHdpdGhpbiB0aGUgZm9ybS4gQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHNpbWlsYXIgdG8gaG93XG4gKiB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmQgYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbFxuICogYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGEgZm9ybSBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWZvcm0ge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAqICAgYmFja2dyb3VuZDogcmVkO1xuICogICBjb2xvcjp3aGl0ZTtcbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIm5nLWZvcm1cIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiIG1vZHVsZT1cImZvcm1FeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZm9ybUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0Zvcm1Db250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudXNlclR5cGUgPSAnZ3Vlc3QnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlPlxuICAgICAgICAubXktZm9ybSB7XG4gICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLm15LWZvcm0ubmctaW52YWxpZCB7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmVkO1xuICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkZvcm1Db250cm9sbGVyXCIgY2xhc3M9XCJteS1mb3JtXCI+XG4gICAgICAgICB1c2VyVHlwZTogPGlucHV0IG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXNlclR5cGVcIiByZXF1aXJlZD5cbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj48YnI+XG4gICAgICAgICA8Y29kZT51c2VyVHlwZSA9IHt7dXNlclR5cGV9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvY29kZT48YnI+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciB1c2VySW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyVHlwZScpKTtcblxuICAgICAgICAgIHVzZXJJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0VxdWFsKCd1c2VyVHlwZSA9Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICovXG52YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkge1xuICByZXR1cm4gWyckdGltZW91dCcsICckcGFyc2UnLCBmdW5jdGlvbigkdGltZW91dCwgJHBhcnNlKSB7XG4gICAgdmFyIGZvcm1EaXJlY3RpdmUgPSB7XG4gICAgICBuYW1lOiAnZm9ybScsXG4gICAgICByZXN0cmljdDogaXNOZ0Zvcm0gPyAnRUFDJyA6ICdFJyxcbiAgICAgIHJlcXVpcmU6IFsnZm9ybScsICdeXj9mb3JtJ10sIC8vZmlyc3QgaXMgdGhlIGZvcm0ncyBvd24gY3RybCwgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIHBhcmVudCBmb3JtXG4gICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlcixcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nRm9ybUNvbXBpbGUoZm9ybUVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgICBmb3JtRWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICAgIHZhciBuYW1lQXR0ciA9IGF0dHIubmFtZSA/ICduYW1lJyA6IChpc05nRm9ybSAmJiBhdHRyLm5nRm9ybSA/ICduZ0Zvcm0nIDogZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ0Zvcm1QcmVMaW5rKHNjb3BlLCBmb3JtRWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gY3RybHNbMF07XG5cbiAgICAgICAgICAgIC8vIGlmIGBhY3Rpb25gIGF0dHIgaXMgbm90IHByZXNlbnQgb24gdGhlIGZvcm0sIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIChzdWJtaXNzaW9uKVxuICAgICAgICAgICAgaWYgKCEoJ2FjdGlvbicgaW4gYXR0cikpIHtcbiAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIGpxIGV2ZW50cyBiZWNhdXNlIGlmIGEgZm9ybSBpcyBkZXN0cm95ZWQgZHVyaW5nIHN1Ym1pc3Npb24gdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvLyBJRSA5IGlzIG5vdCBhZmZlY3RlZCBiZWNhdXNlIGl0IGRvZXNuJ3QgZmlyZSBhIHN1Ym1pdCBldmVudCBhbmQgdHJ5IHRvIGRvIGEgZnVsbFxuICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxuICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLlxuICAgICAgICAgICAgICB2YXIgaGFuZGxlRm9ybVN1Ym1pc3Npb24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kc2V0U3VibWl0dGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcblxuICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYVxuICAgICAgICAgICAgICAvLyB3YXkgdGhhdCB3aWxsIGFjaGlldmUgdGhlIHByZXZlbnRpb24gb2YgdGhlIGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGZvcm1FbGVtZW50WzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBjb250cm9sbGVyLiQkcGFyZW50Rm9ybTtcbiAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRhZGRDb250cm9sKGNvbnRyb2xsZXIpO1xuXG4gICAgICAgICAgICB2YXIgc2V0dGVyID0gbmFtZUF0dHIgPyBnZXRTZXR0ZXIoY29udHJvbGxlci4kbmFtZSkgOiBub29wO1xuXG4gICAgICAgICAgICBpZiAobmFtZUF0dHIpIHtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZShuYW1lQXR0ciwgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci4kbmFtZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKGNvbnRyb2xsZXIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIgPSBnZXRTZXR0ZXIoY29udHJvbGxlci4kbmFtZSk7XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2woY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgZXh0ZW5kKGNvbnRyb2xsZXIsIG51bGxGb3JtQ3RybCk7IC8vc3RvcCBwcm9wYWdhdGluZyBjaGlsZCBkZXN0cnVjdGlvbiBoYW5kbGVycyB1cHdhcmRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtRGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0dGVyKGV4cHJlc3Npb24pIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSAnJykge1xuICAgICAgICAvL2NyZWF0ZSBhbiBhc3NpZ25hYmxlIGV4cHJlc3Npb24sIHNvIGZvcm1zIHdpdGggYW4gZW1wdHkgbmFtZSBjYW4gYmUgcmVuYW1lZCBsYXRlclxuICAgICAgICByZXR1cm4gJHBhcnNlKCd0aGlzW1wiXCJdJykuYXNzaWduO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRwYXJzZShleHByZXNzaW9uKS5hc3NpZ24gfHwgbm9vcDtcbiAgICB9XG4gIH1dO1xufTtcblxudmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xudmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpO1xuXG5cblxuLy8gaGVscGVyIG1ldGhvZHNcbmZ1bmN0aW9uIHNldHVwVmFsaWRpdHkoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UuJCRjbGFzc0NhY2hlID0ge307XG4gIGluc3RhbmNlLiQkY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoaW5zdGFuY2UuJCRjbGFzc0NhY2hlW1ZBTElEX0NMQVNTXSA9IGluc3RhbmNlLiQkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpO1xufVxuZnVuY3Rpb24gYWRkU2V0VmFsaWRpdHlNZXRob2QoY29udGV4dCkge1xuICB2YXIgY2xhenogPSBjb250ZXh0LmNsYXp6LFxuICAgICAgc2V0ID0gY29udGV4dC5zZXQsXG4gICAgICB1bnNldCA9IGNvbnRleHQudW5zZXQ7XG5cbiAgY2xhenoucHJvdG90eXBlLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25FcnJvcktleSwgc3RhdGUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7XG4gICAgICBjcmVhdGVBbmRTZXQodGhpcywgJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5zZXRBbmRDbGVhbnVwKHRoaXMsICckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIGlmICghaXNCb29sZWFuKHN0YXRlKSkge1xuICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB1bnNldCh0aGlzLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHVuc2V0KHRoaXMuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgICBzZXQodGhpcy4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHVuc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy4kcGVuZGluZykge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3ModGhpcywgUEVORElOR19DTEFTUywgdHJ1ZSk7XG4gICAgICB0aGlzLiR2YWxpZCA9IHRoaXMuJGludmFsaWQgPSB1bmRlZmluZWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKHRoaXMsICcnLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3ModGhpcywgUEVORElOR19DTEFTUywgZmFsc2UpO1xuICAgICAgdGhpcy4kdmFsaWQgPSBpc09iamVjdEVtcHR5KHRoaXMuJGVycm9yKTtcbiAgICAgIHRoaXMuJGludmFsaWQgPSAhdGhpcy4kdmFsaWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKHRoaXMsICcnLCB0aGlzLiR2YWxpZCk7XG4gICAgfVxuXG4gICAgLy8gcmUtcmVhZCB0aGUgc3RhdGUgYXMgdGhlIHNldC91bnNldCBtZXRob2RzIGNvdWxkIGhhdmVcbiAgICAvLyBjb21iaW5lZCBzdGF0ZSBpbiB0aGlzLiRlcnJvclt2YWxpZGF0aW9uRXJyb3JdICh1c2VkIGZvciBmb3JtcyksXG4gICAgLy8gd2hlcmUgc2V0dGluZy91bnNldHRpbmcgb25seSBpbmNyZW1lbnRzL2RlY3JlbWVudHMgdGhlIHZhbHVlLFxuICAgIC8vIGFuZCBkb2VzIG5vdCByZXBsYWNlIGl0LlxuICAgIHZhciBjb21iaW5lZFN0YXRlO1xuICAgIGlmICh0aGlzLiRwZW5kaW5nICYmIHRoaXMuJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuJCRzdWNjZXNzW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKHRoaXMsIHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSk7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5kU2V0KGN0cmwsIG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKCFjdHJsW25hbWVdKSB7XG4gICAgICBjdHJsW25hbWVdID0ge307XG4gICAgfVxuICAgIHNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEFuZENsZWFudXAoY3RybCwgbmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoY3RybFtuYW1lXSkge1xuICAgICAgdW5zZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkge1xuICAgICAgY3RybFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZWRUb2dnbGVDbGFzcyhjdHJsLCBjbGFzc05hbWUsIHN3aXRjaFZhbHVlKSB7XG4gICAgaWYgKHN3aXRjaFZhbHVlICYmICFjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICBjdHJsLiQkYW5pbWF0ZS5hZGRDbGFzcyhjdHJsLiQkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIGN0cmwuJCRjbGFzc0NhY2hlW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIXN3aXRjaFZhbHVlICYmIGN0cmwuJCRjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgIGN0cmwuJCRhbmltYXRlLnJlbW92ZUNsYXNzKGN0cmwuJCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkYXRpb25Dc3MoY3RybCwgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkKSB7XG4gICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJztcblxuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIFZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSB0cnVlKTtcbiAgICBjYWNoZWRUb2dnbGVDbGFzcyhjdHJsLCBJTlZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgaWYgKG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qIGdsb2JhbFxuICBWQUxJRF9DTEFTUzogZmFsc2UsXG4gIElOVkFMSURfQ0xBU1M6IGZhbHNlLFxuICBQUklTVElORV9DTEFTUzogZmFsc2UsXG4gIERJUlRZX0NMQVNTOiBmYWxzZSxcbiAgbmdNb2RlbE1pbkVycjogZmFsc2VcbiovXG5cbi8vIFJlZ2V4IGNvZGUgd2FzIGluaXRpYWxseSBvYnRhaW5lZCBmcm9tIFNPIHByaW9yIHRvIG1vZGlmaWNhdGlvbjogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzE0MzA3MC9qYXZhc2NyaXB0LXJlZ2V4LWlzby1kYXRldGltZSNhbnN3ZXItMzE0MzIzMVxudmFyIElTT19EQVRFX1JFR0VYUCA9IC9eXFxkezQsfS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkXFwuXFxkKyg/OlsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSQvO1xuLy8gU2VlIHZhbGlkIFVSTHMgaW4gUkZDMzk4NyAoaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4Nylcbi8vIE5vdGU6IFdlIGFyZSBiZWluZyBtb3JlIGxlbmllbnQsIGJlY2F1c2UgYnJvd3NlcnMgYXJlIHRvby5cbi8vICAgMS4gU2NoZW1lXG4vLyAgIDIuIFNsYXNoZXNcbi8vICAgMy4gVXNlcm5hbWVcbi8vICAgNC4gUGFzc3dvcmRcbi8vICAgNS4gSG9zdG5hbWVcbi8vICAgNi4gUG9ydFxuLy8gICA3LiBQYXRoXG4vLyAgIDguIFF1ZXJ5XG4vLyAgIDkuIEZyYWdtZW50XG4vLyAgICAgICAgICAgICAgICAgMTExMTExMTExMTExMTExMSAyMjIgICAzMzMzMzMgICAgNDQ0NDQgICAgICAgIDU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1ICAgICA2NjYgICAgIDc3Nzc3Nzc3ICAgICA4ODg4ODg4ICAgICA5OTlcbnZhciBVUkxfUkVHRVhQID0gL15bYS16XVthLXpcXGQuKy1dKjpcXC8qKD86W146QF0rKD86OlteQF0rKT9AKT8oPzpbXlxcczovPyNdK3xcXFtbYS1mXFxkOl0rXSkoPzo6XFxkKyk/KD86XFwvW14/I10qKT8oPzpcXD9bXiNdKik/KD86Iy4qKT8kL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxudmFyIEVNQUlMX1JFR0VYUCA9IC9eKD89LnsxLDI1NH0kKSg/PS57MSw2NH1AKVstISMkJSYnKisvMC05PT9BLVpeX2BhLXp7fH1+XSsoXFwuWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKykqQFtBLVphLXowLTldKFtBLVphLXowLTktXXswLDYxfVtBLVphLXowLTldKT8oXFwuW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPykqJC87XG52YXIgTlVNQkVSX1JFR0VYUCA9IC9eXFxzKigtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKShbZUVdWystXT9cXGQrKT9cXHMqJC87XG52YXIgREFURV9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkezJ9KS0oXFxkezJ9KSQvO1xudmFyIERBVEVUSU1FTE9DQUxfUkVHRVhQID0gL14oXFxkezQsfSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgV0VFS19SRUdFWFAgPSAvXihcXGR7NCx9KS1XKFxcZFxcZCkkLztcbnZhciBNT05USF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKSQvO1xudmFyIFRJTUVfUkVHRVhQID0gL14oXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcblxudmFyIFBBUlRJQUxfVkFMSURBVElPTl9FVkVOVFMgPSAna2V5ZG93biB3aGVlbCBtb3VzZWRvd24nO1xudmFyIFBBUlRJQUxfVkFMSURBVElPTl9UWVBFUyA9IGNyZWF0ZU1hcCgpO1xuZm9yRWFjaCgnZGF0ZSxkYXRldGltZS1sb2NhbCxtb250aCx0aW1lLHdlZWsnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgUEFSVElBTF9WQUxJREFUSU9OX1RZUEVTW3R5cGVdID0gdHJ1ZTtcbn0pO1xuXG52YXIgaW5wdXRUeXBlID0ge1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdGV4dF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN0YW5kYXJkIEhUTUwgdGV4dCBpbnB1dCB3aXRoIGFuZ3VsYXIgZGF0YSBiaW5kaW5nLCBpbmhlcml0ZWQgYnkgbW9zdCBvZiB0aGUgYGlucHV0YCBlbGVtZW50cy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gICAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gICAqICAgIGlucHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInRleHQtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGV4dElucHV0RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdndWVzdCcsXG4gICAgICAgICAgICAgICAgIHdvcmQ6IC9eXFxzKlxcdypcXHMqJC9cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5TaW5nbGUgd29yZDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIG5nLXBhdHRlcm49XCJleGFtcGxlLndvcmRcIiByZXF1aXJlZCBuZy10cmltPVwiZmFsc2VcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVyblwiPlxuICAgICAgICAgICAgICAgU2luZ2xlIHdvcmQgb25seSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8Y29kZT50ZXh0ID0ge3tleGFtcGxlLnRleHR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICA8Y29kZT5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudGV4dCcpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG11bHRpIHdvcmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnaGVsbG8gd29ybGQnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGV4dCc6IHRleHRJbnB1dFR5cGUsXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgaW5wdXRcbiAgICAgKiBAbmFtZSBpbnB1dFtkYXRlXVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSW5wdXQgd2l0aCBkYXRlIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICAqIGRhdGUgZm9ybWF0ICh5eXl5LU1NLWRkKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxLTA2YC4gU2luY2UgbWFueVxuICAgICAqIG1vZGVybiBicm93c2VycyBkbyBub3QgeWV0IHN1cHBvcnQgdGhpcyBpbnB1dCB0eXBlLCBpdCBpcyBpbXBvcnRhbnQgdG8gcHJvdmlkZSBjdWVzIHRvIHVzZXJzIG9uIHRoZVxuICAgICAqIGV4cGVjdGVkIGlucHV0IGZvcm1hdCB2aWEgYSBwbGFjZWhvbGRlciBvciBsYWJlbC5cbiAgICAgKlxuICAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAgKiAgIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgKiAgIChlLmcuIGBtaW49XCJ7e21pbkRhdGUgfCBkYXRlOid5eXl5LU1NLWRkJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1XG4gICAgICogICBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAgKiAgIGEgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzIGF0dHJpYnV0ZVxuICAgICAqICAgKGUuZy4gYG1heD1cInt7bWF4RGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDVcbiAgICAgKiAgIGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gZGF0ZSBzdHJpbmdcbiAgICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlSW5wdXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUlucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDksIDIyKVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGRhdGUgaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NLWRkXCIgbWluPVwiMjAxMy0wMS0wMVwiIG1heD1cIjIwMTMtMTItMzFcIiByZXF1aXJlZCAvPlxuICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZVwiPlxuICAgICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwiJykpO1xuICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAtMjInKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDEnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgJ2RhdGUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRlJywgREFURV9SRUdFWFAsXG4gICAgICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnXSksXG4gICAgICAgICAneXl5eS1NTS1kZCcpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIGRhdGV0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogbG9jYWwgZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAyMDEwLTEyLTI4VDE0OjU3OjAwYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uXG4gICAgKiAgIGluc2lkZSB0aGlzIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5EYXRldGltZUxvY2FsIHwgZGF0ZToneXl5eS1NTS1kZFRISDptbTpzcyd9fVwiYCkuXG4gICAgKiAgIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb25cbiAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heERhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAqICAgTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGV0aW1lIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJkYXRldGltZWxvY2FsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTAsIDExLCAyOCwgMTQsIDU3KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCIgbWluPVwiMjAwMS0wMS0wMVQwMDowMDowMFwiIG1heD1cIjIwMTMtMTItMzFUMDA6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGV0aW1lbG9jYWxcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTAtMTItMjhUMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDFUMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ2RhdGV0aW1lLWxvY2FsJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZXRpbWVsb2NhbCcsIERBVEVUSU1FTE9DQUxfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFVElNRUxPQ0FMX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJywgJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgICd5eXl5LU1NLWRkVEhIOm1tOnNzLnNzcycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdGltZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggdGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICogdGhlIEhUTUw1IHRpbWUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBsb2NhbCB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDE0OjU3OjAwYC4gTW9kZWwgbXVzdCBiZSBhIERhdGUgb2JqZWN0LiBUaGlzIGJpbmRpbmcgd2lsbCBhbHdheXMgb3V0cHV0IGFcbiAgICogRGF0ZSBvYmplY3QgdG8gdGhlIG1vZGVsIG9mIEphbnVhcnkgMSwgMTk3MCwgb3IgbG9jYWwgZGF0ZSBgbmV3IERhdGUoMTk3MCwgMCwgMSwgSEgsIG1tLCBzcylgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pblRpbWUgfCBkYXRlOidISDptbTpzcyd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4VGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gdGltZSBzdHJpbmcgdGhlXG4gICAqICAgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gdGltZSBzdHJpbmcgdGhlXG4gICAqICAgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwidGltZS1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0aW1lRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCd0aW1lRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDE5NzAsIDAsIDEsIDE0LCA1NywgMClcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgdGltZSBiZXR3ZWVuIDhhbSBhbmQgNXBtOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGltZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSEg6bW06c3NcIiBtaW49XCIwODowMDowMFwiIG1heD1cIjE3OjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci50aW1lXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzE0OjU3OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGltZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3RpbWUnLCBUSU1FX1JFR0VYUCxcbiAgICAgIGNyZWF0ZURhdGVQYXJzZXIoVElNRV9SRUdFWFAsIFsnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAnSEg6bW06c3Muc3NzJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFt3ZWVrXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCB3ZWVrLW9mLXRoZS15ZWFyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uIHRvIERhdGUuIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgd2VlayBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLCBmb3IgZXhhbXBsZTogYDIwMTMtVzAyYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWluPVwie3ttaW5XZWVrIHwgZGF0ZToneXl5eS1Xd3cnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZFxuICAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhXZWVrIHwgZGF0ZToneXl5eS1Xd3cnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIndlZWstaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwid2Vla0V4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCd3ZWVrRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDAsIDMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbD5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6XG4gICAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIndlZWtcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIllZWVktVyMjXCIgbWluPVwiMjAxMi1XMzJcIlxuICAgICAgICAgICAgICAgICBtYXg9XCIyMDEzLVc1MlwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3Iud2Vla1wiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLVcwMScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS1XMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ3dlZWsnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd3ZWVrJywgV0VFS19SRUdFWFAsIHdlZWtQYXJzZXIsICd5eXl5LVd3dycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbbW9udGhdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnB1dCB3aXRoIG1vbnRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgbW9udGggaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBtb250aCBmb3JtYXQgKHl5eXktTU0pLCBmb3IgZXhhbXBsZTogYDIwMDktMDFgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKiBJZiB0aGUgbW9kZWwgaXMgbm90IHNldCB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLCB0aGUgbmV4dCB2aWV3IHRvIG1vZGVsIHVwZGF0ZSB3aWxsIHNldCBpdFxuICAgKiB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gbW9udGggZm9ybWF0ICh5eXl5LU1NKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzXG4gICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbk1vbnRoIHwgZGF0ZToneXl5eS1NTSd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4TW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJtb250aC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJtb250aEV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbW9udGhFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBtb250aCBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIm1vbnRoXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU1cIiBtaW49XCIyMDEzLTAxXCIgbWF4PVwiMjAxMy0xMlwiIHJlcXVpcmVkIC8+XG4gICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLm1vbnRoXCI+XG4gICAgICAgICAgICBOb3QgYSB2YWxpZCBtb250aCE8L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgIDwvZm9ybT5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTVwiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ21vbnRoJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnbW9udGgnLCBNT05USF9SRUdFWFAsXG4gICAgIGNyZWF0ZURhdGVQYXJzZXIoTU9OVEhfUkVHRVhQLCBbJ3l5eXknLCAnTU0nXSksXG4gICAgICd5eXl5LU1NJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtudW1iZXJdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggbnVtYmVyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBTZXRzIHRoZSBgbnVtYmVyYCB2YWxpZGF0aW9uXG4gICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIG9mIHR5cGUgYG51bWJlcmAgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogQmUgYXdhcmUgdGhhdCBhIHN0cmluZyBjb250YWluaW5nIGEgbnVtYmVyIGlzIG5vdCBlbm91Z2guIFNlZSB0aGUge0BsaW5rIG5nTW9kZWw6bnVtZm10fVxuICAgKiBlcnJvciBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBhbiBleGFtcGxlIG9mIGhvdyB0byBjb252ZXJ0IHlvdXIgbW9kZWwgaWYgbmVjZXNzYXJ5LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogIyMgSXNzdWVzIHdpdGggSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uXG4gICAqXG4gICAqIEluIGJyb3dzZXJzIHRoYXQgZm9sbG93IHRoZVxuICAgKiBbSFRNTDUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNudW1iZXItc3RhdGUtJTI4dHlwZT1udW1iZXIlMjkpLFxuICAgKiBgaW5wdXRbbnVtYmVyXWAgZG9lcyBub3Qgd29yayBhcyBleHBlY3RlZCB3aXRoIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0uXG4gICAqIElmIGEgbm9uLW51bWJlciBpcyBlbnRlcmVkIGluIHRoZSBpbnB1dCwgdGhlIGJyb3dzZXIgd2lsbCByZXBvcnQgdGhlIHZhbHVlIGFzIGFuIGVtcHR5IHN0cmluZyxcbiAgICogd2hpY2ggbWVhbnMgdGhlIHZpZXcgLyBtb2RlbCB2YWx1ZXMgaW4gYG5nTW9kZWxgIGFuZCBzdWJzZXF1ZW50bHkgdGhlIHNjb3BlIHZhbHVlXG4gICAqIHdpbGwgYWxzbyBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAqICAgIENhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ01pbiBMaWtlIGBtaW5gLCBzZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG5nTWluYCxcbiAgICogICAgYnV0IGRvZXMgbm90IHRyaWdnZXIgSFRNTDUgbmF0aXZlIHZhbGlkYXRpb24uIFRha2VzIGFuIGV4cHJlc3Npb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdNYXggTGlrZSBgbWF4YCwgc2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBuZ01heGAsXG4gICAqICAgIGJ1dCBkb2VzIG5vdCB0cmlnZ2VyIEhUTUw1IG5hdGl2ZSB2YWxpZGF0aW9uLiBUYWtlcyBhbiBleHByZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0ZXAgU2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGRvZXMgbm90IGZpdCB0aGUgYHN0ZXBgIGNvbnN0cmFpbnQuXG4gICAqICAgIENhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdTdGVwIExpa2UgYHN0ZXBgLCBzZXRzIHRoZSBgc3RlcGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgZG9lcyBub3QgZml0IHRoZSBgbmdTdGVwYCBjb25zdHJhaW50LFxuICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibnVtYmVyLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm51bWJlckV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgICB2YWx1ZTogMTJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5OdW1iZXI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiOTlcIiByZXF1aXJlZD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5udW1iZXJcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBudW1iZXIhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxMicpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3VybF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBVUkwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYHVybGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IGFcbiAgICogdmFsaWQgVVJMLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W3VybF1gIHVzZXMgYSByZWdleCB0byB2YWxpZGF0ZSB1cmxzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uLCB5b3UgY2FuIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5XG4gICAqIHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidXJsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInVybEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cmxFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS51cmwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdodHRwOi8vZ29vZ2xlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5VUkw6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ1cmxcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVybC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IudXJsXCI+XG4gICAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD50ZXh0ID0ge3t1cmwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnVybCA9IHt7ISFteUZvcm0uJGVycm9yLnVybH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VybC50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1cmwudGV4dCcpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2h0dHA6Ly9nb29nbGUuY29tJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgdXJsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2JveCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd1cmwnOiB1cmxJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2VtYWlsXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGV4dCBpbnB1dCB3aXRoIGVtYWlsIHZhbGlkYXRpb24uIFNldHMgdGhlIGBlbWFpbGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgbm90IGEgdmFsaWQgZW1haWxcbiAgICogYWRkcmVzcy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIGBpbnB1dFtlbWFpbF1gIHVzZXMgYSByZWdleCB0byB2YWxpZGF0ZSBlbWFpbCBhZGRyZXNzZXMgdGhhdCBpcyBkZXJpdmVkIGZyb20gdGhlIHJlZ2V4XG4gICAqIHVzZWQgaW4gQ2hyb21pdW0uIElmIHlvdSBuZWVkIHN0cmljdGVyIHZhbGlkYXRpb24gKGUuZy4gcmVxdWlyaW5nIGEgdG9wLWxldmVsIGRvbWFpbiksIHlvdSBjYW5cbiAgICogdXNlIGBuZy1wYXR0ZXJuYCBvciBtb2RpZnkgdGhlIGJ1aWx0LWluIHZhbGlkYXRvcnMgKHNlZSB0aGUge0BsaW5rIGd1aWRlL2Zvcm1zIEZvcm1zIGd1aWRlfSlcbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJlbWFpbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJlbWFpbEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlbWFpbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnbWVAZXhhbXBsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgPGxhYmVsPkVtYWlsOlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZW1haWwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWxcIj5cbiAgICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj5cbiAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZW1haWwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+XG4gICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdlbWFpbC50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdlbWFpbC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignbWVAZXhhbXBsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgZW1haWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygneHh4Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3JhZGlvXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCByYWRpbyBidXR0b24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiAgICBOb3RlIHRoYXQgYHZhbHVlYCBvbmx5IHN1cHBvcnRzIGBzdHJpbmdgIHZhbHVlcywgaS5lLiB0aGUgc2NvcGUgbW9kZWwgbmVlZHMgdG8gYmUgYSBzdHJpbmcsXG4gICAqICAgIHRvby4gVXNlIGBuZ1ZhbHVlYCBpZiB5b3UgbmVlZCBjb21wbGV4IG1vZGVscyAoYG51bWJlcmAsIGBvYmplY3RgLCAuLi4pLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gd2hpY2ggYG5nTW9kZWxgIHdpbGwgYmUgYmUgc2V0IHdoZW4gdGhlIHJhZGlvXG4gICAqICAgIGlzIHNlbGVjdGVkLiBTaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBpZiB5b3UgbmVlZFxuICAgKiAgICBhIG5vbi1zdHJpbmcgYG5nTW9kZWxgIChgYm9vbGVhbmAsIGBhcnJheWAsIC4uLikuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFkaW8taW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFkaW9FeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFkaW9FeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jb2xvciA9IHtcbiAgICAgICAgICAgICAgICAgbmFtZTogJ2JsdWUnXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgJHNjb3BlLnNwZWNpYWxWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIjEyMzQ1XCIsXG4gICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJncmVlblwiXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwicmVkXCI+XG4gICAgICAgICAgICAgUmVkXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiBuZy12YWx1ZT1cInNwZWNpYWxWYWx1ZVwiPlxuICAgICAgICAgICAgIEdyZWVuXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiB2YWx1ZT1cImJsdWVcIj5cbiAgICAgICAgICAgICBCbHVlXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvci5uYW1lIHwganNvbn19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICBOb3RlIHRoYXQgYG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCJgIHNldHMgcmFkaW8gaXRlbSdzIHZhbHVlIHRvIGJlIHRoZSB2YWx1ZSBvZiBgJHNjb3BlLnNwZWNpYWxWYWx1ZWAuXG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRzID0gZWxlbWVudC5hbGwoYnkubW9kZWwoJ2NvbG9yLm5hbWUnKSk7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbG9yLm5hbWUnKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignYmx1ZScpO1xuXG4gICAgICAgICAgICBpbnB1dHMuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3JlZCcpO1xuXG4gICAgICAgICAgICBpbnB1dHMuZ2V0KDEpLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2dyZWVuJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdyYWRpbyc6IHJhZGlvSW5wdXRUeXBlLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFuZ2VdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBOYXRpdmUgcmFuZ2UgaW5wdXQgd2l0aCB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi5cbiAgICpcbiAgICogVGhlIG1vZGVsIGZvciB0aGUgcmFuZ2UgaW5wdXQgbXVzdCBhbHdheXMgYmUgYSBgTnVtYmVyYC5cbiAgICpcbiAgICogSUU5IGFuZCBvdGhlciBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBgcmFuZ2VgIHR5cGUgZmFsbCBiYWNrXG4gICAqIHRvIGEgdGV4dCBpbnB1dCB3aXRob3V0IGFueSBkZWZhdWx0IHZhbHVlcyBmb3IgYG1pbmAsIGBtYXhgIGFuZCBgc3RlcGAuIE1vZGVsIGJpbmRpbmcsXG4gICAqIHZhbGlkYXRpb24gYW5kIG51bWJlciBwYXJzaW5nIGFyZSBuZXZlcnRoZWxlc3Mgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgcmFuZ2UgKGxhdGVzdCBDaHJvbWUsIFNhZmFyaSwgRmlyZWZveCwgRWRnZSkgdHJlYXQgYGlucHV0W3JhbmdlXWBcbiAgICogaW4gYSB3YXkgdGhhdCBuZXZlciBhbGxvd3MgdGhlIGlucHV0IHRvIGhvbGQgYW4gaW52YWxpZCB2YWx1ZS4gVGhhdCBtZWFuczpcbiAgICogLSBhbnkgbm9uLW51bWVyaWNhbCB2YWx1ZSBpcyBzZXQgdG8gYChtYXggKyBtaW4pIC8gMmAuXG4gICAqIC0gYW55IG51bWVyaWNhbCB2YWx1ZSB0aGF0IGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudCBtaW4gdmFsLCBvciBncmVhdGVyIHRoYW4gdGhlIGN1cnJlbnQgbWF4IHZhbFxuICAgKiBpcyBzZXQgdG8gdGhlIG1pbiAvIG1heCB2YWwgcmVzcGVjdGl2ZWx5LlxuICAgKiAtIGFkZGl0aW9uYWxseSwgdGhlIGN1cnJlbnQgYHN0ZXBgIGlzIHJlc3BlY3RlZCwgc28gdGhlIG5lYXJlc3QgdmFsdWUgdGhhdCBzYXRpc2ZpZXMgYSBzdGVwXG4gICAqIGlzIHVzZWQuXG4gICAqXG4gICAqIFNlZSB0aGUgW0hUTUwgU3BlYyBvbiBpbnB1dFt0eXBlPXJhbmdlXV0oaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjcmFuZ2Utc3RhdGUtKHR5cGU9cmFuZ2UpKVxuICAgKiBmb3IgbW9yZSBpbmZvLlxuICAgKlxuICAgKiBUaGlzIGhhcyB0aGUgZm9sbG93aW5nIGNvbnNlcXVlbmNlcyBmb3IgQW5ndWxhcjpcbiAgICpcbiAgICogU2luY2UgdGhlIGVsZW1lbnQgdmFsdWUgc2hvdWxkIGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IG1vZGVsIHZhbHVlLCBhIHJhbmdlIGlucHV0XG4gICAqIHdpbGwgc2V0IHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gdG8gdGhlIHZhbHVlIHRoYXQgdGhlIGJyb3dzZXIgaGFzIHNldCBmb3IgdGhlXG4gICAqIGlucHV0IGVsZW1lbnQuIEZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nIGlucHV0IGA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZVwiPmAsXG4gICAqIGlmIHRoZSBhcHBsaWNhdGlvbiBzZXRzIGBtb2RlbC52YWx1ZSA9IG51bGxgLCB0aGUgYnJvd3NlciB3aWxsIHNldCB0aGUgaW5wdXQgdG8gYCc1MCdgLlxuICAgKiBBbmd1bGFyIHdpbGwgdGhlbiBzZXQgdGhlIG1vZGVsIHRvIGA1MGAsIHRvIHByZXZlbnQgaW5wdXQgYW5kIG1vZGVsIHZhbHVlIGJlaW5nIG91dCBvZiBzeW5jLlxuICAgKlxuICAgKiBUaGF0IG1lYW5zIHRoZSBtb2RlbCBmb3IgcmFuZ2Ugd2lsbCBpbW1lZGlhdGVseSBiZSBzZXQgdG8gYDUwYCBhZnRlciBgbmdNb2RlbGAgaGFzIGJlZW5cbiAgICogaW5pdGlhbGl6ZWQuIEl0IGFsc28gbWVhbnMgYSByYW5nZSBpbnB1dCBjYW4gbmV2ZXIgaGF2ZSB0aGUgcmVxdWlyZWQgZXJyb3IuXG4gICAqXG4gICAqIFRoaXMgZG9lcyBub3Qgb25seSBhZmZlY3QgY2hhbmdlcyB0byB0aGUgbW9kZWwgdmFsdWUsIGJ1dCBhbHNvIHRvIHRoZSB2YWx1ZXMgb2YgdGhlIGBtaW5gLFxuICAgKiBgbWF4YCwgYW5kIGBzdGVwYCBhdHRyaWJ1dGVzLiBXaGVuIHRoZXNlIGNoYW5nZSBpbiBhIHdheSB0aGF0IHdpbGwgY2F1c2UgdGhlIGJyb3dzZXIgdG8gbW9kaWZ5XG4gICAqIHRoZSBpbnB1dCB2YWx1ZSwgQW5ndWxhciB3aWxsIGFsc28gdXBkYXRlIHRoZSBtb2RlbCB2YWx1ZS5cbiAgICpcbiAgICogQXV0b21hdGljIHZhbHVlIGFkanVzdG1lbnQgYWxzbyBtZWFucyB0aGF0IGEgcmFuZ2UgaW5wdXQgZWxlbWVudCBjYW4gbmV2ZXIgaGF2ZSB0aGUgYHJlcXVpcmVkYCxcbiAgICogYG1pbmAsIG9yIGBtYXhgIGVycm9ycy5cbiAgICpcbiAgICogSG93ZXZlciwgYHN0ZXBgIGlzIGN1cnJlbnRseSBvbmx5IGZ1bGx5IGltcGxlbWVudGVkIGJ5IEZpcmVmb3guIE90aGVyIGJyb3dzZXJzIGhhdmUgcHJvYmxlbXNcbiAgICogd2hlbiB0aGUgc3RlcCB2YWx1ZSBjaGFuZ2VzIGR5bmFtaWNhbGx5IC0gdGhleSBkbyBub3QgYWRqdXN0IHRoZSBlbGVtZW50IHZhbHVlIGNvcnJlY3RseSwgYnV0XG4gICAqIGluc3RlYWQgbWF5IHNldCB0aGUgYHN0ZXBNaXNtYXRjaGAgZXJyb3IuIElmIHRoYXQncyB0aGUgY2FzZSwgdGhlIEFuZ3VsYXIgd2lsbCBzZXQgdGhlIGBzdGVwYFxuICAgKiBlcnJvciBvbiB0aGUgaW5wdXQsIGFuZCBzZXQgdGhlIG1vZGVsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYGlucHV0W3JhbmdlXWAgaXMgbm90IGNvbXBhdGlibGUgd2l0aGBuZ01heGAsIGBuZ01pbmAsIGFuZCBgbmdTdGVwYCwgYmVjYXVzZSB0aGV5IGRvXG4gICAqIG5vdCBzZXQgdGhlIGBtaW5gIGFuZCBgbWF4YCBhdHRyaWJ1dGVzLCB3aGljaCBtZWFucyB0aGF0IHRoZSBicm93c2VyIHdvbid0IGF1dG9tYXRpY2FsbHkgYWRqdXN0XG4gICAqIHRoZSBpbnB1dCB2YWx1ZSBiYXNlZCBvbiB0aGVpciB2YWx1ZXMsIGFuZCB3aWxsIGFsd2F5cyBhc3N1bWUgbWluID0gMCwgbWF4ID0gMTAwLCBhbmQgc3RlcCA9IDEuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyXG4gICAqICAgICAgICAgICAgICAgICAgdGhhbiBgbWluYC4gQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1heGAuXG4gICAqICAgICAgICAgICAgICAgICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzdGVwIFNldHMgdGhlIGBzdGVwYCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIG1hdGNoZXMgdGhlIGBzdGVwYFxuICAgKiAgICAgICAgICAgICAgICAgIENhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIG5nTW9kZWwgdmFsdWUgY2hhbmdlcyBkdWVcbiAgICogICAgICAgICAgICAgICAgICB0byB1c2VyIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nQ2hlY2tlZCBJZiB0aGUgZXhwcmVzc2lvbiBpcyB0cnV0aHksIHRoZW4gdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuICoqTm90ZSoqIDogYG5nQ2hlY2tlZGAgc2hvdWxkIG5vdCBiZSB1c2VkIGFsb25nc2lkZSBgbmdNb2RlbGAuXG4gICAqICAgICAgICAgICAgICAgICAgICAgIENoZWNrb3V0IHtAbGluayBuZy5kaXJlY3RpdmU6bmdDaGVja2VkIG5nQ2hlY2tlZH0gZm9yIHVzYWdlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInJhbmdlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInJhbmdlRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFuZ2VFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnZhbHVlID0gNzU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1pbiA9IDEwO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXggPSA5MDtcbiAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cblxuICAgICAgICAgICAgTW9kZWwgYXMgcmFuZ2U6IDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuYW1lPVwicmFuZ2VcIiBuZy1tb2RlbD1cInZhbHVlXCIgbWluPVwie3ttaW59fVwiICBtYXg9XCJ7e21heH19XCI+XG4gICAgICAgICAgICA8aHI+XG4gICAgICAgICAgICBNb2RlbCBhcyBudW1iZXI6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPjxicj5cbiAgICAgICAgICAgIE1pbjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1pblwiPjxicj5cbiAgICAgICAgICAgIE1heDogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1heFwiPjxicj5cbiAgICAgICAgICAgIHZhbHVlID0gPGNvZGU+e3t2YWx1ZX19PC9jb2RlPjxici8+XG4gICAgICAgICAgICBteUZvcm0ucmFuZ2UuJHZhbGlkID0gPGNvZGU+e3tteUZvcm0ucmFuZ2UuJHZhbGlkfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kZXJyb3IgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kZXJyb3J9fTwvY29kZT5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cblxuICAgKiAjIyBSYW5nZSBJbnB1dCB3aXRoIG5nTWluICYgbmdNYXggYXR0cmlidXRlc1xuXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFuZ2UtaW5wdXQtZGlyZWN0aXZlLW5nXCIgbW9kdWxlPVwicmFuZ2VFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYW5nZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSA3NTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWluID0gMTA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDkwO1xuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICAgTW9kZWwgYXMgcmFuZ2U6IDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuYW1lPVwicmFuZ2VcIiBuZy1tb2RlbD1cInZhbHVlXCIgbmctbWluPVwibWluXCIgbmctbWF4PVwibWF4XCI+XG4gICAgICAgICAgICA8aHI+XG4gICAgICAgICAgICBNb2RlbCBhcyBudW1iZXI6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPjxicj5cbiAgICAgICAgICAgIE1pbjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1pblwiPjxicj5cbiAgICAgICAgICAgIE1heDogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1heFwiPjxicj5cbiAgICAgICAgICAgIHZhbHVlID0gPGNvZGU+e3t2YWx1ZX19PC9jb2RlPjxici8+XG4gICAgICAgICAgICBteUZvcm0ucmFuZ2UuJHZhbGlkID0gPGNvZGU+e3tteUZvcm0ucmFuZ2UuJHZhbGlkfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kZXJyb3IgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kZXJyb3J9fTwvY29kZT5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cblxuICAgKi9cbiAgJ3JhbmdlJzogcmFuZ2VJbnB1dFR5cGUsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtjaGVja2JveF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEhUTUwgY2hlY2tib3guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ0ZhbHNlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImNoZWNrYm94LWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImNoZWNrYm94RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoZWNrYm94RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTEgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlMiA6ICdZRVMnXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTE6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTFcIj5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+VmFsdWUyOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrYm94TW9kZWwudmFsdWUyXCJcbiAgICAgICAgICAgICAgICAgICAgbmctdHJ1ZS12YWx1ZT1cIidZRVMnXCIgbmctZmFsc2UtdmFsdWU9XCInTk8nXCI+XG4gICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDx0dD52YWx1ZTEgPSB7e2NoZWNrYm94TW9kZWwudmFsdWUxfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD52YWx1ZTIgPSB7e2NoZWNrYm94TW9kZWwudmFsdWUyfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICBpdCgnc2hvdWxkIGNoYW5nZSBzdGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlMSA9IGVsZW1lbnQoYnkuYmluZGluZygnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSk7XG4gICAgICAgICAgICB2YXIgdmFsdWUyID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMicpKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMi5nZXRUZXh0KCkpLnRvQ29udGFpbignWUVTJyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUxJykpLmNsaWNrKCk7XG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2JveE1vZGVsLnZhbHVlMicpKS5jbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMi5nZXRUZXh0KCkpLnRvQ29udGFpbignTk8nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ2NoZWNrYm94JzogY2hlY2tib3hJbnB1dFR5cGUsXG5cbiAgJ2hpZGRlbic6IG5vb3AsXG4gICdidXR0b24nOiBub29wLFxuICAnc3VibWl0Jzogbm9vcCxcbiAgJ3Jlc2V0Jzogbm9vcCxcbiAgJ2ZpbGUnOiBub29wXG59O1xuXG5mdW5jdGlvbiBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKSB7XG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcbn1cblxuZnVuY3Rpb24gYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIHZhciB0eXBlID0gbG93ZXJjYXNlKGVsZW1lbnRbMF0udHlwZSk7XG5cbiAgLy8gSW4gY29tcG9zaXRpb24gbW9kZSwgdXNlcnMgYXJlIHN0aWxsIGlucHV0dGluZyBpbnRlcm1lZGlhdGUgdGV4dCBidWZmZXIsXG4gIC8vIGhvbGQgdGhlIGxpc3RlbmVyIHVudGlsIGNvbXBvc2l0aW9uIGlzIGRvbmUuXG4gIC8vIE1vcmUgYWJvdXQgY29tcG9zaXRpb24gZXZlbnRzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ29tcG9zaXRpb25FdmVudFxuICBpZiAoISRzbmlmZmVyLmFuZHJvaWQpIHtcbiAgICB2YXIgY29tcG9zaW5nID0gZmFsc2U7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbnN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICBjb21wb3NpbmcgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgZWxlbWVudC5vbignY29tcG9zaXRpb25lbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB0aW1lb3V0O1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICRicm93c2VyLmRlZmVyLmNhbmNlbCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoY29tcG9zaW5nKSByZXR1cm47XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWwoKSxcbiAgICAgICAgZXZlbnQgPSBldiAmJiBldi50eXBlO1xuXG4gICAgLy8gQnkgZGVmYXVsdCB3ZSB3aWxsIHRyaW0gdGhlIHZhbHVlXG4gICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBuZy10cmltIGV4aXN0cyB3ZSB3aWxsIGF2b2lkIHRyaW1taW5nXG4gICAgLy8gSWYgaW5wdXQgdHlwZSBpcyAncGFzc3dvcmQnLCB0aGUgdmFsdWUgaXMgbmV2ZXIgdHJpbW1lZFxuICAgIGlmICh0eXBlICE9PSAncGFzc3dvcmQnICYmICghYXR0ci5uZ1RyaW0gfHwgYXR0ci5uZ1RyaW0gIT09ICdmYWxzZScpKSB7XG4gICAgICB2YWx1ZSA9IHRyaW0odmFsdWUpO1xuICAgIH1cblxuICAgIC8vIElmIGEgY29udHJvbCBpcyBzdWZmZXJpbmcgZnJvbSBiYWQgaW5wdXQgKGR1ZSB0byBuYXRpdmUgdmFsaWRhdG9ycyksIGJyb3dzZXJzIGRpc2NhcmQgaXRzXG4gICAgLy8gdmFsdWUsIHNvIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gcmV2YWxpZGF0ZSAoYnkgY2FsbGluZyAkc2V0Vmlld1ZhbHVlIGFnYWluKSBldmVuIGlmIHRoZVxuICAgIC8vIGNvbnRyb2wncyB2YWx1ZSBpcyB0aGUgc2FtZSBlbXB0eSB2YWx1ZSB0d2ljZSBpbiBhIHJvdy5cbiAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2YWx1ZSB8fCAodmFsdWUgPT09ICcnICYmIGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSkge1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGlmIHRoZSBicm93c2VyIGRvZXMgc3VwcG9ydCBcImlucHV0XCIgZXZlbnQsIHdlIGFyZSBmaW5lIC0gZXhjZXB0IG9uIElFOSB3aGljaCBkb2Vzbid0IGZpcmUgdGhlXG4gIC8vIGlucHV0IGV2ZW50IG9uIGJhY2tzcGFjZSwgZGVsZXRlIG9yIGN1dFxuICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ2lucHV0JykpIHtcbiAgICBlbGVtZW50Lm9uKCdpbnB1dCcsIGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGVmZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2LCBpbnB1dCwgb3JpZ1ZhbHVlKSB7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICghaW5wdXQgfHwgaW5wdXQudmFsdWUgIT09IG9yaWdWYWx1ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAvLyBpZ25vcmVcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXG4gICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuO1xuXG4gICAgICBkZWZlckxpc3RlbmVyKGV2ZW50LCB0aGlzLCB0aGlzLnZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcbiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHtcbiAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxuICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG5cbiAgLy8gU29tZSBuYXRpdmUgaW5wdXQgdHlwZXMgKGRhdGUtZmFtaWx5KSBoYXZlIHRoZSBhYmlsaXR5IHRvIGNoYW5nZSB2YWxpZGl0eSB3aXRob3V0XG4gIC8vIGZpcmluZyBhbnkgaW5wdXQvY2hhbmdlIGV2ZW50cy5cbiAgLy8gRm9yIHRoZXNlIGV2ZW50IHR5cGVzLCB3aGVuIG5hdGl2ZSB2YWxpZGF0b3JzIGFyZSBwcmVzZW50IGFuZCB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgdHlwZSxcbiAgLy8gY2hlY2sgZm9yIHZhbGlkaXR5IGNoYW5nZXMgb24gdmFyaW91cyBET00gZXZlbnRzLlxuICBpZiAoUEFSVElBTF9WQUxJREFUSU9OX1RZUEVTW3R5cGVdICYmIGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzICYmIHR5cGUgPT09IGF0dHIudHlwZSkge1xuICAgIGVsZW1lbnQub24oUEFSVElBTF9WQUxJREFUSU9OX0VWRU5UUywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKGV2KSB7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdmFyIHZhbGlkaXR5ID0gdGhpc1tWQUxJRElUWV9TVEFURV9QUk9QRVJUWV07XG4gICAgICAgIHZhciBvcmlnQmFkSW5wdXQgPSB2YWxpZGl0eS5iYWRJbnB1dDtcbiAgICAgICAgdmFyIG9yaWdUeXBlTWlzbWF0Y2ggPSB2YWxpZGl0eS50eXBlTWlzbWF0Y2g7XG4gICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICBpZiAodmFsaWRpdHkuYmFkSW5wdXQgIT09IG9yaWdCYWRJbnB1dCB8fCB2YWxpZGl0eS50eXBlTWlzbWF0Y2ggIT09IG9yaWdUeXBlTWlzbWF0Y2gpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgRmlyZWZveCB2YWxpZGF0aW9uICMxMjEwMi5cbiAgICB2YXIgdmFsdWUgPSBjdHJsLiRpc0VtcHR5KGN0cmwuJHZpZXdWYWx1ZSkgPyAnJyA6IGN0cmwuJHZpZXdWYWx1ZTtcbiAgICBpZiAoZWxlbWVudC52YWwoKSAhPT0gdmFsdWUpIHtcbiAgICAgIGVsZW1lbnQudmFsKHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtQYXJzZXIoaXNvV2VlaywgZXhpc3RpbmdEYXRlKSB7XG4gIGlmIChpc0RhdGUoaXNvV2VlaykpIHtcbiAgICByZXR1cm4gaXNvV2VlaztcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhpc29XZWVrKSkge1xuICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHBhcnRzID0gV0VFS19SRUdFWFAuZXhlYyhpc29XZWVrKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLFxuICAgICAgICAgIHdlZWsgPSArcGFydHNbMl0sXG4gICAgICAgICAgaG91cnMgPSAwLFxuICAgICAgICAgIG1pbnV0ZXMgPSAwLFxuICAgICAgICAgIHNlY29uZHMgPSAwLFxuICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IDAsXG4gICAgICAgICAgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhciksXG4gICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3O1xuXG4gICAgICBpZiAoZXhpc3RpbmdEYXRlKSB7XG4gICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIG1pbnV0ZXMgPSBleGlzdGluZ0RhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTmFOO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKHJlZ2V4cCwgbWFwcGluZykge1xuICByZXR1cm4gZnVuY3Rpb24oaXNvLCBkYXRlKSB7XG4gICAgdmFyIHBhcnRzLCBtYXA7XG5cbiAgICBpZiAoaXNEYXRlKGlzbykpIHtcbiAgICAgIHJldHVybiBpc287XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGlzbykpIHtcbiAgICAgIC8vIFdoZW4gYSBkYXRlIGlzIEpTT04naWZpZWQgdG8gd3JhcHMgaXRzZWxmIGluc2lkZSBvZiBhbiBleHRyYVxuICAgICAgLy8gc2V0IG9mIGRvdWJsZSBxdW90ZXMuIFRoaXMgbWFrZXMgdGhlIGRhdGUgcGFyc2luZyBjb2RlIHVuYWJsZVxuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuXG4gICAgICBpZiAoaXNvLmNoYXJBdCgwKSA9PT0gJ1wiJyAmJiBpc28uY2hhckF0KGlzby5sZW5ndGggLSAxKSA9PT0gJ1wiJykge1xuICAgICAgICBpc28gPSBpc28uc3Vic3RyaW5nKDEsIGlzby5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChJU09fREFURV9SRUdFWFAudGVzdChpc28pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShpc28pO1xuICAgICAgfVxuICAgICAgcmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgICBwYXJ0cyA9IHJlZ2V4cC5leGVjKGlzbyk7XG5cbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgIG1hcCA9IHtcbiAgICAgICAgICAgIHl5eXk6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgIE1NOiBkYXRlLmdldE1vbnRoKCkgKyAxLFxuICAgICAgICAgICAgZGQ6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgSEg6IGRhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgIG1tOiBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNzOiBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICAgIHNzczogZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMDBcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcCA9IHsgeXl5eTogMTk3MCwgTU06IDEsIGRkOiAxLCBISDogMCwgbW06IDAsIHNzOiAwLCBzc3M6IDAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHBhcnQsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGluZGV4IDwgbWFwcGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1hcFttYXBwaW5nW2luZGV4XV0gPSArcGFydDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IERhdGUobWFwLnl5eXksIG1hcC5NTSAtIDEsIG1hcC5kZCwgbWFwLkhILCBtYXAubW0sIG1hcC5zcyB8fCAwLCBtYXAuc3NzICogMTAwMCB8fCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gTmFOO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlSW5wdXRUeXBlKHR5cGUsIHJlZ2V4cCwgcGFyc2VEYXRlLCBmb3JtYXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGR5bmFtaWNEYXRlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIpIHtcbiAgICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICAgIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gICAgdmFyIHRpbWV6b25lID0gY3RybCAmJiBjdHJsLiRvcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKTtcbiAgICB2YXIgcHJldmlvdXNEYXRlO1xuXG4gICAgY3RybC4kJHBhcnNlck5hbWUgPSB0eXBlO1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChyZWdleHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gTm90ZTogV2UgY2Fubm90IHJlYWQgY3RybC4kbW9kZWxWYWx1ZSwgYXMgdGhlcmUgbWlnaHQgYmUgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gcGFyc2VyL2Zvcm1hdHRlciBpbiB0aGUgcHJvY2Vzc2luZyBjaGFpbiBzbyB0aGF0IHRoZSBtb2RlbFxuICAgICAgICAvLyBjb250YWlucyBzb21lIGRpZmZlcmVudCBkYXRhIGZvcm1hdCFcbiAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZURhdGUodmFsdWUsIHByZXZpb3VzRGF0ZSk7XG4gICAgICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgICAgIHBhcnNlZERhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKHBhcnNlZERhdGUsIHRpbWV6b25lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkRGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG5cbiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiAhaXNEYXRlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdkYXRlZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgZGF0ZScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZhbGlkRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gdmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0RhdGUgJiYgdGltZXpvbmUpIHtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKHByZXZpb3VzRGF0ZSwgdGltZXpvbmUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykodmFsdWUsIGZvcm1hdCwgdGltZXpvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1pbikgfHwgYXR0ci5uZ01pbikge1xuICAgICAgdmFyIG1pblZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCBwYXJzZURhdGUodmFsdWUpID49IG1pblZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWluVmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1heCkgfHwgYXR0ci5uZ01heCkge1xuICAgICAgdmFyIG1heFZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCBwYXJzZURhdGUodmFsdWUpIDw9IG1heFZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWF4VmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICAgIC8vIEludmFsaWQgRGF0ZTogZ2V0VGltZSgpIHJldHVybnMgTmFOXG4gICAgICByZXR1cm4gdmFsdWUgJiYgISh2YWx1ZS5nZXRUaW1lICYmIHZhbHVlLmdldFRpbWUoKSAhPT0gdmFsdWUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCkge1xuICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWwpICYmICFpc0RhdGUodmFsKSA/IHBhcnNlRGF0ZSh2YWwpIHx8IHVuZGVmaW5lZCA6IHZhbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG4gIHZhciBuYXRpdmVWYWxpZGF0aW9uID0gY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgPSBpc09iamVjdChub2RlLnZhbGlkaXR5KTtcbiAgaWYgKG5hdGl2ZVZhbGlkYXRpb24pIHtcbiAgICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciB2YWxpZGl0eSA9IGVsZW1lbnQucHJvcChWQUxJRElUWV9TVEFURV9QUk9QRVJUWSkgfHwge307XG4gICAgICByZXR1cm4gdmFsaWRpdHkuYmFkSW5wdXQgfHwgdmFsaWRpdHkudHlwZU1pc21hdGNoID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVyRm9ybWF0dGVyUGFyc2VyKGN0cmwpIHtcbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnbnVtYmVyJztcbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignbnVtZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgbnVtYmVyJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZU51bWJlckF0dHJWYWwodmFsKSB7XG4gIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkge1xuICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcbiAgfVxuICByZXR1cm4gIWlzTnVtYmVyTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVySW50ZWdlcihudW0pIHtcbiAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ2MzY1MzYvaG93LXRvLWNoZWNrLWlmLWEtdmFyaWFibGUtaXMtYW4taW50ZWdlci1pbi1qYXZhc2NyaXB0IzE0Nzk0MDY2XG4gIC8vIChtaW51cyB0aGUgYXNzdW1wdGlvbiB0aGF0IGBudW1gIGlzIGEgbnVtYmVyKVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gIHJldHVybiAobnVtIHwgMCkgPT09IG51bTtcbn1cblxuZnVuY3Rpb24gY291bnREZWNpbWFscyhudW0pIHtcbiAgdmFyIG51bVN0cmluZyA9IG51bS50b1N0cmluZygpO1xuICB2YXIgZGVjaW1hbFN5bWJvbEluZGV4ID0gbnVtU3RyaW5nLmluZGV4T2YoJy4nKTtcblxuICBpZiAoZGVjaW1hbFN5bWJvbEluZGV4ID09PSAtMSkge1xuICAgIGlmICgtMSA8IG51bSAmJiBudW0gPCAxKSB7XG4gICAgICAvLyBJdCBtYXkgYmUgaW4gdGhlIGV4cG9uZW50aWFsIG5vdGF0aW9uIGZvcm1hdCAoYDFlLVhgKVxuICAgICAgdmFyIG1hdGNoID0gL2UtKFxcZCspJC8uZXhlYyhudW1TdHJpbmcpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gbnVtU3RyaW5nLmxlbmd0aCAtIGRlY2ltYWxTeW1ib2xJbmRleCAtIDE7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRGb3JTdGVwKHZpZXdWYWx1ZSwgc3RlcEJhc2UsIHN0ZXApIHtcbiAgLy8gQXQgdGhpcyBwb2ludCBgc3RlcEJhc2VgIGFuZCBgc3RlcGAgYXJlIGV4cGVjdGVkIHRvIGJlIG5vbi1OYU4gdmFsdWVzXG4gIC8vIGFuZCBgdmlld1ZhbHVlYCBpcyBleHBlY3RlZCB0byBiZSBhIHZhbGlkIHN0cmluZ2lmaWVkIG51bWJlci5cbiAgdmFyIHZhbHVlID0gTnVtYmVyKHZpZXdWYWx1ZSk7XG5cbiAgdmFyIGlzTm9uSW50ZWdlclZhbHVlID0gIWlzTnVtYmVySW50ZWdlcih2YWx1ZSk7XG4gIHZhciBpc05vbkludGVnZXJTdGVwQmFzZSA9ICFpc051bWJlckludGVnZXIoc3RlcEJhc2UpO1xuICB2YXIgaXNOb25JbnRlZ2VyU3RlcCA9ICFpc051bWJlckludGVnZXIoc3RlcCk7XG5cbiAgLy8gRHVlIHRvIGxpbWl0YXRpb25zIGluIEZsb2F0aW5nIFBvaW50IEFyaXRobWV0aWMgKGUuZy4gYDAuMyAtIDAuMiAhPT0gMC4xYCBvclxuICAvLyBgMC41ICUgMC4xICE9PSAwYCksIHdlIG5lZWQgdG8gY29udmVydCBhbGwgbnVtYmVycyB0byBpbnRlZ2Vycy5cbiAgaWYgKGlzTm9uSW50ZWdlclZhbHVlIHx8IGlzTm9uSW50ZWdlclN0ZXBCYXNlIHx8IGlzTm9uSW50ZWdlclN0ZXApIHtcbiAgICB2YXIgdmFsdWVEZWNpbWFscyA9IGlzTm9uSW50ZWdlclZhbHVlID8gY291bnREZWNpbWFscyh2YWx1ZSkgOiAwO1xuICAgIHZhciBzdGVwQmFzZURlY2ltYWxzID0gaXNOb25JbnRlZ2VyU3RlcEJhc2UgPyBjb3VudERlY2ltYWxzKHN0ZXBCYXNlKSA6IDA7XG4gICAgdmFyIHN0ZXBEZWNpbWFscyA9IGlzTm9uSW50ZWdlclN0ZXAgPyBjb3VudERlY2ltYWxzKHN0ZXApIDogMDtcblxuICAgIHZhciBkZWNpbWFsQ291bnQgPSBNYXRoLm1heCh2YWx1ZURlY2ltYWxzLCBzdGVwQmFzZURlY2ltYWxzLCBzdGVwRGVjaW1hbHMpO1xuICAgIHZhciBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIGRlY2ltYWxDb3VudCk7XG5cbiAgICB2YWx1ZSA9IHZhbHVlICogbXVsdGlwbGllcjtcbiAgICBzdGVwQmFzZSA9IHN0ZXBCYXNlICogbXVsdGlwbGllcjtcbiAgICBzdGVwID0gc3RlcCAqIG11bHRpcGxpZXI7XG5cbiAgICBpZiAoaXNOb25JbnRlZ2VyVmFsdWUpIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgaWYgKGlzTm9uSW50ZWdlclN0ZXBCYXNlKSBzdGVwQmFzZSA9IE1hdGgucm91bmQoc3RlcEJhc2UpO1xuICAgIGlmIChpc05vbkludGVnZXJTdGVwKSBzdGVwID0gTWF0aC5yb3VuZChzdGVwKTtcbiAgfVxuXG4gIHJldHVybiAodmFsdWUgLSBzdGVwQmFzZSkgJSBzdGVwID09PSAwO1xufVxuXG5mdW5jdGlvbiBudW1iZXJJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICBudW1iZXJGb3JtYXR0ZXJQYXJzZXIoY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgdmFyIG1pblZhbDtcbiAgdmFyIG1heFZhbDtcblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmFsdWUgPj0gbWluVmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIG1pblZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLm1heCkgfHwgYXR0ci5uZ01heCkge1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZhbHVlIDw9IG1heFZhbDtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBtYXhWYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5zdGVwKSB8fCBhdHRyLm5nU3RlcCkge1xuICAgIHZhciBzdGVwVmFsO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMuc3RlcCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChzdGVwVmFsKSB8fFxuICAgICAgICAgICAgIGlzVmFsaWRGb3JTdGVwKHZpZXdWYWx1ZSwgbWluVmFsIHx8IDAsIHN0ZXBWYWwpO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdzdGVwJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBzdGVwVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFuZ2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICBiYWRJbnB1dENoZWNrZXIoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpO1xuICBudW1iZXJGb3JtYXR0ZXJQYXJzZXIoY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgdmFyIHN1cHBvcnRzUmFuZ2UgPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyAmJiBlbGVtZW50WzBdLnR5cGUgPT09ICdyYW5nZScsXG4gICAgICBtaW5WYWwgPSBzdXBwb3J0c1JhbmdlID8gMCA6IHVuZGVmaW5lZCxcbiAgICAgIG1heFZhbCA9IHN1cHBvcnRzUmFuZ2UgPyAxMDAgOiB1bmRlZmluZWQsXG4gICAgICBzdGVwVmFsID0gc3VwcG9ydHNSYW5nZSA/IDEgOiB1bmRlZmluZWQsXG4gICAgICB2YWxpZGl0eSA9IGVsZW1lbnRbMF0udmFsaWRpdHksXG4gICAgICBoYXNNaW5BdHRyID0gaXNEZWZpbmVkKGF0dHIubWluKSxcbiAgICAgIGhhc01heEF0dHIgPSBpc0RlZmluZWQoYXR0ci5tYXgpLFxuICAgICAgaGFzU3RlcEF0dHIgPSBpc0RlZmluZWQoYXR0ci5zdGVwKTtcblxuICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBjdHJsLiRyZW5kZXI7XG5cbiAgY3RybC4kcmVuZGVyID0gc3VwcG9ydHNSYW5nZSAmJiBpc0RlZmluZWQodmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cpICYmIGlzRGVmaW5lZCh2YWxpZGl0eS5yYW5nZU92ZXJmbG93KSA/XG4gICAgLy9Ccm93c2VycyB0aGF0IGltcGxlbWVudCByYW5nZSB3aWxsIHNldCB0aGVzZSB2YWx1ZXMgYXV0b21hdGljYWxseSwgYnV0IHJlYWRpbmcgdGhlIGFkanVzdGVkIHZhbHVlcyBhZnRlclxuICAgIC8vJHJlbmRlciB3b3VsZCBjYXVzZSB0aGUgbWluIC8gbWF4IHZhbGlkYXRvcnMgdG8gYmUgYXBwbGllZCB3aXRoIHRoZSB3cm9uZyB2YWx1ZVxuICAgIGZ1bmN0aW9uIHJhbmdlUmVuZGVyKCkge1xuICAgICAgb3JpZ2luYWxSZW5kZXIoKTtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50LnZhbCgpKTtcbiAgICB9IDpcbiAgICBvcmlnaW5hbFJlbmRlcjtcblxuICBpZiAoaGFzTWluQXR0cikge1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gc3VwcG9ydHNSYW5nZSA/XG4gICAgICAvLyBTaW5jZSBhbGwgYnJvd3NlcnMgc2V0IHRoZSBpbnB1dCB0byBhIHZhbGlkIHZhbHVlLCB3ZSBkb24ndCBuZWVkIHRvIGNoZWNrIHZhbGlkaXR5XG4gICAgICBmdW5jdGlvbiBub29wTWluVmFsaWRhdG9yKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG4gICAgICAvLyBub24tc3VwcG9ydCBicm93c2VycyB2YWxpZGF0ZSB0aGUgbWluIHZhbFxuICAgICAgZnVuY3Rpb24gbWluVmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmlld1ZhbHVlID49IG1pblZhbDtcbiAgICAgIH07XG5cbiAgICBzZXRJbml0aWFsVmFsdWVBbmRPYnNlcnZlcignbWluJywgbWluQ2hhbmdlKTtcbiAgfVxuXG4gIGlmIChoYXNNYXhBdHRyKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIC8vIFNpbmNlIGFsbCBicm93c2VycyBzZXQgdGhlIGlucHV0IHRvIGEgdmFsaWQgdmFsdWUsIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgdmFsaWRpdHlcbiAgICAgIGZ1bmN0aW9uIG5vb3BNYXhWYWxpZGF0b3IoKSB7IHJldHVybiB0cnVlOyB9IDpcbiAgICAgIC8vIG5vbi1zdXBwb3J0IGJyb3dzZXJzIHZhbGlkYXRlIHRoZSBtYXggdmFsXG4gICAgICBmdW5jdGlvbiBtYXhWYWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCB2aWV3VmFsdWUgPD0gbWF4VmFsO1xuICAgICAgfTtcblxuICAgIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKCdtYXgnLCBtYXhDaGFuZ2UpO1xuICB9XG5cbiAgaWYgKGhhc1N0ZXBBdHRyKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5zdGVwID0gc3VwcG9ydHNSYW5nZSA/XG4gICAgICBmdW5jdGlvbiBuYXRpdmVTdGVwVmFsaWRhdG9yKCkge1xuICAgICAgICAvLyBDdXJyZW50bHksIG9ubHkgRkYgaW1wbGVtZW50cyB0aGUgc3BlYyBvbiBzdGVwIGNoYW5nZSBjb3JyZWN0bHkgKGkuZS4gYWRqdXN0aW5nIHRoZVxuICAgICAgICAvLyBpbnB1dCBlbGVtZW50IHZhbHVlIHRvIGEgdmFsaWQgdmFsdWUpLiBJdCdzIHBvc3NpYmxlIHRoYXQgb3RoZXIgYnJvd3NlcnMgc2V0IHRoZSBzdGVwTWlzbWF0Y2hcbiAgICAgICAgLy8gdmFsaWRpdHkgZXJyb3IgaW5zdGVhZCwgc28gd2UgY2FuIGF0IGxlYXN0IHJlcG9ydCBhbiBlcnJvciBpbiB0aGF0IGNhc2UuXG4gICAgICAgIHJldHVybiAhdmFsaWRpdHkuc3RlcE1pc21hdGNoO1xuICAgICAgfSA6XG4gICAgICAvLyBuZ1N0ZXAgZG9lc24ndCBzZXQgdGhlIHNldHAgYXR0ciwgc28gdGhlIGJyb3dzZXIgZG9lc24ndCBhZGp1c3QgdGhlIGlucHV0IHZhbHVlIGFzIHNldHRpbmcgc3RlcCB3b3VsZFxuICAgICAgZnVuY3Rpb24gc3RlcFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChzdGVwVmFsKSB8fFxuICAgICAgICAgICAgICAgaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBtaW5WYWwgfHwgMCwgc3RlcFZhbCk7XG4gICAgICB9O1xuXG4gICAgc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoJ3N0ZXAnLCBzdGVwQ2hhbmdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKGh0bWxBdHRyTmFtZSwgY2hhbmdlRm4pIHtcbiAgICAvLyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlcyBzZXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBvbmx5IGFmdGVyIGEgZGlnZXN0LCBidXQgd2UgbmVlZCB0aGVcbiAgICAvLyBhdHRyaWJ1dGUgdmFsdWUgd2hlbiB0aGUgaW5wdXQgaXMgZmlyc3QgcmVuZGVyZWQsIHNvIHRoYXQgdGhlIGJyb3dzZXIgY2FuIGFkanVzdCB0aGVcbiAgICAvLyBpbnB1dCB2YWx1ZSBiYXNlZCBvbiB0aGUgbWluL21heCB2YWx1ZVxuICAgIGVsZW1lbnQuYXR0cihodG1sQXR0ck5hbWUsIGF0dHJbaHRtbEF0dHJOYW1lXSk7XG4gICAgYXR0ci4kb2JzZXJ2ZShodG1sQXR0ck5hbWUsIGNoYW5nZUZuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pbkNoYW5nZSh2YWwpIHtcbiAgICBtaW5WYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAvLyBpZ25vcmUgY2hhbmdlcyBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXJOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydHNSYW5nZSkge1xuICAgICAgdmFyIGVsVmFsID0gZWxlbWVudC52YWwoKTtcbiAgICAgIC8vIElFMTEgZG9lc24ndCBzZXQgdGhlIGVsIHZhbCBjb3JyZWN0bHkgaWYgdGhlIG1pblZhbCBpcyBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQgdmFsdWVcbiAgICAgIGlmIChtaW5WYWwgPiBlbFZhbCkge1xuICAgICAgICBlbFZhbCA9IG1pblZhbDtcbiAgICAgICAgZWxlbWVudC52YWwoZWxWYWwpO1xuICAgICAgfVxuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsVmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1heENoYW5nZSh2YWwpIHtcbiAgICBtYXhWYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAvLyBpZ25vcmUgY2hhbmdlcyBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXJOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydHNSYW5nZSkge1xuICAgICAgdmFyIGVsVmFsID0gZWxlbWVudC52YWwoKTtcbiAgICAgIC8vIElFMTEgZG9lc24ndCBzZXQgdGhlIGVsIHZhbCBjb3JyZWN0bHkgaWYgdGhlIG1heFZhbCBpcyBsZXNzIHRoYW4gdGhlIGVsZW1lbnQgdmFsdWVcbiAgICAgIGlmIChtYXhWYWwgPCBlbFZhbCkge1xuICAgICAgICBlbGVtZW50LnZhbChtYXhWYWwpO1xuICAgICAgICAvLyBJRTExIGFuZCBDaHJvbWUgZG9uJ3Qgc2V0IHRoZSB2YWx1ZSB0byB0aGUgbWluVmFsIHdoZW4gbWF4IDwgbWluXG4gICAgICAgIGVsVmFsID0gbWF4VmFsIDwgbWluVmFsID8gbWluVmFsIDogbWF4VmFsO1xuICAgICAgfVxuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsVmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXBDaGFuZ2UodmFsKSB7XG4gICAgc3RlcFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3QgYWRqdXN0IHRoZSBpbnB1dCB2YWx1ZSBjb3JyZWN0bHksIGJ1dCBzZXQgdGhlIHN0ZXBNaXNtYXRjaCBlcnJvclxuICAgIGlmIChzdXBwb3J0c1JhbmdlICYmIGN0cmwuJHZpZXdWYWx1ZSAhPT0gZWxlbWVudC52YWwoKSkge1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAndXJsJztcbiAgY3RybC4kdmFsaWRhdG9ycy51cmwgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAvLyBOb3RlOiBubyBiYWRJbnB1dENoZWNrZXIgaGVyZSBieSBwdXJwb3NlIGFzIGB1cmxgIGlzIG9ubHkgYSB2YWxpZGF0aW9uXG4gIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhXG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xuXG4gIGN0cmwuJCRwYXJzZXJOYW1lID0gJ2VtYWlsJztcbiAgY3RybC4kdmFsaWRhdG9ycy5lbWFpbCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBkb1RyaW0gPSAhYXR0ci5uZ1RyaW0gfHwgdHJpbShhdHRyLm5nVHJpbSkgIT09ICdmYWxzZSc7XG4gIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkge1xuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoZWxlbWVudFswXS5jaGVja2VkKSB7XG4gICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICBpZiAoZG9UcmltKSB7XG4gICAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ICYmIGV2LnR5cGUpO1xuICAgIH1cbiAgfTtcblxuICBlbGVtZW50Lm9uKCdjbGljaycsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyLnZhbHVlO1xuICAgIGlmIChkb1RyaW0pIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9ICh2YWx1ZSA9PT0gY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcblxuICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHtcbiAgdmFyIHBhcnNlRm47XG4gIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pO1xuICAgIGlmICghcGFyc2VGbi5jb25zdGFudCkge1xuICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignY29uc3RleHByJywgJ0V4cGVjdGVkIGNvbnN0YW50IGV4cHJlc3Npb24gZm9yIGB7MH1gLCBidXQgc2F3ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYHsxfWAuJywgbmFtZSwgZXhwcmVzc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUZuKGNvbnRleHQpO1xuICB9XG4gIHJldHVybiBmYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHZhciB0cnVlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdUcnVlVmFsdWUnLCBhdHRyLm5nVHJ1ZVZhbHVlLCB0cnVlKTtcbiAgdmFyIGZhbHNlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdGYWxzZVZhbHVlJywgYXR0ci5uZ0ZhbHNlVmFsdWUsIGZhbHNlKTtcblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50WzBdLmNoZWNrZWQsIGV2ICYmIGV2LnR5cGUpO1xuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTtcbiAgfTtcblxuICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIHRoZSAkdmlld1ZhbHVlIG9mIGFuIGVtcHR5IGNoZWNrYm94IGlzIGFsd2F5cyBzZXQgdG8gYGZhbHNlYFxuICAvLyBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIHBhcnNlciBiZWxvdywgd2hpY2ggY29tcGFyZXMgdGhlIGAkbW9kZWxWYWx1ZWAgd2l0aCBgdHJ1ZVZhbHVlYCB0byBjb252ZXJ0XG4gIC8vIGl0IHRvIGEgYm9vbGVhbi5cbiAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgfTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZXF1YWxzKHZhbHVlLCB0cnVlVmFsdWUpO1xuICB9KTtcblxuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyB0cnVlVmFsdWUgOiBmYWxzZVZhbHVlO1xuICB9KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHRleHRhcmVhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvblxuICogcHJvcGVydGllcyBvZiB0aGlzIGVsZW1lbnQgYXJlIGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhvc2Ugb2YgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAqICAgIG1pbmxlbmd0aC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZiBhbnlcbiAqICAgIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqICAgIGFjY291bnQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gKlxuICogQGtub3duSXNzdWVcbiAqXG4gKiBXaGVuIHNwZWNpZnlpbmcgdGhlIGBwbGFjZWhvbGRlcmAgYXR0cmlidXRlIG9mIGA8dGV4dGFyZWE+YCwgSW50ZXJuZXQgRXhwbG9yZXIgd2lsbCB0ZW1wb3JhcmlseVxuICogaW5zZXJ0IHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBhcyB0aGUgdGV4dGFyZWEncyBjb250ZW50LiBJZiB0aGUgcGxhY2Vob2xkZXIgdmFsdWUgY29udGFpbnNcbiAqIGludGVycG9sYXRpb24gKGB7eyAuLi4gfX1gKSwgYW4gZXJyb3Igd2lsbCBiZSBsb2dnZWQgaW4gdGhlIGNvbnNvbGUgd2hlbiBBbmd1bGFyIHRyaWVzIHRvIHVwZGF0ZVxuICogdGhlIHZhbHVlIG9mIHRoZSBieS10aGVuLXJlbW92ZWQgdGV4dCBub2RlLiBUaGlzIGRvZXNuJ3QgYWZmZWN0IHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZVxuICogdGV4dGFyZWEsIGJ1dCBjYW4gYmUgdW5kZXNpcmFibGUuXG4gKlxuICogWW91IGNhbiB3b3JrIGFyb3VuZCB0aGlzIEludGVybmV0IEV4cGxvcmVyIGlzc3VlIGJ5IHVzaW5nIGBuZy1hdHRyLXBsYWNlaG9sZGVyYCBpbnN0ZWFkIG9mXG4gKiBgcGxhY2Vob2xkZXJgIG9uIHRleHRhcmVhcywgd2hlbmV2ZXIgeW91IG5lZWQgaW50ZXJwb2xhdGlvbiBpbiB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuIFlvdSBjYW5cbiAqIGZpbmQgbW9yZSBkZXRhaWxzIG9uIGBuZ0F0dHJgIGluIHRoZVxuICogW0ludGVycG9sYXRpb25dKGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcykgc2VjdGlvbiBvZiB0aGVcbiAqIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgaW5wdXRcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGlucHV0IGVsZW1lbnQgY29udHJvbC4gV2hlbiB1c2VkIHRvZ2V0aGVyIHdpdGgge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSwgaXQgcHJvdmlkZXMgZGF0YS1iaW5kaW5nLFxuICogaW5wdXQgc3RhdGUgY29udHJvbCwgYW5kIHZhbGlkYXRpb24uXG4gKiBJbnB1dCBjb250cm9sIGZvbGxvd3MgSFRNTDUgaW5wdXQgdHlwZXMgYW5kIHBvbHlmaWxscyB0aGUgSFRNTDUgdmFsaWRhdGlvbiBiZWhhdmlvciBmb3Igb2xkZXIgYnJvd3NlcnMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBOb3QgZXZlcnkgZmVhdHVyZSBvZmZlcmVkIGlzIGF2YWlsYWJsZSBmb3IgYWxsIGlucHV0IHR5cGVzLlxuICogU3BlY2lmaWNhbGx5LCBkYXRhIGJpbmRpbmcgYW5kIGV2ZW50IGhhbmRsaW5nIHZpYSBgbmctbW9kZWxgIGlzIHVuc3VwcG9ydGVkIGZvciBgaW5wdXRbZmlsZV1gLlxuICogPC9kaXY+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdSZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGlmIHNldCB0byB0cnVlXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICogICAgdmFsdWUgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gKiAgICBpbnB1dC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJpbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgVXNlciBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgIExhc3QgbmFtZTpcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImxhc3ROYW1lXCIgbmctbW9kZWw9XCJ1c2VyLmxhc3RcIlxuICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCIzXCIgbmctbWF4bGVuZ3RoPVwiMTBcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoXCI+XG4gICAgICAgICAgICAgICBUb28gc2hvcnQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5tYXhsZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8aHI+XG4gICAgICAgICA8dHQ+dXNlciA9IHt7dXNlcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiR2YWxpZCA9IHt7bXlGb3JtLmxhc3ROYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnIvPlxuICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdXNlciA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCd1c2VyJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpO1xuICAgICAgICB2YXIgZm9ybVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJ2aXNpdG9yXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIGlmIGVtcHR5IHdoZW4gbWluIGxlbmd0aCBpcyBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcIlwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbGVzcyB0aGFuIHJlcXVpcmVkIG1pbiBsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtaW5sZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtYXhsZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBpbnB1dERpcmVjdGl2ZSA9IFsnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJGZpbHRlcicsICckcGFyc2UnLFxuICAgIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJz9uZ01vZGVsJ10sXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgaWYgKGN0cmxzWzBdKSB7XG4gICAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsc1swXSwgJHNuaWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cblxuXG52YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcXGQrKSQvO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1ZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQuXG4gKlxuICogSXQgaXMgbWFpbmx5IHVzZWQgb24ge0BsaW5rIGlucHV0W3JhZGlvXSBgaW5wdXRbcmFkaW9dYH0gYW5kIG9wdGlvbiBlbGVtZW50cyxcbiAqIHNvIHRoYXQgd2hlbiB0aGUgZWxlbWVudCBpcyBzZWxlY3RlZCwgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gb2YgdGhhdCBlbGVtZW50IChvciBpdHNcbiAqIHtAbGluayBzZWxlY3QgYHNlbGVjdGB9IHBhcmVudCBlbGVtZW50KSBpcyBzZXQgdG8gdGhlIGJvdW5kIHZhbHVlLiBJdCBpcyBlc3BlY2lhbGx5IHVzZWZ1bFxuICogZm9yIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBsaXN0cyB1c2luZyB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNob3duIGJlbG93LlxuICpcbiAqIEl0IGNhbiBhbHNvIGJlIHVzZWQgdG8gYWNoaWV2ZSBvbmUtd2F5IGJpbmRpbmcgb2YgYSBnaXZlbiBleHByZXNzaW9uIHRvIGFuIGlucHV0IGVsZW1lbnRcbiAqIHN1Y2ggYXMgYW4gYGlucHV0W3RleHRdYCBvciBhIGB0ZXh0YXJlYWAsIHdoZW4gdGhhdCBlbGVtZW50IGRvZXMgbm90IHVzZSBuZ01vZGVsLlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZVxuICogYW5kIGB2YWx1ZWAgcHJvcGVydHkgb2YgdGhlIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmdWYWx1ZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ2YWx1ZUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndmFsdWVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ3BpenphJywgJ3VuaWNvcm5zJywgJ3JvYm90cyddO1xuICAgICAgICAgICAgICAkc2NvcGUubXkgPSB7IGZhdm9yaXRlOiAndW5pY29ybnMnIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxmb3JtIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxoMj5XaGljaCBpcyB5b3VyIGZhdm9yaXRlPzwvaDI+XG4gICAgICAgICAgICA8bGFiZWwgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiIGZvcj1cInt7bmFtZX19XCI+XG4gICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJteS5mYXZvcml0ZVwiXG4gICAgICAgICAgICAgICAgICAgICBuZy12YWx1ZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ7e25hbWV9fVwiXG4gICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZmF2b3JpdGVcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdj5Zb3UgY2hvc2Uge3tteS5mYXZvcml0ZX19PC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIGZhdm9yaXRlID0gZWxlbWVudChieS5iaW5kaW5nKCdteS5mYXZvcml0ZScpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZmF2b3JpdGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3VuaWNvcm5zJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJpbmQgdGhlIHZhbHVlcyB0byB0aGUgaW5wdXRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215LmZhdm9yaXRlJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdWYWx1ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogIGlucHV0cyB1c2UgdGhlIHZhbHVlIGF0dHJpYnV0ZSBhcyB0aGVpciBkZWZhdWx0IHZhbHVlIGlmIHRoZSB2YWx1ZSBwcm9wZXJ0eSBpcyBub3Qgc2V0LlxuICAgKiAgT25jZSB0aGUgdmFsdWUgcHJvcGVydHkgaGFzIGJlZW4gc2V0IChieSBhZGRpbmcgaW5wdXQpLCBpdCB3aWxsIG5vdCByZWFjdCB0byBjaGFuZ2VzIHRvXG4gICAqICB0aGUgdmFsdWUgYXR0cmlidXRlIGFueW1vcmUuIFNldHRpbmcgYm90aCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5IGZpeGVzIHRoaXMgYmVoYXZpb3IsIGFuZFxuICAgKiAgbWFrZXMgaXQgcG9zc2libGUgdG8gdXNlIG5nVmFsdWUgYXMgYSBzb3J0IG9mIG9uZS13YXkgYmluZC5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRWYWx1ZShlbGVtZW50LCBhdHRyLCB2YWx1ZSkge1xuICAgIC8vIFN1cHBvcnQ6IElFOSBvbmx5XG4gICAgLy8gSW4gSUU5IHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZyAoZS5nLiBgaW5wdXQudmFsdWUgPSBudWxsYCByZXN1bHRzIGluIGBpbnB1dC52YWx1ZSA9PT0gJ251bGwnYCkuXG4gICAgdmFyIHByb3BWYWx1ZSA9IGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IChtc2llID09PSA5KSA/ICcnIDogbnVsbDtcbiAgICBlbGVtZW50LnByb3AoJ3ZhbHVlJywgcHJvcFZhbHVlKTtcbiAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24odHBsLCB0cGxBdHRyKSB7XG4gICAgICBpZiAoQ09OU1RBTlRfVkFMVUVfUkVHRVhQLnRlc3QodHBsQXR0ci5uZ1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUNvbnN0YW50TGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGUuJGV2YWwoYXR0ci5uZ1ZhbHVlKTtcbiAgICAgICAgICB1cGRhdGVFbGVtZW50VmFsdWUoZWxtLCBhdHRyLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRWYWx1ZShlbG0sIGF0dHIsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50XG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0XG4gKiBleHByZXNzaW9uIGNoYW5nZXMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2VcbiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuXG4gKlxuICogSXQgaXMgcHJlZmVyYWJsZSB0byB1c2UgYG5nQmluZGAgaW5zdGVhZCBvZiBge3sgZXhwcmVzc2lvbiB9fWAgaWYgYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuXG4gKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxuICpcbiAqIEFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbSB3b3VsZCBiZSB1c2luZyB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXG4gKlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIiBuYW1lPVwibmctYmluZFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXaGlybGVkJztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgICBIZWxsbyA8c3BhbiBuZy1iaW5kPVwibmFtZVwiPjwvc3Bhbj4hXG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ25hbWUnKSkuZ2V0VGV4dCgpKS50b0JlKCdXaGlybGVkJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygnd29ybGQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ25hbWUnKSkuZ2V0VGV4dCgpKS50b0JlKCd3b3JsZCcpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmREaXJlY3RpdmUgPSBbJyRjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0FDJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRDb21waWxlKHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModGVtcGxhdGVFbGVtZW50KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmQpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdCaW5kLCBmdW5jdGlvbiBuZ0JpbmRXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBzdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRUZW1wbGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0JpbmRUZW1wbGF0ZWAgZGlyZWN0aXZlIHNwZWNpZmllcyB0aGF0IHRoZSBlbGVtZW50XG4gKiB0ZXh0IGNvbnRlbnQgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggdGhlIGludGVycG9sYXRpb24gb2YgdGhlIHRlbXBsYXRlXG4gKiBpbiB0aGUgYG5nQmluZFRlbXBsYXRlYCBhdHRyaWJ1dGUuXG4gKiBVbmxpa2UgYG5nQmluZGAsIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGNhbiBjb250YWluIG11bHRpcGxlIGB7e2AgYH19YFxuICogZXhwcmVzc2lvbnMuIFRoaXMgZGlyZWN0aXZlIGlzIG5lZWRlZCBzaW5jZSBzb21lIEhUTUwgZWxlbWVudHNcbiAqIChzdWNoIGFzIFRJVExFIGFuZCBPUFRJT04pIGNhbm5vdCBjb250YWluIFNQQU4gZWxlbWVudHMuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdCaW5kVGVtcGxhdGUgdGVtcGxhdGUgb2YgZm9ybVxuICogICA8dHQ+e3s8L3R0PiA8dHQ+ZXhwcmVzc2lvbjwvdHQ+IDx0dD59fTwvdHQ+IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIiBuYW1lPVwibmctYmluZC10ZW1wbGF0ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGxhYmVsPlNhbHV0YXRpb246IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2FsdXRhdGlvblwiPjwvbGFiZWw+PGJyPlxuICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT1cInt7c2FsdXRhdGlvbn19IHt7bmFtZX19IVwiPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIFdvcmxkIScpO1xuXG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5zZW5kS2V5cygnR3JlZXRpbmdzJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBpc1VuZGVmaW5lZCh2YWx1ZSkgPyAnJyA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRIdG1sXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFdmFsdWF0ZXMgdGhlIGV4cHJlc3Npb24gYW5kIGluc2VydHMgdGhlIHJlc3VsdGluZyBIVE1MIGludG8gdGhlIGVsZW1lbnQgaW4gYSBzZWN1cmUgd2F5LiBCeSBkZWZhdWx0LFxuICogdGhlIHJlc3VsdGluZyBIVE1MIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGluayBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UuXG4gKiBUbyB1dGlsaXplIHRoaXMgZnVuY3Rpb25hbGl0eSwgZW5zdXJlIHRoYXQgYCRzYW5pdGl6ZWAgaXMgYXZhaWxhYmxlLCBmb3IgZXhhbXBsZSwgYnkgaW5jbHVkaW5nIHtAbGlua1xuICogbmdTYW5pdGl6ZX0gaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMgKG5vdCBpbiBjb3JlIEFuZ3VsYXIpLiBJbiBvcmRlciB0byB1c2Uge0BsaW5rIG5nU2FuaXRpemV9XG4gKiBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcywgeW91IG5lZWQgdG8gaW5jbHVkZSBcImFuZ3VsYXItc2FuaXRpemUuanNcIiBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFlvdSBtYXkgYWxzbyBieXBhc3Mgc2FuaXRpemF0aW9uIGZvciB2YWx1ZXMgeW91IGtub3cgYXJlIHNhZmUuIFRvIGRvIHNvLCBiaW5kIHRvXG4gKiBhbiBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWUgdmlhIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LiAgU2VlIHRoZSBleGFtcGxlXG4gKiB1bmRlciB7QGxpbmsgbmcuJHNjZSNzaG93LW1lLWFuLWV4YW1wbGUtdXNpbmctc2NlLSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogTm90ZTogSWYgYSBgJHNhbml0aXplYCBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlIGFuZCB0aGUgYm91bmQgdmFsdWUgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkLCB5b3VcbiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcblxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEh0bWxFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIiBuYW1lPVwibmctYmluZC1odG1sXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHAgbmctYmluZC1odG1sPVwibXlIVE1MXCI+PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kSHRtbEV4YW1wbGUnLCBbJ25nU2FuaXRpemUnXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5teUhUTUwgPVxuICAgICAgICAgICAgICAnSSBhbSBhbiA8Y29kZT5IVE1MPC9jb2RlPnN0cmluZyB3aXRoICcgK1xuICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj5saW5rcyE8L2E+IGFuZCBvdGhlciA8ZW0+c3R1ZmY8L2VtPic7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kLWh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ215SFRNTCcpKS5nZXRUZXh0KCkpLnRvQmUoXG4gICAgICAgICAgICAgJ0kgYW0gYW4gSFRNTHN0cmluZyB3aXRoIGxpbmtzISBhbmQgb3RoZXIgc3R1ZmYnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsICckcGFyc2UnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkc2NlLCAkcGFyc2UsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRIdG1sQ29tcGlsZSh0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICB2YXIgbmdCaW5kSHRtbEdldHRlciA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCk7XG4gICAgICB2YXIgbmdCaW5kSHRtbFdhdGNoID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sLCBmdW5jdGlvbiBzY2VWYWx1ZU9mKHZhbCkge1xuICAgICAgICAvLyBVbndyYXAgdGhlIHZhbHVlIHRvIGNvbXBhcmUgdGhlIGFjdHVhbCBpbm5lciBzYWZlIHZhbHVlLCBub3QgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAgICByZXR1cm4gJHNjZS52YWx1ZU9mKHZhbCk7XG4gICAgICB9KTtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRFbGVtZW50KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZEh0bWxMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmRIdG1sKTtcblxuICAgICAgICBzY29wZS4kd2F0Y2gobmdCaW5kSHRtbFdhdGNoLCBmdW5jdGlvbiBuZ0JpbmRIdG1sV2F0Y2hBY3Rpb24oKSB7XG4gICAgICAgICAgLy8gVGhlIHdhdGNoZWQgdmFsdWUgaXMgdGhlIHVud3JhcHBlZCB2YWx1ZS4gVG8gYXZvaWQgcmUtZXNjYXBpbmcsIHVzZSB0aGUgZGlyZWN0IGdldHRlci5cbiAgICAgICAgICB2YXIgdmFsdWUgPSBuZ0JpbmRIdG1sR2V0dGVyKHNjb3BlKTtcbiAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSkgfHwgJycpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGFuZ2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlIHRoZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgaW5wdXQuXG4gKiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW1tZWRpYXRlbHksIHVubGlrZSB0aGUgSmF2YVNjcmlwdCBvbmNoYW5nZSBldmVudFxuICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGVcbiAqIGZvcm0gZWxlbWVudCBvciBwcmVzc2VzIHRoZSByZXR1cm4ga2V5KS5cbiAqXG4gKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlc1xuICogYSBuZXcgdmFsdWUgdG8gYmUgY29tbWl0dGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6XG4gKiAqIGlmIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBgJHBhcnNlcnNgIHRyYW5zZm9ybWF0aW9uIHBpcGVsaW5lIGhhcyBub3QgY2hhbmdlZFxuICogKiBpZiB0aGUgaW5wdXQgaGFzIGNvbnRpbnVlZCB0byBiZSBpbnZhbGlkIHNpbmNlIHRoZSBtb2RlbCB3aWxsIHN0YXkgYG51bGxgXG4gKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWVcbiAqXG4gKlxuICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2VcbiAqIGluIGlucHV0IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDaGFuZ2UtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hhbmdlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hhbmdlRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDtcbiAqICAgICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUuY291bnRlcisrO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgbmctY2hhbmdlPVwiY2hhbmdlKClcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMVwiIC8+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMlwiIC8+XG4gKiAgICAgICA8bGFiZWwgZm9yPVwibmctY2hhbmdlLWV4YW1wbGUyXCI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz5cbiAqICAgICAgIDx0dD5kZWJ1ZyA9IHt7Y29uZmlybWVkfX08L3R0Pjxici8+XG4gKiAgICAgICA8dHQ+Y291bnRlciA9IHt7Y291bnRlcn19PC90dD48YnIvPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuYmluZGluZygnY291bnRlcicpKTtcbiAqICAgICB2YXIgZGVidWcgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbmZpcm1lZCcpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKlxuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUxJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTInKSkuY2xpY2soKTtcblxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NoYW5nZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0EnLFxuICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKiBleHBvcnRlZFxuICBuZ0NsYXNzRGlyZWN0aXZlLFxuICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgbmdDbGFzc09kZERpcmVjdGl2ZVxuKi9cblxuZnVuY3Rpb24gY2xhc3NEaXJlY3RpdmUobmFtZSwgc2VsZWN0b3IpIHtcbiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XG4gIHZhciBpbmRleFdhdGNoRXhwcmVzc2lvbjtcblxuICByZXR1cm4gWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgY2xhc3NDb3VudHMgPSBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycpO1xuICAgICAgICB2YXIgb2xkTW9kdWxvID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9sZENsYXNzU3RyaW5nO1xuXG4gICAgICAgIGlmICghY2xhc3NDb3VudHMpIHtcbiAgICAgICAgICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHlcbiAgICAgICAgICAvLyBuYW1lcyBpbiBPYmplY3QucHJvdG90eXBlXG4gICAgICAgICAgY2xhc3NDb3VudHMgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lICE9PSAnbmdDbGFzcycpIHtcbiAgICAgICAgICBpZiAoIWluZGV4V2F0Y2hFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBpbmRleFdhdGNoRXhwcmVzc2lvbiA9ICRwYXJzZSgnJGluZGV4JywgZnVuY3Rpb24gbW9kdWxvVHdvKCRpbmRleCkge1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICAgICAgICByZXR1cm4gJGluZGV4ICYgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjb3BlLiR3YXRjaChpbmRleFdhdGNoRXhwcmVzc2lvbiwgbmdDbGFzc0luZGV4V2F0Y2hBY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKCRwYXJzZShhdHRyW25hbWVdLCB0b0NsYXNzU3RyaW5nKSwgbmdDbGFzc1dhdGNoQWN0aW9uKTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgY2xhc3NTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyhzcGxpdChjbGFzc1N0cmluZyksIDEpO1xuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICBjbGFzc1N0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHNwbGl0KGNsYXNzU3RyaW5nKSwgLTEpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgdmFyIG9sZENsYXNzQXJyYXkgPSBzcGxpdChvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzQXJyYXkgPSBzcGxpdChuZXdDbGFzc1N0cmluZyk7XG5cbiAgICAgICAgICB2YXIgdG9SZW1vdmVBcnJheSA9IGFycmF5RGlmZmVyZW5jZShvbGRDbGFzc0FycmF5LCBuZXdDbGFzc0FycmF5KTtcbiAgICAgICAgICB2YXIgdG9BZGRBcnJheSA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc0FycmF5LCBvbGRDbGFzc0FycmF5KTtcblxuICAgICAgICAgIHZhciB0b1JlbW92ZVN0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHRvUmVtb3ZlQXJyYXksIC0xKTtcbiAgICAgICAgICB2YXIgdG9BZGRTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZEFycmF5LCAxKTtcblxuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKHRvQWRkU3RyaW5nKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyh0b1JlbW92ZVN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc0FycmF5LCBjb3VudCkge1xuICAgICAgICAgIHZhciBjbGFzc2VzVG9VcGRhdGUgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goY2xhc3NBcnJheSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAwIHx8IGNsYXNzQ291bnRzW2NsYXNzTmFtZV0pIHtcbiAgICAgICAgICAgICAgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9IChjbGFzc0NvdW50c1tjbGFzc05hbWVdIHx8IDApICsgY291bnQ7XG4gICAgICAgICAgICAgIGlmIChjbGFzc0NvdW50c1tjbGFzc05hbWVdID09PSArKGNvdW50ID4gMCkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzVG9VcGRhdGUucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NJbmRleFdhdGNoQWN0aW9uKG5ld01vZHVsbykge1xuICAgICAgICAgIC8vIFRoaXMgd2F0Y2gtYWN0aW9uIHNob3VsZCBydW4gYmVmb3JlIHRoZSBgbmdDbGFzc1dhdGNoQWN0aW9uKClgLCB0aHVzIGl0XG4gICAgICAgICAgLy8gYWRkcy9yZW1vdmVzIGBvbGRDbGFzc1N0cmluZ2AuIElmIHRoZSBgbmdDbGFzc2AgZXhwcmVzc2lvbiBoYXMgY2hhbmdlZCBhcyB3ZWxsLCB0aGVcbiAgICAgICAgICAvLyBgbmdDbGFzc1dhdGNoQWN0aW9uKClgIHdpbGwgdXBkYXRlIHRoZSBjbGFzc2VzLlxuICAgICAgICAgIGlmIChuZXdNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBhZGRDbGFzc2VzKG9sZENsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2xkTW9kdWxvID0gbmV3TW9kdWxvO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgLy8gV2hlbiB1c2luZyBhIG9uZS10aW1lIGJpbmRpbmcgdGhlIG5ld0NsYXNzU3RyaW5nIHdpbGwgcmV0dXJuXG4gICAgICAgICAgLy8gdGhlIHByZS1pbnRlcmNlcHRvciB2YWx1ZSB1bnRpbCB0aGUgb25lLXRpbWUgaXMgY29tcGxldGVcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5ld0NsYXNzU3RyaW5nKSkge1xuICAgICAgICAgICAgbmV3Q2xhc3NTdHJpbmcgPSB0b0NsYXNzU3RyaW5nKG5ld0NsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob2xkTW9kdWxvID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgICAgdXBkYXRlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZywgbmV3Q2xhc3NTdHJpbmcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9sZENsYXNzU3RyaW5nID0gbmV3Q2xhc3NTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICAvLyBIZWxwZXJzXG4gIGZ1bmN0aW9uIGFycmF5RGlmZmVyZW5jZSh0b2tlbnMxLCB0b2tlbnMyKSB7XG4gICAgaWYgKCF0b2tlbnMxIHx8ICF0b2tlbnMxLmxlbmd0aCkgcmV0dXJuIFtdO1xuICAgIGlmICghdG9rZW5zMiB8fCAhdG9rZW5zMi5sZW5ndGgpIHJldHVybiB0b2tlbnMxO1xuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgb3V0ZXI6XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgICB9XG4gICAgICB2YWx1ZXMucHVzaCh0b2tlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGl0KGNsYXNzU3RyaW5nKSB7XG4gICAgcmV0dXJuIGNsYXNzU3RyaW5nICYmIGNsYXNzU3RyaW5nLnNwbGl0KCcgJyk7XG4gIH1cblxuICBmdW5jdGlvbiB0b0NsYXNzU3RyaW5nKGNsYXNzVmFsdWUpIHtcbiAgICB2YXIgY2xhc3NTdHJpbmcgPSBjbGFzc1ZhbHVlO1xuXG4gICAgaWYgKGlzQXJyYXkoY2xhc3NWYWx1ZSkpIHtcbiAgICAgIGNsYXNzU3RyaW5nID0gY2xhc3NWYWx1ZS5tYXAodG9DbGFzc1N0cmluZykuam9pbignICcpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoY2xhc3NWYWx1ZSkpIHtcbiAgICAgIGNsYXNzU3RyaW5nID0gT2JqZWN0LmtleXMoY2xhc3NWYWx1ZSkuXG4gICAgICAgIGZpbHRlcihmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGNsYXNzVmFsdWVba2V5XTsgfSkuXG4gICAgICAgIGpvaW4oJyAnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NTdHJpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsYXNzXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbGFzc2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gZHluYW1pY2FsbHkgc2V0IENTUyBjbGFzc2VzIG9uIGFuIEhUTUwgZWxlbWVudCBieSBkYXRhYmluZGluZ1xuICogYW4gZXhwcmVzc2lvbiB0aGF0IHJlcHJlc2VudHMgYWxsIGNsYXNzZXMgdG8gYmUgYWRkZWQuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBvcGVyYXRlcyBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cywgZGVwZW5kaW5nIG9uIHdoaWNoIG9mIHRocmVlIHR5cGVzIHRoZSBleHByZXNzaW9uXG4gKiBldmFsdWF0ZXMgdG86XG4gKlxuICogMS4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGUgc3RyaW5nIHNob3VsZCBiZSBvbmUgb3IgbW9yZSBzcGFjZS1kZWxpbWl0ZWQgY2xhc3NcbiAqIG5hbWVzLlxuICpcbiAqIDIuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhbiBvYmplY3QsIHRoZW4gZm9yIGVhY2gga2V5LXZhbHVlIHBhaXIgb2YgdGhlXG4gKiBvYmplY3Qgd2l0aCBhIHRydXRoeSB2YWx1ZSB0aGUgY29ycmVzcG9uZGluZyBrZXkgaXMgdXNlZCBhcyBhIGNsYXNzIG5hbWUuXG4gKlxuICogMy4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIGFycmF5LCBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5IHNob3VsZCBlaXRoZXIgYmUgYSBzdHJpbmcgYXMgaW5cbiAqIHR5cGUgMSBvciBhbiBvYmplY3QgYXMgaW4gdHlwZSAyLiBUaGlzIG1lYW5zIHRoYXQgeW91IGNhbiBtaXggc3RyaW5ncyBhbmQgb2JqZWN0cyB0b2dldGhlciBpbiBhbiBhcnJheVxuICogdG8gZ2l2ZSB5b3UgbW9yZSBjb250cm9sIG92ZXIgd2hhdCBDU1MgY2xhc3NlcyBhcHBlYXIuIFNlZSB0aGUgY29kZSBiZWxvdyBmb3IgYW4gZXhhbXBsZSBvZiB0aGlzLlxuICpcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIHdvbid0IGFkZCBkdXBsaWNhdGUgY2xhc3NlcyBpZiBhIHBhcnRpY3VsYXIgY2xhc3Mgd2FzIGFscmVhZHkgc2V0LlxuICpcbiAqIFdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgdGhlIHByZXZpb3VzbHkgYWRkZWQgY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgb25seSB0aGVuIGFyZSB0aGVcbiAqIG5ldyBjbGFzc2VzIGFkZGVkLlxuICpcbiAqIEBrbm93bklzc3VlXG4gKiBZb3Ugc2hvdWxkIG5vdCB1c2Uge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbn0gaW4gdGhlIHZhbHVlIG9mIHRoZSBgY2xhc3NgXG4gKiBhdHRyaWJ1dGUsIHdoZW4gdXNpbmcgdGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudC5cbiAqIFNlZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNrbm93bi1pc3N1ZXMgaGVyZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gICAgICAgfCBqdXN0IGJlZm9yZSB0aGUgY2xhc3MgaXMgYXBwbGllZCB0byB0aGUgZWxlbWVudCAgIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI3JlbW92ZUNsYXNzIHJlbW92ZUNsYXNzfSB8IGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgfFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3NcbiAqICAgbmFtZXMsIGFuIGFycmF5LCBvciBhIG1hcCBvZiBjbGFzcyBuYW1lcyB0byBib29sZWFuIHZhbHVlcy4gSW4gdGhlIGNhc2Ugb2YgYSBtYXAsIHRoZVxuICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZVxuICogICBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsYXNzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsICdoYXMtZXJyb3InOiBlcnJvcn1cIj5NYXAgU3ludGF4IEV4YW1wbGU8L3A+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImRlbGV0ZWRcIj5cbiAgICAgICAgICBkZWxldGVkIChhcHBseSBcInN0cmlrZVwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJpbXBvcnRhbnRcIj5cbiAgICAgICAgICBpbXBvcnRhbnQgKGFwcGx5IFwiYm9sZFwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJlcnJvclwiPlxuICAgICAgICAgIGVycm9yIChhcHBseSBcImhhcy1lcnJvclwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwic3R5bGVcIj5Vc2luZyBTdHJpbmcgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic3R5bGVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIj5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM11cIj5Vc2luZyBBcnJheSBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUxXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIj48YnI+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQgMlwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTNcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAzXCI+PGJyPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTQsIHtvcmFuZ2U6IHdhcm5pbmd9XVwiPlVzaW5nIEFycmF5IGFuZCBNYXAgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlNFwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZVwiPjxicj5cbiAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwid2FybmluZ1wiPiB3YXJuaW5nIChhcHBseSBcIm9yYW5nZVwiIGNsYXNzKTwvbGFiZWw+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5zdHJpa2Uge1xuICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcbiAgICAgICB9XG4gICAgICAgLmJvbGQge1xuICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICB9XG4gICAgICAgLnJlZCB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5oYXMtZXJyb3Ige1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gICAgICAgfVxuICAgICAgIC5vcmFuZ2Uge1xuICAgICAgICAgICBjb2xvcjogb3JhbmdlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHBzID0gZWxlbWVudC5hbGwoYnkuY3NzKCdwJykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvYm9sZC8pO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvaGFzLWVycm9yLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2ltcG9ydGFudCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Vycm9yJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2hhcy1lcnJvci8pO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdyZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTInKSkuc2VuZEtleXMoJ3N0cmlrZScpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUzJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSB3aXRoIG1hcCBleGFtcGxlIHNob3VsZCBoYXZlIDIgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmxhc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGU0JykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd3YXJuaW5nJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBvcmFuZ2UnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuXG4gICAjIyBBbmltYXRpb25zXG5cbiAgIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nIG5nQ2xhc3MuXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1jbGFzc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IGlkPVwic2V0YnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0XCIgbmctY2xpY2s9XCJteVZhcj0nbXktY2xhc3MnXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJjbGVhcmJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVZhcj0nJ1wiPlxuICAgICAgPGJyPlxuICAgICAgPHNwYW4gY2xhc3M9XCJiYXNlLWNsYXNzXCIgbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuYmFzZS1jbGFzcyB7XG4gICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgfVxuXG4gICAgICAgLmJhc2UtY2xhc3MubXktY2xhc3Mge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cblxuICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9uc1xuICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLlxuICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZVxuICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rICRhbmltYXRlI2FkZENsYXNzICRhbmltYXRlLmFkZENsYXNzfSBhbmRcbiAgIHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gKi9cbnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NPZGRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsYXNzLW9kZFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fVxuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzT2RkRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ09kZCcsIDApO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NFdmVuXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgZGlyZWN0aXZlcyB3b3JrIGV4YWN0bHkgYXNcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IHRoZXkgd29yayBpblxuICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlIGVmZmVjdCBvbmx5IG9uIG9kZCAoZXZlbikgcm93cy5cbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiB0aGUgc2NvcGUgb2YgYW5cbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzRXZlbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGVcbiAqICAgcmVzdWx0IG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3MtZXZlblwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbG9ha1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXNcbiAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHlcbiAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAqIG9mIHRoZSBicm93c2VyIHZpZXcuXG4gKlxuICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICogYGFuZ3VsYXIubWluLmpzYC5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGNzc1xuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XG4gKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXRcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcmUgaGlkZGVuLiBXaGVuIEFuZ3VsYXIgZW5jb3VudGVycyB0aGlzIGRpcmVjdGl2ZVxuICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXG4gKlxuICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxuICogYXBwbGljYXRpb24uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbG9ha1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUyXCIgY2xhc3M9XCJuZy1jbG9ha1wiPnt7ICd3b3JsZCcgfX08L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMScpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMicpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ0Nsb2FrRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvbnRyb2xsZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxuICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gKlxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcbiAqXG4gKiAqIE1vZGVsIOKAlCBNb2RlbHMgYXJlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2NvcGU7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzXG4gKiAgIGFyZSBhY2Nlc3NlZCB0aHJvdWdoIGJpbmRpbmdzLlxuICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzXG4gKiAgIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24gdG8gZGVjb3JhdGUgdGhlIHNjb3BlIHdpdGggZnVuY3Rpb25zIGFuZCB2YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb25cbiAqIHZpYSB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZS4gQSBjb21tb24gbWlzdGFrZSBpcyB0byBkZWNsYXJlIHRoZSBjb250cm9sbGVyXG4gKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICogYW5kIGV4ZWN1dGVkIHR3aWNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNTAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICogdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nXG4gKiBgbmctY29udHJvbGxlcj1cImFzIHByb3BlcnR5TmFtZVwiYC5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heVxuICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKGRlcHJlY2F0ZWQsIG5vdCByZWNvbW1lbmRlZCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWRcbiAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAqXG4gKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiYFxuICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCJgXG4gKlxuICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyXG4gKiBhbmQgYXZvaWRpbmcgc2NvcGUuXG4gKlxuICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuXG4gKiBtdWx0aXBsZSBjb250cm9sbGVycyBhcHBseSB0byBhbiBlbGVtZW50LlxuICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuXG4gKiAqIFNpbmNlIHRoZXJlIGlzIGFsd2F5cyBhIGAuYCBpbiB0aGUgYmluZGluZ3MsIHlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHByb3RvdHlwYWxcbiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBgY29udHJvbGxlciBhc2Agc3ludGF4LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJBc1wiIG1vZHVsZT1cImNvbnRyb2xsZXJBc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAqICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2V0dGluZ3MubmFtZVwiLz48L2xhYmVsPlxuICogICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICAgQ29udGFjdDpcbiAqICAgICAgPHVsPlxuICogICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzXCI+XG4gKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgYXJpYS1sYWJlbD1cIkNvbnRhY3QgbWV0aG9kXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICogICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzZWxlY3Rfe3skaW5kZXh9fVwiIC8+XG4gKiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAqICAgICAgICA8L2xpPlxuICogICAgICAgIDxsaT48YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+PC9saT5cbiAqICAgICA8L3VsPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJBc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTtcbiAqXG4gKiAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xuICogICAgICB0aGlzLm5hbWUgPSAnSm9obiBTbWl0aCc7XG4gKiAgICAgIHRoaXMuY29udGFjdHMgPSBbXG4gKiAgICAgICAge3R5cGU6ICdwaG9uZScsIHZhbHVlOiAnNDA4IDU1NSAxMjEyJ30sXG4gKiAgICAgICAge3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAnam9obi5zbWl0aEBleGFtcGxlLm9yZyd9XG4gKiAgICAgIF07XG4gKiAgICB9XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgYWxlcnQodGhpcy5uYW1lKTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICB0aGlzLmNvbnRhY3RzLnB1c2goe3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHtcbiAqICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcbiAqICAgICAgdGhpcy5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XG4gKiAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAqICAgIH07XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlciBhcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtYXMtZXhtcGwnKSk7XG4gKiAgICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnc2V0dGluZ3MubmFtZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgICB2YXIgZmlyc3RSZXBlYXQgPVxuICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDApKTtcbiAqICAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDEpKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICpcbiAqICAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgICBmaXJzdFJlcGVhdC5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2NsZWFyJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgICBjb250YWluZXIuZWxlbWVudChieS5idXR0b25UZXh0KCdhZGQnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMikpXG4gKiAgICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB0aGUgXCJhdHRhY2ggdG8gYCRzY29wZWBcIiBzdHlsZSBvZiBjb250cm9sbGVyLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJcIiBtb2R1bGU9XCJjb250cm9sbGVyRXhhbXBsZVwiPlxuICogIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgIDxkaXYgaWQ9XCJjdHJsLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcIj5cbiAqICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCIvPjwvbGFiZWw+XG4gKiAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImdyZWV0KClcIj5ncmVldDwvYnV0dG9uPjxici8+XG4gKiAgICAgQ29udGFjdDpcbiAqICAgICA8dWw+XG4gKiAgICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICogICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gKiAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj5cbiAqICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNsZWFyQ29udGFjdChjb250YWN0KVwiPmNsZWFyPC9idXR0b24+XG4gKiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJyZW1vdmVDb250YWN0KGNvbnRhY3QpXCI+WDwvYnV0dG9uPlxuICogICAgICAgPC9saT5cbiAqICAgICAgIDxsaT5bIDxidXR0b24gbmctY2xpY2s9XCJhZGRDb250YWN0KClcIj5hZGQ8L2J1dHRvbj4gXTwvbGk+XG4gKiAgICA8L3VsPlxuICogICA8L2Rpdj5cbiAqICA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckV4YW1wbGUnLCBbXSlcbiAqICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMicsIFsnJHNjb3BlJywgU2V0dGluZ3NDb250cm9sbGVyMl0pO1xuICpcbiAqICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMigkc2NvcGUpIHtcbiAqICAgICAkc2NvcGUubmFtZSA9ICdKb2huIFNtaXRoJztcbiAqICAgICAkc2NvcGUuY29udGFjdHMgPSBbXG4gKiAgICAgICB7dHlwZToncGhvbmUnLCB2YWx1ZTonNDA4IDU1NSAxMjEyJ30sXG4gKiAgICAgICB7dHlwZTonZW1haWwnLCB2YWx1ZTonam9obi5zbWl0aEBleGFtcGxlLm9yZyd9XG4gKiAgICAgXTtcbiAqXG4gKiAgICAgJHNjb3BlLmdyZWV0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICBhbGVydCgkc2NvcGUubmFtZSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmFkZENvbnRhY3QgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICRzY29wZS5jb250YWN0cy5wdXNoKHt0eXBlOidlbWFpbCcsIHZhbHVlOid5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcbiAqICAgICAgICRzY29wZS5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XG4gKiAgICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnO1xuICogICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgIH07XG4gKiAgIH1cbiAqICA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50KGJ5LmlkKCdjdHJsLWV4bXBsJykpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpXG4gKiAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCdKb2huIFNtaXRoJyk7XG4gKlxuICogICAgICB2YXIgZmlyc3RSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICB2YXIgc2Vjb25kUmVwZWF0ID1cbiAqICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDEpKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCc0MDggNTU1IDEyMTInKTtcbiAqICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7XG4gKlxuICogICAgICBmaXJzdFJlcGVhdC5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2NsZWFyJykpLmNsaWNrKCk7XG4gKlxuICogICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnJyk7XG4gKlxuICogICAgICBjb250YWluZXIuZWxlbWVudChieS5idXR0b25UZXh0KCdhZGQnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpXG4gKiAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICB9KTtcbiAqICA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cblxuICovXG52YXIgbmdDb250cm9sbGVyRGlyZWN0aXZlID0gW2Z1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ0AnLFxuICAgIHByaW9yaXR5OiA1MDBcbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ3NwXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqIEBlbGVtZW50IEFOWVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQW5ndWxhciBoYXMgc29tZSBmZWF0dXJlcyB0aGF0IGNhbiBjb25mbGljdCB3aXRoIGNlcnRhaW4gcmVzdHJpY3Rpb25zIHRoYXQgYXJlIGFwcGxpZWQgd2hlbiB1c2luZ1xuICogW0NTUCAoQ29udGVudCBTZWN1cml0eSBQb2xpY3kpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1ApIHJ1bGVzLlxuICpcbiAqIElmIHlvdSBpbnRlbmQgdG8gaW1wbGVtZW50IENTUCB3aXRoIHRoZXNlIHJ1bGVzIHRoZW4geW91IG11c3QgdGVsbCBBbmd1bGFyIG5vdCB0byB1c2UgdGhlc2VcbiAqIGZlYXR1cmVzLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMgb3IgVW5pdmVyc2FsIFdpbmRvd3MgQXBwcy5cbiAqXG4gKlxuICogVGhlIGZvbGxvd2luZyBkZWZhdWx0IHJ1bGVzIGluIENTUCBhZmZlY3QgQW5ndWxhcjpcbiAqXG4gKiAqIFRoZSB1c2Ugb2YgYGV2YWwoKWAsIGBGdW5jdGlvbihzdHJpbmcpYCBhbmQgc2ltaWxhciBmdW5jdGlvbnMgdG8gZHluYW1pY2FsbHkgY3JlYXRlIGFuZCBleGVjdXRlXG4gKiBjb2RlIGZyb20gc3RyaW5ncyBpcyBmb3JiaWRkZW4uIEFuZ3VsYXIgbWFrZXMgdXNlIG9mIHRoaXMgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UgdG9cbiAqIHByb3ZpZGUgYSAzMCUgaW5jcmVhc2UgaW4gdGhlIHNwZWVkIG9mIGV2YWx1YXRpbmcgQW5ndWxhciBleHByZXNzaW9ucy4gKFRoaXMgQ1NQIHJ1bGUgY2FuIGJlXG4gKiBkaXNhYmxlZCB3aXRoIHRoZSBDU1Aga2V5d29yZCBgdW5zYWZlLWV2YWxgLCBidXQgaXQgaXMgZ2VuZXJhbGx5IG5vdCByZWNvbW1lbmRlZCBhcyBpdCB3b3VsZFxuICogd2Vha2VuIHRoZSBwcm90ZWN0aW9ucyBvZmZlcmVkIGJ5IENTUC4pXG4gKlxuICogKiBUaGUgdXNlIG9mIGlubGluZSByZXNvdXJjZXMsIHN1Y2ggYXMgaW5saW5lIGA8c2NyaXB0PmAgYW5kIGA8c3R5bGU+YCBlbGVtZW50cywgYXJlIGZvcmJpZGRlbi5cbiAqIFRoaXMgcHJldmVudHMgYXBwcyBmcm9tIGluamVjdGluZyBjdXN0b20gc3R5bGVzIGRpcmVjdGx5IGludG8gdGhlIGRvY3VtZW50LiBBbmd1bGFyIG1ha2VzIHVzZSBvZlxuICogdGhpcyB0byBpbmNsdWRlIHNvbWUgQ1NTIHJ1bGVzIChlLmcuIHtAbGluayBuZ0Nsb2FrfSBhbmQge0BsaW5rIG5nSGlkZX0pLiBUbyBtYWtlIHRoZXNlXG4gKiBkaXJlY3RpdmVzIHdvcmsgd2hlbiBhIENTUCBydWxlIGlzIGJsb2NraW5nIGlubGluZSBzdHlsZXMsIHlvdSBtdXN0IGxpbmsgdG8gdGhlIGBhbmd1bGFyLWNzcC5jc3NgXG4gKiBpbiB5b3VyIEhUTUwgbWFudWFsbHkuIChUaGlzIENTUCBydWxlIGNhbiBiZSBkaXNhYmxlZCB3aXRoIHRoZSBDU1Aga2V5d29yZCBgdW5zYWZlLWlubGluZWAsIGJ1dFxuICogaXQgaXMgZ2VuZXJhbGx5IG5vdCByZWNvbW1lbmRlZCBhcyBpdCB3b3VsZCB3ZWFrZW4gdGhlIHByb3RlY3Rpb25zIG9mZmVyZWQgYnkgQ1NQLilcbiAqXG4gKiBJZiB5b3UgZG8gbm90IHByb3ZpZGUgYG5nQ3NwYCB0aGVuIEFuZ3VsYXIgdHJpZXMgdG8gYXV0b2RldGVjdCBpZiBDU1AgaXMgYmxvY2tpbmcgZHluYW1pYyBjb2RlXG4gKiBjcmVhdGlvbiBmcm9tIHN0cmluZ3MgKGUuZy4sIGB1bnNhZmUtZXZhbGAgbm90IHNwZWNpZmllZCBpbiBDU1AgaGVhZGVyKSBhbmQgYXV0b21hdGljYWxseVxuICogZGVhY3RpdmF0ZXMgdGhpcyBmZWF0dXJlIGluIHRoZSB7QGxpbmsgJHBhcnNlfSBzZXJ2aWNlLiBUaGlzIGF1dG9kZXRlY3Rpb24sIGhvd2V2ZXIsIHRyaWdnZXJzIGFcbiAqIENTUCBlcnJvciB0byBiZSBsb2dnZWQgaW4gdGhlIGNvbnNvbGU6XG4gKlxuICogYGBgXG4gKiBSZWZ1c2VkIHRvIGV2YWx1YXRlIGEgc3RyaW5nIGFzIEphdmFTY3JpcHQgYmVjYXVzZSAndW5zYWZlLWV2YWwnIGlzIG5vdCBhbiBhbGxvd2VkIHNvdXJjZSBvZlxuICogc2NyaXB0IGluIHRoZSBmb2xsb3dpbmcgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZGlyZWN0aXZlOiBcImRlZmF1bHQtc3JjICdzZWxmJ1wiLiBOb3RlIHRoYXRcbiAqICdzY3JpcHQtc3JjJyB3YXMgbm90IGV4cGxpY2l0bHkgc2V0LCBzbyAnZGVmYXVsdC1zcmMnIGlzIHVzZWQgYXMgYSBmYWxsYmFjay5cbiAqIGBgYFxuICpcbiAqIFRoaXMgZXJyb3IgaXMgaGFybWxlc3MgYnV0IGFubm95aW5nLiBUbyBwcmV2ZW50IHRoZSBlcnJvciBmcm9tIHNob3dpbmcgdXAsIHB1dCB0aGUgYG5nQ3NwYFxuICogZGlyZWN0aXZlIG9uIGFuIGVsZW1lbnQgb2YgdGhlIEhUTUwgZG9jdW1lbnQgdGhhdCBhcHBlYXJzIGJlZm9yZSB0aGUgYDxzY3JpcHQ+YCB0YWcgdGhhdCBsb2Fkc1xuICogdGhlIGBhbmd1bGFyLmpzYCBmaWxlLlxuICpcbiAqICpOb3RlOiBUaGlzIGRpcmVjdGl2ZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUgYG5nLWNzcGAgYW5kIGBkYXRhLW5nLWNzcGAgYXR0cmlidXRlIGZvcm0uKlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB3aGljaCBvZiB0aGUgQ1NQIHJlbGF0ZWQgQW5ndWxhciBmZWF0dXJlcyBzaG91bGQgYmUgZGVhY3RpdmF0ZWQgYnkgcHJvdmlkaW5nXG4gKiBhIHZhbHVlIGZvciB0aGUgYG5nLWNzcGAgYXR0cmlidXRlLiBUaGUgb3B0aW9ucyBhcmUgYXMgZm9sbG93czpcbiAqXG4gKiAqIG5vLWlubGluZS1zdHlsZTogdGhpcyBzdG9wcyBBbmd1bGFyIGZyb20gaW5qZWN0aW5nIENTUyBzdHlsZXMgaW50byB0aGUgRE9NXG4gKlxuICogKiBuby11bnNhZmUtZXZhbDogdGhpcyBzdG9wcyBBbmd1bGFyIGZyb20gb3B0aW1pemluZyAkcGFyc2Ugd2l0aCB1bnNhZmUgZXZhbCBvZiBzdHJpbmdzXG4gKlxuICogWW91IGNhbiB1c2UgdGhlc2UgdmFsdWVzIGluIHRoZSBmb2xsb3dpbmcgY29tYmluYXRpb25zOlxuICpcbiAqXG4gKiAqIE5vIGRlY2xhcmF0aW9uIG1lYW5zIHRoYXQgQW5ndWxhciB3aWxsIGFzc3VtZSB0aGF0IHlvdSBjYW4gZG8gaW5saW5lIHN0eWxlcywgYnV0IGl0IHdpbGwgZG9cbiAqIGEgcnVudGltZSBjaGVjayBmb3IgdW5zYWZlLWV2YWwuIEUuZy4gYDxib2R5PmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXNcbiAqIHZlcnNpb25zIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBBIHNpbXBsZSBgbmctY3NwYCAob3IgYGRhdGEtbmctY3NwYCkgYXR0cmlidXRlIHdpbGwgdGVsbCBBbmd1bGFyIHRvIGRlYWN0aXZhdGUgYm90aCBpbmxpbmVcbiAqIHN0eWxlcyBhbmQgdW5zYWZlIGV2YWwuIEUuZy4gYDxib2R5IG5nLWNzcD5gLiBUaGlzIGlzIGJhY2t3YXJkbHkgY29tcGF0aWJsZSB3aXRoIHByZXZpb3VzXG4gKiB2ZXJzaW9ucyBvZiBBbmd1bGFyLlxuICpcbiAqICogU3BlY2lmeWluZyBvbmx5IGBuby11bnNhZmUtZXZhbGAgdGVsbHMgQW5ndWxhciB0aGF0IHdlIG11c3Qgbm90IHVzZSBldmFsLCBidXQgdGhhdCB3ZSBjYW5cbiAqIGluamVjdCBpbmxpbmUgc3R5bGVzLiBFLmcuIGA8Ym9keSBuZy1jc3A9XCJuby11bnNhZmUtZXZhbFwiPmAuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLWlubGluZS1zdHlsZWAgdGVsbHMgQW5ndWxhciB0aGF0IHdlIG11c3Qgbm90IGluamVjdCBzdHlsZXMsIGJ1dCB0aGF0IHdlIGNhblxuICogcnVuIGV2YWwgLSBubyBhdXRvbWF0aWMgY2hlY2sgZm9yIHVuc2FmZSBldmFsIHdpbGwgb2NjdXIuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZVwiPmBcbiAqXG4gKiAqIFNwZWNpZnlpbmcgYm90aCBgbm8tdW5zYWZlLWV2YWxgIGFuZCBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0XG4gKiBzdHlsZXMgbm9yIHVzZSBldmFsLCB3aGljaCBpcyB0aGUgc2FtZSBhcyBhbiBlbXB0eTogbmctY3NwLlxuICogRS5nLmA8Ym9keSBuZy1jc3A9XCJuby1pbmxpbmUtc3R5bGU7bm8tdW5zYWZlLWV2YWxcIj5gXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gYXBwbHkgdGhlIGBuZ0NzcGAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuICAgYGBgaHRtbFxuICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgPGh0bWwgbmctYXBwIG5nLWNzcD5cbiAgICAgLi4uXG4gICAgIC4uLlxuICAgICA8L2h0bWw+XG4gICBgYGBcbiAgKiBAZXhhbXBsZVxuICAgICAgPCEtLSBOb3RlOiB0aGUgYC5jc3BgIHN1ZmZpeCBpbiB0aGUgZXhhbXBsZSBuYW1lIHRyaWdnZXJzIENTUCBtb2RlIGluIG91ciBodHRwIHNlcnZlciEgLS0+XG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiZXhhbXBsZS5jc3BcIiBtb2R1bGU9XCJjc3BFeGFtcGxlXCIgbmctY3NwPVwidHJ1ZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5Db250cm9sbGVyIGFzIGN0cmxcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmluYygpXCIgaWQ9XCJpbmNcIj5JbmNyZW1lbnQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJjb3VudGVyXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmNvdW50ZXJ9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuZXZpbCgpXCIgaWQ9XCJldmlsXCI+RXZpbDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImV2aWxFcnJvclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5ldmlsRXJyb3J9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjc3BFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2aWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV2YWwoJzErMicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmlsRXJyb3IgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB1dGlsLCB3ZWJkcml2ZXI7XG5cbiAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpO1xuICAgICAgICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5pZCgnY291bnRlcicpKTtcbiAgICAgICAgICB2YXIgZXZpbEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2V2aWwnKSk7XG4gICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlckxvZy5maWx0ZXIoZnVuY3Rpb24obG9nRW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nRW50cnkubGV2ZWwudmFsdWUgPiB3ZWJkcml2ZXIubG9nZ2luZy5MZXZlbC5XQVJOSU5HLnZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3ROb0Vycm9ycygpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICBleHBlY3QoZmlsdGVyZWRMb2cubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRMb2cubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZXhwZWN0RXJyb3IocmVnZXgpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZmlsdGVyZWRMb2cuZm9yRWFjaChmdW5jdGlvbihsb2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYW4gZXJyb3IgdGhhdCBtYXRjaGVzICcgKyByZWdleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgnc2VsZW5pdW0td2ViZHJpdmVyJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLFxuICAgICAgICAgIC8vIGFzIFNhZmFyaSBkb2VzIG5vdCBsb2FkIHRoZSBwYWdlIHdpdGggUHJvdHJhY3RvcidzIGluamVjdGVkIHNjcmlwdHMsXG4gICAgICAgICAgLy8gYW5kIEZpcmVmb3ggd2ViZHJpdmVyIGFsd2F5cyBkaXNhYmxlcyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSAoIzYzNTgpXG4gICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBub3QgcmVwb3J0IGVycm9ycyB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gY2xlYXIgZXJyb3JzIHNvIHdlIGFyZSBub3QgZGVwZW5kZW50IG9uIHByZXZpb3VzIHRlc3RzXG4gICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICAgICAgLy8gTmVlZCB0byByZWxvYWQgdGhlIHBhZ2UgYXMgdGhlIHBhZ2UgaXMgYWxyZWFkeSBsb2FkZWQgd2hlblxuICAgICAgICAgICAgLy8gd2UgY29tZSBoZXJlXG4gICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgYnJvd3Nlci5nZXQodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMCcpO1xuICAgICAgICAgICAgaW5jQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICAgIGV4cGVjdE5vRXJyb3JzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuZCByZXBvcnQgYW4gZXJyb3Igd2hlbiB1c2luZyBcImV2YWxcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXZpbEJ0bi5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGV2aWxFcnJvci5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgICBleHBlY3RFcnJvcigvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAqL1xuXG4vLyBgbmdDc3BgIGlzIG5vdCBpbXBsZW1lbnRlZCBhcyBhIHByb3BlciBkaXJlY3RpdmUgYW55IG1vcmUsIGJlY2F1c2Ugd2UgbmVlZCBpdCBiZSBwcm9jZXNzZWQgd2hpbGVcbi8vIHdlIGJvb3RzdHJhcCB0aGUgYXBwIChiZWZvcmUgYCRwYXJzZWAgaXMgaW5zdGFudGlhdGVkKS4gRm9yIHRoaXMgcmVhc29uLCB3ZSBqdXN0IGhhdmUgdGhlIGBjc3AoKWBcbi8vIGZuIHRoYXQgbG9va3MgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUgYW55d2hlcmUgaW4gdGhlIGN1cnJlbnQgZG9jLlxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ0NsaWNrIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIHdoZW5cbiAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY2xpY2suICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xpY2tcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudFxuICAgICAgPC9idXR0b24+XG4gICAgICA8c3Bhbj5cbiAgICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICAgPC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbi8qXG4gKiBBIGNvbGxlY3Rpb24gb2YgZGlyZWN0aXZlcyB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gZXZlbnQgaGFuZGxlcnMgdGhhdCBhcmUgZGVmaW5lZCBhc1xuICogYW5ndWxhciBleHByZXNzaW9ucyBhbmQgYXJlIGNvbXBpbGVkIGFuZCBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKi9cbnZhciBuZ0V2ZW50RGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBGb3IgZXZlbnRzIHRoYXQgbWlnaHQgZmlyZSBzeW5jaHJvbm91c2x5IGR1cmluZyBET00gbWFuaXB1bGF0aW9uXG4vLyB3ZSBuZWVkIHRvIGV4ZWN1dGUgdGhlaXIgZXZlbnQgaGFuZGxlcnMgYXN5bmNocm9ub3VzbHkgdXNpbmcgJGV2YWxBc3luYyxcbi8vIHNvIHRoYXQgdGhleSBhcmUgbm90IGV4ZWN1dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS5cbnZhciBmb3JjZUFzeW5jRXZlbnRzID0ge1xuICAnYmx1cic6IHRydWUsXG4gICdmb2N1cyc6IHRydWVcbn07XG5mb3JFYWNoKFxuICAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZScuc3BsaXQoJyAnKSxcbiAgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBldmVudE5hbWUpO1xuICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oJGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgICAvLyBOT1RFOlxuICAgICAgICAgIC8vIFdlIGV4cG9zZSB0aGUgcG93ZXJmdWwgYCRldmVudGAgb2JqZWN0IG9uIHRoZSBzY29wZSB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgV2luZG93LFxuICAgICAgICAgIC8vIGV0Yy4gVGhpcyBpcyBPSywgYmVjYXVzZSBleHByZXNzaW9ucyBhcmUgbm90IHNhbmRib3hlZCBhbnkgbW9yZSAoYW5kIHRoZSBleHByZXNzaW9uXG4gICAgICAgICAgLy8gc2FuZGJveCB3YXMgbmV2ZXIgbWVhbnQgdG8gYmUgYSBzZWN1cml0eSBmZWF0dXJlIGFueXdheSkuXG4gICAgICAgICAgdmFyIGZuID0gJHBhcnNlKGF0dHJbZGlyZWN0aXZlTmFtZV0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0V2ZW50SGFuZGxlcihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5vbihldmVudE5hbWUsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OiBldmVudH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoZm9yY2VBc3luY0V2ZW50c1tldmVudE5hbWVdICYmICRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV07XG4gIH1cbik7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdEYmxjbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0RibGNsaWNrYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBhIGRibGNsaWNrIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEYmxjbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBhIGRibGNsaWNrLiAoVGhlIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1kYmxjbGlja1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1kYmxjbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBkb3VibGUgY2xpY2spXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nTW91c2Vkb3duIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZG93bi4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZWRvd25cIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNldXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZXVwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNldXA9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgdXApXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW92ZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlb3ZlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlb3Zlci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZW92ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgaXMgb3ZlcilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VlbnRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWVudGVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlZW50ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VlbnRlcj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGVudGVycylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VsZWF2ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VsZWF2ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWxlYXZlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlbGVhdmVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VsZWF2ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGxlYXZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vtb3ZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW1vdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbW92ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW1vdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2Vtb3ZlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlbW92ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIG1vdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdLZXlkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGtleWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1rZXlkb3duXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmcta2V5ZG93bj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgIGtleSBkb3duIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXVwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXl1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5dXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5dXAuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1rZXl1cFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleSBjb3VudDwvcD5cbiAgICAgICA8aW5wdXQgbmcta2V5dXA9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+IGtleSB1cCBjb3VudDoge3tjb3VudH19XG5cbiAgICAgICA8cD5UeXBpbmcgaW4gdGhlIGlucHV0IGJveCBiZWxvdyB1cGRhdGVzIHRoZSBrZXljb2RlPC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImV2ZW50PSRldmVudFwiPlxuICAgICAgIDxwPmV2ZW50IGtleUNvZGU6IHt7IGV2ZW50LmtleUNvZGUgfX08L3A+XG4gICAgICAgPHA+ZXZlbnQgYWx0S2V5OiB7eyBldmVudC5hbHRLZXkgfX08L3A+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdLZXlwcmVzc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5cHJlc3MgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5cHJlc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5cHJlc3MuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9XG4gKiBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmcta2V5cHJlc3NcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlwcmVzcz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgIGtleSBwcmVzcyBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTdWJtaXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVuYWJsZXMgYmluZGluZyBhbmd1bGFyIGV4cHJlc3Npb25zIHRvIG9uc3VibWl0IGV2ZW50cy5cbiAqXG4gKiBBZGRpdGlvbmFsbHkgaXQgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uICh3aGljaCBmb3IgZm9ybSBtZWFucyBzZW5kaW5nIHRoZSByZXF1ZXN0IHRvIHRoZVxuICogc2VydmVyIGFuZCByZWxvYWRpbmcgdGhlIGN1cnJlbnQgcGFnZSksIGJ1dCBvbmx5IGlmIHRoZSBmb3JtIGRvZXMgbm90IGNvbnRhaW4gYGFjdGlvbmAsXG4gKiBgZGF0YS1hY3Rpb25gLCBvciBgeC1hY3Rpb25gIGF0dHJpYnV0ZXMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqV2FybmluZzoqKiBCZSBjYXJlZnVsIG5vdCB0byBjYXVzZSBcImRvdWJsZS1zdWJtaXNzaW9uXCIgYnkgdXNpbmcgYm90aCB0aGUgYG5nQ2xpY2tgIGFuZFxuICogYG5nU3VibWl0YCBoYW5kbGVycyB0b2dldGhlci4gU2VlIHRoZVxuICoge0BsaW5rIGZvcm0jc3VibWl0dGluZy1hLWZvcm0tYW5kLXByZXZlbnRpbmctdGhlLWRlZmF1bHQtYWN0aW9uIGBmb3JtYCBkaXJlY3RpdmUgZG9jdW1lbnRhdGlvbn1cbiAqIGZvciBhIGRldGFpbGVkIGRpc2N1c3Npb24gb2Ygd2hlbiBgbmdTdWJtaXRgIG1heSBiZSB0cmlnZ2VyZWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZWxlbWVudCBmb3JtXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N1Ym1pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLlxuICogKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cInN1Ym1pdEV4YW1wbGVcIiBuYW1lPVwibmctc3VibWl0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc3VibWl0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUubGlzdCA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaGVsbG8nO1xuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRleHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5wdXNoKHRoaXMudGV4dCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5nLXN1Ym1pdD1cInN1Ym1pdCgpXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIEVudGVyIHRleHQgYW5kIGhpdCBlbnRlcjpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ0ZXh0XCIgbmFtZT1cInRleHRcIiAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGlkPVwic3VibWl0XCIgdmFsdWU9XCJTdWJtaXRcIiAvPlxuICAgICAgICA8cHJlPmxpc3Q9e3tsaXN0fX08L3ByZT5cbiAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdWJtaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignaGVsbG8nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCBpZ25vcmUgZW1wdHkgc3RyaW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignaGVsbG8nKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRm9jdXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGZvY3VzIGV2ZW50LlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgZm9jdXNgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgd2hlbiBjYWxsaW5nIGBpbnB1dC5mb2N1cygpYFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRm9jdXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogZm9jdXMuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JsdXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGJsdXIgZXZlbnQuXG4gKlxuICogQSBbYmx1ciBldmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL2JsdXIpIGZpcmVzIHdoZW5cbiAqIGFuIGVsZW1lbnQgaGFzIGxvc3QgZm9jdXMuXG4gKlxuICogTm90ZTogQXMgdGhlIGBibHVyYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IGFsc28gZHVyaW5nIERPTSBtYW5pcHVsYXRpb25zXG4gKiAoZS5nLiByZW1vdmluZyBhIGZvY3Vzc2VkIGlucHV0KSxcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JsdXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYmx1ci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29weVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY29weSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NvcHkge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY29weS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jb3B5XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY29weT1cImNvcGllZD10cnVlXCIgbmctaW5pdD1cImNvcGllZD1mYWxzZTsgdmFsdWU9J2NvcHkgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY29waWVkOiB7e2NvcGllZH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ3V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjdXQgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDdXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY3V0LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWN1dFwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWN1dD1cImN1dD10cnVlXCIgbmctaW5pdD1cImN1dD1mYWxzZTsgdmFsdWU9J2N1dCBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjdXQ6IHt7Y3V0fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQYXN0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gcGFzdGUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdQYXN0ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBwYXN0ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1wYXN0ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLXBhc3RlPVwicGFzdGU9dHJ1ZVwiIG5nLWluaXQ9XCJwYXN0ZT1mYWxzZVwiIHBsYWNlaG9sZGVyPSdwYXN0ZSBoZXJlJz5cbiAgICAgIHBhc3RlZDoge3twYXN0ZX19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSWZcbiAqIEByZXN0cmljdCBBXG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSWZgIGRpcmVjdGl2ZSByZW1vdmVzIG9yIHJlY3JlYXRlcyBhIHBvcnRpb24gb2YgdGhlIERPTSB0cmVlIGJhc2VkIG9uIGFuXG4gKiB7ZXhwcmVzc2lvbn0uIElmIHRoZSBleHByZXNzaW9uIGFzc2lnbmVkIHRvIGBuZ0lmYCBldmFsdWF0ZXMgdG8gYSBmYWxzZVxuICogdmFsdWUgdGhlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSwgb3RoZXJ3aXNlIGEgY2xvbmUgb2YgdGhlXG4gKiBlbGVtZW50IGlzIHJlaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICpcbiAqIGBuZ0lmYCBkaWZmZXJzIGZyb20gYG5nU2hvd2AgYW5kIGBuZ0hpZGVgIGluIHRoYXQgYG5nSWZgIGNvbXBsZXRlbHkgcmVtb3ZlcyBhbmQgcmVjcmVhdGVzIHRoZVxuICogZWxlbWVudCBpbiB0aGUgRE9NIHJhdGhlciB0aGFuIGNoYW5naW5nIGl0cyB2aXNpYmlsaXR5IHZpYSB0aGUgYGRpc3BsYXlgIGNzcyBwcm9wZXJ0eS4gIEEgY29tbW9uXG4gKiBjYXNlIHdoZW4gdGhpcyBkaWZmZXJlbmNlIGlzIHNpZ25pZmljYW50IGlzIHdoZW4gdXNpbmcgY3NzIHNlbGVjdG9ycyB0aGF0IHJlbHkgb24gYW4gZWxlbWVudCdzXG4gKiBwb3NpdGlvbiB3aXRoaW4gdGhlIERPTSwgc3VjaCBhcyB0aGUgYDpmaXJzdC1jaGlsZGAgb3IgYDpsYXN0LWNoaWxkYCBwc2V1ZG8tY2xhc3Nlcy5cbiAqXG4gKiBOb3RlIHRoYXQgd2hlbiBhbiBlbGVtZW50IGlzIHJlbW92ZWQgdXNpbmcgYG5nSWZgIGl0cyBzY29wZSBpcyBkZXN0cm95ZWQgYW5kIGEgbmV3IHNjb3BlXG4gKiBpcyBjcmVhdGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVzdG9yZWQuICBUaGUgc2NvcGUgY3JlYXRlZCB3aXRoaW4gYG5nSWZgIGluaGVyaXRzIGZyb21cbiAqIGl0cyBwYXJlbnQgc2NvcGUgdXNpbmdcbiAqIFtwcm90b3R5cGFsIGluaGVyaXRhbmNlXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMjamF2YXNjcmlwdC1wcm90b3R5cGFsLWluaGVyaXRhbmNlKS5cbiAqIEFuIGltcG9ydGFudCBpbXBsaWNhdGlvbiBvZiB0aGlzIGlzIGlmIGBuZ01vZGVsYCBpcyB1c2VkIHdpdGhpbiBgbmdJZmAgdG8gYmluZCB0b1xuICogYSBqYXZhc2NyaXB0IHByaW1pdGl2ZSBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc2NvcGUuIEluIHRoaXMgY2FzZSBhbnkgbW9kaWZpY2F0aW9ucyBtYWRlIHRvIHRoZVxuICogdmFyaWFibGUgd2l0aGluIHRoZSBjaGlsZCBzY29wZSB3aWxsIG92ZXJyaWRlIChoaWRlKSB0aGUgdmFsdWUgaW4gdGhlIHBhcmVudCBzY29wZS5cbiAqXG4gKiBBbHNvLCBgbmdJZmAgcmVjcmVhdGVzIGVsZW1lbnRzIHVzaW5nIHRoZWlyIGNvbXBpbGVkIHN0YXRlLiBBbiBleGFtcGxlIG9mIHRoaXMgYmVoYXZpb3JcbiAqIGlzIGlmIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgaXMgZGlyZWN0bHkgbW9kaWZpZWQgYWZ0ZXIgaXQncyBjb21waWxlZCwgdXNpbmcgc29tZXRoaW5nIGxpa2VcbiAqIGpRdWVyeSdzIGAuYWRkQ2xhc3MoKWAgbWV0aG9kLCBhbmQgdGhlIGVsZW1lbnQgaXMgbGF0ZXIgcmVtb3ZlZC4gV2hlbiBgbmdJZmAgcmVjcmVhdGVzIHRoZSBlbGVtZW50XG4gKiB0aGUgYWRkZWQgY2xhc3Mgd2lsbCBiZSBsb3N0IGJlY2F1c2UgdGhlIG9yaWdpbmFsIGNvbXBpbGVkIHN0YXRlIGlzIHVzZWQgdG8gcmVnZW5lcmF0ZSB0aGUgZWxlbWVudC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gcHJvdmlkZSBhbmltYXRpb25zIHZpYSB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHRvIGFuaW1hdGUgdGhlIGBlbnRlcmBcbiAqIGFuZCBgbGVhdmVgIGVmZmVjdHMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSAgfCBqdXN0IGFmdGVyIHRoZSBgbmdJZmAgY29udGVudHMgY2hhbmdlIGFuZCBhIG5ldyBET00gZWxlbWVudCBpcyBjcmVhdGVkIGFuZCBpbmplY3RlZCBpbnRvIHRoZSBgbmdJZmAgY29udGFpbmVyIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCBqdXN0IGJlZm9yZSB0aGUgYG5nSWZgIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTSB8XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA2MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHRyZWUuIElmIGl0IGlzIHRydXRoeSBhIGNvcHkgb2YgdGhlIGNvbXBpbGVkXG4gKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWlmXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxsYWJlbD5DbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIG5nLWluaXQ9XCJjaGVja2VkPXRydWVcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgPHNwYW4gbmctaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJhbmltYXRlLWlmXCI+XG4gICAgICAgIFRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuXG4gICAgICA8L3NwYW4+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJZkRpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiA2MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAkJHRsYjogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrLCBjaGlsZFNjb3BlLCBwcmV2aW91c0VsZW1lbnRzO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIG5ld1Njb3BlKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9ICRjb21waWxlLiQkY3JlYXRlQ29tbWVudCgnZW5kIG5nSWYnLCAkYXR0ci5uZ0lmKTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBvbmx5IG5lZWQgdGhlIGZpcnN0L2xhc3Qgbm9kZSBvZiB0aGUgY2xvbmVkIG5vZGVzLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIGJsb2NrID0ge1xuICAgICAgICAgICAgICAgICAgY2xvbmU6IGNsb25lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgJGVsZW1lbnQucGFyZW50KCksICRlbGVtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKHByZXZpb3VzRWxlbWVudHMpLmRvbmUoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlKSBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJsb2NrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSW5jbHVkZVxuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmV0Y2hlcywgY29tcGlsZXMgYW5kIGluY2x1ZGVzIGFuIGV4dGVybmFsIEhUTUwgZnJhZ21lbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlXG4gKiBhcHBsaWNhdGlvbiBkb2N1bWVudC4gVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gaXQuIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBwcm90b2NvbHNcbiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3QgdGhlbX0gb3JcbiAqIHtAbGluayAkc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIHRoZW19IGFzIHRydXN0ZWQgdmFsdWVzLiBSZWZlciB0byBBbmd1bGFyJ3Mge0BsaW5rXG4gKiBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nfS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLlxuICogRm9yIGV4YW1wbGUsIGBuZ0luY2x1ZGVgIHdvbid0IHdvcmsgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBvbiBhbGwgYnJvd3NlcnMgYW5kIGZvciBgZmlsZTovL2BcbiAqIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBuZXcgaW5jbHVkZSB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gIHwgd2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCBvbiB0aGUgb2xkIGluY2x1ZGUgfFxuICpcbiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA0MDBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdJbmNsdWRlfHNyYyBhbmd1bGFyIGV4cHJlc3Npb24gZXZhbHVhdGluZyB0byBVUkwuIElmIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcgY29uc3RhbnQsXG4gKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluICoqc2luZ2xlKiogcXVvdGVzLCBlLmcuIGBzcmM9XCInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCdcImAuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW4gYSBuZXcgcGFydGlhbCBpcyBsb2FkZWQuXG4gKiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAgICAgICAgICAgICAgICAgICoqTm90ZToqKiBXaGVuIHVzaW5nIG9ubG9hZCBvbiBTVkcgZWxlbWVudHMgaW4gSUUxMSwgdGhlIGJyb3dzZXIgd2lsbCB0cnkgdG8gY2FsbFxuICogICAgICAgICAgICAgICAgICBhIGZ1bmN0aW9uIHdpdGggdGhlIG5hbWUgb24gdGhlIHdpbmRvdyBlbGVtZW50LCB3aGljaCB3aWxsIHVzdWFsbHkgdGhyb3cgYVxuICogICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIGlzIHVuZGVmaW5lZFwiIGVycm9yLiBUbyBmaXggdGhpcywgeW91IGNhbiBpbnN0ZWFkIHVzZSBgZGF0YS1vbmxvYWRgIG9yIGFcbiAqICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IGZvcm0gdGhhdCB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI25vcm1hbGl6YXRpb24gbWF0Y2hlc30gYG9ubG9hZGAuXG4gKiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgKlxuICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIFdoZXRoZXIgYG5nSW5jbHVkZWAgc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxcbiAqICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbH0gdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydCBhZnRlciB0aGUgY29udGVudCBpcyBsb2FkZWQuXG4gKlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwiaW5jbHVkZUV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaW5jbHVkZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInRlbXBsYXRlXCIgbmctb3B0aW9ucz1cInQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXNcIj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPihibGFuayk8L29wdGlvbj5cbiAgICAgICA8L3NlbGVjdD5cbiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8Y29kZT57e3RlbXBsYXRlLnVybH19PC9jb2RlPlxuICAgICAgIDxoci8+XG4gICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZVwiIG5nLWluY2x1ZGU9XCJ0ZW1wbGF0ZS51cmxcIj48L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbmNsdWRlRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9XG4gICAgICAgICAgICBbeyBuYW1lOiAndGVtcGxhdGUxLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTEuaHRtbCd9LFxuICAgICAgICAgICAgIHsgbmFtZTogJ3RlbXBsYXRlMi5odG1sJywgdXJsOiAndGVtcGxhdGUyLmh0bWwnfV07XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcbiAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMS5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTIuaHRtbFwiPlxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbFxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5zbGlkZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZSB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIsIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgdG9wOjUwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0ZW1wbGF0ZVNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RlbXBsYXRlJykpO1xuICAgICAgdmFyIGluY2x1ZGVFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1pbmNsdWRlXScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUyLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgwXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGJsYW5rJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09PSAnZmlyZWZveCcpIHtcbiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmlzUHJlc2VudCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudExvYWRlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nSW5jbHVkZSBzY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50RXJyb3JcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIHdoZW4gYSB0ZW1wbGF0ZSBIVFRQIHJlcXVlc3QgeWllbGRzIGFuIGVycm9uZW91cyByZXNwb25zZSAoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+IDI5OSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cbnZhciBuZ0luY2x1ZGVEaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGFuY2hvclNjcm9sbCcsICckYW5pbWF0ZScsXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAgICRhbmNob3JTY3JvbGwsICAgJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgcHJpb3JpdHk6IDQwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYyxcbiAgICAgICAgICBvbmxvYWRFeHAgPSBhdHRyLm9ubG9hZCB8fCAnJyxcbiAgICAgICAgICBhdXRvU2Nyb2xsRXhwID0gYXR0ci5hdXRvc2Nyb2xsO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgY3VycmVudFNjb3BlLFxuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpLmRvbmUoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9PSBmYWxzZSkgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gY3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChzcmNFeHAsIGZ1bmN0aW9uIG5nSW5jbHVkZVdhdGNoQWN0aW9uKHNyYykge1xuICAgICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlICYmIGlzRGVmaW5lZChhdXRvU2Nyb2xsRXhwKSAmJlxuICAgICAgICAgICAgICAoIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpKSB7XG4gICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy1pbmNsdWRlIHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB1c2luZyBuZy1pbmNsdWRlIG9uIGFuIGVsZW1lbnQgd2l0aCBhZGRpdGlvbmFsIGNvbnRlbnQgZG9lcyBub3QgbWFrZSBzZW5zZS4uLlxuICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZFxuICAgICAgICAgICAgICAvLyBkaXJlY3RpdmVzIHRvIG5vbiBleGlzdGluZyBlbGVtZW50cy5cbiAgICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCAkZWxlbWVudCkuZG9uZShhZnRlckFuaW1hdGlvbik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJywgc3JjKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vLyBUaGlzIGRpcmVjdGl2ZSBpcyBjYWxsZWQgZHVyaW5nIHRoZSAkdHJhbnNjbHVkZSBjYWxsIG9mIHRoZSBmaXJzdCBgbmdJbmNsdWRlYCBkaXJlY3RpdmUuXG4vLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLlxuLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSBzbyB0aGF0IHRoZSBlbGVtZW50IGNvbnRlbnQgaXMgYWxyZWFkeSBmaWxsZWQgd2hlblxuLy8gdGhlIGxpbmsgZnVuY3Rpb24gb2YgYW5vdGhlciBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudCBhcyBuZ0luY2x1ZGVcbi8vIGlzIGNhbGxlZC5cbnZhciBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLFxuICBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VDQScsXG4gICAgICBwcmlvcml0eTogLTQwMCxcbiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAodG9TdHJpbmcuY2FsbCgkZWxlbWVudFswXSkubWF0Y2goL1NWRy8pKSB7XG4gICAgICAgICAgLy8gV2ViS2l0OiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM1Njk4IC0tLSBTVkcgZWxlbWVudHMgZG8gbm90XG4gICAgICAgICAgLy8gc3VwcG9ydCBpbm5lckhUTUwsIHNvIGRldGVjdCB0aGlzIGhlcmUgYW5kIHRyeSB0byBnZW5lcmF0ZSB0aGUgY29udGVudHNcbiAgICAgICAgICAvLyBzcGVjaWFsbHkuXG4gICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAkY29tcGlsZShqcUxpdGVCdWlsZEZyYWdtZW50KGN0cmwudGVtcGxhdGUsIHdpbmRvdy5kb2N1bWVudCkuY2hpbGROb2Rlcykoc2NvcGUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIG5hbWVzcGFjZUFkYXB0ZWRDbG9uZShjbG9uZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9LCB7ZnV0dXJlUGFyZW50RWxlbWVudDogJGVsZW1lbnR9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpO1xuICAgICAgICAkY29tcGlsZSgkZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbml0XG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZVxuICogY3VycmVudCBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYWJ1c2VkIHRvIGFkZCB1bm5lY2Vzc2FyeSBhbW91bnRzIG9mIGxvZ2ljIGludG8geW91ciB0ZW1wbGF0ZXMuXG4gKiBUaGVyZSBhcmUgb25seSBhIGZldyBhcHByb3ByaWF0ZSB1c2VzIG9mIGBuZ0luaXRgLCBzdWNoIGFzIGZvciBhbGlhc2luZyBzcGVjaWFsIHByb3BlcnRpZXMgb2ZcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3c7IGFuZCBmb3IgaW5qZWN0aW5nIGRhdGEgdmlhXG4gKiBzZXJ2ZXIgc2lkZSBzY3JpcHRpbmcuIEJlc2lkZXMgdGhlc2UgZmV3IGNhc2VzLCB5b3Ugc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc31cbiAqIHJhdGhlciB0aGFuIGBuZ0luaXRgIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlKio6IElmIHlvdSBoYXZlIGFzc2lnbm1lbnQgaW4gYG5nSW5pdGAgYWxvbmcgd2l0aCBhIHtAbGluayBuZy4kZmlsdGVyIGBmaWx0ZXJgfSwgbWFrZVxuICogc3VyZSB5b3UgaGF2ZSBwYXJlbnRoZXNlcyB0byBlbnN1cmUgY29ycmVjdCBvcGVyYXRvciBwcmVjZWRlbmNlOlxuICogPHByZSBjbGFzcz1cInByZXR0eXByaW50XCI+XG4gKiBgPGRpdiBuZy1pbml0PVwidGVzdDEgPSAoJGluZGV4IHwgdG9TdHJpbmcpXCI+PC9kaXY+YFxuICogPC9wcmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAcHJpb3JpdHkgNDUwXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJpbml0RXhhbXBsZVwiIG5hbWU9XCJuZy1pbml0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8c2NyaXB0PlxuICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgfV0pO1xuICAgPC9zY3JpcHQ+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICA8ZGl2IG5nLXJlcGVhdD1cImlubmVyTGlzdCBpbiBsaXN0XCIgbmctaW5pdD1cIm91dGVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInZhbHVlIGluIGlubmVyTGlzdFwiIG5nLWluaXQ9XCJpbm5lckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnLmV4YW1wbGUtaW5pdCcpKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMCkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDAgXSA9IGE7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMCBdID0gYzsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDEgXSA9IGQ7Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcHJpb3JpdHk6IDQ1MCxcbiAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdMaXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWZhdWx0XG4gKiBkZWxpbWl0ZXIgaXMgYSBjb21tYSBmb2xsb3dlZCBieSBhIHNwYWNlIC0gZXF1aXZhbGVudCB0byBgbmctbGlzdD1cIiwgXCJgLiBZb3UgY2FuIHNwZWNpZnkgYSBjdXN0b21cbiAqIGRlbGltaXRlciBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZ0xpc3RgIGF0dHJpYnV0ZSAtIGZvciBleGFtcGxlLCBgbmctbGlzdD1cIiB8IFwiYC5cbiAqXG4gKiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgYWZmZWN0ZWQgYnkgdGhlIHVzZSBvZiB0aGUgYG5nVHJpbWAgYXR0cmlidXRlLlxuICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYFwiZmFsc2VcImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2hcbiAqICAgbGlzdCBpdGVtIGlzIHJlc3BlY3RlZC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyByZXNwb25zaWJsZSBmb3JcbiAqICAgZGVhbGluZyB3aXRoIHdoaXRlc3BhY2UgYnV0IGFsc28gYWxsb3dzIHlvdSB0byB1c2Ugd2hpdGVzcGFjZSBhcyBhIGRlbGltaXRlciwgc3VjaCBhcyBhXG4gKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci5cbiAqICogT3RoZXJ3aXNlIHdoaXRlc3BhY2UgYXJvdW5kIHRoZSBkZWxpbWl0ZXIgaXMgaWdub3JlZCB3aGVuIHNwbGl0dGluZyAoYWx0aG91Z2ggaXQgaXMgcmVzcGVjdGVkXG4gKiAgIHdoZW4gam9pbmluZyB0aGUgbGlzdCBpdGVtcyBiYWNrIHRvZ2V0aGVyKSBhbmQgd2hpdGVzcGFjZSBhcm91bmQgZWFjaCBsaXN0IGl0ZW0gaXMgc3RyaXBwZWRcbiAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiAjIyMgRXhhbXBsZSB3aXRoIFZhbGlkYXRpb25cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImxpc3RFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pXG4gKiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnbW9ycGhldXMnLCAnbmVvJywgJ3RyaW5pdHknXTtcbiAqICAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgPGxhYmVsPkxpc3Q6IDxpbnB1dCBuYW1lPVwibmFtZXNJbnB1dFwiIG5nLW1vZGVsPVwibmFtZXNcIiBuZy1saXN0IHJlcXVpcmVkPjwvbGFiZWw+XG4gKiAgICAgIDxzcGFuIHJvbGU9XCJhbGVydFwiPlxuICogICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gKiAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICogICAgICA8L3NwYW4+XG4gKiAgICAgIDxicj5cbiAqICAgICAgPHR0Pm5hbWVzID0ge3tuYW1lc319PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvciA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTtcbiAqICAgICB2YXIgbmFtZXMgPSBlbGVtZW50KGJ5LmV4YWN0QmluZGluZygnbmFtZXMnKSk7XG4gKiAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSk7XG4gKiAgICAgdmFyIGVycm9yID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZXJyb3InKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCdbXCJtb3JwaGV1c1wiLFwibmVvXCIsXCJ0cmluaXR5XCJdJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgbGlzdElucHV0LmNsZWFyKCk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJycpO1xuICpcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkubm90LnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIyBFeGFtcGxlIC0gc3BsaXR0aW5nIG9uIG5ld2xpbmVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlLW5ld2xpbmVzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJsaXN0XCIgbmctbGlzdD1cIiYjMTA7XCIgbmctdHJpbT1cImZhbHNlXCI+PC90ZXh0YXJlYT5cbiAqICAgIDxwcmU+e3sgbGlzdCB8IGpzb24gfX08L3ByZT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoXCJzaG91bGQgc3BsaXQgdGhlIHRleHQgYnkgbmV3bGluZXNcIiwgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTtcbiAqICAgICAgIHZhciBvdXRwdXQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QgfCBqc29uJykpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCdhYmNcXG5kZWZcXG5naGknKTtcbiAqICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcXG4gIFwiYWJjXCIsXFxuICBcImRlZlwiLFxcbiAgXCJnaGlcIlxcbl0nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuXG4gKi9cbnZhciBuZ0xpc3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICB2YXIgbmdMaXN0ID0gYXR0ci5uZ0xpc3QgfHwgJywgJztcbiAgICAgIHZhciB0cmltVmFsdWVzID0gYXR0ci5uZ1RyaW0gIT09ICdmYWxzZSc7XG4gICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDtcblxuICAgICAgdmFyIHBhcnNlID0gZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltVmFsdWVzID8gdHJpbSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7XG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmpvaW4obmdMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyogZ2xvYmFsIFZBTElEX0NMQVNTOiB0cnVlLFxuICBJTlZBTElEX0NMQVNTOiB0cnVlLFxuICBQUklTVElORV9DTEFTUzogdHJ1ZSxcbiAgRElSVFlfQ0xBU1M6IHRydWUsXG4gIFVOVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiAgVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiAgUEVORElOR19DTEFTUzogdHJ1ZSxcbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Q6IHRydWUsXG4gIHNldHVwVmFsaWRpdHk6IHRydWUsXG4gIGRlZmF1bHRNb2RlbE9wdGlvbnM6IGZhbHNlXG4qL1xuXG5cbnZhciBWQUxJRF9DTEFTUyA9ICduZy12YWxpZCcsXG4gICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJyxcbiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXG4gICAgRElSVFlfQ0xBU1MgPSAnbmctZGlydHknLFxuICAgIFVOVE9VQ0hFRF9DTEFTUyA9ICduZy11bnRvdWNoZWQnLFxuICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCcsXG4gICAgRU1QVFlfQ0xBU1MgPSAnbmctZW1wdHknLFxuICAgIE5PVF9FTVBUWV9DTEFTUyA9ICduZy1ub3QtZW1wdHknO1xuXG52YXIgbmdNb2RlbE1pbkVyciA9IG1pbkVycignbmdNb2RlbCcpO1xuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyXG4gKlxuICogQHByb3BlcnR5IHsqfSAkdmlld1ZhbHVlIFRoZSBhY3R1YWwgdmFsdWUgZnJvbSB0aGUgY29udHJvbCdzIHZpZXcuIEZvciBgaW5wdXRgIGVsZW1lbnRzLCB0aGlzIGlzIGFcbiAqIFN0cmluZy4gU2VlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWV9IGZvciBpbmZvcm1hdGlvbiBhYm91dCB3aGVuIHRoZSAkdmlld1ZhbHVlXG4gKiBpcyBzZXQuXG4gKlxuICogQHByb3BlcnR5IHsqfSAkbW9kZWxWYWx1ZSBUaGUgdmFsdWUgaW4gdGhlIG1vZGVsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAqICB0aGUgY29udHJvbCB1cGRhdGVzIHRoZSBuZ01vZGVsQ29udHJvbGxlciB3aXRoIGEgbmV3IHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbiAgICBgJHZpZXdWYWx1ZWB9IGZyb20gdGhlIERPTSwgdXN1YWxseSB2aWEgdXNlciBpbnB1dC5cbiAgICBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZSBgJHNldFZpZXdWYWx1ZSgpYH0gZm9yIGEgZGV0YWlsZWQgbGlmZWN5Y2xlIGV4cGxhbmF0aW9uLlxuICAgIE5vdGUgdGhhdCB0aGUgYCRwYXJzZXJzYCBhcmUgbm90IGNhbGxlZCB3aGVuIHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gY2hhbmdlcyBwcm9ncmFtbWF0aWNhbGx5LlxuXG4gIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nXG4gICAgaXRzIHJldHVybiB2YWx1ZSB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZVxuICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IGNvbGxlY3Rpb24uXG5cbiAgUGFyc2VycyBhcmUgdXNlZCB0byBzYW5pdGl6ZSAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbiAgICBgJHZpZXdWYWx1ZWB9LlxuXG4gIFJldHVybmluZyBgdW5kZWZpbmVkYCBmcm9tIGEgcGFyc2VyIG1lYW5zIGEgcGFyc2UgZXJyb3Igb2NjdXJyZWQuIEluIHRoYXQgY2FzZSxcbiAgICBubyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgJHZhbGlkYXRvcnNgfSB3aWxsIHJ1biBhbmQgdGhlIGBuZ01vZGVsYFxuICAgIHdpbGwgYmUgc2V0IHRvIGB1bmRlZmluZWRgIHVubGVzcyB7QGxpbmsgbmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zLmFsbG93SW52YWxpZGB9XG4gICAgaXMgc2V0IHRvIGB0cnVlYC4gVGhlIHBhcnNlIGVycm9yIGlzIHN0b3JlZCBpbiBgbmdNb2RlbC4kZXJyb3IucGFyc2VgLlxuXG4gIFRoaXMgc2ltcGxlIGV4YW1wbGUgc2hvd3MgYSBwYXJzZXIgdGhhdCB3b3VsZCBjb252ZXJ0IHRleHQgaW5wdXQgdmFsdWUgdG8gbG93ZXJjYXNlOlxuICogYGBganNcbiAqIGZ1bmN0aW9uIHBhcnNlKHZhbHVlKSB7XG4gKiAgIGlmICh2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICogICB9XG4gKiB9XG4gKiBuZ01vZGVsQ29udHJvbGxlci4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcbiAqIGBgYFxuXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkZm9ybWF0dGVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICB0aGUgYm91bmQgbmdNb2RlbCBleHByZXNzaW9uIGNoYW5nZXMgcHJvZ3JhbW1hdGljYWxseS4gVGhlIGAkZm9ybWF0dGVyc2AgYXJlIG5vdCBjYWxsZWQgd2hlbiB0aGVcbiAgICB2YWx1ZSBvZiB0aGUgY29udHJvbCBpcyBjaGFuZ2VkIGJ5IHVzZXIgaW50ZXJhY3Rpb24uXG5cbiAgRm9ybWF0dGVycyBhcmUgdXNlZCB0byBmb3JtYXQgLyBjb252ZXJ0IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkbW9kZWxWYWx1ZVxuICAgIGAkbW9kZWxWYWx1ZWB9IGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sLlxuXG4gIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiByZXZlcnNlIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlXG4gICAgbmV4dC4gVGhlIGxhc3QgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgdGhlIGFjdHVhbCBET00gdmFsdWUuXG5cbiAgVGhpcyBzaW1wbGUgZXhhbXBsZSBzaG93cyBhIGZvcm1hdHRlciB0aGF0IHdvdWxkIGNvbnZlcnQgdGhlIG1vZGVsIHZhbHVlIHRvIHVwcGVyY2FzZTpcblxuICogYGBganNcbiAqIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICogICBpZiAodmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAqICAgfVxuICogfVxuICogbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZvcm1hdCk7XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICR2YWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0b3JzIHRoYXQgYXJlIGFwcGxpZWRcbiAqICAgICAgd2hlbmV2ZXIgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBrZXkgdmFsdWUgd2l0aGluIHRoZSBvYmplY3QgcmVmZXJzIHRvIHRoZSBuYW1lIG9mIHRoZVxuICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpc1xuICogICAgICBwcm92aWRlZCB3aXRoIHRoZSBtb2RlbCB2YWx1ZSBhcyBhbiBhcmd1bWVudCBhbmQgbXVzdCByZXR1cm4gYSB0cnVlIG9yIGZhbHNlIHZhbHVlIGRlcGVuZGluZ1xuICogICAgICBvbiB0aGUgcmVzcG9uc2Ugb2YgdGhhdCB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkQ2hhcmFjdGVycyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqICAgcmV0dXJuIC9bMC05XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW2Etel0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1tBLVpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9cXFcrLy50ZXN0KHZhbHVlKTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICRhc3luY1ZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRpb25zIHRoYXQgYXJlIGV4cGVjdGVkIHRvXG4gKiAgICAgIHBlcmZvcm0gYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRpb24gKGUuZy4gYSBIVFRQIHJlcXVlc3QpLiBUaGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gKiAgICAgIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHByb21pc2Ugd2hlbiBpdCBpcyBydW4gZHVyaW5nIHRoZSBtb2RlbCB2YWxpZGF0aW9uIHByb2Nlc3MuIE9uY2UgdGhlIHByb21pc2VcbiAqICAgICAgaXMgZGVsaXZlcmVkIHRoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIHdpbGwgYmUgc2V0IHRvIHRydWUgd2hlbiBmdWxmaWxsZWQgYW5kIGZhbHNlIHdoZW4gcmVqZWN0ZWQuXG4gKiAgICAgIFdoZW4gdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFyZSB0cmlnZ2VyZWQsIGVhY2ggb2YgdGhlIHZhbGlkYXRvcnMgd2lsbCBydW4gaW4gcGFyYWxsZWwgYW5kIHRoZSBtb2RlbFxuICogICAgICB2YWx1ZSB3aWxsIG9ubHkgYmUgdXBkYXRlZCBvbmNlIGFsbCB2YWxpZGF0b3JzIGhhdmUgYmVlbiBmdWxmaWxsZWQuIEFzIGxvbmcgYXMgYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRvclxuICogICAgICBpcyB1bmZ1bGZpbGxlZCwgaXRzIGtleSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVycyBgJHBlbmRpbmdgIHByb3BlcnR5LiBBbHNvLCBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnNcbiAqICAgICAgd2lsbCBvbmx5IHJ1biBvbmNlIGFsbCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGhhdmUgcGFzc2VkLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgaWYgJGh0dHAgaXMgdXNlZCB0aGVuIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBzZXJ2ZXIgcmV0dXJucyBhIHN1Y2Nlc3MgSFRUUCByZXNwb25zZSBjb2RlXG4gKiBpbiBvcmRlciB0byBmdWxmaWxsIHRoZSB2YWxpZGF0aW9uIGFuZCBhIHN0YXR1cyBsZXZlbCBvZiBgNHh4YCBpbiBvcmRlciB0byByZWplY3QgdGhlIHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy51bmlxdWVVc2VybmFtZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqXG4gKiAgIC8vIExvb2t1cCB1c2VyIGJ5IHVzZXJuYW1lXG4gKiAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHZhbHVlKS5cbiAqICAgICAgdGhlbihmdW5jdGlvbiByZXNvbHZlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGV4aXN0cywgdGhpcyBtZWFucyB2YWxpZGF0aW9uIGZhaWxzXG4gKiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnZXhpc3RzJyk7XG4gKiAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdGVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZG9lcyBub3QgZXhpc3QsIHRoZXJlZm9yZSB0aGlzIHZhbGlkYXRpb24gcGFzc2VzXG4gKiAgICAgICAgcmV0dXJuIHRydWU7XG4gKiAgICAgIH0pO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlXG4gKiAgICAgdmlldyB2YWx1ZSBoYXMgY2hhbmdlZC4gSXQgaXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBhbmQgaXRzIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogICAgIFRoaXMgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYWRkaXRpb25hbCAkd2F0Y2hlcyBhZ2FpbnN0IHRoZSBtb2RlbCB2YWx1ZS5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIGZhaWxpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRwZW5kaW5nIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIHBlbmRpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHVudG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIG5vdCBsb3N0IGZvY3VzIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBsb3N0IGZvY3VzLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIHRoZXJlIGlzIG5vIGVycm9yLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkbmFtZSBUaGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGNvbnRyb2wuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBwcm92aWRlcyBBUEkgZm9yIHRoZSB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IGRpcmVjdGl2ZS5cbiAqIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZ1xuICogYW5kIHBhcnNpbmcuIEl0IHB1cnBvc2VmdWxseSBkb2VzIG5vdCBjb250YWluIGFueSBsb2dpYyB3aGljaCBkZWFscyB3aXRoIERPTSByZW5kZXJpbmcgb3JcbiAqIGxpc3RlbmluZyB0byBET00gZXZlbnRzLlxuICogU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBmb3IgZGF0YS1iaW5kaW5nIHRvIGNvbnRyb2wgZWxlbWVudHMuXG4gKiBBbmd1bGFyIHByb3ZpZGVzIHRoaXMgRE9NIGxvZ2ljIGZvciBtb3N0IHtAbGluayBpbnB1dCBgaW5wdXRgfSBlbGVtZW50cy5cbiAqIEF0IHRoZSBlbmQgb2YgdGhpcyBwYWdlIHlvdSBjYW4gZmluZCBhIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyI2N1c3RvbS1jb250cm9sLWV4YW1wbGVcbiAqIGN1c3RvbSBjb250cm9sIGV4YW1wbGV9IHRoYXQgdXNlcyBgbmdNb2RlbENvbnRyb2xsZXJgIHRvIGJpbmQgdG8gYGNvbnRlbnRlZGl0YWJsZWAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBDdXN0b20gQ29udHJvbCBFeGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdNb2RlbENvbnRyb2xsZXJgIHdpdGggYSBjdXN0b20gY29udHJvbCB0byBhY2hpZXZlXG4gKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYClcbiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LlxuICpcbiAqIGBjb250ZW50ZWRpdGFibGVgIGlzIGFuIEhUTUw1IGF0dHJpYnV0ZSwgd2hpY2ggdGVsbHMgdGhlIGJyb3dzZXIgdG8gbGV0IHRoZSBlbGVtZW50XG4gKiBjb250ZW50cyBiZSBlZGl0ZWQgaW4gcGxhY2UgYnkgdGhlIHVzZXIuXG4gKlxuICogV2UgYXJlIHVzaW5nIHRoZSB7QGxpbmsgbmcuc2VydmljZTokc2NlICRzY2V9IHNlcnZpY2UgaGVyZSBhbmQgaW5jbHVkZSB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfVxuICogbW9kdWxlIHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIFwiYmFkXCIgY29udGVudCBsaWtlIGlubGluZSBldmVudCBsaXN0ZW5lciAoZS5nLiBgPHNwYW4gb25jbGljaz1cIi4uLlwiPmApLlxuICogSG93ZXZlciwgYXMgd2UgYXJlIHVzaW5nIGAkc2NlYCB0aGUgbW9kZWwgY2FuIHN0aWxsIGRlY2lkZSB0byBwcm92aWRlIHVuc2FmZSBjb250ZW50IGlmIGl0IG1hcmtzXG4gKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJOZ01vZGVsQ29udHJvbGxlclwiIG1vZHVsZT1cImN1c3RvbUNvbnRyb2xcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICBtaW4taGVpZ2h0OiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAubmctaW52YWxpZCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICAgIH1cblxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFsnbmdTYW5pdGl6ZSddKS5cbiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsIC8vIG9ubHkgYWN0aXZhdGUgb24gZWxlbWVudCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsIC8vIGdldCBhIGhvbGQgb2YgTmdNb2RlbENvbnRyb2xsZXJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICBpZiAoIW5nTW9kZWwpIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuXG4gICAgICAgICAgICAgIC8vIFNwZWNpZnkgaG93IFVJIHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nTW9kZWwuJHZpZXdWYWx1ZSB8fCAnJykpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZ1xuICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyIGtleXVwIGNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMocmVhZCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemVcblxuICAgICAgICAgICAgICAvLyBXcml0ZSBkYXRhIHRvIHRoZSBtb2RlbFxuICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBjbGVhciB0aGUgY29udGVudCBlZGl0YWJsZSB0aGUgYnJvd3NlciBsZWF2ZXMgYSA8YnI+IGJlaGluZFxuICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzLnN0cmlwQnIgJiYgaHRtbCA9PT0gJzxicj4nKSB7XG4gICAgICAgICAgICAgICAgICBodG1sID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShodG1sKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICA8ZGl2IGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAgICAgbmFtZT1cIm15V2lkZ2V0XCIgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiXG4gICAgICAgICAgICBzdHJpcC1icj1cInRydWVcIlxuICAgICAgICAgICAgcmVxdWlyZWQ+Q2hhbmdlIG1lITwvZGl2PlxuICAgICAgICA8c3BhbiBuZy1zaG93PVwibXlGb3JtLm15V2lkZ2V0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICA8aHI+XG4gICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIiBhcmlhLWxhYmVsPVwiRHluYW1pYyB0ZXh0YXJlYVwiPjwvdGV4dGFyZWE+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICBpdCgnc2hvdWxkIGRhdGEtYmluZCBhbmQgYmVjb21lIGludmFsaWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09PSAnc2FmYXJpJyB8fCBicm93c2VyLnBhcmFtcy5icm93c2VyID09PSAnZmlyZWZveCcpIHtcbiAgICAgICAgLy8gU2FmYXJpRHJpdmVyIGNhbid0IGhhbmRsZSBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgLy8gYW5kIEZpcmVmb3ggZHJpdmVyIGNhbid0IGNsZWFyIGNvbnRlbnRlZGl0YWJsZXMgdmVyeSB3ZWxsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KGJ5LmNzcygnW2NvbnRlbnRlZGl0YWJsZV0nKSk7XG4gICAgICB2YXIgY29udGVudCA9ICdDaGFuZ2UgbWUhJztcblxuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoY29udGVudCk7XG5cbiAgICAgIGNvbnRlbnRFZGl0YWJsZS5jbGVhcigpO1xuICAgICAgY29udGVudEVkaXRhYmxlLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoJycpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTtcbiAgICB9KTtcbiAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqL1xuTmdNb2RlbENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRhdHRycycsICckZWxlbWVudCcsICckcGFyc2UnLCAnJGFuaW1hdGUnLCAnJHRpbWVvdXQnLCAnJHEnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBOZ01vZGVsQ29udHJvbGxlcigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSwgJGFuaW1hdGUsICR0aW1lb3V0LCAkcSwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gc3RvcmVzIHRoZSBwYXJzZWQgbW9kZWxWYWx1ZSAvIG1vZGVsIHNldCBmcm9tIHNjb3BlIHJlZ2FyZGxlc3Mgb2YgdmFsaWRpdHkuXG4gIHRoaXMuJHZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kYXN5bmNWYWxpZGF0b3JzID0ge307XG4gIHRoaXMuJHBhcnNlcnMgPSBbXTtcbiAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xuICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107XG4gIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcbiAgdGhpcy4kZXJyb3IgPSB7fTsgLy8ga2VlcCBpbnZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiQkc3VjY2VzcyA9IHt9OyAvLyBrZWVwIHZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkOyAvLyBrZWVwIHBlbmRpbmcga2V5cyBoZXJlXG4gIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHIubmFtZSB8fCAnJywgZmFsc2UpKCRzY29wZSk7XG4gIHRoaXMuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuICB0aGlzLiRvcHRpb25zID0gZGVmYXVsdE1vZGVsT3B0aW9ucztcblxuICB0aGlzLiQkcGFyc2VkTmdNb2RlbCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKTtcbiAgdGhpcy4kJHBhcnNlZE5nTW9kZWxBc3NpZ24gPSB0aGlzLiQkcGFyc2VkTmdNb2RlbC5hc3NpZ247XG4gIHRoaXMuJCRuZ01vZGVsR2V0ID0gdGhpcy4kJHBhcnNlZE5nTW9kZWw7XG4gIHRoaXMuJCRuZ01vZGVsU2V0ID0gdGhpcy4kJHBhcnNlZE5nTW9kZWxBc3NpZ247XG4gIHRoaXMuJCRwZW5kaW5nRGVib3VuY2UgPSBudWxsO1xuICB0aGlzLiQkcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQgPSAwO1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE1ODMzXG4gIC8vIFByZXZlbnQgYCQkc2NvcGVgIGZyb20gYmVpbmcgaXRlcmF0ZWQgb3ZlciBieSBgY29weWAgd2hlbiBOZ01vZGVsQ29udHJvbGxlciBpcyBkZWVwIHdhdGNoZWRcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICckJHNjb3BlJywge3ZhbHVlOiAkc2NvcGV9KTtcbiAgdGhpcy4kJGF0dHIgPSAkYXR0cjtcbiAgdGhpcy4kJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgdGhpcy4kJGFuaW1hdGUgPSAkYW5pbWF0ZTtcbiAgdGhpcy4kJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgdGhpcy4kJHBhcnNlID0gJHBhcnNlO1xuICB0aGlzLiQkcSA9ICRxO1xuICB0aGlzLiQkZXhjZXB0aW9uSGFuZGxlciA9ICRleGNlcHRpb25IYW5kbGVyO1xuXG4gIHNldHVwVmFsaWRpdHkodGhpcyk7XG4gIHNldHVwTW9kZWxXYXRjaGVyKHRoaXMpO1xufVxuXG5OZ01vZGVsQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gICQkaW5pdEdldHRlclNldHRlcnM6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLiRvcHRpb25zLmdldE9wdGlvbignZ2V0dGVyU2V0dGVyJykpIHtcbiAgICAgIHZhciBpbnZva2VNb2RlbEdldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygpJyksXG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIgPSB0aGlzLiQkcGFyc2UodGhpcy4kJGF0dHIubmdNb2RlbCArICcoJCQkcCknKTtcblxuICAgICAgdGhpcy4kJG5nTW9kZWxHZXQgPSBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbCgkc2NvcGUpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIG1vZGVsVmFsdWUgPSBpbnZva2VNb2RlbEdldHRlcigkc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgICAgfTtcbiAgICAgIHRoaXMuJCRuZ01vZGVsU2V0ID0gZnVuY3Rpb24oJHNjb3BlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLiQkcGFyc2VkTmdNb2RlbCgkc2NvcGUpKSkge1xuICAgICAgICAgIGludm9rZU1vZGVsU2V0dGVyKCRzY29wZSwgeyQkJHA6IG5ld1ZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kJHBhcnNlZE5nTW9kZWxBc3NpZ24oJHNjb3BlLCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghdGhpcy4kJHBhcnNlZE5nTW9kZWwuYXNzaWduKSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub25hc3NpZ24nLCAnRXhwcmVzc2lvbiBcXCd7MH1cXCcgaXMgbm9uLWFzc2lnbmFibGUuIEVsZW1lbnQ6IHsxfScsXG4gICAgICAgICAgdGhpcy4kJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcodGhpcy4kJGVsZW1lbnQpKTtcbiAgICB9XG4gIH0sXG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyZW5kZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGxlZCB3aGVuIHRoZSB2aWV3IG5lZWRzIHRvIGJlIHVwZGF0ZWQuIEl0IGlzIGV4cGVjdGVkIHRoYXQgdGhlIHVzZXIgb2YgdGhlIG5nLW1vZGVsXG4gICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogVGhlIGAkcmVuZGVyKClgIG1ldGhvZCBpcyBpbnZva2VkIGluIHRoZSBmb2xsb3dpbmcgc2l0dWF0aW9uczpcbiAgICpcbiAgICogKiBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIGlzIGNhbGxlZC4gIElmIHdlIGFyZSByb2xsaW5nIGJhY2sgdGhlIHZpZXcgdmFsdWUgdG8gdGhlIGxhc3RcbiAgICogICBjb21taXR0ZWQgdmFsdWUgdGhlbiBgJHJlbmRlcigpYCBpcyBjYWxsZWQgdG8gdXBkYXRlIHRoZSBpbnB1dCBjb250cm9sLlxuICAgKiAqIFRoZSB2YWx1ZSByZWZlcmVuY2VkIGJ5IGBuZy1tb2RlbGAgaXMgY2hhbmdlZCBwcm9ncmFtbWF0aWNhbGx5IGFuZCBib3RoIHRoZSBgJG1vZGVsVmFsdWVgIGFuZFxuICAgKiAgIHRoZSBgJHZpZXdWYWx1ZWAgYXJlIGRpZmZlcmVudCBmcm9tIGxhc3QgdGltZS5cbiAgICpcbiAgICogU2luY2UgYG5nLW1vZGVsYCBkb2VzIG5vdCBkbyBhIGRlZXAgd2F0Y2gsIGAkcmVuZGVyKClgIGlzIG9ubHkgaW52b2tlZCBpZiB0aGUgdmFsdWVzIG9mXG4gICAqIGAkbW9kZWxWYWx1ZWAgYW5kIGAkdmlld1ZhbHVlYCBhcmUgYWN0dWFsbHkgZGlmZmVyZW50IGZyb20gdGhlaXIgcHJldmlvdXMgdmFsdWVzLiBJZiBgJG1vZGVsVmFsdWVgXG4gICAqIG9yIGAkdmlld1ZhbHVlYCBhcmUgb2JqZWN0cyAocmF0aGVyIHRoYW4gYSBzdHJpbmcgb3IgbnVtYmVyKSB0aGVuIGAkcmVuZGVyKClgIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQgaWYgeW91IG9ubHkgY2hhbmdlIGEgcHJvcGVydHkgb24gdGhlIG9iamVjdHMuXG4gICAqL1xuICAkcmVuZGVyOiBub29wLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byBkZXRlcm1pbmUgaWYgdGhlIHZhbHVlIG9mIGFuIGlucHV0IGlzIGVtcHR5LlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGAkaXNFbXB0eWAgZnVuY3Rpb24gY2hlY2tzIHdoZXRoZXIgdGhlIHZhbHVlIGlzIGB1bmRlZmluZWRgLCBgJydgLCBgbnVsbGAgb3IgYE5hTmAuXG4gICAqXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmb3IgaW5wdXQgZGlyZWN0aXZlcyB3aG9zZSBjb25jZXB0IG9mIGJlaW5nIGVtcHR5IGlzIGRpZmZlcmVudCBmcm9tIHRoZVxuICAgKiBkZWZhdWx0LiBUaGUgYGNoZWNrYm94SW5wdXRUeXBlYCBkaXJlY3RpdmUgZG9lcyB0aGlzIGJlY2F1c2UgaW4gaXRzIGNhc2UgYSB2YWx1ZSBvZiBgZmFsc2VgXG4gICAqIGltcGxpZXMgZW1wdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBpbnB1dCB0byBjaGVjayBmb3IgZW1wdGluZXNzLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIFwiZW1wdHlcIi5cbiAgICovXG4gICRpc0VtcHR5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gaXNVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWU7XG4gIH0sXG5cbiAgJCR1cGRhdGVFbXB0eUNsYXNzZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgTk9UX0VNUFRZX0NMQVNTKTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBFTVBUWV9DTEFTUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBFTVBUWV9DTEFTUyk7XG4gICAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgTk9UX0VNUFRZX0NMQVNTKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLWRpcnR5YCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAoYG5nLXByaXN0aW5lYCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBwcmlzdGluZSB3aGVuIHRoZSBjb250cm9sXG4gICAqIGhhcyBub3QgYmVlbiBjaGFuZ2VkIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gICRzZXRQcmlzdGluZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldERpcnR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy1wcmlzdGluZWAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgZGlydHlcbiAgICogc3RhdGUgKGBuZy1kaXJ0eWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgZGlydHkgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gICRzZXREaXJ0eTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gZmFsc2U7XG4gICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHRoaXMuJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXRvdWNoZWRgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAoYG5nLXVudG91Y2hlZGAgY2xhc3MpLiBVcG9uIGNvbXBpbGF0aW9uLCBhIG1vZGVsIGlzIHNldCBhcyB1bnRvdWNoZWRcbiAgICogYnkgZGVmYXVsdCwgaG93ZXZlciB0aGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3RvcmUgdGhhdCBzdGF0ZSBpZiB0aGUgbW9kZWwgaGFzXG4gICAqIGFscmVhZHkgYmVlbiB0b3VjaGVkIGJ5IHRoZSB1c2VyLlxuICAgKi9cbiAgJHNldFVudG91Y2hlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gICAgdGhpcy4kJGFuaW1hdGUuc2V0Q2xhc3ModGhpcy4kJGVsZW1lbnQsIFVOVE9VQ0hFRF9DTEFTUywgVE9VQ0hFRF9DTEFTUyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy11bnRvdWNoZWRgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzXG4gICAqIHRvdWNoZWQgc3RhdGUgKGBuZy10b3VjaGVkYCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSB0b3VjaGVkIHdoZW4gdGhlIHVzZXIgaGFzXG4gICAqIGZpcnN0IGZvY3VzZWQgdGhlIGNvbnRyb2wgZWxlbWVudCBhbmQgdGhlbiBzaGlmdGVkIGZvY3VzIGF3YXkgZnJvbSB0aGUgY29udHJvbCAoYmx1ciBldmVudCkuXG4gICAqL1xuICAkc2V0VG91Y2hlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kdG91Y2hlZCA9IHRydWU7XG4gICAgdGhpcy4kdW50b3VjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kJGFuaW1hdGUuc2V0Q2xhc3ModGhpcy4kJGVsZW1lbnQsIFRPVUNIRURfQ0xBU1MsIFVOVE9VQ0hFRF9DTEFTUyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbCBhbiB1cGRhdGUgYW5kIHJlc2V0IHRoZSBpbnB1dCBlbGVtZW50J3MgdmFsdWUgdG8gcHJldmVudCBhbiB1cGRhdGUgdG8gdGhlIGAkbW9kZWxWYWx1ZWAsXG4gICAqIHdoaWNoIG1heSBiZSBjYXVzZWQgYnkgYSBwZW5kaW5nIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBzb21lXG4gICAqIGZ1dHVyZSBldmVudC5cbiAgICpcbiAgICogSWYgeW91IGhhdmUgYW4gaW5wdXQgdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBzZXQgdXAgZGVib3VuY2VkIHVwZGF0ZXMgb3IgdXBkYXRlcyB0aGF0XG4gICAqIGRlcGVuZCBvbiBzcGVjaWFsIGV2ZW50cyBzdWNoIGFzIGBibHVyYCwgdGhlcmUgY2FuIGJlIGEgcGVyaW9kIHdoZW4gdGhlIGAkdmlld1ZhbHVlYCBpcyBvdXQgb2ZcbiAgICogc3luYyB3aXRoIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHVzZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIHRvIG1hbnVhbGx5IGNhbmNlbCB0aGUgZGVib3VuY2VkIC8gZnV0dXJlIHVwZGF0ZVxuICAgKiBhbmQgcmVzZXQgdGhlIGlucHV0IHRvIHRoZSBsYXN0IGNvbW1pdHRlZCB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRoYXQgeW91IHJ1biBpbnRvIGRpZmZpY3VsdGllcyBpZiB5b3UgdHJ5IHRvIHVwZGF0ZSB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWBcbiAgICogcHJvZ3JhbW1hdGljYWxseSBiZWZvcmUgdGhlc2UgZGVib3VuY2VkL2Z1dHVyZSBldmVudHMgaGF2ZSByZXNvbHZlZC9vY2N1cnJlZCwgYmVjYXVzZSBBbmd1bGFyJ3NcbiAgICogZGlydHkgY2hlY2tpbmcgbWVjaGFuaXNtIGlzIG5vdCBhYmxlIHRvIHRlbGwgd2hldGhlciB0aGUgbW9kZWwgaGFzIGFjdHVhbGx5IGNoYW5nZWQgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2luZyB0aGUgbW9kZWwgb2YgYW5cbiAgICogaW5wdXQgd2hpY2ggbWF5IGhhdmUgc3VjaCBldmVudHMgcGVuZGluZy4gVGhpcyBpcyBpbXBvcnRhbnQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlXG4gICAqIGlucHV0IGZpZWxkIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBuZXcgbW9kZWwgdmFsdWUgYW5kIGFueSBwZW5kaW5nIG9wZXJhdGlvbnMgYXJlIGNhbmNlbGxlZC5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nLW1vZGVsLWNhbmNlbC11cGRhdGVcIiBtb2R1bGU9XCJjYW5jZWwtdXBkYXRlLWV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICBhbmd1bGFyLm1vZHVsZSgnY2FuY2VsLXVwZGF0ZS1leGFtcGxlJywgW10pXG4gICAqXG4gICAqICAgICAuY29udHJvbGxlcignQ2FuY2VsVXBkYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5tb2RlbCA9IHt2YWx1ZTE6ICcnLCB2YWx1ZTI6ICcnfTtcbiAgICpcbiAgICogICAgICAgJHNjb3BlLnNldEVtcHR5ID0gZnVuY3Rpb24oZSwgdmFsdWUsIHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICogICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICogICAgICAgICAgIGlmIChyb2xsYmFjaykge1xuICAgKiAgICAgICAgICAgICAkc2NvcGUubXlGb3JtW3ZhbHVlXS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICogICAgICAgICAgIH1cbiAgICogICAgICAgICAgICRzY29wZS5tb2RlbFt2YWx1ZV0gPSAnJztcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH07XG4gICAqICAgICB9XSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYW5jZWxVcGRhdGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxwPkJvdGggb2YgdGhlc2UgaW5wdXRzIGFyZSBvbmx5IHVwZGF0ZWQgaWYgdGhleSBhcmUgYmx1cnJlZC4gSGl0dGluZyBlc2NhcGUgc2hvdWxkXG4gICAqICAgICAgIGVtcHR5IHRoZW0uIEZvbGxvdyB0aGVzZSBzdGVwcyBhbmQgb2JzZXJ2ZSB0aGUgZGlmZmVyZW5jZTo8L3A+XG4gICAqICAgICAgIDxvbD5cbiAgICogICAgICAgICA8bGk+VHlwZSBzb21ldGhpbmcgaW4gdGhlIGlucHV0LiBZb3Ugd2lsbCBzZWUgdGhhdCB0aGUgbW9kZWwgaXMgbm90IHlldCB1cGRhdGVkPC9saT5cbiAgICogICAgICAgICA8bGk+UHJlc3MgdGhlIEVzY2FwZSBrZXkuXG4gICAqICAgICAgICAgICA8b2w+XG4gICAqICAgICAgICAgICAgIDxsaT4gSW4gdGhlIGZpcnN0IGV4YW1wbGUsIG5vdGhpbmcgaGFwcGVucywgYmVjYXVzZSB0aGUgbW9kZWwgaXMgYWxyZWFkeSAnJywgYW5kIG5vXG4gICAqICAgICAgICAgICAgIHVwZGF0ZSBpcyBkZXRlY3RlZC4gSWYgeW91IGJsdXIgdGhlIGlucHV0LCB0aGUgbW9kZWwgd2lsbCBiZSBzZXQgdG8gdGhlIGN1cnJlbnQgdmlldy5cbiAgICogICAgICAgICAgICAgPC9saT5cbiAgICogICAgICAgICAgICAgPGxpPiBJbiB0aGUgc2Vjb25kIGV4YW1wbGUsIHRoZSBwZW5kaW5nIHVwZGF0ZSBpcyBjYW5jZWxsZWQsIGFuZCB0aGUgaW5wdXQgaXMgc2V0IGJhY2tcbiAgICogICAgICAgICAgICAgdG8gdGhlIGxhc3QgY29tbWl0dGVkIHZpZXcgdmFsdWUgKCcnKS4gQmx1cnJpbmcgdGhlIGlucHV0IGRvZXMgbm90aGluZy5cbiAgICogICAgICAgICAgICAgPC9saT5cbiAgICogICAgICAgICAgIDwvb2w+XG4gICAqICAgICAgICAgPC9saT5cbiAgICogICAgICAgPC9vbD5cbiAgICpcbiAgICogICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiPlxuICAgKiAgICAgICAgIDxkaXY+XG4gICAqICAgICAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb24xXCI+V2l0aG91dCAkcm9sbGJhY2tWaWV3VmFsdWUoKTo8L3A+XG4gICAqICAgICAgICAgICA8aW5wdXQgbmFtZT1cInZhbHVlMVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uMVwiIG5nLW1vZGVsPVwibW9kZWwudmFsdWUxXCJcbiAgICogICAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwic2V0RW1wdHkoJGV2ZW50LCAndmFsdWUxJylcIj5cbiAgICogICAgICAgICAgIHZhbHVlMTogXCJ7eyBtb2RlbC52YWx1ZTEgfX1cIlxuICAgKiAgICAgICAgIDwvZGl2PlxuICAgKlxuICAgKiAgICAgICAgIDxkaXY+XG4gICAqICAgICAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb24yXCI+V2l0aCAkcm9sbGJhY2tWaWV3VmFsdWUoKTo8L3A+XG4gICAqICAgICAgICAgICA8aW5wdXQgbmFtZT1cInZhbHVlMlwiIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uMlwiIG5nLW1vZGVsPVwibW9kZWwudmFsdWUyXCJcbiAgICogICAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwic2V0RW1wdHkoJGV2ZW50LCAndmFsdWUyJywgdHJ1ZSlcIj5cbiAgICogICAgICAgICAgIHZhbHVlMjogXCJ7eyBtb2RlbC52YWx1ZTIgfX1cIlxuICAgKiAgICAgICAgIDwvZGl2PlxuICAgKiAgICAgICA8L2Zvcm0+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgIGRpdiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaXY6bnRoLWNoaWxkKDEpIHtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgIDwvZmlsZT5cbiAgICogPC9leGFtcGxlPlxuICAgKi9cbiAgJHJvbGxiYWNrVmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgdGhpcy4kdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgdGhpcy4kcmVuZGVyKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJ1bnMgZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCB2YWxpZGF0b3JzIChmaXJzdCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFuZCB0aGVuXG4gICAqIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gaW52YWxpZCwgdGhlIG1vZGVsIHdpbGwgYmUgc2V0IHRvIGB1bmRlZmluZWRgLFxuICAgKiB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfSBpcyBgdHJ1ZWAuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIHZhbGlkLCBpdCB3aWxsIHNldCB0aGUgbW9kZWwgdG8gdGhlIGxhc3QgYXZhaWxhYmxlIHZhbGlkXG4gICAqIGAkbW9kZWxWYWx1ZWAsIGkuZS4gZWl0aGVyIHRoZSBsYXN0IHBhcnNlZCB2YWx1ZSBvciB0aGUgbGFzdCB2YWx1ZSBzZXQgZnJvbSB0aGUgc2NvcGUuXG4gICAqL1xuICAkdmFsaWRhdGU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIGlnbm9yZSAkdmFsaWRhdGUgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyTmFOKHRoaXMuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdWYWx1ZSA9IHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIC8vIE5vdGU6IHdlIHVzZSB0aGUgJCRyYXdNb2RlbFZhbHVlIGFzICRtb2RlbFZhbHVlIG1pZ2h0IGhhdmUgYmVlblxuICAgIC8vIHNldCB0byB1bmRlZmluZWQgZHVyaW5nIGEgdmlldyAtPiBtb2RlbCB1cGRhdGUgdGhhdCBmb3VuZCB2YWxpZGF0aW9uXG4gICAgLy8gZXJyb3JzLiBXZSBjYW4ndCBwYXJzZSB0aGUgdmlldyBoZXJlLCBzaW5jZSB0aGF0IGNvdWxkIGNoYW5nZVxuICAgIC8vIHRoZSBtb2RlbCBhbHRob3VnaCBuZWl0aGVyIHZpZXdWYWx1ZSBub3IgdGhlIG1vZGVsIG9uIHRoZSBzY29wZSBjaGFuZ2VkXG4gICAgdmFyIG1vZGVsVmFsdWUgPSB0aGlzLiQkcmF3TW9kZWxWYWx1ZTtcblxuICAgIHZhciBwcmV2VmFsaWQgPSB0aGlzLiR2YWxpZDtcbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSB0aGlzLiRtb2RlbFZhbHVlO1xuXG4gICAgdmFyIGFsbG93SW52YWxpZCA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKTtcblxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICAvLyBJZiB0aGVyZSB3YXMgbm8gY2hhbmdlIGluIHZhbGlkaXR5LCBkb24ndCB1cGRhdGUgdGhlIG1vZGVsXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGNoYW5naW5nIGFuIGludmFsaWQgbW9kZWxWYWx1ZSB0byB1bmRlZmluZWRcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkICYmIHByZXZWYWxpZCAhPT0gYWxsVmFsaWQpIHtcbiAgICAgICAgLy8gTm90ZTogRG9uJ3QgY2hlY2sgdGhpcy4kdmFsaWQgaGVyZSwgYXMgd2UgY291bGQgaGF2ZVxuICAgICAgICAvLyBleHRlcm5hbCB2YWxpZGF0b3JzIChlLmcuIGNhbGN1bGF0ZWQgb24gdGhlIHNlcnZlciksXG4gICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZWlyIHZhbGlkaXR5LlxuICAgICAgICB0aGF0LiRtb2RlbFZhbHVlID0gYWxsVmFsaWQgPyBtb2RlbFZhbHVlIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGF0LiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICAgIHRoYXQuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgJCRydW5WYWxpZGF0b3JzOiBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykge1xuICAgIHRoaXMuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkKys7XG4gICAgdmFyIGxvY2FsVmFsaWRhdGlvblJ1bklkID0gdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQ7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgLy8gY2hlY2sgcGFyc2VyIGVycm9yXG4gICAgaWYgKCFwcm9jZXNzUGFyc2VFcnJvcnMoKSkge1xuICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb2Nlc3NTeW5jVmFsaWRhdG9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXJzZUVycm9ycygpIHtcbiAgICAgIHZhciBlcnJvcktleSA9IHRoYXQuJCRwYXJzZXJOYW1lIHx8ICdwYXJzZSc7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodGhhdC4kJHBhcnNlclZhbGlkKSkge1xuICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoYXQuJCRwYXJzZXJWYWxpZCkge1xuICAgICAgICAgIGZvckVhY2godGhhdC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yRWFjaCh0aGF0LiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgcGFyc2UgZXJyb3IgbGFzdCwgdG8gcHJldmVudCB1bnNldHRpbmcgaXQsIHNob3VsZCBhICR2YWxpZGF0b3JzIGtleSA9PSBwYXJzZXJOYW1lXG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCB0aGF0LiQkcGFyc2VyVmFsaWQpO1xuICAgICAgICByZXR1cm4gdGhhdC4kJHBhcnNlclZhbGlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaCh0aGF0LiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IEJvb2xlYW4odmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkpO1xuICAgICAgICBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gc3luY1ZhbGlkYXRvcnNWYWxpZCAmJiByZXN1bHQ7XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIGlmICghc3luY1ZhbGlkYXRvcnNWYWxpZCkge1xuICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciB2YWxpZGF0b3JQcm9taXNlcyA9IFtdO1xuICAgICAgdmFyIGFsbFZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2godGhhdC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1Byb21pc2VMaWtlKHByb21pc2UpKSB7XG4gICAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignbm9wcm9taXNlJyxcbiAgICAgICAgICAgICdFeHBlY3RlZCBhc3luY2hyb25vdXMgdmFsaWRhdG9yIHRvIHJldHVybiBhIHByb21pc2UgYnV0IGdvdCBcXCd7MH1cXCcgaW5zdGVhZC4nLCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB1bmRlZmluZWQpO1xuICAgICAgICB2YWxpZGF0b3JQcm9taXNlcy5wdXNoKHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB0cnVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYWxsVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBmYWxzZSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCF2YWxpZGF0b3JQcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgdmFsaWRhdGlvbkRvbmUodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGF0LiQkcS5hbGwodmFsaWRhdG9yUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpO1xuICAgICAgICB9LCBub29wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRWYWxpZGl0eShuYW1lLCBpc1ZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IHRoYXQuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgIHRoYXQuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IHRoYXQuJCRjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG5cbiAgICAgICAgZG9uZUNhbGxiYWNrKGFsbFZhbGlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICAkY29tbWl0Vmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1ZhbHVlID0gdGhpcy4kdmlld1ZhbHVlO1xuXG4gICAgdGhpcy4kJHRpbWVvdXQuY2FuY2VsKHRoaXMuJCRwZW5kaW5nRGVib3VuY2UpO1xuXG4gICAgLy8gSWYgdGhlIHZpZXcgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkIHRoZW4gd2Ugc2hvdWxkIGp1c3QgZXhpdCwgZXhjZXB0IGluIHRoZSBjYXNlIHdoZXJlIHRoZXJlIGlzXG4gICAgLy8gYSBuYXRpdmUgdmFsaWRhdG9yIG9uIHRoZSBlbGVtZW50LiBJbiB0aGlzIGNhc2UgdGhlIHZhbGlkYXRpb24gc3RhdGUgbWF5IGhhdmUgY2hhbmdlZCBldmVuIHRob3VnaFxuICAgIC8vIHRoZSB2aWV3VmFsdWUgaGFzIHN0YXllZCBlbXB0eS5cbiAgICBpZiAodGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPT09IHZpZXdWYWx1ZSAmJiAodmlld1ZhbHVlICE9PSAnJyB8fCAhdGhpcy4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuJCR1cGRhdGVFbXB0eUNsYXNzZXModmlld1ZhbHVlKTtcbiAgICB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcblxuICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgIGlmICh0aGlzLiRwcmlzdGluZSkge1xuICAgICAgdGhpcy4kc2V0RGlydHkoKTtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfSxcblxuICAkJHBhcnNlQW5kVmFsaWRhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICB0aGlzLiQkcGFyc2VyVmFsaWQgPSBpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSA/IHVuZGVmaW5lZCA6IHRydWU7XG5cbiAgICBpZiAodGhpcy4kJHBhcnNlclZhbGlkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuJHBhcnNlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbW9kZWxWYWx1ZSA9IHRoaXMuJHBhcnNlcnNbaV0obW9kZWxWYWx1ZSk7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuJCRwYXJzZXJWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bWJlck5hTih0aGlzLiRtb2RlbFZhbHVlKSkge1xuICAgICAgLy8gdGhpcy4kbW9kZWxWYWx1ZSBoYXMgbm90IGJlZW4gdG91Y2hlZCB5ZXQuLi5cbiAgICAgIHRoaXMuJG1vZGVsVmFsdWUgPSB0aGlzLiQkbmdNb2RlbEdldCh0aGlzLiQkc2NvcGUpO1xuICAgIH1cbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSB0aGlzLiRtb2RlbFZhbHVlO1xuICAgIHZhciBhbGxvd0ludmFsaWQgPSB0aGlzLiRvcHRpb25zLmdldE9wdGlvbignYWxsb3dJbnZhbGlkJyk7XG4gICAgdGhpcy4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuXG4gICAgaWYgKGFsbG93SW52YWxpZCkge1xuICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgIH1cblxuICAgIC8vIFBhc3MgdGhlICQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSBoZXJlLCBiZWNhdXNlIHRoZSBjYWNoZWQgdmlld1ZhbHVlIG1pZ2h0IGJlIG91dCBvZiBkYXRlLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBlLmcuICRzZXRWaWV3VmFsdWUgaXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgcGFyc2VyXG4gICAgdGhpcy4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICBpZiAoIWFsbG93SW52YWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayB0aGlzLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIHRoYXQuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHtcbiAgICAgIGlmICh0aGF0LiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICB0aGF0LiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgJCR3cml0ZU1vZGVsVG9TY29wZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJG5nTW9kZWxTZXQodGhpcy4kJHNjb3BlLCB0aGlzLiRtb2RlbFZhbHVlKTtcbiAgICBmb3JFYWNoKHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICAgIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYSBjb250cm9sIHdhbnRzIHRvIGNoYW5nZSB0aGUgdmlldyB2YWx1ZTsgdHlwaWNhbGx5LFxuICAgKiB0aGlzIGlzIGRvbmUgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICAgKiBkaXJlY3RpdmUgY2FsbHMgaXQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGNoYW5nZXMgYW5kIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAgICogY2FsbHMgaXQgd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIFdoZW4gYCRzZXRWaWV3VmFsdWVgIGlzIGNhbGxlZCwgdGhlIG5ldyBgdmFsdWVgIHdpbGwgYmUgc3RhZ2VkIGZvciBjb21taXR0aW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2BcbiAgICogYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLiBJZiB0aGVyZSBhcmUgbm8gc3BlY2lhbCB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IHNwZWNpZmllZCB0aGVuIHRoZSBzdGFnZWRcbiAgICogdmFsdWUgaXMgc2VudCBkaXJlY3RseSBmb3IgcHJvY2Vzc2luZyB0aHJvdWdoIHRoZSBgJHBhcnNlcnNgIHBpcGVsaW5lLiBBZnRlciB0aGlzLCB0aGUgYCR2YWxpZGF0b3JzYCBhbmRcbiAgICogYCRhc3luY1ZhbGlkYXRvcnNgIGFyZSBjYWxsZWQgYW5kIHRoZSB2YWx1ZSBpcyBhcHBsaWVkIHRvIGAkbW9kZWxWYWx1ZWAuXG4gICAqIEZpbmFsbHksIHRoZSB2YWx1ZSBpcyBzZXQgdG8gdGhlICoqZXhwcmVzc2lvbioqIHNwZWNpZmllZCBpbiB0aGUgYG5nLW1vZGVsYCBhdHRyaWJ1dGUgYW5kXG4gICAqIGFsbCB0aGUgcmVnaXN0ZXJlZCBjaGFuZ2UgbGlzdGVuZXJzLCBpbiB0aGUgYCR2aWV3Q2hhbmdlTGlzdGVuZXJzYCBsaXN0IGFyZSBjYWxsZWQuXG4gICAqXG4gICAqIEluIGNhc2UgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYHVwZGF0ZU9uYFxuICAgKiBhbmQgdGhlIGBkZWZhdWx0YCB0cmlnZ2VyIGlzIG5vdCBsaXN0ZWQsIGFsbCB0aG9zZSBhY3Rpb25zIHdpbGwgcmVtYWluIHBlbmRpbmcgdW50aWwgb25lIG9mIHRoZVxuICAgKiBgdXBkYXRlT25gIGV2ZW50cyBpcyB0cmlnZ2VyZWQgb24gdGhlIERPTSBlbGVtZW50LlxuICAgKiBBbGwgdGhlc2UgYWN0aW9ucyB3aWxsIGJlIGRlYm91bmNlZCBpZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc31cbiAgICogZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBhIGN1c3RvbSBkZWJvdW5jZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGV2ZW50LlxuICAgKiBOb3RlIHRoYXQgYSBgJGRpZ2VzdGAgaXMgb25seSB0cmlnZ2VyZWQgb25jZSB0aGUgYHVwZGF0ZU9uYCBldmVudHMgYXJlIGZpcmVkLCBvciBpZiBgZGVib3VuY2VgXG4gICAqIGlzIHNwZWNpZmllZCwgb25jZSB0aGUgdGltZXIgcnVucyBvdXQuXG4gICAqXG4gICAqIFdoZW4gdXNlZCB3aXRoIHN0YW5kYXJkIGlucHV0cywgdGhlIHZpZXcgdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBzdHJpbmcgKHdoaWNoIGlzIGluIHNvbWUgY2FzZXNcbiAgICogcGFyc2VkIGludG8gYW5vdGhlciB0eXBlLCBzdWNoIGFzIGEgYERhdGVgIG9iamVjdCBmb3IgYGlucHV0W2RhdGVdYC4pXG4gICAqIEhvd2V2ZXIsIGN1c3RvbSBjb250cm9scyBtaWdodCBhbHNvIHBhc3Mgb2JqZWN0cyB0byB0aGlzIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCB3ZSBzaG91bGQgbWFrZVxuICAgKiBhIGNvcHkgb2YgdGhlIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuIFRoaXMgaXMgYmVjYXVzZSBgbmdNb2RlbGAgZG9lcyBub3RcbiAgICogcGVyZm9ybSBhIGRlZXAgd2F0Y2ggb2Ygb2JqZWN0cywgaXQgb25seSBsb29rcyBmb3IgYSBjaGFuZ2Ugb2YgaWRlbnRpdHkuIElmIHlvdSBvbmx5IGNoYW5nZVxuICAgKiB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aGVuIG5nTW9kZWwgd2lsbCBub3QgcmVhbGl6ZSB0aGF0IHRoZSBvYmplY3QgaGFzIGNoYW5nZWQgYW5kXG4gICAqIHdpbGwgbm90IGludm9rZSB0aGUgYCRwYXJzZXJzYCBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIEZvciB0aGlzIHJlYXNvbiwgeW91IHNob3VsZFxuICAgKiBub3QgY2hhbmdlIHByb3BlcnRpZXMgb2YgdGhlIGNvcHkgb25jZSBpdCBoYXMgYmVlbiBwYXNzZWQgdG8gYCRzZXRWaWV3VmFsdWVgLlxuICAgKiBPdGhlcndpc2UgeW91IG1heSBjYXVzZSB0aGUgbW9kZWwgdmFsdWUgb24gdGhlIHNjb3BlIHRvIGNoYW5nZSBpbmNvcnJlY3RseS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogSW4gYW55IGNhc2UsIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhlIG1ldGhvZCBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICogb2YgdGhlIGNvbnRyb2wuIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIGNhbGxpbmcgYCRzZXRWaWV3VmFsdWVgIGZvciBhbiBpbnB1dCBlbGVtZW50LFxuICAgKiB5b3Ugc2hvdWxkIHBhc3MgdGhlIGlucHV0IERPTSB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgY29udHJvbCBhbmQgdGhlIHNjb3BlIG1vZGVsIGJlY29tZVxuICAgKiBvdXQgb2Ygc3luYy4gSXQncyBhbHNvIGltcG9ydGFudCB0byBub3RlIHRoYXQgYCRzZXRWaWV3VmFsdWVgIGRvZXMgbm90IGNhbGwgYCRyZW5kZXJgIG9yIGNoYW5nZVxuICAgKiB0aGUgY29udHJvbCdzIERPTSB2YWx1ZSBpbiBhbnkgd2F5LiBJZiB3ZSB3YW50IHRvIGNoYW5nZSB0aGUgY29udHJvbCdzIERPTSB2YWx1ZVxuICAgKiBwcm9ncmFtbWF0aWNhbGx5LCB3ZSBzaG91bGQgdXBkYXRlIHRoZSBgbmdNb2RlbGAgc2NvcGUgZXhwcmVzc2lvbi4gSXRzIG5ldyB2YWx1ZSB3aWxsIGJlXG4gICAqIHBpY2tlZCB1cCBieSB0aGUgbW9kZWwgY29udHJvbGxlciwgd2hpY2ggd2lsbCBydW4gaXQgdGhyb3VnaCB0aGUgYCRmb3JtYXR0ZXJzYCwgYCRyZW5kZXJgIGl0XG4gICAqIHRvIHVwZGF0ZSB0aGUgRE9NLCBhbmQgZmluYWxseSBjYWxsIGAkdmFsaWRhdGVgIG9uIGl0LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSBmcm9tIHRoZSB2aWV3LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJpZ2dlciBFdmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdXBkYXRlLlxuICAgKi9cbiAgJHNldFZpZXdWYWx1ZTogZnVuY3Rpb24odmFsdWUsIHRyaWdnZXIpIHtcbiAgICB0aGlzLiR2aWV3VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ3VwZGF0ZU9uRGVmYXVsdCcpKSB7XG4gICAgICB0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQodHJpZ2dlcik7XG4gICAgfVxuICB9LFxuXG4gICQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQ6IGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICB2YXIgZGVib3VuY2VEZWxheSA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdkZWJvdW5jZScpO1xuXG4gICAgaWYgKGlzTnVtYmVyKGRlYm91bmNlRGVsYXlbdHJpZ2dlcl0pKSB7XG4gICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VEZWxheVt0cmlnZ2VyXTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGRlYm91bmNlRGVsYXlbJ2RlZmF1bHQnXSkpIHtcbiAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZURlbGF5WydkZWZhdWx0J107XG4gICAgfVxuXG4gICAgdGhpcy4kJHRpbWVvdXQuY2FuY2VsKHRoaXMuJCRwZW5kaW5nRGVib3VuY2UpO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICBpZiAoZGVib3VuY2VEZWxheSA+IDApIHsgLy8gdGhpcyBmYWlscyBpZiBkZWJvdW5jZURlbGF5IGlzIGFuIG9iamVjdFxuICAgICAgdGhpcy4kJHBlbmRpbmdEZWJvdW5jZSA9IHRoaXMuJCR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGF0LiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0sIGRlYm91bmNlRGVsYXkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kJHNjb3BlLiRyb290LiQkcGhhc2UpIHtcbiAgICAgIHRoaXMuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiQkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGF0LiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKlxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRvdmVycmlkZU1vZGVsT3B0aW9uc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT3ZlcnJpZGUgdGhlIGN1cnJlbnQgbW9kZWwgb3B0aW9ucyBzZXR0aW5ncyBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKlxuICAgKiBUaGUgcHJldmlvdXMgYE1vZGVsT3B0aW9uc2AgdmFsdWUgd2lsbCBub3QgYmUgbW9kaWZpZWQuIEluc3RlYWQsIGFcbiAgICogbmV3IGBNb2RlbE9wdGlvbnNgIG9iamVjdCB3aWxsIGluaGVyaXQgZnJvbSB0aGUgcHJldmlvdXMgb25lIG92ZXJyaWRpbmdcbiAgICogb3IgaW5oZXJpdGluZyBzZXR0aW5ncyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBnaXZlbiBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIFNlZSB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IGZvciBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IG9wdGlvbnMgY2FuIGJlIHNwZWNpZmllZFxuICAgKiBhbmQgaG93IG1vZGVsIG9wdGlvbiBpbmhlcml0YW5jZSB3b3Jrcy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYSBoYXNoIG9mIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBwcmV2aW91cyBvcHRpb25zXG4gICAqXG4gICAqL1xuICAkb3ZlcnJpZGVNb2RlbE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLiRvcHRpb25zID0gdGhpcy4kb3B0aW9ucy5jcmVhdGVDaGlsZChvcHRpb25zKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0dXBNb2RlbFdhdGNoZXIoY3RybCkge1xuICAvLyBtb2RlbCAtPiB2YWx1ZVxuICAvLyBOb3RlOiB3ZSBjYW5ub3QgdXNlIGEgbm9ybWFsIHNjb3BlLiR3YXRjaCBhcyB3ZSB3YW50IHRvIGRldGVjdCB0aGUgZm9sbG93aW5nOlxuICAvLyAxLiBzY29wZSB2YWx1ZSBpcyAnYSdcbiAgLy8gMi4gdXNlciBlbnRlcnMgJ2InXG4gIC8vIDMuIG5nLWNoYW5nZSBraWNrcyBpbiBhbmQgcmV2ZXJ0cyBzY29wZSB2YWx1ZSB0byAnYSdcbiAgLy8gICAgLT4gc2NvcGUgdmFsdWUgZGlkIG5vdCBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgZGlnZXN0IGFzXG4gIC8vICAgICAgIG5nLWNoYW5nZSBleGVjdXRlcyBpbiBhcHBseSBwaGFzZVxuICAvLyA0LiB2aWV3IHNob3VsZCBiZSBjaGFuZ2VkIGJhY2sgdG8gJ2EnXG4gIGN0cmwuJCRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKHNjb3BlKSB7XG4gICAgdmFyIG1vZGVsVmFsdWUgPSBjdHJsLiQkbmdNb2RlbEdldChzY29wZSk7XG5cbiAgICAvLyBpZiBzY29wZSBtb2RlbCB2YWx1ZSBhbmQgbmdNb2RlbCB2YWx1ZSBhcmUgb3V0IG9mIHN5bmNcbiAgICAvLyBUT0RPKHBlcmYpOiB3aHkgbm90IG1vdmUgdGhpcyB0byB0aGUgYWN0aW9uIGZuP1xuICAgIGlmIChtb2RlbFZhbHVlICE9PSBjdHJsLiRtb2RlbFZhbHVlICYmXG4gICAgICAgLy8gY2hlY2tzIGZvciBOYU4gaXMgbmVlZGVkIHRvIGFsbG93IHNldHRpbmcgdGhlIG1vZGVsIHRvIE5hTiB3aGVuIHRoZXJlJ3MgYW4gYXN5bmNWYWxpZGF0b3JcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgIChjdHJsLiRtb2RlbFZhbHVlID09PSBjdHJsLiRtb2RlbFZhbHVlIHx8IG1vZGVsVmFsdWUgPT09IG1vZGVsVmFsdWUpXG4gICAgKSB7XG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgY3RybC4kJHBhcnNlclZhbGlkID0gdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgZm9ybWF0dGVycyA9IGN0cmwuJGZvcm1hdHRlcnMsXG4gICAgICAgICAgaWR4ID0gZm9ybWF0dGVycy5sZW5ndGg7XG5cbiAgICAgIHZhciB2aWV3VmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgd2hpbGUgKGlkeC0tKSB7XG4gICAgICAgIHZpZXdWYWx1ZSA9IGZvcm1hdHRlcnNbaWR4XSh2aWV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmlld1ZhbHVlKSB7XG4gICAgICAgIGN0cmwuJCR1cGRhdGVFbXB0eUNsYXNzZXModmlld1ZhbHVlKTtcbiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICAgIGN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRoYXQgbW9kZWwgYW5kIHZpZXcgdmFsdWUgaGF2ZSBiZWVuIHVwZGF0ZWQgZHVyaW5nIHJlbmRlclxuICAgICAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhjdHJsLiRtb2RlbFZhbHVlLCBjdHJsLiR2aWV3VmFsdWUsIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ2hhbmdlIHRoZSB2YWxpZGl0eSBzdGF0ZSwgYW5kIG5vdGlmeSB0aGUgZm9ybS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHdpdGhpbiAkcGFyc2Vycy8kZm9ybWF0dGVycyBvciBhIGN1c3RvbSB2YWxpZGF0aW9uIGltcGxlbWVudGF0aW9uLlxuICogSG93ZXZlciwgaW4gbW9zdCBjYXNlcyBpdCBzaG91bGQgYmUgc3VmZmljaWVudCB0byB1c2UgdGhlIGBuZ01vZGVsLiR2YWxpZGF0b3JzYCBhbmRcbiAqIGBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnNgIGNvbGxlY3Rpb25zIHdoaWNoIHdpbGwgY2FsbCBgJHNldFZhbGlkaXR5YCBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxpZGF0aW9uRXJyb3JLZXkgTmFtZSBvZiB0aGUgdmFsaWRhdG9yLiBUaGUgYHZhbGlkYXRpb25FcnJvcktleWAgd2lsbCBiZSBhc3NpZ25lZFxuICogICAgICAgIHRvIGVpdGhlciBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV1gIG9yIGAkcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldYFxuICogICAgICAgIChmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgKSwgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cbiAqICAgICAgICBUaGUgYHZhbGlkYXRpb25FcnJvcktleWAgc2hvdWxkIGJlIGluIGNhbWVsQ2FzZSBhbmQgd2lsbCBnZXQgY29udmVydGVkIGludG8gZGFzaC1jYXNlXG4gKiAgICAgICAgZm9yIGNsYXNzIG5hbWUuIEV4YW1wbGU6IGBteUVycm9yYCB3aWxsIHJlc3VsdCBpbiBgbmctdmFsaWQtbXktZXJyb3JgIGFuZCBgbmctaW52YWxpZC1teS1lcnJvcmBcbiAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmFsaWQgV2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBpcyB2YWxpZCAodHJ1ZSksIGludmFsaWQgKGZhbHNlKSwgcGVuZGluZyAodW5kZWZpbmVkKSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBza2lwcGVkIChudWxsKS4gUGVuZGluZyBpcyB1c2VkIGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2AuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgU2tpcHBlZCBpcyB1c2VkIGJ5IEFuZ3VsYXIgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBgJGFzeW5jVmFsaWRhdG9yc2AgZG8gbm90IHJ1biBiZWNhdXNlIGFueSBvZiB0aGUgYCR2YWxpZGF0b3JzYCBmYWlsZWQuXG4gKi9cbmFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgY2xheno6IE5nTW9kZWxDb250cm9sbGVyLFxuICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICBvYmplY3RbcHJvcGVydHldID0gdHJ1ZTtcbiAgfSxcbiAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICBkZWxldGUgb2JqZWN0W3Byb3BlcnR5XTtcbiAgfVxufSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwcmlvcml0eSAxXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTW9kZWxgIGRpcmVjdGl2ZSBiaW5kcyBhbiBgaW5wdXRgLGBzZWxlY3RgLCBgdGV4dGFyZWFgIChvciBjdXN0b20gZm9ybSBjb250cm9sKSB0byBhXG4gKiBwcm9wZXJ0eSBvbiB0aGUgc2NvcGUgdXNpbmcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIgTmdNb2RlbENvbnRyb2xsZXJ9LFxuICogd2hpY2ggaXMgY3JlYXRlZCBhbmQgZXhwb3NlZCBieSB0aGlzIGRpcmVjdGl2ZS5cbiAqXG4gKiBgbmdNb2RlbGAgaXMgcmVzcG9uc2libGUgZm9yOlxuICpcbiAqIC0gQmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGBcbiAqICAgcmVxdWlyZS5cbiAqIC0gUHJvdmlkaW5nIHZhbGlkYXRpb24gYmVoYXZpb3IgKGkuZS4gcmVxdWlyZWQsIG51bWJlciwgZW1haWwsIHVybCkuXG4gKiAtIEtlZXBpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdG91Y2hlZC91bnRvdWNoZWQsIHZhbGlkYXRpb24gZXJyb3JzKS5cbiAqIC0gU2V0dGluZyByZWxhdGVkIGNzcyBjbGFzc2VzIG9uIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWAsIGBuZy10b3VjaGVkYCxcbiAqICAgYG5nLXVudG91Y2hlZGAsIGBuZy1lbXB0eWAsIGBuZy1ub3QtZW1wdHlgKSBpbmNsdWRpbmcgYW5pbWF0aW9ucy5cbiAqIC0gUmVnaXN0ZXJpbmcgdGhlIGNvbnRyb2wgd2l0aCBpdHMgcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS5cbiAqXG4gKiBOb3RlOiBgbmdNb2RlbGAgd2lsbCB0cnkgdG8gYmluZCB0byB0aGUgcHJvcGVydHkgZ2l2ZW4gYnkgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbiBvbiB0aGVcbiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkXG4gKiBpbXBsaWNpdGx5IGFuZCBhZGRlZCB0byB0aGUgc2NvcGUuXG4gKlxuICogRm9yIGJlc3QgcHJhY3RpY2VzIG9uIHVzaW5nIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIFtVbmRlcnN0YW5kaW5nIFNjb3Blc10oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzKVxuICpcbiAqIEZvciBiYXNpYyBleGFtcGxlcywgaG93IHRvIHVzZSBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGV4dF0gdGV4dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3JhZGlvXSByYWRpb31cbiAqICAgIC0ge0BsaW5rIGlucHV0W251bWJlcl0gbnVtYmVyfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdXJsXSB1cmx9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRlXSBkYXRlfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdIGRhdGV0aW1lLWxvY2FsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGltZV0gdGltZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W21vbnRoXSBtb250aH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3dlZWtdIHdlZWt9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnRleHRhcmVhIHRleHRhcmVhfVxuICpcbiAqICMgQ29tcGxleCBNb2RlbHMgKG9iamVjdHMgb3IgY29sbGVjdGlvbnMpXG4gKlxuICogQnkgZGVmYXVsdCwgYG5nTW9kZWxgIHdhdGNoZXMgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZSwgbm90IHZhbHVlLiBUaGlzIGlzIGltcG9ydGFudCB0byBrbm93IHdoZW5cbiAqIGJpbmRpbmcgaW5wdXRzIHRvIG1vZGVscyB0aGF0IGFyZSBvYmplY3RzIChlLmcuIGBEYXRlYCkgb3IgY29sbGVjdGlvbnMgKGUuZy4gYXJyYXlzKS4gSWYgb25seSBwcm9wZXJ0aWVzIG9mIHRoZVxuICogb2JqZWN0IG9yIGNvbGxlY3Rpb24gY2hhbmdlLCBgbmdNb2RlbGAgd2lsbCBub3QgYmUgbm90aWZpZWQgYW5kIHNvIHRoZSBpbnB1dCB3aWxsIG5vdCBiZSAgcmUtcmVuZGVyZWQuXG4gKlxuICogVGhlIG1vZGVsIG11c3QgYmUgYXNzaWduZWQgYW4gZW50aXJlbHkgbmV3IG9iamVjdCBvciBjb2xsZWN0aW9uIGJlZm9yZSBhIHJlLXJlbmRlcmluZyB3aWxsIG9jY3VyLlxuICpcbiAqIFNvbWUgZGlyZWN0aXZlcyBoYXZlIG9wdGlvbnMgdGhhdCB3aWxsIGNhdXNlIHRoZW0gdG8gdXNlIGEgY3VzdG9tIGAkd2F0Y2hDb2xsZWN0aW9uYCBvbiB0aGUgbW9kZWwgZXhwcmVzc2lvblxuICogLSBmb3IgZXhhbXBsZSwgYG5nT3B0aW9uc2Agd2lsbCBkbyBzbyB3aGVuIGEgYHRyYWNrIGJ5YCBjbGF1c2UgaXMgaW5jbHVkZWQgaW4gdGhlIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbiBvclxuICogaWYgdGhlIHNlbGVjdCBpcyBnaXZlbiB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUuXG4gKlxuICogVGhlIGAkd2F0Y2hDb2xsZWN0aW9uKClgIG1ldGhvZCBvbmx5IGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24sIG1lYW5pbmcgdGhhdCBjaGFuZ2luZyBwcm9wZXJ0aWVzIGRlZXBlciB0aGFuIHRoZVxuICogZmlyc3QgbGV2ZWwgb2YgdGhlIG9iamVjdCAob3Igb25seSBjaGFuZ2luZyB0aGUgcHJvcGVydGllcyBvZiBhbiBpdGVtIGluIHRoZSBjb2xsZWN0aW9uIGlmIGl0J3MgYW4gYXJyYXkpIHdpbGwgc3RpbGxcbiAqIG5vdCB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nIG9mIHRoZSBtb2RlbC5cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiBUaGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZCBvbiB0aGUgYXNzb2NpYXRlZCBpbnB1dC9zZWxlY3QvdGV4dGFyZWEgZWxlbWVudFxuICogZGVwZW5kaW5nIG9uIHRoZSB2YWxpZGl0eSBvZiB0aGUgbW9kZWwuXG4gKlxuICogIC0gYG5nLXZhbGlkYDogdGhlIG1vZGVsIGlzIHZhbGlkXG4gKiAgLSBgbmctaW52YWxpZGA6IHRoZSBtb2RlbCBpcyBpbnZhbGlkXG4gKiAgLSBgbmctdmFsaWQtW2tleV1gOiBmb3IgZWFjaCB2YWxpZCBrZXkgYWRkZWQgYnkgYCRzZXRWYWxpZGl0eWBcbiAqICAtIGBuZy1pbnZhbGlkLVtrZXldYDogZm9yIGVhY2ggaW52YWxpZCBrZXkgYWRkZWQgYnkgYCRzZXRWYWxpZGl0eWBcbiAqICAtIGBuZy1wcmlzdGluZWA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGludGVyYWN0ZWQgd2l0aCB5ZXRcbiAqICAtIGBuZy1kaXJ0eWA6IHRoZSBjb250cm9sIGhhcyBiZWVuIGludGVyYWN0ZWQgd2l0aFxuICogIC0gYG5nLXRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBibHVycmVkXG4gKiAgLSBgbmctdW50b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXBlbmRpbmdgOiBhbnkgYCRhc3luY1ZhbGlkYXRvcnNgIGFyZSB1bmZ1bGZpbGxlZFxuICogIC0gYG5nLWVtcHR5YDogdGhlIHZpZXcgZG9lcyBub3QgY29udGFpbiBhIHZhbHVlIG9yIHRoZSB2YWx1ZSBpcyBkZWVtZWQgXCJlbXB0eVwiLCBhcyBkZWZpbmVkXG4gKiAgICAgYnkgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5fSBtZXRob2RcbiAqICAtIGBuZy1ub3QtZW1wdHlgOiB0aGUgdmlldyBjb250YWlucyBhIG5vbi1lbXB0eSB2YWx1ZVxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgd2l0aGluIG1vZGVscyBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZFxuICogb24gdGhlIGlucHV0IGVsZW1lbnQgd2hpY2ggaXMgYXR0YWNoZWQgdG8gdGhlIG1vZGVsLiBUaGVzZSBjbGFzc2VzIGluY2x1ZGU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCxcbiAqIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55IG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCBvbiB0aGUgbW9kZWwgaXRzZWxmLlxuICogVGhlIGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdpdGhpbiBuZ01vZGVsIGFyZSBzaW1pbGFyIHRvIGhvdyB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmRcbiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGFuIGlucHV0IGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktaW5wdXQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktaW5wdXQubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIiBuYW1lPVwibmctbW9kZWxcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS52YWwgPSAnMSc7XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxzdHlsZT5cbiAgICAgICAgIC5teS1pbnB1dCB7XG4gICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvblwiPlxuICAgICAgICBVcGRhdGUgaW5wdXQgdG8gc2VlIHRyYW5zaXRpb25zIHdoZW4gdmFsaWQvaW52YWxpZC5cbiAgICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLlxuICAgICAgIDwvcD5cbiAgICAgICA8Zm9ybSBuYW1lPVwidGVzdEZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbFwiIG5nLXBhdHRlcm49XCIvXlxcZCskL1wiIG5hbWU9XCJhbmltXCIgY2xhc3M9XCJteS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb25cIiAvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIEJpbmRpbmcgdG8gYSBnZXR0ZXIvc2V0dGVyXG4gKlxuICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggemVybyBhcmd1bWVudHMsIGFuZCBzZXRzXG4gKiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyZ3VtZW50LiBJdCdzIHNvbWV0aW1lcyB1c2VmdWwgdG8gdXNlIHRoaXNcbiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgZnJvbSB3aGF0IHRoZSBtb2RlbCBleHBvc2VzXG4gKiB0byB0aGUgdmlldy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlXG4gKiBmcmVxdWVudGx5IHRoYW4gb3RoZXIgcGFydHMgb2YgeW91ciBjb2RlLlxuICogPC9kaXY+XG4gKlxuICogWW91IHVzZSB0aGlzIGJlaGF2aW9yIGJ5IGFkZGluZyBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG8gYW4gZWxlbWVudCB0aGF0XG4gKiBoYXMgYG5nLW1vZGVsYCBhdHRhY2hlZCB0byBpdC4gWW91IGNhbiBhbHNvIGFkZCBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG9cbiAqIGEgYDxmb3JtPmAsIHdoaWNoIHdpbGwgZW5hYmxlIHRoaXMgYmVoYXZpb3IgZm9yIGFsbCBgPGlucHV0PmBzIHdpdGhpbiBpdC4gU2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9uc2B9IGZvciBtb3JlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBuZ01vZGVsYCB3aXRoIGEgZ2V0dGVyL3NldHRlcjpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWwtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lKClcIj48L3NwYW4+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nO1xuICAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBuZXdOYW1lIGNhbiBiZSB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zOlxuICAgICAgICAgICAgICAvLyAxLiBCZWNhdXNlIGl0IGlzIGNhbGxlZCBhcyBhIGdldHRlciBhbmQgdGh1cyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAvLyAgICBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTW9kZWxEaXJlY3RpdmUgPSBbJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9mb3JtJywgJ14/bmdNb2RlbE9wdGlvbnMnXSxcbiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlcixcbiAgICAvLyBQcmVsaW5rIG5lZWRzIHRvIHJ1biBiZWZvcmUgYW55IGlucHV0IGRpcmVjdGl2ZVxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIHNldCB0aGUgTmdNb2RlbE9wdGlvbnMgaW4gTmdNb2RlbENvbnRyb2xsZXJcbiAgICAvLyBiZWZvcmUgYW55b25lIGVsc2UgdXNlcyBpdC5cbiAgICBwcmlvcml0eTogMSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ01vZGVsQ29tcGlsZShlbGVtZW50KSB7XG4gICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICBlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhVTlRPVUNIRURfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ01vZGVsUHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sXG4gICAgICAgICAgICAgIGZvcm1DdHJsID0gY3RybHNbMV0gfHwgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybSxcbiAgICAgICAgICAgICAgb3B0aW9uc0N0cmwgPSBjdHJsc1syXTtcblxuICAgICAgICAgIGlmIChvcHRpb25zQ3RybCkge1xuICAgICAgICAgICAgbW9kZWxDdHJsLiRvcHRpb25zID0gb3B0aW9uc0N0cmwuJG9wdGlvbnM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbW9kZWxDdHJsLiQkaW5pdEdldHRlclNldHRlcnMoKTtcblxuICAgICAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zXG4gICAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTtcblxuICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbmFtZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2wobW9kZWxDdHJsLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLiRyZW1vdmVDb250cm9sKG1vZGVsQ3RybCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Q6IGZ1bmN0aW9uIG5nTW9kZWxQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF07XG4gICAgICAgICAgaWYgKG1vZGVsQ3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3VwZGF0ZU9uJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQub24obW9kZWxDdHJsLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT24nKSwgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQoZXYgJiYgZXYudHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBzZXRUb3VjaGVkKCkge1xuICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kdG91Y2hlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qIGV4cG9ydGVkIGRlZmF1bHRNb2RlbE9wdGlvbnMgKi9cbnZhciBkZWZhdWx0TW9kZWxPcHRpb25zO1xudmFyIERFRkFVTFRfUkVHRVhQID0gLyhcXHMrfF4pZGVmYXVsdChcXHMrfCQpLztcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgTW9kZWxPcHRpb25zXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgY29udGFpbmVyIGZvciB0aGUgb3B0aW9ucyBzZXQgYnkgdGhlIHtAbGluayBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlXG4gKi9cbmZ1bmN0aW9uIE1vZGVsT3B0aW9ucyhvcHRpb25zKSB7XG4gIHRoaXMuJCRvcHRpb25zID0gb3B0aW9ucztcbn1cblxuTW9kZWxPcHRpb25zLnByb3RvdHlwZSA9IHtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBNb2RlbE9wdGlvbnMjZ2V0T3B0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBvcHRpb24gdG8gcmV0cmlldmVcbiAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gb3B0aW9uXG4gICAqL1xuICBnZXRPcHRpb246IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy4kJG9wdGlvbnNbbmFtZV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgTW9kZWxPcHRpb25zI2NyZWF0ZUNoaWxkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGEgaGFzaCBvZiBvcHRpb25zIGZvciB0aGUgbmV3IGNoaWxkIHRoYXQgd2lsbCBvdmVycmlkZSB0aGUgcGFyZW50J3Mgb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtNb2RlbE9wdGlvbnN9IGEgbmV3IGBNb2RlbE9wdGlvbnNgIG9iamVjdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKi9cbiAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgaW5oZXJpdEFsbCA9IGZhbHNlO1xuXG4gICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weVxuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuXG4gICAgLy8gSW5oZXJpdCBvcHRpb25zIGZyb20gdGhlIHBhcmVudCBpZiBzcGVjaWZpZWQgYnkgdGhlIHZhbHVlIGBcIiRpbmhlcml0XCJgXG4gICAgZm9yRWFjaChvcHRpb25zLCAvKiBAdGhpcyAqLyBmdW5jdGlvbihvcHRpb24sIGtleSkge1xuICAgICAgaWYgKG9wdGlvbiA9PT0gJyRpbmhlcml0Jykge1xuICAgICAgICBpZiAoa2V5ID09PSAnKicpIHtcbiAgICAgICAgICBpbmhlcml0QWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zW2tleV0gPSB0aGlzLiQkb3B0aW9uc1trZXldO1xuICAgICAgICAgIC8vIGB1cGRhdGVPbmAgaXMgc3BlY2lhbCBzbyB3ZSBtdXN0IGFsc28gaW5oZXJpdCB0aGUgYHVwZGF0ZU9uRGVmYXVsdGAgb3B0aW9uXG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3VwZGF0ZU9uJykge1xuICAgICAgICAgICAgb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0aGlzLiQkb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5ID09PSAndXBkYXRlT24nKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGB1cGRhdGVPbmAgcHJvcGVydHkgY29udGFpbnMgdGhlIGBkZWZhdWx0YCBldmVudCB0aGVuIHdlIGhhdmUgdG8gcmVtb3ZlXG4gICAgICAgICAgLy8gaXQgZnJvbSB0aGUgZXZlbnQgbGlzdCBhbmQgc2V0IHRoZSBgdXBkYXRlT25EZWZhdWx0YCBmbGFnLlxuICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgICAgb3B0aW9uc1trZXldID0gdHJpbShvcHRpb24ucmVwbGFjZShERUZBVUxUX1JFR0VYUCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gJyAnO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgaWYgKGluaGVyaXRBbGwpIHtcbiAgICAgIC8vIFdlIGhhdmUgYSBwcm9wZXJ0eSBvZiB0aGUgZm9ybTogYFwiKlwiOiBcIiRpbmhlcml0XCJgXG4gICAgICBkZWxldGUgb3B0aW9uc1snKiddO1xuICAgICAgZGVmYXVsdHMob3B0aW9ucywgdGhpcy4kJG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIEZpbmFsbHkgYWRkIGluIGFueSBtaXNzaW5nIGRlZmF1bHRzXG4gICAgZGVmYXVsdHMob3B0aW9ucywgZGVmYXVsdE1vZGVsT3B0aW9ucy4kJG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBNb2RlbE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cbn07XG5cblxuZGVmYXVsdE1vZGVsT3B0aW9ucyA9IG5ldyBNb2RlbE9wdGlvbnMoe1xuICB1cGRhdGVPbjogJycsXG4gIHVwZGF0ZU9uRGVmYXVsdDogdHJ1ZSxcbiAgZGVib3VuY2U6IDAsXG4gIGdldHRlclNldHRlcjogZmFsc2UsXG4gIGFsbG93SW52YWxpZDogZmFsc2UsXG4gIHRpbWV6b25lOiBudWxsXG59KTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW9kZWxPcHRpb25zXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIG1vZGlmeSB0aGUgYmVoYXZpb3VyIG9mIHtAbGluayBuZ01vZGVsfSBkaXJlY3RpdmVzIHdpdGhpbiB5b3VyXG4gKiBhcHBsaWNhdGlvbi4gWW91IGNhbiBzcGVjaWZ5IGFuIGBuZ01vZGVsT3B0aW9uc2AgZGlyZWN0aXZlIG9uIGFueSBlbGVtZW50LiBBbGwge0BsaW5rIG5nTW9kZWx9XG4gKiBkaXJlY3RpdmVzIHdpbGwgdXNlIHRoZSBvcHRpb25zIG9mIHRoZWlyIG5lYXJlc3QgYG5nTW9kZWxPcHRpb25zYCBhbmNlc3Rvci5cbiAqXG4gKiBUaGUgYG5nTW9kZWxPcHRpb25zYCBzZXR0aW5ncyBhcmUgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBkaXJlY3RpdmUgYXNcbiAqIGFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhpcyBleHByZXNzaW9uIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3QsIHdob3NlIHByb3BlcnRpZXMgY29udGFpblxuICogdGhlIHNldHRpbmdzLiBGb3IgZXhhbXBsZTogYDxkaXYgXCJuZy1tb2RlbC1vcHRpb25zXCI9XCJ7IGRlYm91bmNlOiAxMDAgfVwiYC5cbiAqXG4gKiAjIyBJbmhlcml0aW5nIE9wdGlvbnNcbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhhdCBhbiBgbmdNb2RlbE9wdGlvbnNgIHNldHRpbmcgc2hvdWxkIGJlIGluaGVyaXRlZCBmcm9tIGEgcGFyZW50IGBuZ01vZGVsT3B0aW9uc2BcbiAqIGRpcmVjdGl2ZSBieSBnaXZpbmcgaXQgdGhlIHZhbHVlIG9mIGBcIiRpbmhlcml0XCJgLlxuICogVGhlbiBpdCB3aWxsIGluaGVyaXQgdGhhdCBzZXR0aW5nIGZyb20gdGhlIGZpcnN0IGBuZ01vZGVsT3B0aW9uc2AgZGlyZWN0aXZlIGZvdW5kIGJ5IHRyYXZlcnNpbmcgdXAgdGhlXG4gKiBET00gdHJlZS4gSWYgdGhlcmUgaXMgbm8gYW5jZXN0b3IgZWxlbWVudCBjb250YWluaW5nIGFuIGBuZ01vZGVsT3B0aW9uc2AgZGlyZWN0aXZlIHRoZW4gZGVmYXVsdCBzZXR0aW5nc1xuICogd2lsbCBiZSB1c2VkLlxuICpcbiAqIEZvciBleGFtcGxlIGdpdmVuIHRoZSBmb2xsb3dpbmcgZnJhZ21lbnQgb2YgSFRNTFxuICpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDIwMCB9XCI+XG4gKiAgIDxmb3JtIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicsIGFsbG93SW52YWxpZDogJyRpbmhlcml0JyB9XCI+XG4gKiAgICAgPGlucHV0IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCcsIGFsbG93SW52YWxpZDogJyRpbmhlcml0JyB9XCIgLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgZm9sbG93aW5nIHNldHRpbmdzXG4gKlxuICogYGBganNcbiAqIHsgYWxsb3dJbnZhbGlkOiB0cnVlLCB1cGRhdGVPbjogJ2RlZmF1bHQnLCBkZWJvdW5jZTogMCB9XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCB0aGUgYGRlYm91bmNlYCBzZXR0aW5nIHdhcyBub3QgaW5oZXJpdGVkIGFuZCB1c2VkIHRoZSBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgYWxsIHVuZGVmaW5lZCBzZXR0aW5ncyBhcmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgZnJvbSBhbiBhbmNlc3RvciBieVxuICogaW5jbHVkaW5nIGEgcHJvcGVydHkgd2l0aCBrZXkgb2YgYFwiKlwiYCBhbmQgdmFsdWUgb2YgYFwiJGluaGVyaXRcImAuXG4gKlxuICogRm9yIGV4YW1wbGUgZ2l2ZW4gdGhlIGZvbGxvd2luZyBmcmFnbWVudCBvZiBIVE1MXG4gKlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctbW9kZWwtb3B0aW9ucz1cInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMjAwIH1cIj5cbiAqICAgPGZvcm0gbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJywgXCIqXCI6ICckaW5oZXJpdCcgfVwiPlxuICogICAgIDxpbnB1dCBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQnLCBcIipcIjogJyRpbmhlcml0JyB9XCIgLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgZm9sbG93aW5nIHNldHRpbmdzXG4gKlxuICogYGBganNcbiAqIHsgYWxsb3dJbnZhbGlkOiB0cnVlLCB1cGRhdGVPbjogJ2RlZmF1bHQnLCBkZWJvdW5jZTogMjAwIH1cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHRoZSBgZGVib3VuY2VgIHNldHRpbmcgbm93IGluaGVyaXRzIHRoZSB2YWx1ZSBmcm9tIHRoZSBvdXRlciBgPGRpdj5gIGVsZW1lbnQuXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIHJldXNhYmxlIGNvbXBvbmVudCB0aGVuIHlvdSBzaG91bGQgYmUgY2FyZWZ1bCB3aGVuIHVzaW5nIGBcIipcIjogXCIkaW5oZXJpdFwiYFxuICogc2luY2UgeW91IG1heSBpbmFkdmVydGVudGx5IGluaGVyaXQgYSBzZXR0aW5nIGluIHRoZSBmdXR1cmUgdGhhdCBjaGFuZ2VzIHRoZSBiZWhhdmlvciBvZiB5b3VyIGNvbXBvbmVudC5cbiAqXG4gKlxuICogIyMgVHJpZ2dlcmluZyBhbmQgZGVib3VuY2luZyBtb2RlbCB1cGRhdGVzXG4gKlxuICogVGhlIGB1cGRhdGVPbmAgYW5kIGBkZWJvdW5jZWAgcHJvcGVydGllcyBhbGxvdyB5b3UgdG8gc3BlY2lmeSBhIGN1c3RvbSBsaXN0IG9mIGV2ZW50cyB0aGF0IHdpbGxcbiAqIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGUgYW5kL29yIGEgZGVib3VuY2luZyBkZWxheSBzbyB0aGF0IHRoZSBhY3R1YWwgdXBkYXRlIG9ubHkgdGFrZXMgcGxhY2Ugd2hlblxuICogYSB0aW1lciBleHBpcmVzOyB0aGlzIHRpbWVyIHdpbGwgYmUgcmVzZXQgYWZ0ZXIgYW5vdGhlciBjaGFuZ2UgdGFrZXMgcGxhY2UuXG4gKlxuICogR2l2ZW4gdGhlIG5hdHVyZSBvZiBgbmdNb2RlbE9wdGlvbnNgLCB0aGUgdmFsdWUgZGlzcGxheWVkIGluc2lkZSBpbnB1dCBmaWVsZHMgaW4gdGhlIHZpZXcgbWlnaHRcbiAqIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB2YWx1ZSBpbiB0aGUgYWN0dWFsIG1vZGVsLiBUaGlzIG1lYW5zIHRoYXQgaWYgeW91IHVwZGF0ZSB0aGUgbW9kZWwgeW91XG4gKiBzaG91bGQgYWxzbyBpbnZva2Uge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlfSBvbiB0aGUgcmVsZXZhbnQgaW5wdXQgZmllbGQgaW5cbiAqIG9yZGVyIHRvIG1ha2Ugc3VyZSBpdCBpcyBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgbW9kZWwgYW5kIHRoYXQgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogVGhlIGVhc2llc3Qgd2F5IHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbCdzIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZX1cbiAqIG1ldGhvZCBpcyBieSBtYWtpbmcgc3VyZSB0aGUgaW5wdXQgaXMgcGxhY2VkIGluc2lkZSBhIGZvcm0gdGhhdCBoYXMgYSBgbmFtZWAgYXR0cmlidXRlLiBUaGlzIGlzXG4gKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICogYG5hbWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gKiBgc3VibWl0YCBldmVudC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZVxuICogZm9ybSB3aWxsIHVwZGF0ZSB0aGUgbW9kZWwgb25seSB3aGVuIHRoZSBjb250cm9sIGxvc2VzIGZvY3VzIChibHVyIGV2ZW50KS4gSWYgYGVzY2FwZWAga2V5IGlzXG4gKiBwcmVzc2VkIHdoaWxlIHRoZSBpbnB1dCBmaWVsZCBpcyBmb2N1c2VkLCB0aGUgdmFsdWUgaXMgcmVzZXQgdG8gdGhlIHZhbHVlIGluIHRoZSBjdXJyZW50IG1vZGVsLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtYmx1clwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICAgICAgICA8bGFiZWw+XG4gKiAgICAgICAgICAgTmFtZTpcbiAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLWtleXVwPVwiY2FuY2VsKCRldmVudClcIiAvPlxuICogICAgICAgICA8L2xhYmVsPjxiciAvPlxuICogICAgICAgICA8bGFiZWw+XG4gKiAgICAgICAgICAgT3RoZXIgZGF0YTpcbiAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIuZGF0YVwiIC8+XG4gKiAgICAgICAgIDwvbGFiZWw+PGJyIC8+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknLCBkYXRhOiAnJyB9O1xuICpcbiAqICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAqICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICogICAgICAgICAgICAgJHNjb3BlLnVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfTtcbiAqICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyLm5hbWUnKSk7XG4gKiAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICogICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b20gZXZlbnRzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gKiAgICAgICBpbnB1dC5jbGljaygpO1xuICogICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gKiAgICAgICBvdGhlci5jbGljaygpO1xuICogICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5IGhlbGxvJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgJHJvbGxiYWNrVmlld1ZhbHVlIHdoZW4gbW9kZWwgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgaW5wdXQuc2VuZEtleXMoJyBoZWxsbycpO1xuICogICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnc2F5IGhlbGxvJyk7XG4gKiAgICAgICBpbnB1dC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5FU0NBUEUpO1xuICogICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnc2F5Jyk7XG4gKiAgICAgICBvdGhlci5jbGljaygpO1xuICogICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGUgbmV4dCBleGFtcGxlIHNob3dzIGhvdyB0byBkZWJvdW5jZSBtb2RlbCBjaGFuZ2VzLiBNb2RlbCB3aWxsIGJlIHVwZGF0ZWQgb25seSAxIHNlYyBhZnRlciBsYXN0IGNoYW5nZS5cbiAqIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICAgICAgICBOYW1lOlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICogICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICogICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAgfVwiIC8+XG4gKiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJ1c2VyRm9ybS51c2VyTmFtZS4kcm9sbGJhY2tWaWV3VmFsdWUoKTsgdXNlci5uYW1lPScnXCI+Q2xlYXI8L2J1dHRvbj48YnIgLz5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ29wdGlvbnNFeGFtcGxlJywgW10pXG4gKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScgfTtcbiAqICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIE1vZGVsIHVwZGF0ZXMgYW5kIHZhbGlkYXRpb25cbiAqXG4gKiBUaGUgZGVmYXVsdCBiZWhhdmlvdXIgaW4gYG5nTW9kZWxgIGlzIHRoYXQgdGhlIG1vZGVsIHZhbHVlIGlzIHNldCB0byBgdW5kZWZpbmVkYCB3aGVuIHRoZVxuICogdmFsaWRhdGlvbiBkZXRlcm1pbmVzIHRoYXQgdGhlIHZhbHVlIGlzIGludmFsaWQuIEJ5IHNldHRpbmcgdGhlIGBhbGxvd0ludmFsaWRgIHByb3BlcnR5IHRvIHRydWUsXG4gKiB0aGUgbW9kZWwgd2lsbCBzdGlsbCBiZSB1cGRhdGVkIGV2ZW4gaWYgdGhlIHZhbHVlIGlzIGludmFsaWQuXG4gKlxuICpcbiAqICMjIENvbm5lY3RpbmcgdG8gdGhlIHNjb3BlXG4gKlxuICogQnkgc2V0dGluZyB0aGUgYGdldHRlclNldHRlcmAgcHJvcGVydHkgdG8gdHJ1ZSB5b3UgYXJlIHRlbGxpbmcgbmdNb2RlbCB0aGF0IHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvblxuICogb24gdGhlIHNjb3BlIHJlZmVycyB0byBhIFwiZ2V0dGVyL3NldHRlclwiIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHRoZSB2YWx1ZSBpdHNlbGYuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbD5cbiAqICAgICAgICAgICBOYW1lOlxuICogICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAqICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICogICAgICAgICA8L2xhYmVsPlxuICogICAgICAgPC9mb3JtPlxuICogICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lKClcIj48L3NwYW4+PC9wcmU+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gKiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nO1xuICogICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAqICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQobmV3TmFtZSkgPyAoX25hbWUgPSBuZXdOYW1lKSA6IF9uYW1lO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfTtcbiAqICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyBTcGVjaWZ5aW5nIHRpbWV6b25lc1xuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB0aGUgdGltZXpvbmUgdGhhdCBkYXRlL3RpbWUgaW5wdXQgZGlyZWN0aXZlcyBleHBlY3QgYnkgcHJvdmlkaW5nIGl0cyBuYW1lIGluIHRoZVxuICogYHRpbWV6b25lYCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbmdNb2RlbE9wdGlvbnMgb3B0aW9ucyB0byBhcHBseSB0byB7QGxpbmsgbmdNb2RlbH0gZGlyZWN0aXZlcyBvbiB0aGlzIGVsZW1lbnQgYW5kXG4gKiAgIGFuZCBpdHMgZGVzY2VuZGVudHMuIFZhbGlkIGtleXMgYXJlOlxuICogICAtIGB1cGRhdGVPbmA6IHN0cmluZyBzcGVjaWZ5aW5nIHdoaWNoIGV2ZW50IHNob3VsZCB0aGUgaW5wdXQgYmUgYm91bmQgdG8uIFlvdSBjYW4gc2V0IHNldmVyYWxcbiAqICAgICBldmVudHMgdXNpbmcgYW4gc3BhY2UgZGVsaW1pdGVkIGxpc3QuIFRoZXJlIGlzIGEgc3BlY2lhbCBldmVudCBjYWxsZWQgYGRlZmF1bHRgIHRoYXRcbiAqICAgICBtYXRjaGVzIHRoZSBkZWZhdWx0IGV2ZW50cyBiZWxvbmdpbmcgdG8gdGhlIGNvbnRyb2wuXG4gKiAgIC0gYGRlYm91bmNlYDogaW50ZWdlciB2YWx1ZSB3aGljaCBjb250YWlucyB0aGUgZGVib3VuY2UgbW9kZWwgdXBkYXRlIHZhbHVlIGluIG1pbGxpc2Vjb25kcy4gQVxuICogICAgIHZhbHVlIG9mIDAgdHJpZ2dlcnMgYW4gaW1tZWRpYXRlIHVwZGF0ZS4gSWYgYW4gb2JqZWN0IGlzIHN1cHBsaWVkIGluc3RlYWQsIHlvdSBjYW4gc3BlY2lmeSBhXG4gKiAgICAgY3VzdG9tIHZhbHVlIGZvciBlYWNoIGV2ZW50LiBGb3IgZXhhbXBsZTpcbiAqICAgICBgYGBcbiAqICAgICBuZy1tb2RlbC1vcHRpb25zPVwie1xuICogICAgICAgdXBkYXRlT246ICdkZWZhdWx0IGJsdXInLFxuICogICAgICAgZGVib3VuY2U6IHsgJ2RlZmF1bHQnOiA1MDAsICdibHVyJzogMCB9XG4gKiAgICAgfVwiXG4gKiAgICAgYGBgXG4gKiAgIC0gYGFsbG93SW52YWxpZGA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIG1vZGVsIGNhbiBiZSBzZXQgd2l0aCB2YWx1ZXMgdGhhdCBkaWRcbiAqICAgICBub3QgdmFsaWRhdGUgY29ycmVjdGx5IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2Ygc2V0dGluZyB0aGUgbW9kZWwgdG8gdW5kZWZpbmVkLlxuICogICAtIGBnZXR0ZXJTZXR0ZXJgOiBib29sZWFuIHZhbHVlIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gdHJlYXQgZnVuY3Rpb25zIGJvdW5kIHRvXG4gKiAgICAgYG5nTW9kZWxgIGFzIGdldHRlcnMvc2V0dGVycy5cbiAqICAgLSBgdGltZXpvbmVgOiBEZWZpbmVzIHRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgZm9yXG4gKiAgICAgYDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiIC8+YCwgLi4uIC4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICAgY29udGluZW50YWwgVVMgdGltZSB6b25lIGFiYnJldmlhdGlvbnMsIGJ1dCBmb3IgZ2VuZXJhbCB1c2UsIHVzZSBhIHRpbWUgem9uZSBvZmZzZXQsIGZvclxuICogICAgIGV4YW1wbGUsIGAnKzA0MzAnYCAoNCBob3VycywgMzAgbWludXRlcyBlYXN0IG9mIHRoZSBHcmVlbndpY2ggbWVyaWRpYW4pXG4gKiAgICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqXG4gKi9cbnZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGF0dHJzJywgJyRzY29wZSddO1xuICBmdW5jdGlvbiBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIoJGF0dHJzLCAkc2NvcGUpIHtcbiAgICB0aGlzLiQkYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy4kJHNjb3BlID0gJHNjb3BlO1xuICB9XG4gIE5nTW9kZWxPcHRpb25zQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gICAgJG9uSW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFyZW50T3B0aW9ucyA9IHRoaXMucGFyZW50Q3RybCA/IHRoaXMucGFyZW50Q3RybC4kb3B0aW9ucyA6IGRlZmF1bHRNb2RlbE9wdGlvbnM7XG4gICAgICB2YXIgbW9kZWxPcHRpb25zRGVmaW5pdGlvbiA9IHRoaXMuJCRzY29wZS4kZXZhbCh0aGlzLiQkYXR0cnMubmdNb2RlbE9wdGlvbnMpO1xuXG4gICAgICB0aGlzLiRvcHRpb25zID0gcGFyZW50T3B0aW9ucy5jcmVhdGVDaGlsZChtb2RlbE9wdGlvbnNEZWZpbml0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIC8vIG5nTW9kZWxPcHRpb25zIG5lZWRzIHRvIHJ1biBiZWZvcmUgbmdNb2RlbCBhbmQgaW5wdXQgZGlyZWN0aXZlc1xuICAgIHByaW9yaXR5OiAxMCxcbiAgICByZXF1aXJlOiB7cGFyZW50Q3RybDogJz9eXm5nTW9kZWxPcHRpb25zJ30sXG4gICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXJcbiAgfTtcbn07XG5cblxuLy8gc2hhbGxvdyBjb3B5IG92ZXIgdmFsdWVzIGZyb20gYHNyY2AgdGhhdCBhcmUgbm90IGFscmVhZHkgc3BlY2lmaWVkIG9uIGBkc3RgXG5mdW5jdGlvbiBkZWZhdWx0cyhkc3QsIHNyYykge1xuICBmb3JFYWNoKHNyYywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGlmICghaXNEZWZpbmVkKGRzdFtrZXldKSkge1xuICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTm9uQmluZGFibGVcbiAqIEByZXN0cmljdCBBQ1xuICogQHByaW9yaXR5IDEwMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdOb25CaW5kYWJsZWAgZGlyZWN0aXZlIHRlbGxzIEFuZ3VsYXIgbm90IHRvIGNvbXBpbGUgb3IgYmluZCB0aGUgY29udGVudHMgb2YgdGhlIGN1cnJlbnRcbiAqIERPTSBlbGVtZW50LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgZWxlbWVudCBjb250YWlucyB3aGF0IGFwcGVhcnMgdG8gYmUgQW5ndWxhciBkaXJlY3RpdmVzIGFuZFxuICogYmluZGluZ3MgYnV0IHdoaWNoIHNob3VsZCBiZSBpZ25vcmVkIGJ5IEFuZ3VsYXIuIFRoaXMgY291bGQgYmUgdGhlIGNhc2UgaWYgeW91IGhhdmUgYSBzaXRlIHRoYXRcbiAqIGRpc3BsYXlzIHNuaXBwZXRzIG9mIGNvZGUsIGZvciBpbnN0YW5jZS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICogSW4gdGhpcyBleGFtcGxlIHRoZXJlIGFyZSB0d28gbG9jYXRpb25zIHdoZXJlIGEgc2ltcGxlIGludGVycG9sYXRpb24gYmluZGluZyAoYHt7fX1gKSBpcyBwcmVzZW50LFxuICogYnV0IHRoZSBvbmUgd3JhcHBlZCBpbiBgbmdOb25CaW5kYWJsZWAgaXMgbGVmdCBhbG9uZS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1ub24tYmluZGFibGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJzEgKyAyJykpLmdldFRleHQoKSkudG9Db250YWluKCczJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdkaXYnKSkubGFzdCgpLmdldFRleHQoKSkudG9NYXRjaCgvMSBcXCsgMi8pO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTtcblxuLyogZXhwb3J0ZWQgbmdPcHRpb25zRGlyZWN0aXZlICovXG5cbi8qIGdsb2JhbCBqcUxpdGVSZW1vdmUgKi9cblxudmFyIG5nT3B0aW9uc01pbkVyciA9IG1pbkVycignbmdPcHRpb25zJyk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdPcHRpb25zXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmBcbiAqIGVsZW1lbnRzIGZvciB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50IHVzaW5nIHRoZSBhcnJheSBvciBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGVcbiAqIGBuZ09wdGlvbnNgIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi5cbiAqXG4gKiBJbiBtYW55IGNhc2VzLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2ZcbiAqIGBuZ09wdGlvbnNgIHRvIGFjaGlldmUgYSBzaW1pbGFyIHJlc3VsdC4gSG93ZXZlciwgYG5nT3B0aW9uc2AgcHJvdmlkZXMgc29tZSBiZW5lZml0czpcbiAqIC0gbW9yZSBmbGV4aWJpbGl0eSBpbiBob3cgdGhlIGA8c2VsZWN0PmAncyBtb2RlbCBpcyBhc3NpZ25lZCB2aWEgdGhlIGBzZWxlY3RgICoqYGFzYCoqIHBhcnQgb2YgdGhlXG4gKiBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb25cbiAqIC0gcmVkdWNlZCBtZW1vcnkgY29uc3VtcHRpb24gYnkgbm90IGNyZWF0aW5nIGEgbmV3IHNjb3BlIGZvciBlYWNoIHJlcGVhdGVkIGluc3RhbmNlXG4gKiAtIGluY3JlYXNlZCByZW5kZXIgc3BlZWQgYnkgY3JlYXRpbmcgdGhlIG9wdGlvbnMgaW4gYSBkb2N1bWVudEZyYWdtZW50IGluc3RlYWQgb2YgaW5kaXZpZHVhbGx5XG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eVxuICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGBcbiAqIGRpcmVjdGl2ZS5cbiAqXG4gKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuXG4gKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCB0aGUgYG51bGxgIG9yIFwibm90IHNlbGVjdGVkXCJcbiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uXG4gKlxuICogIyMgQ29tcGxleCBNb2RlbHMgKG9iamVjdHMgb3IgY29sbGVjdGlvbnMpXG4gKlxuICogQnkgZGVmYXVsdCwgYG5nTW9kZWxgIHdhdGNoZXMgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZSwgbm90IHZhbHVlLiBUaGlzIGlzIGltcG9ydGFudCB0byBrbm93IHdoZW5cbiAqIGJpbmRpbmcgdGhlIHNlbGVjdCB0byBhIG1vZGVsIHRoYXQgaXMgYW4gb2JqZWN0IG9yIGEgY29sbGVjdGlvbi5cbiAqXG4gKiBPbmUgaXNzdWUgb2NjdXJzIGlmIHlvdSB3YW50IHRvIHByZXNlbGVjdCBhbiBvcHRpb24uIEZvciBleGFtcGxlLCBpZiB5b3Ugc2V0XG4gKiB0aGUgbW9kZWwgdG8gYW4gb2JqZWN0IHRoYXQgaXMgZXF1YWwgdG8gYW4gb2JqZWN0IGluIHlvdXIgY29sbGVjdGlvbiwgYG5nT3B0aW9uc2Agd29uJ3QgYmUgYWJsZSB0byBzZXQgdGhlIHNlbGVjdGlvbixcbiAqIGJlY2F1c2UgdGhlIG9iamVjdHMgYXJlIG5vdCBpZGVudGljYWwuIFNvIGJ5IGRlZmF1bHQsIHlvdSBzaG91bGQgYWx3YXlzIHJlZmVyZW5jZSB0aGUgaXRlbSBpbiB5b3VyIGNvbGxlY3Rpb25cbiAqIGZvciBwcmVzZWxlY3Rpb25zLCBlLmcuOiBgJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLmNvbGxlY3Rpb25bM11gLlxuICpcbiAqIEFub3RoZXIgc29sdXRpb24gaXMgdG8gdXNlIGEgYHRyYWNrIGJ5YCBjbGF1c2UsIGJlY2F1c2UgdGhlbiBgbmdPcHRpb25zYCB3aWxsIHRyYWNrIHRoZSBpZGVudGl0eVxuICogb2YgdGhlIGl0ZW0gbm90IGJ5IHJlZmVyZW5jZSwgYnV0IGJ5IHRoZSByZXN1bHQgb2YgdGhlIGB0cmFjayBieWAgZXhwcmVzc2lvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdXJcbiAqIGNvbGxlY3Rpb24gaXRlbXMgaGF2ZSBhbiBpZCBwcm9wZXJ0eSwgeW91IHdvdWxkIGB0cmFjayBieSBpdGVtLmlkYC5cbiAqXG4gKiBBIGRpZmZlcmVudCBpc3N1ZSB3aXRoIG9iamVjdHMgb3IgY29sbGVjdGlvbnMgaXMgdGhhdCBuZ01vZGVsIHdvbid0IGRldGVjdCBpZiBhbiBvYmplY3QgcHJvcGVydHkgb3JcbiAqIGEgY29sbGVjdGlvbiBpdGVtIGNoYW5nZXMuIEZvciB0aGF0IHJlYXNvbiwgYG5nT3B0aW9uc2AgYWRkaXRpb25hbGx5IHdhdGNoZXMgdGhlIG1vZGVsIHVzaW5nXG4gKiBgJHdhdGNoQ29sbGVjdGlvbmAsIHdoZW4gdGhlIGV4cHJlc3Npb24gY29udGFpbnMgYSBgdHJhY2sgYnlgIGNsYXVzZSBvciB0aGUgdGhlIHNlbGVjdCBoYXMgdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICogVGhpcyBhbGxvd3MgbmdPcHRpb25zIHRvIHRyaWdnZXIgYSByZS1yZW5kZXJpbmcgb2YgdGhlIG9wdGlvbnMgZXZlbiBpZiB0aGUgYWN0dWFsIG9iamVjdC9jb2xsZWN0aW9uXG4gKiBoYXMgbm90IGNoYW5nZWQgaWRlbnRpdHksIGJ1dCBvbmx5IGEgcHJvcGVydHkgb24gdGhlIG9iamVjdCBvciBhbiBpdGVtIGluIHRoZSBjb2xsZWN0aW9uIGNoYW5nZXMuXG4gKlxuICogTm90ZSB0aGF0IGAkd2F0Y2hDb2xsZWN0aW9uYCBkb2VzIGEgc2hhbGxvdyBjb21wYXJpc29uIG9mIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgKG9yIHRoZSBpdGVtcyBpbiB0aGUgY29sbGVjdGlvblxuICogaWYgdGhlIG1vZGVsIGlzIGFuIGFycmF5KS4gVGhpcyBtZWFucyB0aGF0IGNoYW5naW5nIGEgcHJvcGVydHkgZGVlcGVyIHRoYW4gdGhlIGZpcnN0IGxldmVsIGluc2lkZSB0aGVcbiAqIG9iamVjdC9jb2xsZWN0aW9uIHdpbGwgbm90IHRyaWdnZXIgYSByZS1yZW5kZXJpbmcuXG4gKlxuICogIyMgYHNlbGVjdGAgKipgYXNgKipcbiAqXG4gKiBVc2luZyBgc2VsZWN0YCAqKmBhc2AqKiB3aWxsIGJpbmQgdGhlIHJlc3VsdCBvZiB0aGUgYHNlbGVjdGAgZXhwcmVzc2lvbiB0byB0aGUgbW9kZWwsIGJ1dFxuICogdGhlIHZhbHVlIG9mIHRoZSBgPHNlbGVjdD5gIGFuZCBgPG9wdGlvbj5gIGh0bWwgZWxlbWVudHMgd2lsbCBiZSBlaXRoZXIgdGhlIGluZGV4IChmb3IgYXJyYXkgZGF0YSBzb3VyY2VzKVxuICogb3IgcHJvcGVydHkgbmFtZSAoZm9yIG9iamVjdCBkYXRhIHNvdXJjZXMpIG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIGNvbGxlY3Rpb24uIElmIGEgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvblxuICogaXMgdXNlZCwgdGhlIHJlc3VsdCBvZiB0aGF0IGV4cHJlc3Npb24gd2lsbCBiZSBzZXQgYXMgdGhlIHZhbHVlIG9mIHRoZSBgb3B0aW9uYCBhbmQgYHNlbGVjdGAgZWxlbWVudHMuXG4gKlxuICpcbiAqICMjIyBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKipcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogQmUgY2FyZWZ1bCB3aGVuIHVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKiBpbiB0aGUgc2FtZSBleHByZXNzaW9uLlxuICogPC9kaXY+XG4gKlxuICogR2l2ZW4gdGhpcyBhcnJheSBvZiBpdGVtcyBvbiB0aGUgJHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiAkc2NvcGUuaXRlbXMgPSBbe1xuICogICBpZDogMSxcbiAqICAgbGFiZWw6ICdhTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdhU3ViSXRlbScgfVxuICogfSwge1xuICogICBpZDogMixcbiAqICAgbGFiZWw6ICdiTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdiU3ViSXRlbScgfVxuICogfV07XG4gKiBgYGBcbiAqXG4gKiBUaGlzIHdpbGwgd29yazpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAqIGBgYFxuICogYGBganNcbiAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXTtcbiAqIGBgYFxuICpcbiAqIGJ1dCB0aGlzIHdpbGwgbm90IHdvcms6XG4gKlxuICogYGBgaHRtbFxuICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbS5zdWJJdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAqIGBgYFxuICogYGBganNcbiAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXS5zdWJJdGVtO1xuICogYGBgXG4gKlxuICogSW4gYm90aCBleGFtcGxlcywgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYXBwbGllZCBzdWNjZXNzZnVsbHkgdG8gZWFjaCBgaXRlbWAgaW4gdGhlXG4gKiBgaXRlbXNgIGFycmF5LiBCZWNhdXNlIHRoZSBzZWxlY3RlZCBvcHRpb24gaGFzIGJlZW4gc2V0IHByb2dyYW1tYXRpY2FsbHkgaW4gdGhlIGNvbnRyb2xsZXIsIHRoZVxuICogKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhbHNvIGFwcGxpZWQgdG8gdGhlIGBuZ01vZGVsYCB2YWx1ZS4gSW4gdGhlIGZpcnN0IGV4YW1wbGUsIHRoZVxuICogYG5nTW9kZWxgIHZhbHVlIGlzIGBpdGVtc1swXWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uaWRgIHdpdGhcbiAqIG5vIGlzc3VlLiBJbiB0aGUgc2Vjb25kIGV4YW1wbGUsIHRoZSBgbmdNb2RlbGAgdmFsdWUgaXMgYGl0ZW1zWzBdLnN1Ykl0ZW1gIGFuZCB0aGUgKipgdHJhY2sgYnlgKipcbiAqIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGBpdGVtc1swXS5zdWJJdGVtLmlkYCAod2hpY2ggaXMgdW5kZWZpbmVkKS4gQXMgYSByZXN1bHQsIHRoZSBtb2RlbCB2YWx1ZVxuICogaXMgbm90IG1hdGNoZWQgYWdhaW5zdCBhbnkgYDxvcHRpb24+YCBhbmQgdGhlIGA8c2VsZWN0PmAgYXBwZWFycyBhcyBoYXZpbmcgbm8gc2VsZWN0ZWQgdmFsdWUuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgQW5ndWxhckpTIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb259IG5nT3B0aW9ucyBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtczpcbiAqXG4gKiAgICogZm9yIGFycmF5IGRhdGEgc291cmNlczpcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgIHwgb3JkZXJCeTpgb3JkZXJleHByYCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICAgIChmb3IgaW5jbHVkaW5nIGEgZmlsdGVyIHdpdGggYHRyYWNrIGJ5YClcbiAqICAgKiBmb3Igb2JqZWN0IGRhdGEgc291cmNlczpcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yIChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYFxuICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICpcbiAqIFdoZXJlOlxuICpcbiAqICAgKiBgYXJyYXlgIC8gYG9iamVjdGA6IGFuIGV4cHJlc3Npb24gd2hpY2ggZXZhbHVhdGVzIHRvIGFuIGFycmF5IC8gb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqICAgKiBgdmFsdWVgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGVhY2ggaXRlbSBpbiB0aGUgYGFycmF5YCBvciBlYWNoIHByb3BlcnR5IHZhbHVlXG4gKiAgICAgIG9mIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXG4gKiAgICogYGtleWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gYSBwcm9wZXJ0eSBuYW1lIGluIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXG4gKiAgICogYGxhYmVsYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgbGFiZWwgZm9yIGA8b3B0aW9uPmAgZWxlbWVudC4gVGhlXG4gKiAgICAgYGV4cHJlc3Npb25gIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLlxuICogICAqIGBzZWxlY3RgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBvZiB0aGUgcGFyZW50IGA8c2VsZWN0PmBcbiAqICAgICAgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgYHNlbGVjdGAgZXhwcmVzc2lvbiB3aWxsIGRlZmF1bHQgdG8gYHZhbHVlYC5cbiAqICAgKiBgZ3JvdXBgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZ3JvdXAgb3B0aW9ucyB1c2luZyB0aGUgYDxvcHRncm91cD5gXG4gKiAgICAgIERPTSBlbGVtZW50LlxuICogICAqIGBkaXNhYmxlYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGRpc2FibGUgdGhlIHJlbmRlcmVkIGA8b3B0aW9uPmBcbiAqICAgICAgZWxlbWVudC4gUmV0dXJuIGB0cnVlYCB0byBkaXNhYmxlLlxuICogICAqIGB0cmFja2V4cHJgOiBVc2VkIHdoZW4gd29ya2luZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHMuIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmVcbiAqICAgICAgdXNlZCB0byBpZGVudGlmeSB0aGUgb2JqZWN0cyBpbiB0aGUgYXJyYXkuIFRoZSBgdHJhY2tleHByYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZVxuICogICAgIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLiBXaXRoIHRoaXMgdGhlIHNlbGVjdGlvbiBpcyBwcmVzZXJ2ZWRcbiAqICAgICAgZXZlbiB3aGVuIHRoZSBvcHRpb25zIGFyZSByZWNyZWF0ZWQgKGUuZy4gcmVsb2FkZWQgZnJvbSB0aGUgc2VydmVyKS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgVGhlIGNvbnRyb2wgaXMgY29uc2lkZXJlZCB2YWxpZCBvbmx5IGlmIHZhbHVlIGlzIGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdBdHRyU2l6ZSBzZXRzIHRoZSBzaXplIG9mIHRoZSBzZWxlY3QgZWxlbWVudCBkeW5hbWljYWxseS4gVXNlcyB0aGVcbiAqIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIy1uZ2F0dHItZm9yLWJpbmRpbmctdG8tYXJiaXRyYXJ5LWF0dHJpYnV0ZXMgbmdBdHRyfSBkaXJlY3RpdmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzZWxlY3RFeGFtcGxlXCIgbmFtZT1cInNlbGVjdFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3NlbGVjdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFtcbiAgICAgICAgICAgICAge25hbWU6J2JsYWNrJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J3doaXRlJywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J2JsdWUnLCBzaGFkZTonZGFyaycsIG5vdEFuT3B0aW9uOiB0cnVlfSxcbiAgICAgICAgICAgICAge25hbWU6J3llbGxvdycsIHNoYWRlOidsaWdodCcsIG5vdEFuT3B0aW9uOiBmYWxzZX1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUubXlDb2xvciA9ICRzY29wZS5jb2xvcnNbMl07IC8vIHJlZFxuICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IG5nLW1vZGVsPVwiY29sb3IubmFtZVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb2xvci5ub3RBbk9wdGlvblwiPiBEaXNhYmxlZD88L2xhYmVsPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMucHVzaCh7fSlcIj5hZGQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIDxsYWJlbD5Db2xvciAobnVsbCBub3QgYWxsb3dlZCk6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj48L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIGFsbG93ZWQpOlxuICAgICAgICAgIDxzcGFuICBjbGFzcz1cIm51bGxhYmxlXCI+XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tIGNob29zZSBjb2xvciAtLTwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9zcGFuPjwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgZ3JvdXBlZCBieSBzaGFkZSwgd2l0aCBzb21lIGRpc2FibGVkOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIlxuICAgICAgICAgICAgICAgICAgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZGlzYWJsZSB3aGVuIGNvbG9yLm5vdEFuT3B0aW9uIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuXG5cbiAgICAgICAgICBTZWxlY3QgPGJ1dHRvbiBuZy1jbGljaz1cIm15Q29sb3IgPSB7IG5hbWU6J25vdCBpbiBsaXN0Jywgc2hhZGU6ICdvdGhlcicgfVwiPmJvZ3VzPC9idXR0b24+LlxuICAgICAgICAgIDxici8+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpteUNvbG9yfSB9fVxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJib3JkZXI6c29saWQgMXB4IGJsYWNrOyBoZWlnaHQ6MjBweFwiXG4gICAgICAgICAgICAgICBuZy1zdHlsZT1cInsnYmFja2dyb3VuZC1jb2xvcic6bXlDb2xvci5uYW1lfVwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctb3B0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdyZWQnKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215Q29sb3InKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5jc3MoJ3NlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0gb3B0aW9uJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnYmxhY2snKTtcbiAgICAgICAgICAgZWxlbWVudChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0gb3B0aW9uJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnbnVsbCcpO1xuICAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbi8vICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTExMTExMTAwMDAwMDAwMDAwMjIyMjIyMjIyMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQwMDAwMDAwMDAwMDAwNTU1NTU1NTU1NTU1NTAwMDAwMDAwMDY2NjY2NjY2NjY2NjYwMDAwMDAwNzc3Nzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODgwMDAwMDAwMDAwMDAwMDAwMDAwOTk5OTk5OTk5OVxudmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFskXFx3XVskXFx3XSopfCg/OlxcKFxccyooWyRcXHddWyRcXHddKilcXHMqLFxccyooWyRcXHddWyRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxOiB2YWx1ZSBleHByZXNzaW9uICh2YWx1ZUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMjogbGFiZWwgZXhwcmVzc2lvbiAoZGlzcGxheUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzogZ3JvdXAgYnkgZXhwcmVzc2lvbiAoZ3JvdXBCeUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNDogZGlzYWJsZSB3aGVuIGV4cHJlc3Npb24gKGRpc2FibGVXaGVuRm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA1OiBhcnJheSBpdGVtIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDY6IG9iamVjdCBpdGVtIGtleSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA3OiBvYmplY3QgaXRlbSB2YWx1ZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA4OiBjb2xsZWN0aW9uIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDk6IHRyYWNrIGJ5IGV4cHJlc3Npb25cbi8qIGVzbGludC1lbmFibGUgKi9cblxuXG52YXIgbmdPcHRpb25zRGlyZWN0aXZlID0gWyckY29tcGlsZScsICckZG9jdW1lbnQnLCAnJHBhcnNlJywgZnVuY3Rpb24oJGNvbXBpbGUsICRkb2N1bWVudCwgJHBhcnNlKSB7XG5cbiAgZnVuY3Rpb24gcGFyc2VPcHRpb25zRXhwcmVzc2lvbihvcHRpb25zRXhwLCBzZWxlY3RFbGVtZW50LCBzY29wZSkge1xuXG4gICAgdmFyIG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCk7XG4gICAgaWYgKCEobWF0Y2gpKSB7XG4gICAgICB0aHJvdyBuZ09wdGlvbnNNaW5FcnIoJ2lleHAnLFxuICAgICAgICAnRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICcgK1xuICAgICAgICAnXFwnX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl9cXCcnICtcbiAgICAgICAgJyBidXQgZ290IFxcJ3swfVxcJy4gRWxlbWVudDogezF9JyxcbiAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgdGhlIHBhcnRzIGZyb20gdGhlIG5nT3B0aW9ucyBleHByZXNzaW9uXG5cbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIHZhbHVlTmFtZSA9IG1hdGNoWzVdIHx8IG1hdGNoWzddO1xuICAgIC8vIFRoZSB2YXJpYWJsZSBuYW1lIGZvciB0aGUga2V5IG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIGtleU5hbWUgPSBtYXRjaFs2XTtcblxuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIGEgbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciBzZWxlY3RBcyA9IC8gYXMgLy50ZXN0KG1hdGNoWzBdKSAmJiBtYXRjaFsxXTtcbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCB0byB0cmFjayB0aGUgaWQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIG9wdGlvbnMgY29sbGVjdGlvblxuICAgIHZhciB0cmFja0J5ID0gbWF0Y2hbOV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgbm8gbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpO1xuICAgIHZhciBzZWxlY3RBc0ZuID0gc2VsZWN0QXMgJiYgJHBhcnNlKHNlbGVjdEFzKTtcbiAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuIHx8IHZhbHVlRm47XG4gICAgdmFyIHRyYWNrQnlGbiA9IHRyYWNrQnkgJiYgJHBhcnNlKHRyYWNrQnkpO1xuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBieSB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gdHJhY2sgdGhlIG9wdGlvblxuICAgIC8vIGlmIHdlIGhhdmUgYSB0cmFja0ZuIHRoZW4gdXNlIHRoYXQgKHBhc3Npbmcgc2NvcGUgYW5kIGxvY2FscylcbiAgICAvLyBvdGhlcndpc2UganVzdCBoYXNoIHRoZSBnaXZlbiB2aWV3VmFsdWVcbiAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlRm4gPSB0cmFja0J5ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBsb2NhbHMpIHsgcmV0dXJuIHRyYWNrQnlGbihzY29wZSwgbG9jYWxzKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIYXNoT2ZWYWx1ZSh2YWx1ZSkgeyByZXR1cm4gaGFzaEtleSh2YWx1ZSk7IH07XG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJldHVybiBnZXRUcmFja0J5VmFsdWVGbih2YWx1ZSwgZ2V0TG9jYWxzKHZhbHVlLCBrZXkpKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSk7XG4gICAgdmFyIGdyb3VwQnlGbiA9ICRwYXJzZShtYXRjaFszXSB8fCAnJyk7XG4gICAgdmFyIGRpc2FibGVXaGVuRm4gPSAkcGFyc2UobWF0Y2hbNF0gfHwgJycpO1xuICAgIHZhciB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs4XSk7XG5cbiAgICB2YXIgbG9jYWxzID0ge307XG4gICAgdmFyIGdldExvY2FscyA9IGtleU5hbWUgPyBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBsb2NhbHNba2V5TmFtZV0gPSBrZXk7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbG9jYWxzO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIE9wdGlvbihzZWxlY3RWYWx1ZSwgdmlld1ZhbHVlLCBsYWJlbCwgZ3JvdXAsIGRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlID0gc2VsZWN0VmFsdWU7XG4gICAgICB0aGlzLnZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcykge1xuICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXM7XG5cbiAgICAgIGlmICgha2V5TmFtZSAmJiBpc0FycmF5TGlrZShvcHRpb25WYWx1ZXMpKSB7XG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBvcHRpb25WYWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgICBpZiAob3B0aW9uVmFsdWVzLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgIG9wdGlvblZhbHVlc0tleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25WYWx1ZXNLZXlzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0cmFja0J5OiB0cmFja0J5LFxuICAgICAgZ2V0VHJhY2tCeVZhbHVlOiBnZXRUcmFja0J5VmFsdWUsXG4gICAgICBnZXRXYXRjaGFibGVzOiAkcGFyc2UodmFsdWVzRm4sIGZ1bmN0aW9uKG9wdGlvblZhbHVlcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBjb2xsZWN0aW9uIG9mIHRoaW5ncyB0aGF0IHdlIHdvdWxkIGxpa2UgdG8gd2F0Y2ggKHdhdGNoZWRBcnJheSlcbiAgICAgICAgLy8gc28gdGhhdCB0aGV5IGNhbiBhbGwgYmUgd2F0Y2hlZCB1c2luZyBhIHNpbmdsZSAkd2F0Y2hDb2xsZWN0aW9uXG4gICAgICAgIC8vIHRoYXQgb25seSBydW5zIHRoZSBoYW5kbGVyIG9uY2UgaWYgYW55dGhpbmcgY2hhbmdlc1xuICAgICAgICB2YXIgd2F0Y2hlZEFycmF5ID0gW107XG4gICAgICAgIG9wdGlvblZhbHVlcyA9IG9wdGlvblZhbHVlcyB8fCBbXTtcblxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IChvcHRpb25WYWx1ZXMgPT09IG9wdGlvblZhbHVlc0tleXMpID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcblxuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHModmFsdWUsIGtleSk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmFsdWUsIGxvY2Fscyk7XG4gICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNwbGF5Rm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBsYWJlbCBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChsYWJlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNhYmxlV2hlbkZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgZGlzYWJsZSBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZVdoZW4gPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goZGlzYWJsZVdoZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlZEFycmF5O1xuICAgICAgfSksXG5cbiAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBvcHRpb25JdGVtcyA9IFtdO1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVNYXAgPSB7fTtcblxuICAgICAgICAvLyBUaGUgb3B0aW9uIHZhbHVlcyB3ZXJlIGFscmVhZHkgY29tcHV0ZWQgaW4gdGhlIGBnZXRXYXRjaGFibGVzYCBmbixcbiAgICAgICAgLy8gd2hpY2ggbXVzdCBoYXZlIGJlZW4gY2FsbGVkIHRvIHRyaWdnZXIgYGdldE9wdGlvbnNgXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW107XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzTGVuZ3RoID0gb3B0aW9uVmFsdWVzS2V5cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IGdldExvY2Fscyh2YWx1ZSwga2V5KTtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gdmlld1ZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmlld1ZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGRpc2FibGVkID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgb3B0aW9uSXRlbSA9IG5ldyBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgICBvcHRpb25JdGVtcy5wdXNoKG9wdGlvbkl0ZW0pO1xuICAgICAgICAgIHNlbGVjdFZhbHVlTWFwW3NlbGVjdFZhbHVlXSA9IG9wdGlvbkl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1zOiBvcHRpb25JdGVtcyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcDogc2VsZWN0VmFsdWVNYXAsXG4gICAgICAgICAgZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RWYWx1ZU1hcFtnZXRUcmFja0J5VmFsdWUodmFsdWUpXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldFZpZXdWYWx1ZUZyb21PcHRpb246IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBjb3VsZCBiZSBhbiBvYmplY3QgdGhhdCBtYXkgYmUgbXV0YXRlZCBieSB0aGUgYXBwbGljYXRpb24sXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgYSBjb3B5IGFuZCBub3QgcmV0dXJuIHRoZSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9uIHRoZSBvcHRpb24uXG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeSA/IGNvcHkob3B0aW9uLnZpZXdWYWx1ZSkgOiBvcHRpb24udmlld1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cblxuICAvLyB3ZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS5cbiAgdmFyIG9wdGlvblRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpLFxuICAgICAgb3B0R3JvdXBUZW1wbGF0ZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xuXG4gICAgZnVuY3Rpb24gbmdPcHRpb25zUG9zdExpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIHZhciBtdWx0aXBsZSA9IGF0dHIubXVsdGlwbGU7XG5cbiAgICAgIC8vIFRoZSBlbXB0eU9wdGlvbiBhbGxvd3MgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciB0byBwcm92aWRlIHRoZWlyIG93biBjdXN0b20gXCJlbXB0eVwiXG4gICAgICAvLyBvcHRpb24gd2hlbiB0aGUgdmlld1ZhbHVlIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9uIHZhbHVlcy5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBjaGlsZHJlbiA9IHNlbGVjdEVsZW1lbnQuY2hpbGRyZW4oKSwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLmhhc0VtcHR5T3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uID0gY2hpbGRyZW4uZXEoaSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHByb3ZpZGVkRW1wdHlPcHRpb24gPSAhIXNlbGVjdEN0cmwuZW1wdHlPcHRpb247XG5cbiAgICAgIHZhciB1bmtub3duT3B0aW9uID0ganFMaXRlKG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSkpO1xuICAgICAgdW5rbm93bk9wdGlvbi52YWwoJz8nKTtcblxuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB2YXIgbmdPcHRpb25zID0gcGFyc2VPcHRpb25zRXhwcmVzc2lvbihhdHRyLm5nT3B0aW9ucywgc2VsZWN0RWxlbWVudCwgc2NvcGUpO1xuICAgICAgLy8gVGhpcyBzdG9yZXMgdGhlIG5ld2x5IGNyZWF0ZWQgb3B0aW9ucyBiZWZvcmUgdGhleSBhcmUgYXBwZW5kZWQgdG8gdGhlIHNlbGVjdC5cbiAgICAgIC8vIFNpbmNlIHRoZSBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBmcmFnbWVudCB3aGVuIGl0IGlzIGFwcGVuZGVkLFxuICAgICAgLy8gd2Ugb25seSBuZWVkIHRvIGNyZWF0ZSBpdCBvbmNlLlxuICAgICAgdmFyIGxpc3RGcmFnbWVudCA9ICRkb2N1bWVudFswXS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgIC8vIE92ZXJ3cml0ZSB0aGUgaW1wbGVtZW50YXRpb24uIG5nT3B0aW9ucyBkb2Vzbid0IHVzZSBoYXNoZXNcbiAgICAgIHNlbGVjdEN0cmwuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuICc/JztcbiAgICAgIH07XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgY29udHJvbGxlciBtZXRob2RzIGZvciBtdWx0aXBsZSBzZWxlY3RhYmxlIG9wdGlvbnNcbiAgICAgIGlmICghbXVsdGlwbGUpIHtcblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU5nT3B0aW9uc1ZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gb3B0aW9ucy5zZWxlY3RWYWx1ZU1hcFtzZWxlY3RFbGVtZW50LnZhbCgpXTtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKHZhbHVlKTtcblxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIHNlbGVjdGVkIGF0dHJpYnV0ZSBmcm9tIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIG9wdGlvblxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgc2NyZWVuIHJlYWRlcnMgbWlnaHQgZ2V0IGNvbmZ1c2VkXG4gICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uKSBzZWxlY3RlZE9wdGlvbi5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcblxuICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIC8vIERvbid0IHVwZGF0ZSB0aGUgb3B0aW9uIHdoZW4gaXQgaXMgYWxyZWFkeSBzZWxlY3RlZC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCB0aGUgYnJvd3NlciB3aWxsIHNlbGVjdCB0aGUgZmlyc3Qgb3B0aW9uIGJ5IGRlZmF1bHQuIEluIHRoYXQgY2FzZSxcbiAgICAgICAgICAgIC8vIG1vc3QgcHJvcGVydGllcyBhcmUgc2V0IGF1dG9tYXRpY2FsbHkgLSBleGNlcHQgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlLCB3aGljaCB3ZVxuICAgICAgICAgICAgLy8gc2V0IGFsd2F5c1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0RWxlbWVudFswXS52YWx1ZSAhPT0gb3B0aW9uLnNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLnVuc2VsZWN0RW1wdHlPcHRpb24oKTtcblxuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50WzBdLnZhbHVlID0gb3B0aW9uLnNlbGVjdFZhbHVlO1xuICAgICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAocHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLnNlbGVjdEVtcHR5T3B0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdEN0cmwudW5rbm93bk9wdGlvbi5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC51cGRhdGVVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE5nT3B0aW9uc1ZhbHVlKCkge1xuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gb3B0aW9ucy5zZWxlY3RWYWx1ZU1hcFtzZWxlY3RFbGVtZW50LnZhbCgpXTtcblxuICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbiAmJiAhc2VsZWN0ZWRPcHRpb24uZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwudW5zZWxlY3RFbXB0eU9wdGlvbigpO1xuICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXRWaWV3VmFsdWVGcm9tT3B0aW9uKHNlbGVjdGVkT3B0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIGB0cmFjayBieWAgdGhlbiB3ZSBtdXN0IHdhdGNoIHRoZSB0cmFja2VkIHZhbHVlIG9uIHRoZSBtb2RlbFxuICAgICAgICAvLyBzaW5jZSBuZ01vZGVsIG9ubHkgd2F0Y2hlcyBmb3Igb2JqZWN0IGlkZW50aXR5IGNoYW5nZVxuICAgICAgICAvLyBGSVhNRTogV2hlbiBhIHVzZXIgc2VsZWN0cyBhbiBvcHRpb24sIHRoaXMgd2F0Y2ggd2lsbCBmaXJlIG5lZWRsZXNzbHlcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBuZ09wdGlvbnMuZ2V0VHJhY2tCeVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpOyB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IG5nTW9kZWxDdHJsLiRyZW5kZXIoKTsgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU5nT3B0aW9uc011bHRpcGxlKHZhbHVlcykge1xuICAgICAgICAgIC8vIE9ubHkgc2V0IGA8b3B0aW9uPi5zZWxlY3RlZGAgaWYgbmVjZXNzYXJ5LCBpbiBvcmRlciB0byBwcmV2ZW50IHNvbWUgYnJvd3NlcnMgZnJvbVxuICAgICAgICAgIC8vIHNjcm9sbGluZyB0byBgPG9wdGlvbj5gIGVsZW1lbnRzIHRoYXQgYXJlIG91dHNpZGUgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCdzIHZpZXdwb3J0LlxuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9ucyA9IHZhbHVlcyAmJiB2YWx1ZXMubWFwKGdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uKSB8fCBbXTtcblxuICAgICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uZWxlbWVudC5zZWxlY3RlZCAmJiAhaW5jbHVkZXMoc2VsZWN0ZWRPcHRpb25zLCBvcHRpb24pKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNNdWx0aXBsZSgpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBzZWxlY3RFbGVtZW50LnZhbCgpIHx8IFtdLFxuICAgICAgICAgICAgICBzZWxlY3Rpb25zID0gW107XG5cbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVmFsdWVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbdmFsdWVdO1xuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmRpc2FibGVkKSBzZWxlY3Rpb25zLnB1c2gob3B0aW9ucy5nZXRWaWV3VmFsdWVGcm9tT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbnM7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIGB0cmFjayBieWAgdGhlbiB3ZSBtdXN0IHdhdGNoIHRoZXNlIHRyYWNrZWQgdmFsdWVzIG9uIHRoZSBtb2RlbFxuICAgICAgICAvLyBzaW5jZSBuZ01vZGVsIG9ubHkgd2F0Y2hlcyBmb3Igb2JqZWN0IGlkZW50aXR5IGNoYW5nZVxuICAgICAgICBpZiAobmdPcHRpb25zLnRyYWNrQnkpIHtcblxuICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBiZWZvcmUgY2FsbGluZyBzZWxlY3RFbGVtZW50LmVtcHR5KCkgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbFxuICAgICAgICAvLyByZW1vdmUgdGhlIGxhYmVsIGZyb20gdGhlIGVsZW1lbnQuIHd0Zj9cbiAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmUoKTtcblxuICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0XG4gICAgICAgICRjb21waWxlKHNlbGVjdEN0cmwuZW1wdHlPcHRpb24pKHNjb3BlKTtcblxuICAgICAgICBpZiAoc2VsZWN0Q3RybC5lbXB0eU9wdGlvblswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgICAgICAvLyBUaGlzIG1lYW5zIHRoZSBlbXB0eSBvcHRpb24gaGFzIGN1cnJlbnRseSBubyBhY3R1YWwgRE9NIG5vZGUsIHByb2JhYmx5IGJlY2F1c2VcbiAgICAgICAgICAvLyBpdCBoYXMgYmVlbiBtb2RpZmllZCBieSBhIHRyYW5zY2x1c2lvbiBkaXJlY3RpdmUuXG4gICAgICAgICAgc2VsZWN0Q3RybC5oYXNFbXB0eU9wdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gUmVkZWZpbmUgdGhlIHJlZ2lzdGVyT3B0aW9uIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGNhdGNoXG4gICAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGFyZSBhZGRlZCBieSBuZ0lmIGV0Yy4gKHJlbmRlcmluZyBvZiB0aGUgbm9kZSBpcyBhc3luYyBiZWNhdXNlIG9mXG4gICAgICAgICAgLy8gbGF6eSB0cmFuc2NsdXNpb24pXG4gICAgICAgICAgc2VsZWN0Q3RybC5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvblNjb3BlLCBvcHRpb25FbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbkVsLnZhbCgpID09PSAnJykge1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLmhhc0VtcHR5T3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbiA9IG9wdGlvbkVsO1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uLnJlbW92ZUNsYXNzKCduZy1zY29wZScpO1xuICAgICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIG5ldyBlbXB0eSBvcHRpb24gaXMgc2VsZWN0ZWQgaWYgcHJldmlvdXNseSBubyBvcHRpb24gd2FzIHNlbGVjdGVkXG4gICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcblxuICAgICAgICAgICAgICBvcHRpb25FbC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmhhc0VtcHR5T3B0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgICAgLy8gYmVjb21lcyB0aGUgY29tcGlsYXRpb24gcm9vdFxuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBzZWxlY3RFbGVtZW50LmVtcHR5KCk7XG5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhpcyBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBvcHRpb25zIG9iamVjdCBpcyBkZWZpbmVkXG4gICAgICAvLyB3aGVuIHdlIGZpcnN0IGhpdCBpdCBpbiB3cml0ZU5nT3B0aW9uc1ZhbHVlXG4gICAgICB1cGRhdGVPcHRpb25zKCk7XG5cbiAgICAgIC8vIFdlIHdpbGwgcmUtcmVuZGVyIHRoZSBvcHRpb24gZWxlbWVudHMgaWYgdGhlIG9wdGlvbiB2YWx1ZXMgb3IgbGFiZWxzIGNoYW5nZVxuICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihuZ09wdGlvbnMuZ2V0V2F0Y2hhYmxlcywgdXBkYXRlT3B0aW9ucyk7XG5cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gICAgICBmdW5jdGlvbiBhZGRPcHRpb25FbGVtZW50KG9wdGlvbiwgcGFyZW50KSB7XG4gICAgICAgIHZhciBvcHRpb25FbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICB1cGRhdGVPcHRpb25FbGVtZW50KG9wdGlvbiwgb3B0aW9uRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKHZpZXdWYWx1ZSk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gb3B0aW9uICYmIG9wdGlvbi5lbGVtZW50O1xuXG4gICAgICAgIGlmIChlbGVtZW50ICYmICFlbGVtZW50LnNlbGVjdGVkKSBlbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25FbGVtZW50KG9wdGlvbiwgZWxlbWVudCkge1xuICAgICAgICBvcHRpb24uZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBvcHRpb24uZGlzYWJsZWQ7XG4gICAgICAgIC8vIE5PVEU6IFRoZSBsYWJlbCBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIHZhbHVlLCBvdGhlcndpc2UgSUUxMC8xMS9FREdFIGNyZWF0ZSB1bnJlc3BvbnNpdmVcbiAgICAgICAgLy8gc2VsZWN0cyBpbiBjZXJ0YWluIGNpcmN1bXN0YW5jZXMgd2hlbiBtdWx0aXBsZSBzZWxlY3RzIGFyZSBuZXh0IHRvIGVhY2ggb3RoZXIgYW5kIGRpc3BsYXlcbiAgICAgICAgLy8gdGhlIG9wdGlvbiBsaXN0IGluIGxpc3Rib3ggc3R5bGUsIGkuZS4gdGhlIHNlbGVjdCBpcyBbbXVsdGlwbGVdLCBvciBzcGVjaWZpZXMgYSBbc2l6ZV0uXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMTMxNCBmb3IgbW9yZSBpbmZvLlxuICAgICAgICAvLyBUaGlzIGlzIHVuZm9ydHVuYXRlbHkgdW50ZXN0YWJsZSB3aXRoIHVuaXQgLyBlMmUgdGVzdHNcbiAgICAgICAgaWYgKG9wdGlvbi5sYWJlbCAhPT0gZWxlbWVudC5sYWJlbCkge1xuICAgICAgICAgIGVsZW1lbnQubGFiZWwgPSBvcHRpb24ubGFiZWw7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnZhbHVlID0gb3B0aW9uLnNlbGVjdFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKCkge1xuICAgICAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IG9wdGlvbnMgJiYgc2VsZWN0Q3RybC5yZWFkVmFsdWUoKTtcblxuICAgICAgICAvLyBXZSBtdXN0IHJlbW92ZSBhbGwgY3VycmVudCBvcHRpb25zLCBidXQgY2Fubm90IHNpbXBseSBzZXQgaW5uZXJIVE1MID0gbnVsbFxuICAgICAgICAvLyBzaW5jZSB0aGUgcHJvdmlkZWRFbXB0eU9wdGlvbiBtaWdodCBoYXZlIGFuIG5nSWYgb24gaXQgdGhhdCBpbnNlcnRzIGNvbW1lbnRzIHdoaWNoIHdlXG4gICAgICAgIC8vIG11c3QgcHJlc2VydmUuXG4gICAgICAgIC8vIEluc3RlYWQsIGl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBvcHRpb24gZWxlbWVudHMgYW5kIHJlbW92ZSB0aGVtIG9yIHRoZWlyIG9wdGdyb3VwXG4gICAgICAgIC8vIHBhcmVudHNcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSBvcHRpb25zLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9uLmdyb3VwKSkge1xuICAgICAgICAgICAgICBqcUxpdGVSZW1vdmUob3B0aW9uLmVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqcUxpdGVSZW1vdmUob3B0aW9uLmVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBuZ09wdGlvbnMuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgIHZhciBncm91cEVsZW1lbnRNYXAgPSB7fTtcblxuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZW1wdHkgb3B0aW9uIGlzIGFsd2F5cyB0aGVyZSBpZiBpdCB3YXMgZXhwbGljaXRseSBwcm92aWRlZFxuICAgICAgICBpZiAocHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZChzZWxlY3RDdHJsLmVtcHR5T3B0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiBhZGRPcHRpb24ob3B0aW9uKSB7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcblxuICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9uLmdyb3VwKSkge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyB0byBsaXZlIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdyb3VwXG4gICAgICAgICAgICBncm91cEVsZW1lbnQgPSBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXTtcblxuICAgICAgICAgICAgaWYgKCFncm91cEVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBvcHRHcm91cFRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgIGxpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChncm91cEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbGFiZWwgb24gdGhlIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gXCJudWxsXCIgaXMgc3BlY2lhbCBjYXNlZCBiZWNhdXNlIG9mIFNhZmFyaVxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXAgPT09IG51bGwgPyAnbnVsbCcgOiBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXSA9IGdyb3VwRWxlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGdyb3VwRWxlbWVudCk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyBub3QgaW4gYSBncm91cFxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGxpc3RGcmFnbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxlY3RFbGVtZW50WzBdLmFwcGVuZENoaWxkKGxpc3RGcmFnbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBpc05vdFByaW1pdGl2ZSA9IG5nT3B0aW9ucy50cmFja0J5IHx8IG11bHRpcGxlO1xuICAgICAgICAgIGlmIChpc05vdFByaW1pdGl2ZSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVxdWlyZTogWydzZWxlY3QnLCAnbmdNb2RlbCddLFxuICAgIGxpbms6IHtcbiAgICAgIHByZTogZnVuY3Rpb24gbmdPcHRpb25zUHJlTGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgLy8gRGVhY3RpdmF0ZSB0aGUgU2VsZWN0Q29udHJvbGxlci5yZWdpc3RlciBtZXRob2QgdG8gcHJldmVudFxuICAgICAgICAvLyBvcHRpb24gZGlyZWN0aXZlcyBmcm9tIGFjY2lkZW50YWxseSByZWdpc3RlcmluZyB0aGVtc2VsdmVzXG4gICAgICAgIC8vIChhbmQgdW53YW50ZWQgJGRlc3Ryb3kgaGFuZGxlcnMgZXRjLilcbiAgICAgICAgY3RybHNbMF0ucmVnaXN0ZXJPcHRpb24gPSBub29wO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6IG5nT3B0aW9uc1Bvc3RMaW5rXG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdQbHVyYWxpemVcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuXG4gKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlblxuICogKHNlZSB7QGxpbmsgZ3VpZGUvaTE4biBBbmd1bGFyIGkxOG59IGRldiBndWlkZSkuIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgZGlyZWN0aXZlXG4gKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuXG4gKlxuICogIyBQbHVyYWwgY2F0ZWdvcmllcyBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzXG4gKiBUaGVyZSBhcmUgdHdvXG4gKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbClcbiAqIGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxuICpcbiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsIFwib3RoZXJcIiBjYW4gbWF0Y2hcbiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGVcbiAqIGV4cGxpY2l0IG51bWJlciBydWxlIGZvciBcIjNcIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzXG4gKiBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhpcyBkb2N1bWVudGF0aW9uLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemVcbiAqIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgYnkgcHJvdmlkaW5nIDIgYXR0cmlidXRlczogYGNvdW50YCBhbmQgYHdoZW5gLlxuICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYXR0cmlidXRlLCBgb2Zmc2V0YC5cbiAqXG4gKiBUaGUgdmFsdWUgb2YgdGhlIGBjb3VudGAgYXR0cmlidXRlIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb25cbiAqIEFuZ3VsYXIgZXhwcmVzc2lvbn07IHRoZXNlIGFyZSBldmFsdWF0ZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZm9yIGl0cyBib3VuZCB2YWx1ZS5cbiAqXG4gKiBUaGUgYHdoZW5gIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG1hcHBpbmdzIGJldHdlZW4gcGx1cmFsIGNhdGVnb3JpZXMgYW5kIHRoZSBhY3R1YWxcbiAqIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0LlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY29uZmlndXJlIG5nUGx1cmFsaXplOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICogPC9uZy1wbHVyYWxpemU+XG4gKmBgYFxuICpcbiAqIEluIHRoZSBleGFtcGxlLCBgXCIwOiBOb2JvZHkgaXMgdmlld2luZy5cImAgaXMgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUuIElmIHlvdSBkaWQgbm90XG4gKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSBcIm90aGVyXCIgY2F0ZWdvcnkgYW5kIFwiMCBwZW9wbGUgYXJlIHZpZXdpbmdcIlxuICogd291bGQgYmUgc2hvd24gaW5zdGVhZCBvZiBcIk5vYm9keSBpcyB2aWV3aW5nXCIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3JcbiAqIG90aGVyIG51bWJlcnMsIGZvciBleGFtcGxlIDEyLCBzbyB0aGF0IGluc3RlYWQgb2Ygc2hvd2luZyBcIjEyIHBlb3BsZSBhcmUgdmlld2luZ1wiLCB5b3UgY2FuXG4gKiBzaG93IFwiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmdcIi5cbiAqXG4gKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzIChge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWRcbiAqIGludG8gcGx1cmFsaXplZCBzdHJpbmdzLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgQW5ndWxhciB3aWxsIHJlcGxhY2UgYHt9YCB3aXRoXG4gKiA8c3BhbiBuZy1ub24tYmluZGFibGU+YHt7cGVyc29uQ291bnR9fWA8L3NwYW4+LiBUaGUgY2xvc2VkIGJyYWNlcyBge31gIGlzIGEgcGxhY2Vob2xkZXJcbiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LlxuICpcbiAqIElmIG5vIHJ1bGUgaXMgZGVmaW5lZCBmb3IgYSBjYXRlZ29yeSwgdGhlbiBhbiBlbXB0eSBzdHJpbmcgaXMgZGlzcGxheWVkIGFuZCBhIHdhcm5pbmcgaXMgZ2VuZXJhdGVkLlxuICogTm90ZSB0aGF0IHNvbWUgbG9jYWxlcyBkZWZpbmUgbW9yZSBjYXRlZ29yaWVzIHRoYW4gYG9uZWAgYW5kIGBvdGhlcmAuIEZvciBleGFtcGxlLCBmci1mciBkZWZpbmVzIGBmZXdgIGFuZCBgbWFueWAuXG4gKlxuICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZSB3aXRoIG9mZnNldFxuICogVGhlIGBvZmZzZXRgIGF0dHJpYnV0ZSBhbGxvd3MgZnVydGhlciBjdXN0b21pemF0aW9uIG9mIHBsdXJhbGl6ZWQgdGV4dCwgd2hpY2ggY2FuIHJlc3VsdCBpblxuICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSBcIjQgcGVvcGxlIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIixcbiAqIHlvdSBtaWdodCBkaXNwbGF5IFwiSm9obiwgS2F0ZSBhbmQgMiBvdGhlcnMgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLlxuICogVGhlIG9mZnNldCBhdHRyaWJ1dGUgYWxsb3dzIHlvdSB0byBvZmZzZXQgYSBudW1iZXIgYnkgYW55IGRlc2lyZWQgdmFsdWUuXG4gKiBMZXQncyB0YWtlIGEgbG9vayBhdCBhbiBleGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gKiAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICogPC9uZy1wbHVyYWxpemU+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCB3ZSBhcmUgc3RpbGwgdXNpbmcgdHdvIHBsdXJhbCBjYXRlZ29yaWVzKG9uZSwgb3RoZXIpLCBidXQgd2UgYWRkZWRcbiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLlxuICogV2hlbiBvbmUgcGVyc29uLCBwZXJoYXBzIEpvaG4sIHZpZXdzIHRoZSBkb2N1bWVudCwgXCJKb2huIGlzIHZpZXdpbmdcIiB3aWxsIGJlIHNob3duLlxuICogV2hlbiB0aHJlZSBwZW9wbGUgdmlldyB0aGUgZG9jdW1lbnQsIG5vIGV4cGxpY2l0IG51bWJlciBydWxlIGlzIGZvdW5kLCBzb1xuICogYW4gb2Zmc2V0IG9mIDIgaXMgdGFrZW4gb2ZmIDMsIGFuZCBBbmd1bGFyIHVzZXMgMSB0byBkZWNpZGUgdGhlIHBsdXJhbCBjYXRlZ29yeS5cbiAqIEluIHRoaXMgY2FzZSwgcGx1cmFsIGNhdGVnb3J5ICdvbmUnIGlzIG1hdGNoZWQgYW5kIFwiSm9obiwgTWFyeSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZ1wiXG4gKiBpcyBzaG93bi5cbiAqXG4gKiBOb3RlIHRoYXQgd2hlbiB5b3Ugc3BlY2lmeSBvZmZzZXRzLCB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3JcbiAqIG51bWJlcnMgZnJvbSAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG9mZnNldC4gSWYgeW91IHVzZSBhbiBvZmZzZXQgb2YgMywgZm9yIGV4YW1wbGUsXG4gKiB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3IgMCwgMSwgMiBhbmQgMy4gWW91IG11c3QgYWxzbyBwcm92aWRlIHBsdXJhbCBzdHJpbmdzIGZvclxuICogcGx1cmFsIGNhdGVnb3JpZXMgXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfGV4cHJlc3Npb259IGNvdW50IFRoZSB2YXJpYWJsZSB0byBiZSBib3VuZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3aGVuIFRoZSBtYXBwaW5nIGJldHdlZW4gcGx1cmFsIGNhdGVnb3J5IHRvIGl0cyBjb3JyZXNwb25kaW5nIHN0cmluZ3MuXG4gKiBAcGFyYW0ge251bWJlcj19IG9mZnNldCBPZmZzZXQgdG8gZGVkdWN0IGZyb20gdGhlIHRvdGFsIG51bWJlci5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cInBsdXJhbGl6ZUV4YW1wbGVcIiBuYW1lPVwibmctcGx1cmFsaXplXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xuICAgICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8bGFiZWw+UGVyc29uIDE6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24xXCIgdmFsdWU9XCJJZ29yXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAyOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMlwiIHZhbHVlPVwiTWlza29cIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+TnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbkNvdW50XCIgdmFsdWU9XCIxXCIgLz48L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggc2ltcGxlIHBsdXJhbGl6YXRpb24gcnVsZXMgZm9yIGVuIGxvY2FsZSAtLS0+XG4gICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIG9mZnNldCAtLS0+XG4gICAgICAgICAgV2l0aCBPZmZzZXQoMik6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhvdXRPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMCk7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIGNvdW50SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcwJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMicpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgYW5kIE1pc2tvIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzMnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCc0Jyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgcGVyc29uQ291bnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjIgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24yJykpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTtcbiAgICAgICAgICBwZXJzb24xLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMS5zZW5kS2V5cygnRGknKTtcbiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMi5zZW5kS2V5cygnVm9qdGEnKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0RpLCBWb2p0YSBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsICckbG9nJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlLCAkbG9nKSB7XG4gIHZhciBCUkFDRSA9IC97fS9nLFxuICAgICAgSVNfV0hFTiA9IC9ed2hlbihNaW51cyk/KC4rKSQvO1xuXG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LFxuICAgICAgICAgIHdoZW5FeHAgPSBhdHRyLiRhdHRyLndoZW4gJiYgZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIud2hlbiksIC8vIHdlIGhhdmUge3t9fSBpbiBhdHRyc1xuICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsXG4gICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSB8fCB7fSxcbiAgICAgICAgICB3aGVuc0V4cEZucyA9IHt9LFxuICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksXG4gICAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICAgIGJyYWNlUmVwbGFjZW1lbnQgPSBzdGFydFN5bWJvbCArIG51bWJlckV4cCArICctJyArIG9mZnNldCArIGVuZFN5bWJvbCxcbiAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBhbmd1bGFyLm5vb3AsXG4gICAgICAgICAgbGFzdENvdW50O1xuXG4gICAgICBmb3JFYWNoKGF0dHIsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgdmFyIHRtcE1hdGNoID0gSVNfV0hFTi5leGVjKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICBpZiAodG1wTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgd2hlbktleSA9ICh0bXBNYXRjaFsxXSA/ICctJyA6ICcnKSArIGxvd2VyY2FzZSh0bXBNYXRjaFsyXSk7XG4gICAgICAgICAgd2hlbnNbd2hlbktleV0gPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0clthdHRyaWJ1dGVOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9yRWFjaCh3aGVucywgZnVuY3Rpb24oZXhwcmVzc2lvbiwga2V5KSB7XG4gICAgICAgIHdoZW5zRXhwRm5zW2tleV0gPSAkaW50ZXJwb2xhdGUoZXhwcmVzc2lvbi5yZXBsYWNlKEJSQUNFLCBicmFjZVJlcGxhY2VtZW50KSk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kd2F0Y2gobnVtYmVyRXhwLCBmdW5jdGlvbiBuZ1BsdXJhbGl6ZVdhdGNoQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICB2YXIgY291bnQgPSBwYXJzZUZsb2F0KG5ld1ZhbCk7XG4gICAgICAgIHZhciBjb3VudElzTmFOID0gaXNOdW1iZXJOYU4oY291bnQpO1xuXG4gICAgICAgIGlmICghY291bnRJc05hTiAmJiAhKGNvdW50IGluIHdoZW5zKSkge1xuICAgICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UuXG4gICAgICAgICAgY291bnQgPSAkbG9jYWxlLnBsdXJhbENhdChjb3VudCAtIG9mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBib3RoIGBjb3VudGAgYW5kIGBsYXN0Q291bnRgIGFyZSBOYU4sIHdlIGRvbid0IG5lZWQgdG8gcmUtcmVnaXN0ZXIgYSB3YXRjaC5cbiAgICAgICAgLy8gSW4gSlMgYE5hTiAhPT0gTmFOYCwgc28gd2UgaGF2ZSB0byBleHBsaWNpdGx5IGNoZWNrLlxuICAgICAgICBpZiAoKGNvdW50ICE9PSBsYXN0Q291bnQpICYmICEoY291bnRJc05hTiAmJiBpc051bWJlck5hTihsYXN0Q291bnQpKSkge1xuICAgICAgICAgIHdhdGNoUmVtb3ZlcigpO1xuICAgICAgICAgIHZhciB3aGVuRXhwRm4gPSB3aGVuc0V4cEZuc1tjb3VudF07XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdoZW5FeHBGbikpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAkbG9nLmRlYnVnKCduZ1BsdXJhbGl6ZTogbm8gcnVsZSBkZWZpbmVkIGZvciBcXCcnICsgY291bnQgKyAnXFwnIGluICcgKyB3aGVuRXhwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IG5vb3A7XG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50VGV4dCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBzY29wZS4kd2F0Y2god2hlbkV4cEZuLCB1cGRhdGVFbGVtZW50VGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RDb3VudCA9IGNvdW50O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFRleHQobmV3VGV4dCkge1xuICAgICAgICBlbGVtZW50LnRleHQobmV3VGV4dCB8fCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbi8qIGV4cG9ydGVkIG5nUmVwZWF0RGlyZWN0aXZlICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdSZXBlYXRcbiAqIEBtdWx0aUVsZW1lbnRcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nUmVwZWF0YCBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIGEgdGVtcGxhdGUgb25jZSBwZXIgaXRlbSBmcm9tIGEgY29sbGVjdGlvbi4gRWFjaCB0ZW1wbGF0ZVxuICogaW5zdGFuY2UgZ2V0cyBpdHMgb3duIHNjb3BlLCB3aGVyZSB0aGUgZ2l2ZW4gbG9vcCB2YXJpYWJsZSBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpdGVtLFxuICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuXG4gKlxuICogU3BlY2lhbCBwcm9wZXJ0aWVzIGFyZSBleHBvc2VkIG9uIHRoZSBsb2NhbCBzY29wZSBvZiBlYWNoIHRlbXBsYXRlIGluc3RhbmNlLCBpbmNsdWRpbmc6XG4gKlxuICogfCBWYXJpYWJsZSAgfCBUeXBlICAgICAgICAgICAgfCBEZXRhaWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGZpcnN0YCAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGZpcnN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJG1pZGRsZWAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGluIHRoZSBpdGVyYXRvci4gfFxuICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGV2ZW5gICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBldmVuIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgfFxuICogfCBgJG9kZGAgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBvZGQgKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICAgfFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAgIENyZWF0aW5nIGFsaWFzZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMgaXMgcG9zc2libGUgd2l0aCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5pdCBgbmdJbml0YH0uXG4gKiAgIFRoaXMgbWF5IGJlIHVzZWZ1bCB3aGVuLCBmb3IgaW5zdGFuY2UsIG5lc3RpbmcgbmdSZXBlYXRzLlxuICogPC9kaXY+XG4gKlxuICpcbiAqICMgSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBnZXQgYG5nUmVwZWF0YCB0byBpdGVyYXRlIG92ZXIgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIHRoZSBmb2xsb3dpbmdcbiAqIHN5bnRheDpcbiAqXG4gKiBgYGBqc1xuICogPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gbXlPYmpcIj4gLi4uIDwvZGl2PlxuICogYGBgXG4gKlxuICogSG93ZXZlciwgdGhlcmUgYXJlIGEgZmV3IGxpbWl0YXRpb25zIGNvbXBhcmVkIHRvIGFycmF5IGl0ZXJhdGlvbjpcbiAqXG4gKiAtIFRoZSBKYXZhU2NyaXB0IHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIHRoZSBvcmRlciBvZiBrZXlzXG4gKiAgIHJldHVybmVkIGZvciBhbiBvYmplY3QsIHNvIEFuZ3VsYXIgcmVsaWVzIG9uIHRoZSBvcmRlciByZXR1cm5lZCBieSB0aGUgYnJvd3NlclxuICogICB3aGVuIHJ1bm5pbmcgYGZvciBrZXkgaW4gbXlPYmpgLiBCcm93c2VycyBnZW5lcmFsbHkgZm9sbG93IHRoZSBzdHJhdGVneSBvZiBwcm92aWRpbmdcbiAqICAga2V5cyBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGRlZmluZWQsIGFsdGhvdWdoIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZW4ga2V5cyBhcmUgZGVsZXRlZFxuICogICBhbmQgcmVpbnN0YXRlZC4gU2VlIHRoZVxuICogICBbTUROIHBhZ2Ugb24gYGRlbGV0ZWAgZm9yIG1vcmUgaW5mb10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL2RlbGV0ZSNDcm9zcy1icm93c2VyX25vdGVzKS5cbiAqXG4gKiAtIGBuZ1JlcGVhdGAgd2lsbCBzaWxlbnRseSAqaWdub3JlKiBvYmplY3Qga2V5cyBzdGFydGluZyB3aXRoIGAkYCwgYmVjYXVzZVxuICogICBpdCdzIGEgcHJlZml4IHVzZWQgYnkgQW5ndWxhciBmb3IgcHVibGljIChgJGApIGFuZCBwcml2YXRlIChgJCRgKSBwcm9wZXJ0aWVzLlxuICpcbiAqIC0gVGhlIGJ1aWx0LWluIGZpbHRlcnMge0BsaW5rIG5nLm9yZGVyQnkgb3JkZXJCeX0gYW5kIHtAbGluayBuZy5maWx0ZXIgZmlsdGVyfSBkbyBub3Qgd29yayB3aXRoXG4gKiAgIG9iamVjdHMsIGFuZCB3aWxsIHRocm93IGFuIGVycm9yIGlmIHVzZWQgd2l0aCBvbmUuXG4gKlxuICogSWYgeW91IGFyZSBoaXR0aW5nIGFueSBvZiB0aGVzZSBsaW1pdGF0aW9ucywgdGhlIHJlY29tbWVuZGVkIHdvcmthcm91bmQgaXMgdG8gY29udmVydCB5b3VyIG9iamVjdCBpbnRvIGFuIGFycmF5XG4gKiB0aGF0IGlzIHNvcnRlZCBpbnRvIHRoZSBvcmRlciB0aGF0IHlvdSBwcmVmZXIgYmVmb3JlIHByb3ZpZGluZyBpdCB0byBgbmdSZXBlYXRgLiBZb3UgY291bGRcbiAqIGRvIHRoaXMgd2l0aCBhIGZpbHRlciBzdWNoIGFzIFt0b0FycmF5RmlsdGVyXShodHRwOi8vbmdtb2R1bGVzLm9yZy9tb2R1bGVzL2FuZ3VsYXItdG9BcnJheUZpbHRlcilcbiAqIG9yIGltcGxlbWVudCBhIGAkd2F0Y2hgIG9uIHRoZSBvYmplY3QgeW91cnNlbGYuXG4gKlxuICpcbiAqICMgVHJhY2tpbmcgYW5kIER1cGxpY2F0ZXNcbiAqXG4gKiBgbmdSZXBlYXRgIHVzZXMge0BsaW5rICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9ufSB0byBkZXRlY3QgY2hhbmdlcyBpblxuICogdGhlIGNvbGxlY3Rpb24uIFdoZW4gYSBjaGFuZ2UgaGFwcGVucywgYG5nUmVwZWF0YCB0aGVuIG1ha2VzIHRoZSBjb3JyZXNwb25kaW5nIGNoYW5nZXMgdG8gdGhlIERPTTpcbiAqXG4gKiAqIFdoZW4gYW4gaXRlbSBpcyBhZGRlZCwgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlIGlzIGFkZGVkIHRvIHRoZSBET00uXG4gKiAqIFdoZW4gYW4gaXRlbSBpcyByZW1vdmVkLCBpdHMgdGVtcGxhdGUgaW5zdGFuY2UgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gKiAqIFdoZW4gaXRlbXMgYXJlIHJlb3JkZXJlZCwgdGhlaXIgcmVzcGVjdGl2ZSB0ZW1wbGF0ZXMgYXJlIHJlb3JkZXJlZCBpbiB0aGUgRE9NLlxuICpcbiAqIFRvIG1pbmltaXplIGNyZWF0aW9uIG9mIERPTSBlbGVtZW50cywgYG5nUmVwZWF0YCB1c2VzIGEgZnVuY3Rpb25cbiAqIHRvIFwia2VlcCB0cmFja1wiIG9mIGFsbCBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbiBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBET00gZWxlbWVudHMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgYW4gaXRlbSBpcyBhZGRlZCB0byB0aGUgY29sbGVjdGlvbiwgYG5nUmVwZWF0YCB3aWxsIGtub3cgdGhhdCBhbGwgb3RoZXIgaXRlbXNcbiAqIGFscmVhZHkgaGF2ZSBET00gZWxlbWVudHMsIGFuZCB3aWxsIG5vdCByZS1yZW5kZXIgdGhlbS5cbiAqXG4gKiBUaGUgZGVmYXVsdCB0cmFja2luZyBmdW5jdGlvbiAod2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5KSBkb2VzIG5vdCBhbGxvd1xuICogZHVwbGljYXRlIGl0ZW1zIGluIGFycmF5cy4gVGhpcyBpcyBiZWNhdXNlIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZXMsIGl0IGlzIG5vdCBwb3NzaWJsZVxuICogdG8gbWFpbnRhaW4gYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlbiBjb2xsZWN0aW9uIGl0ZW1zIGFuZCBET00gZWxlbWVudHMuXG4gKlxuICogSWYgeW91IGRvIG5lZWQgdG8gcmVwZWF0IGR1cGxpY2F0ZSBpdGVtcywgeW91IGNhbiBzdWJzdGl0dXRlIHRoZSBkZWZhdWx0IHRyYWNraW5nIGJlaGF2aW9yXG4gKiB3aXRoIHlvdXIgb3duIHVzaW5nIHRoZSBgdHJhY2sgYnlgIGV4cHJlc3Npb24uXG4gKlxuICogRm9yIGV4YW1wbGUsIHlvdSBtYXkgdHJhY2sgaXRlbXMgYnkgdGhlIGluZGV4IG9mIGVhY2ggaXRlbSBpbiB0aGUgY29sbGVjdGlvbiwgdXNpbmcgdGhlXG4gKiBzcGVjaWFsIHNjb3BlIHByb3BlcnR5IGAkaW5kZXhgOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgJGluZGV4XCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFlvdSBtYXkgYWxzbyB1c2UgYXJiaXRyYXJ5IGV4cHJlc3Npb25zIGluIGB0cmFjayBieWAsIGluY2x1ZGluZyByZWZlcmVuY2VzIHRvIGN1c3RvbSBmdW5jdGlvbnNcbiAqIG9uIHRoZSBzY29wZTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5IG15VHJhY2tpbmdGdW5jdGlvbihuKVwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogSWYgeW91IGFyZSB3b3JraW5nIHdpdGggb2JqZWN0cyB0aGF0IGhhdmUgYSB1bmlxdWUgaWRlbnRpZmllciBwcm9wZXJ0eSwgeW91IHNob3VsZCB0cmFja1xuICogYnkgdGhpcyBpZGVudGlmaWVyIGluc3RlYWQgb2YgdGhlIG9iamVjdCBpbnN0YW5jZS4gU2hvdWxkIHlvdSByZWxvYWQgeW91ciBkYXRhIGxhdGVyLCBgbmdSZXBlYXRgXG4gKiB3aWxsIG5vdCBoYXZlIHRvIHJlYnVpbGQgdGhlIERPTSBlbGVtZW50cyBmb3IgaXRlbXMgaXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIGV2ZW4gaWYgdGhlXG4gKiBKYXZhU2NyaXB0IG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gaGF2ZSBiZWVuIHN1YnN0aXR1dGVkIGZvciBuZXcgb25lcy4gRm9yIGxhcmdlIGNvbGxlY3Rpb25zLFxuICogdGhpcyBzaWduaWZpY2FudGx5IGltcHJvdmVzIHJlbmRlcmluZyBwZXJmb3JtYW5jZS4gSWYgeW91IGRvbid0IGhhdmUgYSB1bmlxdWUgaWRlbnRpZmllcixcbiAqIGB0cmFjayBieSAkaW5kZXhgIGNhbiBhbHNvIHByb3ZpZGUgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAqIDwvZGl2PlxuICpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB0cmFjayBieSBtb2RlbC5pZFwiPlxuICogICAgICB7e21vZGVsLm5hbWV9fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8YnIgLz5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiBBdm9pZCB1c2luZyBgdHJhY2sgYnkgJGluZGV4YCB3aGVuIHRoZSByZXBlYXRlZCB0ZW1wbGF0ZSBjb250YWluc1xuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jb25lLXRpbWUtYmluZGluZyBvbmUtdGltZSBiaW5kaW5nc30uIEluIHN1Y2ggY2FzZXMsIHRoZSBgbnRoYCBET01cbiAqIGVsZW1lbnQgd2lsbCBhbHdheXMgYmUgbWF0Y2hlZCB3aXRoIHRoZSBgbnRoYCBpdGVtIG9mIHRoZSBhcnJheSwgc28gdGhlIGJpbmRpbmdzIG9uIHRoYXQgZWxlbWVudFxuICogd2lsbCBub3QgYmUgdXBkYXRlZCBldmVuIHdoZW4gdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBjaGFuZ2VzLCBlc3NlbnRpYWxseSBjYXVzaW5nIHRoZSB2aWV3IHRvIGdldFxuICogb3V0LW9mLXN5bmMgd2l0aCB0aGUgdW5kZXJseWluZyBkYXRhLlxuICogPC9kaXY+XG4gKlxuICogV2hlbiBubyBgdHJhY2sgYnlgIGV4cHJlc3Npb24gaXMgcHJvdmlkZWQsIGl0IGlzIGVxdWl2YWxlbnQgdG8gdHJhY2tpbmcgYnkgdGhlIGJ1aWx0LWluXG4gKiBgJGlkYCBmdW5jdGlvbiwgd2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5OlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJvYmogaW4gY29sbGVjdGlvbiB0cmFjayBieSAkaWQob2JqKVwiPlxuICogICAgICB7e29iai5wcm9wfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGJyIC8+XG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIGB0cmFjayBieWAgbXVzdCBhbHdheXMgYmUgdGhlIGxhc3QgZXhwcmVzc2lvbjpcbiAqIDwvZGl2PlxuICogYGBgXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gfCBvcmRlckJ5OiAnaWQnIGFzIGZpbHRlcmVkX3Jlc3VsdCB0cmFjayBieSBtb2RlbC5pZFwiPlxuICogICAgICB7e21vZGVsLm5hbWV9fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKlxuICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZ1xuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXG4gKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXIgbmctcmVwZWF0LXN0YXJ0PVwiaXRlbSBpbiBpdGVtc1wiPlxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkge3sgaXRlbSB9fVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3RlciBuZy1yZXBlYXQtZW5kPlxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogQW5kIHdpdGggYW4gaW5wdXQgb2Yge0B0eXBlIFsnQScsJ0InXX0gZm9yIHRoZSBpdGVtcyB2YXJpYWJsZSBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIG91dHB1dCB3aWxsIGV2YWx1YXRlIHRvOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBBXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQVxuICogICA8L2Zvb3Rlcj5cbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQlxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEJcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEJcbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaFxuICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSB8IHdoZW4gYSBuZXcgaXRlbSBpcyBhZGRlZCB0byB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgcmV2ZWFsZWQgYWZ0ZXIgYSBmaWx0ZXIgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9IHwgd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgZmlsdGVyZWQgb3V0IHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI21vdmUgbW92ZSB9IHwgd2hlbiBhbiBhZGphY2VudCBpdGVtIGlzIGZpbHRlcmVkIG91dCBjYXVzaW5nIGEgcmVvcmRlciBvciB3aGVuIHRoZSBpdGVtIGNvbnRlbnRzIGFyZSByZW9yZGVyZWQgfFxuICpcbiAqIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgZGVmaW5pbmcgQ1NTIGFuaW1hdGlvbnMgd2l0aCBuZ1JlcGVhdC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDEwMDBcbiAqIEBwYXJhbSB7cmVwZWF0X2V4cHJlc3Npb259IG5nUmVwZWF0IFRoZSBleHByZXNzaW9uIGluZGljYXRpbmcgaG93IHRvIGVudW1lcmF0ZSBhIGNvbGxlY3Rpb24uIFRoZXNlXG4gKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6XG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uYCDigJMgd2hlcmUgdmFyaWFibGUgaXMgdGhlIHVzZXIgZGVmaW5lZCBsb29wIHZhcmlhYmxlIGFuZCBgZXhwcmVzc2lvbmBcbiAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBhbGJ1bSBpbiBhcnRpc3QuYWxidW1zYC5cbiAqXG4gKiAgICogYChrZXksIHZhbHVlKSBpbiBleHByZXNzaW9uYCDigJMgd2hlcmUgYGtleWAgYW5kIGB2YWx1ZWAgY2FuIGJlIGFueSB1c2VyIGRlZmluZWQgaWRlbnRpZmllcnMsXG4gKiAgICAgYW5kIGBleHByZXNzaW9uYCBpcyB0aGUgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYChuYW1lLCBhZ2UpIGluIHsnYWRhbSc6MTAsICdhbWFsaWUnOjEyfWAuXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCB0cmFja2luZyBleHByZXNzaW9uXG4gKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZXhwcmVzc2lvblxuICogICAgIGlzIHNwZWNpZmllZCwgbmctcmVwZWF0IGFzc29jaWF0ZXMgZWxlbWVudHMgYnkgaWRlbnRpdHkuIEl0IGlzIGFuIGVycm9yIHRvIGhhdmVcbiAqICAgICBtb3JlIHRoYW4gb25lIHRyYWNraW5nIGV4cHJlc3Npb24gdmFsdWUgcmVzb2x2ZSB0byB0aGUgc2FtZSBrZXkuIChUaGlzIHdvdWxkIG1lYW4gdGhhdCB0d28gZGlzdGluY3Qgb2JqZWN0cyBhcmVcbiAqICAgICBtYXBwZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQsIHdoaWNoIGlzIG5vdCBwb3NzaWJsZS4pXG4gKlxuICogICAgIE5vdGUgdGhhdCB0aGUgdHJhY2tpbmcgZXhwcmVzc2lvbiBtdXN0IGNvbWUgbGFzdCwgYWZ0ZXIgYW55IGZpbHRlcnMsIGFuZCB0aGUgYWxpYXMgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zYCBpcyBlcXVpdmFsZW50IHRvIGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBET00gZWxlbWVudHNcbiAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBBIGJ1aWx0IGluIGAkaWQoKWAgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYXNzaWduIGEgdW5pcXVlXG4gKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcbiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTVxuICogICAgIGVsZW1lbnQgaW4gdGhlIHNhbWUgd2F5IGluIHRoZSBET00uXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzXG4gKiAgICAgY2FzZSB0aGUgb2JqZWN0IGlkZW50aXR5IGRvZXMgbm90IG1hdHRlci4gVHdvIG9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBhcyBsb25nIGFzIHRoZWlyIGBpZGBcbiAqICAgICBwcm9wZXJ0eSBpcyBzYW1lLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6c2VhcmNoVGV4dCB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHBhdHRlcm4gdGhhdCBtaWdodCBiZSB1c2VkIHRvIGFwcGx5IGEgZmlsdGVyXG4gKiAgICAgdG8gaXRlbXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHRyYWNraW5nIGV4cHJlc3Npb24uXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIGFzIGFsaWFzX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhbGlhcyBleHByZXNzaW9uIHdoaWNoIHdpbGwgdGhlbiBzdG9yZSB0aGVcbiAqICAgICBpbnRlcm1lZGlhdGUgcmVzdWx0cyBvZiB0aGUgcmVwZWF0ZXIgYWZ0ZXIgdGhlIGZpbHRlcnMgaGF2ZSBiZWVuIGFwcGxpZWQuIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gcmVuZGVyIGEgc3BlY2lhbCBtZXNzYWdlXG4gKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjp4IGFzIHJlc3VsdHNgIHdpbGwgc3RvcmUgdGhlIGZyYWdtZW50IG9mIHRoZSByZXBlYXRlZCBpdGVtcyBhcyBgcmVzdWx0c2AsIGJ1dCBvbmx5IGFmdGVyXG4gKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLlxuICpcbiAqICAgICBQbGVhc2Ugbm90ZSB0aGF0IGBhcyBbdmFyaWFibGUgbmFtZV0gaXMgbm90IGFuIG9wZXJhdG9yIGJ1dCByYXRoZXIgYSBwYXJ0IG9mIG5nUmVwZWF0IG1pY3JvLXN5bnRheCBzbyBpdCBjYW4gYmUgdXNlZCBvbmx5IGF0IHRoZSBlbmRcbiAqICAgICAoYW5kIG5vdCBhcyBvcGVyYXRvciwgaW5zaWRlIGFuIGV4cHJlc3Npb24pLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXIgOiB4IHwgb3JkZXJCeSA6IG9yZGVyIHwgbGltaXRUbyA6IGxpbWl0IGFzIHJlc3VsdHNgIC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHVzZXMgYG5nUmVwZWF0YCB0byBkaXNwbGF5IGEgbGlzdCBvZiBwZW9wbGUuIEEgZmlsdGVyIGlzIHVzZWQgdG8gcmVzdHJpY3QgdGhlIGRpc3BsYXllZFxuICogcmVzdWx0cyBieSBuYW1lIG9yIGJ5IGFnZS4gTmV3IChlbnRlcmluZykgYW5kIHJlbW92ZWQgKGxlYXZpbmcpIGl0ZW1zIGFyZSBhbmltYXRlZC5cbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdSZXBlYXRcIiBuYW1lPVwibmdSZXBlYXRcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctcmVwZWF0XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cInJlcGVhdENvbnRyb2xsZXJcIj5cbiAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSBhcyByZXN1bHRzXCI+XG4gICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1pZj1cInJlc3VsdHMubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICA8c3Ryb25nPk5vIHJlc3VsdHMgZm91bmQuLi48L3N0cm9uZz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1JlcGVhdCcsIFsnbmdBbmltYXRlJ10pLmNvbnRyb2xsZXIoJ3JlcGVhdENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J0pvaGFubmEnLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICB7bmFtZTonUGV0ZXInLCBhZ2U6OTUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidQYXRyaWNrJywgYWdlOjQwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cbiAgICAgICAgXTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjMwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjMwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUsICRjb21waWxlKSB7XG4gIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7XG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBUT0RPKHBlcmYpOiBnZW5lcmF0ZSBzZXR0ZXJzIHRvIHNoYXZlIG9mZiB+NDBtcyBvciAxLTEuNSVcbiAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgIHNjb3BlLiRpbmRleCA9IGluZGV4O1xuICAgIHNjb3BlLiRmaXJzdCA9IChpbmRleCA9PT0gMCk7XG4gICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTtcbiAgICBzY29wZS4kbWlkZGxlID0gIShzY29wZS4kZmlyc3QgfHwgc2NvcGUuJGxhc3QpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXggJiAxKSA9PT0gMCk7XG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdSZXBlYXQnLCBleHByZXNzaW9uKTtcblxuICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsICdFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgXFwnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX11cXCcgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICB2YXIgcmhzID0gbWF0Y2hbMl07XG4gICAgICB2YXIgYWxpYXNBcyA9IG1hdGNoWzNdO1xuICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooXFxzKlskXFx3XSspfFxcKFxccyooWyRcXHddKylcXHMqLFxccyooWyRcXHddKylcXHMqXFwpKSQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgJ1xcJ19pdGVtX1xcJyBpbiBcXCdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXFwnIHNob3VsZCBiZSBhbiBpZGVudGlmaWVyIG9yIFxcJyhfa2V5XywgX3ZhbHVlXylcXCcgZXhwcmVzc2lvbiwgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50fFxcJHJvb3R8XFwkaWQpJC8udGVzdChhbGlhc0FzKSkpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2JhZGlkZW50JywgJ2FsaWFzIFxcJ3swfVxcJyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLicsXG4gICAgICAgICAgYWxpYXNBcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm47XG4gICAgICB2YXIgaGFzaEZuTG9jYWxzID0geyRpZDogaGFzaEtleX07XG5cbiAgICAgIGlmICh0cmFja0J5RXhwKSB7XG4gICAgICAgIHRyYWNrQnlFeHBHZXR0ZXIgPSAkcGFyc2UodHJhY2tCeUV4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja0J5SWRBcnJheUZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdSZXBlYXRMaW5rKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7XG4gICAgICAgICAgdHJhY2tCeUlkRXhwRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgLy8gYXNzaWduIGtleSwgdmFsdWUsIGFuZCAkaW5kZXggdG8gdGhlIGxvY2FscyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgaW4gaGFzaCBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzLiRpbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBhIGxpc3Qgb2YgZWxlbWVudHMgZnJvbSBwcmV2aW91cyBydW4uIFRoaXMgaXMgYSBoYXNoIHdoZXJlIGtleSBpcyB0aGUgaXRlbSBmcm9tIHRoZVxuICAgICAgICAvLyBpdGVyYXRvciwgYW5kIHRoZSB2YWx1ZSBpcyBvYmplY3RzIHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXMuXG4gICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGVcbiAgICAgICAgLy8gICAtIGVsZW1lbnQ6IHByZXZpb3VzIGVsZW1lbnQuXG4gICAgICAgIC8vICAgLSBpbmRleDogcG9zaXRpb25cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgYXJlIHVzaW5nIG5vLXByb3RvIG9iamVjdCBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCBpbmhlcml0ZWQgcHJvcHMgdmlhXG4gICAgICAgIC8vIGhhc093blByb3BlcnR5LlxuICAgICAgICB2YXIgbGFzdEJsb2NrTWFwID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgLy93YXRjaCBwcm9wc1xuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgaW5kZXgsIGxlbmd0aCxcbiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gJGVsZW1lbnRbMF0sICAgICAvLyBub2RlIHRoYXQgY2xvbmVkIG5vZGVzIHNob3VsZCBiZSBpbnNlcnRlZCBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHRvIHRoZSBjb21tZW50IG5vZGUgYW5jaG9yXG4gICAgICAgICAgICAgIG5leHROb2RlLFxuICAgICAgICAgICAgICAvLyBTYW1lIGFzIGxhc3RCbG9ja01hcCBidXQgaXQgaGFzIHRoZSBjdXJyZW50IHN0YXRlLiBJdCB3aWxsIGJlY29tZSB0aGVcbiAgICAgICAgICAgICAgLy8gbGFzdEJsb2NrTWFwIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGgsXG4gICAgICAgICAgICAgIGtleSwgdmFsdWUsIC8vIGtleS92YWx1ZSBvZiBpdGVyYXRpb25cbiAgICAgICAgICAgICAgdHJhY2tCeUlkLFxuICAgICAgICAgICAgICB0cmFja0J5SWRGbixcbiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMsXG4gICAgICAgICAgICAgIGJsb2NrLCAgICAgICAvLyBsYXN0IG9iamVjdCBpbmZvcm1hdGlvbiB7c2NvcGUsIGVsZW1lbnQsIGlkfVxuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcixcbiAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZTtcblxuICAgICAgICAgIGlmIChhbGlhc0FzKSB7XG4gICAgICAgICAgICAkc2NvcGVbYWxpYXNBc10gPSBjb2xsZWN0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRBcnJheUZuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZE9iakZuO1xuICAgICAgICAgICAgLy8gaWYgb2JqZWN0LCBleHRyYWN0IGtleXMsIGluIGVudW1lcmF0aW9uIG9yZGVyLCB1bnNvcnRlZFxuICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb2xsZWN0aW9uLCBpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgICAgICAgbmV4dEJsb2NrT3JkZXIgPSBuZXcgQXJyYXkoY29sbGVjdGlvbkxlbmd0aCk7XG5cbiAgICAgICAgICAvLyBsb2NhdGUgZXhpc3RpbmcgaXRlbXNcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgICAgIHRyYWNrQnlJZCA9IHRyYWNrQnlJZEZuKGtleSwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIGlmIChsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBmb3VuZCBwcmV2aW91c2x5IHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgZGVsZXRlIGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSBibG9jaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gaWYgY29sbGlzaW9uIGRldGVjdGVkLiByZXN0b3JlIGxhc3RCbG9ja01hcCBhbmQgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgZm9yRWFjaChuZXh0QmxvY2tPcmRlciwgZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2suc2NvcGUpIGxhc3RCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdkdXBlcycsXG4gICAgICAgICAgICAgICAgICAnRHVwbGljYXRlcyBpbiBhIHJlcGVhdGVyIGFyZSBub3QgYWxsb3dlZC4gVXNlIFxcJ3RyYWNrIGJ5XFwnIGV4cHJlc3Npb24gdG8gc3BlY2lmeSB1bmlxdWUga2V5cy4gUmVwZWF0ZXI6IHswfSwgRHVwbGljYXRlIGtleTogezF9LCBEdXBsaWNhdGUgdmFsdWU6IHsyfScsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB0cmFja0J5SWQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSB7aWQ6IHRyYWNrQnlJZCwgc2NvcGU6IHVuZGVmaW5lZCwgY2xvbmU6IHVuZGVmaW5lZH07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZW1vdmUgbGVmdG92ZXIgaXRlbXNcbiAgICAgICAgICBmb3IgKHZhciBibG9ja0tleSBpbiBsYXN0QmxvY2tNYXApIHtcbiAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW2Jsb2NrS2V5XTtcbiAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmUgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsZW1lbnRzVG9SZW1vdmUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzVG9SZW1vdmVbMF0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCB3YXMgbm90IHJlbW92ZWQgeWV0IGJlY2F1c2Ugb2YgcGVuZGluZyBhbmltYXRpb24sIG1hcmsgaXQgYXMgZGVsZXRlZFxuICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgaXQgbGF0ZXJcbiAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmVbaW5kZXhdW05HX1JFTU9WRURdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIGZvckVhY2ggZm9yIHBlcmYgcmVhc29ucyAodHJ5aW5nIHRvIGF2b2lkICNjYWxsKVxuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgYmxvY2sgPSBuZXh0QmxvY2tPcmRlcltpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChibG9jay5zY29wZSkge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZVxuICAgICAgICAgICAgICAvLyBhc3NvY2lhdGVkIHNjb3BlL2VsZW1lbnRcblxuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHByZXZpb3VzTm9kZTtcblxuICAgICAgICAgICAgICAvLyBza2lwIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgcGVuZGluZyByZW1vdmFsIHZpYSBsZWF2ZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTtcblxuICAgICAgICAgICAgICBpZiAoZ2V0QmxvY2tTdGFydChibG9jaykgIT09IG5leHROb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhpc3RpbmcgaXRlbSB3aGljaCBnb3QgbW92ZWRcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5tb3ZlKGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpLCBudWxsLCBwcmV2aW91c05vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGdldEJsb2NrRW5kKGJsb2NrKTtcbiAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dFxuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9uZS12cy1jcmVhdGVjb21tZW50XG4gICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBlbmROb2RlO1xuXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsIHByZXZpb3VzTm9kZSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZW5kTm9kZTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBvbmx5IG5lZWQgdGhlIGZpcnN0L2xhc3Qgbm9kZSBvZiB0aGUgY2xvbmVkIG5vZGVzLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIGJsb2NrLmNsb25lID0gY2xvbmU7XG4gICAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RCbG9ja01hcCA9IG5leHRCbG9ja01hcDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgTkdfSElERV9DTEFTUyA9ICduZy1oaWRlJztcbnZhciBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTID0gJ25nLWhpZGUtYW5pbWF0ZSc7XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU2hvd1xuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1Nob3dgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uIHByb3ZpZGVkIHRvXG4gKiB0aGUgYG5nU2hvd2AgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmcgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuXG4gKiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZCBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW5cbiAqIGAhaW1wb3J0YW50YCBmbGFnKS4gRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBIVE1MIGZpbGUgKHNlZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkXG4gKiB0byB0aGUgY2xhc3MgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnV0aHksIHRoZSBgLm5nLWhpZGVgXG4gKiBDU1MgY2xhc3MgaXMgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzIGAhaW1wb3J0YW50YCB1c2VkP1xuICpcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSBgIWltcG9ydGFudGAgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlXG4gKiBgLm5nLWhpZGVgIHNlbGVjdG9yIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhc1xuICogc2ltcGxlIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyXG4gKiB2aXNpYmxlLiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyBgIWltcG9ydGFudGAsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuXG4gKiBDU1Mgc2VsZWN0b3Igc3BlY2lmaWNpdHkgKHdoZW4gYCFpbXBvcnRhbnRgIGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYVxuICogZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGFcbiAqIG1hdHRlciBvZiB1c2luZyBgIWltcG9ydGFudGAgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICpcbiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudGAuIElmIHlvdVxuICogd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBgbmdTaG93YC9gbmdIaWRlYCwgeW91IGNhbiBzaW1wbHkgb3ZlcndyaXRlIHRoZSBzdHlsZXMgZm9yXG4gKiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIE5vdGUgdGhhdCB0aGUgc2VsZWN0b3IgdGhhdCBuZWVkcyB0byBiZSB1c2VkIGlzIGFjdHVhbGx5XG4gKiBgLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpYCB0byBjb3BlIHdpdGggZXh0cmEgYW5pbWF0aW9uIGNsYXNzZXMgdGhhdCBjYW4gYmUgYWRkZWQuXG4gKlxuICogYGBgY3NzXG4gKiAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSkge1xuICogICAvJiM0MjsgVGhlc2UgYXJlIGp1c3QgYWx0ZXJuYXRpdmUgd2F5cyBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgYW55dGhpbmcgaW4gQ1NTIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZVxuICogZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ1Nob3dgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBgbmdTaG93YC9gbmdIaWRlYCB3b3JrIHdpdGggdGhlIHNob3cgYW5kIGhpZGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIHRoZVxuICogZGlyZWN0aXZlIGV4cHJlc3Npb24gaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoXG4gKiBgbmdDbGFzc2AgZXhjZXB0IHRoYXQgeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSBgIWltcG9ydGFudGAgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgc28gdGhhdCB0aGUgZWxlbWVudHMgYXJlIG5vdCBhY3R1YWxseSBoaWRkZW4gZHVyaW5nIHRoZSBhbmltYXRpb24uXG4gKlxuICogYGBgY3NzXG4gKiAvJiM0MjsgQSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlLiAmIzQyOy9cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XG4gKiAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGxpbmVhcjtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5IHByb3BlcnR5XG4gKiB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcyAtIG5nQW5pbWF0ZSB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rICRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSBgLm5nLWhpZGVgICAgICAgIHwgQWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuLiB8XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyByZW1vdmVDbGFzc30gYC5uZy1oaWRlYCB8IEFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlLiAgICAgICAgfFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeS9mYWxzeSB0aGVuIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCBpcyBzaG93bi9oaWRkZW4gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBBIHNpbXBsZSBleGFtcGxlLCBhbmltYXRpbmcgdGhlIGVsZW1lbnQncyBvcGFjaXR5OlxuICpcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXNob3ctc2ltcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIFNob3c6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nU2hvd1wiPjxiciAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93LWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlLWFkZCxcbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ1Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKTtcbiAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcblxuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBjaGVja2JveC5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqXG4gKiA8aHIgLz5cbiAqIEBleGFtcGxlXG4gKiBBIG1vcmUgY29tcGxleCBleGFtcGxlLCBmZWF0dXJpbmcgZGlmZmVyZW50IHNob3cvaGlkZSBhbmltYXRpb25zOlxuICpcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXNob3ctY29tcGxleFwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBTaG93OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGZ1bmt5LXNob3ctaGlkZVwiIG5nLXNob3c9XCJjaGVja2VkXCI+XG4gICAgICAgIEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIGJvZHkge1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBwZXJzcGVjdGl2ZTogMTAwMHB4O1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDApO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKC0xMzVkZWcpO1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMCk7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmdTaG93JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdTaG93LCBmdW5jdGlvbiBuZ1Nob3dXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyB3ZSdyZSBhZGRpbmcgYSB0ZW1wb3JhcnksIGFuaW1hdGlvbi1zcGVjaWZpYyBjbGFzcyBmb3IgbmctaGlkZSBzaW5jZSB0aGlzIHdheVxuICAgICAgICAvLyB3ZSBjYW4gY29udHJvbCB3aGVuIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IGRpc3BsYXllZCBvbiBzY3JlZW4gd2l0aG91dCBoYXZpbmdcbiAgICAgICAgLy8gdG8gaGF2ZSBhIGdsb2JhbC9ncmVlZHkgQ1NTIHNlbGVjdG9yIHRoYXQgYnJlYWtzIHdoZW4gb3RoZXIgYW5pbWF0aW9ucyBhcmUgcnVuLlxuICAgICAgICAvLyBSZWFkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTAzI2lzc3VlY29tbWVudC01ODMzNTg0NVxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCBOR19ISURFX0NMQVNTLCB7XG4gICAgICAgICAgdGVtcENsYXNzZXM6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSGlkZVxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0hpZGVgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uIHByb3ZpZGVkIHRvXG4gKiB0aGUgYG5nSGlkZWAgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmcgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuXG4gKiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZCBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW5cbiAqIGAhaW1wb3J0YW50YCBmbGFnKS4gRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBIVE1MIGZpbGUgKHNlZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAqXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZFxuICogdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gZmFsc3ksIHRoZSBgLm5nLWhpZGVgXG4gKiBDU1MgY2xhc3MgaXMgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzIGAhaW1wb3J0YW50YCB1c2VkP1xuICpcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSBgIWltcG9ydGFudGAgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlXG4gKiBgLm5nLWhpZGVgIHNlbGVjdG9yIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhc1xuICogc2ltcGxlIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyXG4gKiB2aXNpYmxlLiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyBgIWltcG9ydGFudGAsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuXG4gKiBDU1Mgc2VsZWN0b3Igc3BlY2lmaWNpdHkgKHdoZW4gYCFpbXBvcnRhbnRgIGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYVxuICogZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGFcbiAqIG1hdHRlciBvZiB1c2luZyBgIWltcG9ydGFudGAgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICpcbiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudGAuIElmIHlvdVxuICogd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBgbmdTaG93YC9gbmdIaWRlYCwgeW91IGNhbiBzaW1wbHkgb3ZlcndyaXRlIHRoZSBzdHlsZXMgZm9yXG4gKiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIE5vdGUgdGhhdCB0aGUgc2VsZWN0b3IgdGhhdCBuZWVkcyB0byBiZSB1c2VkIGlzIGFjdHVhbGx5XG4gKiBgLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpYCB0byBjb3BlIHdpdGggZXh0cmEgYW5pbWF0aW9uIGNsYXNzZXMgdGhhdCBjYW4gYmUgYWRkZWQuXG4gKlxuICogYGBgY3NzXG4gKiAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSkge1xuICogICAvJiM0MjsgVGhlc2UgYXJlIGp1c3QgYWx0ZXJuYXRpdmUgd2F5cyBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZVxuICogZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ0hpZGVgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBgbmdTaG93YC9gbmdIaWRlYCB3b3JrIHdpdGggdGhlIHNob3cgYW5kIGhpZGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIHRoZVxuICogZGlyZWN0aXZlIGV4cHJlc3Npb24gaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoXG4gKiBgbmdDbGFzc2AgZXhjZXB0IHRoYXQgeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSBgIWltcG9ydGFudGAgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgc28gdGhhdCB0aGUgZWxlbWVudHMgYXJlIG5vdCBhY3R1YWxseSBoaWRkZW4gZHVyaW5nIHRoZSBhbmltYXRpb24uXG4gKlxuICogYGBgY3NzXG4gKiAvJiM0MjsgQSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlLiAmIzQyOy9cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XG4gKiAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGxpbmVhcjtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5IHByb3BlcnR5XG4gKiB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcyAtIG5nQW5pbWF0ZSB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rICRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSBgLm5nLWhpZGVgICAgICAgIHwgQWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW4uICB8XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyByZW1vdmVDbGFzc30gYC5uZy1oaWRlYCB8IEFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZS4gfFxuICpcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdIaWRlIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkvZmFsc3kgdGhlbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgaXMgaGlkZGVuL3Nob3duIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICogQSBzaW1wbGUgZXhhbXBsZSwgYW5pbWF0aW5nIHRoZSBlbGVtZW50J3Mgb3BhY2l0eTpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1oaWRlLXNpbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBIaWRlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ0hpZGVcIj48YnIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvdy1oaWRlXCIgbmctaGlkZT1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1hZGQsXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmdIaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgICBjaGVja2JveC5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKlxuICogPGhyIC8+XG4gKiBAZXhhbXBsZVxuICogQSBtb3JlIGNvbXBsZXggZXhhbXBsZSwgZmVhdHVyaW5nIGRpZmZlcmVudCBzaG93L2hpZGUgYW5pbWF0aW9uczpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1oaWRlLWNvbXBsZXhcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgSGlkZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdIaWRlXCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBmdW5reS1zaG93LWhpZGVcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICBib2R5IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcGVyc3BlY3RpdmU6IDEwMDBweDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZCB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigwKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UtaW4tb3V0O1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigtMTM1ZGVnKTtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSg5MGRlZyk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDApO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nSGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmRcbiAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3R5bGVcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LlxuICpcbiAqIEBrbm93bklzc3VlXG4gKiBZb3Ugc2hvdWxkIG5vdCB1c2Uge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbn0gaW4gdGhlIHZhbHVlIG9mIHRoZSBgc3R5bGVgXG4gKiBhdHRyaWJ1dGUsIHdoZW4gdXNpbmcgdGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudC5cbiAqIFNlZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNrbm93bi1pc3N1ZXMgaGVyZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdHlsZVxuICpcbiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHdoaWNoIGV2YWxzIHRvIGFuXG4gKiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgQ1NTIHN0eWxlIG5hbWVzIGFuZCB2YWx1ZXMgYXJlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZvciB0aG9zZSBDU1NcbiAqIGtleXMuXG4gKlxuICogU2luY2Ugc29tZSBDU1Mgc3R5bGUgbmFtZXMgYXJlIG5vdCB2YWxpZCBrZXlzIGZvciBhbiBvYmplY3QsIHRoZXkgbXVzdCBiZSBxdW90ZWQuXG4gKiBTZWUgdGhlICdiYWNrZ3JvdW5kLWNvbG9yJyBzdHlsZSBpbiB0aGUgZXhhbXBsZSBiZWxvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLXN0eWxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgY29sb3JcIiBuZy1jbGljaz1cIm15U3R5bGU9e2NvbG9yOidyZWQnfVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0IGJhY2tncm91bmRcIiBuZy1jbGljaz1cIm15U3R5bGU9eydiYWNrZ3JvdW5kLWNvbG9yJzonYmx1ZSd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJjbGVhclwiIG5nLWNsaWNrPVwibXlTdHlsZT17fVwiPlxuICAgICAgICA8YnIvPlxuICAgICAgICA8c3BhbiBuZy1zdHlsZT1cIm15U3R5bGVcIj5TYW1wbGUgVGV4dDwvc3Bhbj5cbiAgICAgICAgPHByZT5teVN0eWxlPXt7bXlTdHlsZX19PC9wcmU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIHNwYW4ge1xuICAgICAgICAgY29sb3I6IGJsYWNrO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIGNvbG9yU3BhbiA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuJykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdHlsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgwLCAwLCAwLCAxKScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2lucHV0W3ZhbHVlPVxcJ3NldCBjb2xvclxcJ10nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMjU1LCAwLCAwLCAxKScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2lucHV0W3ZhbHVlPWNsZWFyXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgwLCAwLCAwLCAxKScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1N0eWxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgc2NvcGUuJHdhdGNoKGF0dHIubmdTdHlsZSwgZnVuY3Rpb24gbmdTdHlsZVdhdGNoQWN0aW9uKG5ld1N0eWxlcywgb2xkU3R5bGVzKSB7XG4gICAgaWYgKG9sZFN0eWxlcyAmJiAobmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpKSB7XG4gICAgICBmb3JFYWNoKG9sZFN0eWxlcywgZnVuY3Rpb24odmFsLCBzdHlsZSkgeyBlbGVtZW50LmNzcyhzdHlsZSwgJycpO30pO1xuICAgIH1cbiAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpO1xuICB9LCB0cnVlKTtcbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3dpdGNoXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTd2l0Y2hgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGNvbmRpdGlvbmFsbHkgc3dhcCBET00gc3RydWN0dXJlIG9uIHlvdXIgdGVtcGxhdGUgYmFzZWQgb24gYSBzY29wZSBleHByZXNzaW9uLlxuICogRWxlbWVudHMgd2l0aGluIGBuZ1N3aXRjaGAgYnV0IHdpdGhvdXQgYG5nU3dpdGNoV2hlbmAgb3IgYG5nU3dpdGNoRGVmYXVsdGAgZGlyZWN0aXZlcyB3aWxsIGJlIHByZXNlcnZlZCBhdCB0aGUgbG9jYXRpb25cbiAqIGFzIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBpdHNlbGYgd29ya3Mgc2ltaWxhciB0byBuZ0luY2x1ZGUsIGhvd2V2ZXIsIGluc3RlYWQgb2YgZG93bmxvYWRpbmcgdGVtcGxhdGUgY29kZSAob3IgbG9hZGluZyBpdFxuICogZnJvbSB0aGUgdGVtcGxhdGUgY2FjaGUpLCBgbmdTd2l0Y2hgIHNpbXBseSBjaG9vc2VzIG9uZSBvZiB0aGUgbmVzdGVkIGVsZW1lbnRzIGFuZCBtYWtlcyBpdCB2aXNpYmxlIGJhc2VkIG9uIHdoaWNoIGVsZW1lbnRcbiAqIG1hdGNoZXMgdGhlIHZhbHVlIG9idGFpbmVkIGZyb20gdGhlIGV2YWx1YXRlZCBleHByZXNzaW9uLiBJbiBvdGhlciB3b3JkcywgeW91IGRlZmluZSBhIGNvbnRhaW5lciBlbGVtZW50XG4gKiAod2hlcmUgeW91IHBsYWNlIHRoZSBkaXJlY3RpdmUpLCBwbGFjZSBhbiBleHByZXNzaW9uIG9uIHRoZSAqKmBvbj1cIi4uLlwiYCBhdHRyaWJ1dGUqKlxuICogKG9yIHRoZSAqKmBuZy1zd2l0Y2g9XCIuLi5cImAgYXR0cmlidXRlKiopLCBkZWZpbmUgYW55IGlubmVyIGVsZW1lbnRzIGluc2lkZSBvZiB0aGUgZGlyZWN0aXZlIGFuZCBwbGFjZVxuICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvblxuICogZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQuIElmIGEgbWF0Y2hpbmcgZXhwcmVzc2lvbiBpcyBub3QgZm91bmQgdmlhIGEgd2hlbiBhdHRyaWJ1dGUgdGhlbiBhbiBlbGVtZW50IHdpdGggdGhlIGRlZmF1bHRcbiAqIGF0dHJpYnV0ZSBpcyBkaXNwbGF5ZWQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIEJlIGF3YXJlIHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdCBjYW5ub3QgYmUgZXhwcmVzc2lvbnMuIFRoZXkgYXJlIGludGVycHJldGVkXG4gKiBhcyBsaXRlcmFsIHN0cmluZyB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEZvciBleGFtcGxlLCAqKmBuZy1zd2l0Y2gtd2hlbj1cInNvbWVWYWxcImAqKiB3aWxsIG1hdGNoIGFnYWluc3QgdGhlIHN0cmluZyBgXCJzb21lVmFsXCJgIG5vdCBhZ2FpbnN0IHRoZVxuICogdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gYCRzY29wZS5zb21lVmFsYC5cbiAqIDwvZGl2PlxuXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNlbnRlciBlbnRlcn0gIHwgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXIgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9ICB8IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHxcbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGBcbiAqIDxBTlkgbmctc3dpdGNoPVwiZXhwcmVzc2lvblwiPlxuICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTFcIj4uLi48L0FOWT5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUyXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLWRlZmF1bHQ+Li4uPC9BTlk+XG4gKiA8L0FOWT5cbiAqIGBgYFxuICpcbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMjAwXG4gKiBAcGFyYW0geyp9IG5nU3dpdGNofG9uIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdCA8Y29kZT5uZy1zd2l0Y2gtd2hlbjwvY29kZT4uXG4gKiBPbiBjaGlsZCBlbGVtZW50cyBhZGQ6XG4gKlxuICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpc1xuICogICBjYXNlIHdpbGwgYmUgZGlzcGxheWVkLiBJZiB0aGUgc2FtZSBtYXRjaCBhcHBlYXJzIG11bHRpcGxlIHRpbWVzLCBhbGwgdGhlXG4gKiAgIGVsZW1lbnRzIHdpbGwgYmUgZGlzcGxheWVkLiBJdCBpcyBwb3NzaWJsZSB0byBhc3NvY2lhdGUgbXVsdGlwbGUgdmFsdWVzIHRvXG4gKiAgIHRoZSBzYW1lIGBuZ1N3aXRjaFdoZW5gIGJ5IGRlZmluaW5nIHRoZSBvcHRpb25hbCBhdHRyaWJ1dGVcbiAqICAgYG5nU3dpdGNoV2hlblNlcGFyYXRvcmAuIFRoZSBzZXBhcmF0b3Igd2lsbCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZSBvZlxuICogICB0aGUgYG5nU3dpdGNoV2hlbmAgYXR0cmlidXRlIGludG8gbXVsdGlwbGUgdG9rZW5zLCBhbmQgdGhlIGVsZW1lbnQgd2lsbCBzaG93XG4gKiAgIGlmIGFueSBvZiB0aGUgYG5nU3dpdGNoYCBldmFsdWF0ZXMgdG8gYW55IG9mIHRoZXNlIHRva2Vucy5cbiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZVxuICogICBhcmUgbXVsdGlwbGUgZGVmYXVsdCBjYXNlcywgYWxsIG9mIHRoZW0gd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiBubyBvdGhlclxuICogICBjYXNlIG1hdGNoLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJzd2l0Y2hFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLXN3aXRjaFwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwic2VsZWN0aW9uXCIgbmctb3B0aW9ucz1cIml0ZW0gZm9yIGl0ZW0gaW4gaXRlbXNcIj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDxjb2RlPnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC9jb2RlPlxuICAgICAgICA8aHIvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyXCJcbiAgICAgICAgICBuZy1zd2l0Y2ggb249XCJzZWxlY3Rpb25cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC13aGVuPVwic2V0dGluZ3N8b3B0aW9uc1wiIG5nLXN3aXRjaC13aGVuLXNlcGFyYXRvcj1cInxcIj5TZXR0aW5ncyBEaXY8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC13aGVuPVwiaG9tZVwiPkhvbWUgU3BhbjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLWRlZmF1bHQ+ZGVmYXVsdDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnc3dpdGNoRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLml0ZW1zID0gWydzZXR0aW5ncycsICdob21lJywgJ29wdGlvbnMnLCAnb3RoZXInXTtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHN3aXRjaEVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLXN3aXRjaF0nKSk7XG4gICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHN0YXJ0IGluIHNldHRpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gc2V0dGluZ3MgdmlhIFwib3B0aW9uc1wiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDIpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGRlZmF1bHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRhbmltYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICduZ1N3aXRjaCcsXG5cbiAgICAvLyBhc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uIE5nU3dpdGNoQ29udHJvbGxlcigpIHtcbiAgICAgdGhpcy5jYXNlcyA9IHt9O1xuICAgIH1dLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBuZ1N3aXRjaENvbnRyb2xsZXIpIHtcbiAgICAgIHZhciB3YXRjaEV4cHIgPSBhdHRyLm5nU3dpdGNoIHx8IGF0dHIub24sXG4gICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IFtdLFxuICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMgPSBbXSxcbiAgICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyA9IFtdLFxuICAgICAgICAgIHNlbGVjdGVkU2NvcGVzID0gW107XG5cbiAgICAgIHZhciBzcGxpY2VGYWN0b3J5ID0gZnVuY3Rpb24oYXJyYXksIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlKSBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByLCBmdW5jdGlvbiBuZ1N3aXRjaFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpLCBpaTtcblxuICAgICAgICAvLyBTdGFydCB3aXRoIHRoZSBsYXN0LCBpbiBjYXNlIHRoZSBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgdGhlIGxvb3BcbiAgICAgICAgd2hpbGUgKHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLmNhbmNlbChwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5wb3AoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHNlbGVjdGVkU2NvcGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBnZXRCbG9ja05vZGVzKHNlbGVjdGVkRWxlbWVudHNbaV0uY2xvbmUpO1xuICAgICAgICAgIHNlbGVjdGVkU2NvcGVzW2ldLiRkZXN0cm95KCk7XG4gICAgICAgICAgdmFyIHJ1bm5lciA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldID0gJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWQpO1xuICAgICAgICAgIHJ1bm5lci5kb25lKHNwbGljZUZhY3RvcnkocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMsIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgc2VsZWN0ZWRTY29wZXMubGVuZ3RoID0gMDtcblxuICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJyEnICsgdmFsdWVdIHx8IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snPyddKSkge1xuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShmdW5jdGlvbihjYXNlRWxlbWVudCwgc2VsZWN0ZWRTY29wZSkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xuICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gc2VsZWN0ZWRUcmFuc2NsdWRlLmVsZW1lbnQ7XG4gICAgICAgICAgICAgIGNhc2VFbGVtZW50W2Nhc2VFbGVtZW50Lmxlbmd0aCsrXSA9ICRjb21waWxlLiQkY3JlYXRlQ29tbWVudCgnZW5kIG5nU3dpdGNoV2hlbicpO1xuICAgICAgICAgICAgICB2YXIgYmxvY2sgPSB7IGNsb25lOiBjYXNlRWxlbWVudCB9O1xuXG4gICAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMucHVzaChibG9jayk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNhc2VFbGVtZW50LCBhbmNob3IucGFyZW50KCksIGFuY2hvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCwgJHRyYW5zY2x1ZGUpIHtcblxuICAgIHZhciBjYXNlcyA9IGF0dHJzLm5nU3dpdGNoV2hlbi5zcGxpdChhdHRycy5uZ1N3aXRjaFdoZW5TZXBhcmF0b3IpLnNvcnQoKS5maWx0ZXIoXG4gICAgICAvLyBGaWx0ZXIgZHVwbGljYXRlIGNhc2VzXG4gICAgICBmdW5jdGlvbihlbGVtZW50LCBpbmRleCwgYXJyYXkpIHsgcmV0dXJuIGFycmF5W2luZGV4IC0gMV0gIT09IGVsZW1lbnQ7IH1cbiAgICApO1xuXG4gICAgZm9yRWFjaChjYXNlcywgZnVuY3Rpb24od2hlbkNhc2UpIHtcbiAgICAgIGN0cmwuY2FzZXNbJyEnICsgd2hlbkNhc2VdID0gKGN0cmwuY2FzZXNbJyEnICsgd2hlbkNhc2VdIHx8IFtdKTtcbiAgICAgIGN0cmwuY2FzZXNbJyEnICsgd2hlbkNhc2VdLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnZhciBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1RyYW5zY2x1ZGVcbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IG1hcmtzIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHRoZSB0cmFuc2NsdWRlZCBET00gb2YgdGhlIG5lYXJlc3QgcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB0aGF0IHlvdSB3YW50IHRvIGluc2VydCBhIG5hbWVkIHRyYW5zY2x1c2lvbiBzbG90LCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IHNsb3QsIGJ5IHByb3ZpZGluZyB0aGUgc2xvdCBuYW1lXG4gKiBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZy10cmFuc2NsdWRlYCBvciBgbmctdHJhbnNjbHVkZS1zbG90YCBhdHRyaWJ1dGUuXG4gKlxuICogSWYgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgbm90IGVtcHR5IChpLmUuIGNvbnRhaW5zIG9uZSBvciBtb3JlIERPTSBub2RlcywgaW5jbHVkaW5nIHdoaXRlc3BhY2UgdGV4dCBub2RlcyksIGFueSBleGlzdGluZ1xuICogY29udGVudCBvZiB0aGlzIGVsZW1lbnQgd2lsbCBiZSByZW1vdmVkIGJlZm9yZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBpbnNlcnRlZC5cbiAqIElmIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGVtcHR5IChvciBvbmx5IHdoaXRlc3BhY2UpLCB0aGUgZXhpc3RpbmcgY29udGVudCBpcyBsZWZ0IGludGFjdC4gVGhpcyBsZXRzIHlvdSBwcm92aWRlIGZhbGxiYWNrXG4gKiBjb250ZW50IGluIHRoZSBjYXNlIHRoYXQgbm8gdHJhbnNjbHVkZWQgY29udGVudCBpcyBwcm92aWRlZC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdUcmFuc2NsdWRlfG5nVHJhbnNjbHVkZVNsb3QgdGhlIG5hbWUgb2YgdGhlIHNsb3QgdG8gaW5zZXJ0IGF0IHRoaXMgcG9pbnQuIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkLCBpcyBlbXB0eVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGl0cyB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRoZW4gdGhlIGRlZmF1bHQgc2xvdCBpcyB1c2VkLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQmFzaWMgdHJhbnNjbHVzaW9uXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIGJhc2ljIHRyYW5zY2x1c2lvbiBvZiBjb250ZW50IGludG8gYSBjb21wb25lbnQgZGlyZWN0aXZlLlxuICogPGV4YW1wbGUgbmFtZT1cInNpbXBsZVRyYW5zY2x1ZGVFeGFtcGxlXCIgbW9kdWxlPVwidHJhbnNjbHVkZUV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGVFeGFtcGxlJywgW10pXG4gKiAgICAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gKiAgICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICogICAgICAgICAgICAgc2NvcGU6IHsgdGl0bGU6J0AnIH0sXG4gKiAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgc3R5bGU9XCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcIj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogZ3JheVwiPnt7dGl0bGV9fTwvZGl2PicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgJzxuZy10cmFuc2NsdWRlPjwvbmctdHJhbnNjbHVkZT4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuICogICAgICAgICAgIH07XG4gKiAgICAgICB9KVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJztcbiAqICAgICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xuICogICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ0aXRsZVwiIGFyaWEtbGFiZWw9XCJ0aXRsZVwiPiA8YnIvPlxuICogICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidGV4dFwiIGFyaWEtbGFiZWw9XCJ0ZXh0XCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAqICAgICAgIDxwYW5lIHRpdGxlPVwie3t0aXRsZX19XCI+PHNwYW4+e3t0ZXh0fX08L3NwYW4+PC9wYW5lPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpO1xuICogICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICogICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAqICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuICogICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gKiAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAqICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFRyYW5zY2x1ZGUgZmFsbGJhY2sgY29udGVudFxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nVHJhbnNjbHVkZWAgd2l0aCBmYWxsYmFjayBjb250ZW50LCB0aGF0XG4gKiBpcyBkaXNwbGF5ZWQgaWYgbm8gdHJhbnNjbHVkZWQgY29udGVudCBpcyBwcm92aWRlZC5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJ0cmFuc2NsdWRlRmFsbGJhY2tDb250ZW50RXhhbXBsZVwiIG5hbWU9XCJuZy10cmFuc2NsdWRlXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPHNjcmlwdD5cbiAqIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRmFsbGJhY2tDb250ZW50RXhhbXBsZScsIFtdKVxuICogLmRpcmVjdGl2ZSgnbXlCdXR0b24nLCBmdW5jdGlvbigpe1xuICogICAgICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAqICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAqICAgICAgICAgICAgICAgc2NvcGU6IHRydWUsXG4gKiAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGJ1dHRvbiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxuZy10cmFuc2NsdWRlPicgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YiBzdHlsZT1cImNvbG9yOiByZWQ7XCI+QnV0dG9uMTwvYj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvbmctdHJhbnNjbHVkZT4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gKiAgICAgICAgICAgICB9O1xuICogICAgICAgICB9KTtcbiAqIDwvc2NyaXB0PlxuICogPCEtLSBmYWxsYmFjayBidXR0b24gY29udGVudCAtLT5cbiAqIDxteS1idXR0b24gaWQ9XCJmYWxsYmFja1wiPjwvbXktYnV0dG9uPlxuICogPCEtLSBtb2RpZmllZCBidXR0b24gY29udGVudCAtLT5cbiAqIDxteS1idXR0b24gaWQ9XCJtb2RpZmllZFwiPlxuICogICA8aSBzdHlsZT1cImNvbG9yOiBncmVlbjtcIj5CdXR0b24yPC9pPlxuICogPC9teS1idXR0b24+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiBpdCgnc2hvdWxkIGhhdmUgZGlmZmVyZW50IHRyYW5zY2x1ZGUgZWxlbWVudCBjb250ZW50JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZmFsbGJhY2snKSkuZ2V0VGV4dCgpKS50b0JlKCdCdXR0b24xJyk7XG4gKiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbW9kaWZpZWQnKSkuZ2V0VGV4dCgpKS50b0JlKCdCdXR0b24yJyk7XG4gKiAgICAgICAgfSk7XG4gKiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBNdWx0aS1zbG90IHRyYW5zY2x1c2lvblxuICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB1c2luZyBtdWx0aS1zbG90IHRyYW5zY2x1c2lvbiBpbiBhIGNvbXBvbmVudCBkaXJlY3RpdmUuXG4gKiA8ZXhhbXBsZSBuYW1lPVwibXVsdGlTbG90VHJhbnNjbHVkZUV4YW1wbGVcIiBtb2R1bGU9XCJtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPHN0eWxlPlxuICogICAgICAudGl0bGUsIC5mb290ZXIge1xuICogICAgICAgIGJhY2tncm91bmQtY29sb3I6IGdyYXlcbiAqICAgICAgfVxuICogICAgPC9zdHlsZT5cbiAqICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCIgYXJpYS1sYWJlbD1cInRpdGxlXCI+IDxici8+XG4gKiAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gKiAgICAgIDxwYW5lPlxuICogICAgICAgIDxwYW5lLXRpdGxlPjxhIG5nLWhyZWY9XCJ7e2xpbmt9fVwiPnt7dGl0bGV9fTwvYT48L3BhbmUtdGl0bGU+XG4gKiAgICAgICAgPHBhbmUtYm9keT48cD57e3RleHR9fTwvcD48L3BhbmUtYm9keT5cbiAqICAgICAgPC9wYW5lPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ211bHRpU2xvdFRyYW5zY2x1ZGVFeGFtcGxlJywgW10pXG4gKiAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICogICAgICAgICAgdHJhbnNjbHVkZToge1xuICogICAgICAgICAgICAndGl0bGUnOiAnP3BhbmVUaXRsZScsXG4gKiAgICAgICAgICAgICdib2R5JzogJ3BhbmVCb2R5JyxcbiAqICAgICAgICAgICAgJ2Zvb3Rlcic6ICc/cGFuZUZvb3RlcidcbiAqICAgICAgICAgIH0sXG4gKiAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgc3R5bGU9XCJib3JkZXI6IDFweCBzb2xpZCBibGFjaztcIj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGl0bGVcIiBuZy10cmFuc2NsdWRlPVwidGl0bGVcIj5GYWxsYmFjayBUaXRsZTwvZGl2PicgK1xuICogICAgICAgICAgICAgICAgICAgICAgJzxkaXYgbmctdHJhbnNjbHVkZT1cImJvZHlcIj48L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9vdGVyXCIgbmctdHJhbnNjbHVkZT1cImZvb3RlclwiPkZhbGxiYWNrIEZvb3RlcjwvZGl2PicgK1xuICogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gKiAgICAgICAgfTtcbiAqICAgIH0pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nO1xuICogICAgICAkc2NvcGUubGluayA9ICdodHRwczovL2dvb2dsZS5jb20nO1xuICogICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7XG4gKiAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQgdGhlIHRpdGxlIGFuZCB0aGUgYm9keScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7XG4gKiAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICogICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcudGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuZm9vdGVyJykpLmdldFRleHQoKSkudG9FcXVhbCgnRmFsbGJhY2sgRm9vdGVyJyk7XG4gKiAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1RyYW5zY2x1ZGVNaW5FcnIgPSBtaW5FcnIoJ25nVHJhbnNjbHVkZScpO1xudmFyIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUFDJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVDb21waWxlKHRFbGVtZW50KSB7XG5cbiAgICAgIC8vIFJlbW92ZSBhbmQgY2FjaGUgYW55IG9yaWdpbmFsIGNvbnRlbnQgdG8gYWN0IGFzIGEgZmFsbGJhY2tcbiAgICAgIHZhciBmYWxsYmFja0xpbmtGbiA9ICRjb21waWxlKHRFbGVtZW50LmNvbnRlbnRzKCkpO1xuICAgICAgdEVsZW1lbnQuZW1wdHkoKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVHJhbnNjbHVkZVBvc3RMaW5rKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgY29udHJvbGxlciwgJHRyYW5zY2x1ZGUpIHtcblxuICAgICAgICBpZiAoISR0cmFuc2NsdWRlKSB7XG4gICAgICAgICAgdGhyb3cgbmdUcmFuc2NsdWRlTWluRXJyKCdvcnBoYW4nLFxuICAgICAgICAgICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArXG4gICAgICAgICAgJ05vIHBhcmVudCBkaXJlY3RpdmUgdGhhdCByZXF1aXJlcyBhIHRyYW5zY2x1c2lvbiBmb3VuZC4gJyArXG4gICAgICAgICAgJ0VsZW1lbnQ6IHswfScsXG4gICAgICAgICAgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBpcyBvZiB0aGUgZm9ybTogYG5nLXRyYW5zY2x1ZGU9XCJuZy10cmFuc2NsdWRlXCJgIHRoZW4gdHJlYXQgaXQgbGlrZSB0aGUgZGVmYXVsdFxuICAgICAgICBpZiAoJGF0dHJzLm5nVHJhbnNjbHVkZSA9PT0gJGF0dHJzLiRhdHRyLm5nVHJhbnNjbHVkZSkge1xuICAgICAgICAgICRhdHRycy5uZ1RyYW5zY2x1ZGUgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2xvdE5hbWUgPSAkYXR0cnMubmdUcmFuc2NsdWRlIHx8ICRhdHRycy5uZ1RyYW5zY2x1ZGVTbG90O1xuXG4gICAgICAgIC8vIElmIHRoZSBzbG90IGlzIHJlcXVpcmVkIGFuZCBubyB0cmFuc2NsdXNpb24gY29udGVudCBpcyBwcm92aWRlZCB0aGVuIHRoaXMgY2FsbCB3aWxsIHRocm93IGFuIGVycm9yXG4gICAgICAgICR0cmFuc2NsdWRlKG5nVHJhbnNjbHVkZUNsb25lQXR0YWNoRm4sIG51bGwsIHNsb3ROYW1lKTtcblxuICAgICAgICAvLyBJZiB0aGUgc2xvdCBpcyBvcHRpb25hbCBhbmQgbm8gdHJhbnNjbHVzaW9uIGNvbnRlbnQgaXMgcHJvdmlkZWQgdGhlbiB1c2UgdGhlIGZhbGxiYWNrIGNvbnRlbnRcbiAgICAgICAgaWYgKHNsb3ROYW1lICYmICEkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpKSB7XG4gICAgICAgICAgdXNlRmFsbGJhY2tDb250ZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVDbG9uZUF0dGFjaEZuKGNsb25lLCB0cmFuc2NsdWRlZFNjb3BlKSB7XG4gICAgICAgICAgaWYgKGNsb25lLmxlbmd0aCAmJiBub3RXaGl0ZXNwYWNlKGNsb25lKSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXNlRmFsbGJhY2tDb250ZW50KCk7XG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBub3RoaW5nIGxpbmtlZCBhZ2FpbnN0IHRoZSB0cmFuc2NsdWRlZCBzY29wZSBzaW5jZSBubyBjb250ZW50IHdhcyBhdmFpbGFibGUsXG4gICAgICAgICAgICAvLyBzbyBpdCBzaG91bGQgYmUgc2FmZSB0byBjbGVhbiB1cCB0aGUgZ2VuZXJhdGVkIHNjb3BlLlxuICAgICAgICAgICAgdHJhbnNjbHVkZWRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVzZUZhbGxiYWNrQ29udGVudCgpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIHRoZSBmYWxsYmFjayBjb250ZW50IHJhdGhlciB0aGFuIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50LFxuICAgICAgICAgIC8vIHdlIGxpbmsgYWdhaW5zdCB0aGUgc2NvcGUgb2YgdGhpcyBkaXJlY3RpdmUgcmF0aGVyIHRoYW4gdGhlIHRyYW5zY2x1ZGVkIHNjb3BlXG4gICAgICAgICAgZmFsbGJhY2tMaW5rRm4oJHNjb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5vdFdoaXRlc3BhY2Uobm9kZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2Rlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRV9URVhUIHx8IG5vZGUubm9kZVZhbHVlLnRyaW0oKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2NyaXB0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTG9hZCB0aGUgY29udGVudCBvZiBhIGA8c2NyaXB0PmAgZWxlbWVudCBpbnRvIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGVcbiAqIHRlbXBsYXRlIGNhbiBiZSB1c2VkIGJ5IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSxcbiAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGVcbiAqIGA8c2NyaXB0PmAgZWxlbWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBgdGV4dC9uZy10ZW1wbGF0ZWAsIGFuZCBhIGNhY2hlIG5hbWUgZm9yIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlXG4gKiBhc3NpZ25lZCB0aHJvdWdoIHRoZSBlbGVtZW50J3MgYGlkYCwgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCBhcyBhIGRpcmVjdGl2ZSdzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ2FjaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgIG5hbWU9XCJzY3JpcHQtdGFnXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cIi90cGwuaHRtbFwiPlxuICAgICAgICBDb250ZW50IG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICAgIDwvc2NyaXB0PlxuXG4gICAgICA8YSBuZy1jbGljaz1cImN1cnJlbnRUcGw9Jy90cGwuaHRtbCdcIiBpZD1cInRwbC1saW5rXCI+TG9hZCBpbmxpbmVkIHRlbXBsYXRlPC9hPlxuICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjdHBsLWxpbmsnKSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjdHBsLWNvbnRlbnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBzY3JpcHREaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmIChhdHRyLnR5cGUgPT09ICd0ZXh0L25nLXRlbXBsYXRlJykge1xuICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBhdHRyLmlkLFxuICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnRbMF0udGV4dDtcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVVcmwsIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG4vKiBleHBvcnRlZCBzZWxlY3REaXJlY3RpdmUsIG9wdGlvbkRpcmVjdGl2ZSAqL1xuXG52YXIgbm9vcE5nTW9kZWxDb250cm9sbGVyID0geyAkc2V0Vmlld1ZhbHVlOiBub29wLCAkcmVuZGVyOiBub29wIH07XG5cbmZ1bmN0aW9uIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKG9wdGlvbkVsLCB2YWx1ZSkge1xuICBvcHRpb25FbC5wcm9wKCdzZWxlY3RlZCcsIHZhbHVlKTsgLy8gbmVlZGVkIGZvciBJRVxuICAvKipcbiAgICogV2hlbiB1bnNlbGVjdGluZyBhbiBvcHRpb24sIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG51bGwgLyBmYWxzZSBzaG91bGQgYmUgZW5vdWdoXG4gICAqIEhvd2V2ZXIsIHNjcmVlbnJlYWRlcnMgbWlnaHQgcmVhY3QgdG8gdGhlIHNlbGVjdGVkIGF0dHJpYnV0ZSBpbnN0ZWFkLCBzZWVcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTQ0MTlcbiAgICogTm90ZTogXCJzZWxlY3RlZFwiIGlzIGEgYm9vbGVhbiBhdHRyIGFuZCB3aWxsIGJlIHJlbW92ZWQgd2hlbiB0aGUgXCJ2YWx1ZVwiIGFyZyBpbiBhdHRyKCkgaXMgZmFsc2VcbiAgICogb3IgbnVsbFxuICAgKi9cbiAgb3B0aW9uRWwuYXR0cignc2VsZWN0ZWQnLCB2YWx1ZSk7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICBzZWxlY3QuU2VsZWN0Q29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY29udHJvbGxlciBmb3IgdGhlIGA8c2VsZWN0PmAgZGlyZWN0aXZlLiBUaGlzIHByb3ZpZGVzIHN1cHBvcnQgZm9yIHJlYWRpbmdcbiAqIGFuZCB3cml0aW5nIHRoZSBzZWxlY3RlZCB2YWx1ZShzKSBvZiB0aGUgY29udHJvbCBhbmQgYWxzbyBjb29yZGluYXRlcyBkeW5hbWljYWxseVxuICogYWRkZWQgYDxvcHRpb24+YCBlbGVtZW50cywgcGVyaGFwcyBieSBhbiBgbmdSZXBlYXRgIGRpcmVjdGl2ZS5cbiAqL1xudmFyIFNlbGVjdENvbnRyb2xsZXIgPVxuICAgICAgICBbJyRlbGVtZW50JywgJyRzY29wZScsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigkZWxlbWVudCwgJHNjb3BlKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgb3B0aW9uc01hcCA9IG5ldyBOZ01hcCgpO1xuXG4gIHNlbGYuc2VsZWN0VmFsdWVNYXAgPSB7fTsgLy8gS2V5cyBhcmUgdGhlIGhhc2hlZCB2YWx1ZXMsIHZhbHVlcyB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cbiAgLy8gSWYgdGhlIG5nTW9kZWwgZG9lc24ndCBnZXQgcHJvdmlkZWQgdGhlbiBwcm92aWRlIGEgZHVtbXkgbm9vcCB2ZXJzaW9uIHRvIHByZXZlbnQgZXJyb3JzXG4gIHNlbGYubmdNb2RlbEN0cmwgPSBub29wTmdNb2RlbENvbnRyb2xsZXI7XG4gIHNlbGYubXVsdGlwbGUgPSBmYWxzZTtcblxuICAvLyBUaGUgXCJ1bmtub3duXCIgb3B0aW9uIGlzIG9uZSB0aGF0IGlzIHByZXBlbmRlZCB0byB0aGUgbGlzdCBpZiB0aGUgdmlld1ZhbHVlXG4gIC8vIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9ucy4gV2hlbiBpdCBpcyByZW5kZXJlZCB0aGUgdmFsdWUgb2YgdGhlIHVua25vd25cbiAgLy8gb3B0aW9uIGlzICc/IFhYWCA/JyB3aGVyZSBYWFggaXMgdGhlIGhhc2hLZXkgb2YgdGhlIHZhbHVlIHRoYXQgaXMgbm90IGtub3duLlxuICAvL1xuICAvLyBXZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS5cbiAgc2VsZi51bmtub3duT3B0aW9uID0ganFMaXRlKHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSk7XG5cbiAgLy8gVGhlIGVtcHR5IG9wdGlvbiBpcyBhbiBvcHRpb24gd2l0aCB0aGUgdmFsdWUgJycgdGhhdCB0ZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgY2FuXG4gIC8vIHByb3ZpZGUgaW5zaWRlIHRoZSBzZWxlY3QuIFdoZW4gdGhlIG1vZGVsIGNoYW5nZXMgdG8gYSB2YWx1ZSB0aGF0IGRvZXNuJ3QgbWF0Y2ggYW4gb3B0aW9uLFxuICAvLyBpdCBpcyBzZWxlY3RlZCAtIHNvIGlmIGFuIGVtcHR5IG9wdGlvbiBpcyBwcm92aWRlZCwgbm8gdW5rbm93biBvcHRpb24gaXMgZ2VuZXJhdGVkLlxuICAvLyBIb3dldmVyLCB0aGUgZW1wdHkgb3B0aW9uIGlzIG5vdCByZW1vdmVkIHdoZW4gdGhlIG1vZGVsIG1hdGNoZXMgYW4gb3B0aW9uLiBJdCBpcyBhbHdheXMgc2VsZWN0YWJsZVxuICAvLyBhbmQgaW5kaWNhdGVzIHRoYXQgYSBcIm51bGxcIiBzZWxlY3Rpb24gaGFzIGJlZW4gbWFkZS5cbiAgc2VsZi5oYXNFbXB0eU9wdGlvbiA9IGZhbHNlO1xuICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuXG4gIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciB1bmtub3duVmFsID0gc2VsZi5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSh2YWwpO1xuICAgIHNlbGYudW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7XG4gICAgJGVsZW1lbnQucHJlcGVuZChzZWxmLnVua25vd25PcHRpb24pO1xuICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYudW5rbm93bk9wdGlvbiwgdHJ1ZSk7XG4gICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICB9O1xuXG4gIHNlbGYudXBkYXRlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciB1bmtub3duVmFsID0gc2VsZi5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSh2YWwpO1xuICAgIHNlbGYudW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7XG4gICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi51bmtub3duT3B0aW9uLCB0cnVlKTtcbiAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7XG4gIH07XG5cbiAgc2VsZi5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAnPyAnICsgaGFzaEtleSh2YWwpICsgJyA/JztcbiAgfTtcblxuICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi51bmtub3duT3B0aW9uLnBhcmVudCgpKSBzZWxmLnVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gIH07XG5cbiAgc2VsZi5zZWxlY3RFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICAkZWxlbWVudC52YWwoJycpO1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi5lbXB0eU9wdGlvbiwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHNlbGYudW5zZWxlY3RFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLmhhc0VtcHR5T3B0aW9uKSB7XG4gICAgICBzZWxmLmVtcHR5T3B0aW9uLnJlbW92ZUF0dHIoJ3NlbGVjdGVkJyk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gZGlzYWJsZSB1bmtub3duIG9wdGlvbiBzbyB0aGF0IHdlIGRvbid0IGRvIHdvcmsgd2hlbiB0aGUgd2hvbGUgc2VsZWN0IGlzIGJlaW5nIGRlc3Ryb3llZFxuICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IG5vb3A7XG4gIH0pO1xuXG4gIC8vIFJlYWQgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbCwgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2hhbmdlcyBkZXBlbmRpbmdcbiAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICBzZWxmLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWRTaW5nbGVWYWx1ZSgpIHtcbiAgICB2YXIgdmFsID0gJGVsZW1lbnQudmFsKCk7XG4gICAgLy8gbmdWYWx1ZSBhZGRlZCBvcHRpb24gdmFsdWVzIGFyZSBzdG9yZWQgaW4gdGhlIHNlbGVjdFZhbHVlTWFwLCBub3JtYWwgaW50ZXJwb2xhdGlvbnMgYXJlIG5vdFxuICAgIHZhciByZWFsVmFsID0gdmFsIGluIHNlbGYuc2VsZWN0VmFsdWVNYXAgPyBzZWxmLnNlbGVjdFZhbHVlTWFwW3ZhbF0gOiB2YWw7XG5cbiAgICBpZiAoc2VsZi5oYXNPcHRpb24ocmVhbFZhbCkpIHtcbiAgICAgIHJldHVybiByZWFsVmFsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG5cbiAgLy8gV3JpdGUgdGhlIHZhbHVlIHRvIHRoZSBzZWxlY3QgY29udHJvbCwgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2hhbmdlcyBkZXBlbmRpbmdcbiAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICBzZWxmLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZVNpbmdsZVZhbHVlKHZhbHVlKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRvIHJlbW92ZSB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGZyb20gdGhlIHByZXZpb3VzbHkgc2VsZWN0ZWQgb3B0aW9uXG4gICAgLy8gT3RoZXJ3aXNlLCBzY3JlZW4gcmVhZGVycyBtaWdodCBnZXQgY29uZnVzZWRcbiAgICB2YXIgY3VycmVudGx5U2VsZWN0ZWRPcHRpb24gPSAkZWxlbWVudFswXS5vcHRpb25zWyRlbGVtZW50WzBdLnNlbGVjdGVkSW5kZXhdO1xuICAgIGlmIChjdXJyZW50bHlTZWxlY3RlZE9wdGlvbikgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoanFMaXRlKGN1cnJlbnRseVNlbGVjdGVkT3B0aW9uKSwgZmFsc2UpO1xuXG4gICAgaWYgKHNlbGYuaGFzT3B0aW9uKHZhbHVlKSkge1xuICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG5cbiAgICAgIHZhciBoYXNoZWRWYWwgPSBoYXNoS2V5KHZhbHVlKTtcbiAgICAgICRlbGVtZW50LnZhbChoYXNoZWRWYWwgaW4gc2VsZi5zZWxlY3RWYWx1ZU1hcCA/IGhhc2hlZFZhbCA6IHZhbHVlKTtcblxuICAgICAgLy8gU2V0IHNlbGVjdGVkIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHkgb24gc2VsZWN0ZWQgb3B0aW9uIGZvciBzY3JlZW4gcmVhZGVyc1xuICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gJGVsZW1lbnRbMF0ub3B0aW9uc1skZWxlbWVudFswXS5zZWxlY3RlZEluZGV4XTtcbiAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShzZWxlY3RlZE9wdGlvbiksIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICBzZWxmLnNlbGVjdEVtcHR5T3B0aW9uKCk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi51cGRhdGVVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiBhZGRlZFxuICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgLy8gU2tpcCBjb21tZW50IG5vZGVzLCBhcyB0aGV5IG9ubHkgcG9sbHV0ZSB0aGUgYG9wdGlvbnNNYXBgXG4gICAgaWYgKGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSByZXR1cm47XG5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ1wib3B0aW9uIHZhbHVlXCInKTtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICBzZWxmLmhhc0VtcHR5T3B0aW9uID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSBlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBvcHRpb25zTWFwLmdldCh2YWx1ZSkgfHwgMDtcbiAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgKyAxKTtcbiAgICAvLyBPbmx5IHJlbmRlciBhdCB0aGUgZW5kIG9mIGEgZGlnZXN0LiBUaGlzIGltcHJvdmVzIHJlbmRlciBwZXJmb3JtYW5jZSB3aGVuIG1hbnkgb3B0aW9uc1xuICAgIC8vIGFyZSBhZGRlZCBkdXJpbmcgYSBkaWdlc3QgYW5kIGVuc3VyZXMgYWxsIHJlbGV2YW50IG9wdGlvbnMgYXJlIGNvcnJlY3RseSBtYXJrZWQgYXMgc2VsZWN0ZWRcbiAgICBzY2hlZHVsZVJlbmRlcigpO1xuICB9O1xuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gcmVtb3ZlZFxuICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIG9wdGlvbnNNYXAuZGVsZXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhIW9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgfTtcblxuXG4gIHZhciByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgaWYgKHJlbmRlclNjaGVkdWxlZCkgcmV0dXJuO1xuICAgIHJlbmRlclNjaGVkdWxlZCA9IHRydWU7XG4gICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKHJlbmRlckFmdGVyKSB7XG4gICAgaWYgKHVwZGF0ZVNjaGVkdWxlZCkgcmV0dXJuO1xuXG4gICAgdXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHVwZGF0ZVNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGYucmVhZFZhbHVlKCkpO1xuICAgICAgaWYgKHJlbmRlckFmdGVyKSBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgc2VsZi5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvblNjb3BlLCBvcHRpb25FbGVtZW50LCBvcHRpb25BdHRycywgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbikge1xuXG4gICAgaWYgKG9wdGlvbkF0dHJzLiRhdHRyLm5nVmFsdWUpIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc2V0IGJ5IG5nVmFsdWVcbiAgICAgIHZhciBvbGRWYWwsIGhhc2hlZFZhbCA9IE5hTjtcbiAgICAgIG9wdGlvbkF0dHJzLiRvYnNlcnZlKCd2YWx1ZScsIGZ1bmN0aW9uIHZhbHVlQXR0cmlidXRlT2JzZXJ2ZUFjdGlvbihuZXdWYWwpIHtcblxuICAgICAgICB2YXIgcmVtb3ZhbDtcbiAgICAgICAgdmFyIHByZXZpb3VzbHlTZWxlY3RlZCA9IG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKTtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKGhhc2hlZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLnNlbGVjdFZhbHVlTWFwW2hhc2hlZFZhbF07XG4gICAgICAgICAgcmVtb3ZhbCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBoYXNoZWRWYWwgPSBoYXNoS2V5KG5ld1ZhbCk7XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5zZWxlY3RWYWx1ZU1hcFtoYXNoZWRWYWxdID0gbmV3VmFsO1xuICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAvLyBTZXQgdGhlIGF0dHJpYnV0ZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nIG9wdGlvbkF0dHJzLiRzZXQgLSB0aGlzIHN0b3BzIHRoZSBvYnNlcnZlclxuICAgICAgICAvLyBmcm9tIGZpcmluZyBhIHNlY29uZCB0aW1lLiBPdGhlciAkb2JzZXJ2ZXJzIG9uIHZhbHVlIHdpbGwgYWxzbyBnZXQgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAgLy8gbmdWYWx1ZSBleHByZXNzaW9uLCBub3QgdGhlIGhhc2hlZCB2YWx1ZVxuICAgICAgICBvcHRpb25FbGVtZW50LmF0dHIoJ3ZhbHVlJywgaGFzaGVkVmFsKTtcblxuICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVWYWx1ZUZuKSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIGludGVycG9sYXRlZFxuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBpbiBuZ09wdGlvbnMgYW5kIGhhcyBzaWRlLWVmZmVjdHMhXG4gICAgICAgIHNlbGYucmVhZFZhbHVlKCk7XG5cbiAgICAgICAgdmFyIHJlbW92YWw7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChvbGRWYWwpKSB7XG4gICAgICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob2xkVmFsKTtcbiAgICAgICAgICByZW1vdmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBvbGRWYWwgPSBuZXdWYWw7XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJlbW92YWwgJiYgcHJldmlvdXNseVNlbGVjdGVkKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgLy8gVGhlIHRleHQgY29udGVudCBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgIG9wdGlvblNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZVRleHRGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBvcHRpb25BdHRycy4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcblxuICAgICAgICBpZiAob2xkVmFsICYmIHByZXZpb3VzbHlTZWxlY3RlZCkge1xuICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIHN0YXRpY1xuICAgICAgc2VsZi5hZGRPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUsIG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cblxuXG4gICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24obmV3VmFsKSB7XG5cbiAgICAgIC8vIFNpbmNlIG1vZGVsIHVwZGF0ZXMgd2lsbCBhbHNvIHNlbGVjdCBkaXNhYmxlZCBvcHRpb25zIChsaWtlIG5nT3B0aW9ucyksXG4gICAgICAvLyB3ZSBvbmx5IGhhdmUgdG8gaGFuZGxlIG9wdGlvbnMgYmVjb21pbmcgZGlzYWJsZWQsIG5vdCBlbmFibGVkXG5cbiAgICAgIGlmIChuZXdWYWwgPT09ICd0cnVlJyB8fCBuZXdWYWwgJiYgb3B0aW9uRWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgIGlmIChzZWxmLm11bHRpcGxlKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgICAgIHNlbGYubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBvcHRpb25FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHNlbGYucmVhZFZhbHVlKCk7XG4gICAgICB2YXIgcmVtb3ZlVmFsdWUgPSBvcHRpb25BdHRycy52YWx1ZTtcblxuICAgICAgc2VsZi5yZW1vdmVPcHRpb24ocmVtb3ZlVmFsdWUpO1xuICAgICAgc2NoZWR1bGVSZW5kZXIoKTtcblxuICAgICAgaWYgKHNlbGYubXVsdGlwbGUgJiYgY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pbmRleE9mKHJlbW92ZVZhbHVlKSAhPT0gLTEgfHxcbiAgICAgICAgICBjdXJyZW50VmFsdWUgPT09IHJlbW92ZVZhbHVlXG4gICAgICApIHtcbiAgICAgICAgLy8gV2hlbiBtdWx0aXBsZSAoc2VsZWN0ZWQpIG9wdGlvbnMgYXJlIGRlc3Ryb3llZCBhdCB0aGUgc2FtZSB0aW1lLCB3ZSBkb24ndCB3YW50XG4gICAgICAgIC8vIHRvIHJ1biBhIG1vZGVsIHVwZGF0ZSBmb3IgZWFjaCBvZiB0aGVtLiBJbnN0ZWFkLCBydW4gYSBzaW5nbGUgdXBkYXRlIGluIHRoZSAkJHBvc3REaWdlc3RcbiAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzZWxlY3RcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGBzZWxlY3RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAqXG4gKiBUaGUgYHNlbGVjdGAgZGlyZWN0aXZlIGlzIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IHRvIHByb3ZpZGUgZGF0YS1iaW5kaW5nXG4gKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICogSXQgYWxzbyBoYW5kbGVzIGR5bmFtaWMgYDxvcHRpb24+YCBlbGVtZW50cywgd2hpY2ggY2FuIGJlIGFkZGVkIHVzaW5nIHRoZSB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0fWAgb3JcbiAqIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZXMuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmRcbiAqIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlLiBXaXRoIHN0YXRpYyBvciByZXBlYXRlZCBvcHRpb25zLCB0aGlzIGlzXG4gKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gKiBWYWx1ZSBhbmQgdGV4dENvbnRlbnQgY2FuIGJlIGludGVycG9sYXRlZC5cbiAqXG4gKiAjIyBNYXRjaGluZyBtb2RlbCBhbmQgb3B0aW9uIHZhbHVlc1xuICpcbiAqIEluIGdlbmVyYWwsIHRoZSBtYXRjaCBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgYW4gb3B0aW9uIGlzIGV2YWx1YXRlZCBieSBzdHJpY3RseSBjb21wYXJpbmcgdGhlIG1vZGVsXG4gKiB2YWx1ZSBhZ2FpbnN0IHRoZSB2YWx1ZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG4gKlxuICogSWYgeW91IGFyZSBzZXR0aW5nIHRoZSBvcHRpb24gdmFsdWUgd2l0aCB0aGUgb3B0aW9uJ3MgYHZhbHVlYCBhdHRyaWJ1dGUsIG9yIHRleHRDb250ZW50LCB0aGVcbiAqIHZhbHVlIHdpbGwgYWx3YXlzIGJlIGEgYHN0cmluZ2Agd2hpY2ggbWVhbnMgdGhhdCB0aGUgbW9kZWwgdmFsdWUgbXVzdCBhbHNvIGJlIGEgc3RyaW5nLlxuICogT3RoZXJ3aXNlIHRoZSBgc2VsZWN0YCBkaXJlY3RpdmUgY2Fubm90IG1hdGNoIHRoZW0gY29ycmVjdGx5LlxuICpcbiAqIFRvIGJpbmQgdGhlIG1vZGVsIHRvIGEgbm9uLXN0cmluZyB2YWx1ZSwgeW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgc3RyYXRlZ2llczpcbiAqIC0gdGhlIHtAbGluayBuZy5uZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZVxuICogICAoe0BsaW5rIG5nLnNlbGVjdCN1c2luZy1zZWxlY3Qtd2l0aC1uZ29wdGlvbnMtYW5kLXNldHRpbmctYS1kZWZhdWx0LXZhbHVlfSlcbiAqIC0gdGhlIHtAbGluayBuZy5uZ1ZhbHVlIGBuZ1ZhbHVlYH0gZGlyZWN0aXZlLCB3aGljaCBhbGxvd3MgYXJiaXRyYXJ5IGV4cHJlc3Npb25zIHRvIGJlXG4gKiAgIG9wdGlvbiB2YWx1ZXMgKHtAbGluayBuZy5zZWxlY3QjdXNpbmctbmd2YWx1ZS10by1iaW5kLXRoZS1tb2RlbC10by1hbi1hcnJheS1vZi1vYmplY3RzIEV4YW1wbGV9KVxuICogLSBtb2RlbCAkcGFyc2VycyAvICRmb3JtYXR0ZXJzIHRvIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZVxuICogICAoe0BsaW5rIG5nLnNlbGVjdCNiaW5kaW5nLXNlbGVjdC10by1hLW5vbi1zdHJpbmctdmFsdWUtdmlhLW5nbW9kZWwtcGFyc2luZy1mb3JtYXR0aW5nIEV4YW1wbGV9KVxuICpcbiAqIElmIHRoZSB2aWV3VmFsdWUgb2YgYG5nTW9kZWxgIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9ucywgdGhlbiB0aGUgY29udHJvbFxuICogd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBhbiBcInVua25vd25cIiBvcHRpb24sIHdoaWNoIGl0IHRoZW4gcmVtb3ZlcyB3aGVuIHRoZSBtaXNtYXRjaCBpcyByZXNvbHZlZC5cbiAqXG4gKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuXG4gKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCB0aGUgYG51bGxgIG9yIFwibm90IHNlbGVjdGVkXCJcbiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uXG4gKlxuICogIyMgQ2hvb3NpbmcgYmV0d2VlbiBgbmdSZXBlYXRgIGFuZCBgbmdPcHRpb25zYFxuICpcbiAqIEluIG1hbnkgY2FzZXMsIGBuZ1JlcGVhdGAgY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6bmdPcHRpb25zXG4gKiBuZ09wdGlvbnN9IHRvIGFjaGlldmUgYSBzaW1pbGFyIHJlc3VsdC4gSG93ZXZlciwgYG5nT3B0aW9uc2AgcHJvdmlkZXMgc29tZSBiZW5lZml0czpcbiAqIC0gbW9yZSBmbGV4aWJpbGl0eSBpbiBob3cgdGhlIGA8c2VsZWN0PmAncyBtb2RlbCBpcyBhc3NpZ25lZCB2aWEgdGhlIGBzZWxlY3RgICoqYGFzYCoqIHBhcnQgb2YgdGhlXG4gKiBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb25cbiAqIC0gcmVkdWNlZCBtZW1vcnkgY29uc3VtcHRpb24gYnkgbm90IGNyZWF0aW5nIGEgbmV3IHNjb3BlIGZvciBlYWNoIHJlcGVhdGVkIGluc3RhbmNlXG4gKiAtIGluY3JlYXNlZCByZW5kZXIgc3BlZWQgYnkgY3JlYXRpbmcgdGhlIG9wdGlvbnMgaW4gYSBkb2N1bWVudEZyYWdtZW50IGluc3RlYWQgb2YgaW5kaXZpZHVhbGx5XG4gKlxuICogU3BlY2lmaWNhbGx5LCBzZWxlY3Qgd2l0aCByZXBlYXRlZCBvcHRpb25zIHNsb3dzIGRvd24gc2lnbmlmaWNhbnRseSBzdGFydGluZyBhdCAyMDAwIG9wdGlvbnMgaW5cbiAqIENocm9tZSBhbmQgSW50ZXJuZXQgRXhwbG9yZXIgLyBFZGdlLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG11bHRpcGxlIEFsbG93cyBtdWx0aXBsZSBvcHRpb25zIHRvIGJlIHNlbGVjdGVkLiBUaGUgc2VsZWN0ZWQgdmFsdWVzIHdpbGwgYmVcbiAqICAgICBib3VuZCB0byB0aGUgbW9kZWwgYXMgYW4gYXJyYXkuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyByZXF1aXJlZCBhdHRyaWJ1dGUgYW5kIHJlcXVpcmVkIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgbmdSZXF1aXJlZCBpbnN0ZWFkIG9mIHJlcXVpcmVkXG4gKiB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgcmVxdWlyZWQgYXR0cmlidXRlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBzZWxlY3RlZCBvcHRpb24ocykgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nT3B0aW9ucyBzZXRzIHRoZSBvcHRpb25zIHRoYXQgdGhlIHNlbGVjdCBpcyBwb3B1bGF0ZWQgd2l0aCBhbmQgZGVmaW5lcyB3aGF0IGlzXG4gKiBzZXQgb24gdGhlIG1vZGVsIG9uIHNlbGVjdGlvbi4gU2VlIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0F0dHJTaXplIHNldHMgdGhlIHNpemUgb2YgdGhlIHNlbGVjdCBlbGVtZW50IGR5bmFtaWNhbGx5LiBVc2VzIHRoZVxuICoge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24jLW5nYXR0ci1mb3ItYmluZGluZy10by1hcmJpdHJhcnktYXR0cmlidXRlcyBuZ0F0dHJ9IGRpcmVjdGl2ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFNpbXBsZSBgc2VsZWN0YCBlbGVtZW50cyB3aXRoIHN0YXRpYyBvcHRpb25zXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInN0YXRpYy1zZWxlY3RcIiBtb2R1bGU9XCJzdGF0aWNTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cInNpbmdsZVNlbGVjdFwiPiBTaW5nbGUgc2VsZWN0OiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEuc2luZ2xlU2VsZWN0XCI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTFcIj5PcHRpb24gMTwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD48YnI+XG4gKlxuICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdCB3aXRoIFwibm90IHNlbGVjdGVkXCIgb3B0aW9uIGFuZCBkeW5hbWljIG9wdGlvbiB2YWx1ZXM6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInNpbmdsZVNlbGVjdFwiIGlkPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tLVBsZWFzZSBzZWxlY3QtLS08L29wdGlvbj4gPCEtLSBub3Qgc2VsZWN0ZWQgLyBibGFuayBvcHRpb24gLS0+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwie3tkYXRhLm9wdGlvbjF9fVwiPk9wdGlvbiAxPC9vcHRpb24+IDwhLS0gaW50ZXJwb2xhdGlvbiAtLT5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICogICAgIDxidXR0b24gbmctY2xpY2s9XCJmb3JjZVVua25vd25PcHRpb24oKVwiPkZvcmNlIHVua25vd24gb3B0aW9uPC9idXR0b24+PGJyPlxuICogICAgIDx0dD5zaW5nbGVTZWxlY3QgPSB7e2RhdGEuc2luZ2xlU2VsZWN0fX08L3R0PlxuICpcbiAqICAgICA8aHI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm11bHRpcGxlU2VsZWN0XCI+IE11bHRpcGxlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwibXVsdGlwbGVTZWxlY3RcIiBpZD1cIm11bHRpcGxlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLm11bHRpcGxlU2VsZWN0XCIgbXVsdGlwbGU+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTFcIj5PcHRpb24gMTwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tM1wiPk9wdGlvbiAzPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICogICAgIDx0dD5tdWx0aXBsZVNlbGVjdCA9IHt7ZGF0YS5tdWx0aXBsZVNlbGVjdH19PC90dD48YnIvPlxuICogICA8L2Zvcm0+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnc3RhdGljU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIHNpbmdsZVNlbGVjdDogbnVsbCxcbiAqICAgICAgIG11bHRpcGxlU2VsZWN0OiBbXSxcbiAqICAgICAgIG9wdGlvbjE6ICdvcHRpb24tMSdcbiAqICAgICAgfTtcbiAqXG4gKiAgICAgICRzY29wZS5mb3JjZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAkc2NvcGUuZGF0YS5zaW5nbGVTZWxlY3QgPSAnbm9uc2Vuc2UnO1xuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgVXNpbmcgYG5nUmVwZWF0YCB0byBnZW5lcmF0ZSBgc2VsZWN0YCBvcHRpb25zXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LW5ncmVwZWF0XCIgbW9kdWxlPVwibmdyZXBlYXRTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cInJlcGVhdFNlbGVjdFwiPiBSZXBlYXQgc2VsZWN0OiA8L2xhYmVsPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInJlcGVhdFNlbGVjdFwiIGlkPVwicmVwZWF0U2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLm1vZGVsXCI+XG4gKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiB2YWx1ZT1cInt7b3B0aW9uLmlkfX1cIj57e29wdGlvbi5uYW1lfX08L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD5cbiAqICAgPC9mb3JtPlxuICogICA8aHI+XG4gKiAgIDx0dD5tb2RlbCA9IHt7ZGF0YS5tb2RlbH19PC90dD48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ25ncmVwZWF0U2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIG1vZGVsOiBudWxsLFxuICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICogICAgICAgICB7aWQ6ICcxJywgbmFtZTogJ09wdGlvbiBBJ30sXG4gKiAgICAgICAgIHtpZDogJzInLCBuYW1lOiAnT3B0aW9uIEInfSxcbiAqICAgICAgICAge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9XG4gKiAgICAgICBdXG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgbmdWYWx1ZWAgdG8gYmluZCB0aGUgbW9kZWwgdG8gYW4gYXJyYXkgb2Ygb2JqZWN0c1xuICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC1uZ3ZhbHVlXCIgbW9kdWxlPVwibmd2YWx1ZVNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwibmd2YWx1ZXNlbGVjdFwiPiBuZ3ZhbHVlIHNlbGVjdDogPC9sYWJlbD5cbiAqICAgICA8c2VsZWN0IHNpemU9XCI2XCIgbmFtZT1cIm5ndmFsdWVzZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEubW9kZWxcIiBtdWx0aXBsZT5cbiAqICAgICAgIDxvcHRpb24gbmctcmVwZWF0PVwib3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9uc1wiIG5nLXZhbHVlPVwib3B0aW9uLnZhbHVlXCI+e3tvcHRpb24ubmFtZX19PC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8cHJlPm1vZGVsID0ge3tkYXRhLm1vZGVsIHwganNvbn19PC9wcmU+PGJyLz5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCduZ3ZhbHVlU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIG1vZGVsOiBudWxsLFxuICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICAgICAgICAgICB7dmFsdWU6ICdteVN0cmluZycsIG5hbWU6ICdzdHJpbmcnfSxcbiAgICAgICAgICAge3ZhbHVlOiAxLCBuYW1lOiAnaW50ZWdlcid9LFxuICAgICAgICAgICB7dmFsdWU6IHRydWUsIG5hbWU6ICdib29sZWFuJ30sXG4gICAgICAgICAgIHt2YWx1ZTogbnVsbCwgbmFtZTogJ251bGwnfSxcbiAgICAgICAgICAge3ZhbHVlOiB7cHJvcDogJ3ZhbHVlJ30sIG5hbWU6ICdvYmplY3QnfSxcbiAgICAgICAgICAge3ZhbHVlOiBbJ2EnXSwgbmFtZTogJ2FycmF5J31cbiAqICAgICAgIF1cbiAqICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICogIyMjIFVzaW5nIGBzZWxlY3RgIHdpdGggYG5nT3B0aW9uc2AgYW5kIHNldHRpbmcgYSBkZWZhdWx0IHZhbHVlXG4gKiBTZWUgdGhlIHtAbGluayBuZ09wdGlvbnMgbmdPcHRpb25zIGRvY3VtZW50YXRpb259IGZvciBtb3JlIGBuZ09wdGlvbnNgIHVzYWdlIGV4YW1wbGVzLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1kZWZhdWx0LXZhbHVlc1wiIG1vZHVsZT1cImRlZmF1bHRWYWx1ZVNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwibXlTZWxlY3RcIj5NYWtlIGEgY2hvaWNlOjwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwibXlTZWxlY3RcIiBpZD1cIm15U2VsZWN0XCJcbiAqICAgICAgIG5nLW9wdGlvbnM9XCJvcHRpb24ubmFtZSBmb3Igb3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9ucyB0cmFjayBieSBvcHRpb24uaWRcIlxuICogICAgICAgbmctbW9kZWw9XCJkYXRhLnNlbGVjdGVkT3B0aW9uXCI+PC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+b3B0aW9uID0ge3tkYXRhLnNlbGVjdGVkT3B0aW9ufX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnZGVmYXVsdFZhbHVlU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXSxcbiAqICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcbiAqICAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgQmluZGluZyBgc2VsZWN0YCB0byBhIG5vbi1zdHJpbmcgdmFsdWUgdmlhIGBuZ01vZGVsYCBwYXJzaW5nIC8gZm9ybWF0dGluZ1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1ub24tc3RyaW5nLW9wdGlvbnNcIiBtb2R1bGU9XCJub25TdHJpbmdTZWxlY3RcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibW9kZWwuaWRcIiBjb252ZXJ0LXRvLW51bWJlcj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+WmVybzwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PbmU8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+VHdvPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgICAge3sgbW9kZWwgfX1cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ25vblN0cmluZ1NlbGVjdCcsIFtdKVxuICogICAgICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gKiAgICAgICAgICRyb290U2NvcGUubW9kZWwgPSB7IGlkOiAyIH07XG4gKiAgICAgICB9KVxuICogICAgICAgLmRpcmVjdGl2ZSgnY29udmVydFRvTnVtYmVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICogICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICogICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICogICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7XG4gKiAgICAgICAgICAgICB9KTtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuICcnICsgdmFsO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ21vZGVsLmlkJykpLiQoJ29wdGlvbjpjaGVja2VkJykuZ2V0VGV4dCgpKS50b0VxdWFsKCdUd28nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIHNlbGVjdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6IFNlbGVjdENvbnRyb2xsZXIsXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgbGluazoge1xuICAgICAgcHJlOiBzZWxlY3RQcmVMaW5rLFxuICAgICAgcG9zdDogc2VsZWN0UG9zdExpbmtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc2VsZWN0UHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGJ1dCBzZXQgdGhlIHJlZ2lzdGVyT3B0aW9uXG4gICAgICAvLyBmdW5jdGlvbiB0byBub29wLCBzbyBvcHRpb25zIGRvbid0IGdldCBhZGRlZCBpbnRlcm5hbGx5XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSB7XG4gICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24gPSBub29wO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgc2VsZWN0Q3RybC5uZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsO1xuXG4gICAgICAvLyBXaGVuIHRoZSBzZWxlY3RlZCBpdGVtKHMpIGNoYW5nZXMgd2UgZGVsZWdhdGUgZ2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdCBjb250cm9sXG4gICAgICAvLyB0byB0aGUgYHJlYWRWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZCBpZiB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlXG4gICAgICAvLyBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nIGdlbmVyYXRlZCBieSBgbmdPcHRpb25zYFxuICAgICAgZWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgdGhlIHNlbGVjdCBhbGxvd3MgbXVsdGlwbGUgdmFsdWVzIHRoZW4gd2UgbmVlZCB0byBtb2RpZnkgaG93IHdlIHJlYWQgYW5kIHdyaXRlXG4gICAgICAvLyB2YWx1ZXMgZnJvbSBhbmQgdG8gdGhlIGNvbnRyb2w7IGFsc28gd2hhdCBpdCBtZWFucyBmb3IgdGhlIHZhbHVlIHRvIGJlIGVtcHR5IGFuZFxuICAgICAgLy8gd2UgaGF2ZSB0byBhZGQgYW4gZXh0cmEgd2F0Y2ggc2luY2UgbmdNb2RlbCBkb2Vzbid0IHdvcmsgd2VsbCB3aXRoIGFycmF5cyAtIGl0XG4gICAgICAvLyBkb2Vzbid0IHRyaWdnZXIgcmVuZGVyaW5nIGlmIG9ubHkgYW4gaXRlbSBpbiB0aGUgYXJyYXkgY2hhbmdlcy5cbiAgICAgIGlmIChhdHRyLm11bHRpcGxlKSB7XG4gICAgICAgIHNlbGVjdEN0cmwubXVsdGlwbGUgPSB0cnVlO1xuXG4gICAgICAgIC8vIFJlYWQgdmFsdWUgbm93IG5lZWRzIHRvIGNoZWNrIGVhY2ggb3B0aW9uIHRvIHNlZSBpZiBpdCBpcyBzZWxlY3RlZFxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWRNdWx0aXBsZVZhbHVlKCkge1xuICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICYmICFvcHRpb24uZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgdmFyIHZhbCA9IG9wdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWwgaW4gc2VsZWN0Q3RybC5zZWxlY3RWYWx1ZU1hcCA/IHNlbGVjdEN0cmwuc2VsZWN0VmFsdWVNYXBbdmFsXSA6IHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFdyaXRlIHZhbHVlIG5vdyBuZWVkcyB0byBzZXQgdGhlIHNlbGVjdGVkIHByb3BlcnR5IG9mIGVhY2ggbWF0Y2hpbmcgb3B0aW9uXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTXVsdGlwbGVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkQmVTZWxlY3RlZCA9ICEhdmFsdWUgJiYgKGluY2x1ZGVzKHZhbHVlLCBvcHRpb24udmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzKHZhbHVlLCBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwW29wdGlvbi52YWx1ZV0pKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50bHlTZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZDtcblxuICAgICAgICAgICAgLy8gSUUgYW5kIEVkZ2UsIGFkZGluZyBvcHRpb25zIHRvIHRoZSBzZWxlY3Rpb24gdmlhIHNoaWZ0K2NsaWNrL1VQL0RPV04sXG4gICAgICAgICAgICAvLyB3aWxsIGRlLXNlbGVjdCBhbHJlYWR5IHNlbGVjdGVkIG9wdGlvbnMgaWYgXCJzZWxlY3RlZFwiIG9uIHRob3NlIG9wdGlvbnMgd2FzIHNldFxuICAgICAgICAgICAgLy8gbW9yZSB0aGFuIG9uY2UgKGkuZS4gd2hlbiB0aGUgb3B0aW9ucyB3ZXJlIGFscmVhZHkgc2VsZWN0ZWQpXG4gICAgICAgICAgICAvLyBTbyB3ZSBvbmx5IG1vZGlmeSB0aGUgc2VsZWN0ZWQgcHJvcGVydHkgaWYgbmVjY2Vzc2FyeS5cbiAgICAgICAgICAgIC8vIE5vdGU6IHRoaXMgYmVoYXZpb3IgY2Fubm90IGJlIHJlcGxpY2F0ZWQgdmlhIHVuaXQgdGVzdHMgYmVjYXVzZSBpdCBvbmx5IHNob3dzIGluIHRoZVxuICAgICAgICAgICAgLy8gYWN0dWFsIHVzZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgaWYgKHNob3VsZEJlU2VsZWN0ZWQgIT09IGN1cnJlbnRseVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShvcHRpb24pLCBzaG91bGRCZVNlbGVjdGVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gZG8gaXQgb24gZWFjaCB3YXRjaCBzaW5jZSBuZ01vZGVsIHdhdGNoZXMgcmVmZXJlbmNlLCBidXRcbiAgICAgICAgLy8gd2UgbmVlZCB0byB3b3JrIG9mIGFuIGFycmF5LCBzbyB3ZSBuZWVkIHRvIHNlZSBpZiBhbnl0aGluZyB3YXMgaW5zZXJ0ZWQvcmVtb3ZlZFxuICAgICAgICB2YXIgbGFzdFZpZXcsIGxhc3RWaWV3UmVmID0gTmFOO1xuICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gc2VsZWN0TXVsdGlwbGVXYXRjaCgpIHtcbiAgICAgICAgICBpZiAobGFzdFZpZXdSZWYgPT09IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgJiYgIWVxdWFscyhsYXN0VmlldywgbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGxhc3RWaWV3ID0gc2hhbGxvd0NvcHkobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RWaWV3UmVmID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIGEgbXVsdGlwbGUgc2VsZWN0IHRoZW4gdmFsdWUgaXMgbm93IGEgY29sbGVjdGlvblxuICAgICAgICAvLyBzbyB0aGUgbWVhbmluZyBvZiAkaXNFbXB0eSBjaGFuZ2VzXG4gICAgICAgIG5nTW9kZWxDdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIC8vIGlmIG5nTW9kZWwgaXMgbm90IGRlZmluZWQsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdO1xuXG4gICAgICAvLyBXZSBkZWxlZ2F0ZSByZW5kZXJpbmcgdG8gdGhlIGB3cml0ZVZhbHVlYCBtZXRob2QsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkXG4gICAgICAvLyBpZiB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHNlbGVjdGVkIHZhbHVlcyBvciBpZiB0aGUgb3B0aW9ucyBhcmUgYmVpbmdcbiAgICAgIC8vIGdlbmVyYXRlZCBieSBgbmdPcHRpb25zYC5cbiAgICAgIC8vIFRoaXMgbXVzdCBiZSBkb25lIGluIHRoZSBwb3N0TGluayBmbiB0byBwcmV2ZW50ICRyZW5kZXIgdG8gYmUgY2FsbGVkIGJlZm9yZVxuICAgICAgLy8gYWxsIG5vZGVzIGhhdmUgYmVlbiBsaW5rZWQgY29ycmVjdGx5LlxuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbn07XG5cblxuLy8gVGhlIG9wdGlvbiBkaXJlY3RpdmUgaXMgcHVyZWx5IGRlc2lnbmVkIHRvIGNvbW11bmljYXRlIHRoZSBleGlzdGVuY2UgKG9yIGxhY2sgb2YpXG4vLyBvZiBkeW5hbWljYWxseSBjcmVhdGVkIChhbmQgZGVzdHJveWVkKSBvcHRpb24gZWxlbWVudHMgdG8gdGhlaXIgY29udGFpbmluZyBzZWxlY3Rcbi8vIGRpcmVjdGl2ZSB2aWEgaXRzIGNvbnRyb2xsZXIuXG52YXIgb3B0aW9uRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm47XG5cbiAgICAgIGlmIChpc0RlZmluZWQoYXR0ci5uZ1ZhbHVlKSkge1xuICAgICAgICAvLyBXaWxsIGJlIGhhbmRsZWQgYnkgcmVnaXN0ZXJPcHRpb25cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGF0dHIudmFsdWUpKSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgZGVmaW5lZCwgY2hlY2sgaWYgaXQgY29udGFpbnMgYW4gaW50ZXJwb2xhdGlvblxuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlRm4gPSAkaW50ZXJwb2xhdGUoYXR0ci52YWx1ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG5vdCBkZWZpbmVkIHRoZW4gd2UgZmFsbCBiYWNrIHRvIHRoZVxuICAgICAgICAvLyB0ZXh0IGNvbnRlbnQgb2YgdGhlIG9wdGlvbiBlbGVtZW50LCB3aGljaCBtYXkgYmUgaW50ZXJwb2xhdGVkXG4gICAgICAgIGludGVycG9sYXRlVGV4dEZuID0gJGludGVycG9sYXRlKGVsZW1lbnQudGV4dCgpLCB0cnVlKTtcbiAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIG92ZXIgdXNpbmcgXl4gc2luY2Ugd2UgZG9uJ3Qgd2FudCB0byBoYXZlIHRvIHNlYXJjaFxuICAgICAgICAvLyBhbGwgdGhlIHdheSB0byB0aGUgcm9vdCBvZiB0aGUgRE9NIGZvciBldmVyeSBzaW5nbGUgb3B0aW9uIGVsZW1lbnRcbiAgICAgICAgdmFyIHNlbGVjdEN0cmxOYW1lID0gJyRzZWxlY3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8XG4gICAgICAgICAgICAgIHBhcmVudC5wYXJlbnQoKS5kYXRhKHNlbGVjdEN0cmxOYW1lKTsgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gb3B0Z3JvdXBcblxuICAgICAgICBpZiAoc2VsZWN0Q3RybCkge1xuICAgICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVxdWlyZWRcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdSZXF1aXJlZCBhZGRzIHRoZSByZXF1aXJlZCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3Ige0BsaW5rIGlucHV0IGBpbnB1dGB9IGFuZCB7QGxpbmsgc2VsZWN0IGBzZWxlY3RgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlXG4gKiBhcHBsaWVkIHRvIGN1c3RvbSBjb250cm9scy5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIHNldHMgdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGlmIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBgbmdSZXF1aXJlZGAgZXZhbHVhdGVzIHRvIHRydWUuIEEgc3BlY2lhbCBkaXJlY3RpdmUgZm9yIHNldHRpbmcgYHJlcXVpcmVkYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZVxuICogY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSBgcmVxdWlyZWRgLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9XG4gKiBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igd2lsbCBzZXQgdGhlIGByZXF1aXJlZGAgZXJyb3Iga2V5IHRvIHRydWUgaWYgdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlIGlzIHNldCBhbmRcbiAqIGNhbGxpbmcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHkgYE5nTW9kZWxDb250cm9sbGVyLiRpc0VtcHR5YH0gd2l0aCB0aGVcbiAqIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9IHJldHVybnMgYHRydWVgLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBgJGlzRW1wdHkoKWAgaW1wbGVtZW50YXRpb24gZm9yIGBpbnB1dFt0ZXh0XWAgY2hlY2tzIHRoZSBsZW5ndGggb2YgdGhlIGAkdmlld1ZhbHVlYC4gV2hlbiBkZXZlbG9waW5nXG4gKiBjdXN0b20gY29udHJvbHMsIGAkaXNFbXB0eSgpYCBjYW4gYmUgb3ZlcndyaXR0ZW4gdG8gYWNjb3VudCBmb3IgYSAkdmlld1ZhbHVlIHRoYXQgaXMgbm90IHN0cmluZy1iYXNlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nUmVxdWlyZWREaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ1JlcXVpcmVkRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdSZXF1aXJlZEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUucmVxdWlyZWQgPSB0cnVlO1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJyZXF1aXJlZFwiPlRvZ2dsZSByZXF1aXJlZDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwicmVxdWlyZWRcIiBpZD1cInJlcXVpcmVkXCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IG11c3QgYmUgZmlsbGVkIGlmIGByZXF1aXJlZGAgaXMgdHJ1ZTogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1yZXF1aXJlZD1cInJlcXVpcmVkXCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgcmVxdWlyZWQgZXJyb3Igc2V0PyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgcmVxdWlyZWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2Zvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkJykpO1xuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNldCB0aGUgcmVxdWlyZWQgZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChyZXF1aXJlZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuXG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICBleHBlY3QocmVxdWlyZWQuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyMycpO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGF0dGVyblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nUGF0dGVybiBhZGRzIHRoZSBwYXR0ZXJuIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gKlxuICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgcGF0dGVybmAgZXJyb3Iga2V5IGlmIHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfVxuICogZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgd2hpY2ggaXMgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nUGF0dGVybmAgYXR0cmlidXRlIHZhbHVlOlxuICogKiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwIGFmdGVyIHdyYXBwaW5nIGl0XG4gKiBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0byBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogYWNjb3VudC5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogVGhpcyBkaXJlY3RpdmUgaXMgYWxzbyBhZGRlZCB3aGVuIHRoZSBwbGFpbiBgcGF0dGVybmAgYXR0cmlidXRlIGlzIHVzZWQsIHdpdGggdHdvXG4gKiBkaWZmZXJlbmNlczpcbiAqIDxvbD5cbiAqICAgPGxpPlxuICogICAgIGBuZ1BhdHRlcm5gIGRvZXMgbm90IHNldCB0aGUgYHBhdHRlcm5gIGF0dHJpYnV0ZSBhbmQgdGhlcmVmb3JlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbiBpc1xuICogICAgIG5vdCBhdmFpbGFibGUuXG4gKiAgIDwvbGk+XG4gKiAgIDxsaT5cbiAqICAgICBUaGUgYG5nUGF0dGVybmAgYXR0cmlidXRlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBwYXR0ZXJuYCB2YWx1ZSBtdXN0IGJlXG4gKiAgICAgaW50ZXJwb2xhdGVkLlxuICogICA8L2xpPlxuICogPC9vbD5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdQYXR0ZXJuRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdQYXR0ZXJuRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdQYXR0ZXJuRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5yZWdleCA9ICdcXFxcZCsnO1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJyZWdleFwiPlNldCBhIHBhdHRlcm4gKHJlZ2V4IHN0cmluZyk6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicmVnZXhcIiBpZD1cInJlZ2V4XCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgcGF0dGVybjogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1wYXR0ZXJuPVwicmVnZXhcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICBpbnB1dCB2YWxpZD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdGhlIGlucHV0IHdpdGggdGhlIGRlZmF1bHQgcGF0dGVybicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FhYScpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkubm90LnRvQ29udGFpbignYWFhJyk7XG5cbiAgICAgICAgIGlucHV0LmNsZWFyKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyMycpO1xuICAgICAgICAgfSk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIHBhdHRlcm5EaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciByZWdleHAsIHBhdHRlcm5FeHAgPSBhdHRyLm5nUGF0dGVybiB8fCBhdHRyLnBhdHRlcm47XG4gICAgICBhdHRyLiRvYnNlcnZlKCdwYXR0ZXJuJywgZnVuY3Rpb24ocmVnZXgpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHJlZ2V4KSAmJiByZWdleC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIHJlZ2V4ICsgJyQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZWdleCAmJiAhcmVnZXgudGVzdCkge1xuICAgICAgICAgIHRocm93IG1pbkVycignbmdQYXR0ZXJuJykoJ25vcmVnZXhwJyxcbiAgICAgICAgICAgICdFeHBlY3RlZCB7MH0gdG8gYmUgYSBSZWdFeHAgYnV0IHdhcyB7MX0uIEVsZW1lbnQ6IHsyfScsIHBhdHRlcm5FeHAsXG4gICAgICAgICAgICByZWdleCwgc3RhcnRpbmdUYWcoZWxtKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdleHAgPSByZWdleCB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5wYXR0ZXJuID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIEhUTUw1IHBhdHRlcm4gY29uc3RyYWludCB2YWxpZGF0ZXMgdGhlIGlucHV0IHZhbHVlLCBzbyB3ZSB2YWxpZGF0ZSB0aGUgdmlld1ZhbHVlXG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQocmVnZXhwKSB8fCByZWdleHAudGVzdCh2aWV3VmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTWF4bGVuZ3RoXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdNYXhsZW5ndGggYWRkcyB0aGUgbWF4bGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gKlxuICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWF4bGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gKiBpcyBsb25nZXIgdGhhbiB0aGUgaW50ZWdlciBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlXG4gKiBgbmdNYXhsZW5ndGhgIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIFRoaXMgZGlyZWN0aXZlIGlzIGFsc28gYWRkZWQgd2hlbiB0aGUgcGxhaW4gYG1heGxlbmd0aGAgYXR0cmlidXRlIGlzIHVzZWQsIHdpdGggdHdvXG4gKiBkaWZmZXJlbmNlczpcbiAqIDxvbD5cbiAqICAgPGxpPlxuICogICAgIGBuZ01heGxlbmd0aGAgZG9lcyBub3Qgc2V0IHRoZSBgbWF4bGVuZ3RoYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50XG4gKiAgICAgdmFsaWRhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgVGhlIGBuZ01heGxlbmd0aGAgYXR0cmlidXRlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBtYXhsZW5ndGhgIHZhbHVlIG11c3QgYmVcbiAqICAgICBpbnRlcnBvbGF0ZWQuXG4gKiAgIDwvbGk+XG4gKiA8L29sPlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01heGxlbmd0aERpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nTWF4bGVuZ3RoRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdNYXhsZW5ndGhFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLm1heGxlbmd0aCA9IDU7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1heGxlbmd0aFwiPlNldCBhIG1heGxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1heGxlbmd0aFwiIGlkPVwibWF4bGVuZ3RoXCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWF4bGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1heGxlbmd0aD1cIm1heGxlbmd0aFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtYXhsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYmNkZWYnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FiY2RlZicpO1xuXG4gICAgICAgICBpbnB1dC5jbGVhcigpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYmNkZScpO1xuICAgICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2FiY2RlJyk7XG4gICAgICAgICB9KTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbWF4bGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWF4bGVuZ3RoID0gLTE7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXhsZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW50VmFsID0gdG9JbnQodmFsdWUpO1xuICAgICAgICBtYXhsZW5ndGggPSBpc051bWJlck5hTihpbnRWYWwpID8gLTEgOiBpbnRWYWw7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobWF4bGVuZ3RoIDwgMCkgfHwgY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8ICh2aWV3VmFsdWUubGVuZ3RoIDw9IG1heGxlbmd0aCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNaW5sZW5ndGhcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ01pbmxlbmd0aCBhZGRzIHRoZSBtaW5sZW5ndGgge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYHZhbGlkYXRvcmB9IHRvIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0uXG4gKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHRleHQtYmFzZWQge0BsaW5rIGlucHV0IGBpbnB1dGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmUgYXBwbGllZCB0byBjdXN0b20gdGV4dC1iYXNlZCBjb250cm9scy5cbiAqXG4gKiBUaGUgdmFsaWRhdG9yIHNldHMgdGhlIGBtaW5sZW5ndGhgIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAqIGlzIHNob3J0ZXIgdGhhbiB0aGUgaW50ZWdlciBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlXG4gKiBgbmdNaW5sZW5ndGhgIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIFRoaXMgZGlyZWN0aXZlIGlzIGFsc28gYWRkZWQgd2hlbiB0aGUgcGxhaW4gYG1pbmxlbmd0aGAgYXR0cmlidXRlIGlzIHVzZWQsIHdpdGggdHdvXG4gKiBkaWZmZXJlbmNlczpcbiAqIDxvbD5cbiAqICAgPGxpPlxuICogICAgIGBuZ01pbmxlbmd0aGAgZG9lcyBub3Qgc2V0IHRoZSBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50XG4gKiAgICAgdmFsaWRhdGlvbiBpcyBub3QgYXZhaWxhYmxlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgVGhlIGBuZ01pbmxlbmd0aGAgdmFsdWUgbXVzdCBiZSBhbiBleHByZXNzaW9uLCB3aGlsZSB0aGUgYG1pbmxlbmd0aGAgdmFsdWUgbXVzdCBiZVxuICogICAgIGludGVycG9sYXRlZC5cbiAqICAgPC9saT5cbiAqIDwvb2w+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTWlubGVuZ3RoRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdNaW5sZW5ndGhFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ01pbmxlbmd0aEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUubWlubGVuZ3RoID0gMztcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwibWlubGVuZ3RoXCI+U2V0IGEgbWlubGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWlubGVuZ3RoXCIgaWQ9XCJtaW5sZW5ndGhcIiAvPlxuICogICAgICAgICA8YnI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJpbnB1dFwiPlRoaXMgaW5wdXQgaXMgcmVzdHJpY3RlZCBieSB0aGUgY3VycmVudCBtaW5sZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbWlubGVuZ3RoPVwibWlubGVuZ3RoXCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IG1pbmxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYicpO1xuXG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2FiYycpO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBtaW5sZW5ndGggPSAwO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWlubGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgbWlubGVuZ3RoID0gdG9JbnQodmFsdWUpIHx8IDA7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWlubGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA+PSBtaW5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbmlmICh3aW5kb3cuYW5ndWxhci5ib290c3RyYXApIHtcbiAgLy8gQW5ndWxhckpTIGlzIGFscmVhZHkgbG9hZGVkLCBzbyB3ZSBjYW4gcmV0dXJuIGhlcmUuLi5cbiAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgY29uc29sZS5sb2coJ1dBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS4nKTtcbiAgfVxuICByZXR1cm47XG59XG5cbi8vIHRyeSB0byBiaW5kIHRvIGpxdWVyeSBub3cgc28gdGhhdCBvbmUgY2FuIHdyaXRlIGpxTGl0ZShmbilcbi8vIGJ1dCB3ZSB3aWxsIHJlYmluZCBvbiBib290c3RyYXAgYWdhaW4uXG5iaW5kSlF1ZXJ5KCk7XG5cbnB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKTtcblxuYW5ndWxhci5tb2R1bGUoXCJuZ0xvY2FsZVwiLCBbXSwgW1wiJHByb3ZpZGVcIiwgZnVuY3Rpb24oJHByb3ZpZGUpIHtcbnZhciBQTFVSQUxfQ0FURUdPUlkgPSB7WkVSTzogXCJ6ZXJvXCIsIE9ORTogXCJvbmVcIiwgVFdPOiBcInR3b1wiLCBGRVc6IFwiZmV3XCIsIE1BTlk6IFwibWFueVwiLCBPVEhFUjogXCJvdGhlclwifTtcbmZ1bmN0aW9uIGdldERlY2ltYWxzKG4pIHtcbiAgbiA9IG4gKyAnJztcbiAgdmFyIGkgPSBuLmluZGV4T2YoJy4nKTtcbiAgcmV0dXJuIChpID09IC0xKSA/IDAgOiBuLmxlbmd0aCAtIGkgLSAxO1xufVxuXG5mdW5jdGlvbiBnZXRWRihuLCBvcHRfcHJlY2lzaW9uKSB7XG4gIHZhciB2ID0gb3B0X3ByZWNpc2lvbjtcblxuICBpZiAodW5kZWZpbmVkID09PSB2KSB7XG4gICAgdiA9IE1hdGgubWluKGdldERlY2ltYWxzKG4pLCAzKTtcbiAgfVxuXG4gIHZhciBiYXNlID0gTWF0aC5wb3coMTAsIHYpO1xuICB2YXIgZiA9ICgobiAqIGJhc2UpIHwgMCkgJSBiYXNlO1xuICByZXR1cm4ge3Y6IHYsIGY6IGZ9O1xufVxuXG4kcHJvdmlkZS52YWx1ZShcIiRsb2NhbGVcIiwge1xuICBcIkRBVEVUSU1FX0ZPUk1BVFNcIjoge1xuICAgIFwiQU1QTVNcIjogW1xuICAgICAgXCJBTVwiLFxuICAgICAgXCJQTVwiXG4gICAgXSxcbiAgICBcIkRBWVwiOiBbXG4gICAgICBcIlN1bmRheVwiLFxuICAgICAgXCJNb25kYXlcIixcbiAgICAgIFwiVHVlc2RheVwiLFxuICAgICAgXCJXZWRuZXNkYXlcIixcbiAgICAgIFwiVGh1cnNkYXlcIixcbiAgICAgIFwiRnJpZGF5XCIsXG4gICAgICBcIlNhdHVyZGF5XCJcbiAgICBdLFxuICAgIFwiRVJBTkFNRVNcIjogW1xuICAgICAgXCJCZWZvcmUgQ2hyaXN0XCIsXG4gICAgICBcIkFubm8gRG9taW5pXCJcbiAgICBdLFxuICAgIFwiRVJBU1wiOiBbXG4gICAgICBcIkJDXCIsXG4gICAgICBcIkFEXCJcbiAgICBdLFxuICAgIFwiRklSU1REQVlPRldFRUtcIjogNixcbiAgICBcIk1PTlRIXCI6IFtcbiAgICAgIFwiSmFudWFyeVwiLFxuICAgICAgXCJGZWJydWFyeVwiLFxuICAgICAgXCJNYXJjaFwiLFxuICAgICAgXCJBcHJpbFwiLFxuICAgICAgXCJNYXlcIixcbiAgICAgIFwiSnVuZVwiLFxuICAgICAgXCJKdWx5XCIsXG4gICAgICBcIkF1Z3VzdFwiLFxuICAgICAgXCJTZXB0ZW1iZXJcIixcbiAgICAgIFwiT2N0b2JlclwiLFxuICAgICAgXCJOb3ZlbWJlclwiLFxuICAgICAgXCJEZWNlbWJlclwiXG4gICAgXSxcbiAgICBcIlNIT1JUREFZXCI6IFtcbiAgICAgIFwiU3VuXCIsXG4gICAgICBcIk1vblwiLFxuICAgICAgXCJUdWVcIixcbiAgICAgIFwiV2VkXCIsXG4gICAgICBcIlRodVwiLFxuICAgICAgXCJGcmlcIixcbiAgICAgIFwiU2F0XCJcbiAgICBdLFxuICAgIFwiU0hPUlRNT05USFwiOiBbXG4gICAgICBcIkphblwiLFxuICAgICAgXCJGZWJcIixcbiAgICAgIFwiTWFyXCIsXG4gICAgICBcIkFwclwiLFxuICAgICAgXCJNYXlcIixcbiAgICAgIFwiSnVuXCIsXG4gICAgICBcIkp1bFwiLFxuICAgICAgXCJBdWdcIixcbiAgICAgIFwiU2VwXCIsXG4gICAgICBcIk9jdFwiLFxuICAgICAgXCJOb3ZcIixcbiAgICAgIFwiRGVjXCJcbiAgICBdLFxuICAgIFwiU1RBTkRBTE9ORU1PTlRIXCI6IFtcbiAgICAgIFwiSmFudWFyeVwiLFxuICAgICAgXCJGZWJydWFyeVwiLFxuICAgICAgXCJNYXJjaFwiLFxuICAgICAgXCJBcHJpbFwiLFxuICAgICAgXCJNYXlcIixcbiAgICAgIFwiSnVuZVwiLFxuICAgICAgXCJKdWx5XCIsXG4gICAgICBcIkF1Z3VzdFwiLFxuICAgICAgXCJTZXB0ZW1iZXJcIixcbiAgICAgIFwiT2N0b2JlclwiLFxuICAgICAgXCJOb3ZlbWJlclwiLFxuICAgICAgXCJEZWNlbWJlclwiXG4gICAgXSxcbiAgICBcIldFRUtFTkRSQU5HRVwiOiBbXG4gICAgICA1LFxuICAgICAgNlxuICAgIF0sXG4gICAgXCJmdWxsRGF0ZVwiOiBcIkVFRUUsIE1NTU0gZCwgeVwiLFxuICAgIFwibG9uZ0RhdGVcIjogXCJNTU1NIGQsIHlcIixcbiAgICBcIm1lZGl1bVwiOiBcIk1NTSBkLCB5IGg6bW06c3MgYVwiLFxuICAgIFwibWVkaXVtRGF0ZVwiOiBcIk1NTSBkLCB5XCIsXG4gICAgXCJtZWRpdW1UaW1lXCI6IFwiaDptbTpzcyBhXCIsXG4gICAgXCJzaG9ydFwiOiBcIk0vZC95eSBoOm1tIGFcIixcbiAgICBcInNob3J0RGF0ZVwiOiBcIk0vZC95eVwiLFxuICAgIFwic2hvcnRUaW1lXCI6IFwiaDptbSBhXCJcbiAgfSxcbiAgXCJOVU1CRVJfRk9STUFUU1wiOiB7XG4gICAgXCJDVVJSRU5DWV9TWU1cIjogXCIkXCIsXG4gICAgXCJERUNJTUFMX1NFUFwiOiBcIi5cIixcbiAgICBcIkdST1VQX1NFUFwiOiBcIixcIixcbiAgICBcIlBBVFRFUk5TXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICBcImxnU2l6ZVwiOiAzLFxuICAgICAgICBcIm1heEZyYWNcIjogMyxcbiAgICAgICAgXCJtaW5GcmFjXCI6IDAsXG4gICAgICAgIFwibWluSW50XCI6IDEsXG4gICAgICAgIFwibmVnUHJlXCI6IFwiLVwiLFxuICAgICAgICBcIm5lZ1N1ZlwiOiBcIlwiLFxuICAgICAgICBcInBvc1ByZVwiOiBcIlwiLFxuICAgICAgICBcInBvc1N1ZlwiOiBcIlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImdTaXplXCI6IDMsXG4gICAgICAgIFwibGdTaXplXCI6IDMsXG4gICAgICAgIFwibWF4RnJhY1wiOiAyLFxuICAgICAgICBcIm1pbkZyYWNcIjogMixcbiAgICAgICAgXCJtaW5JbnRcIjogMSxcbiAgICAgICAgXCJuZWdQcmVcIjogXCItXFx1MDBhNFwiLFxuICAgICAgICBcIm5lZ1N1ZlwiOiBcIlwiLFxuICAgICAgICBcInBvc1ByZVwiOiBcIlxcdTAwYTRcIixcbiAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgXCJpZFwiOiBcImVuLXVzXCIsXG4gIFwibG9jYWxlSURcIjogXCJlbl9VU1wiLFxuICBcInBsdXJhbENhdFwiOiBmdW5jdGlvbihuLCBvcHRfcHJlY2lzaW9uKSB7ICB2YXIgaSA9IG4gfCAwOyAgdmFyIHZmID0gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbik7ICBpZiAoaSA9PSAxICYmIHZmLnYgPT0gMCkgeyAgICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9ORTsgIH0gIHJldHVybiBQTFVSQUxfQ0FURUdPUlkuT1RIRVI7fVxufSk7XG59XSk7XG5cbiAganFMaXRlKGZ1bmN0aW9uKCkge1xuICAgIGFuZ3VsYXJJbml0KHdpbmRvdy5kb2N1bWVudCwgYm9vdHN0cmFwKTtcbiAgfSk7XG5cbn0pKHdpbmRvdyk7XG5cbiF3aW5kb3cuYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUgJiYgd2luZG93LmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5oZWFkKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+QGNoYXJzZXQgXCJVVEYtOFwiO1tuZ1xcXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O31uZ1xcXFw6Zm9ybXtkaXNwbGF5OmJsb2NrO30ubmctYW5pbWF0ZS1zaGlte3Zpc2liaWxpdHk6aGlkZGVuO30ubmctYW5jaG9ye3Bvc2l0aW9uOmFic29sdXRlO308L3N0eWxlPicpO1xuLyoqXG4gKiBTdGF0ZS1iYXNlZCByb3V0aW5nIGZvciBBbmd1bGFySlNcbiAqIEB2ZXJzaW9uIHYwLjQuMlxuICogQGxpbmsgaHR0cDovL2FuZ3VsYXItdWkuZ2l0aHViLmNvbS9cbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIGNvbW1vbmpzIHBhY2thZ2UgbWFuYWdlciBzdXBwb3J0IChlZyBjb21wb25lbnRqcykgKi9cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzID09PSBleHBvcnRzKXtcbiAgbW9kdWxlLmV4cG9ydHMgPSAndWkucm91dGVyJztcbn1cblxuKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuLypqc2hpbnQgZ2xvYmFsc3RyaWN0OnRydWUqL1xuLypnbG9iYWwgYW5ndWxhcjpmYWxzZSovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0RlZmluZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCxcbiAgICBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uLFxuICAgIGlzU3RyaW5nID0gYW5ndWxhci5pc1N0cmluZyxcbiAgICBpc09iamVjdCA9IGFuZ3VsYXIuaXNPYmplY3QsXG4gICAgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheSxcbiAgICBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoLFxuICAgIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kLFxuICAgIGNvcHkgPSBhbmd1bGFyLmNvcHksXG4gICAgdG9Kc29uID0gYW5ndWxhci50b0pzb247XG5cbmZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkge1xuICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHsgcHJvdG90eXBlOiBwYXJlbnQgfSkpKCksIGV4dHJhKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XG4gIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqICE9PSBkc3QpIHtcbiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkpIGRzdFtrZXldID0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjb21tb24gYW5jZXN0b3IgcGF0aCBiZXR3ZWVuIHR3byBzdGF0ZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpcnN0IFRoZSBmaXJzdCBzdGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWNvbmQgVGhlIHNlY29uZCBzdGF0ZS5cbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlIG5hbWVzIGluIGRlc2NlbmRpbmcgb3JkZXIsIG5vdCBpbmNsdWRpbmcgdGhlIHJvb3QuXG4gKi9cbmZ1bmN0aW9uIGFuY2VzdG9ycyhmaXJzdCwgc2Vjb25kKSB7XG4gIHZhciBwYXRoID0gW107XG5cbiAgZm9yICh2YXIgbiBpbiBmaXJzdC5wYXRoKSB7XG4gICAgaWYgKGZpcnN0LnBhdGhbbl0gIT09IHNlY29uZC5wYXRoW25dKSBicmVhaztcbiAgICBwYXRoLnB1c2goZmlyc3QucGF0aFtuXSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbi8qKlxuICogSUU4LXNhZmUgd3JhcHBlciBmb3IgYE9iamVjdC5rZXlzKClgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgQSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QgYXMgYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdEtleXMob2JqZWN0KSB7XG4gIGlmIChPYmplY3Qua2V5cykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBmb3JFYWNoKG9iamVjdCwgZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgICByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJRTgtc2FmZSB3cmFwcGVyIGZvciBgQXJyYXkucHJvdG90eXBlLmluZGV4T2YoKWAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQSBKYXZhU2NyaXB0IGFycmF5LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBBIHZhbHVlIHRvIHNlYXJjaCB0aGUgYXJyYXkgZm9yLlxuICogQHJldHVybiB7TnVtYmVyfSBSZXR1cm5zIHRoZSBhcnJheSBpbmRleCB2YWx1ZSBvZiBgdmFsdWVgLCBvciBgLTFgIGlmIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSwgTnVtYmVyKGFyZ3VtZW50c1syXSkgfHwgMCk7XG4gIH1cbiAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aCA+Pj4gMCwgZnJvbSA9IE51bWJlcihhcmd1bWVudHNbMl0pIHx8IDA7XG4gIGZyb20gPSAoZnJvbSA8IDApID8gTWF0aC5jZWlsKGZyb20pIDogTWF0aC5mbG9vcihmcm9tKTtcblxuICBpZiAoZnJvbSA8IDApIGZyb20gKz0gbGVuO1xuXG4gIGZvciAoOyBmcm9tIDwgbGVuOyBmcm9tKyspIHtcbiAgICBpZiAoZnJvbSBpbiBhcnJheSAmJiBhcnJheVtmcm9tXSA9PT0gdmFsdWUpIHJldHVybiBmcm9tO1xuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBNZXJnZXMgYSBzZXQgb2YgcGFyYW1ldGVycyB3aXRoIGFsbCBwYXJhbWV0ZXJzIGluaGVyaXRlZCBiZXR3ZWVuIHRoZSBjb21tb24gcGFyZW50cyBvZiB0aGVcbiAqIGN1cnJlbnQgc3RhdGUgYW5kIGEgZ2l2ZW4gZGVzdGluYXRpb24gc3RhdGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN1cnJlbnRQYXJhbXMgVGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IHN0YXRlIHBhcmFtZXRlcnMgKCRzdGF0ZVBhcmFtcykuXG4gKiBAcGFyYW0ge09iamVjdH0gbmV3UGFyYW1zIFRoZSBzZXQgb2YgcGFyYW1ldGVycyB3aGljaCB3aWxsIGJlIGNvbXBvc2l0ZWQgd2l0aCBpbmhlcml0ZWQgcGFyYW1zLlxuICogQHBhcmFtIHtPYmplY3R9ICRjdXJyZW50IEludGVybmFsIGRlZmluaXRpb24gb2Ygb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSAkdG8gSW50ZXJuYWwgZGVmaW5pdGlvbiBvZiBvYmplY3QgcmVwcmVzZW50aW5nIHN0YXRlIHRvIHRyYW5zaXRpb24gdG8uXG4gKi9cbmZ1bmN0aW9uIGluaGVyaXRQYXJhbXMoY3VycmVudFBhcmFtcywgbmV3UGFyYW1zLCAkY3VycmVudCwgJHRvKSB7XG4gIHZhciBwYXJlbnRzID0gYW5jZXN0b3JzKCRjdXJyZW50LCAkdG8pLCBwYXJlbnRQYXJhbXMsIGluaGVyaXRlZCA9IHt9LCBpbmhlcml0TGlzdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgaW4gcGFyZW50cykge1xuICAgIGlmICghcGFyZW50c1tpXSB8fCAhcGFyZW50c1tpXS5wYXJhbXMpIGNvbnRpbnVlO1xuICAgIHBhcmVudFBhcmFtcyA9IG9iamVjdEtleXMocGFyZW50c1tpXS5wYXJhbXMpO1xuICAgIGlmICghcGFyZW50UGFyYW1zLmxlbmd0aCkgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBqIGluIHBhcmVudFBhcmFtcykge1xuICAgICAgaWYgKGluZGV4T2YoaW5oZXJpdExpc3QsIHBhcmVudFBhcmFtc1tqXSkgPj0gMCkgY29udGludWU7XG4gICAgICBpbmhlcml0TGlzdC5wdXNoKHBhcmVudFBhcmFtc1tqXSk7XG4gICAgICBpbmhlcml0ZWRbcGFyZW50UGFyYW1zW2pdXSA9IGN1cnJlbnRQYXJhbXNbcGFyZW50UGFyYW1zW2pdXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV4dGVuZCh7fSwgaW5oZXJpdGVkLCBuZXdQYXJhbXMpO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbm9uLXN0cmljdCBjb21wYXJpc29uIG9mIHRoZSBzdWJzZXQgb2YgdHdvIG9iamVjdHMsIGRlZmluZWQgYnkgYSBsaXN0IG9mIGtleXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIGZpcnN0IG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBzZWNvbmQgb2JqZWN0LlxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUgbGlzdCBvZiBrZXlzIHdpdGhpbiBlYWNoIG9iamVjdCB0byBjb21wYXJlLiBJZiB0aGUgbGlzdCBpcyBlbXB0eSBvciBub3Qgc3BlY2lmaWVkLFxuICogICAgICAgICAgICAgICAgICAgICBpdCBkZWZhdWx0cyB0byB0aGUgbGlzdCBvZiBrZXlzIGluIGBhYC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBrZXlzIG1hdGNoLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxGb3JLZXlzKGEsIGIsIGtleXMpIHtcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIG4gaW4gYSkga2V5cy5wdXNoKG4pOyAvLyBVc2VkIGluc3RlYWQgb2YgT2JqZWN0LmtleXMoKSBmb3IgSUU4IGNvbXBhdGliaWxpdHlcbiAgfVxuXG4gIGZvciAodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGsgPSBrZXlzW2ldO1xuICAgIGlmIChhW2tdICE9IGJba10pIHJldHVybiBmYWxzZTsgLy8gTm90ICc9PT0nLCB2YWx1ZXMgYXJlbid0IG5lY2Vzc2FyaWx5IG5vcm1hbGl6ZWRcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdWJzZXQgb2YgYW4gb2JqZWN0LCBiYXNlZCBvbiBhIGxpc3Qgb2Yga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIGEgc3Vic2V0IG9mIGB2YWx1ZXNgLlxuICovXG5mdW5jdGlvbiBmaWx0ZXJCeUtleXMoa2V5cywgdmFsdWVzKSB7XG4gIHZhciBmaWx0ZXJlZCA9IHt9O1xuXG4gIGZvckVhY2goa2V5cywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBmaWx0ZXJlZFtuYW1lXSA9IHZhbHVlc1tuYW1lXTtcbiAgfSk7XG4gIHJldHVybiBmaWx0ZXJlZDtcbn1cblxuLy8gbGlrZSBfLmluZGV4Qnlcbi8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZSwgb3IgeW91IHdhbnQgbGFzdC1vbmUtaW4gdG8gd2luXG5mdW5jdGlvbiBpbmRleEJ5KGFycmF5LCBwcm9wTmFtZSkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvckVhY2goYXJyYXksIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXN1bHRbaXRlbVtwcm9wTmFtZV1dID0gaXRlbTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIGV4dHJhY3RlZCBmcm9tIHVuZGVyc2NvcmUuanNcbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG5mdW5jdGlvbiBwaWNrKG9iaikge1xuICB2YXIgY29weSA9IHt9O1xuICB2YXIga2V5cyA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoQXJyYXkucHJvdG90eXBlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgZm9yRWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gIH0pO1xuICByZXR1cm4gY29weTtcbn1cblxuLy8gZXh0cmFjdGVkIGZyb20gdW5kZXJzY29yZS5qc1xuLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9taXR0aW5nIHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuZnVuY3Rpb24gb21pdChvYmopIHtcbiAgdmFyIGNvcHkgPSB7fTtcbiAgdmFyIGtleXMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KEFycmF5LnByb3RvdHlwZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaW5kZXhPZihrZXlzLCBrZXkpID09IC0xKSBjb3B5W2tleV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gcGx1Y2soY29sbGVjdGlvbiwga2V5KSB7XG4gIHZhciByZXN1bHQgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gW10gOiB7fTtcblxuICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgIHJlc3VsdFtpXSA9IGlzRnVuY3Rpb24oa2V5KSA/IGtleSh2YWwpIDogdmFsW2tleV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcbiAgdmFyIGFycmF5ID0gaXNBcnJheShjb2xsZWN0aW9uKTtcbiAgdmFyIHJlc3VsdCA9IGFycmF5ID8gW10gOiB7fTtcbiAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWwsIGkpIHtcbiAgICBpZiAoY2FsbGJhY2sodmFsLCBpKSkge1xuICAgICAgcmVzdWx0W2FycmF5ID8gcmVzdWx0Lmxlbmd0aCA6IGldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IFtdIDoge307XG5cbiAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWwsIGkpIHtcbiAgICByZXN1bHRbaV0gPSBjYWxsYmFjayh2YWwsIGkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gaXNzdWUgIzI2NzYgIzI4ODlcbmZ1bmN0aW9uIHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS50aGVuKHVuZGVmaW5lZCwgZnVuY3Rpb24oKSB7fSkgJiYgcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAjIHVpLnJvdXRlci51dGlsIHN1Yi1tb2R1bGVcbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyBhIGRlcGVuZGVuY3kgb2Ygb3RoZXIgc3ViLW1vZHVsZXMuIERvIG5vdCBpbmNsdWRlIHRoaXMgbW9kdWxlIGFzIGEgZGVwZW5kZW5jeVxuICogaW4geW91ciBhbmd1bGFyIGFwcCAodXNlIHtAbGluayB1aS5yb3V0ZXJ9IG1vZHVsZSBpbnN0ZWFkKS5cbiAqXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcsIFsnbmcnXSk7XG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyXG4gKiBcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyB1aS5yb3V0ZXIucm91dGVyIHN1Yi1tb2R1bGVcbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyBhIGRlcGVuZGVuY3kgb2Ygb3RoZXIgc3ViLW1vZHVsZXMuIERvIG5vdCBpbmNsdWRlIHRoaXMgbW9kdWxlIGFzIGEgZGVwZW5kZW5jeVxuICogaW4geW91ciBhbmd1bGFyIGFwcCAodXNlIHtAbGluayB1aS5yb3V0ZXJ9IG1vZHVsZSBpbnN0ZWFkKS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5yb3V0ZXInLCBbJ3VpLnJvdXRlci51dGlsJ10pO1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgdWkucm91dGVyLnN0YXRlXG4gKiBcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIucm91dGVyXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyLnN0YXRlIHN1Yi1tb2R1bGVcbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyBhIGRlcGVuZGVuY3kgb2YgdGhlIG1haW4gdWkucm91dGVyIG1vZHVsZS4gRG8gbm90IGluY2x1ZGUgdGhpcyBtb2R1bGUgYXMgYSBkZXBlbmRlbmN5XG4gKiBpbiB5b3VyIGFuZ3VsYXIgYXBwICh1c2Uge0BsaW5rIHVpLnJvdXRlcn0gbW9kdWxlIGluc3RlYWQpLlxuICogXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnLCBbJ3VpLnJvdXRlci5yb3V0ZXInLCAndWkucm91dGVyLnV0aWwnXSk7XG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5yb3V0ZXJcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAjIHVpLnJvdXRlclxuICogXG4gKiAjIyBUaGUgbWFpbiBtb2R1bGUgZm9yIHVpLnJvdXRlciBcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHN1Yi1tb2R1bGVzIGluY2x1ZGVkIHdpdGggdGhlIHVpLnJvdXRlciBtb2R1bGUsIGhvd2V2ZXIgb25seSB0aGlzIG1vZHVsZSBpcyBuZWVkZWRcbiAqIGFzIGEgZGVwZW5kZW5jeSB3aXRoaW4geW91ciBhbmd1bGFyIGFwcC4gVGhlIG90aGVyIG1vZHVsZXMgYXJlIGZvciBvcmdhbml6YXRpb24gcHVycG9zZXMuIFxuICpcbiAqIFRoZSBtb2R1bGVzIGFyZTpcbiAqICogdWkucm91dGVyIC0gdGhlIG1haW4gXCJ1bWJyZWxsYVwiIG1vZHVsZVxuICogKiB1aS5yb3V0ZXIucm91dGVyIC0gXG4gKiBcbiAqICpZb3UnbGwgbmVlZCB0byBpbmNsdWRlICoqb25seSoqIHRoaXMgbW9kdWxlIGFzIHRoZSBkZXBlbmRlbmN5IHdpdGhpbiB5b3VyIGFuZ3VsYXIgYXBwLipcbiAqIFxuICogPHByZT5cbiAqIDwhZG9jdHlwZSBodG1sPlxuICogPGh0bWwgbmctYXBwPVwibXlBcHBcIj5cbiAqIDxoZWFkPlxuICogICA8c2NyaXB0IHNyYz1cImpzL2FuZ3VsYXIuanNcIj48L3NjcmlwdD5cbiAqICAgPCEtLSBJbmNsdWRlIHRoZSB1aS1yb3V0ZXIgc2NyaXB0IC0tPlxuICogICA8c2NyaXB0IHNyYz1cImpzL2FuZ3VsYXItdWktcm91dGVyLm1pbi5qc1wiPjwvc2NyaXB0PlxuICogICA8c2NyaXB0PlxuICogICAgIC8vIC4uLmFuZCBhZGQgJ3VpLnJvdXRlcicgYXMgYSBkZXBlbmRlbmN5XG4gKiAgICAgdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyd1aS5yb3V0ZXInXSk7XG4gKiAgIDwvc2NyaXB0PlxuICogPC9oZWFkPlxuICogPGJvZHk+XG4gKiA8L2JvZHk+XG4gKiA8L2h0bWw+XG4gKiA8L3ByZT5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlcicsIFsndWkucm91dGVyLnN0YXRlJ10pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLmNvbXBhdCcsIFsndWkucm91dGVyJ10pO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlXG4gKlxuICogQHJlcXVpcmVzICRxXG4gKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNYW5hZ2VzIHJlc29sdXRpb24gb2YgKGFjeWNsaWMpIGdyYXBocyBvZiBwcm9taXNlcy5cbiAqL1xuJFJlc29sdmUuJGluamVjdCA9IFsnJHEnLCAnJGluamVjdG9yJ107XG5mdW5jdGlvbiAkUmVzb2x2ZSggICRxLCAgICAkaW5qZWN0b3IpIHtcbiAgXG4gIHZhciBWSVNJVF9JTl9QUk9HUkVTUyA9IDEsXG4gICAgICBWSVNJVF9ET05FID0gMixcbiAgICAgIE5PVEhJTkcgPSB7fSxcbiAgICAgIE5PX0RFUEVOREVOQ0lFUyA9IFtdLFxuICAgICAgTk9fTE9DQUxTID0gTk9USElORyxcbiAgICAgIE5PX1BBUkVOVCA9IGV4dGVuZCgkcS53aGVuKE5PVEhJTkcpLCB7ICQkcHJvbWlzZXM6IE5PVEhJTkcsICQkdmFsdWVzOiBOT1RISU5HIH0pO1xuICBcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlI3N0dWR5XG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kcmVzb2x2ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3R1ZGllcyBhIHNldCBvZiBpbnZvY2FibGVzIHRoYXQgYXJlIGxpa2VseSB0byBiZSB1c2VkIG11bHRpcGxlIHRpbWVzLlxuICAgKiA8cHJlPlxuICAgKiAkcmVzb2x2ZS5zdHVkeShpbnZvY2FibGVzKShsb2NhbHMsIHBhcmVudCwgc2VsZilcbiAgICogPC9wcmU+XG4gICAqIGlzIGVxdWl2YWxlbnQgdG9cbiAgICogPHByZT5cbiAgICogJHJlc29sdmUucmVzb2x2ZShpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZilcbiAgICogPC9wcmU+XG4gICAqIGJ1dCB0aGUgZm9ybWVyIGlzIG1vcmUgZWZmaWNpZW50IChpbiBmYWN0IGByZXNvbHZlYCBqdXN0IGNhbGxzIGBzdHVkeWAgXG4gICAqIGludGVybmFsbHkpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW52b2NhYmxlcyBJbnZvY2FibGUgb2JqZWN0c1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gYSBmdW5jdGlvbiB0byBwYXNzIGluIGxvY2FscywgcGFyZW50IGFuZCBzZWxmXG4gICAqL1xuICB0aGlzLnN0dWR5ID0gZnVuY3Rpb24gKGludm9jYWJsZXMpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGludm9jYWJsZXMpKSB0aHJvdyBuZXcgRXJyb3IoXCInaW52b2NhYmxlcycgbXVzdCBiZSBhbiBvYmplY3RcIik7XG4gICAgdmFyIGludm9jYWJsZUtleXMgPSBvYmplY3RLZXlzKGludm9jYWJsZXMgfHwge30pO1xuICAgIFxuICAgIC8vIFBlcmZvcm0gYSB0b3BvbG9naWNhbCBzb3J0IG9mIGludm9jYWJsZXMgdG8gYnVpbGQgYW4gb3JkZXJlZCBwbGFuXG4gICAgdmFyIHBsYW4gPSBbXSwgY3ljbGUgPSBbXSwgdmlzaXRlZCA9IHt9O1xuICAgIGZ1bmN0aW9uIHZpc2l0KHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2aXNpdGVkW2tleV0gPT09IFZJU0lUX0RPTkUpIHJldHVybjtcbiAgICAgIFxuICAgICAgY3ljbGUucHVzaChrZXkpO1xuICAgICAgaWYgKHZpc2l0ZWRba2V5XSA9PT0gVklTSVRfSU5fUFJPR1JFU1MpIHtcbiAgICAgICAgY3ljbGUuc3BsaWNlKDAsIGluZGV4T2YoY3ljbGUsIGtleSkpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDeWNsaWMgZGVwZW5kZW5jeTogXCIgKyBjeWNsZS5qb2luKFwiIC0+IFwiKSk7XG4gICAgICB9XG4gICAgICB2aXNpdGVkW2tleV0gPSBWSVNJVF9JTl9QUk9HUkVTUztcbiAgICAgIFxuICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBwbGFuLnB1c2goa2V5LCBbIGZ1bmN0aW9uKCkgeyByZXR1cm4gJGluamVjdG9yLmdldCh2YWx1ZSk7IH1dLCBOT19ERVBFTkRFTkNJRVMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9ICRpbmplY3Rvci5hbm5vdGF0ZSh2YWx1ZSk7XG4gICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICBpZiAocGFyYW0gIT09IGtleSAmJiBpbnZvY2FibGVzLmhhc093blByb3BlcnR5KHBhcmFtKSkgdmlzaXQoaW52b2NhYmxlc1twYXJhbV0sIHBhcmFtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYW4ucHVzaChrZXksIHZhbHVlLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjeWNsZS5wb3AoKTtcbiAgICAgIHZpc2l0ZWRba2V5XSA9IFZJU0lUX0RPTkU7XG4gICAgfVxuICAgIGZvckVhY2goaW52b2NhYmxlcywgdmlzaXQpO1xuICAgIGludm9jYWJsZXMgPSBjeWNsZSA9IHZpc2l0ZWQgPSBudWxsOyAvLyBwbGFuIGlzIGFsbCB0aGF0J3MgcmVxdWlyZWRcbiAgICBcbiAgICBmdW5jdGlvbiBpc1Jlc29sdmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUudGhlbiAmJiB2YWx1ZS4kJHByb21pc2VzO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZnVuY3Rpb24gKGxvY2FscywgcGFyZW50LCBzZWxmKSB7XG4gICAgICBpZiAoaXNSZXNvbHZlKGxvY2FscykgJiYgc2VsZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlbGYgPSBwYXJlbnQ7IHBhcmVudCA9IGxvY2FsczsgbG9jYWxzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICghbG9jYWxzKSBsb2NhbHMgPSBOT19MT0NBTFM7XG4gICAgICBlbHNlIGlmICghaXNPYmplY3QobG9jYWxzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInbG9jYWxzJyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgICAgIH0gICAgICAgXG4gICAgICBpZiAoIXBhcmVudCkgcGFyZW50ID0gTk9fUEFSRU5UO1xuICAgICAgZWxzZSBpZiAoIWlzUmVzb2x2ZShwYXJlbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIidwYXJlbnQnIG11c3QgYmUgYSBwcm9taXNlIHJldHVybmVkIGJ5ICRyZXNvbHZlLnJlc29sdmUoKVwiKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVG8gY29tcGxldGUgdGhlIG92ZXJhbGwgcmVzb2x1dGlvbiwgd2UgaGF2ZSB0byB3YWl0IGZvciB0aGUgcGFyZW50XG4gICAgICAvLyBwcm9taXNlIGFuZCBmb3IgdGhlIHByb21pc2UgZm9yIGVhY2ggaW52b2thYmxlIGluIG91ciBwbGFuLlxuICAgICAgdmFyIHJlc29sdXRpb24gPSAkcS5kZWZlcigpLFxuICAgICAgICAgIHJlc3VsdCA9IHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZShyZXNvbHV0aW9uLnByb21pc2UpLFxuICAgICAgICAgIHByb21pc2VzID0gcmVzdWx0LiQkcHJvbWlzZXMgPSB7fSxcbiAgICAgICAgICB2YWx1ZXMgPSBleHRlbmQoe30sIGxvY2FscyksXG4gICAgICAgICAgd2FpdCA9IDEgKyBwbGFuLmxlbmd0aC8zLFxuICAgICAgICAgIG1lcmdlZCA9IGZhbHNlO1xuXG4gICAgICBzaWxlbmNlVW5jYXVnaHRJblByb21pc2UocmVzdWx0KTtcbiAgICAgICAgICBcbiAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgIC8vIE1lcmdlIHBhcmVudCB2YWx1ZXMgd2UgaGF2ZW4ndCBnb3QgeWV0IGFuZCBwdWJsaXNoIG91ciBvd24gJCR2YWx1ZXNcbiAgICAgICAgaWYgKCEtLXdhaXQpIHtcbiAgICAgICAgICBpZiAoIW1lcmdlZCkgbWVyZ2UodmFsdWVzLCBwYXJlbnQuJCR2YWx1ZXMpOyBcbiAgICAgICAgICByZXN1bHQuJCR2YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgcmVzdWx0LiQkcHJvbWlzZXMgPSByZXN1bHQuJCRwcm9taXNlcyB8fCB0cnVlOyAvLyBrZWVwIGZvciBpc1Jlc29sdmUoKVxuICAgICAgICAgIGRlbGV0ZSByZXN1bHQuJCRpbmhlcml0ZWRWYWx1ZXM7XG4gICAgICAgICAgcmVzb2x1dGlvbi5yZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgZnVuY3Rpb24gZmFpbChyZWFzb24pIHtcbiAgICAgICAgcmVzdWx0LiQkZmFpbHVyZSA9IHJlYXNvbjtcbiAgICAgICAgcmVzb2x1dGlvbi5yZWplY3QocmVhc29uKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hvcnQtY2lyY3VpdCBpZiBwYXJlbnQgaGFzIGFscmVhZHkgZmFpbGVkXG4gICAgICBpZiAoaXNEZWZpbmVkKHBhcmVudC4kJGZhaWx1cmUpKSB7XG4gICAgICAgIGZhaWwocGFyZW50LiQkZmFpbHVyZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChwYXJlbnQuJCRpbmhlcml0ZWRWYWx1ZXMpIHtcbiAgICAgICAgbWVyZ2UodmFsdWVzLCBvbWl0KHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcywgaW52b2NhYmxlS2V5cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBNZXJnZSBwYXJlbnQgdmFsdWVzIGlmIHRoZSBwYXJlbnQgaGFzIGFscmVhZHkgcmVzb2x2ZWQsIG9yIG1lcmdlXG4gICAgICAvLyBwYXJlbnQgcHJvbWlzZXMgYW5kIHdhaXQgaWYgdGhlIHBhcmVudCByZXNvbHZlIGlzIHN0aWxsIGluIHByb2dyZXNzLlxuICAgICAgZXh0ZW5kKHByb21pc2VzLCBwYXJlbnQuJCRwcm9taXNlcyk7XG4gICAgICBpZiAocGFyZW50LiQkdmFsdWVzKSB7XG4gICAgICAgIG1lcmdlZCA9IG1lcmdlKHZhbHVlcywgb21pdChwYXJlbnQuJCR2YWx1ZXMsIGludm9jYWJsZUtleXMpKTtcbiAgICAgICAgcmVzdWx0LiQkaW5oZXJpdGVkVmFsdWVzID0gb21pdChwYXJlbnQuJCR2YWx1ZXMsIGludm9jYWJsZUtleXMpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGFyZW50LiQkaW5oZXJpdGVkVmFsdWVzKSB7XG4gICAgICAgICAgcmVzdWx0LiQkaW5oZXJpdGVkVmFsdWVzID0gb21pdChwYXJlbnQuJCRpbmhlcml0ZWRWYWx1ZXMsIGludm9jYWJsZUtleXMpO1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgcGFyZW50LnRoZW4oZG9uZSwgZmFpbCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgZWFjaCBpbnZvY2FibGUgaW4gdGhlIHBsYW4sIGJ1dCBpZ25vcmUgYW55IHdoZXJlIGEgbG9jYWwgb2YgdGhlIHNhbWUgbmFtZSBleGlzdHMuXG4gICAgICBmb3IgKHZhciBpPTAsIGlpPXBsYW4ubGVuZ3RoOyBpPGlpOyBpKz0zKSB7XG4gICAgICAgIGlmIChsb2NhbHMuaGFzT3duUHJvcGVydHkocGxhbltpXSkpIGRvbmUoKTtcbiAgICAgICAgZWxzZSBpbnZva2UocGxhbltpXSwgcGxhbltpKzFdLCBwbGFuW2krMl0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICBmdW5jdGlvbiBpbnZva2Uoa2V5LCBpbnZvY2FibGUsIHBhcmFtcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBkZWZlcnJlZCBmb3IgdGhpcyBpbnZvY2F0aW9uLiBGYWlsdXJlcyB3aWxsIHByb3BhZ2F0ZSB0byB0aGUgcmVzb2x1dGlvbiBhcyB3ZWxsLlxuICAgICAgICB2YXIgaW52b2NhdGlvbiA9ICRxLmRlZmVyKCksIHdhaXRQYXJhbXMgPSAwO1xuICAgICAgICBmdW5jdGlvbiBvbmZhaWx1cmUocmVhc29uKSB7XG4gICAgICAgICAgaW52b2NhdGlvbi5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICBmYWlsKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2FpdCBmb3IgYW55IHBhcmFtZXRlciB0aGF0IHdlIGhhdmUgYSBwcm9taXNlIGZvciAoZWl0aGVyIGZyb20gcGFyZW50IG9yIGZyb20gdGhpc1xuICAgICAgICAvLyByZXNvbHZlOyBpbiB0aGF0IGNhc2Ugc3R1ZHkoKSB3aWxsIGhhdmUgbWFkZSBzdXJlIGl0J3Mgb3JkZXJlZCBiZWZvcmUgdXMgaW4gdGhlIHBsYW4pLlxuICAgICAgICBmb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gKGRlcCkge1xuICAgICAgICAgIGlmIChwcm9taXNlcy5oYXNPd25Qcm9wZXJ0eShkZXApICYmICFsb2NhbHMuaGFzT3duUHJvcGVydHkoZGVwKSkge1xuICAgICAgICAgICAgd2FpdFBhcmFtcysrO1xuICAgICAgICAgICAgcHJvbWlzZXNbZGVwXS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgdmFsdWVzW2RlcF0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgIGlmICghKC0td2FpdFBhcmFtcykpIHByb2NlZWQoKTtcbiAgICAgICAgICAgIH0sIG9uZmFpbHVyZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF3YWl0UGFyYW1zKSBwcm9jZWVkKCk7XG4gICAgICAgIGZ1bmN0aW9uIHByb2NlZWQoKSB7XG4gICAgICAgICAgaWYgKGlzRGVmaW5lZChyZXN1bHQuJCRmYWlsdXJlKSkgcmV0dXJuO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbnZvY2F0aW9uLnJlc29sdmUoJGluamVjdG9yLmludm9rZShpbnZvY2FibGUsIHNlbGYsIHZhbHVlcykpO1xuICAgICAgICAgICAgaW52b2NhdGlvbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSwgb25mYWlsdXJlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBvbmZhaWx1cmUoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFB1Ymxpc2ggcHJvbWlzZSBzeW5jaHJvbm91c2x5OyBpbnZvY2F0aW9ucyBmdXJ0aGVyIGRvd24gaW4gdGhlIHBsYW4gbWF5IGRlcGVuZCBvbiBpdC5cbiAgICAgICAgcHJvbWlzZXNba2V5XSA9IHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZShpbnZvY2F0aW9uLnByb21pc2UpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG4gIFxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlI3Jlc29sdmVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXNvbHZlcyBhIHNldCBvZiBpbnZvY2FibGVzLiBBbiBpbnZvY2FibGUgaXMgYSBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHZpYSBcbiAgICogYCRpbmplY3Rvci5pbnZva2UoKWAsIGFuZCBjYW4gaGF2ZSBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIGRlcGVuZGVuY2llcy4gXG4gICAqIEFuIGludm9jYWJsZSBjYW4gZWl0aGVyIHJldHVybiBhIHZhbHVlIGRpcmVjdGx5LFxuICAgKiBvciBhIGAkcWAgcHJvbWlzZS4gSWYgYSBwcm9taXNlIGlzIHJldHVybmVkIGl0IHdpbGwgYmUgcmVzb2x2ZWQgYW5kIHRoZSBcbiAgICogcmVzdWx0aW5nIHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLiBEZXBlbmRlbmNpZXMgb2YgaW52b2NhYmxlcyBhcmUgcmVzb2x2ZWQgXG4gICAqIChpbiB0aGlzIG9yZGVyIG9mIHByZWNlZGVuY2UpXG4gICAqXG4gICAqIC0gZnJvbSB0aGUgc3BlY2lmaWVkIGBsb2NhbHNgXG4gICAqIC0gZnJvbSBhbm90aGVyIGludm9jYWJsZSB0aGF0IGlzIHBhcnQgb2YgdGhpcyBgJHJlc29sdmVgIGNhbGxcbiAgICogLSBmcm9tIGFuIGludm9jYWJsZSB0aGF0IGlzIGluaGVyaXRlZCBmcm9tIGEgYHBhcmVudGAgY2FsbCB0byBgJHJlc29sdmVgIFxuICAgKiAgIChvciByZWN1cnNpdmVseVxuICAgKiAtIGZyb20gYW55IGFuY2VzdG9yIGAkcmVzb2x2ZWAgb2YgdGhhdCBwYXJlbnQpLlxuICAgKlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkcmVzb2x2ZWAgaXMgYSBwcm9taXNlIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyBcbiAgICogKGluIHRoaXMgb3JkZXIgb2YgcHJlY2VkZW5jZSlcbiAgICpcbiAgICogLSBhbnkgYGxvY2Fsc2AgKGlmIHNwZWNpZmllZClcbiAgICogLSB0aGUgcmVzb2x2ZWQgcmV0dXJuIHZhbHVlcyBvZiBhbGwgaW5qZWN0YWJsZXNcbiAgICogLSBhbnkgdmFsdWVzIGluaGVyaXRlZCBmcm9tIGEgYHBhcmVudGAgY2FsbCB0byBgJHJlc29sdmVgIChpZiBzcGVjaWZpZWQpXG4gICAqXG4gICAqIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSBhZnRlciB0aGUgYHBhcmVudGAgcHJvbWlzZSAoaWYgYW55KSBhbmQgYWxsIHByb21pc2VzIFxuICAgKiByZXR1cm5lZCBieSBpbmplY3RhYmxlcyBoYXZlIGJlZW4gcmVzb2x2ZWQuIElmIGFueSBpbnZvY2FibGUgXG4gICAqIChvciBgJGluamVjdG9yLmludm9rZWApIHRocm93cyBhbiBleGNlcHRpb24sIG9yIGlmIGEgcHJvbWlzZSByZXR1cm5lZCBieSBhbiBcbiAgICogaW52b2NhYmxlIGlzIHJlamVjdGVkLCB0aGUgYCRyZXNvbHZlYCBwcm9taXNlIGlzIGltbWVkaWF0ZWx5IHJlamVjdGVkIHdpdGggdGhlIFxuICAgKiBzYW1lIGVycm9yLiBBIHJlamVjdGlvbiBvZiBhIGBwYXJlbnRgIHByb21pc2UgKGlmIHNwZWNpZmllZCkgd2lsbCBsaWtld2lzZSBiZSBcbiAgICogcHJvcGFnYXRlZCBpbW1lZGlhdGVseS4gT25jZSB0aGUgYCRyZXNvbHZlYCBwcm9taXNlIGhhcyBiZWVuIHJlamVjdGVkLCBubyBcbiAgICogZnVydGhlciBpbnZvY2FibGVzIHdpbGwgYmUgY2FsbGVkLlxuICAgKiBcbiAgICogQ3ljbGljIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGludm9jYWJsZXMgYXJlIG5vdCBwZXJtaXR0ZWQgYW5kIHdpbGwgY2F1c2UgYCRyZXNvbHZlYFxuICAgKiB0byB0aHJvdyBhbiBlcnJvci4gQXMgYSBzcGVjaWFsIGNhc2UsIGFuIGluamVjdGFibGUgY2FuIGRlcGVuZCBvbiBhIHBhcmFtZXRlciBcbiAgICogd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBpbmplY3RhYmxlLCB3aGljaCB3aWxsIGJlIGZ1bGZpbGxlZCBmcm9tIHRoZSBgcGFyZW50YCBcbiAgICogaW5qZWN0YWJsZSBvZiB0aGUgc2FtZSBuYW1lLiBUaGlzIGFsbG93cyBpbmhlcml0ZWQgdmFsdWVzIHRvIGJlIGRlY29yYXRlZC4gXG4gICAqIE5vdGUgdGhhdCBpbiB0aGlzIGNhc2UgYW55IG90aGVyIGluamVjdGFibGUgaW4gdGhlIHNhbWUgYCRyZXNvbHZlYCB3aXRoIHRoZSBzYW1lXG4gICAqIGRlcGVuZGVuY3kgd291bGQgc2VlIHRoZSBkZWNvcmF0ZWQgdmFsdWUsIG5vdCB0aGUgaW5oZXJpdGVkIHZhbHVlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgbWlzc2luZyBkZXBlbmRlbmNpZXMgLS0gdW5saWtlIGN5Y2xpYyBkZXBlbmRlbmNpZXMgLS0gd2lsbCBjYXVzZSBhbiBcbiAgICogKGFzeW5jaHJvbm91cykgcmVqZWN0aW9uIG9mIHRoZSBgJHJlc29sdmVgIHByb21pc2UgcmF0aGVyIHRoYW4gYSAoc3luY2hyb25vdXMpIFxuICAgKiBleGNlcHRpb24uXG4gICAqXG4gICAqIEludm9jYWJsZXMgYXJlIGludm9rZWQgZWFnZXJseSBhcyBzb29uIGFzIGFsbCBkZXBlbmRlbmNpZXMgYXJlIGF2YWlsYWJsZS4gXG4gICAqIFRoaXMgaXMgdHJ1ZSBldmVuIGZvciBkZXBlbmRlbmNpZXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAuXG4gICAqXG4gICAqIEFzIGEgc3BlY2lhbCBjYXNlLCBhbiBpbnZvY2FibGUgY2FuIGJlIGEgc3RyaW5nLCBpbiB3aGljaCBjYXNlIGl0IGlzIHRha2VuIHRvIFxuICAgKiBiZSBhIHNlcnZpY2UgbmFtZSB0byBiZSBwYXNzZWQgdG8gYCRpbmplY3Rvci5nZXQoKWAuIFRoaXMgaXMgc3VwcG9ydGVkIHByaW1hcmlseSBcbiAgICogZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggdGhlIGByZXNvbHZlYCBwcm9wZXJ0eSBvZiBgJHJvdXRlUHJvdmlkZXJgIFxuICAgKiByb3V0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnZvY2FibGVzIGZ1bmN0aW9ucyB0byBpbnZva2Ugb3IgXG4gICAqIGAkaW5qZWN0b3JgIHNlcnZpY2VzIHRvIGZldGNoLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbG9jYWxzICB2YWx1ZXMgdG8gbWFrZSBhdmFpbGFibGUgdG8gdGhlIGluamVjdGFibGVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJlbnQgIGEgcHJvbWlzZSByZXR1cm5lZCBieSBhbm90aGVyIGNhbGwgdG8gYCRyZXNvbHZlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHNlbGYgIHRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZHNcbiAgICogQHJldHVybiB7b2JqZWN0fSBQcm9taXNlIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcmVzb2x2ZWQgcmV0dXJuIHZhbHVlXG4gICAqIG9mIGFsbCBpbnZvY2FibGVzLCBhcyB3ZWxsIGFzIGFueSBpbmhlcml0ZWQgYW5kIGxvY2FsIHZhbHVlcy5cbiAgICovXG4gIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uIChpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZikge1xuICAgIHJldHVybiB0aGlzLnN0dWR5KGludm9jYWJsZXMpKGxvY2FscywgcGFyZW50LCBzZWxmKTtcbiAgfTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykuc2VydmljZSgnJHJlc29sdmUnLCAkUmVzb2x2ZSk7XG5cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXIgZm9yICR0ZW1wbGF0ZUZhY3RvcnkuIE1hbmFnZXMgd2hpY2ggdGVtcGxhdGUtbG9hZGluZyBtZWNoYW5pc20gdG9cbiAqIHVzZSwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbW9zdCByZWNlbnQgb25lICgkdGVtcGxhdGVSZXF1ZXN0IG9uIEFuZ3VsYXJcbiAqIHZlcnNpb25zIHN0YXJ0aW5nIGZyb20gMS4zLCAkaHR0cCBvdGhlcndpc2UpLlxuICovXG5mdW5jdGlvbiBUZW1wbGF0ZUZhY3RvcnlQcm92aWRlcigpIHtcbiAgdmFyIHNob3VsZFVuc2FmZWx5VXNlSHR0cCA9IGFuZ3VsYXIudmVyc2lvbi5taW5vciA8IDM7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5UHJvdmlkZXIjc2hvdWxkVW5zYWZlbHlVc2VIdHRwXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5UHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZvcmNlcyAkdGVtcGxhdGVGYWN0b3J5IHRvIHVzZSAkaHR0cCBpbnN0ZWFkIG9mICR0ZW1wbGF0ZVJlcXVlc3QuIFRoaXNcbiAgICogbWlnaHQgY2F1c2UgWFNTLCBhcyAkaHR0cCBkb2Vzbid0IGVuZm9yY2UgdGhlIHJlZ3VsYXIgc2VjdXJpdHkgY2hlY2tzIGZvclxuICAgKiB0ZW1wbGF0ZXMgdGhhdCBoYXZlIGJlZW4gaW50cm9kdWNlZCBpbiBBbmd1bGFyIDEuMy4gTm90ZSB0aGF0IHNldHRpbmcgdGhpc1xuICAgKiB0byBmYWxzZSBvbiBBbmd1bGFyIG9sZGVyIHRoYW4gMS4zLnggd2lsbCBjcmFzaCwgYXMgdGhlICR0ZW1wbGF0ZVJlcXVlc3RcbiAgICogc2VydmljZSAoYW5kIHRoZSBzZWN1cml0eSBjaGVja3MpIGFyZSBub3QgaW1wbGVtZW50ZWQgb24gdGhlc2UgdmVyc2lvbnMuXG4gICAqXG4gICAqIFNlZSB0aGUgJHNjZSBkb2N1bWVudGF0aW9uLCBzZWN0aW9uXG4gICAqIDxhIGhyZWY9XCJodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcvc2VydmljZS8kc2NlI2ltcGFjdC1vbi1sb2FkaW5nLXRlbXBsYXRlc1wiPlxuICAgKiBJbXBhY3Qgb24gbG9hZGluZyB0ZW1wbGF0ZXM8L2E+IGZvciBtb3JlIGRldGFpbHMgYWJvdXQgdGhpcyBtZWNoYW5pc20uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHRoaXMuc2hvdWxkVW5zYWZlbHlVc2VIdHRwID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBzaG91bGRVbnNhZmVseVVzZUh0dHAgPSAhIXZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQHJlcXVpcmVzICRodHRwXG4gICAqIEByZXF1aXJlcyAkdGVtcGxhdGVDYWNoZVxuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXJ2aWNlLiBNYW5hZ2VzIGxvYWRpbmcgb2YgdGVtcGxhdGVzLlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckaW5qZWN0b3InLCBmdW5jdGlvbigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRpbmplY3Rvcil7XG4gICAgcmV0dXJuIG5ldyBUZW1wbGF0ZUZhY3RvcnkoJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkaW5qZWN0b3IsIHNob3VsZFVuc2FmZWx5VXNlSHR0cCk7fV07XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gKlxuICogQHJlcXVpcmVzICRodHRwXG4gKiBAcmVxdWlyZXMgJHRlbXBsYXRlQ2FjaGVcbiAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcnZpY2UuIE1hbmFnZXMgbG9hZGluZyBvZiB0ZW1wbGF0ZXMuXG4gKi9cbmZ1bmN0aW9uIFRlbXBsYXRlRmFjdG9yeSgkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRpbmplY3Rvciwgc2hvdWxkVW5zYWZlbHlVc2VIdHRwKSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Db25maWdcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmcm9tIGEgY29uZmlndXJhdGlvbiBvYmplY3QuIFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB3aGljaCB0byBsb2FkIGEgdGVtcGxhdGUuIFxuICAgKiBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIHNlYXJjaCBpbiB0aGUgc3BlY2lmaWVkIG9yZGVyLCBhbmQgdGhlIGZpcnN0IG9uZSBcbiAgICogdGhhdCBpcyBkZWZpbmVkIGlzIHVzZWQgdG8gY3JlYXRlIHRoZSB0ZW1wbGF0ZTpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBjb25maWcudGVtcGxhdGUgaHRtbCBzdHJpbmcgdGVtcGxhdGUgb3IgZnVuY3Rpb24gdG8gXG4gICAqIGxvYWQgdmlhIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21TdHJpbmcgZnJvbVN0cmluZ30uXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gY29uZmlnLnRlbXBsYXRlVXJsIHVybCB0byBsb2FkIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIFxuICAgKiB0aGUgdXJsIHRvIGxvYWQgdmlhIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21VcmwgZnJvbVVybH0uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyIGZ1bmN0aW9uIHRvIGludm9rZSB2aWEgXG4gICAqIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Qcm92aWRlciBmcm9tUHJvdmlkZXJ9LlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zICBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbG9jYWxzIExvY2FscyB0byBwYXNzIHRvIGBpbnZva2VgIGlmIHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgXG4gICAqIHZpYSBhIGB0ZW1wbGF0ZVByb3ZpZGVyYC4gRGVmYXVsdHMgdG8gYHsgcGFyYW1zOiBwYXJhbXMgfWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xvYmplY3R9ICBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciBcbiAgICogdGhhdCBzdHJpbmcsb3IgYG51bGxgIGlmIG5vIHRlbXBsYXRlIGlzIGNvbmZpZ3VyZWQuXG4gICAqL1xuICB0aGlzLmZyb21Db25maWcgPSBmdW5jdGlvbiAoY29uZmlnLCBwYXJhbXMsIGxvY2Fscykge1xuICAgIHJldHVybiAoXG4gICAgICBpc0RlZmluZWQoY29uZmlnLnRlbXBsYXRlKSA/IHRoaXMuZnJvbVN0cmluZyhjb25maWcudGVtcGxhdGUsIHBhcmFtcykgOlxuICAgICAgaXNEZWZpbmVkKGNvbmZpZy50ZW1wbGF0ZVVybCkgPyB0aGlzLmZyb21VcmwoY29uZmlnLnRlbXBsYXRlVXJsLCBwYXJhbXMpIDpcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGVQcm92aWRlcikgPyB0aGlzLmZyb21Qcm92aWRlcihjb25maWcudGVtcGxhdGVQcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIDpcbiAgICAgIG51bGxcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeSNmcm9tU3RyaW5nXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgdGVtcGxhdGUgZnJvbSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSB0ZW1wbGF0ZSBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIG9yIGZ1bmN0aW9uIHRoYXQgXG4gICAqIHJldHVybnMgYW4gaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZy5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8b2JqZWN0fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciB0aGF0IFxuICAgKiBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAodGVtcGxhdGUsIHBhcmFtcykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRlbXBsYXRlKSA/IHRlbXBsYXRlKHBhcmFtcykgOiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVVybFxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKiBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIExvYWRzIGEgdGVtcGxhdGUgZnJvbSB0aGUgYSBVUkwgdmlhIGAkaHR0cGAgYW5kIGAkdGVtcGxhdGVDYWNoZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB1cmwgdXJsIG9mIHRoZSB0ZW1wbGF0ZSB0byBsb2FkLCBvciBhIGZ1bmN0aW9uIFxuICAgKiB0aGF0IHJldHVybnMgYSB1cmwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgUGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSB1cmwgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQcm9taXNlLjxzdHJpbmc+fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIFxuICAgKiBmb3IgdGhhdCBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21VcmwgPSBmdW5jdGlvbiAodXJsLCBwYXJhbXMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbih1cmwpKSB1cmwgPSB1cmwocGFyYW1zKTtcbiAgICBpZiAodXJsID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIGVsc2Uge1xuICAgICAgaWYoIXNob3VsZFVuc2FmZWx5VXNlSHR0cCkge1xuICAgICAgICByZXR1cm4gJGluamVjdG9yLmdldCgnJHRlbXBsYXRlUmVxdWVzdCcpKHVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAuZ2V0KHVybCwgeyBjYWNoZTogJHRlbXBsYXRlQ2FjaGUsIGhlYWRlcnM6IHsgQWNjZXB0OiAndGV4dC9odG1sJyB9fSlcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuZGF0YTsgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeSNmcm9tUHJvdmlkZXJcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBieSBpbnZva2luZyBhbiBpbmplY3RhYmxlIHByb3ZpZGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlciBGdW5jdGlvbiB0byBpbnZva2UgdmlhIGAkaW5qZWN0b3IuaW52b2tlYFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFBhcmFtZXRlcnMgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBMb2NhbHMgdG8gcGFzcyB0byBgaW52b2tlYC4gRGVmYXVsdHMgdG8gXG4gICAqIGB7IHBhcmFtczogcGFyYW1zIH1gLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8UHJvbWlzZS48c3RyaW5nPn0gVGhlIHRlbXBsYXRlIGh0bWwgYXMgYSBzdHJpbmcsIG9yIGEgcHJvbWlzZSBcbiAgICogZm9yIHRoYXQgc3RyaW5nLlxuICAgKi9cbiAgdGhpcy5mcm9tUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIsIHBhcmFtcywgbG9jYWxzKSB7XG4gICAgcmV0dXJuICRpbmplY3Rvci5pbnZva2UocHJvdmlkZXIsIG51bGwsIGxvY2FscyB8fCB7IHBhcmFtczogcGFyYW1zIH0pO1xuICB9O1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5wcm92aWRlcignJHRlbXBsYXRlRmFjdG9yeScsIFRlbXBsYXRlRmFjdG9yeVByb3ZpZGVyKTtcblxudmFyICQkVU1GUDsgLy8gcmVmZXJlbmNlIHRvICRVcmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNYXRjaGVzIFVSTHMgYWdhaW5zdCBwYXR0ZXJucyBhbmQgZXh0cmFjdHMgbmFtZWQgcGFyYW1ldGVycyBmcm9tIHRoZSBwYXRoIG9yIHRoZSBzZWFyY2hcbiAqIHBhcnQgb2YgdGhlIFVSTC4gQSBVUkwgcGF0dGVybiBjb25zaXN0cyBvZiBhIHBhdGggcGF0dGVybiwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSAnPycgYW5kIGEgbGlzdFxuICogb2Ygc2VhcmNoIHBhcmFtZXRlcnMuIE11bHRpcGxlIHNlYXJjaCBwYXJhbWV0ZXIgbmFtZXMgYXJlIHNlcGFyYXRlZCBieSAnJicuIFNlYXJjaCBwYXJhbWV0ZXJzXG4gKiBkbyBub3QgaW5mbHVlbmNlIHdoZXRoZXIgb3Igbm90IGEgVVJMIGlzIG1hdGNoZWQsIGJ1dCB0aGVpciB2YWx1ZXMgYXJlIHBhc3NlZCB0aHJvdWdoIGludG9cbiAqIHRoZSBtYXRjaGVkIHBhcmFtZXRlcnMgcmV0dXJuZWQgYnkge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNtZXRob2RzX2V4ZWMgZXhlY30uXG4gKlxuICogUGF0aCBwYXJhbWV0ZXIgcGxhY2Vob2xkZXJzIGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgc2ltcGxlIGNvbG9uL2NhdGNoLWFsbCBzeW50YXggb3IgY3VybHkgYnJhY2VcbiAqIHN5bnRheCwgd2hpY2ggb3B0aW9uYWxseSBhbGxvd3MgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIHRoZSBwYXJhbWV0ZXIgdG8gYmUgc3BlY2lmaWVkOlxuICpcbiAqICogYCc6J2AgbmFtZSAtIGNvbG9uIHBsYWNlaG9sZGVyXG4gKiAqIGAnKidgIG5hbWUgLSBjYXRjaC1hbGwgcGxhY2Vob2xkZXJcbiAqICogYCd7JyBuYW1lICd9J2AgLSBjdXJseSBwbGFjZWhvbGRlclxuICogKiBgJ3snIG5hbWUgJzonIHJlZ2V4cHx0eXBlICd9J2AgLSBjdXJseSBwbGFjZWhvbGRlciB3aXRoIHJlZ2V4cCBvciB0eXBlIG5hbWUuIFNob3VsZCB0aGVcbiAqICAgcmVnZXhwIGl0c2VsZiBjb250YWluIGN1cmx5IGJyYWNlcywgdGhleSBtdXN0IGJlIGluIG1hdGNoZWQgcGFpcnMgb3IgZXNjYXBlZCB3aXRoIGEgYmFja3NsYXNoLlxuICpcbiAqIFBhcmFtZXRlciBuYW1lcyBtYXkgY29udGFpbiBvbmx5IHdvcmQgY2hhcmFjdGVycyAobGF0aW4gbGV0dGVycywgZGlnaXRzLCBhbmQgdW5kZXJzY29yZSkgYW5kXG4gKiBtdXN0IGJlIHVuaXF1ZSB3aXRoaW4gdGhlIHBhdHRlcm4gKGFjcm9zcyBib3RoIHBhdGggYW5kIHNlYXJjaCBwYXJhbWV0ZXJzKS4gRm9yIGNvbG9uXG4gKiBwbGFjZWhvbGRlcnMgb3IgY3VybHkgcGxhY2Vob2xkZXJzIHdpdGhvdXQgYW4gZXhwbGljaXQgcmVnZXhwLCBhIHBhdGggcGFyYW1ldGVyIG1hdGNoZXMgYW55XG4gKiBudW1iZXIgb2YgY2hhcmFjdGVycyBvdGhlciB0aGFuICcvJy4gRm9yIGNhdGNoLWFsbCBwbGFjZWhvbGRlcnMgdGhlIHBhdGggcGFyYW1ldGVyIG1hdGNoZXNcbiAqIGFueSBudW1iZXIgb2YgY2hhcmFjdGVycy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAqIGAnL2hlbGxvLydgIC0gTWF0Y2hlcyBvbmx5IGlmIHRoZSBwYXRoIGlzIGV4YWN0bHkgJy9oZWxsby8nLiBUaGVyZSBpcyBubyBzcGVjaWFsIHRyZWF0bWVudCBmb3JcbiAqICAgdHJhaWxpbmcgc2xhc2hlcywgYW5kIHBhdHRlcm5zIGhhdmUgdG8gbWF0Y2ggdGhlIGVudGlyZSBwYXRoLCBub3QganVzdCBhIHByZWZpeC5cbiAqICogYCcvdXNlci86aWQnYCAtIE1hdGNoZXMgJy91c2VyL2JvYicgb3IgJy91c2VyLzEyMzQhISEnIG9yIGV2ZW4gJy91c2VyLycgYnV0IG5vdCAnL3VzZXInIG9yXG4gKiAgICcvdXNlci9ib2IvZGV0YWlscycuIFRoZSBzZWNvbmQgcGF0aCBzZWdtZW50IHdpbGwgYmUgY2FwdHVyZWQgYXMgdGhlIHBhcmFtZXRlciAnaWQnLlxuICogKiBgJy91c2VyL3tpZH0nYCAtIFNhbWUgYXMgdGhlIHByZXZpb3VzIGV4YW1wbGUsIGJ1dCB1c2luZyBjdXJseSBicmFjZSBzeW50YXguXG4gKiAqIGAnL3VzZXIve2lkOlteL10qfSdgIC0gU2FtZSBhcyB0aGUgcHJldmlvdXMgZXhhbXBsZS5cbiAqICogYCcvdXNlci97aWQ6WzAtOWEtZkEtRl17MSw4fX0nYCAtIFNpbWlsYXIgdG8gdGhlIHByZXZpb3VzIGV4YW1wbGUsIGJ1dCBvbmx5IG1hdGNoZXMgaWYgdGhlIGlkXG4gKiAgIHBhcmFtZXRlciBjb25zaXN0cyBvZiAxIHRvIDggaGV4IGRpZ2l0cy5cbiAqICogYCcvZmlsZXMve3BhdGg6Lip9J2AgLSBNYXRjaGVzIGFueSBVUkwgc3RhcnRpbmcgd2l0aCAnL2ZpbGVzLycgYW5kIGNhcHR1cmVzIHRoZSByZXN0IG9mIHRoZVxuICogICBwYXRoIGludG8gdGhlIHBhcmFtZXRlciAncGF0aCcuXG4gKiAqIGAnL2ZpbGVzLypwYXRoJ2AgLSBkaXR0by5cbiAqICogYCcvY2FsZW5kYXIve3N0YXJ0OmRhdGV9J2AgLSBNYXRjaGVzIFwiL2NhbGVuZGFyLzIwMTQtMTEtMTJcIiAoYmVjYXVzZSB0aGUgcGF0dGVybiBkZWZpbmVkXG4gKiAgIGluIHRoZSBidWlsdC1pbiAgYGRhdGVgIFR5cGUgbWF0Y2hlcyBgMjAxNC0xMS0xMmApIGFuZCBwcm92aWRlcyBhIERhdGUgb2JqZWN0IGluICRzdGF0ZVBhcmFtcy5zdGFydFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuICBUaGUgcGF0dGVybiB0byBjb21waWxlIGludG8gYSBtYXRjaGVyLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgQSBjb25maWd1cmF0aW9uIG9iamVjdCBoYXNoOlxuICogQHBhcmFtIHtPYmplY3Q9fSBwYXJlbnRNYXRjaGVyIFVzZWQgdG8gY29uY2F0ZW5hdGUgdGhlIHBhdHRlcm4vY29uZmlnIG9udG9cbiAqICAgYW4gZXhpc3RpbmcgVXJsTWF0Y2hlclxuICpcbiAqICogYGNhc2VJbnNlbnNpdGl2ZWAgLSBgdHJ1ZWAgaWYgVVJMIG1hdGNoaW5nIHNob3VsZCBiZSBjYXNlIGluc2Vuc2l0aXZlLCBvdGhlcndpc2UgYGZhbHNlYCwgdGhlIGRlZmF1bHQgdmFsdWUgKGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KSBpcyBgZmFsc2VgLlxuICogKiBgc3RyaWN0YCAtIGBmYWxzZWAgaWYgbWF0Y2hpbmcgYWdhaW5zdCBhIFVSTCB3aXRoIGEgdHJhaWxpbmcgc2xhc2ggc2hvdWxkIGJlIHRyZWF0ZWQgYXMgZXF1aXZhbGVudCB0byBhIFVSTCB3aXRob3V0IGEgdHJhaWxpbmcgc2xhc2gsIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJlZml4ICBBIHN0YXRpYyBwcmVmaXggb2YgdGhpcyBwYXR0ZXJuLiBUaGUgbWF0Y2hlciBndWFyYW50ZWVzIHRoYXQgYW55XG4gKiAgIFVSTCBtYXRjaGluZyB0aGlzIG1hdGNoZXIgKGkuZS4gYW55IHN0cmluZyBmb3Igd2hpY2gge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNtZXRob2RzX2V4ZWMgZXhlYygpfSByZXR1cm5zXG4gKiAgIG5vbi1udWxsKSB3aWxsIHN0YXJ0IHdpdGggdGhpcyBwcmVmaXguXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZSAgVGhlIHBhdHRlcm4gdGhhdCB3YXMgcGFzc2VkIGludG8gdGhlIGNvbnN0cnVjdG9yXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVBhdGggIFRoZSBwYXRoIHBvcnRpb24gb2YgdGhlIHNvdXJjZSBwcm9wZXJ0eVxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2VTZWFyY2ggIFRoZSBzZWFyY2ggcG9ydGlvbiBvZiB0aGUgc291cmNlIHByb3BlcnR5XG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHJlZ2V4ICBUaGUgY29uc3RydWN0ZWQgcmVnZXggdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdXJsIHdoZW5cbiAqICAgaXQgaXMgdGltZSB0byBkZXRlcm1pbmUgd2hpY2ggdXJsIHdpbGwgbWF0Y2guXG4gKlxuICogQHJldHVybnMge09iamVjdH0gIE5ldyBgVXJsTWF0Y2hlcmAgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIFVybE1hdGNoZXIocGF0dGVybiwgY29uZmlnLCBwYXJlbnRNYXRjaGVyKSB7XG4gIGNvbmZpZyA9IGV4dGVuZCh7IHBhcmFtczoge30gfSwgaXNPYmplY3QoY29uZmlnKSA/IGNvbmZpZyA6IHt9KTtcblxuICAvLyBGaW5kIGFsbCBwbGFjZWhvbGRlcnMgYW5kIGNyZWF0ZSBhIGNvbXBpbGVkIHBhdHRlcm4sIHVzaW5nIGVpdGhlciBjbGFzc2ljIG9yIGN1cmx5IHN5bnRheDpcbiAgLy8gICAnKicgbmFtZVxuICAvLyAgICc6JyBuYW1lXG4gIC8vICAgJ3snIG5hbWUgJ30nXG4gIC8vICAgJ3snIG5hbWUgJzonIHJlZ2V4cCAnfSdcbiAgLy8gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBzb21ld2hhdCBjb21wbGljYXRlZCBkdWUgdG8gdGhlIG5lZWQgdG8gYWxsb3cgY3VybHkgYnJhY2VzXG4gIC8vIGluc2lkZSB0aGUgcmVndWxhciBleHByZXNzaW9uLiBUaGUgcGxhY2Vob2xkZXIgcmVnZXhwIGJyZWFrcyBkb3duIGFzIGZvbGxvd3M6XG4gIC8vICAgIChbOipdKShbXFx3XFxbXFxdXSspICAgICAgICAgICAgICAtIGNsYXNzaWMgcGxhY2Vob2xkZXIgKCQxIC8gJDIpIChzZWFyY2ggdmVyc2lvbiBoYXMgLSBmb3Igc25ha2UtY2FzZSlcbiAgLy8gICAgXFx7KFtcXHdcXFtcXF1dKykoPzpcXDpcXHMqKCAuLi4gKSk/XFx9ICAtIGN1cmx5IGJyYWNlIHBsYWNlaG9sZGVyICgkMykgd2l0aCBvcHRpb25hbCByZWdleHAvdHlwZSAuLi4gKCQ0KSAoc2VhcmNoIHZlcnNpb24gaGFzIC0gZm9yIHNuYWtlLWNhc2VcbiAgLy8gICAgKD86IC4uLiB8IC4uLiB8IC4uLiApKyAgICAgICAgIC0gdGhlIHJlZ2V4cCBjb25zaXN0cyBvZiBhbnkgbnVtYmVyIG9mIGF0b21zLCBhbiBhdG9tIGJlaW5nIGVpdGhlclxuICAvLyAgICBbXnt9XFxcXF0rICAgICAgICAgICAgICAgICAgICAgICAtIGFueXRoaW5nIG90aGVyIHRoYW4gY3VybHkgYnJhY2VzIG9yIGJhY2tzbGFzaFxuICAvLyAgICBcXFxcLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIGEgYmFja3NsYXNoIGVzY2FwZVxuICAvLyAgICBcXHsoPzpbXnt9XFxcXF0rfFxcXFwuKSpcXH0gICAgICAgICAgLSBhIG1hdGNoZWQgc2V0IG9mIGN1cmx5IGJyYWNlcyBjb250YWluaW5nIG90aGVyIGF0b21zXG4gIHZhciBwbGFjZWhvbGRlciAgICAgICA9IC8oWzoqXSkoW1xcd1xcW1xcXV0rKXxcXHsoW1xcd1xcW1xcXV0rKSg/OlxcOlxccyooKD86W157fVxcXFxdK3xcXFxcLnxcXHsoPzpbXnt9XFxcXF0rfFxcXFwuKSpcXH0pKykpP1xcfS9nLFxuICAgICAgc2VhcmNoUGxhY2Vob2xkZXIgPSAvKFs6XT8pKFtcXHdcXFtcXF0uLV0rKXxcXHsoW1xcd1xcW1xcXS4tXSspKD86XFw6XFxzKigoPzpbXnt9XFxcXF0rfFxcXFwufFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSkrKSk/XFx9L2csXG4gICAgICBjb21waWxlZCA9ICdeJywgbGFzdCA9IDAsIG0sXG4gICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHMgPSBbXSxcbiAgICAgIHBhcmVudFBhcmFtcyA9IHBhcmVudE1hdGNoZXIgPyBwYXJlbnRNYXRjaGVyLnBhcmFtcyA6IHt9LFxuICAgICAgcGFyYW1zID0gdGhpcy5wYXJhbXMgPSBwYXJlbnRNYXRjaGVyID8gcGFyZW50TWF0Y2hlci5wYXJhbXMuJCRuZXcoKSA6IG5ldyAkJFVNRlAuUGFyYW1TZXQoKSxcbiAgICAgIHBhcmFtTmFtZXMgPSBbXTtcblxuICBmdW5jdGlvbiBhZGRQYXJhbWV0ZXIoaWQsIHR5cGUsIGNvbmZpZywgbG9jYXRpb24pIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goaWQpO1xuICAgIGlmIChwYXJlbnRQYXJhbXNbaWRdKSByZXR1cm4gcGFyZW50UGFyYW1zW2lkXTtcbiAgICBpZiAoIS9eXFx3KyhbLS5dK1xcdyspKig/OlxcW1xcXSk/JC8udGVzdChpZCkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIGlmIChwYXJhbXNbaWRdKSB0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIHBhcmFtc1tpZF0gPSBuZXcgJCRVTUZQLlBhcmFtKGlkLCB0eXBlLCBjb25maWcsIGxvY2F0aW9uKTtcbiAgICByZXR1cm4gcGFyYW1zW2lkXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1b3RlUmVnRXhwKHN0cmluZywgcGF0dGVybiwgc3F1YXNoLCBvcHRpb25hbCkge1xuICAgIHZhciBzdXJyb3VuZFBhdHRlcm4gPSBbJycsJyddLCByZXN1bHQgPSBzdHJpbmcucmVwbGFjZSgvW1xcXFxcXFtcXF1cXF4kKis/LigpfHt9XS9nLCBcIlxcXFwkJlwiKTtcbiAgICBpZiAoIXBhdHRlcm4pIHJldHVybiByZXN1bHQ7XG4gICAgc3dpdGNoKHNxdWFzaCkge1xuICAgICAgY2FzZSBmYWxzZTogc3Vycm91bmRQYXR0ZXJuID0gWycoJywgJyknICsgKG9wdGlvbmFsID8gXCI/XCIgOiBcIlwiKV07IGJyZWFrO1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgICAgICAgc3Vycm91bmRQYXR0ZXJuID0gWycoPzpcXC8oJywgJyl8XFwvKT8nXTtcbiAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogICAgc3Vycm91bmRQYXR0ZXJuID0gWycoJyArIHNxdWFzaCArIFwifFwiLCAnKT8nXTsgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgKyBzdXJyb3VuZFBhdHRlcm5bMF0gKyBwYXR0ZXJuICsgc3Vycm91bmRQYXR0ZXJuWzFdO1xuICB9XG5cbiAgdGhpcy5zb3VyY2UgPSBwYXR0ZXJuO1xuXG4gIC8vIFNwbGl0IGludG8gc3RhdGljIHNlZ21lbnRzIHNlcGFyYXRlZCBieSBwYXRoIHBhcmFtZXRlciBwbGFjZWhvbGRlcnMuXG4gIC8vIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgaXMgYWx3YXlzIDEgbW9yZSB0aGFuIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycy5cbiAgZnVuY3Rpb24gbWF0Y2hEZXRhaWxzKG0sIGlzU2VhcmNoKSB7XG4gICAgdmFyIGlkLCByZWdleHAsIHNlZ21lbnQsIHR5cGUsIGNmZywgYXJyYXlNb2RlO1xuICAgIGlkICAgICAgICAgID0gbVsyXSB8fCBtWzNdOyAvLyBJRVs3OF0gcmV0dXJucyAnJyBmb3IgdW5tYXRjaGVkIGdyb3VwcyBpbnN0ZWFkIG9mIG51bGxcbiAgICBjZmcgICAgICAgICA9IGNvbmZpZy5wYXJhbXNbaWRdO1xuICAgIHNlZ21lbnQgICAgID0gcGF0dGVybi5zdWJzdHJpbmcobGFzdCwgbS5pbmRleCk7XG4gICAgcmVnZXhwICAgICAgPSBpc1NlYXJjaCA/IG1bNF0gOiBtWzRdIHx8IChtWzFdID09ICcqJyA/ICcuKicgOiBudWxsKTtcblxuICAgIGlmIChyZWdleHApIHtcbiAgICAgIHR5cGUgICAgICA9ICQkVU1GUC50eXBlKHJlZ2V4cCkgfHwgaW5oZXJpdCgkJFVNRlAudHlwZShcInN0cmluZ1wiKSwgeyBwYXR0ZXJuOiBuZXcgUmVnRXhwKHJlZ2V4cCwgY29uZmlnLmNhc2VJbnNlbnNpdGl2ZSA/ICdpJyA6IHVuZGVmaW5lZCkgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBpZCwgcmVnZXhwOiByZWdleHAsIHNlZ21lbnQ6IHNlZ21lbnQsIHR5cGU6IHR5cGUsIGNmZzogY2ZnXG4gICAgfTtcbiAgfVxuXG4gIHZhciBwLCBwYXJhbSwgc2VnbWVudDtcbiAgd2hpbGUgKChtID0gcGxhY2Vob2xkZXIuZXhlYyhwYXR0ZXJuKSkpIHtcbiAgICBwID0gbWF0Y2hEZXRhaWxzKG0sIGZhbHNlKTtcbiAgICBpZiAocC5zZWdtZW50LmluZGV4T2YoJz8nKSA+PSAwKSBicmVhazsgLy8gd2UncmUgaW50byB0aGUgc2VhcmNoIHBhcnRcblxuICAgIHBhcmFtID0gYWRkUGFyYW1ldGVyKHAuaWQsIHAudHlwZSwgcC5jZmcsIFwicGF0aFwiKTtcbiAgICBjb21waWxlZCArPSBxdW90ZVJlZ0V4cChwLnNlZ21lbnQsIHBhcmFtLnR5cGUucGF0dGVybi5zb3VyY2UsIHBhcmFtLnNxdWFzaCwgcGFyYW0uaXNPcHRpb25hbCk7XG4gICAgc2VnbWVudHMucHVzaChwLnNlZ21lbnQpO1xuICAgIGxhc3QgPSBwbGFjZWhvbGRlci5sYXN0SW5kZXg7XG4gIH1cbiAgc2VnbWVudCA9IHBhdHRlcm4uc3Vic3RyaW5nKGxhc3QpO1xuXG4gIC8vIEZpbmQgYW55IHNlYXJjaCBwYXJhbWV0ZXIgbmFtZXMgYW5kIHJlbW92ZSB0aGVtIGZyb20gdGhlIGxhc3Qgc2VnbWVudFxuICB2YXIgaSA9IHNlZ21lbnQuaW5kZXhPZignPycpO1xuXG4gIGlmIChpID49IDApIHtcbiAgICB2YXIgc2VhcmNoID0gdGhpcy5zb3VyY2VTZWFyY2ggPSBzZWdtZW50LnN1YnN0cmluZyhpKTtcbiAgICBzZWdtZW50ID0gc2VnbWVudC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgdGhpcy5zb3VyY2VQYXRoID0gcGF0dGVybi5zdWJzdHJpbmcoMCwgbGFzdCArIGkpO1xuXG4gICAgaWYgKHNlYXJjaC5sZW5ndGggPiAwKSB7XG4gICAgICBsYXN0ID0gMDtcbiAgICAgIHdoaWxlICgobSA9IHNlYXJjaFBsYWNlaG9sZGVyLmV4ZWMoc2VhcmNoKSkpIHtcbiAgICAgICAgcCA9IG1hdGNoRGV0YWlscyhtLCB0cnVlKTtcbiAgICAgICAgcGFyYW0gPSBhZGRQYXJhbWV0ZXIocC5pZCwgcC50eXBlLCBwLmNmZywgXCJzZWFyY2hcIik7XG4gICAgICAgIGxhc3QgPSBwbGFjZWhvbGRlci5sYXN0SW5kZXg7XG4gICAgICAgIC8vIGNoZWNrIGlmID8mXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuc291cmNlUGF0aCA9IHBhdHRlcm47XG4gICAgdGhpcy5zb3VyY2VTZWFyY2ggPSAnJztcbiAgfVxuXG4gIGNvbXBpbGVkICs9IHF1b3RlUmVnRXhwKHNlZ21lbnQpICsgKGNvbmZpZy5zdHJpY3QgPT09IGZhbHNlID8gJ1xcLz8nIDogJycpICsgJyQnO1xuICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuXG4gIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChjb21waWxlZCwgY29uZmlnLmNhc2VJbnNlbnNpdGl2ZSA/ICdpJyA6IHVuZGVmaW5lZCk7XG4gIHRoaXMucHJlZml4ID0gc2VnbWVudHNbMF07XG4gIHRoaXMuJCRwYXJhbU5hbWVzID0gcGFyYW1OYW1lcztcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNjb25jYXRcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBuZXcgbWF0Y2hlciBmb3IgYSBwYXR0ZXJuIGNvbnN0cnVjdGVkIGJ5IGFwcGVuZGluZyB0aGUgcGF0aCBwYXJ0IGFuZCBhZGRpbmcgdGhlXG4gKiBzZWFyY2ggcGFyYW1ldGVycyBvZiB0aGUgc3BlY2lmaWVkIHBhdHRlcm4gdG8gdGhpcyBwYXR0ZXJuLiBUaGUgY3VycmVudCBwYXR0ZXJuIGlzIG5vdFxuICogbW9kaWZpZWQuIFRoaXMgY2FuIGJlIHVuZGVyc3Rvb2QgYXMgY3JlYXRpbmcgYSBwYXR0ZXJuIGZvciBVUkxzIHRoYXQgYXJlIHJlbGF0aXZlIHRvIChvclxuICogc3VmZml4ZXMgb2YpIHRoZSBjdXJyZW50IHBhdHRlcm4uXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoZSBmb2xsb3dpbmcgdHdvIG1hdGNoZXJzIGFyZSBlcXVpdmFsZW50OlxuICogPHByZT5cbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9P3EnKS5jb25jYXQoJy9kZXRhaWxzP2RhdGUnKTtcbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9L2RldGFpbHM/cSZkYXRlJyk7XG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAgVGhlIHBhdHRlcm4gdG8gYXBwZW5kLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgQW4gb2JqZWN0IGhhc2ggb2YgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBtYXRjaGVyLlxuICogQHJldHVybnMge1VybE1hdGNoZXJ9ICBBIG1hdGNoZXIgZm9yIHRoZSBjb25jYXRlbmF0ZWQgcGF0dGVybi5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKHBhdHRlcm4sIGNvbmZpZykge1xuICAvLyBCZWNhdXNlIG9yZGVyIG9mIHNlYXJjaCBwYXJhbWV0ZXJzIGlzIGlycmVsZXZhbnQsIHdlIGNhbiBhZGQgb3VyIG93biBzZWFyY2hcbiAgLy8gcGFyYW1ldGVycyB0byB0aGUgZW5kIG9mIHRoZSBuZXcgcGF0dGVybi4gUGFyc2UgdGhlIG5ldyBwYXR0ZXJuIGJ5IGl0c2VsZlxuICAvLyBhbmQgdGhlbiBqb2luIHRoZSBiaXRzIHRvZ2V0aGVyLCBidXQgaXQncyBtdWNoIGVhc2llciB0byBkbyB0aGlzIG9uIGEgc3RyaW5nIGxldmVsLlxuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBjYXNlSW5zZW5zaXRpdmU6ICQkVU1GUC5jYXNlSW5zZW5zaXRpdmUoKSxcbiAgICBzdHJpY3Q6ICQkVU1GUC5zdHJpY3RNb2RlKCksXG4gICAgc3F1YXNoOiAkJFVNRlAuZGVmYXVsdFNxdWFzaFBvbGljeSgpXG4gIH07XG4gIHJldHVybiBuZXcgVXJsTWF0Y2hlcih0aGlzLnNvdXJjZVBhdGggKyBwYXR0ZXJuICsgdGhpcy5zb3VyY2VTZWFyY2gsIGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpLCB0aGlzKTtcbn07XG5cblVybE1hdGNoZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zb3VyY2U7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI2V4ZWNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRlc3RzIHRoZSBzcGVjaWZpZWQgcGF0aCBhZ2FpbnN0IHRoaXMgbWF0Y2hlciwgYW5kIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNhcHR1cmVkXG4gKiBwYXJhbWV0ZXIgdmFsdWVzLCBvciBudWxsIGlmIHRoZSBwYXRoIGRvZXMgbm90IG1hdGNoLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGNvbnRhaW5zIHRoZSB2YWx1ZXNcbiAqIG9mIGFueSBzZWFyY2ggcGFyYW1ldGVycyB0aGF0IGFyZSBtZW50aW9uZWQgaW4gdGhlIHBhdHRlcm4sIGJ1dCB0aGVpciB2YWx1ZSBtYXkgYmUgbnVsbCBpZlxuICogdGhleSBhcmUgbm90IHByZXNlbnQgaW4gYHNlYXJjaFBhcmFtc2AuIFRoaXMgbWVhbnMgdGhhdCBzZWFyY2ggcGFyYW1ldGVycyBhcmUgYWx3YXlzIHRyZWF0ZWRcbiAqIGFzIG9wdGlvbmFsLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8cHJlPlxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cSZyJykuZXhlYygnL3VzZXIvYm9iJywge1xuICogICB4OiAnMScsIHE6ICdoZWxsbydcbiAqIH0pO1xuICogLy8gcmV0dXJucyB7IGlkOiAnYm9iJywgcTogJ2hlbGxvJywgcjogbnVsbCB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAgVGhlIFVSTCBwYXRoIHRvIG1hdGNoLCBlLmcuIGAkbG9jYXRpb24ucGF0aCgpYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWFyY2hQYXJhbXMgIFVSTCBzZWFyY2ggcGFyYW1ldGVycywgZS5nLiBgJGxvY2F0aW9uLnNlYXJjaCgpYC5cbiAqIEByZXR1cm5zIHtPYmplY3R9ICBUaGUgY2FwdHVyZWQgcGFyYW1ldGVyIHZhbHVlcy5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChwYXRoLCBzZWFyY2hQYXJhbXMpIHtcbiAgdmFyIG0gPSB0aGlzLnJlZ2V4cC5leGVjKHBhdGgpO1xuICBpZiAoIW0pIHJldHVybiBudWxsO1xuICBzZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbXMgfHwge307XG5cbiAgdmFyIHBhcmFtTmFtZXMgPSB0aGlzLnBhcmFtZXRlcnMoKSwgblRvdGFsID0gcGFyYW1OYW1lcy5sZW5ndGgsXG4gICAgblBhdGggPSB0aGlzLnNlZ21lbnRzLmxlbmd0aCAtIDEsXG4gICAgdmFsdWVzID0ge30sIGksIGosIGNmZywgcGFyYW1OYW1lO1xuXG4gIGlmIChuUGF0aCAhPT0gbS5sZW5ndGggLSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmJhbGFuY2VkIGNhcHR1cmUgZ3JvdXAgaW4gcm91dGUgJ1wiICsgdGhpcy5zb3VyY2UgKyBcIidcIik7XG5cbiAgZnVuY3Rpb24gZGVjb2RlUGF0aEFycmF5KHN0cmluZykge1xuICAgIGZ1bmN0aW9uIHJldmVyc2VTdHJpbmcoc3RyKSB7IHJldHVybiBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7IH1cbiAgICBmdW5jdGlvbiB1bnF1b3RlRGFzaGVzKHN0cikgeyByZXR1cm4gc3RyLnJlcGxhY2UoL1xcXFwtL2csIFwiLVwiKTsgfVxuXG4gICAgdmFyIHNwbGl0ID0gcmV2ZXJzZVN0cmluZyhzdHJpbmcpLnNwbGl0KC8tKD8hXFxcXCkvKTtcbiAgICB2YXIgYWxsUmV2ZXJzZWQgPSBtYXAoc3BsaXQsIHJldmVyc2VTdHJpbmcpO1xuICAgIHJldHVybiBtYXAoYWxsUmV2ZXJzZWQsIHVucXVvdGVEYXNoZXMpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHZhciBwYXJhbSwgcGFyYW1WYWw7XG4gIGZvciAoaSA9IDA7IGkgPCBuUGF0aDsgaSsrKSB7XG4gICAgcGFyYW1OYW1lID0gcGFyYW1OYW1lc1tpXTtcbiAgICBwYXJhbSA9IHRoaXMucGFyYW1zW3BhcmFtTmFtZV07XG4gICAgcGFyYW1WYWwgPSBtW2krMV07XG4gICAgLy8gaWYgdGhlIHBhcmFtIHZhbHVlIG1hdGNoZXMgYSBwcmUtcmVwbGFjZSBwYWlyLCByZXBsYWNlIHRoZSB2YWx1ZSBiZWZvcmUgZGVjb2RpbmcuXG4gICAgZm9yIChqID0gMDsgaiA8IHBhcmFtLnJlcGxhY2UubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChwYXJhbS5yZXBsYWNlW2pdLmZyb20gPT09IHBhcmFtVmFsKSBwYXJhbVZhbCA9IHBhcmFtLnJlcGxhY2Vbal0udG87XG4gICAgfVxuICAgIGlmIChwYXJhbVZhbCAmJiBwYXJhbS5hcnJheSA9PT0gdHJ1ZSkgcGFyYW1WYWwgPSBkZWNvZGVQYXRoQXJyYXkocGFyYW1WYWwpO1xuICAgIGlmIChpc0RlZmluZWQocGFyYW1WYWwpKSBwYXJhbVZhbCA9IHBhcmFtLnR5cGUuZGVjb2RlKHBhcmFtVmFsKTtcbiAgICB2YWx1ZXNbcGFyYW1OYW1lXSA9IHBhcmFtLnZhbHVlKHBhcmFtVmFsKTtcbiAgfVxuICBmb3IgKC8qKi87IGkgPCBuVG90YWw7IGkrKykge1xuICAgIHBhcmFtTmFtZSA9IHBhcmFtTmFtZXNbaV07XG4gICAgdmFsdWVzW3BhcmFtTmFtZV0gPSB0aGlzLnBhcmFtc1twYXJhbU5hbWVdLnZhbHVlKHNlYXJjaFBhcmFtc1twYXJhbU5hbWVdKTtcbiAgICBwYXJhbSA9IHRoaXMucGFyYW1zW3BhcmFtTmFtZV07XG4gICAgcGFyYW1WYWwgPSBzZWFyY2hQYXJhbXNbcGFyYW1OYW1lXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgcGFyYW0ucmVwbGFjZS5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhcmFtLnJlcGxhY2Vbal0uZnJvbSA9PT0gcGFyYW1WYWwpIHBhcmFtVmFsID0gcGFyYW0ucmVwbGFjZVtqXS50bztcbiAgICB9XG4gICAgaWYgKGlzRGVmaW5lZChwYXJhbVZhbCkpIHBhcmFtVmFsID0gcGFyYW0udHlwZS5kZWNvZGUocGFyYW1WYWwpO1xuICAgIHZhbHVlc1twYXJhbU5hbWVdID0gcGFyYW0udmFsdWUocGFyYW1WYWwpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjcGFyYW1ldGVyc1xuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0aGUgbmFtZXMgb2YgYWxsIHBhdGggYW5kIHNlYXJjaCBwYXJhbWV0ZXJzIG9mIHRoaXMgcGF0dGVybiBpbiBhbiB1bnNwZWNpZmllZCBvcmRlci5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59ICBBbiBhcnJheSBvZiBwYXJhbWV0ZXIgbmFtZXMuIE11c3QgYmUgdHJlYXRlZCBhcyByZWFkLW9ubHkuIElmIHRoZVxuICogICAgcGF0dGVybiBoYXMgbm8gcGFyYW1ldGVycywgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQuXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLnBhcmFtZXRlcnMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgaWYgKCFpc0RlZmluZWQocGFyYW0pKSByZXR1cm4gdGhpcy4kJHBhcmFtTmFtZXM7XG4gIHJldHVybiB0aGlzLnBhcmFtc1twYXJhbV0gfHwgbnVsbDtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjdmFsaWRhdGVzXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGVja3MgYW4gb2JqZWN0IGhhc2ggb2YgcGFyYW1ldGVycyB0byB2YWxpZGF0ZSB0aGVpciBjb3JyZWN0bmVzcyBhY2NvcmRpbmcgdG8gdGhlIHBhcmFtZXRlclxuICogdHlwZXMgb2YgdGhpcyBgVXJsTWF0Y2hlcmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBUaGUgb2JqZWN0IGhhc2ggb2YgcGFyYW1ldGVycyB0byB2YWxpZGF0ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGFyYW1zYCB2YWxpZGF0ZXMsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS52YWxpZGF0ZXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLnBhcmFtcy4kJHZhbGlkYXRlcyhwYXJhbXMpO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNmb3JtYXRcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBVUkwgdGhhdCBtYXRjaGVzIHRoaXMgcGF0dGVybiBieSBzdWJzdGl0dXRpbmcgdGhlIHNwZWNpZmllZCB2YWx1ZXNcbiAqIGZvciB0aGUgcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMuIE51bGwgdmFsdWVzIGZvciBwYXRoIHBhcmFtZXRlcnMgYXJlXG4gKiB0cmVhdGVkIGFzIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxwcmU+XG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfT9xJykuZm9ybWF0KHsgaWQ6J2JvYicsIHE6J3llcycgfSk7XG4gKiAvLyByZXR1cm5zICcvdXNlci9ib2I/cT15ZXMnXG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzICB0aGUgdmFsdWVzIHRvIHN1YnN0aXR1dGUgZm9yIHRoZSBwYXJhbWV0ZXJzIGluIHRoaXMgcGF0dGVybi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9ICB0aGUgZm9ybWF0dGVkIFVSTCAocGF0aCBhbmQgb3B0aW9uYWxseSBzZWFyY2ggcGFydCkuXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgdmFsdWVzID0gdmFsdWVzIHx8IHt9O1xuICB2YXIgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzLCBwYXJhbXMgPSB0aGlzLnBhcmFtZXRlcnMoKSwgcGFyYW1zZXQgPSB0aGlzLnBhcmFtcztcbiAgaWYgKCF0aGlzLnZhbGlkYXRlcyh2YWx1ZXMpKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSwgc2VhcmNoID0gZmFsc2UsIG5QYXRoID0gc2VnbWVudHMubGVuZ3RoIC0gMSwgblRvdGFsID0gcGFyYW1zLmxlbmd0aCwgcmVzdWx0ID0gc2VnbWVudHNbMF07XG5cbiAgZnVuY3Rpb24gZW5jb2RlRGFzaGVzKHN0cikgeyAvLyBSZXBsYWNlIGRhc2hlcyB3aXRoIGVuY29kZWQgXCJcXC1cIlxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC8tL2csIGZ1bmN0aW9uKGMpIHsgcmV0dXJuICclNUMlJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgblRvdGFsOyBpKyspIHtcbiAgICB2YXIgaXNQYXRoUGFyYW0gPSBpIDwgblBhdGg7XG4gICAgdmFyIG5hbWUgPSBwYXJhbXNbaV0sIHBhcmFtID0gcGFyYW1zZXRbbmFtZV0sIHZhbHVlID0gcGFyYW0udmFsdWUodmFsdWVzW25hbWVdKTtcbiAgICB2YXIgaXNEZWZhdWx0VmFsdWUgPSBwYXJhbS5pc09wdGlvbmFsICYmIHBhcmFtLnR5cGUuZXF1YWxzKHBhcmFtLnZhbHVlKCksIHZhbHVlKTtcbiAgICB2YXIgc3F1YXNoID0gaXNEZWZhdWx0VmFsdWUgPyBwYXJhbS5zcXVhc2ggOiBmYWxzZTtcbiAgICB2YXIgZW5jb2RlZCA9IHBhcmFtLnR5cGUuZW5jb2RlKHZhbHVlKTtcblxuICAgIGlmIChpc1BhdGhQYXJhbSkge1xuICAgICAgdmFyIG5leHRTZWdtZW50ID0gc2VnbWVudHNbaSArIDFdO1xuICAgICAgdmFyIGlzRmluYWxQYXRoUGFyYW0gPSBpICsgMSA9PT0gblBhdGg7XG5cbiAgICAgIGlmIChzcXVhc2ggPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChlbmNvZGVkICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShlbmNvZGVkKSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IG1hcChlbmNvZGVkLCBlbmNvZGVEYXNoZXMpLmpvaW4oXCItXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGVuY29kZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gbmV4dFNlZ21lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNxdWFzaCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgY2FwdHVyZSA9IHJlc3VsdC5tYXRjaCgvXFwvJC8pID8gL1xcLz8oLiopLyA6IC8oLiopLztcbiAgICAgICAgcmVzdWx0ICs9IG5leHRTZWdtZW50Lm1hdGNoKGNhcHR1cmUpWzFdO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhzcXVhc2gpKSB7XG4gICAgICAgIHJlc3VsdCArPSBzcXVhc2ggKyBuZXh0U2VnbWVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRmluYWxQYXRoUGFyYW0gJiYgcGFyYW0uc3F1YXNoID09PSB0cnVlICYmIHJlc3VsdC5zbGljZSgtMSkgPT09ICcvJykgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVuY29kZWQgPT0gbnVsbCB8fCAoaXNEZWZhdWx0VmFsdWUgJiYgc3F1YXNoICE9PSBmYWxzZSkpIGNvbnRpbnVlO1xuICAgICAgaWYgKCFpc0FycmF5KGVuY29kZWQpKSBlbmNvZGVkID0gWyBlbmNvZGVkIF07XG4gICAgICBpZiAoZW5jb2RlZC5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuICAgICAgZW5jb2RlZCA9IG1hcChlbmNvZGVkLCBlbmNvZGVVUklDb21wb25lbnQpLmpvaW4oJyYnICsgbmFtZSArICc9Jyk7XG4gICAgICByZXN1bHQgKz0gKHNlYXJjaCA/ICcmJyA6ICc/JykgKyAobmFtZSArICc9JyArIGVuY29kZWQpO1xuICAgICAgc2VhcmNoID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEltcGxlbWVudHMgYW4gaW50ZXJmYWNlIHRvIGRlZmluZSBjdXN0b20gcGFyYW1ldGVyIHR5cGVzIHRoYXQgY2FuIGJlIGRlY29kZWQgZnJvbSBhbmQgZW5jb2RlZCB0b1xuICogc3RyaW5nIHBhcmFtZXRlcnMgbWF0Y2hlZCBpbiBhIFVSTC4gVXNlZCBieSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyIGBVcmxNYXRjaGVyYH1cbiAqIG9iamVjdHMgd2hlbiBtYXRjaGluZyBvciBmb3JtYXR0aW5nIFVSTHMsIG9yIGNvbXBhcmluZyBvciB2YWxpZGF0aW5nIHBhcmFtZXRlciB2YWx1ZXMuXG4gKlxuICogU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjbWV0aG9kc190eXBlIGAkdXJsTWF0Y2hlckZhY3RvcnkjdHlwZSgpYH0gZm9yIG1vcmVcbiAqIGluZm9ybWF0aW9uIG9uIHJlZ2lzdGVyaW5nIGN1c3RvbSB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnICBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSBjdXN0b20gdHlwZSBkZWZpbml0aW9uLiAgVGhlIG9iamVjdCdzXG4gKiAgICAgICAgcHJvcGVydGllcyB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG1ldGhvZHMgYW5kL29yIHBhdHRlcm4gaW4gYFR5cGVgJ3MgcHVibGljIGludGVyZmFjZS5cbiAqIEBleGFtcGxlXG4gKiA8cHJlPlxuICoge1xuICogICBkZWNvZGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7IH0sXG4gKiAgIGVuY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgJiYgdmFsLnRvU3RyaW5nKCk7IH0sXG4gKiAgIGVxdWFsczogZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gdGhpcy5pcyhhKSAmJiBhID09PSBiOyB9LFxuICogICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiBhbmd1bGFyLmlzTnVtYmVyKHZhbCkgaXNGaW5pdGUodmFsKSAmJiB2YWwgJSAxID09PSAwOyB9LFxuICogICBwYXR0ZXJuOiAvXFxkKy9cbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBwcm9wZXJ0eSB7UmVnRXhwfSBwYXR0ZXJuIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybiB1c2VkIHRvIG1hdGNoIHZhbHVlcyBvZiB0aGlzIHR5cGUgd2hlblxuICogICAgICAgICAgIGNvbWluZyBmcm9tIGEgc3Vic3RyaW5nIG9mIGEgVVJMLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9ICBSZXR1cm5zIGEgbmV3IGBUeXBlYCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIFR5cGUoY29uZmlnKSB7XG4gIGV4dGVuZCh0aGlzLCBjb25maWcpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlI2lzXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlY3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyBvZiBhIHBhcnRpY3VsYXIgdHlwZS4gQWNjZXB0cyBhIG5hdGl2ZSAoZGVjb2RlZCkgdmFsdWVcbiAqIGFuZCBkZXRlcm1pbmVzIHdoZXRoZXIgaXQgbWF0Y2hlcyB0aGUgY3VycmVudCBgVHlwZWAgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsICBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5ICBPcHRpb25hbC4gSWYgdGhlIHR5cGUgY2hlY2sgaXMgaGFwcGVuaW5nIGluIHRoZSBjb250ZXh0IG9mIGEgc3BlY2lmaWNcbiAqICAgICAgICB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyIGBVcmxNYXRjaGVyYH0gb2JqZWN0LCB0aGlzIGlzIHRoZSBuYW1lIG9mIHRoZVxuICogICAgICAgIHBhcmFtZXRlciBpbiB3aGljaCBgdmFsYCBpcyBzdG9yZWQuIENhbiBiZSB1c2VkIGZvciBtZXRhLXByb2dyYW1taW5nIG9mIGBUeXBlYCBvYmplY3RzLlxuICogQHJldHVybnMge0Jvb2xlYW59ICBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgbWF0Y2hlcyB0aGUgdHlwZSwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cblR5cGUucHJvdG90eXBlLmlzID0gZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlI2VuY29kZVxuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5jb2RlcyBhIGN1c3RvbS9uYXRpdmUgdHlwZSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGNhbiBiZSBlbWJlZGRlZCBpbiBhIFVSTC4gTm90ZSB0aGF0IHRoZVxuICogcmV0dXJuIHZhbHVlIGRvZXMgKm5vdCogbmVlZCB0byBiZSBVUkwtc2FmZSAoaS5lLiBwYXNzZWQgdGhyb3VnaCBgZW5jb2RlVVJJQ29tcG9uZW50KClgKSwgaXRcbiAqIG9ubHkgbmVlZHMgdG8gYmUgYSByZXByZXNlbnRhdGlvbiBvZiBgdmFsYCB0aGF0IGhhcyBiZWVuIGNvZXJjZWQgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgIFRoZSB2YWx1ZSB0byBlbmNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5ICBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIGluIHdoaWNoIGB2YWxgIGlzIHN0b3JlZC4gQ2FuIGJlIHVzZWQgZm9yXG4gKiAgICAgICAgbWV0YS1wcm9ncmFtbWluZyBvZiBgVHlwZWAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9ICBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGB2YWxgIHRoYXQgY2FuIGJlIGVuY29kZWQgaW4gYSBVUkwuXG4gKi9cblR5cGUucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gIHJldHVybiB2YWw7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlI2RlY29kZVxuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydHMgYSBwYXJhbWV0ZXIgdmFsdWUgKGZyb20gVVJMIHN0cmluZyBvciB0cmFuc2l0aW9uIHBhcmFtKSB0byBhIGN1c3RvbS9uYXRpdmUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCAgVGhlIFVSTCBwYXJhbWV0ZXIgdmFsdWUgdG8gZGVjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAgVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciBpbiB3aGljaCBgdmFsYCBpcyBzdG9yZWQuIENhbiBiZSB1c2VkIGZvclxuICogICAgICAgIG1ldGEtcHJvZ3JhbW1pbmcgb2YgYFR5cGVgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Kn0gIFJldHVybnMgYSBjdXN0b20gcmVwcmVzZW50YXRpb24gb2YgdGhlIFVSTCBwYXJhbWV0ZXIgdmFsdWUuXG4gKi9cblR5cGUucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gIHJldHVybiB2YWw7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlI2VxdWFsc1xuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHR3byBkZWNvZGVkIHZhbHVlcyBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAcGFyYW0geyp9IGEgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHBhcmFtIHsqfSBiICBBIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAgUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudC9lcXVhbCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cblR5cGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT0gYjtcbn07XG5cblR5cGUucHJvdG90eXBlLiRzdWJQYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdWIgPSB0aGlzLnBhdHRlcm4udG9TdHJpbmcoKTtcbiAgcmV0dXJuIHN1Yi5zdWJzdHIoMSwgc3ViLmxlbmd0aCAtIDIpO1xufTtcblxuVHlwZS5wcm90b3R5cGUucGF0dGVybiA9IC8uKi87XG5cblR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBcIntUeXBlOlwiICsgdGhpcy5uYW1lICsgXCJ9XCI7IH07XG5cbi8qKiBHaXZlbiBhbiBlbmNvZGVkIHN0cmluZywgb3IgYSBkZWNvZGVkIG9iamVjdCwgcmV0dXJucyBhIGRlY29kZWQgb2JqZWN0ICovXG5UeXBlLnByb3RvdHlwZS4kbm9ybWFsaXplID0gZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0aGlzLmlzKHZhbCkgPyB2YWwgOiB0aGlzLmRlY29kZSh2YWwpO1xufTtcblxuLypcbiAqIFdyYXBzIGFuIGV4aXN0aW5nIGN1c3RvbSBUeXBlIGFzIGFuIGFycmF5IG9mIFR5cGUsIGRlcGVuZGluZyBvbiAnbW9kZScuXG4gKiBlLmcuOlxuICogLSB1cmxtYXRjaGVyIHBhdHRlcm4gXCIvcGF0aD97cXVlcnlQYXJhbVtdOmludH1cIlxuICogLSB1cmw6IFwiL3BhdGg/cXVlcnlQYXJhbT0xJnF1ZXJ5UGFyYW09MlxuICogLSAkc3RhdGVQYXJhbXMucXVlcnlQYXJhbSB3aWxsIGJlIFsxLCAyXVxuICogaWYgYG1vZGVgIGlzIFwiYXV0b1wiLCB0aGVuXG4gKiAtIHVybDogXCIvcGF0aD9xdWVyeVBhcmFtPTEgd2lsbCBjcmVhdGUgJHN0YXRlUGFyYW1zLnF1ZXJ5UGFyYW06IDFcbiAqIC0gdXJsOiBcIi9wYXRoP3F1ZXJ5UGFyYW09MSZxdWVyeVBhcmFtPTIgd2lsbCBjcmVhdGUgJHN0YXRlUGFyYW1zLnF1ZXJ5UGFyYW06IFsxLCAyXVxuICovXG5UeXBlLnByb3RvdHlwZS4kYXNBcnJheSA9IGZ1bmN0aW9uKG1vZGUsIGlzU2VhcmNoKSB7XG4gIGlmICghbW9kZSkgcmV0dXJuIHRoaXM7XG4gIGlmIChtb2RlID09PSBcImF1dG9cIiAmJiAhaXNTZWFyY2gpIHRocm93IG5ldyBFcnJvcihcIidhdXRvJyBhcnJheSBtb2RlIGlzIGZvciBxdWVyeSBwYXJhbWV0ZXJzIG9ubHlcIik7XG5cbiAgZnVuY3Rpb24gQXJyYXlUeXBlKHR5cGUsIG1vZGUpIHtcbiAgICBmdW5jdGlvbiBiaW5kVG8odHlwZSwgY2FsbGJhY2tOYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0eXBlW2NhbGxiYWNrTmFtZV0uYXBwbHkodHlwZSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gV3JhcCBub24tYXJyYXkgdmFsdWUgYXMgYXJyYXlcbiAgICBmdW5jdGlvbiBhcnJheVdyYXAodmFsKSB7IHJldHVybiBpc0FycmF5KHZhbCkgPyB2YWwgOiAoaXNEZWZpbmVkKHZhbCkgPyBbIHZhbCBdIDogW10pOyB9XG4gICAgLy8gVW53cmFwIGFycmF5IHZhbHVlIGZvciBcImF1dG9cIiBtb2RlLiBSZXR1cm4gdW5kZWZpbmVkIGZvciBlbXB0eSBhcnJheS5cbiAgICBmdW5jdGlvbiBhcnJheVVud3JhcCh2YWwpIHtcbiAgICAgIHN3aXRjaCh2YWwubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbW9kZSA9PT0gXCJhdXRvXCIgPyB2YWxbMF0gOiB2YWw7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZhbHNleSh2YWwpIHsgcmV0dXJuICF2YWw7IH1cblxuICAgIC8vIFdyYXBzIHR5cGUgKC5pcy8uZW5jb2RlLy5kZWNvZGUpIGZ1bmN0aW9ucyB0byBvcGVyYXRlIG9uIGVhY2ggdmFsdWUgb2YgYW4gYXJyYXlcbiAgICBmdW5jdGlvbiBhcnJheUhhbmRsZXIoY2FsbGJhY2ssIGFsbFRydXRoeU1vZGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVBcnJheSh2YWwpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsKSAmJiB2YWwubGVuZ3RoID09PSAwKSByZXR1cm4gdmFsO1xuICAgICAgICB2YWwgPSBhcnJheVdyYXAodmFsKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1hcCh2YWwsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGFsbFRydXRoeU1vZGUgPT09IHRydWUpXG4gICAgICAgICAgcmV0dXJuIGZpbHRlcihyZXN1bHQsIGZhbHNleSkubGVuZ3RoID09PSAwO1xuICAgICAgICByZXR1cm4gYXJyYXlVbndyYXAocmVzdWx0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gV3JhcHMgdHlwZSAoLmVxdWFscykgZnVuY3Rpb25zIHRvIG9wZXJhdGUgb24gZWFjaCB2YWx1ZSBvZiBhbiBhcnJheVxuICAgIGZ1bmN0aW9uIGFycmF5RXF1YWxzSGFuZGxlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZUFycmF5KHZhbDEsIHZhbDIpIHtcbiAgICAgICAgdmFyIGxlZnQgPSBhcnJheVdyYXAodmFsMSksIHJpZ2h0ID0gYXJyYXlXcmFwKHZhbDIpO1xuICAgICAgICBpZiAobGVmdC5sZW5ndGggIT09IHJpZ2h0Lmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlZnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWNhbGxiYWNrKGxlZnRbaV0sIHJpZ2h0W2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLmVuY29kZSA9IGFycmF5SGFuZGxlcihiaW5kVG8odHlwZSwgJ2VuY29kZScpKTtcbiAgICB0aGlzLmRlY29kZSA9IGFycmF5SGFuZGxlcihiaW5kVG8odHlwZSwgJ2RlY29kZScpKTtcbiAgICB0aGlzLmlzICAgICA9IGFycmF5SGFuZGxlcihiaW5kVG8odHlwZSwgJ2lzJyksIHRydWUpO1xuICAgIHRoaXMuZXF1YWxzID0gYXJyYXlFcXVhbHNIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZXF1YWxzJykpO1xuICAgIHRoaXMucGF0dGVybiA9IHR5cGUucGF0dGVybjtcbiAgICB0aGlzLiRub3JtYWxpemUgPSBhcnJheUhhbmRsZXIoYmluZFRvKHR5cGUsICckbm9ybWFsaXplJykpO1xuICAgIHRoaXMubmFtZSA9IHR5cGUubmFtZTtcbiAgICB0aGlzLiRhcnJheU1vZGUgPSBtb2RlO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBBcnJheVR5cGUodGhpcywgbW9kZSk7XG59O1xuXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgZm9yIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSBpbnN0YW5jZXMuIFRoZSBmYWN0b3J5XG4gKiBpcyBhbHNvIGF2YWlsYWJsZSB0byBwcm92aWRlcnMgdW5kZXIgdGhlIG5hbWUgYCR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyYC5cbiAqL1xuZnVuY3Rpb24gJFVybE1hdGNoZXJGYWN0b3J5KCkge1xuICAkJFVNRlAgPSB0aGlzO1xuXG4gIHZhciBpc0Nhc2VJbnNlbnNpdGl2ZSA9IGZhbHNlLCBpc1N0cmljdE1vZGUgPSB0cnVlLCBkZWZhdWx0U3F1YXNoUG9saWN5ID0gZmFsc2U7XG5cbiAgLy8gVXNlIHRpbGRlcyB0byBwcmUtZW5jb2RlIHNsYXNoZXMuXG4gIC8vIElmIHRoZSBzbGFzaGVzIGFyZSBzaW1wbHkgVVJMRW5jb2RlZCwgdGhlIGJyb3dzZXIgY2FuIGNob29zZSB0byBwcmUtZGVjb2RlIHRoZW0sXG4gIC8vIGFuZCBiaWRpcmVjdGlvbmFsIGVuY29kaW5nL2RlY29kaW5nIGZhaWxzLlxuICAvLyBUaWxkZSB3YXMgY2hvc2VuIGJlY2F1c2UgaXQncyBub3QgYSBSRkMgMzk4NiBzZWN0aW9uIDIuMiBSZXNlcnZlZCBDaGFyYWN0ZXJcbiAgZnVuY3Rpb24gdmFsVG9TdHJpbmcodmFsKSB7IHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbC50b1N0cmluZygpLnJlcGxhY2UoLyh+fFxcLykvZywgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIHsnfic6J35+JywgJy8nOid+MkYnfVttXTsgfSkgOiB2YWw7IH1cbiAgZnVuY3Rpb24gdmFsRnJvbVN0cmluZyh2YWwpIHsgcmV0dXJuIHZhbCAhPSBudWxsID8gdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvKH5+fH4yRikvZywgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIHsnfn4nOid+JywgJ34yRic6Jy8nfVttXTsgfSkgOiB2YWw7IH1cblxuICB2YXIgJHR5cGVzID0ge30sIGVucXVldWUgPSB0cnVlLCB0eXBlUXVldWUgPSBbXSwgaW5qZWN0b3IsIGRlZmF1bHRUeXBlcyA9IHtcbiAgICBcInN0cmluZ1wiOiB7XG4gICAgICBlbmNvZGU6IHZhbFRvU3RyaW5nLFxuICAgICAgZGVjb2RlOiB2YWxGcm9tU3RyaW5nLFxuICAgICAgLy8gVE9ETzogaW4gMS4wLCBtYWtlIHN0cmluZyAuaXMoKSByZXR1cm4gZmFsc2UgaWYgdmFsdWUgaXMgdW5kZWZpbmVkL251bGwgYnkgZGVmYXVsdC5cbiAgICAgIC8vIEluIDAuMi54LCBzdHJpbmcgcGFyYW1zIGFyZSBvcHRpb25hbCBieSBkZWZhdWx0IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgPT0gbnVsbCB8fCAhaXNEZWZpbmVkKHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjsgfSxcbiAgICAgIHBhdHRlcm46IC9bXi9dKi9cbiAgICB9LFxuICAgIFwiaW50XCI6IHtcbiAgICAgIGVuY29kZTogdmFsVG9TdHJpbmcsXG4gICAgICBkZWNvZGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7IH0sXG4gICAgICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwgJiYgdGhpcy5kZWNvZGUodmFsLnRvU3RyaW5nKCkpID09PSB2YWw7IH0sXG4gICAgICBwYXR0ZXJuOiAvXFxkKy9cbiAgICB9LFxuICAgIFwiYm9vbFwiOiB7XG4gICAgICBlbmNvZGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gdmFsID8gMSA6IDA7IH0sXG4gICAgICBkZWNvZGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCkgIT09IDA7IH0sXG4gICAgICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZTsgfSxcbiAgICAgIHBhdHRlcm46IC8wfDEvXG4gICAgfSxcbiAgICBcImRhdGVcIjoge1xuICAgICAgZW5jb2RlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGlmICghdGhpcy5pcyh2YWwpKVxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBbIHZhbC5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICgnMCcgKyAodmFsLmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpLFxuICAgICAgICAgICgnMCcgKyB2YWwuZ2V0RGF0ZSgpKS5zbGljZSgtMilcbiAgICAgICAgXS5qb2luKFwiLVwiKTtcbiAgICAgIH0sXG4gICAgICBkZWNvZGU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXModmFsKSkgcmV0dXJuIHZhbDtcbiAgICAgICAgdmFyIG1hdGNoID0gdGhpcy5jYXB0dXJlLmV4ZWModmFsKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoID8gbmV3IERhdGUobWF0Y2hbMV0sIG1hdGNoWzJdIC0gMSwgbWF0Y2hbM10pIDogdW5kZWZpbmVkO1xuICAgICAgfSxcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbC52YWx1ZU9mKCkpOyB9LFxuICAgICAgZXF1YWxzOiBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gdGhpcy5pcyhhKSAmJiB0aGlzLmlzKGIpICYmIGEudG9JU09TdHJpbmcoKSA9PT0gYi50b0lTT1N0cmluZygpOyB9LFxuICAgICAgcGF0dGVybjogL1swLTldezR9LSg/OjBbMS05XXwxWzAtMl0pLSg/OjBbMS05XXxbMS0yXVswLTldfDNbMC0xXSkvLFxuICAgICAgY2FwdHVyZTogLyhbMC05XXs0fSktKDBbMS05XXwxWzAtMl0pLSgwWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pL1xuICAgIH0sXG4gICAgXCJqc29uXCI6IHtcbiAgICAgIGVuY29kZTogYW5ndWxhci50b0pzb24sXG4gICAgICBkZWNvZGU6IGFuZ3VsYXIuZnJvbUpzb24sXG4gICAgICBpczogYW5ndWxhci5pc09iamVjdCxcbiAgICAgIGVxdWFsczogYW5ndWxhci5lcXVhbHMsXG4gICAgICBwYXR0ZXJuOiAvW14vXSovXG4gICAgfSxcbiAgICBcImFueVwiOiB7IC8vIGRvZXMgbm90IGVuY29kZS9kZWNvZGVcbiAgICAgIGVuY29kZTogYW5ndWxhci5pZGVudGl0eSxcbiAgICAgIGRlY29kZTogYW5ndWxhci5pZGVudGl0eSxcbiAgICAgIGVxdWFsczogYW5ndWxhci5lcXVhbHMsXG4gICAgICBwYXR0ZXJuOiAvLiovXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmljdDogaXNTdHJpY3RNb2RlLFxuICAgICAgY2FzZUluc2Vuc2l0aXZlOiBpc0Nhc2VJbnNlbnNpdGl2ZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpc0luamVjdGFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gKGlzRnVuY3Rpb24odmFsdWUpIHx8IChpc0FycmF5KHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtJbnRlcm5hbF0gR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcGFyYW1ldGVyLCB3aGljaCBtYXkgYmUgYW4gaW5qZWN0YWJsZSBmdW5jdGlvbi5cbiAgICovXG4gICRVcmxNYXRjaGVyRmFjdG9yeS4kJGdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgIGlmICghaXNJbmplY3RhYmxlKGNvbmZpZy52YWx1ZSkpIHJldHVybiBjb25maWcudmFsdWU7XG4gICAgaWYgKCFpbmplY3RvcikgdGhyb3cgbmV3IEVycm9yKFwiSW5qZWN0YWJsZSBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhdCBjb25maWd1cmF0aW9uIHRpbWVcIik7XG4gICAgcmV0dXJuIGluamVjdG9yLmludm9rZShjb25maWcudmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I2Nhc2VJbnNlbnNpdGl2ZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIHdoZXRoZXIgVVJMIG1hdGNoaW5nIHNob3VsZCBiZSBjYXNlIHNlbnNpdGl2ZSAodGhlIGRlZmF1bHQgYmVoYXZpb3IpLCBvciBub3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgYGZhbHNlYCB0byBtYXRjaCBVUkwgaW4gYSBjYXNlIHNlbnNpdGl2ZSBtYW5uZXI7IG90aGVyd2lzZSBgdHJ1ZWA7XG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0aGUgY3VycmVudCB2YWx1ZSBvZiBjYXNlSW5zZW5zaXRpdmVcbiAgICovXG4gIHRoaXMuY2FzZUluc2Vuc2l0aXZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSlcbiAgICAgIGlzQ2FzZUluc2Vuc2l0aXZlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlzQ2FzZUluc2Vuc2l0aXZlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I3N0cmljdE1vZGVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVmaW5lcyB3aGV0aGVyIFVSTHMgc2hvdWxkIG1hdGNoIHRyYWlsaW5nIHNsYXNoZXMsIG9yIG5vdCAodGhlIGRlZmF1bHQgYmVoYXZpb3IpLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBgZmFsc2VgIHRvIG1hdGNoIHRyYWlsaW5nIHNsYXNoZXMgaW4gVVJMcywgb3RoZXJ3aXNlIGB0cnVlYC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRoZSBjdXJyZW50IHZhbHVlIG9mIHN0cmljdE1vZGVcbiAgICovXG4gIHRoaXMuc3RyaWN0TW9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpXG4gICAgICBpc1N0cmljdE1vZGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaXNTdHJpY3RNb2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I2RlZmF1bHRTcXVhc2hQb2xpY3lcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZGVmYXVsdCBiZWhhdmlvciB3aGVuIGdlbmVyYXRpbmcgb3IgbWF0Y2hpbmcgVVJMcyB3aXRoIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIEEgc3RyaW5nIHRoYXQgZGVmaW5lcyB0aGUgZGVmYXVsdCBwYXJhbWV0ZXIgVVJMIHNxdWFzaGluZyBiZWhhdmlvci5cbiAgICogICAgYG5vc3F1YXNoYDogV2hlbiBnZW5lcmF0aW5nIGFuIGhyZWYgd2l0aCBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBkbyBub3Qgc3F1YXNoIHRoZSBwYXJhbWV0ZXIgdmFsdWUgZnJvbSB0aGUgVVJMXG4gICAqICAgIGBzbGFzaGA6IFdoZW4gZ2VuZXJhdGluZyBhbiBocmVmIHdpdGggYSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSwgc3F1YXNoIChyZW1vdmUpIHRoZSBwYXJhbWV0ZXIgdmFsdWUsIGFuZCwgaWYgdGhlXG4gICAqICAgICAgICAgICAgIHBhcmFtZXRlciBpcyBzdXJyb3VuZGVkIGJ5IHNsYXNoZXMsIHNxdWFzaCAocmVtb3ZlKSBvbmUgc2xhc2ggZnJvbSB0aGUgVVJMXG4gICAqICAgIGFueSBvdGhlciBzdHJpbmcsIGUuZy4gXCJ+XCI6IFdoZW4gZ2VuZXJhdGluZyBhbiBocmVmIHdpdGggYSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSwgc3F1YXNoIChyZW1vdmUpXG4gICAqICAgICAgICAgICAgIHRoZSBwYXJhbWV0ZXIgdmFsdWUgZnJvbSB0aGUgVVJMIGFuZCByZXBsYWNlIGl0IHdpdGggdGhpcyBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmRlZmF1bHRTcXVhc2hQb2xpY3kgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghaXNEZWZpbmVkKHZhbHVlKSkgcmV0dXJuIGRlZmF1bHRTcXVhc2hQb2xpY3k7XG4gICAgaWYgKHZhbHVlICE9PSB0cnVlICYmIHZhbHVlICE9PSBmYWxzZSAmJiAhaXNTdHJpbmcodmFsdWUpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzcXVhc2ggcG9saWN5OiBcIiArIHZhbHVlICsgXCIuIFZhbGlkIHBvbGljaWVzOiBmYWxzZSwgdHJ1ZSwgYXJiaXRyYXJ5LXN0cmluZ1wiKTtcbiAgICBkZWZhdWx0U3F1YXNoUG9saWN5ID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I2NvbXBpbGVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSBmb3IgdGhlIHNwZWNpZmllZCBwYXR0ZXJuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAgVGhlIFVSTCBwYXR0ZXJuLlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnICBUaGUgY29uZmlnIG9iamVjdCBoYXNoLlxuICAgKiBAcmV0dXJucyB7VXJsTWF0Y2hlcn0gIFRoZSBVcmxNYXRjaGVyLlxuICAgKi9cbiAgdGhpcy5jb21waWxlID0gZnVuY3Rpb24gKHBhdHRlcm4sIGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgVXJsTWF0Y2hlcihwYXR0ZXJuLCBleHRlbmQoZ2V0RGVmYXVsdENvbmZpZygpLCBjb25maWcpKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNpc01hdGNoZXJcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGlzIGEgYFVybE1hdGNoZXJgLCBvciBmYWxzZSBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgIFRoZSBvYmplY3QgdG8gcGVyZm9ybSB0aGUgdHlwZSBjaGVjayBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gIFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3QgbWF0Y2hlcyB0aGUgYFVybE1hdGNoZXJgIGludGVyZmFjZSwgYnlcbiAgICogICAgICAgICAgaW1wbGVtZW50aW5nIGFsbCB0aGUgc2FtZSBtZXRob2RzLlxuICAgKi9cbiAgdGhpcy5pc01hdGNoZXIgPSBmdW5jdGlvbiAobykge1xuICAgIGlmICghaXNPYmplY3QobykpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcblxuICAgIGZvckVhY2goVXJsTWF0Y2hlci5wcm90b3R5cGUsIGZ1bmN0aW9uKHZhbCwgbmFtZSkge1xuICAgICAgaWYgKGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgKGlzRGVmaW5lZChvW25hbWVdKSAmJiBpc0Z1bmN0aW9uKG9bbmFtZV0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I3R5cGVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgY3VzdG9tIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUgYFR5cGVgfSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICAgKiBnZW5lcmF0ZSBVUkxzIHdpdGggdHlwZWQgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgIFRoZSB0eXBlIG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBkZWZpbml0aW9uICAgVGhlIHR5cGUgZGVmaW5pdGlvbi4gU2VlXG4gICAqICAgICAgICB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlIGBUeXBlYH0gZm9yIGluZm9ybWF0aW9uIG9uIHRoZSB2YWx1ZXMgYWNjZXB0ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBkZWZpbml0aW9uRm4gKG9wdGlvbmFsKSBBIGZ1bmN0aW9uIHRoYXQgaXMgaW5qZWN0ZWQgYmVmb3JlIHRoZSBhcHBcbiAgICogICAgICAgIHJ1bnRpbWUgc3RhcnRzLiAgVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIG1lcmdlZCBpbnRvIHRoZSBleGlzdGluZyBgZGVmaW5pdGlvbmAuXG4gICAqICAgICAgICBTZWUge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSBgVHlwZWB9IGZvciBpbmZvcm1hdGlvbiBvbiB0aGUgdmFsdWVzIGFjY2VwdGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAgUmV0dXJucyBgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJgLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBUaGlzIGlzIGEgc2ltcGxlIGV4YW1wbGUgb2YgYSBjdXN0b20gdHlwZSB0aGF0IGVuY29kZXMgYW5kIGRlY29kZXMgaXRlbXMgZnJvbSBhblxuICAgKiBhcnJheSwgdXNpbmcgdGhlIGFycmF5IGluZGV4IGFzIHRoZSBVUkwtZW5jb2RlZCB2YWx1ZTpcbiAgICpcbiAgICogPHByZT5cbiAgICogdmFyIGxpc3QgPSBbJ0pvaG4nLCAnUGF1bCcsICdHZW9yZ2UnLCAnUmluZ28nXTtcbiAgICpcbiAgICogJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXIudHlwZSgnbGlzdEl0ZW0nLCB7XG4gICAqICAgZW5jb2RlOiBmdW5jdGlvbihpdGVtKSB7XG4gICAqICAgICAvLyBSZXByZXNlbnQgdGhlIGxpc3QgaXRlbSBpbiB0aGUgVVJMIHVzaW5nIGl0cyBjb3JyZXNwb25kaW5nIGluZGV4XG4gICAqICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGl0ZW0pO1xuICAgKiAgIH0sXG4gICAqICAgZGVjb2RlOiBmdW5jdGlvbihpdGVtKSB7XG4gICAqICAgICAvLyBMb29rIHVwIHRoZSBsaXN0IGl0ZW0gYnkgaW5kZXhcbiAgICogICAgIHJldHVybiBsaXN0W3BhcnNlSW50KGl0ZW0sIDEwKV07XG4gICAqICAgfSxcbiAgICogICBpczogZnVuY3Rpb24oaXRlbSkge1xuICAgKiAgICAgLy8gRW5zdXJlIHRoZSBpdGVtIGlzIHZhbGlkIGJ5IGNoZWNraW5nIHRvIHNlZSB0aGF0IGl0IGFwcGVhcnNcbiAgICogICAgIC8vIGluIHRoZSBsaXN0XG4gICAqICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGl0ZW0pID4gLTE7XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICpcbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xpc3QnLCB7XG4gICAqICAgdXJsOiBcIi9saXN0L3tpdGVtOmxpc3RJdGVtfVwiLFxuICAgKiAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygkc3RhdGVQYXJhbXMuaXRlbSk7XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICpcbiAgICogLy8gLi4uXG4gICAqXG4gICAqIC8vIENoYW5nZXMgVVJMIHRvICcvbGlzdC8zJywgbG9ncyBcIlJpbmdvXCIgdG8gdGhlIGNvbnNvbGVcbiAgICogJHN0YXRlLmdvKCdsaXN0JywgeyBpdGVtOiBcIlJpbmdvXCIgfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBUaGlzIGlzIGEgbW9yZSBjb21wbGV4IGV4YW1wbGUgb2YgYSB0eXBlIHRoYXQgcmVsaWVzIG9uIGRlcGVuZGVuY3kgaW5qZWN0aW9uIHRvXG4gICAqIGludGVyYWN0IHdpdGggc2VydmljZXMsIGFuZCB1c2VzIHRoZSBwYXJhbWV0ZXIgbmFtZSBmcm9tIHRoZSBVUkwgdG8gaW5mZXIgaG93IHRvXG4gICAqIGhhbmRsZSBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcGFyYW1ldGVyIHZhbHVlczpcbiAgICpcbiAgICogPHByZT5cbiAgICogLy8gRGVmaW5lcyBhIGN1c3RvbSB0eXBlIHRoYXQgZ2V0cyBhIHZhbHVlIGZyb20gYSBzZXJ2aWNlLFxuICAgKiAvLyB3aGVyZSBlYWNoIHNlcnZpY2UgZ2V0cyBkaWZmZXJlbnQgdHlwZXMgb2YgdmFsdWVzIGZyb21cbiAgICogLy8gYSBiYWNrZW5kIEFQSTpcbiAgICogJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXIudHlwZSgnZGJPYmplY3QnLCB7fSwgZnVuY3Rpb24oVXNlcnMsIFBvc3RzKSB7XG4gICAqXG4gICAqICAgLy8gTWF0Y2hlcyB1cCBzZXJ2aWNlcyB0byBVUkwgcGFyYW1ldGVyIG5hbWVzXG4gICAqICAgdmFyIHNlcnZpY2VzID0ge1xuICAgKiAgICAgdXNlcjogVXNlcnMsXG4gICAqICAgICBwb3N0OiBQb3N0c1xuICAgKiAgIH07XG4gICAqXG4gICAqICAgcmV0dXJuIHtcbiAgICogICAgIGVuY29kZTogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAqICAgICAgIC8vIFJlcHJlc2VudCB0aGUgb2JqZWN0IGluIHRoZSBVUkwgdXNpbmcgaXRzIHVuaXF1ZSBJRFxuICAgKiAgICAgICByZXR1cm4gb2JqZWN0LmlkO1xuICAgKiAgICAgfSxcbiAgICogICAgIGRlY29kZTogZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgKiAgICAgICAvLyBMb29rIHVwIHRoZSBvYmplY3QgYnkgSUQsIHVzaW5nIHRoZSBwYXJhbWV0ZXJcbiAgICogICAgICAgLy8gbmFtZSAoa2V5KSB0byBjYWxsIHRoZSBjb3JyZWN0IHNlcnZpY2VcbiAgICogICAgICAgcmV0dXJuIHNlcnZpY2VzW2tleV0uZmluZEJ5SWQodmFsdWUpO1xuICAgKiAgICAgfSxcbiAgICogICAgIGlzOiBmdW5jdGlvbihvYmplY3QsIGtleSkge1xuICAgKiAgICAgICAvLyBDaGVjayB0aGF0IG9iamVjdCBpcyBhIHZhbGlkIGRiT2JqZWN0XG4gICAqICAgICAgIHJldHVybiBhbmd1bGFyLmlzT2JqZWN0KG9iamVjdCkgJiYgb2JqZWN0LmlkICYmIHNlcnZpY2VzW2tleV07XG4gICAqICAgICB9XG4gICAqICAgICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICogICAgICAgLy8gQ2hlY2sgdGhlIGVxdWFsaXR5IG9mIGRlY29kZWQgb2JqZWN0cyBieSBjb21wYXJpbmdcbiAgICogICAgICAgLy8gdGhlaXIgdW5pcXVlIElEc1xuICAgKiAgICAgICByZXR1cm4gYS5pZCA9PT0gYi5pZDtcbiAgICogICAgIH1cbiAgICogICB9O1xuICAgKiB9KTtcbiAgICpcbiAgICogLy8gSW4gYSBjb25maWcoKSBibG9jaywgeW91IGNhbiB0aGVuIGF0dGFjaCBVUkxzIHdpdGhcbiAgICogLy8gdHlwZS1hbm5vdGF0ZWQgcGFyYW1ldGVyczpcbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ3VzZXJzJywge1xuICAgKiAgIHVybDogXCIvdXNlcnNcIixcbiAgICogICAvLyAuLi5cbiAgICogfSkuc3RhdGUoJ3VzZXJzLml0ZW0nLCB7XG4gICAqICAgdXJsOiBcIi97dXNlcjpkYk9iamVjdH1cIixcbiAgICogICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgLy8gJHN0YXRlUGFyYW1zLnVzZXIgd2lsbCBub3cgYmUgYW4gb2JqZWN0IHJldHVybmVkIGZyb21cbiAgICogICAgIC8vIHRoZSBVc2VycyBzZXJ2aWNlXG4gICAqICAgfSxcbiAgICogICAvLyAuLi5cbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKi9cbiAgdGhpcy50eXBlID0gZnVuY3Rpb24gKG5hbWUsIGRlZmluaXRpb24sIGRlZmluaXRpb25Gbikge1xuICAgIGlmICghaXNEZWZpbmVkKGRlZmluaXRpb24pKSByZXR1cm4gJHR5cGVzW25hbWVdO1xuICAgIGlmICgkdHlwZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHRocm93IG5ldyBFcnJvcihcIkEgdHlwZSBuYW1lZCAnXCIgKyBuYW1lICsgXCInIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZC5cIik7XG5cbiAgICAkdHlwZXNbbmFtZV0gPSBuZXcgVHlwZShleHRlbmQoeyBuYW1lOiBuYW1lIH0sIGRlZmluaXRpb24pKTtcbiAgICBpZiAoZGVmaW5pdGlvbkZuKSB7XG4gICAgICB0eXBlUXVldWUucHVzaCh7IG5hbWU6IG5hbWUsIGRlZjogZGVmaW5pdGlvbkZuIH0pO1xuICAgICAgaWYgKCFlbnF1ZXVlKSBmbHVzaFR5cGVRdWV1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBgZmx1c2hUeXBlUXVldWUoKWAgd2FpdHMgdW50aWwgYCR1cmxNYXRjaGVyRmFjdG9yeWAgaXMgaW5qZWN0ZWQgYmVmb3JlIGludm9raW5nIHRoZSBxdWV1ZWQgYGRlZmluaXRpb25GbmBzXG4gIGZ1bmN0aW9uIGZsdXNoVHlwZVF1ZXVlKCkge1xuICAgIHdoaWxlKHR5cGVRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAodHlwZS5wYXR0ZXJuKSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2Fubm90IG92ZXJyaWRlIGEgdHlwZSdzIC5wYXR0ZXJuIGF0IHJ1bnRpbWUuXCIpO1xuICAgICAgYW5ndWxhci5leHRlbmQoJHR5cGVzW3R5cGUubmFtZV0sIGluamVjdG9yLmludm9rZSh0eXBlLmRlZikpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlZ2lzdGVyIGRlZmF1bHQgdHlwZXMuIFN0b3JlIHRoZW0gaW4gdGhlIHByb3RvdHlwZSBvZiAkdHlwZXMuXG4gIGZvckVhY2goZGVmYXVsdFR5cGVzLCBmdW5jdGlvbih0eXBlLCBuYW1lKSB7ICR0eXBlc1tuYW1lXSA9IG5ldyBUeXBlKGV4dGVuZCh7bmFtZTogbmFtZX0sIHR5cGUpKTsgfSk7XG4gICR0eXBlcyA9IGluaGVyaXQoJHR5cGVzLCB7fSk7XG5cbiAgLyogTm8gbmVlZCB0byBkb2N1bWVudCAkZ2V0LCBzaW5jZSBpdCByZXR1cm5zIHRoaXMgKi9cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbiAoJGluamVjdG9yKSB7XG4gICAgaW5qZWN0b3IgPSAkaW5qZWN0b3I7XG4gICAgZW5xdWV1ZSA9IGZhbHNlO1xuICAgIGZsdXNoVHlwZVF1ZXVlKCk7XG5cbiAgICBmb3JFYWNoKGRlZmF1bHRUeXBlcywgZnVuY3Rpb24odHlwZSwgbmFtZSkge1xuICAgICAgaWYgKCEkdHlwZXNbbmFtZV0pICR0eXBlc1tuYW1lXSA9IG5ldyBUeXBlKHR5cGUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XTtcblxuICB0aGlzLlBhcmFtID0gZnVuY3Rpb24gUGFyYW0oaWQsIHR5cGUsIGNvbmZpZywgbG9jYXRpb24pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgY29uZmlnID0gdW53cmFwU2hvcnRoYW5kKGNvbmZpZyk7XG4gICAgdHlwZSA9IGdldFR5cGUoY29uZmlnLCB0eXBlLCBsb2NhdGlvbik7XG4gICAgdmFyIGFycmF5TW9kZSA9IGdldEFycmF5TW9kZSgpO1xuICAgIHR5cGUgPSBhcnJheU1vZGUgPyB0eXBlLiRhc0FycmF5KGFycmF5TW9kZSwgbG9jYXRpb24gPT09IFwic2VhcmNoXCIpIDogdHlwZTtcbiAgICBpZiAodHlwZS5uYW1lID09PSBcInN0cmluZ1wiICYmICFhcnJheU1vZGUgJiYgbG9jYXRpb24gPT09IFwicGF0aFwiICYmIGNvbmZpZy52YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgY29uZmlnLnZhbHVlID0gXCJcIjsgLy8gZm9yIDAuMi54OyBpbiAwLjMuMCsgZG8gbm90IGF1dG9tYXRpY2FsbHkgZGVmYXVsdCB0byBcIlwiXG4gICAgdmFyIGlzT3B0aW9uYWwgPSBjb25maWcudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgc3F1YXNoID0gZ2V0U3F1YXNoUG9saWN5KGNvbmZpZywgaXNPcHRpb25hbCk7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlKGNvbmZpZywgYXJyYXlNb2RlLCBpc09wdGlvbmFsLCBzcXVhc2gpO1xuXG4gICAgZnVuY3Rpb24gdW53cmFwU2hvcnRoYW5kKGNvbmZpZykge1xuICAgICAgdmFyIGtleXMgPSBpc09iamVjdChjb25maWcpID8gb2JqZWN0S2V5cyhjb25maWcpIDogW107XG4gICAgICB2YXIgaXNTaG9ydGhhbmQgPSBpbmRleE9mKGtleXMsIFwidmFsdWVcIikgPT09IC0xICYmIGluZGV4T2Yoa2V5cywgXCJ0eXBlXCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhPZihrZXlzLCBcInNxdWFzaFwiKSA9PT0gLTEgJiYgaW5kZXhPZihrZXlzLCBcImFycmF5XCIpID09PSAtMTtcbiAgICAgIGlmIChpc1Nob3J0aGFuZCkgY29uZmlnID0geyB2YWx1ZTogY29uZmlnIH07XG4gICAgICBjb25maWcuJCRmbiA9IGlzSW5qZWN0YWJsZShjb25maWcudmFsdWUpID8gY29uZmlnLnZhbHVlIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnLnZhbHVlOyB9O1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUeXBlKGNvbmZpZywgdXJsVHlwZSwgbG9jYXRpb24pIHtcbiAgICAgIGlmIChjb25maWcudHlwZSAmJiB1cmxUeXBlKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbSAnXCIraWQrXCInIGhhcyB0d28gdHlwZSBjb25maWd1cmF0aW9ucy5cIik7XG4gICAgICBpZiAodXJsVHlwZSkgcmV0dXJuIHVybFR5cGU7XG4gICAgICBpZiAoIWNvbmZpZy50eXBlKSByZXR1cm4gKGxvY2F0aW9uID09PSBcImNvbmZpZ1wiID8gJHR5cGVzLmFueSA6ICR0eXBlcy5zdHJpbmcpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhjb25maWcudHlwZSkpXG4gICAgICAgIHJldHVybiAkdHlwZXNbY29uZmlnLnR5cGVdO1xuICAgICAgaWYgKGNvbmZpZy50eXBlIGluc3RhbmNlb2YgVHlwZSlcbiAgICAgICAgcmV0dXJuIGNvbmZpZy50eXBlO1xuICAgICAgcmV0dXJuIG5ldyBUeXBlKGNvbmZpZy50eXBlKTtcbiAgICB9XG5cbiAgICAvLyBhcnJheSBjb25maWc6IHBhcmFtIG5hbWUgKHBhcmFtW10pIG92ZXJyaWRlcyBkZWZhdWx0IHNldHRpbmdzLiAgZXhwbGljaXQgY29uZmlnIG92ZXJyaWRlcyBwYXJhbSBuYW1lLlxuICAgIGZ1bmN0aW9uIGdldEFycmF5TW9kZSgpIHtcbiAgICAgIHZhciBhcnJheURlZmF1bHRzID0geyBhcnJheTogKGxvY2F0aW9uID09PSBcInNlYXJjaFwiID8gXCJhdXRvXCIgOiBmYWxzZSkgfTtcbiAgICAgIHZhciBhcnJheVBhcmFtTm9tZW5jbGF0dXJlID0gaWQubWF0Y2goL1xcW1xcXSQvKSA/IHsgYXJyYXk6IHRydWUgfSA6IHt9O1xuICAgICAgcmV0dXJuIGV4dGVuZChhcnJheURlZmF1bHRzLCBhcnJheVBhcmFtTm9tZW5jbGF0dXJlLCBjb25maWcpLmFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgZmFsc2UsIHRydWUsIG9yIHRoZSBzcXVhc2ggdmFsdWUgdG8gaW5kaWNhdGUgdGhlIFwiZGVmYXVsdCBwYXJhbWV0ZXIgdXJsIHNxdWFzaCBwb2xpY3lcIi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRTcXVhc2hQb2xpY3koY29uZmlnLCBpc09wdGlvbmFsKSB7XG4gICAgICB2YXIgc3F1YXNoID0gY29uZmlnLnNxdWFzaDtcbiAgICAgIGlmICghaXNPcHRpb25hbCB8fCBzcXVhc2ggPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoIWlzRGVmaW5lZChzcXVhc2gpIHx8IHNxdWFzaCA9PSBudWxsKSByZXR1cm4gZGVmYXVsdFNxdWFzaFBvbGljeTtcbiAgICAgIGlmIChzcXVhc2ggPT09IHRydWUgfHwgaXNTdHJpbmcoc3F1YXNoKSkgcmV0dXJuIHNxdWFzaDtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3F1YXNoIHBvbGljeTogJ1wiICsgc3F1YXNoICsgXCInLiBWYWxpZCBwb2xpY2llczogZmFsc2UsIHRydWUsIG9yIGFyYml0cmFyeSBzdHJpbmdcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UmVwbGFjZShjb25maWcsIGFycmF5TW9kZSwgaXNPcHRpb25hbCwgc3F1YXNoKSB7XG4gICAgICB2YXIgcmVwbGFjZSwgY29uZmlndXJlZEtleXMsIGRlZmF1bHRQb2xpY3kgPSBbXG4gICAgICAgIHsgZnJvbTogXCJcIiwgICB0bzogKGlzT3B0aW9uYWwgfHwgYXJyYXlNb2RlID8gdW5kZWZpbmVkIDogXCJcIikgfSxcbiAgICAgICAgeyBmcm9tOiBudWxsLCB0bzogKGlzT3B0aW9uYWwgfHwgYXJyYXlNb2RlID8gdW5kZWZpbmVkIDogXCJcIikgfVxuICAgICAgXTtcbiAgICAgIHJlcGxhY2UgPSBpc0FycmF5KGNvbmZpZy5yZXBsYWNlKSA/IGNvbmZpZy5yZXBsYWNlIDogW107XG4gICAgICBpZiAoaXNTdHJpbmcoc3F1YXNoKSlcbiAgICAgICAgcmVwbGFjZS5wdXNoKHsgZnJvbTogc3F1YXNoLCB0bzogdW5kZWZpbmVkIH0pO1xuICAgICAgY29uZmlndXJlZEtleXMgPSBtYXAocmVwbGFjZSwgZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5mcm9tOyB9ICk7XG4gICAgICByZXR1cm4gZmlsdGVyKGRlZmF1bHRQb2xpY3ksIGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGluZGV4T2YoY29uZmlndXJlZEtleXMsIGl0ZW0uZnJvbSkgPT09IC0xOyB9KS5jb25jYXQocmVwbGFjZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW0ludGVybmFsXSBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwYXJhbWV0ZXIsIHdoaWNoIG1heSBiZSBhbiBpbmplY3RhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICQkZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgICAgaWYgKCFpbmplY3RvcikgdGhyb3cgbmV3IEVycm9yKFwiSW5qZWN0YWJsZSBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhdCBjb25maWd1cmF0aW9uIHRpbWVcIik7XG4gICAgICB2YXIgZGVmYXVsdFZhbHVlID0gaW5qZWN0b3IuaW52b2tlKGNvbmZpZy4kJGZuKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgIT09IG51bGwgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIXNlbGYudHlwZS5pcyhkZWZhdWx0VmFsdWUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWZhdWx0IHZhbHVlIChcIiArIGRlZmF1bHRWYWx1ZSArIFwiKSBmb3IgcGFyYW1ldGVyICdcIiArIHNlbGYuaWQgKyBcIicgaXMgbm90IGFuIGluc3RhbmNlIG9mIFR5cGUgKFwiICsgc2VsZi50eXBlLm5hbWUgKyBcIilcIik7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtJbnRlcm5hbF0gR2V0cyB0aGUgZGVjb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhIHZhbHVlIGlmIHRoZSB2YWx1ZSBpcyBkZWZpbmVkLCBvdGhlcndpc2UsIHJldHVybnMgdGhlXG4gICAgICogZGVmYXVsdCB2YWx1ZSwgd2hpY2ggbWF5IGJlIHRoZSByZXN1bHQgb2YgYW4gaW5qZWN0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkdmFsdWUodmFsdWUpIHtcbiAgICAgIGZ1bmN0aW9uIGhhc1JlcGxhY2VWYWwodmFsKSB7IHJldHVybiBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG9iai5mcm9tID09PSB2YWw7IH07IH1cbiAgICAgIGZ1bmN0aW9uICRyZXBsYWNlKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXBsYWNlbWVudCA9IG1hcChmaWx0ZXIoc2VsZi5yZXBsYWNlLCBoYXNSZXBsYWNlVmFsKHZhbHVlKSksIGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gb2JqLnRvOyB9KTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50Lmxlbmd0aCA/IHJlcGxhY2VtZW50WzBdIDogdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9ICRyZXBsYWNlKHZhbHVlKTtcbiAgICAgIHJldHVybiAhaXNEZWZpbmVkKHZhbHVlKSA/ICQkZ2V0RGVmYXVsdFZhbHVlKCkgOiBzZWxmLnR5cGUuJG5vcm1hbGl6ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7IHJldHVybiBcIntQYXJhbTpcIiArIGlkICsgXCIgXCIgKyB0eXBlICsgXCIgc3F1YXNoOiAnXCIgKyBzcXVhc2ggKyBcIicgb3B0aW9uYWw6IFwiICsgaXNPcHRpb25hbCArIFwifVwiOyB9XG5cbiAgICBleHRlbmQodGhpcywge1xuICAgICAgaWQ6IGlkLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIGFycmF5OiBhcnJheU1vZGUsXG4gICAgICBzcXVhc2g6IHNxdWFzaCxcbiAgICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgICBpc09wdGlvbmFsOiBpc09wdGlvbmFsLFxuICAgICAgdmFsdWU6ICR2YWx1ZSxcbiAgICAgIGR5bmFtaWM6IHVuZGVmaW5lZCxcbiAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nXG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUGFyYW1TZXQocGFyYW1zKSB7XG4gICAgZXh0ZW5kKHRoaXMsIHBhcmFtcyB8fCB7fSk7XG4gIH1cblxuICBQYXJhbVNldC5wcm90b3R5cGUgPSB7XG4gICAgJCRuZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGluaGVyaXQodGhpcywgZXh0ZW5kKG5ldyBQYXJhbVNldCgpLCB7ICQkcGFyZW50OiB0aGlzfSkpO1xuICAgIH0sXG4gICAgJCRrZXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIga2V5cyA9IFtdLCBjaGFpbiA9IFtdLCBwYXJlbnQgPSB0aGlzLFxuICAgICAgICBpZ25vcmUgPSBvYmplY3RLZXlzKFBhcmFtU2V0LnByb3RvdHlwZSk7XG4gICAgICB3aGlsZSAocGFyZW50KSB7IGNoYWluLnB1c2gocGFyZW50KTsgcGFyZW50ID0gcGFyZW50LiQkcGFyZW50OyB9XG4gICAgICBjaGFpbi5yZXZlcnNlKCk7XG4gICAgICBmb3JFYWNoKGNoYWluLCBmdW5jdGlvbihwYXJhbXNldCkge1xuICAgICAgICBmb3JFYWNoKG9iamVjdEtleXMocGFyYW1zZXQpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGlmIChpbmRleE9mKGtleXMsIGtleSkgPT09IC0xICYmIGluZGV4T2YoaWdub3JlLCBrZXkpID09PSAtMSkga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ga2V5cztcbiAgICB9LFxuICAgICQkdmFsdWVzOiBmdW5jdGlvbihwYXJhbVZhbHVlcykge1xuICAgICAgdmFyIHZhbHVlcyA9IHt9LCBzZWxmID0gdGhpcztcbiAgICAgIGZvckVhY2goc2VsZi4kJGtleXMoKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gc2VsZltrZXldLnZhbHVlKHBhcmFtVmFsdWVzICYmIHBhcmFtVmFsdWVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG4gICAgJCRlcXVhbHM6IGZ1bmN0aW9uKHBhcmFtVmFsdWVzMSwgcGFyYW1WYWx1ZXMyKSB7XG4gICAgICB2YXIgZXF1YWwgPSB0cnVlLCBzZWxmID0gdGhpcztcbiAgICAgIGZvckVhY2goc2VsZi4kJGtleXMoKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBsZWZ0ID0gcGFyYW1WYWx1ZXMxICYmIHBhcmFtVmFsdWVzMVtrZXldLCByaWdodCA9IHBhcmFtVmFsdWVzMiAmJiBwYXJhbVZhbHVlczJba2V5XTtcbiAgICAgICAgaWYgKCFzZWxmW2tleV0udHlwZS5lcXVhbHMobGVmdCwgcmlnaHQpKSBlcXVhbCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZXF1YWw7XG4gICAgfSxcbiAgICAkJHZhbGlkYXRlczogZnVuY3Rpb24gJCR2YWxpZGF0ZShwYXJhbVZhbHVlcykge1xuICAgICAgdmFyIGtleXMgPSB0aGlzLiQka2V5cygpLCBpLCBwYXJhbSwgcmF3VmFsLCBub3JtYWxpemVkLCBlbmNvZGVkO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFyYW0gPSB0aGlzW2tleXNbaV1dO1xuICAgICAgICByYXdWYWwgPSBwYXJhbVZhbHVlc1trZXlzW2ldXTtcbiAgICAgICAgaWYgKChyYXdWYWwgPT09IHVuZGVmaW5lZCB8fCByYXdWYWwgPT09IG51bGwpICYmIHBhcmFtLmlzT3B0aW9uYWwpXG4gICAgICAgICAgYnJlYWs7IC8vIFRoZXJlIHdhcyBubyBwYXJhbWV0ZXIgdmFsdWUsIGJ1dCB0aGUgcGFyYW0gaXMgb3B0aW9uYWxcbiAgICAgICAgbm9ybWFsaXplZCA9IHBhcmFtLnR5cGUuJG5vcm1hbGl6ZShyYXdWYWwpO1xuICAgICAgICBpZiAoIXBhcmFtLnR5cGUuaXMobm9ybWFsaXplZCkpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBUaGUgdmFsdWUgd2FzIG5vdCBvZiB0aGUgY29ycmVjdCBUeXBlLCBhbmQgY291bGQgbm90IGJlIGRlY29kZWQgdG8gdGhlIGNvcnJlY3QgVHlwZVxuICAgICAgICBlbmNvZGVkID0gcGFyYW0udHlwZS5lbmNvZGUobm9ybWFsaXplZCk7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGVuY29kZWQpICYmICFwYXJhbS50eXBlLnBhdHRlcm4uZXhlYyhlbmNvZGVkKSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFRoZSB2YWx1ZSB3YXMgb2YgdGhlIGNvcnJlY3QgdHlwZSwgYnV0IHdoZW4gZW5jb2RlZCwgZGlkIG5vdCBtYXRjaCB0aGUgVHlwZSdzIHJlZ2V4cFxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAkJHBhcmVudDogdW5kZWZpbmVkXG4gIH07XG5cbiAgdGhpcy5QYXJhbVNldCA9IFBhcmFtU2V0O1xufVxuXG4vLyBSZWdpc3RlciBhcyBhIHByb3ZpZGVyIHNvIGl0J3MgYXZhaWxhYmxlIHRvIG90aGVyIHByb3ZpZGVyc1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykucHJvdmlkZXIoJyR1cmxNYXRjaGVyRmFjdG9yeScsICRVcmxNYXRjaGVyRmFjdG9yeSk7XG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5ydW4oWyckdXJsTWF0Y2hlckZhY3RvcnknLCBmdW5jdGlvbigkdXJsTWF0Y2hlckZhY3RvcnkpIHsgfV0pO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyXG4gKiBAcmVxdWlyZXMgJGxvY2F0aW9uUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkdXJsUm91dGVyUHJvdmlkZXJgIGhhcyB0aGUgcmVzcG9uc2liaWxpdHkgb2Ygd2F0Y2hpbmcgYCRsb2NhdGlvbmAuIFxuICogV2hlbiBgJGxvY2F0aW9uYCBjaGFuZ2VzIGl0IHJ1bnMgdGhyb3VnaCBhIGxpc3Qgb2YgcnVsZXMgb25lIGJ5IG9uZSB1bnRpbCBhIFxuICogbWF0Y2ggaXMgZm91bmQuIGAkdXJsUm91dGVyUHJvdmlkZXJgIGlzIHVzZWQgYmVoaW5kIHRoZSBzY2VuZXMgYW55dGltZSB5b3Ugc3BlY2lmeSBcbiAqIGEgdXJsIGluIGEgc3RhdGUgY29uZmlndXJhdGlvbi4gQWxsIHVybHMgYXJlIGNvbXBpbGVkIGludG8gYSBVcmxNYXRjaGVyIG9iamVjdC5cbiAqXG4gKiBUaGVyZSBhcmUgc2V2ZXJhbCBtZXRob2RzIG9uIGAkdXJsUm91dGVyUHJvdmlkZXJgIHRoYXQgbWFrZSBpdCB1c2VmdWwgdG8gdXNlIGRpcmVjdGx5XG4gKiBpbiB5b3VyIG1vZHVsZSBjb25maWcuXG4gKi9cbiRVcmxSb3V0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckbG9jYXRpb25Qcm92aWRlcicsICckdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlciddO1xuZnVuY3Rpb24gJFVybFJvdXRlclByb3ZpZGVyKCAgICRsb2NhdGlvblByb3ZpZGVyLCAgICR1cmxNYXRjaGVyRmFjdG9yeSkge1xuICB2YXIgcnVsZXMgPSBbXSwgb3RoZXJ3aXNlID0gbnVsbCwgaW50ZXJjZXB0RGVmZXJyZWQgPSBmYWxzZSwgbGlzdGVuZXI7XG5cbiAgLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGlzIGEgcHJlZml4IG9mIGFsbCBzdHJpbmdzIG1hdGNoaW5nIHRoZSBSZWdFeHBcbiAgZnVuY3Rpb24gcmVnRXhwUHJlZml4KHJlKSB7XG4gICAgdmFyIHByZWZpeCA9IC9eXFxeKCg/OlxcXFxbXmEtekEtWjAtOV18W15cXFxcXFxbXFxdXFxeJCorPy4oKXx7fV0rKSopLy5leGVjKHJlLnNvdXJjZSk7XG4gICAgcmV0dXJuIChwcmVmaXggIT0gbnVsbCkgPyBwcmVmaXhbMV0ucmVwbGFjZSgvXFxcXCguKS9nLCBcIiQxXCIpIDogJyc7XG4gIH1cblxuICAvLyBJbnRlcnBvbGF0ZXMgbWF0Y2hlZCB2YWx1ZXMgaW50byBhIFN0cmluZy5yZXBsYWNlKCktc3R5bGUgcGF0dGVyblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShwYXR0ZXJuLCBtYXRjaCkge1xuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoL1xcJChcXCR8XFxkezEsMn0pLywgZnVuY3Rpb24gKG0sIHdoYXQpIHtcbiAgICAgIHJldHVybiBtYXRjaFt3aGF0ID09PSAnJCcgPyAwIDogTnVtYmVyKHdoYXQpXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXIjcnVsZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgcnVsZXMgdGhhdCBhcmUgdXNlZCBieSBgJHVybFJvdXRlclByb3ZpZGVyYCB0byBmaW5kIG1hdGNoZXMgZm9yXG4gICAqIHNwZWNpZmljIFVSTHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXIucm91dGVyJ10pO1xuICAgKlxuICAgKiBhcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICogICAvLyBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBob3cgeW91IG1pZ2h0IGFsbG93IGNhc2UgaW5zZW5zaXRpdmUgdXJsc1xuICAgKiAgICR1cmxSb3V0ZXJQcm92aWRlci5ydWxlKGZ1bmN0aW9uICgkaW5qZWN0b3IsICRsb2NhdGlvbikge1xuICAgKiAgICAgdmFyIHBhdGggPSAkbG9jYXRpb24ucGF0aCgpLFxuICAgKiAgICAgICAgIG5vcm1hbGl6ZWQgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAqXG4gICAqICAgICBpZiAocGF0aCAhPT0gbm9ybWFsaXplZCkge1xuICAgKiAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBydWxlIEhhbmRsZXIgZnVuY3Rpb24gdGhhdCB0YWtlcyBgJGluamVjdG9yYCBhbmQgYCRsb2NhdGlvbmBcbiAgICogc2VydmljZXMgYXMgYXJndW1lbnRzLiBZb3UgY2FuIHVzZSB0aGVtIHRvIHJldHVybiBhIHZhbGlkIHBhdGggYXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gYCR1cmxSb3V0ZXJQcm92aWRlcmAgLSBgJHVybFJvdXRlclByb3ZpZGVyYCBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5ydWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocnVsZSkpIHRocm93IG5ldyBFcnJvcihcIidydWxlJyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgcnVsZXMucHVzaChydWxlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlciNvdGhlcndpc2VcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIGEgcGF0aCB0aGF0IGlzIHVzZWQgd2hlbiBhbiBpbnZhbGlkIHJvdXRlIGlzIHJlcXVlc3RlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPHByZT5cbiAgICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlci5yb3V0ZXInXSk7XG4gICAqXG4gICAqIGFwcC5jb25maWcoZnVuY3Rpb24gKCR1cmxSb3V0ZXJQcm92aWRlcikge1xuICAgKiAgIC8vIGlmIHRoZSBwYXRoIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSB1cmxzIHlvdSBjb25maWd1cmVkXG4gICAqICAgLy8gb3RoZXJ3aXNlIHdpbGwgdGFrZSBjYXJlIG9mIHJvdXRpbmcgdGhlIHVzZXIgdG8gdGhlXG4gICAqICAgLy8gc3BlY2lmaWVkIHVybFxuICAgKiAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9pbmRleCcpO1xuICAgKlxuICAgKiAgIC8vIEV4YW1wbGUgb2YgdXNpbmcgZnVuY3Rpb24gcnVsZSBhcyBwYXJhbVxuICAgKiAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoZnVuY3Rpb24gKCRpbmplY3RvciwgJGxvY2F0aW9uKSB7XG4gICAqICAgICByZXR1cm4gJy9hL3ZhbGlkL3VybCc7XG4gICAqICAgfSk7XG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHJ1bGUgVGhlIHVybCBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHRvIG9yIGEgZnVuY3Rpb24gXG4gICAqIHJ1bGUgdGhhdCByZXR1cm5zIHRoZSB1cmwgcGF0aC4gVGhlIGZ1bmN0aW9uIHZlcnNpb24gaXMgcGFzc2VkIHR3byBwYXJhbXM6IFxuICAgKiBgJGluamVjdG9yYCBhbmQgYCRsb2NhdGlvbmAgc2VydmljZXMsIGFuZCBtdXN0IHJldHVybiBhIHVybCBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gYCR1cmxSb3V0ZXJQcm92aWRlcmAgLSBgJHVybFJvdXRlclByb3ZpZGVyYCBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5vdGhlcndpc2UgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmIChpc1N0cmluZyhydWxlKSkge1xuICAgICAgdmFyIHJlZGlyZWN0ID0gcnVsZTtcbiAgICAgIHJ1bGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWRpcmVjdDsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzRnVuY3Rpb24ocnVsZSkpIHRocm93IG5ldyBFcnJvcihcIidydWxlJyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgb3RoZXJ3aXNlID0gcnVsZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGhhbmRsZUlmTWF0Y2goJGluamVjdG9yLCBoYW5kbGVyLCBtYXRjaCkge1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gJGluamVjdG9yLmludm9rZShoYW5kbGVyLCBoYW5kbGVyLCB7ICRtYXRjaDogbWF0Y2ggfSk7XG4gICAgcmV0dXJuIGlzRGVmaW5lZChyZXN1bHQpID8gcmVzdWx0IDogdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXIjd2hlblxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIGEgZ2l2ZW4gdXJsIG1hdGNoaW5nLiBcbiAgICogXG4gICAqIElmIHRoZSBoYW5kbGVyIGlzIGEgc3RyaW5nLCBpdCBpc1xuICAgKiB0cmVhdGVkIGFzIGEgcmVkaXJlY3QsIGFuZCBpcyBpbnRlcnBvbGF0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzeW50YXggb2YgbWF0Y2hcbiAgICogKGkuZS4gbGlrZSBgU3RyaW5nLnJlcGxhY2UoKWAgZm9yIGBSZWdFeHBgLCBvciBsaWtlIGEgYFVybE1hdGNoZXJgIHBhdHRlcm4gb3RoZXJ3aXNlKS5cbiAgICpcbiAgICogSWYgdGhlIGhhbmRsZXIgaXMgYSBmdW5jdGlvbiwgaXQgaXMgaW5qZWN0YWJsZS4gSXQgZ2V0cyBpbnZva2VkIGlmIGAkbG9jYXRpb25gXG4gICAqIG1hdGNoZXMuIFlvdSBoYXZlIHRoZSBvcHRpb24gb2YgaW5qZWN0IHRoZSBtYXRjaCBvYmplY3QgYXMgYCRtYXRjaGAuXG4gICAqXG4gICAqIFRoZSBoYW5kbGVyIGNhbiByZXR1cm5cbiAgICpcbiAgICogLSAqKmZhbHN5KiogdG8gaW5kaWNhdGUgdGhhdCB0aGUgcnVsZSBkaWRuJ3QgbWF0Y2ggYWZ0ZXIgYWxsLCB0aGVuIGAkdXJsUm91dGVyYFxuICAgKiAgIHdpbGwgY29udGludWUgdHJ5aW5nIHRvIGZpbmQgYW5vdGhlciBvbmUgdGhhdCBtYXRjaGVzLlxuICAgKiAtICoqc3RyaW5nKiogd2hpY2ggaXMgdHJlYXRlZCBhcyBhIHJlZGlyZWN0IGFuZCBwYXNzZWQgdG8gYCRsb2NhdGlvbi51cmwoKWBcbiAgICogLSAqKnZvaWQqKiBvciBhbnkgKip0cnV0aHkqKiB2YWx1ZSB0ZWxscyBgJHVybFJvdXRlcmAgdGhhdCB0aGUgdXJsIHdhcyBoYW5kbGVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJHN0YXRlLnVybCwgZnVuY3Rpb24gKCRtYXRjaCwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICBpZiAoJHN0YXRlLiRjdXJyZW50Lm5hdmlnYWJsZSAhPT0gc3RhdGUgfHxcbiAgICogICAgICAgICAhZXF1YWxGb3JLZXlzKCRtYXRjaCwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbyhzdGF0ZSwgJG1hdGNoLCBmYWxzZSk7XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSB3aGF0IFRoZSBpbmNvbWluZyBwYXRoIHRoYXQgeW91IHdhbnQgdG8gcmVkaXJlY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBoYW5kbGVyIFRoZSBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHlvdXIgdXNlciB0by5cbiAgICovXG4gIHRoaXMud2hlbiA9IGZ1bmN0aW9uICh3aGF0LCBoYW5kbGVyKSB7XG4gICAgdmFyIHJlZGlyZWN0LCBoYW5kbGVySXNTdHJpbmcgPSBpc1N0cmluZyhoYW5kbGVyKTtcbiAgICBpZiAoaXNTdHJpbmcod2hhdCkpIHdoYXQgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZSh3aGF0KTtcblxuICAgIGlmICghaGFuZGxlcklzU3RyaW5nICYmICFpc0Z1bmN0aW9uKGhhbmRsZXIpICYmICFpc0FycmF5KGhhbmRsZXIpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCAnaGFuZGxlcicgaW4gd2hlbigpXCIpO1xuXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSB7XG4gICAgICBtYXRjaGVyOiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlcklzU3RyaW5nKSB7XG4gICAgICAgICAgcmVkaXJlY3QgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZShoYW5kbGVyKTtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiByZWRpcmVjdC5mb3JtYXQoJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpLCAkbG9jYXRpb24uc2VhcmNoKCkpKTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIHByZWZpeDogaXNTdHJpbmcod2hhdC5wcmVmaXgpID8gd2hhdC5wcmVmaXggOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZWdleDogZnVuY3Rpb24gKHdoYXQsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHdoYXQuZ2xvYmFsIHx8IHdoYXQuc3RpY2t5KSB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuKCkgUmVnRXhwIG11c3Qgbm90IGJlIGdsb2JhbCBvciBzdGlja3lcIik7XG5cbiAgICAgICAgaWYgKGhhbmRsZXJJc1N0cmluZykge1xuICAgICAgICAgIHJlZGlyZWN0ID0gaGFuZGxlcjtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiBpbnRlcnBvbGF0ZShyZWRpcmVjdCwgJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpKSk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBwcmVmaXg6IHJlZ0V4cFByZWZpeCh3aGF0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNoZWNrID0geyBtYXRjaGVyOiAkdXJsTWF0Y2hlckZhY3RvcnkuaXNNYXRjaGVyKHdoYXQpLCByZWdleDogd2hhdCBpbnN0YW5jZW9mIFJlZ0V4cCB9O1xuXG4gICAgZm9yICh2YXIgbiBpbiBjaGVjaykge1xuICAgICAgaWYgKGNoZWNrW25dKSByZXR1cm4gdGhpcy5ydWxlKHN0cmF0ZWdpZXNbbl0od2hhdCwgaGFuZGxlcikpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgJ3doYXQnIGluIHdoZW4oKVwiKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI2RlZmVySW50ZXJjZXB0XG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGlzYWJsZXMgKG9yIGVuYWJsZXMpIGRlZmVycmluZyBsb2NhdGlvbiBjaGFuZ2UgaW50ZXJjZXB0aW9uLlxuICAgKlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yIG9mIHN5bmNpbmcgdGhlIFVSTCAoZm9yIGV4YW1wbGUsIGlmIHlvdSB3aXNoIHRvXG4gICAqIGRlZmVyIGEgdHJhbnNpdGlvbiBidXQgbWFpbnRhaW4gdGhlIGN1cnJlbnQgVVJMKSwgY2FsbCB0aGlzIG1ldGhvZCBhdCBjb25maWd1cmF0aW9uIHRpbWUuXG4gICAqIFRoZW4sIGF0IHJ1biB0aW1lLCBjYWxsIGAkdXJsUm91dGVyLmxpc3RlbigpYCBhZnRlciB5b3UgaGF2ZSBjb25maWd1cmVkIHlvdXIgb3duXG4gICAqIGAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzYCBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqXG4gICAqICAgLy8gUHJldmVudCAkdXJsUm91dGVyIGZyb20gYXV0b21hdGljYWxseSBpbnRlcmNlcHRpbmcgVVJMIGNoYW5nZXM7XG4gICAqICAgLy8gdGhpcyBhbGxvd3MgeW91IHRvIGNvbmZpZ3VyZSBjdXN0b20gYmVoYXZpb3IgaW4gYmV0d2VlblxuICAgKiAgIC8vIGxvY2F0aW9uIGNoYW5nZXMgYW5kIHJvdXRlIHN5bmNocm9uaXphdGlvbjpcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIuZGVmZXJJbnRlcmNlcHQoKTtcbiAgICpcbiAgICogfSkucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdXJsUm91dGVyLCBVc2VyU2VydmljZSkge1xuICAgKlxuICAgKiAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgKiAgICAgLy8gVXNlclNlcnZpY2UgaXMgYW4gZXhhbXBsZSBzZXJ2aWNlIGZvciBtYW5hZ2luZyB1c2VyIHN0YXRlXG4gICAqICAgICBpZiAoVXNlclNlcnZpY2UuaXNMb2dnZWRJbigpKSByZXR1cm47XG4gICAqXG4gICAqICAgICAvLyBQcmV2ZW50ICR1cmxSb3V0ZXIncyBkZWZhdWx0IGhhbmRsZXIgZnJvbSBmaXJpbmdcbiAgICogICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICpcbiAgICogICAgIFVzZXJTZXJ2aWNlLmhhbmRsZUxvZ2luKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgICAgLy8gT25jZSB0aGUgdXNlciBoYXMgbG9nZ2VkIGluLCBzeW5jIHRoZSBjdXJyZW50IFVSTFxuICAgKiAgICAgICAvLyB0byB0aGUgcm91dGVyOlxuICAgKiAgICAgICAkdXJsUm91dGVyLnN5bmMoKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIC8vIENvbmZpZ3VyZXMgJHVybFJvdXRlcidzIGxpc3RlbmVyICphZnRlciogeW91ciBjdXN0b20gbGlzdGVuZXJcbiAgICogICAkdXJsUm91dGVyLmxpc3RlbigpO1xuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVmZXIgSW5kaWNhdGVzIHdoZXRoZXIgdG8gZGVmZXIgbG9jYXRpb24gY2hhbmdlIGludGVyY2VwdGlvbi4gUGFzc2luZ1xuICAgICAgICAgICAgbm8gcGFyYW1ldGVyIGlzIGVxdWl2YWxlbnQgdG8gYHRydWVgLlxuICAgKi9cbiAgdGhpcy5kZWZlckludGVyY2VwdCA9IGZ1bmN0aW9uIChkZWZlcikge1xuICAgIGlmIChkZWZlciA9PT0gdW5kZWZpbmVkKSBkZWZlciA9IHRydWU7XG4gICAgaW50ZXJjZXB0RGVmZXJyZWQgPSBkZWZlcjtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJcbiAgICpcbiAgICogQHJlcXVpcmVzICRsb2NhdGlvblxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqIEByZXF1aXJlcyAkYnJvd3NlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICovXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gICRnZXQuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCAnJGluamVjdG9yJywgJyRicm93c2VyJywgJyRzbmlmZmVyJ107XG4gIGZ1bmN0aW9uICRnZXQoICAgJGxvY2F0aW9uLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yLCAgICRicm93c2VyLCAgICRzbmlmZmVyKSB7XG5cbiAgICB2YXIgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKSwgbGFzdFB1c2hlZFVybDtcblxuICAgIGZ1bmN0aW9uIGFwcGVuZEJhc2VQYXRoKHVybCwgaXNIdG1sNSwgYWJzb2x1dGUpIHtcbiAgICAgIGlmIChiYXNlSHJlZiA9PT0gJy8nKSByZXR1cm4gdXJsO1xuICAgICAgaWYgKGlzSHRtbDUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgwLCAtMSkgKyB1cmw7XG4gICAgICBpZiAoYWJzb2x1dGUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgxKSArIHVybDtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogT3B0aW1pemUgZ3JvdXBzIG9mIHJ1bGVzIHdpdGggbm9uLWVtcHR5IHByZWZpeCBpbnRvIHNvbWUgc29ydCBvZiBkZWNpc2lvbiB0cmVlXG4gICAgZnVuY3Rpb24gdXBkYXRlKGV2dCkge1xuICAgICAgaWYgKGV2dCAmJiBldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgdmFyIGlnbm9yZVVwZGF0ZSA9IGxhc3RQdXNoZWRVcmwgJiYgJGxvY2F0aW9uLnVybCgpID09PSBsYXN0UHVzaGVkVXJsO1xuICAgICAgbGFzdFB1c2hlZFVybCA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRPRE86IFJlLWltcGxlbWVudCB0aGlzIGluIDEuMCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktcm91dGVyL2lzc3Vlcy8xNTczXG4gICAgICAvL2lmIChpZ25vcmVVcGRhdGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiBjaGVjayhydWxlKSB7XG4gICAgICAgIHZhciBoYW5kbGVkID0gcnVsZSgkaW5qZWN0b3IsICRsb2NhdGlvbik7XG5cbiAgICAgICAgaWYgKCFoYW5kbGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChpc1N0cmluZyhoYW5kbGVkKSkgJGxvY2F0aW9uLnJlcGxhY2UoKS51cmwoaGFuZGxlZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBydWxlcy5sZW5ndGgsIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoZWNrKHJ1bGVzW2ldKSkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYWx3YXlzIGNoZWNrIG90aGVyd2lzZSBsYXN0IHRvIGFsbG93IGR5bmFtaWMgdXBkYXRlcyB0byB0aGUgc2V0IG9mIHJ1bGVzXG4gICAgICBpZiAob3RoZXJ3aXNlKSBjaGVjayhvdGhlcndpc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIgfHwgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGUpO1xuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJjZXB0RGVmZXJyZWQpIGxpc3RlbigpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjc3luY1xuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogVHJpZ2dlcnMgYW4gdXBkYXRlOyB0aGUgc2FtZSB1cGRhdGUgdGhhdCBoYXBwZW5zIHdoZW4gdGhlIGFkZHJlc3MgYmFyIHVybCBjaGFuZ2VzLCBha2EgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgLlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gdXNlIGBwcmV2ZW50RGVmYXVsdCgpYCBvbiB0aGUgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgIGV2ZW50LFxuICAgICAgICogcGVyZm9ybSBzb21lIGN1c3RvbSBsb2dpYyAocm91dGUgcHJvdGVjdGlvbiwgYXV0aCwgY29uZmlnLCByZWRpcmVjdGlvbiwgZXRjKSBhbmQgdGhlbiBmaW5hbGx5IHByb2NlZWRcbiAgICAgICAqIHdpdGggdGhlIHRyYW5zaXRpb24gYnkgY2FsbGluZyBgJHVybFJvdXRlci5zeW5jKClgLlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiA8cHJlPlxuICAgICAgICogYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pXG4gICAgICAgKiAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHVybFJvdXRlcikge1xuICAgICAgICogICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgKiAgICAgICAvLyBIYWx0IHN0YXRlIGNoYW5nZSBmcm9tIGV2ZW4gc3RhcnRpbmdcbiAgICAgICAqICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICogICAgICAgLy8gUGVyZm9ybSBjdXN0b20gbG9naWNcbiAgICAgICAqICAgICAgIHZhciBtZWV0c1JlcXVpcmVtZW50ID0gLi4uXG4gICAgICAgKiAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSB1cGRhdGUgYW5kIHN0YXRlIHRyYW5zaXRpb24gaWYgbG9naWMgYWxsb3dzXG4gICAgICAgKiAgICAgICBpZiAobWVldHNSZXF1aXJlbWVudCkgJHVybFJvdXRlci5zeW5jKCk7XG4gICAgICAgKiAgICAgfSk7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIDwvcHJlPlxuICAgICAgICovXG4gICAgICBzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICB9LFxuXG4gICAgICBsaXN0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbGlzdGVuKCk7XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uKHJlYWQpIHtcbiAgICAgICAgaWYgKHJlYWQpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSA9PT0gbG9jYXRpb24pIHJldHVybjtcblxuICAgICAgICAkbG9jYXRpb24udXJsKGxvY2F0aW9uKTtcbiAgICAgICAgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKHVybE1hdGNoZXIsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICAgdmFyIHVybCA9IHVybE1hdGNoZXIuZm9ybWF0KHBhcmFtcyB8fCB7fSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBzcGVjaWFsIGhhc2ggcGFyYW0sIGlmIG5lZWRlZFxuICAgICAgICBpZiAodXJsICE9PSBudWxsICYmIHBhcmFtcyAmJiBwYXJhbXNbJyMnXSkge1xuICAgICAgICAgICAgdXJsICs9ICcjJyArIHBhcmFtc1snIyddO1xuICAgICAgICB9XG5cbiAgICAgICAgJGxvY2F0aW9uLnVybCh1cmwpO1xuICAgICAgICBsYXN0UHVzaGVkVXJsID0gb3B0aW9ucyAmJiBvcHRpb25zLiQkYXZvaWRSZXN5bmMgPyAkbG9jYXRpb24udXJsKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVwbGFjZSkgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjaHJlZlxuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBVUkwgZ2VuZXJhdGlvbiBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSBjb21waWxlZCBVUkwgZm9yIGEgZ2l2ZW5cbiAgICAgICAqIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSwgcG9wdWxhdGVkIHdpdGggdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiAkYm9iID0gJHVybFJvdXRlci5ocmVmKG5ldyBVcmxNYXRjaGVyKFwiL2Fib3V0LzpwZXJzb25cIiksIHtcbiAgICAgICAqICAgcGVyc29uOiBcImJvYlwiXG4gICAgICAgKiB9KTtcbiAgICAgICAqIC8vICRib2IgPT0gXCIvYWJvdXQvYm9iXCI7XG4gICAgICAgKiA8L3ByZT5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1VybE1hdGNoZXJ9IHVybE1hdGNoZXIgVGhlIGBVcmxNYXRjaGVyYCBvYmplY3Qgd2hpY2ggaXMgdXNlZCBhcyB0aGUgdGVtcGxhdGUgb2YgdGhlIFVSTCB0byBnZW5lcmF0ZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgdmFsdWVzIHRvIGZpbGwgdGhlIG1hdGNoZXIncyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICAgKlxuICAgICAgICogLSAqKmBhYnNvbHV0ZWAqKiAtIHtib29sZWFuPWZhbHNlfSwgIElmIHRydWUgd2lsbCBnZW5lcmF0ZSBhbiBhYnNvbHV0ZSB1cmwsIGUuZy4gXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL2Z1bGx1cmxcIi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdWxseSBjb21waWxlZCBVUkwsIG9yIGBudWxsYCBpZiBgcGFyYW1zYCBmYWlsIHZhbGlkYXRpb24gYWdhaW5zdCBgdXJsTWF0Y2hlcmBcbiAgICAgICAqL1xuICAgICAgaHJlZjogZnVuY3Rpb24odXJsTWF0Y2hlciwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdXJsTWF0Y2hlci52YWxpZGF0ZXMocGFyYW1zKSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIGlzSHRtbDUgPSAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoaXNIdG1sNSkpIHtcbiAgICAgICAgICBpc0h0bWw1ID0gaXNIdG1sNS5lbmFibGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNIdG1sNSA9IGlzSHRtbDUgJiYgJHNuaWZmZXIuaGlzdG9yeTtcbiAgICAgICAgXG4gICAgICAgIHZhciB1cmwgPSB1cmxNYXRjaGVyLmZvcm1hdChwYXJhbXMpO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIWlzSHRtbDUgJiYgdXJsICE9PSBudWxsKSB7XG4gICAgICAgICAgdXJsID0gXCIjXCIgKyAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCkgKyB1cmw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgc3BlY2lhbCBoYXNoIHBhcmFtLCBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHVybCAhPT0gbnVsbCAmJiBwYXJhbXMgJiYgcGFyYW1zWycjJ10pIHtcbiAgICAgICAgICB1cmwgKz0gJyMnICsgcGFyYW1zWycjJ107XG4gICAgICAgIH1cblxuICAgICAgICB1cmwgPSBhcHBlbmRCYXNlUGF0aCh1cmwsIGlzSHRtbDUsIG9wdGlvbnMuYWJzb2x1dGUpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5hYnNvbHV0ZSB8fCAhdXJsKSB7XG4gICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzbGFzaCA9ICghaXNIdG1sNSAmJiB1cmwgPyAnLycgOiAnJyksIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgICAgICBwb3J0ID0gKHBvcnQgPT09IDgwIHx8IHBvcnQgPT09IDQ0MyA/ICcnIDogJzonICsgcG9ydCk7XG5cbiAgICAgICAgcmV0dXJuIFskbG9jYXRpb24ucHJvdG9jb2woKSwgJzovLycsICRsb2NhdGlvbi5ob3N0KCksIHBvcnQsIHNsYXNoLCB1cmxdLmpvaW4oJycpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5yb3V0ZXInKS5wcm92aWRlcignJHVybFJvdXRlcicsICRVcmxSb3V0ZXJQcm92aWRlcik7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZXcgYCRzdGF0ZVByb3ZpZGVyYCB3b3JrcyBzaW1pbGFyIHRvIEFuZ3VsYXIncyB2MSByb3V0ZXIsIGJ1dCBpdCBmb2N1c2VzIHB1cmVseVxuICogb24gc3RhdGUuXG4gKlxuICogQSBzdGF0ZSBjb3JyZXNwb25kcyB0byBhIFwicGxhY2VcIiBpbiB0aGUgYXBwbGljYXRpb24gaW4gdGVybXMgb2YgdGhlIG92ZXJhbGwgVUkgYW5kXG4gKiBuYXZpZ2F0aW9uLiBBIHN0YXRlIGRlc2NyaWJlcyAodmlhIHRoZSBjb250cm9sbGVyIC8gdGVtcGxhdGUgLyB2aWV3IHByb3BlcnRpZXMpIHdoYXRcbiAqIHRoZSBVSSBsb29rcyBsaWtlIGFuZCBkb2VzIGF0IHRoYXQgcGxhY2UuXG4gKlxuICogU3RhdGVzIG9mdGVuIGhhdmUgdGhpbmdzIGluIGNvbW1vbiwgYW5kIHRoZSBwcmltYXJ5IHdheSBvZiBmYWN0b3Jpbmcgb3V0IHRoZXNlXG4gKiBjb21tb25hbGl0aWVzIGluIHRoaXMgbW9kZWwgaXMgdmlhIHRoZSBzdGF0ZSBoaWVyYXJjaHksIGkuZS4gcGFyZW50L2NoaWxkIHN0YXRlcyBha2FcbiAqIG5lc3RlZCBzdGF0ZXMuXG4gKlxuICogVGhlIGAkc3RhdGVQcm92aWRlcmAgcHJvdmlkZXMgaW50ZXJmYWNlcyB0byBkZWNsYXJlIHRoZXNlIHN0YXRlcyBmb3IgeW91ciBhcHAuXG4gKi9cbiRTdGF0ZVByb3ZpZGVyLiRpbmplY3QgPSBbJyR1cmxSb3V0ZXJQcm92aWRlcicsICckdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlciddO1xuZnVuY3Rpb24gJFN0YXRlUHJvdmlkZXIoICAgJHVybFJvdXRlclByb3ZpZGVyLCAgICR1cmxNYXRjaGVyRmFjdG9yeSkge1xuXG4gIHZhciByb290LCBzdGF0ZXMgPSB7fSwgJHN0YXRlLCBxdWV1ZSA9IHt9LCBhYnN0cmFjdEtleSA9ICdhYnN0cmFjdCc7XG5cbiAgLy8gQnVpbGRzIHN0YXRlIHByb3BlcnRpZXMgZnJvbSBkZWZpbml0aW9uIHBhc3NlZCB0byByZWdpc3RlclN0YXRlKClcbiAgdmFyIHN0YXRlQnVpbGRlciA9IHtcblxuICAgIC8vIERlcml2ZSBwYXJlbnQgc3RhdGUgZnJvbSBhIGhpZXJhcmNoaWNhbCBuYW1lIG9ubHkgaWYgJ3BhcmVudCcgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZC5cbiAgICAvLyBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIC8vIGlmIChwYXJlbnQpIHBhcmVudC5jaGlsZHJlbi5wdXNoKHN0YXRlKTtcbiAgICBwYXJlbnQ6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHN0YXRlLnBhcmVudCkgJiYgc3RhdGUucGFyZW50KSByZXR1cm4gZmluZFN0YXRlKHN0YXRlLnBhcmVudCk7XG4gICAgICAvLyByZWdleCBtYXRjaGVzIGFueSB2YWxpZCBjb21wb3NpdGUgc3RhdGUgbmFtZVxuICAgICAgLy8gd291bGQgbWF0Y2ggXCJjb250YWN0Lmxpc3RcIiBidXQgbm90IFwiY29udGFjdHNcIlxuICAgICAgdmFyIGNvbXBvc2l0ZU5hbWUgPSAvXiguKylcXC5bXi5dKyQvLmV4ZWMoc3RhdGUubmFtZSk7XG4gICAgICByZXR1cm4gY29tcG9zaXRlTmFtZSA/IGZpbmRTdGF0ZShjb21wb3NpdGVOYW1lWzFdKSA6IHJvb3Q7XG4gICAgfSxcblxuICAgIC8vIGluaGVyaXQgJ2RhdGEnIGZyb20gcGFyZW50IGFuZCBvdmVycmlkZSBieSBvd24gdmFsdWVzIChpZiBhbnkpXG4gICAgZGF0YTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIGlmIChzdGF0ZS5wYXJlbnQgJiYgc3RhdGUucGFyZW50LmRhdGEpIHtcbiAgICAgICAgc3RhdGUuZGF0YSA9IHN0YXRlLnNlbGYuZGF0YSA9IGluaGVyaXQoc3RhdGUucGFyZW50LmRhdGEsIHN0YXRlLmRhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLmRhdGE7XG4gICAgfSxcblxuICAgIC8vIEJ1aWxkIGEgVVJMTWF0Y2hlciBpZiBuZWNlc3NhcnksIGVpdGhlciB2aWEgYSByZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkxcbiAgICB1cmw6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgdXJsID0gc3RhdGUudXJsLCBjb25maWcgPSB7IHBhcmFtczogc3RhdGUucGFyYW1zIHx8IHt9IH07XG5cbiAgICAgIGlmIChpc1N0cmluZyh1cmwpKSB7XG4gICAgICAgIGlmICh1cmwuY2hhckF0KDApID09ICdeJykgcmV0dXJuICR1cmxNYXRjaGVyRmFjdG9yeS5jb21waWxlKHVybC5zdWJzdHJpbmcoMSksIGNvbmZpZyk7XG4gICAgICAgIHJldHVybiAoc3RhdGUucGFyZW50Lm5hdmlnYWJsZSB8fCByb290KS51cmwuY29uY2F0KHVybCwgY29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF1cmwgfHwgJHVybE1hdGNoZXJGYWN0b3J5LmlzTWF0Y2hlcih1cmwpKSByZXR1cm4gdXJsO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB1cmwgJ1wiICsgdXJsICsgXCInIGluIHN0YXRlICdcIiArIHN0YXRlICsgXCInXCIpO1xuICAgIH0sXG5cbiAgICAvLyBLZWVwIHRyYWNrIG9mIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHN0YXRlIHRoYXQgaGFzIGEgVVJMIChpLmUuIGlzIG5hdmlnYWJsZSlcbiAgICBuYXZpZ2FibGU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUudXJsID8gc3RhdGUgOiAoc3RhdGUucGFyZW50ID8gc3RhdGUucGFyZW50Lm5hdmlnYWJsZSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICAvLyBPd24gcGFyYW1ldGVycyBmb3IgdGhpcyBzdGF0ZS4gc3RhdGUudXJsLnBhcmFtcyBpcyBhbHJlYWR5IGJ1aWx0IGF0IHRoaXMgcG9pbnQuIENyZWF0ZSBhbmQgYWRkIG5vbi11cmwgcGFyYW1zXG4gICAgb3duUGFyYW1zOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHN0YXRlLnVybCAmJiBzdGF0ZS51cmwucGFyYW1zIHx8IG5ldyAkJFVNRlAuUGFyYW1TZXQoKTtcbiAgICAgIGZvckVhY2goc3RhdGUucGFyYW1zIHx8IHt9LCBmdW5jdGlvbihjb25maWcsIGlkKSB7XG4gICAgICAgIGlmICghcGFyYW1zW2lkXSkgcGFyYW1zW2lkXSA9IG5ldyAkJFVNRlAuUGFyYW0oaWQsIG51bGwsIGNvbmZpZywgXCJjb25maWdcIik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfSxcblxuICAgIC8vIERlcml2ZSBwYXJhbWV0ZXJzIGZvciB0aGlzIHN0YXRlIGFuZCBlbnN1cmUgdGhleSdyZSBhIHN1cGVyLXNldCBvZiBwYXJlbnQncyBwYXJhbWV0ZXJzXG4gICAgcGFyYW1zOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIG93blBhcmFtcyA9IHBpY2soc3RhdGUub3duUGFyYW1zLCBzdGF0ZS5vd25QYXJhbXMuJCRrZXlzKCkpO1xuICAgICAgcmV0dXJuIHN0YXRlLnBhcmVudCAmJiBzdGF0ZS5wYXJlbnQucGFyYW1zID8gZXh0ZW5kKHN0YXRlLnBhcmVudC5wYXJhbXMuJCRuZXcoKSwgb3duUGFyYW1zKSA6IG5ldyAkJFVNRlAuUGFyYW1TZXQoKTtcbiAgICB9LFxuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gZXhwbGljaXQgbXVsdGktdmlldyBjb25maWd1cmF0aW9uLCBtYWtlIG9uZSB1cCBzbyB3ZSBkb24ndCBoYXZlXG4gICAgLy8gdG8gaGFuZGxlIGJvdGggY2FzZXMgaW4gdGhlIHZpZXcgZGlyZWN0aXZlIGxhdGVyLiBOb3RlIHRoYXQgaGF2aW5nIGFuIGV4cGxpY2l0XG4gICAgLy8gJ3ZpZXdzJyBwcm9wZXJ0eSB3aWxsIG1lYW4gdGhlIGRlZmF1bHQgdW5uYW1lZCB2aWV3IHByb3BlcnRpZXMgYXJlIGlnbm9yZWQuIFRoaXNcbiAgICAvLyBpcyBhbHNvIGEgZ29vZCB0aW1lIHRvIHJlc29sdmUgdmlldyBuYW1lcyB0byBhYnNvbHV0ZSBuYW1lcywgc28gZXZlcnl0aGluZyBpcyBhXG4gICAgLy8gc3RyYWlnaHQgbG9va3VwIGF0IGxpbmsgdGltZS5cbiAgICB2aWV3czogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciB2aWV3cyA9IHt9O1xuXG4gICAgICBmb3JFYWNoKGlzRGVmaW5lZChzdGF0ZS52aWV3cykgPyBzdGF0ZS52aWV3cyA6IHsgJyc6IHN0YXRlIH0sIGZ1bmN0aW9uICh2aWV3LCBuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJ0AnKSA8IDApIG5hbWUgKz0gJ0AnICsgc3RhdGUucGFyZW50Lm5hbWU7XG4gICAgICAgIHZpZXcucmVzb2x2ZUFzID0gdmlldy5yZXNvbHZlQXMgfHwgc3RhdGUucmVzb2x2ZUFzIHx8ICckcmVzb2x2ZSc7XG4gICAgICAgIHZpZXdzW25hbWVdID0gdmlldztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHZpZXdzO1xuICAgIH0sXG5cbiAgICAvLyBLZWVwIGEgZnVsbCBwYXRoIGZyb20gdGhlIHJvb3QgZG93biB0byB0aGlzIHN0YXRlIGFzIHRoaXMgaXMgbmVlZGVkIGZvciBzdGF0ZSBhY3RpdmF0aW9uLlxuICAgIHBhdGg6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUucGFyZW50ID8gc3RhdGUucGFyZW50LnBhdGguY29uY2F0KHN0YXRlKSA6IFtdOyAvLyBleGNsdWRlIHJvb3QgZnJvbSBwYXRoXG4gICAgfSxcblxuICAgIC8vIFNwZWVkIHVwICRzdGF0ZS5jb250YWlucygpIGFzIGl0J3MgdXNlZCBhIGxvdFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIGluY2x1ZGVzID0gc3RhdGUucGFyZW50ID8gZXh0ZW5kKHt9LCBzdGF0ZS5wYXJlbnQuaW5jbHVkZXMpIDoge307XG4gICAgICBpbmNsdWRlc1tzdGF0ZS5uYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gaW5jbHVkZXM7XG4gICAgfSxcblxuICAgICRkZWxlZ2F0ZXM6IHt9XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNSZWxhdGl2ZShzdGF0ZU5hbWUpIHtcbiAgICByZXR1cm4gc3RhdGVOYW1lLmluZGV4T2YoXCIuXCIpID09PSAwIHx8IHN0YXRlTmFtZS5pbmRleE9mKFwiXlwiKSA9PT0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgYmFzZSkge1xuICAgIGlmICghc3RhdGVPck5hbWUpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgaXNTdHIgPSBpc1N0cmluZyhzdGF0ZU9yTmFtZSksXG4gICAgICAgIG5hbWUgID0gaXNTdHIgPyBzdGF0ZU9yTmFtZSA6IHN0YXRlT3JOYW1lLm5hbWUsXG4gICAgICAgIHBhdGggID0gaXNSZWxhdGl2ZShuYW1lKTtcblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBpZiAoIWJhc2UpIHRocm93IG5ldyBFcnJvcihcIk5vIHJlZmVyZW5jZSBwb2ludCBnaXZlbiBmb3IgcGF0aCAnXCIgICsgbmFtZSArIFwiJ1wiKTtcbiAgICAgIGJhc2UgPSBmaW5kU3RhdGUoYmFzZSk7XG4gICAgICBcbiAgICAgIHZhciByZWwgPSBuYW1lLnNwbGl0KFwiLlwiKSwgaSA9IDAsIHBhdGhMZW5ndGggPSByZWwubGVuZ3RoLCBjdXJyZW50ID0gYmFzZTtcblxuICAgICAgZm9yICg7IGkgPCBwYXRoTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlbFtpXSA9PT0gXCJcIiAmJiBpID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudCA9IGJhc2U7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbFtpXSA9PT0gXCJeXCIpIHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQucGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJQYXRoICdcIiArIG5hbWUgKyBcIicgbm90IHZhbGlkIGZvciBzdGF0ZSAnXCIgKyBiYXNlLm5hbWUgKyBcIidcIik7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVsID0gcmVsLnNsaWNlKGkpLmpvaW4oXCIuXCIpO1xuICAgICAgbmFtZSA9IGN1cnJlbnQubmFtZSArIChjdXJyZW50Lm5hbWUgJiYgcmVsID8gXCIuXCIgOiBcIlwiKSArIHJlbDtcbiAgICB9XG4gICAgdmFyIHN0YXRlID0gc3RhdGVzW25hbWVdO1xuXG4gICAgaWYgKHN0YXRlICYmIChpc1N0ciB8fCAoIWlzU3RyICYmIChzdGF0ZSA9PT0gc3RhdGVPck5hbWUgfHwgc3RhdGUuc2VsZiA9PT0gc3RhdGVPck5hbWUpKSkpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1ZXVlU3RhdGUocGFyZW50TmFtZSwgc3RhdGUpIHtcbiAgICBpZiAoIXF1ZXVlW3BhcmVudE5hbWVdKSB7XG4gICAgICBxdWV1ZVtwYXJlbnROYW1lXSA9IFtdO1xuICAgIH1cbiAgICBxdWV1ZVtwYXJlbnROYW1lXS5wdXNoKHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoUXVldWVkQ2hpbGRyZW4ocGFyZW50TmFtZSkge1xuICAgIHZhciBxdWV1ZWQgPSBxdWV1ZVtwYXJlbnROYW1lXSB8fCBbXTtcbiAgICB3aGlsZShxdWV1ZWQubGVuZ3RoKSB7XG4gICAgICByZWdpc3RlclN0YXRlKHF1ZXVlZC5zaGlmdCgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlclN0YXRlKHN0YXRlKSB7XG4gICAgLy8gV3JhcCBhIG5ldyBvYmplY3QgYXJvdW5kIHRoZSBzdGF0ZSBzbyB3ZSBjYW4gc3RvcmUgb3VyIHByaXZhdGUgZGV0YWlscyBlYXNpbHkuXG4gICAgc3RhdGUgPSBpbmhlcml0KHN0YXRlLCB7XG4gICAgICBzZWxmOiBzdGF0ZSxcbiAgICAgIHJlc29sdmU6IHN0YXRlLnJlc29sdmUgfHwge30sXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLm5hbWU7IH1cbiAgICB9KTtcblxuICAgIHZhciBuYW1lID0gc3RhdGUubmFtZTtcbiAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8IG5hbWUuaW5kZXhPZignQCcpID49IDApIHRocm93IG5ldyBFcnJvcihcIlN0YXRlIG11c3QgaGF2ZSBhIHZhbGlkIG5hbWVcIik7XG4gICAgaWYgKHN0YXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgdGhyb3cgbmV3IEVycm9yKFwiU3RhdGUgJ1wiICsgbmFtZSArIFwiJyBpcyBhbHJlYWR5IGRlZmluZWRcIik7XG5cbiAgICAvLyBHZXQgcGFyZW50IG5hbWVcbiAgICB2YXIgcGFyZW50TmFtZSA9IChuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpID8gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sYXN0SW5kZXhPZignLicpKVxuICAgICAgICA6IChpc1N0cmluZyhzdGF0ZS5wYXJlbnQpKSA/IHN0YXRlLnBhcmVudFxuICAgICAgICA6IChpc09iamVjdChzdGF0ZS5wYXJlbnQpICYmIGlzU3RyaW5nKHN0YXRlLnBhcmVudC5uYW1lKSkgPyBzdGF0ZS5wYXJlbnQubmFtZVxuICAgICAgICA6ICcnO1xuXG4gICAgLy8gSWYgcGFyZW50IGlzIG5vdCByZWdpc3RlcmVkIHlldCwgYWRkIHN0YXRlIHRvIHF1ZXVlIGFuZCByZWdpc3RlciBsYXRlclxuICAgIGlmIChwYXJlbnROYW1lICYmICFzdGF0ZXNbcGFyZW50TmFtZV0pIHtcbiAgICAgIHJldHVybiBxdWV1ZVN0YXRlKHBhcmVudE5hbWUsIHN0YXRlLnNlbGYpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZUJ1aWxkZXIpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHN0YXRlQnVpbGRlcltrZXldKSkgc3RhdGVba2V5XSA9IHN0YXRlQnVpbGRlcltrZXldKHN0YXRlLCBzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1trZXldKTtcbiAgICB9XG4gICAgc3RhdGVzW25hbWVdID0gc3RhdGU7XG5cbiAgICAvLyBSZWdpc3RlciB0aGUgc3RhdGUgaW4gdGhlIGdsb2JhbCBzdGF0ZSBsaXN0IGFuZCB3aXRoICR1cmxSb3V0ZXIgaWYgbmVjZXNzYXJ5LlxuICAgIGlmICghc3RhdGVbYWJzdHJhY3RLZXldICYmIHN0YXRlLnVybCkge1xuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oc3RhdGUudXJsLCBbJyRtYXRjaCcsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgaWYgKCRzdGF0ZS4kY3VycmVudC5uYXZpZ2FibGUgIT0gc3RhdGUgfHwgIWVxdWFsRm9yS2V5cygkbWF0Y2gsICRzdGF0ZVBhcmFtcykpIHtcbiAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKHN0YXRlLCAkbWF0Y2gsIHsgaW5oZXJpdDogdHJ1ZSwgbG9jYXRpb246IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXIgYW55IHF1ZXVlZCBjaGlsZHJlblxuICAgIGZsdXNoUXVldWVkQ2hpbGRyZW4obmFtZSk7XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICAvLyBDaGVja3MgdGV4dCB0byBzZWUgaWYgaXQgbG9va3MgbGlrZSBhIGdsb2IuXG4gIGZ1bmN0aW9uIGlzR2xvYiAodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LmluZGV4T2YoJyonKSA+IC0xO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0cnVlIGlmIGdsb2IgbWF0Y2hlcyBjdXJyZW50ICRzdGF0ZSBuYW1lLlxuICBmdW5jdGlvbiBkb2VzU3RhdGVNYXRjaEdsb2IgKGdsb2IpIHtcbiAgICB2YXIgZ2xvYlNlZ21lbnRzID0gZ2xvYi5zcGxpdCgnLicpLFxuICAgICAgICBzZWdtZW50cyA9ICRzdGF0ZS4kY3VycmVudC5uYW1lLnNwbGl0KCcuJyk7XG5cbiAgICAvL21hdGNoIHNpbmdsZSBzdGFyc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZ2xvYlNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGdsb2JTZWdtZW50c1tpXSA9PT0gJyonKSB7XG4gICAgICAgIHNlZ21lbnRzW2ldID0gJyonO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vbWF0Y2ggZ3JlZWR5IHN0YXJ0c1xuICAgIGlmIChnbG9iU2VnbWVudHNbMF0gPT09ICcqKicpIHtcbiAgICAgICBzZWdtZW50cyA9IHNlZ21lbnRzLnNsaWNlKGluZGV4T2Yoc2VnbWVudHMsIGdsb2JTZWdtZW50c1sxXSkpO1xuICAgICAgIHNlZ21lbnRzLnVuc2hpZnQoJyoqJyk7XG4gICAgfVxuICAgIC8vbWF0Y2ggZ3JlZWR5IGVuZHNcbiAgICBpZiAoZ2xvYlNlZ21lbnRzW2dsb2JTZWdtZW50cy5sZW5ndGggLSAxXSA9PT0gJyoqJykge1xuICAgICAgIHNlZ21lbnRzLnNwbGljZShpbmRleE9mKHNlZ21lbnRzLCBnbG9iU2VnbWVudHNbZ2xvYlNlZ21lbnRzLmxlbmd0aCAtIDJdKSArIDEsIE51bWJlci5NQVhfVkFMVUUpO1xuICAgICAgIHNlZ21lbnRzLnB1c2goJyoqJyk7XG4gICAgfVxuXG4gICAgaWYgKGdsb2JTZWdtZW50cy5sZW5ndGggIT0gc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJycpID09PSBnbG9iU2VnbWVudHMuam9pbignJyk7XG4gIH1cblxuXG4gIC8vIEltcGxpY2l0IHJvb3Qgc3RhdGUgdGhhdCBpcyBhbHdheXMgYWN0aXZlXG4gIHJvb3QgPSByZWdpc3RlclN0YXRlKHtcbiAgICBuYW1lOiAnJyxcbiAgICB1cmw6ICdeJyxcbiAgICB2aWV3czogbnVsbCxcbiAgICAnYWJzdHJhY3QnOiB0cnVlXG4gIH0pO1xuICByb290Lm5hdmlnYWJsZSA9IG51bGw7XG5cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlciNkZWNvcmF0b3JcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWxsb3dzIHlvdSB0byBleHRlbmQgKGNhcmVmdWxseSkgb3Igb3ZlcnJpZGUgKGF0IHlvdXIgb3duIHBlcmlsKSB0aGUgXG4gICAqIGBzdGF0ZUJ1aWxkZXJgIG9iamVjdCB1c2VkIGludGVybmFsbHkgYnkgYCRzdGF0ZVByb3ZpZGVyYC4gVGhpcyBjYW4gYmUgdXNlZCBcbiAgICogdG8gYWRkIGN1c3RvbSBmdW5jdGlvbmFsaXR5IHRvIHVpLXJvdXRlciwgZm9yIGV4YW1wbGUgaW5mZXJyaW5nIHRlbXBsYXRlVXJsIFxuICAgKiBiYXNlZCBvbiB0aGUgc3RhdGUgbmFtZS5cbiAgICpcbiAgICogV2hlbiBwYXNzaW5nIG9ubHkgYSBuYW1lLCBpdCByZXR1cm5zIHRoZSBjdXJyZW50IChvcmlnaW5hbCBvciBkZWNvcmF0ZWQpIGJ1aWxkZXJcbiAgICogZnVuY3Rpb24gdGhhdCBtYXRjaGVzIGBuYW1lYC5cbiAgICpcbiAgICogVGhlIGJ1aWxkZXIgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIGRlY29yYXRlZCBhcmUgbGlzdGVkIGJlbG93LiBUaG91Z2ggbm90IGFsbFxuICAgKiBuZWNlc3NhcmlseSBoYXZlIGEgZ29vZCB1c2UgY2FzZSBmb3IgZGVjb3JhdGlvbiwgdGhhdCBpcyB1cCB0byB5b3UgdG8gZGVjaWRlLlxuICAgKlxuICAgKiBJbiBhZGRpdGlvbiwgdXNlcnMgY2FuIGF0dGFjaCBjdXN0b20gZGVjb3JhdG9ycywgd2hpY2ggd2lsbCBnZW5lcmF0ZSBuZXcgXG4gICAqIHByb3BlcnRpZXMgd2l0aGluIHRoZSBzdGF0ZSdzIGludGVybmFsIGRlZmluaXRpb24uIFRoZXJlIGlzIGN1cnJlbnRseSBubyBjbGVhciBcbiAgICogdXNlLWNhc2UgZm9yIHRoaXMgYmV5b25kIGFjY2Vzc2luZyBpbnRlcm5hbCBzdGF0ZXMgKGkuZS4gJHN0YXRlLiRjdXJyZW50KSwgXG4gICAqIGhvd2V2ZXIsIGV4cGVjdCB0aGlzIHRvIGJlY29tZSBpbmNyZWFzaW5nbHkgcmVsZXZhbnQgYXMgd2UgaW50cm9kdWNlIGFkZGl0aW9uYWwgXG4gICAqIG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMuXG4gICAqXG4gICAqICoqV2FybmluZyoqOiBEZWNvcmF0b3JzIHNob3VsZCBub3QgYmUgaW50ZXJkZXBlbmRlbnQgYmVjYXVzZSB0aGUgb3JkZXIgb2YgXG4gICAqIGV4ZWN1dGlvbiBvZiB0aGUgYnVpbGRlciBmdW5jdGlvbnMgaW4gbm9uLWRldGVybWluaXN0aWMuIEJ1aWxkZXIgZnVuY3Rpb25zIFxuICAgKiBzaG91bGQgb25seSBiZSBkZXBlbmRlbnQgb24gdGhlIHN0YXRlIGRlZmluaXRpb24gb2JqZWN0IGFuZCBzdXBlciBmdW5jdGlvbi5cbiAgICpcbiAgICpcbiAgICogRXhpc3RpbmcgYnVpbGRlciBmdW5jdGlvbnMgYW5kIGN1cnJlbnQgcmV0dXJuIHZhbHVlczpcbiAgICpcbiAgICogLSAqKnBhcmVudCoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIHRoZSBwYXJlbnQgc3RhdGUgb2JqZWN0LlxuICAgKiAtICoqZGF0YSoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIHN0YXRlIGRhdGEsIGluY2x1ZGluZyBhbnkgaW5oZXJpdGVkIGRhdGEgdGhhdCBpcyBub3RcbiAgICogICBvdmVycmlkZGVuIGJ5IG93biB2YWx1ZXMgKGlmIGFueSkuXG4gICAqIC0gKip1cmwqKiBge29iamVjdH1gIC0gcmV0dXJucyBhIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgVXJsTWF0Y2hlcn1cbiAgICogICBvciBgbnVsbGAuXG4gICAqIC0gKipuYXZpZ2FibGUqKiBge29iamVjdH1gIC0gcmV0dXJucyBjbG9zZXN0IGFuY2VzdG9yIHN0YXRlIHRoYXQgaGFzIGEgVVJMIChha2EgaXMgXG4gICAqICAgbmF2aWdhYmxlKS5cbiAgICogLSAqKnBhcmFtcyoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlIHBhcmFtcyB0aGF0IGFyZSBlbnN1cmVkIHRvIFxuICAgKiAgIGJlIGEgc3VwZXItc2V0IG9mIHBhcmVudCdzIHBhcmFtcy5cbiAgICogLSAqKnZpZXdzKiogYHtvYmplY3R9YCAtIHJldHVybnMgYSB2aWV3cyBvYmplY3Qgd2hlcmUgZWFjaCBrZXkgaXMgYW4gYWJzb2x1dGUgdmlldyBcbiAgICogICBuYW1lIChpLmUuIFwidmlld05hbWVAc3RhdGVOYW1lXCIpIGFuZCBlYWNoIHZhbHVlIGlzIHRoZSBjb25maWcgb2JqZWN0IFxuICAgKiAgICh0ZW1wbGF0ZSwgY29udHJvbGxlcikgZm9yIHRoZSB2aWV3LiBFdmVuIHdoZW4geW91IGRvbid0IHVzZSB0aGUgdmlld3Mgb2JqZWN0IFxuICAgKiAgIGV4cGxpY2l0bHkgb24gYSBzdGF0ZSBjb25maWcsIG9uZSBpcyBzdGlsbCBjcmVhdGVkIGZvciB5b3UgaW50ZXJuYWxseS5cbiAgICogICBTbyBieSBkZWNvcmF0aW5nIHRoaXMgYnVpbGRlciBmdW5jdGlvbiB5b3UgaGF2ZSBhY2Nlc3MgdG8gZGVjb3JhdGluZyB0ZW1wbGF0ZSBcbiAgICogICBhbmQgY29udHJvbGxlciBwcm9wZXJ0aWVzLlxuICAgKiAtICoqb3duUGFyYW1zKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gYXJyYXkgb2YgcGFyYW1zIHRoYXQgYmVsb25nIHRvIHRoZSBzdGF0ZSwgXG4gICAqICAgbm90IGluY2x1ZGluZyBhbnkgcGFyYW1zIGRlZmluZWQgYnkgYW5jZXN0b3Igc3RhdGVzLlxuICAgKiAtICoqcGF0aCoqIGB7c3RyaW5nfWAgLSByZXR1cm5zIHRoZSBmdWxsIHBhdGggZnJvbSB0aGUgcm9vdCBkb3duIHRvIHRoaXMgc3RhdGUuIFxuICAgKiAgIE5lZWRlZCBmb3Igc3RhdGUgYWN0aXZhdGlvbi5cbiAgICogLSAqKmluY2x1ZGVzKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaW5jbHVkZXMgZXZlcnkgc3RhdGUgdGhhdCBcbiAgICogICB3b3VsZCBwYXNzIGEgYCRzdGF0ZS5pbmNsdWRlcygpYCB0ZXN0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiAvLyBPdmVycmlkZSB0aGUgaW50ZXJuYWwgJ3ZpZXdzJyBidWlsZGVyIHdpdGggYSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBzdGF0ZVxuICAgKiAvLyBkZWZpbml0aW9uLCBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIGZ1bmN0aW9uIGJlaW5nIG92ZXJyaWRkZW46XG4gICAqICRzdGF0ZVByb3ZpZGVyLmRlY29yYXRvcigndmlld3MnLCBmdW5jdGlvbiAoc3RhdGUsIHBhcmVudCkge1xuICAgKiAgIHZhciByZXN1bHQgPSB7fSxcbiAgICogICAgICAgdmlld3MgPSBwYXJlbnQoc3RhdGUpO1xuICAgKlxuICAgKiAgIGFuZ3VsYXIuZm9yRWFjaCh2aWV3cywgZnVuY3Rpb24gKGNvbmZpZywgbmFtZSkge1xuICAgKiAgICAgdmFyIGF1dG9OYW1lID0gKHN0YXRlLm5hbWUgKyAnLicgKyBuYW1lKS5yZXBsYWNlKCcuJywgJy8nKTtcbiAgICogICAgIGNvbmZpZy50ZW1wbGF0ZVVybCA9IGNvbmZpZy50ZW1wbGF0ZVVybCB8fCAnL3BhcnRpYWxzLycgKyBhdXRvTmFtZSArICcuaHRtbCc7XG4gICAqICAgICByZXN1bHRbbmFtZV0gPSBjb25maWc7XG4gICAqICAgfSk7XG4gICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICogfSk7XG4gICAqXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdob21lJywge1xuICAgKiAgIHZpZXdzOiB7XG4gICAqICAgICAnY29udGFjdC5saXN0JzogeyBjb250cm9sbGVyOiAnTGlzdENvbnRyb2xsZXInIH0sXG4gICAqICAgICAnY29udGFjdC5pdGVtJzogeyBjb250cm9sbGVyOiAnSXRlbUNvbnRyb2xsZXInIH1cbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyAuLi5cbiAgICpcbiAgICogJHN0YXRlLmdvKCdob21lJyk7XG4gICAqIC8vIEF1dG8tcG9wdWxhdGVzIGxpc3QgYW5kIGl0ZW0gdmlld3Mgd2l0aCAvcGFydGlhbHMvaG9tZS9jb250YWN0L2xpc3QuaHRtbCxcbiAgICogLy8gYW5kIC9wYXJ0aWFscy9ob21lL2NvbnRhY3QvaXRlbS5odG1sLCByZXNwZWN0aXZlbHkuXG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYnVpbGRlciBmdW5jdGlvbiB0byBkZWNvcmF0ZS4gXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmdW5jIEEgZnVuY3Rpb24gdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZGVjb3JhdGluZyB0aGUgb3JpZ2luYWwgXG4gICAqIGJ1aWxkZXIgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0d28gcGFyYW1ldGVyczpcbiAgICpcbiAgICogICAtIGB7b2JqZWN0fWAgLSBzdGF0ZSAtIFRoZSBzdGF0ZSBjb25maWcgb2JqZWN0LlxuICAgKiAgIC0gYHtvYmplY3R9YCAtIHN1cGVyIC0gVGhlIG9yaWdpbmFsIGJ1aWxkZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gJHN0YXRlUHJvdmlkZXIgLSAkc3RhdGVQcm92aWRlciBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5kZWNvcmF0b3IgPSBkZWNvcmF0b3I7XG4gIGZ1bmN0aW9uIGRlY29yYXRvcihuYW1lLCBmdW5jKSB7XG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpICYmICFpc0RlZmluZWQoZnVuYykpIHtcbiAgICAgIHJldHVybiBzdGF0ZUJ1aWxkZXJbbmFtZV07XG4gICAgfVxuICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSB8fCAhaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoc3RhdGVCdWlsZGVyW25hbWVdICYmICFzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1tuYW1lXSkge1xuICAgICAgc3RhdGVCdWlsZGVyLiRkZWxlZ2F0ZXNbbmFtZV0gPSBzdGF0ZUJ1aWxkZXJbbmFtZV07XG4gICAgfVxuICAgIHN0YXRlQnVpbGRlcltuYW1lXSA9IGZ1bmM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlciNzdGF0ZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBzdGF0ZSBjb25maWd1cmF0aW9uIHVuZGVyIGEgZ2l2ZW4gc3RhdGUgbmFtZS4gVGhlIHN0YXRlQ29uZmlnIG9iamVjdFxuICAgKiBoYXMgdGhlIGZvbGxvd2luZyBhY2NlcHRhYmxlIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdW5pcXVlIHN0YXRlIG5hbWUsIGUuZy4gXCJob21lXCIsIFwiYWJvdXRcIiwgXCJjb250YWN0c1wiLlxuICAgKiBUbyBjcmVhdGUgYSBwYXJlbnQvY2hpbGQgc3RhdGUgdXNlIGEgZG90LCBlLmcuIFwiYWJvdXQuc2FsZXNcIiwgXCJob21lLm5ld2VzdFwiLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGVDb25maWcgU3RhdGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uPX0gc3RhdGVDb25maWcudGVtcGxhdGVcbiAgICogPGEgaWQ9J3RlbXBsYXRlJz48L2E+XG4gICAqICAgaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgKiAgIGFuIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgd2hpY2ggc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHVpVmlldyBkaXJlY3RpdmVzLiBUaGlzIHByb3BlcnR5IFxuICAgKiAgIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0ZW1wbGF0ZVVybC5cbiAgICogICBcbiAgICogICBJZiBgdGVtcGxhdGVgIGlzIGEgZnVuY3Rpb24sIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAgIC0ge2FycmF5LiZsdDtvYmplY3QmZ3Q7fSAtIHN0YXRlIHBhcmFtZXRlcnMgZXh0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQgJGxvY2F0aW9uLnBhdGgoKSBieVxuICAgKiAgICAgYXBwbHlpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICpcbiAgICogPHByZT50ZW1wbGF0ZTpcbiAgICogICBcIjxoMT5pbmxpbmUgdGVtcGxhdGUgZGVmaW5pdGlvbjwvaDE+XCIgK1xuICAgKiAgIFwiPGRpdiB1aS12aWV3PjwvZGl2PlwiPC9wcmU+XG4gICAqIDxwcmU+dGVtcGxhdGU6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgKiAgICAgICByZXR1cm4gXCI8aDE+Z2VuZXJhdGVkIHRlbXBsYXRlPC9oMT5cIjsgfTwvcHJlPlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVVybFxuICAgKiA8YSBpZD0ndGVtcGxhdGVVcmwnPjwvYT5cbiAgICpcbiAgICogICBwYXRoIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBhdGggdG8gYW4gaHRtbFxuICAgKiAgIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkgdWlWaWV3LlxuICAgKiAgIFxuICAgKiAgIElmIGB0ZW1wbGF0ZVVybGAgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgLSB7YXJyYXkuJmx0O29iamVjdCZndDt9IC0gc3RhdGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCAkbG9jYXRpb24ucGF0aCgpIGJ5IFxuICAgKiAgICAgYXBwbHlpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICpcbiAgICogPHByZT50ZW1wbGF0ZVVybDogXCJob21lLmh0bWxcIjwvcHJlPlxuICAgKiA8cHJlPnRlbXBsYXRlVXJsOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICogICAgIHJldHVybiBteVRlbXBsYXRlc1twYXJhbXMucGFnZUlkXTsgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcudGVtcGxhdGVQcm92aWRlclxuICAgKiA8YSBpZD0ndGVtcGxhdGVQcm92aWRlcic+PC9hPlxuICAgKiAgICBQcm92aWRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgSFRNTCBjb250ZW50IHN0cmluZy5cbiAgICogPHByZT4gdGVtcGxhdGVQcm92aWRlcjpcbiAgICogICAgICAgZnVuY3Rpb24oTXlUZW1wbGF0ZVNlcnZpY2UsIHBhcmFtcykge1xuICAgKiAgICAgICAgIHJldHVybiBNeVRlbXBsYXRlU2VydmljZS5nZXRUZW1wbGF0ZShwYXJhbXMucGFnZUlkKTtcbiAgICogICAgICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbj19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJcbiAgICogPGEgaWQ9J2NvbnRyb2xsZXInPjwvYT5cbiAgICpcbiAgICogIENvbnRyb2xsZXIgZm4gdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIG5ld2x5XG4gICAqICAgcmVsYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHJlZ2lzdGVyZWQgY29udHJvbGxlciBpZiBwYXNzZWQgYXMgYSBzdHJpbmcuXG4gICAqICAgT3B0aW9uYWxseSwgdGhlIENvbnRyb2xsZXJBcyBtYXkgYmUgZGVjbGFyZWQgaGVyZS5cbiAgICogPHByZT5jb250cm9sbGVyOiBcIk15UmVnaXN0ZXJlZENvbnRyb2xsZXJcIjwvcHJlPlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6XG4gICAqICAgICBcIk15UmVnaXN0ZXJlZENvbnRyb2xsZXIgYXMgZm9vQ3RybFwifTwvcHJlPlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgTXlTZXJ2aWNlKSB7XG4gICAqICAgICAkc2NvcGUuZGF0YSA9IE15U2VydmljZS5nZXREYXRhKCk7IH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbj19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJQcm92aWRlclxuICAgKiA8YSBpZD0nY29udHJvbGxlclByb3ZpZGVyJz48L2E+XG4gICAqXG4gICAqIEluamVjdGFibGUgcHJvdmlkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBhY3R1YWwgY29udHJvbGxlciBvciBzdHJpbmcuXG4gICAqIDxwcmU+Y29udHJvbGxlclByb3ZpZGVyOlxuICAgKiAgIGZ1bmN0aW9uKE15UmVzb2x2ZURhdGEpIHtcbiAgICogICAgIGlmIChNeVJlc29sdmVEYXRhLmZvbylcbiAgICogICAgICAgcmV0dXJuIFwiRm9vQ3RybFwiXG4gICAqICAgICBlbHNlIGlmIChNeVJlc29sdmVEYXRhLmJhcilcbiAgICogICAgICAgcmV0dXJuIFwiQmFyQ3RybFwiO1xuICAgKiAgICAgZWxzZSByZXR1cm4gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5iYXogPSBcIlF1eFwiO1xuICAgKiAgICAgfVxuICAgKiAgIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzdGF0ZUNvbmZpZy5jb250cm9sbGVyQXNcbiAgICogPGEgaWQ9J2NvbnRyb2xsZXJBcyc+PC9hPlxuICAgKiBcbiAgICogQSBjb250cm9sbGVyIGFsaWFzIG5hbWUuIElmIHByZXNlbnQgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZVxuICAgKiAgIHB1Ymxpc2hlZCB0byBzY29wZSB1bmRlciB0aGUgY29udHJvbGxlckFzIG5hbWUuXG4gICAqIDxwcmU+Y29udHJvbGxlckFzOiBcIm15Q3RybFwiPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdD19IHN0YXRlQ29uZmlnLnBhcmVudFxuICAgKiA8YSBpZD0ncGFyZW50Jz48L2E+XG4gICAqIE9wdGlvbmFsbHkgc3BlY2lmaWVzIHRoZSBwYXJlbnQgc3RhdGUgb2YgdGhpcyBzdGF0ZS5cbiAgICpcbiAgICogPHByZT5wYXJlbnQ6ICdwYXJlbnRTdGF0ZSc8L3ByZT5cbiAgICogPHByZT5wYXJlbnQ6IHBhcmVudFN0YXRlIC8vIEpTIHZhcmlhYmxlPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGVDb25maWcucmVzb2x2ZVxuICAgKiA8YSBpZD0ncmVzb2x2ZSc+PC9hPlxuICAgKlxuICAgKiBBbiBvcHRpb25hbCBtYXAmbHQ7c3RyaW5nLCBmdW5jdGlvbiZndDsgb2YgZGVwZW5kZW5jaWVzIHdoaWNoXG4gICAqICAgc2hvdWxkIGJlIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuIElmIGFueSBvZiB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIHByb21pc2VzLCBcbiAgICogICB0aGUgcm91dGVyIHdpbGwgd2FpdCBmb3IgdGhlbSBhbGwgdG8gYmUgcmVzb2x2ZWQgYmVmb3JlIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZC5cbiAgICogICBJZiBhbGwgdGhlIHByb21pc2VzIGFyZSByZXNvbHZlZCBzdWNjZXNzZnVsbHksIHRoZSAkc3RhdGVDaGFuZ2VTdWNjZXNzIGV2ZW50IGlzIGZpcmVkXG4gICAqICAgYW5kIHRoZSB2YWx1ZXMgb2YgdGhlIHJlc29sdmVkIHByb21pc2VzIGFyZSBpbmplY3RlZCBpbnRvIGFueSBjb250cm9sbGVycyB0aGF0IHJlZmVyZW5jZSB0aGVtLlxuICAgKiAgIElmIGFueSAgb2YgdGhlIHByb21pc2VzIGFyZSByZWplY3RlZCB0aGUgJHN0YXRlQ2hhbmdlRXJyb3IgZXZlbnQgaXMgZmlyZWQuXG4gICAqXG4gICAqICAgVGhlIG1hcCBvYmplY3QgaXM6XG4gICAqICAgXG4gICAqICAgLSBrZXkgLSB7c3RyaW5nfTogbmFtZSBvZiBkZXBlbmRlbmN5IHRvIGJlIGluamVjdGVkIGludG8gY29udHJvbGxlclxuICAgKiAgIC0gZmFjdG9yeSAtIHtzdHJpbmd8ZnVuY3Rpb259OiBJZiBzdHJpbmcgdGhlbiBpdCBpcyBhbGlhcyBmb3Igc2VydmljZS4gT3RoZXJ3aXNlIGlmIGZ1bmN0aW9uLCBcbiAgICogICAgIGl0IGlzIGluamVjdGVkIGFuZCByZXR1cm4gdmFsdWUgaXQgdHJlYXRlZCBhcyBkZXBlbmRlbmN5LiBJZiByZXN1bHQgaXMgYSBwcm9taXNlLCBpdCBpcyBcbiAgICogICAgIHJlc29sdmVkIGJlZm9yZSBpdHMgdmFsdWUgaXMgaW5qZWN0ZWQgaW50byBjb250cm9sbGVyLlxuICAgKlxuICAgKiA8cHJlPnJlc29sdmU6IHtcbiAgICogICAgIG15UmVzb2x2ZTE6XG4gICAqICAgICAgIGZ1bmN0aW9uKCRodHRwLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9mb29zL1wiK3N0YXRlUGFyYW1zLmZvb0lEKTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0YXRlQ29uZmlnLnVybFxuICAgKiA8YSBpZD0ndXJsJz48L2E+XG4gICAqXG4gICAqICAgQSB1cmwgZnJhZ21lbnQgd2l0aCBvcHRpb25hbCBwYXJhbWV0ZXJzLiBXaGVuIGEgc3RhdGUgaXMgbmF2aWdhdGVkIG9yXG4gICAqICAgdHJhbnNpdGlvbmVkIHRvLCB0aGUgYCRzdGF0ZVBhcmFtc2Agc2VydmljZSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIGFueSBcbiAgICogICBwYXJhbWV0ZXJzIHRoYXQgd2VyZSBwYXNzZWQuXG4gICAqXG4gICAqICAgKFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyIFVybE1hdGNoZXJ9IGBVcmxNYXRjaGVyYH0gZm9yXG4gICAqICAgbW9yZSBkZXRhaWxzIG9uIGFjY2VwdGFibGUgcGF0dGVybnMgKVxuICAgKlxuICAgKiBleGFtcGxlczpcbiAgICogPHByZT51cmw6IFwiL2hvbWVcIlxuICAgKiB1cmw6IFwiL3VzZXJzLzp1c2VyaWRcIlxuICAgKiB1cmw6IFwiL2Jvb2tzL3tib29raWQ6W2EtekEtWl8tXX1cIlxuICAgKiB1cmw6IFwiL2Jvb2tzL3tjYXRlZ29yeWlkOmludH1cIlxuICAgKiB1cmw6IFwiL2Jvb2tzL3twdWJsaXNoZXJuYW1lOnN0cmluZ30ve2NhdGVnb3J5aWQ6aW50fVwiXG4gICAqIHVybDogXCIvbWVzc2FnZXM/YmVmb3JlJmFmdGVyXCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcz97YmVmb3JlOmRhdGV9JnthZnRlcjpkYXRlfVwiXG4gICAqIHVybDogXCIvbWVzc2FnZXMvOm1haWxib3hpZD97YmVmb3JlOmRhdGV9JnthZnRlcjpkYXRlfVwiXG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlQ29uZmlnLnZpZXdzXG4gICAqIDxhIGlkPSd2aWV3cyc+PC9hPlxuICAgKiBhbiBvcHRpb25hbCBtYXAmbHQ7c3RyaW5nLCBvYmplY3QmZ3Q7IHdoaWNoIGRlZmluZWQgbXVsdGlwbGUgdmlld3MsIG9yIHRhcmdldHMgdmlld3NcbiAgICogbWFudWFsbHkvZXhwbGljaXRseS5cbiAgICpcbiAgICogRXhhbXBsZXM6XG4gICAqXG4gICAqIFRhcmdldHMgdGhyZWUgbmFtZWQgYHVpLXZpZXdgcyBpbiB0aGUgcGFyZW50IHN0YXRlJ3MgdGVtcGxhdGVcbiAgICogPHByZT52aWV3czoge1xuICAgKiAgICAgaGVhZGVyOiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwiaGVhZGVyQ3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJoZWFkZXIuaHRtbFwiXG4gICAqICAgICB9LCBib2R5OiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwiYm9keUN0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwiYm9keS5odG1sXCJcbiAgICogICAgIH0sIGZvb3Rlcjoge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcImZvb3RDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcImZvb3Rlci5odG1sXCJcbiAgICogICAgIH1cbiAgICogICB9PC9wcmU+XG4gICAqXG4gICAqIFRhcmdldHMgbmFtZWQgYHVpLXZpZXc9XCJoZWFkZXJcImAgZnJvbSBncmFuZHBhcmVudCBzdGF0ZSAndG9wJydzIHRlbXBsYXRlLCBhbmQgbmFtZWQgYHVpLXZpZXc9XCJib2R5XCIgZnJvbSBwYXJlbnQgc3RhdGUncyB0ZW1wbGF0ZS5cbiAgICogPHByZT52aWV3czoge1xuICAgKiAgICAgJ2hlYWRlckB0b3AnOiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwibXNnSGVhZGVyQ3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJtc2dIZWFkZXIuaHRtbFwiXG4gICAqICAgICB9LCAnYm9keSc6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJtZXNzYWdlc0N0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwibWVzc2FnZXMuaHRtbFwiXG4gICAqICAgICB9XG4gICAqICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RhdGVDb25maWcuYWJzdHJhY3Q9ZmFsc2VdXG4gICAqIDxhIGlkPSdhYnN0cmFjdCc+PC9hPlxuICAgKiBBbiBhYnN0cmFjdCBzdGF0ZSB3aWxsIG5ldmVyIGJlIGRpcmVjdGx5IGFjdGl2YXRlZCxcbiAgICogICBidXQgY2FuIHByb3ZpZGUgaW5oZXJpdGVkIHByb3BlcnRpZXMgdG8gaXRzIGNvbW1vbiBjaGlsZHJlbiBzdGF0ZXMuXG4gICAqIDxwcmU+YWJzdHJhY3Q6IHRydWU8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbj19IHN0YXRlQ29uZmlnLm9uRW50ZXJcbiAgICogPGEgaWQ9J29uRW50ZXInPjwvYT5cbiAgICpcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gYSBzdGF0ZSBpcyBlbnRlcmVkLiBHb29kIHdheVxuICAgKiAgIHRvIHRyaWdnZXIgYW4gYWN0aW9uIG9yIGRpc3BhdGNoIGFuIGV2ZW50LCBzdWNoIGFzIG9wZW5pbmcgYSBkaWFsb2cuXG4gICAqIElmIG1pbmlmeWluZyB5b3VyIHNjcmlwdHMsIG1ha2Ugc3VyZSB0byBleHBsaWNpdGx5IGFubm90YXRlIHRoaXMgZnVuY3Rpb24sXG4gICAqIGJlY2F1c2UgaXQgd29uJ3QgYmUgYXV0b21hdGljYWxseSBhbm5vdGF0ZWQgYnkgeW91ciBidWlsZCB0b29scy5cbiAgICpcbiAgICogPHByZT5vbkVudGVyOiBmdW5jdGlvbihNeVNlcnZpY2UsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgTXlTZXJ2aWNlLmZvbygkc3RhdGVQYXJhbXMubXlQYXJhbSk7XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbj19IHN0YXRlQ29uZmlnLm9uRXhpdFxuICAgKiA8YSBpZD0nb25FeGl0Jz48L2E+XG4gICAqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB3aGVuIGEgc3RhdGUgaXMgZXhpdGVkLiBHb29kIHdheSB0b1xuICAgKiAgIHRyaWdnZXIgYW4gYWN0aW9uIG9yIGRpc3BhdGNoIGFuIGV2ZW50LCBzdWNoIGFzIG9wZW5pbmcgYSBkaWFsb2cuXG4gICAqIElmIG1pbmlmeWluZyB5b3VyIHNjcmlwdHMsIG1ha2Ugc3VyZSB0byBleHBsaWNpdGx5IGFubm90YXRlIHRoaXMgZnVuY3Rpb24sXG4gICAqIGJlY2F1c2UgaXQgd29uJ3QgYmUgYXV0b21hdGljYWxseSBhbm5vdGF0ZWQgYnkgeW91ciBidWlsZCB0b29scy5cbiAgICpcbiAgICogPHByZT5vbkV4aXQ6IGZ1bmN0aW9uKE15U2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICBNeVNlcnZpY2UuY2xlYW51cCgkc3RhdGVQYXJhbXMubXlQYXJhbSk7XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gW3N0YXRlQ29uZmlnLnJlbG9hZE9uU2VhcmNoPXRydWVdXG4gICAqIDxhIGlkPSdyZWxvYWRPblNlYXJjaCc+PC9hPlxuICAgKlxuICAgKiBJZiBgZmFsc2VgLCB3aWxsIG5vdCByZXRyaWdnZXIgdGhlIHNhbWUgc3RhdGVcbiAgICogICBqdXN0IGJlY2F1c2UgYSBzZWFyY2gvcXVlcnkgcGFyYW1ldGVyIGhhcyBjaGFuZ2VkICh2aWEgJGxvY2F0aW9uLnNlYXJjaCgpIG9yICRsb2NhdGlvbi5oYXNoKCkpLiBcbiAgICogICBVc2VmdWwgZm9yIHdoZW4geW91J2QgbGlrZSB0byBtb2RpZnkgJGxvY2F0aW9uLnNlYXJjaCgpIHdpdGhvdXQgdHJpZ2dlcmluZyBhIHJlbG9hZC5cbiAgICogPHByZT5yZWxvYWRPblNlYXJjaDogZmFsc2U8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5kYXRhXG4gICAqIDxhIGlkPSdkYXRhJz48L2E+XG4gICAqXG4gICAqIEFyYml0cmFyeSBkYXRhIG9iamVjdCwgdXNlZnVsIGZvciBjdXN0b20gY29uZmlndXJhdGlvbi4gIFRoZSBwYXJlbnQgc3RhdGUncyBgZGF0YWAgaXNcbiAgICogICBwcm90b3R5cGFsbHkgaW5oZXJpdGVkLiAgSW4gb3RoZXIgd29yZHMsIGFkZGluZyBhIGRhdGEgcHJvcGVydHkgdG8gYSBzdGF0ZSBhZGRzIGl0IHRvXG4gICAqICAgdGhlIGVudGlyZSBzdWJ0cmVlIHZpYSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLlxuICAgKlxuICAgKiA8cHJlPmRhdGE6IHtcbiAgICogICAgIHJlcXVpcmVkUm9sZTogJ2ZvbydcbiAgICogfSA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5wYXJhbXNcbiAgICogPGEgaWQ9J3BhcmFtcyc+PC9hPlxuICAgKlxuICAgKiBBIG1hcCB3aGljaCBvcHRpb25hbGx5IGNvbmZpZ3VyZXMgcGFyYW1ldGVycyBkZWNsYXJlZCBpbiB0aGUgYHVybGAsIG9yXG4gICAqICAgZGVmaW5lcyBhZGRpdGlvbmFsIG5vbi11cmwgcGFyYW1ldGVycy4gIEZvciBlYWNoIHBhcmFtZXRlciBiZWluZ1xuICAgKiAgIGNvbmZpZ3VyZWQsIGFkZCBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGtleWVkIHRvIHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqICAgRWFjaCBwYXJhbWV0ZXIgY29uZmlndXJhdGlvbiBvYmplY3QgbWF5IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gKiogdmFsdWUgKiogLSB7b2JqZWN0fGZ1bmN0aW9uPX06IHNwZWNpZmllcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpc1xuICAgKiAgICAgcGFyYW1ldGVyLiAgVGhpcyBpbXBsaWNpdGx5IHNldHMgdGhpcyBwYXJhbWV0ZXIgYXMgb3B0aW9uYWwuXG4gICAqXG4gICAqICAgICBXaGVuIFVJLVJvdXRlciByb3V0ZXMgdG8gYSBzdGF0ZSBhbmQgbm8gdmFsdWUgaXNcbiAgICogICAgIHNwZWNpZmllZCBmb3IgdGhpcyBwYXJhbWV0ZXIgaW4gdGhlIFVSTCBvciB0cmFuc2l0aW9uLCB0aGVcbiAgICogICAgIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuICBJZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sXG4gICAqICAgICBpdCB3aWxsIGJlIGluamVjdGVkIGFuZCBpbnZva2VkLCBhbmQgdGhlIHJldHVybiB2YWx1ZSB1c2VkLlxuICAgKlxuICAgKiAgICAgKk5vdGUqOiBgdW5kZWZpbmVkYCBpcyB0cmVhdGVkIGFzIFwibm8gZGVmYXVsdCB2YWx1ZVwiIHdoaWxlIGBudWxsYFxuICAgKiAgICAgaXMgdHJlYXRlZCBhcyBcInRoZSBkZWZhdWx0IHZhbHVlIGlzIGBudWxsYFwiLlxuICAgKlxuICAgKiAgICAgKlNob3J0aGFuZCo6IElmIHlvdSBvbmx5IG5lZWQgdG8gY29uZmlndXJlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZVxuICAgKiAgICAgcGFyYW1ldGVyLCB5b3UgbWF5IHVzZSBhIHNob3J0aGFuZCBzeW50YXguICAgSW4gdGhlICoqYHBhcmFtc2AqKlxuICAgKiAgICAgbWFwLCBpbnN0ZWFkIG1hcHBpbmcgdGhlIHBhcmFtIG5hbWUgdG8gYSBmdWxsIHBhcmFtZXRlciBjb25maWd1cmF0aW9uXG4gICAqICAgICBvYmplY3QsIHNpbXBseSBzZXQgbWFwIGl0IHRvIHRoZSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSwgZS5nLjpcbiAgICpcbiAgICogPHByZT4vLyBkZWZpbmUgYSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlXG4gICAqIHBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7IHZhbHVlOiBcImRlZmF1bHRWYWx1ZVwiIH1cbiAgICogfVxuICAgKiAvLyBzaG9ydGhhbmQgZGVmYXVsdCB2YWx1ZXNcbiAgICogcGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IFwiZGVmYXVsdFZhbHVlXCIsXG4gICAqICAgICBwYXJhbTI6IFwicGFyYW0yRGVmYXVsdFwiXG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogICAtICoqIGFycmF5ICoqIC0ge2Jvb2xlYW49fTogKihkZWZhdWx0OiBmYWxzZSkqIElmIHRydWUsIHRoZSBwYXJhbSB2YWx1ZSB3aWxsIGJlXG4gICAqICAgICB0cmVhdGVkIGFzIGFuIGFycmF5IG9mIHZhbHVlcy4gIElmIHlvdSBzcGVjaWZpZWQgYSBUeXBlLCB0aGUgdmFsdWUgd2lsbCBiZVxuICAgKiAgICAgdHJlYXRlZCBhcyBhbiBhcnJheSBvZiB0aGUgc3BlY2lmaWVkIFR5cGUuICBOb3RlOiBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzXG4gICAqICAgICBkZWZhdWx0IHRvIGEgc3BlY2lhbCBgXCJhdXRvXCJgIG1vZGUuXG4gICAqXG4gICAqICAgICBGb3IgcXVlcnkgcGFyYW1ldGVycyBpbiBgXCJhdXRvXCJgIG1vZGUsIGlmIG11bHRpcGxlICB2YWx1ZXMgZm9yIGEgc2luZ2xlIHBhcmFtZXRlclxuICAgKiAgICAgYXJlIHByZXNlbnQgaW4gdGhlIFVSTCAoZS5nLjogYC9mb28/YmFyPTEmYmFyPTImYmFyPTNgKSB0aGVuIHRoZSB2YWx1ZXNcbiAgICogICAgIGFyZSBtYXBwZWQgdG8gYW4gYXJyYXkgKGUuZy46IGB7IGZvbzogWyAnMScsICcyJywgJzMnIF0gfWApLiAgSG93ZXZlciwgaWZcbiAgICogICAgIG9ubHkgb25lIHZhbHVlIGlzIHByZXNlbnQgKGUuZy46IGAvZm9vP2Jhcj0xYCkgdGhlbiB0aGUgdmFsdWUgaXMgdHJlYXRlZCBhcyBzaW5nbGVcbiAgICogICAgIHZhbHVlIChlLmcuOiBgeyBmb286ICcxJyB9YCkuXG4gICAqXG4gICAqIDxwcmU+cGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IHsgYXJyYXk6IHRydWUgfVxuICAgKiB9PC9wcmU+XG4gICAqXG4gICAqICAgLSAqKiBzcXVhc2ggKiogLSB7Ym9vbHxzdHJpbmc9fTogYHNxdWFzaGAgY29uZmlndXJlcyBob3cgYSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSBpcyByZXByZXNlbnRlZCBpbiB0aGUgVVJMIHdoZW5cbiAgICogICAgIHRoZSBjdXJyZW50IHBhcmFtZXRlciB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgZGVmYXVsdCB2YWx1ZS4gSWYgYHNxdWFzaGAgaXMgbm90IHNldCwgaXQgdXNlcyB0aGVcbiAgICogICAgIGNvbmZpZ3VyZWQgZGVmYXVsdCBzcXVhc2ggcG9saWN5LlxuICAgKiAgICAgKFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I21ldGhvZHNfZGVmYXVsdFNxdWFzaFBvbGljeSBgZGVmYXVsdFNxdWFzaFBvbGljeSgpYH0pXG4gICAqXG4gICAqICAgVGhlcmUgYXJlIHRocmVlIHNxdWFzaCBzZXR0aW5nczpcbiAgICpcbiAgICogICAgIC0gZmFsc2U6IFRoZSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlIGlzIG5vdCBzcXVhc2hlZC4gIEl0IGlzIGVuY29kZWQgYW5kIGluY2x1ZGVkIGluIHRoZSBVUkxcbiAgICogICAgIC0gdHJ1ZTogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgb21pdHRlZCBmcm9tIHRoZSBVUkwuICBJZiB0aGUgcGFyYW1ldGVyIGlzIHByZWNlZWRlZCBhbmQgZm9sbG93ZWRcbiAgICogICAgICAgYnkgc2xhc2hlcyBpbiB0aGUgc3RhdGUncyBgdXJsYCBkZWNsYXJhdGlvbiwgdGhlbiBvbmUgb2YgdGhvc2Ugc2xhc2hlcyBhcmUgb21pdHRlZC5cbiAgICogICAgICAgVGhpcyBjYW4gYWxsb3cgZm9yIGNsZWFuZXIgbG9va2luZyBVUkxzLlxuICAgKiAgICAgLSBgXCI8YXJiaXRyYXJ5IHN0cmluZz5cImA6IFRoZSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlIGlzIHJlcGxhY2VkIHdpdGggYW4gYXJiaXRyYXJ5IHBsYWNlaG9sZGVyIG9mICB5b3VyIGNob2ljZS5cbiAgICpcbiAgICogPHByZT5wYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMToge1xuICAgKiAgICAgICB2YWx1ZTogXCJkZWZhdWx0SWRcIixcbiAgICogICAgICAgc3F1YXNoOiB0cnVlXG4gICAqIH0gfVxuICAgKiAvLyBzcXVhc2ggXCJkZWZhdWx0VmFsdWVcIiB0byBcIn5cIlxuICAgKiBwYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMToge1xuICAgKiAgICAgICB2YWx1ZTogXCJkZWZhdWx0VmFsdWVcIixcbiAgICogICAgICAgc3F1YXNoOiBcIn5cIlxuICAgKiB9IH1cbiAgICogPC9wcmU+XG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIC8vIFNvbWUgc3RhdGUgbmFtZSBleGFtcGxlc1xuICAgKlxuICAgKiAvLyBzdGF0ZU5hbWUgY2FuIGJlIGEgc2luZ2xlIHRvcC1sZXZlbCBuYW1lIChtdXN0IGJlIHVuaXF1ZSkuXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7fSk7XG4gICAqXG4gICAqIC8vIE9yIGl0IGNhbiBiZSBhIG5lc3RlZCBzdGF0ZSBuYW1lLiBUaGlzIHN0YXRlIGlzIGEgY2hpbGQgb2YgdGhlXG4gICAqIC8vIGFib3ZlIFwiaG9tZVwiIHN0YXRlLlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWUubmV3ZXN0XCIsIHt9KTtcbiAgICpcbiAgICogLy8gTmVzdCBzdGF0ZXMgYXMgZGVlcGx5IGFzIG5lZWRlZC5cbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lLm5ld2VzdC5hYmMueHl6LmluY2VwdGlvblwiLCB7fSk7XG4gICAqXG4gICAqIC8vIHN0YXRlKCkgcmV0dXJucyAkc3RhdGVQcm92aWRlciwgc28geW91IGNhbiBjaGFpbiBzdGF0ZSBkZWNsYXJhdGlvbnMuXG4gICAqICRzdGF0ZVByb3ZpZGVyXG4gICAqICAgLnN0YXRlKFwiaG9tZVwiLCB7fSlcbiAgICogICAuc3RhdGUoXCJhYm91dFwiLCB7fSlcbiAgICogICAuc3RhdGUoXCJjb250YWN0c1wiLCB7fSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKi9cbiAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICBmdW5jdGlvbiBzdGF0ZShuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSBkZWZpbml0aW9uID0gbmFtZTtcbiAgICBlbHNlIGRlZmluaXRpb24ubmFtZSA9IG5hbWU7XG4gICAgcmVnaXN0ZXJTdGF0ZShkZWZpbml0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICpcbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICogQHJlcXVpcmVzICRxXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHZpZXdcbiAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQYXJhbXNcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgKlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gcGFyYW1zIEEgcGFyYW0gb2JqZWN0LCBlLmcuIHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWQpfSwgdGhhdCBcbiAgICogeW91J2QgbGlrZSB0byB0ZXN0IGFnYWluc3QgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlLlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gY3VycmVudCBBIHJlZmVyZW5jZSB0byB0aGUgc3RhdGUncyBjb25maWcgb2JqZWN0LiBIb3dldmVyIFxuICAgKiB5b3UgcGFzc2VkIGl0IGluLiBVc2VmdWwgZm9yIGFjY2Vzc2luZyBjdXN0b20gZGF0YS5cbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHRyYW5zaXRpb24gQ3VycmVudGx5IHBlbmRpbmcgdHJhbnNpdGlvbi4gQSBwcm9taXNlIHRoYXQnbGwgXG4gICAqIHJlc29sdmUgb3IgcmVqZWN0LlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYCRzdGF0ZWAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgcmVwcmVzZW50aW5nIHN0YXRlcyBhcyB3ZWxsIGFzIHRyYW5zaXRpb25pbmdcbiAgICogYmV0d2VlbiB0aGVtLiBJdCBhbHNvIHByb3ZpZGVzIGludGVyZmFjZXMgdG8gYXNrIGZvciBjdXJyZW50IHN0YXRlIG9yIGV2ZW4gc3RhdGVzXG4gICAqIHlvdSdyZSBjb21pbmcgZnJvbS5cbiAgICovXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gICRnZXQuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckcScsICckdmlldycsICckaW5qZWN0b3InLCAnJHJlc29sdmUnLCAnJHN0YXRlUGFyYW1zJywgJyR1cmxSb3V0ZXInLCAnJGxvY2F0aW9uJywgJyR1cmxNYXRjaGVyRmFjdG9yeSddO1xuICBmdW5jdGlvbiAkZ2V0KCAgICRyb290U2NvcGUsICAgJHEsICAgJHZpZXcsICAgJGluamVjdG9yLCAgICRyZXNvbHZlLCAgICRzdGF0ZVBhcmFtcywgICAkdXJsUm91dGVyLCAgICRsb2NhdGlvbiwgICAkdXJsTWF0Y2hlckZhY3RvcnkpIHtcblxuICAgIHZhciBUcmFuc2l0aW9uU3VwZXJzZWRlZEVycm9yID0gbmV3IEVycm9yKCd0cmFuc2l0aW9uIHN1cGVyc2VkZWQnKTtcblxuICAgIHZhciBUcmFuc2l0aW9uU3VwZXJzZWRlZCA9IHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSgkcS5yZWplY3QoVHJhbnNpdGlvblN1cGVyc2VkZWRFcnJvcikpO1xuICAgIHZhciBUcmFuc2l0aW9uUHJldmVudGVkID0gc2lsZW5jZVVuY2F1Z2h0SW5Qcm9taXNlKCRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gcHJldmVudGVkJykpKTtcbiAgICB2YXIgVHJhbnNpdGlvbkFib3J0ZWQgPSBzaWxlbmNlVW5jYXVnaHRJblByb21pc2UoJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBhYm9ydGVkJykpKTtcbiAgICB2YXIgVHJhbnNpdGlvbkZhaWxlZCA9IHNpbGVuY2VVbmNhdWdodEluUHJvbWlzZSgkcS5yZWplY3QobmV3IEVycm9yKCd0cmFuc2l0aW9uIGZhaWxlZCcpKSk7XG5cbiAgICAvLyBIYW5kbGVzIHRoZSBjYXNlIHdoZXJlIGEgc3RhdGUgd2hpY2ggaXMgdGhlIHRhcmdldCBvZiBhIHRyYW5zaXRpb24gaXMgbm90IGZvdW5kLCBhbmQgdGhlIHVzZXJcbiAgICAvLyBjYW4gb3B0aW9uYWxseSByZXRyeSBvciBkZWZlciB0aGUgdHJhbnNpdGlvblxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlZGlyZWN0KHJlZGlyZWN0LCBzdGF0ZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVOb3RGb3VuZFxuICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBGaXJlZCB3aGVuIGEgcmVxdWVzdGVkIHN0YXRlICoqY2Fubm90IGJlIGZvdW5kKiogdXNpbmcgdGhlIHByb3ZpZGVkIHN0YXRlIG5hbWUgZHVyaW5nIHRyYW5zaXRpb24uXG4gICAgICAgKiBUaGUgZXZlbnQgaXMgYnJvYWRjYXN0IGFsbG93aW5nIGFueSBoYW5kbGVycyBhIHNpbmdsZSBjaGFuY2UgdG8gZGVhbCB3aXRoIHRoZSBlcnJvciAodXN1YWxseSBieVxuICAgICAgICogbGF6eS1sb2FkaW5nIHRoZSB1bmZvdW5kIHN0YXRlKS4gQSBzcGVjaWFsIGB1bmZvdW5kU3RhdGVgIG9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGxpc3RlbmVyIGhhbmRsZXIsXG4gICAgICAgKiB5b3UgY2FuIHNlZSBpdHMgdGhyZWUgcHJvcGVydGllcyBpbiB0aGUgZXhhbXBsZS4gWW91IGNhbiB1c2UgYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIHRvIGFib3J0IHRoZVxuICAgICAgICogdHJhbnNpdGlvbiBhbmQgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgZ29gIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhIGAndHJhbnNpdGlvbiBhYm9ydGVkJ2AgdmFsdWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmZvdW5kU3RhdGUgVW5mb3VuZCBTdGF0ZSBpbmZvcm1hdGlvbi4gQ29udGFpbnM6IGB0bywgdG9QYXJhbXMsIG9wdGlvbnNgIHByb3BlcnRpZXMuXG4gICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgQ3VycmVudCBzdGF0ZSBvYmplY3QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBDdXJyZW50IHN0YXRlIHBhcmFtcy5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICpcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiAvLyBzb21ld2hlcmUsIGFzc3VtZSBsYXp5LnN0YXRlIGhhcyBub3QgYmVlbiBkZWZpbmVkXG4gICAgICAgKiAkc3RhdGUuZ28oXCJsYXp5LnN0YXRlXCIsIHthOjEsIGI6Mn0sIHtpbmhlcml0OmZhbHNlfSk7XG4gICAgICAgKlxuICAgICAgICogLy8gc29tZXdoZXJlIGVsc2VcbiAgICAgICAqICRzY29wZS4kb24oJyRzdGF0ZU5vdEZvdW5kJyxcbiAgICAgICAqIGZ1bmN0aW9uKGV2ZW50LCB1bmZvdW5kU3RhdGUsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcyl7XG4gICAgICAgKiAgICAgY29uc29sZS5sb2codW5mb3VuZFN0YXRlLnRvKTsgLy8gXCJsYXp5LnN0YXRlXCJcbiAgICAgICAqICAgICBjb25zb2xlLmxvZyh1bmZvdW5kU3RhdGUudG9QYXJhbXMpOyAvLyB7YToxLCBiOjJ9XG4gICAgICAgKiAgICAgY29uc29sZS5sb2codW5mb3VuZFN0YXRlLm9wdGlvbnMpOyAvLyB7aW5oZXJpdDpmYWxzZX0gKyBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAqIH0pXG4gICAgICAgKiA8L3ByZT5cbiAgICAgICAqL1xuICAgICAgdmFyIGV2dCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlTm90Rm91bmQnLCByZWRpcmVjdCwgc3RhdGUsIHBhcmFtcyk7XG5cbiAgICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gVHJhbnNpdGlvbkFib3J0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZ0LnJldHJ5KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBBbGxvdyB0aGUgaGFuZGxlciB0byByZXR1cm4gYSBwcm9taXNlIHRvIGRlZmVyIHN0YXRlIGxvb2t1cCByZXRyeVxuICAgICAgaWYgKG9wdGlvbnMuJHJldHJ5KSB7XG4gICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiBUcmFuc2l0aW9uRmFpbGVkO1xuICAgICAgfVxuICAgICAgdmFyIHJldHJ5VHJhbnNpdGlvbiA9ICRzdGF0ZS50cmFuc2l0aW9uID0gJHEud2hlbihldnQucmV0cnkpO1xuXG4gICAgICByZXRyeVRyYW5zaXRpb24udGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJldHJ5VHJhbnNpdGlvbiAhPT0gJHN0YXRlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZUNhbmNlbCcsIHJlZGlyZWN0LnRvLCByZWRpcmVjdC50b1BhcmFtcywgc3RhdGUsIHBhcmFtcyk7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuICAgICAgICB9XG4gICAgICAgIHJlZGlyZWN0Lm9wdGlvbnMuJHJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8ocmVkaXJlY3QudG8sIHJlZGlyZWN0LnRvUGFyYW1zLCByZWRpcmVjdC5vcHRpb25zKTtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNpdGlvbkFib3J0ZWQ7XG4gICAgICB9KTtcbiAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG5cbiAgICAgIHJldHVybiByZXRyeVRyYW5zaXRpb247XG4gICAgfVxuXG4gICAgcm9vdC5sb2NhbHMgPSB7IHJlc29sdmU6IG51bGwsIGdsb2JhbHM6IHsgJHN0YXRlUGFyYW1zOiB7fSB9IH07XG5cbiAgICAkc3RhdGUgPSB7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgY3VycmVudDogcm9vdC5zZWxmLFxuICAgICAgJGN1cnJlbnQ6IHJvb3QsXG4gICAgICB0cmFuc2l0aW9uOiBudWxsXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjcmVsb2FkXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgbWV0aG9kIHRoYXQgZm9yY2UgcmVsb2FkcyB0aGUgY3VycmVudCBzdGF0ZS4gQWxsIHJlc29sdmVzIGFyZSByZS1yZXNvbHZlZCxcbiAgICAgKiBjb250cm9sbGVycyByZWluc3RhbnRpYXRlZCwgYW5kIGV2ZW50cyByZS1maXJlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiB2YXIgYXBwIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUucmVsb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgKiAgICAgJHN0YXRlLnJlbG9hZCgpO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogYHJlbG9hZCgpYCBpcyBqdXN0IGFuIGFsaWFzIGZvcjpcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsICRzdGF0ZVBhcmFtcywgeyBcbiAgICAgKiAgIHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIG5vdGlmeTogdHJ1ZVxuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fG9iamVjdD19IHN0YXRlIC0gQSBzdGF0ZSBuYW1lIG9yIGEgc3RhdGUgb2JqZWN0LCB3aGljaCBpcyB0aGUgcm9vdCBvZiB0aGUgcmVzb2x2ZXMgdG8gYmUgcmUtcmVzb2x2ZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIC8vYXNzdW1pbmcgYXBwIGFwcGxpY2F0aW9uIGNvbnNpc3RzIG9mIDMgc3RhdGVzOiAnY29udGFjdHMnLCAnY29udGFjdHMuZGV0YWlsJywgJ2NvbnRhY3RzLmRldGFpbC5pdGVtJyBcbiAgICAgKiAvL2FuZCBjdXJyZW50IHN0YXRlIGlzICdjb250YWN0cy5kZXRhaWwuaXRlbSdcbiAgICAgKiB2YXIgYXBwIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUucmVsb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgKiAgICAgLy93aWxsIHJlbG9hZCAnY29udGFjdC5kZXRhaWwnIGFuZCAnY29udGFjdC5kZXRhaWwuaXRlbScgc3RhdGVzXG4gICAgICogICAgICRzdGF0ZS5yZWxvYWQoJ2NvbnRhY3QuZGV0YWlsJyk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBgcmVsb2FkKClgIGlzIGp1c3QgYW4gYWxpYXMgZm9yOlxuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLnRyYW5zaXRpb25Ubygkc3RhdGUuY3VycmVudCwgJHN0YXRlUGFyYW1zLCB7IFxuICAgICAqICAgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiBmYWxzZSwgbm90aWZ5OiB0cnVlXG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG5cbiAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIG5ldyB0cmFuc2l0aW9uLiBTZWVcbiAgICAgKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2dvICRzdGF0ZS5nb30uXG4gICAgICovXG4gICAgJHN0YXRlLnJlbG9hZCA9IGZ1bmN0aW9uIHJlbG9hZChzdGF0ZSkge1xuICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsICRzdGF0ZVBhcmFtcywgeyByZWxvYWQ6IHN0YXRlIHx8IHRydWUsIGluaGVyaXQ6IGZhbHNlLCBub3RpZnk6IHRydWV9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNnb1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHRyYW5zaXRpb25pbmcgdG8gYSBuZXcgc3RhdGUuIGAkc3RhdGUuZ29gIGNhbGxzIFxuICAgICAqIGAkc3RhdGUudHJhbnNpdGlvblRvYCBpbnRlcm5hbGx5IGJ1dCBhdXRvbWF0aWNhbGx5IHNldHMgb3B0aW9ucyB0byBcbiAgICAgKiBgeyBsb2NhdGlvbjogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCwgbm90aWZ5OiB0cnVlIH1gLiBcbiAgICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gZWFzaWx5IHVzZSBhbiBhYnNvbHV0ZSBvciByZWxhdGl2ZSB0byBwYXRoIGFuZCBzcGVjaWZ5IFxuICAgICAqIG9ubHkgdGhlIHBhcmFtZXRlcnMgeW91J2QgbGlrZSB0byB1cGRhdGUgKHdoaWxlIGxldHRpbmcgdW5zcGVjaWZpZWQgcGFyYW1ldGVycyBcbiAgICAgKiBpbmhlcml0IGZyb20gdGhlIGN1cnJlbnRseSBhY3RpdmUgYW5jZXN0b3Igc3RhdGVzKS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pO1xuICAgICAqXG4gICAgICogYXBwLmNvbnRyb2xsZXIoJ2N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUpIHtcbiAgICAgKiAgICRzY29wZS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgJHN0YXRlLmdvKCdjb250YWN0LmRldGFpbCcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKiA8aW1nIHNyYz0nLi4vbmdkb2NfYXNzZXRzL1N0YXRlR29FeGFtcGxlcy5wbmcnLz5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0byBBYnNvbHV0ZSBzdGF0ZSBuYW1lIG9yIHJlbGF0aXZlIHN0YXRlIHBhdGguIFNvbWUgZXhhbXBsZXM6XG4gICAgICpcbiAgICAgKiAtIGAkc3RhdGUuZ28oJ2NvbnRhY3QuZGV0YWlsJylgIC0gd2lsbCBnbyB0byB0aGUgYGNvbnRhY3QuZGV0YWlsYCBzdGF0ZVxuICAgICAqIC0gYCRzdGF0ZS5nbygnXicpYCAtIHdpbGwgZ28gdG8gYSBwYXJlbnQgc3RhdGVcbiAgICAgKiAtIGAkc3RhdGUuZ28oJ14uc2libGluZycpYCAtIHdpbGwgZ28gdG8gYSBzaWJsaW5nIHN0YXRlXG4gICAgICogLSBgJHN0YXRlLmdvKCcuY2hpbGQuZ3JhbmRjaGlsZCcpYCAtIHdpbGwgZ28gdG8gZ3JhbmRjaGlsZCBzdGF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBtYXAgb2YgdGhlIHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIHN0YXRlLCBcbiAgICAgKiB3aWxsIHBvcHVsYXRlICRzdGF0ZVBhcmFtcy4gQW55IHBhcmFtZXRlcnMgdGhhdCBhcmUgbm90IHNwZWNpZmllZCB3aWxsIGJlIGluaGVyaXRlZCBmcm9tIGN1cnJlbnRseSBcbiAgICAgKiBkZWZpbmVkIHBhcmFtZXRlcnMuIE9ubHkgcGFyYW1ldGVycyBzcGVjaWZpZWQgaW4gdGhlIHN0YXRlIGRlZmluaXRpb24gY2FuIGJlIG92ZXJyaWRkZW4sIG5ldyBcbiAgICAgKiBwYXJhbWV0ZXJzIHdpbGwgYmUgaWdub3JlZC4gVGhpcyBhbGxvd3MsIGZvciBleGFtcGxlLCBnb2luZyB0byBhIHNpYmxpbmcgc3RhdGUgdGhhdCBzaGFyZXMgcGFyYW1ldGVyc1xuICAgICAqIHNwZWNpZmllZCBpbiBhIHBhcmVudCBzdGF0ZS4gUGFyYW1ldGVyIGluaGVyaXRhbmNlIG9ubHkgd29ya3MgYmV0d2VlbiBjb21tb24gYW5jZXN0b3Igc3RhdGVzLCBJLmUuXG4gICAgICogdHJhbnNpdGlvbmluZyB0byBhIHNpYmxpbmcgd2lsbCBnZXQgeW91IHRoZSBwYXJhbWV0ZXJzIGZvciBhbGwgcGFyZW50cywgdHJhbnNpdGlvbmluZyB0byBhIGNoaWxkXG4gICAgICogd2lsbCBnZXQgeW91IGFsbCBjdXJyZW50IHBhcmFtZXRlcnMsIGV0Yy5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipgbG9jYXRpb25gKiogLSB7Ym9vbGVhbj10cnVlfHN0cmluZz19IC0gSWYgYHRydWVgIHdpbGwgdXBkYXRlIHRoZSB1cmwgaW4gdGhlIGxvY2F0aW9uIGJhciwgaWYgYGZhbHNlYFxuICAgICAqICAgIHdpbGwgbm90LiBJZiBzdHJpbmcsIG11c3QgYmUgYFwicmVwbGFjZVwiYCwgd2hpY2ggd2lsbCB1cGRhdGUgdXJsIGFuZCBhbHNvIHJlcGxhY2UgbGFzdCBoaXN0b3J5IHJlY29yZC5cbiAgICAgKiAtICoqYGluaGVyaXRgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgaW5oZXJpdCB1cmwgcGFyYW1ldGVycyBmcm9tIGN1cnJlbnQgdXJsLlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7b2JqZWN0PSRzdGF0ZS4kY3VycmVudH0sIFdoZW4gdHJhbnNpdGlvbmluZyB3aXRoIHJlbGF0aXZlIHBhdGggKGUuZyAnXicpLCBcbiAgICAgKiAgICBkZWZpbmVzIHdoaWNoIHN0YXRlIHRvIGJlIHJlbGF0aXZlIGZyb20uXG4gICAgICogLSAqKmBub3RpZnlgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgYnJvYWRjYXN0ICRzdGF0ZUNoYW5nZVN0YXJ0IGFuZCAkc3RhdGVDaGFuZ2VTdWNjZXNzIGV2ZW50cy5cbiAgICAgKiAtICoqYHJlbG9hZGAqKiAodjAuMi41KSAtIHtib29sZWFuPWZhbHNlfHN0cmluZ3xvYmplY3R9LCBJZiBgdHJ1ZWAgd2lsbCBmb3JjZSB0cmFuc2l0aW9uIGV2ZW4gaWYgbm8gc3RhdGUgb3IgcGFyYW1zXG4gICAgICogICAgaGF2ZSBjaGFuZ2VkLiAgSXQgd2lsbCByZWxvYWQgdGhlIHJlc29sdmVzIGFuZCB2aWV3cyBvZiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgcGFyZW50IHN0YXRlcy5cbiAgICAgKiAgICBJZiBgcmVsb2FkYCBpcyBhIHN0cmluZyAob3Igc3RhdGUgb2JqZWN0KSwgdGhlIHN0YXRlIG9iamVjdCBpcyBmZXRjaGVkIChieSBuYW1lLCBvciBvYmplY3QgcmVmZXJlbmNlKTsgYW5kIFxcXG4gICAgICogICAgdGhlIHRyYW5zaXRpb24gcmVsb2FkcyB0aGUgcmVzb2x2ZXMgYW5kIHZpZXdzIGZvciB0aGF0IG1hdGNoZWQgc3RhdGUsIGFuZCBhbGwgaXRzIGNoaWxkcmVuIHN0YXRlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBQb3NzaWJsZSBzdWNjZXNzIHZhbHVlczpcbiAgICAgKlxuICAgICAqIC0gJHN0YXRlLmN1cnJlbnRcbiAgICAgKlxuICAgICAqIDxici8+UG9zc2libGUgcmVqZWN0aW9uIHZhbHVlczpcbiAgICAgKlxuICAgICAqIC0gJ3RyYW5zaXRpb24gc3VwZXJzZWRlZCcgLSB3aGVuIGEgbmV3ZXIgdHJhbnNpdGlvbiBoYXMgYmVlbiBzdGFydGVkIGFmdGVyIHRoaXMgb25lXG4gICAgICogLSAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnIC0gd2hlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgaGFzIGJlZW4gY2FsbGVkIGluIGEgYCRzdGF0ZUNoYW5nZVN0YXJ0YCBsaXN0ZW5lclxuICAgICAqIC0gJ3RyYW5zaXRpb24gYWJvcnRlZCcgLSB3aGVuIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBoYXMgYmVlbiBjYWxsZWQgaW4gYSBgJHN0YXRlTm90Rm91bmRgIGxpc3RlbmVyIG9yXG4gICAgICogICB3aGVuIGEgYCRzdGF0ZU5vdEZvdW5kYCBgZXZlbnQucmV0cnlgIHByb21pc2UgZXJyb3JzLlxuICAgICAqIC0gJ3RyYW5zaXRpb24gZmFpbGVkJyAtIHdoZW4gYSBzdGF0ZSBoYXMgYmVlbiB1bnN1Y2Nlc3NmdWxseSBmb3VuZCBhZnRlciAyIHRyaWVzLlxuICAgICAqIC0gKnJlc29sdmUgZXJyb3IqIC0gd2hlbiBhbiBlcnJvciBoYXMgb2NjdXJyZWQgd2l0aCBhIGByZXNvbHZlYFxuICAgICAqXG4gICAgICovXG4gICAgJHN0YXRlLmdvID0gZnVuY3Rpb24gZ28odG8sIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8odG8sIHBhcmFtcywgZXh0ZW5kKHsgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCB9LCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjdHJhbnNpdGlvblRvXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIExvdy1sZXZlbCBtZXRob2QgZm9yIHRyYW5zaXRpb25pbmcgdG8gYSBuZXcgc3RhdGUuIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfVxuICAgICAqIHVzZXMgYHRyYW5zaXRpb25Ub2AgaW50ZXJuYWxseS4gYCRzdGF0ZS5nb2AgaXMgcmVjb21tZW5kZWQgaW4gbW9zdCBzaXR1YXRpb25zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSk7XG4gICAgICpcbiAgICAgKiBhcHAuY29udHJvbGxlcignY3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSkge1xuICAgICAqICAgJHNjb3BlLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCdjb250YWN0LmRldGFpbCcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0byBTdGF0ZSBuYW1lLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gdG9QYXJhbXMgQSBtYXAgb2YgdGhlIHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIHN0YXRlLFxuICAgICAqIHdpbGwgcG9wdWxhdGUgJHN0YXRlUGFyYW1zLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb2NhdGlvbmAqKiAtIHtib29sZWFuPXRydWV8c3RyaW5nPX0gLSBJZiBgdHJ1ZWAgd2lsbCB1cGRhdGUgdGhlIHVybCBpbiB0aGUgbG9jYXRpb24gYmFyLCBpZiBgZmFsc2VgXG4gICAgICogICAgd2lsbCBub3QuIElmIHN0cmluZywgbXVzdCBiZSBgXCJyZXBsYWNlXCJgLCB3aGljaCB3aWxsIHVwZGF0ZSB1cmwgYW5kIGFsc28gcmVwbGFjZSBsYXN0IGhpc3RvcnkgcmVjb3JkLlxuICAgICAqIC0gKipgaW5oZXJpdGAqKiAtIHtib29sZWFuPWZhbHNlfSwgSWYgYHRydWVgIHdpbGwgaW5oZXJpdCB1cmwgcGFyYW1ldGVycyBmcm9tIGN1cnJlbnQgdXJsLlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7b2JqZWN0PX0sIFdoZW4gdHJhbnNpdGlvbmluZyB3aXRoIHJlbGF0aXZlIHBhdGggKGUuZyAnXicpLCBcbiAgICAgKiAgICBkZWZpbmVzIHdoaWNoIHN0YXRlIHRvIGJlIHJlbGF0aXZlIGZyb20uXG4gICAgICogLSAqKmBub3RpZnlgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgYnJvYWRjYXN0ICRzdGF0ZUNoYW5nZVN0YXJ0IGFuZCAkc3RhdGVDaGFuZ2VTdWNjZXNzIGV2ZW50cy5cbiAgICAgKiAtICoqYHJlbG9hZGAqKiAodjAuMi41KSAtIHtib29sZWFuPWZhbHNlfHN0cmluZz18b2JqZWN0PX0sIElmIGB0cnVlYCB3aWxsIGZvcmNlIHRyYW5zaXRpb24gZXZlbiBpZiB0aGUgc3RhdGUgb3IgcGFyYW1zIFxuICAgICAqICAgIGhhdmUgbm90IGNoYW5nZWQsIGFrYSBhIHJlbG9hZCBvZiB0aGUgc2FtZSBzdGF0ZS4gSXQgZGlmZmVycyBmcm9tIHJlbG9hZE9uU2VhcmNoIGJlY2F1c2UgeW91J2RcbiAgICAgKiAgICB1c2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGZvcmNlIGEgcmVsb2FkIHdoZW4gKmV2ZXJ5dGhpbmcqIGlzIHRoZSBzYW1lLCBpbmNsdWRpbmcgc2VhcmNoIHBhcmFtcy5cbiAgICAgKiAgICBpZiBTdHJpbmcsIHRoZW4gd2lsbCByZWxvYWQgdGhlIHN0YXRlIHdpdGggdGhlIG5hbWUgZ2l2ZW4gaW4gcmVsb2FkLCBhbmQgYW55IGNoaWxkcmVuLlxuICAgICAqICAgIGlmIE9iamVjdCwgdGhlbiBhIHN0YXRlT2JqIGlzIGV4cGVjdGVkLCB3aWxsIHJlbG9hZCB0aGUgc3RhdGUgZm91bmQgaW4gc3RhdGVPYmosIGFuZCBhbnkgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIG5ldyB0cmFuc2l0aW9uLiBTZWVcbiAgICAgKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2dvICRzdGF0ZS5nb30uXG4gICAgICovXG4gICAgJHN0YXRlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Ubyh0bywgdG9QYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHRvUGFyYW1zID0gdG9QYXJhbXMgfHwge307XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgbG9jYXRpb246IHRydWUsIGluaGVyaXQ6IGZhbHNlLCByZWxhdGl2ZTogbnVsbCwgbm90aWZ5OiB0cnVlLCByZWxvYWQ6IGZhbHNlLCAkcmV0cnk6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICAgICAgdmFyIGZyb20gPSAkc3RhdGUuJGN1cnJlbnQsIGZyb21QYXJhbXMgPSAkc3RhdGUucGFyYW1zLCBmcm9tUGF0aCA9IGZyb20ucGF0aDtcbiAgICAgIHZhciBldnQsIHRvU3RhdGUgPSBmaW5kU3RhdGUodG8sIG9wdGlvbnMucmVsYXRpdmUpO1xuXG4gICAgICAvLyBTdG9yZSB0aGUgaGFzaCBwYXJhbSBmb3IgbGF0ZXIgKHNpbmNlIGl0IHdpbGwgYmUgc3RyaXBwZWQgb3V0IGJ5IHZhcmlvdXMgbWV0aG9kcylcbiAgICAgIHZhciBoYXNoID0gdG9QYXJhbXNbJyMnXTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQodG9TdGF0ZSkpIHtcbiAgICAgICAgdmFyIHJlZGlyZWN0ID0geyB0bzogdG8sIHRvUGFyYW1zOiB0b1BhcmFtcywgb3B0aW9uczogb3B0aW9ucyB9O1xuICAgICAgICB2YXIgcmVkaXJlY3RSZXN1bHQgPSBoYW5kbGVSZWRpcmVjdChyZWRpcmVjdCwgZnJvbS5zZWxmLCBmcm9tUGFyYW1zLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAocmVkaXJlY3RSZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVkaXJlY3RSZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHdheXMgcmV0cnkgb25jZSBpZiB0aGUgJHN0YXRlTm90Rm91bmQgd2FzIG5vdCBwcmV2ZW50ZWRcbiAgICAgICAgLy8gKGhhbmRsZXMgZWl0aGVyIHJlZGlyZWN0IGNoYW5nZWQgb3Igc3RhdGUgbGF6eS1kZWZpbml0aW9uKVxuICAgICAgICB0byA9IHJlZGlyZWN0LnRvO1xuICAgICAgICB0b1BhcmFtcyA9IHJlZGlyZWN0LnRvUGFyYW1zO1xuICAgICAgICBvcHRpb25zID0gcmVkaXJlY3Qub3B0aW9ucztcbiAgICAgICAgdG9TdGF0ZSA9IGZpbmRTdGF0ZSh0bywgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgICAgaWYgKCFpc0RlZmluZWQodG9TdGF0ZSkpIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMucmVsYXRpdmUpIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggc3RhdGUgJ1wiICsgdG8gKyBcIidcIik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHJlc29sdmUgJ1wiICsgdG8gKyBcIicgZnJvbSBzdGF0ZSAnXCIgKyBvcHRpb25zLnJlbGF0aXZlICsgXCInXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9TdGF0ZVthYnN0cmFjdEtleV0pIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB0cmFuc2l0aW9uIHRvIGFic3RyYWN0IHN0YXRlICdcIiArIHRvICsgXCInXCIpO1xuICAgICAgaWYgKG9wdGlvbnMuaW5oZXJpdCkgdG9QYXJhbXMgPSBpbmhlcml0UGFyYW1zKCRzdGF0ZVBhcmFtcywgdG9QYXJhbXMgfHwge30sICRzdGF0ZS4kY3VycmVudCwgdG9TdGF0ZSk7XG4gICAgICBpZiAoIXRvU3RhdGUucGFyYW1zLiQkdmFsaWRhdGVzKHRvUGFyYW1zKSkgcmV0dXJuIFRyYW5zaXRpb25GYWlsZWQ7XG5cbiAgICAgIHRvUGFyYW1zID0gdG9TdGF0ZS5wYXJhbXMuJCR2YWx1ZXModG9QYXJhbXMpO1xuICAgICAgdG8gPSB0b1N0YXRlO1xuXG4gICAgICB2YXIgdG9QYXRoID0gdG8ucGF0aDtcblxuICAgICAgLy8gU3RhcnRpbmcgZnJvbSB0aGUgcm9vdCBvZiB0aGUgcGF0aCwga2VlcCBhbGwgbGV2ZWxzIHRoYXQgaGF2ZW4ndCBjaGFuZ2VkXG4gICAgICB2YXIga2VlcCA9IDAsIHN0YXRlID0gdG9QYXRoW2tlZXBdLCBsb2NhbHMgPSByb290LmxvY2FscywgdG9Mb2NhbHMgPSBbXTtcblxuICAgICAgaWYgKCFvcHRpb25zLnJlbG9hZCkge1xuICAgICAgICB3aGlsZSAoc3RhdGUgJiYgc3RhdGUgPT09IGZyb21QYXRoW2tlZXBdICYmIHN0YXRlLm93blBhcmFtcy4kJGVxdWFscyh0b1BhcmFtcywgZnJvbVBhcmFtcykpIHtcbiAgICAgICAgICBsb2NhbHMgPSB0b0xvY2Fsc1trZWVwXSA9IHN0YXRlLmxvY2FscztcbiAgICAgICAgICBrZWVwKys7XG4gICAgICAgICAgc3RhdGUgPSB0b1BhdGhba2VlcF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcob3B0aW9ucy5yZWxvYWQpIHx8IGlzT2JqZWN0KG9wdGlvbnMucmVsb2FkKSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucy5yZWxvYWQpICYmICFvcHRpb25zLnJlbG9hZC5uYW1lKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlbG9hZCBzdGF0ZSBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHJlbG9hZFN0YXRlID0gb3B0aW9ucy5yZWxvYWQgPT09IHRydWUgPyBmcm9tUGF0aFswXSA6IGZpbmRTdGF0ZShvcHRpb25zLnJlbG9hZCk7XG4gICAgICAgIGlmIChvcHRpb25zLnJlbG9hZCAmJiAhcmVsb2FkU3RhdGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIHJlbG9hZCBzdGF0ZSAnXCIgKyAoaXNTdHJpbmcob3B0aW9ucy5yZWxvYWQpID8gb3B0aW9ucy5yZWxvYWQgOiBvcHRpb25zLnJlbG9hZC5uYW1lKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChzdGF0ZSAmJiBzdGF0ZSA9PT0gZnJvbVBhdGhba2VlcF0gJiYgc3RhdGUgIT09IHJlbG9hZFN0YXRlKSB7XG4gICAgICAgICAgbG9jYWxzID0gdG9Mb2NhbHNba2VlcF0gPSBzdGF0ZS5sb2NhbHM7XG4gICAgICAgICAga2VlcCsrO1xuICAgICAgICAgIHN0YXRlID0gdG9QYXRoW2tlZXBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlJ3JlIGdvaW5nIHRvIHRoZSBzYW1lIHN0YXRlIGFuZCBhbGwgbG9jYWxzIGFyZSBrZXB0LCB3ZSd2ZSBnb3Qgbm90aGluZyB0byBkby5cbiAgICAgIC8vIEJ1dCBjbGVhciAndHJhbnNpdGlvbicsIGFzIHdlIHN0aWxsIHdhbnQgdG8gY2FuY2VsIGFueSBvdGhlciBwZW5kaW5nIHRyYW5zaXRpb25zLlxuICAgICAgLy8gVE9ETzogV2UgbWF5IG5vdCB3YW50IHRvIGJ1bXAgJ3RyYW5zaXRpb24nIGlmIHdlJ3JlIGNhbGxlZCBmcm9tIGEgbG9jYXRpb24gY2hhbmdlXG4gICAgICAvLyB0aGF0IHdlJ3ZlIGluaXRpYXRlZCBvdXJzZWx2ZXMsIGJlY2F1c2Ugd2UgbWlnaHQgYWNjaWRlbnRhbGx5IGFib3J0IGEgbGVnaXRpbWF0ZVxuICAgICAgLy8gdHJhbnNpdGlvbiBpbml0aWF0ZWQgZnJvbSBjb2RlP1xuICAgICAgaWYgKHNob3VsZFNraXBSZWxvYWQodG8sIHRvUGFyYW1zLCBmcm9tLCBmcm9tUGFyYW1zLCBsb2NhbHMsIG9wdGlvbnMpKSB7XG4gICAgICAgIGlmIChoYXNoKSB0b1BhcmFtc1snIyddID0gaGFzaDtcbiAgICAgICAgJHN0YXRlLnBhcmFtcyA9IHRvUGFyYW1zO1xuICAgICAgICBjb3B5KCRzdGF0ZS5wYXJhbXMsICRzdGF0ZVBhcmFtcyk7XG4gICAgICAgIGNvcHkoZmlsdGVyQnlLZXlzKHRvLnBhcmFtcy4kJGtleXMoKSwgJHN0YXRlUGFyYW1zKSwgdG8ubG9jYWxzLmdsb2JhbHMuJHN0YXRlUGFyYW1zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYXRpb24gJiYgdG8ubmF2aWdhYmxlICYmIHRvLm5hdmlnYWJsZS51cmwpIHtcbiAgICAgICAgICAkdXJsUm91dGVyLnB1c2godG8ubmF2aWdhYmxlLnVybCwgdG9QYXJhbXMsIHtcbiAgICAgICAgICAgICQkYXZvaWRSZXN5bmM6IHRydWUsIHJlcGxhY2U6IG9wdGlvbnMubG9jYXRpb24gPT09ICdyZXBsYWNlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgICRzdGF0ZS50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICRxLndoZW4oJHN0YXRlLmN1cnJlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaWx0ZXIgcGFyYW1ldGVycyBiZWZvcmUgd2UgcGFzcyB0aGVtIHRvIGV2ZW50IGhhbmRsZXJzIGV0Yy5cbiAgICAgIHRvUGFyYW1zID0gZmlsdGVyQnlLZXlzKHRvLnBhcmFtcy4kJGtleXMoKSwgdG9QYXJhbXMgfHwge30pO1xuICAgICAgXG4gICAgICAvLyBSZS1hZGQgdGhlIHNhdmVkIGhhc2ggYmVmb3JlIHdlIHN0YXJ0IHJldHVybmluZyB0aGluZ3Mgb3IgYnJvYWRjYXN0aW5nICRzdGF0ZUNoYW5nZVN0YXJ0XG4gICAgICBpZiAoaGFzaCkgdG9QYXJhbXNbJyMnXSA9IGhhc2g7XG4gICAgICBcbiAgICAgIC8vIEJyb2FkY2FzdCBzdGFydCBldmVudCBhbmQgY2FuY2VsIHRoZSB0cmFuc2l0aW9uIGlmIHJlcXVlc3RlZFxuICAgICAgaWYgKG9wdGlvbnMubm90aWZ5KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVDaGFuZ2VTdGFydFxuICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIHN0YXRlIHRyYW5zaXRpb24gKipiZWdpbnMqKi4gWW91IGNhbiB1c2UgYGV2ZW50LnByZXZlbnREZWZhdWx0KClgXG4gICAgICAgICAqIHRvIHByZXZlbnQgdGhlIHRyYW5zaXRpb24gZnJvbSBoYXBwZW5pbmcgYW5kIHRoZW4gdGhlIHRyYW5zaXRpb24gcHJvbWlzZSB3aWxsIGJlXG4gICAgICAgICAqIHJlamVjdGVkIHdpdGggYSBgJ3RyYW5zaXRpb24gcHJldmVudGVkJ2AgdmFsdWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IHRvU3RhdGUgVGhlIHN0YXRlIGJlaW5nIHRyYW5zaXRpb25lZCB0by5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRvUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGB0b1N0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gZnJvbVN0YXRlIFRoZSBjdXJyZW50IHN0YXRlLCBwcmUtdHJhbnNpdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZyb21QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYGZyb21TdGF0ZWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIDxwcmU+XG4gICAgICAgICAqICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsXG4gICAgICAgICAqIGZ1bmN0aW9uKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKXtcbiAgICAgICAgICogICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAqICAgICAvLyB0cmFuc2l0aW9uVG8oKSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aFxuICAgICAgICAgKiAgICAgLy8gYSAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnIGVycm9yXG4gICAgICAgICAqIH0pXG4gICAgICAgICAqIDwvcHJlPlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlU3RhcnQnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zLCBvcHRpb25zKS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VDYW5jZWwnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zKTtcbiAgICAgICAgICAvL0Rvbid0IHVwZGF0ZSBhbmQgcmVzeW5jIHVybCBpZiB0aGVyZSdzIGJlZW4gYSBuZXcgdHJhbnNpdGlvbiBzdGFydGVkLiBzZWUgaXNzdWUgIzIyMzgsICM2MDBcbiAgICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gPT0gbnVsbCkgJHVybFJvdXRlci51cGRhdGUoKTtcbiAgICAgICAgICByZXR1cm4gVHJhbnNpdGlvblByZXZlbnRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZXNvbHZlIGxvY2FscyBmb3IgdGhlIHJlbWFpbmluZyBzdGF0ZXMsIGJ1dCBkb24ndCB1cGRhdGUgYW55IGdsb2JhbCBzdGF0ZSBqdXN0XG4gICAgICAvLyB5ZXQgLS0gaWYgYW55dGhpbmcgZmFpbHMgdG8gcmVzb2x2ZSB0aGUgY3VycmVudCBzdGF0ZSBuZWVkcyB0byByZW1haW4gdW50b3VjaGVkLlxuICAgICAgLy8gV2UgYWxzbyBzZXQgdXAgYW4gaW5oZXJpdGFuY2UgY2hhaW4gZm9yIHRoZSBsb2NhbHMgaGVyZS4gVGhpcyBhbGxvd3MgdGhlIHZpZXcgZGlyZWN0aXZlXG4gICAgICAvLyB0byBxdWlja2x5IGxvb2sgdXAgdGhlIGNvcnJlY3QgZGVmaW5pdGlvbiBmb3IgZWFjaCB2aWV3IGluIHRoZSBjdXJyZW50IHN0YXRlLiBFdmVuXG4gICAgICAvLyB0aG91Z2ggd2UgY3JlYXRlIHRoZSBsb2NhbHMgb2JqZWN0IGl0c2VsZiBvdXRzaWRlIHJlc29sdmVTdGF0ZSgpLCBpdCBpcyBpbml0aWFsbHlcbiAgICAgIC8vIGVtcHR5IGFuZCBnZXRzIGZpbGxlZCBhc3luY2hyb25vdXNseS4gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHRoZSBwcm9taXNlIGZvciB0aGVcbiAgICAgIC8vIChmdWxseSByZXNvbHZlZCkgY3VycmVudCBsb2NhbHMsIGFuZCBwYXNzIHRoaXMgZG93biB0aGUgY2hhaW4uXG4gICAgICB2YXIgcmVzb2x2ZWQgPSAkcS53aGVuKGxvY2Fscyk7XG5cbiAgICAgIGZvciAodmFyIGwgPSBrZWVwOyBsIDwgdG9QYXRoLmxlbmd0aDsgbCsrLCBzdGF0ZSA9IHRvUGF0aFtsXSkge1xuICAgICAgICBsb2NhbHMgPSB0b0xvY2Fsc1tsXSA9IGluaGVyaXQobG9jYWxzKTtcbiAgICAgICAgcmVzb2x2ZWQgPSByZXNvbHZlU3RhdGUoc3RhdGUsIHRvUGFyYW1zLCBzdGF0ZSA9PT0gdG8sIHJlc29sdmVkLCBsb2NhbHMsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmNlIGV2ZXJ5dGhpbmcgaXMgcmVzb2x2ZWQsIHdlIGFyZSByZWFkeSB0byBwZXJmb3JtIHRoZSBhY3R1YWwgdHJhbnNpdGlvblxuICAgICAgLy8gYW5kIHJldHVybiBhIHByb21pc2UgZm9yIHRoZSBuZXcgc3RhdGUuIFdlIGFsc28ga2VlcCB0cmFjayBvZiB3aGF0IHRoZVxuICAgICAgLy8gY3VycmVudCBwcm9taXNlIGlzLCBzbyB0aGF0IHdlIGNhbiBkZXRlY3Qgb3ZlcmxhcHBpbmcgdHJhbnNpdGlvbnMgYW5kXG4gICAgICAvLyBrZWVwIG9ubHkgdGhlIG91dGNvbWUgb2YgdGhlIGxhc3QgdHJhbnNpdGlvbi5cbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJHN0YXRlLnRyYW5zaXRpb24gPSByZXNvbHZlZC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGwsIGVudGVyaW5nLCBleGl0aW5nO1xuXG4gICAgICAgIGlmICgkc3RhdGUudHJhbnNpdGlvbiAhPT0gdHJhbnNpdGlvbikge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlQ2FuY2VsJywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcyk7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhpdCAnZnJvbScgc3RhdGVzIG5vdCBrZXB0XG4gICAgICAgIGZvciAobCA9IGZyb21QYXRoLmxlbmd0aCAtIDE7IGwgPj0ga2VlcDsgbC0tKSB7XG4gICAgICAgICAgZXhpdGluZyA9IGZyb21QYXRoW2xdO1xuICAgICAgICAgIGlmIChleGl0aW5nLnNlbGYub25FeGl0KSB7XG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGV4aXRpbmcuc2VsZi5vbkV4aXQsIGV4aXRpbmcuc2VsZiwgZXhpdGluZy5sb2NhbHMuZ2xvYmFscyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4aXRpbmcubG9jYWxzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVudGVyICd0bycgc3RhdGVzIG5vdCBrZXB0XG4gICAgICAgIGZvciAobCA9IGtlZXA7IGwgPCB0b1BhdGgubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgICBlbnRlcmluZyA9IHRvUGF0aFtsXTtcbiAgICAgICAgICBlbnRlcmluZy5sb2NhbHMgPSB0b0xvY2Fsc1tsXTtcbiAgICAgICAgICBpZiAoZW50ZXJpbmcuc2VsZi5vbkVudGVyKSB7XG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGVudGVyaW5nLnNlbGYub25FbnRlciwgZW50ZXJpbmcuc2VsZiwgZW50ZXJpbmcubG9jYWxzLmdsb2JhbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBpdCBhZ2FpbiwgdG8gY2F0Y2ggYW55IHRyYW5zaXRpb25zIGluIGNhbGxiYWNrc1xuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZUNhbmNlbCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpO1xuICAgICAgICAgIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBnbG9iYWxzIGluICRzdGF0ZVxuICAgICAgICAkc3RhdGUuJGN1cnJlbnQgPSB0bztcbiAgICAgICAgJHN0YXRlLmN1cnJlbnQgPSB0by5zZWxmO1xuICAgICAgICAkc3RhdGUucGFyYW1zID0gdG9QYXJhbXM7XG4gICAgICAgIGNvcHkoJHN0YXRlLnBhcmFtcywgJHN0YXRlUGFyYW1zKTtcbiAgICAgICAgJHN0YXRlLnRyYW5zaXRpb24gPSBudWxsO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9uICYmIHRvLm5hdmlnYWJsZSkge1xuICAgICAgICAgICR1cmxSb3V0ZXIucHVzaCh0by5uYXZpZ2FibGUudXJsLCB0by5uYXZpZ2FibGUubG9jYWxzLmdsb2JhbHMuJHN0YXRlUGFyYW1zLCB7XG4gICAgICAgICAgICAkJGF2b2lkUmVzeW5jOiB0cnVlLCByZXBsYWNlOiBvcHRpb25zLmxvY2F0aW9uID09PSAncmVwbGFjZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm5vdGlmeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjJHN0YXRlQ2hhbmdlU3VjY2Vzc1xuICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEZpcmVkIG9uY2UgdGhlIHN0YXRlIHRyYW5zaXRpb24gaXMgKipjb21wbGV0ZSoqLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSB0b1N0YXRlIFRoZSBzdGF0ZSBiZWluZyB0cmFuc2l0aW9uZWQgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0b1BhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgdG9TdGF0ZWAuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IGZyb21TdGF0ZSBUaGUgY3VycmVudCBzdGF0ZSwgcHJlLXRyYW5zaXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmcm9tUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGBmcm9tU3RhdGVgLlxuICAgICAgICAgKi9cbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSh0cnVlKTtcblxuICAgICAgICByZXR1cm4gJHN0YXRlLmN1cnJlbnQ7XG4gICAgICB9KS50aGVuKG51bGwsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAvLyBwcm9wYWdhdGUgVHJhbnNpdGlvblN1cGVyc2VkZWQgZXJyb3Igd2l0aG91dCBlbWl0dGluZyAkc3RhdGVDaGFuZ2VDYW5jZWxcbiAgICAgICAgLy8gYXMgaXQgd2FzIGFscmVhZHkgZW1pdHRlZCBpbiB0aGUgc3VjY2VzcyBoYW5kbGVyIGFib3ZlXG4gICAgICAgIGlmIChlcnJvciA9PT0gVHJhbnNpdGlvblN1cGVyc2VkZWRFcnJvcikgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuXG4gICAgICAgIGlmICgkc3RhdGUudHJhbnNpdGlvbiAhPT0gdHJhbnNpdGlvbikge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlQ2FuY2VsJywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcyk7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgJHN0YXRlLnRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjJHN0YXRlQ2hhbmdlRXJyb3JcbiAgICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBGaXJlZCB3aGVuIGFuICoqZXJyb3Igb2NjdXJzKiogZHVyaW5nIHRyYW5zaXRpb24uIEl0J3MgaW1wb3J0YW50IHRvIG5vdGUgdGhhdCBpZiB5b3VcbiAgICAgICAgICogaGF2ZSBhbnkgZXJyb3JzIGluIHlvdXIgcmVzb2x2ZSBmdW5jdGlvbnMgKGphdmFzY3JpcHQgZXJyb3JzLCBub24tZXhpc3RlbnQgc2VydmljZXMsIGV0YylcbiAgICAgICAgICogdGhleSB3aWxsIG5vdCB0aHJvdyB0cmFkaXRpb25hbGx5LiBZb3UgbXVzdCBsaXN0ZW4gZm9yIHRoaXMgJHN0YXRlQ2hhbmdlRXJyb3IgZXZlbnQgdG9cbiAgICAgICAgICogY2F0Y2ggKipBTEwqKiBlcnJvcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IHRvU3RhdGUgVGhlIHN0YXRlIGJlaW5nIHRyYW5zaXRpb25lZCB0by5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRvUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGB0b1N0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gZnJvbVN0YXRlIFRoZSBjdXJyZW50IHN0YXRlLCBwcmUtdHJhbnNpdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZyb21QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYGZyb21TdGF0ZWAuXG4gICAgICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSByZXNvbHZlIGVycm9yIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGV2dCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlRXJyb3InLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zLCBlcnJvcik7XG5cbiAgICAgICAgaWYgKCFldnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBzaWxlbmNlVW5jYXVnaHRJblByb21pc2UodHJhbnNpdGlvbik7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNpc1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaW1pbGFyIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaW5jbHVkZXMgJHN0YXRlLmluY2x1ZGVzfSxcbiAgICAgKiBidXQgb25seSBjaGVja3MgZm9yIHRoZSBmdWxsIHN0YXRlIG5hbWUuIElmIHBhcmFtcyBpcyBzdXBwbGllZCB0aGVuIGl0IHdpbGwgYmVcbiAgICAgKiB0ZXN0ZWQgZm9yIHN0cmljdCBlcXVhbGl0eSBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBwYXJhbXMgb2JqZWN0LCBzbyBhbGwgcGFyYW1zXG4gICAgICogbXVzdCBtYXRjaCB3aXRoIG5vbmUgbWlzc2luZyBhbmQgbm8gZXh0cmFzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS4kY3VycmVudC5uYW1lID0gJ2NvbnRhY3RzLmRldGFpbHMuaXRlbSc7XG4gICAgICpcbiAgICAgKiAvLyBhYnNvbHV0ZSBuYW1lXG4gICAgICogJHN0YXRlLmlzKCdjb250YWN0LmRldGFpbHMuaXRlbScpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaXMoY29udGFjdERldGFpbEl0ZW1TdGF0ZU9iamVjdCk7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqXG4gICAgICogLy8gcmVsYXRpdmUgbmFtZSAoLiBhbmQgXiksIHR5cGljYWxseSBmcm9tIGEgdGVtcGxhdGVcbiAgICAgKiAvLyBFLmcuIGZyb20gdGhlICdjb250YWN0cy5kZXRhaWxzJyB0ZW1wbGF0ZVxuICAgICAqIDxkaXYgbmctY2xhc3M9XCJ7aGlnaGxpZ2h0ZWQ6ICRzdGF0ZS5pcygnLml0ZW0nKX1cIj5JdGVtPC9kaXY+XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHN0YXRlT3JOYW1lIFRoZSBzdGF0ZSBuYW1lIChhYnNvbHV0ZSBvciByZWxhdGl2ZSkgb3Igc3RhdGUgb2JqZWN0IHlvdSdkIGxpa2UgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4gYHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWR9YCwgdGhhdCB5b3UnZCBsaWtlXG4gICAgICogdG8gdGVzdCBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgQW4gb3B0aW9ucyBvYmplY3QuICBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge3N0cmluZ3xvYmplY3R9IC0gIElmIGBzdGF0ZU9yTmFtZWAgaXMgYSByZWxhdGl2ZSBzdGF0ZSBuYW1lIGFuZCBgb3B0aW9ucy5yZWxhdGl2ZWAgaXMgc2V0LCAuaXMgd2lsbFxuICAgICAqIHRlc3QgcmVsYXRpdmUgdG8gYG9wdGlvbnMucmVsYXRpdmVgIHN0YXRlIChvciBuYW1lKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgaXQgaXMgdGhlIHN0YXRlLlxuICAgICAqL1xuICAgICRzdGF0ZS5pcyA9IGZ1bmN0aW9uIGlzKHN0YXRlT3JOYW1lLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoeyByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMgfHwge30pO1xuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBvcHRpb25zLnJlbGF0aXZlKTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIGlmICgkc3RhdGUuJGN1cnJlbnQgIT09IHN0YXRlKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICByZXR1cm4gIXBhcmFtcyB8fCBvYmplY3RLZXlzKHBhcmFtcykucmVkdWNlKGZ1bmN0aW9uKGFjYywga2V5KSB7XG4gICAgICAgIHZhciBwYXJhbURlZiA9IHN0YXRlLnBhcmFtc1trZXldO1xuICAgICAgICByZXR1cm4gYWNjICYmICFwYXJhbURlZiB8fCBwYXJhbURlZi50eXBlLmVxdWFscygkc3RhdGVQYXJhbXNba2V5XSwgcGFyYW1zW2tleV0pO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjaW5jbHVkZXNcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBtZXRob2QgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZSBpcyBlcXVhbCB0byBvciBpcyB0aGUgY2hpbGQgb2YgdGhlXG4gICAgICogc3RhdGUgc3RhdGVOYW1lLiBJZiBhbnkgcGFyYW1zIGFyZSBwYXNzZWQgdGhlbiB0aGV5IHdpbGwgYmUgdGVzdGVkIGZvciBhIG1hdGNoIGFzIHdlbGwuXG4gICAgICogTm90IGFsbCB0aGUgcGFyYW1ldGVycyBuZWVkIHRvIGJlIHBhc3NlZCwganVzdCB0aGUgb25lcyB5b3UnZCBsaWtlIHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBQYXJ0aWFsIGFuZCByZWxhdGl2ZSBuYW1lc1xuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLiRjdXJyZW50Lm5hbWUgPSAnY29udGFjdHMuZGV0YWlscy5pdGVtJztcbiAgICAgKlxuICAgICAqIC8vIFVzaW5nIHBhcnRpYWwgbmFtZXNcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0c1wiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHMuZGV0YWlsc1wiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHMuZGV0YWlscy5pdGVtXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0cy5saXN0XCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiYWJvdXRcIik7IC8vIHJldHVybnMgZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFVzaW5nIHJlbGF0aXZlIG5hbWVzICguIGFuZCBeKSwgdHlwaWNhbGx5IGZyb20gYSB0ZW1wbGF0ZVxuICAgICAqIC8vIEUuZy4gZnJvbSB0aGUgJ2NvbnRhY3RzLmRldGFpbHMnIHRlbXBsYXRlXG4gICAgICogPGRpdiBuZy1jbGFzcz1cIntoaWdobGlnaHRlZDogJHN0YXRlLmluY2x1ZGVzKCcuaXRlbScpfVwiPkl0ZW08L2Rpdj5cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEJhc2ljIGdsb2JiaW5nIHBhdHRlcm5zXG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUuJGN1cnJlbnQubmFtZSA9ICdjb250YWN0cy5kZXRhaWxzLml0ZW0udXJsJztcbiAgICAgKlxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qLipcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qKlwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKiouaXRlbS4qKlwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLml0ZW0udXJsXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuKi51cmxcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qXCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiaXRlbS4qKlwiKTsgLy8gcmV0dXJucyBmYWxzZVxuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlT3JOYW1lIEEgcGFydGlhbCBuYW1lLCByZWxhdGl2ZSBuYW1lLCBvciBnbG9iIHBhdHRlcm5cbiAgICAgKiB0byBiZSBzZWFyY2hlZCBmb3Igd2l0aGluIHRoZSBjdXJyZW50IHN0YXRlIG5hbWUuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4gYHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWR9YCxcbiAgICAgKiB0aGF0IHlvdSdkIGxpa2UgdG8gdGVzdCBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgQW4gb3B0aW9ucyBvYmplY3QuICBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge3N0cmluZ3xvYmplY3Q9fSAtICBJZiBgc3RhdGVPck5hbWVgIGlzIGEgcmVsYXRpdmUgc3RhdGUgcmVmZXJlbmNlIGFuZCBgb3B0aW9ucy5yZWxhdGl2ZWAgaXMgc2V0LFxuICAgICAqIC5pbmNsdWRlcyB3aWxsIHRlc3QgcmVsYXRpdmUgdG8gYG9wdGlvbnMucmVsYXRpdmVgIHN0YXRlIChvciBuYW1lKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgaXQgZG9lcyBpbmNsdWRlIHRoZSBzdGF0ZVxuICAgICAqL1xuICAgICRzdGF0ZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHN0YXRlT3JOYW1lLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoeyByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMgfHwge30pO1xuICAgICAgaWYgKGlzU3RyaW5nKHN0YXRlT3JOYW1lKSAmJiBpc0dsb2Ioc3RhdGVPck5hbWUpKSB7XG4gICAgICAgIGlmICghZG9lc1N0YXRlTWF0Y2hHbG9iKHN0YXRlT3JOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZU9yTmFtZSA9ICRzdGF0ZS4kY3VycmVudC5uYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIG9wdGlvbnMucmVsYXRpdmUpO1xuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIGlmICghaXNEZWZpbmVkKCRzdGF0ZS4kY3VycmVudC5pbmNsdWRlc1tzdGF0ZS5uYW1lXSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAoIXBhcmFtcykgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gICAgICB2YXIga2V5cyA9IG9iamVjdEtleXMocGFyYW1zKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXSwgcGFyYW1EZWYgPSBzdGF0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgaWYgKHBhcmFtRGVmICYmICFwYXJhbURlZi50eXBlLmVxdWFscygkc3RhdGVQYXJhbXNba2V5XSwgcGFyYW1zW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3RLZXlzKHBhcmFtcykucmVkdWNlKGZ1bmN0aW9uKGFjYywga2V5KSB7XG4gICAgICAgIHZhciBwYXJhbURlZiA9IHN0YXRlLnBhcmFtc1trZXldO1xuICAgICAgICByZXR1cm4gYWNjICYmICFwYXJhbURlZiB8fCBwYXJhbURlZi50eXBlLmVxdWFscygkc3RhdGVQYXJhbXNba2V5XSwgcGFyYW1zW2tleV0pO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNocmVmXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgdXJsIGdlbmVyYXRpb24gbWV0aG9kIHRoYXQgcmV0dXJucyB0aGUgY29tcGlsZWQgdXJsIGZvciB0aGUgZ2l2ZW4gc3RhdGUgcG9wdWxhdGVkIHdpdGggdGhlIGdpdmVuIHBhcmFtcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiBleHBlY3QoJHN0YXRlLmhyZWYoXCJhYm91dC5wZXJzb25cIiwgeyBwZXJzb246IFwiYm9iXCIgfSkpLnRvRXF1YWwoXCIvYWJvdXQvYm9iXCIpO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzdGF0ZU9yTmFtZSBUaGUgc3RhdGUgbmFtZSBvciBzdGF0ZSBvYmplY3QgeW91J2QgbGlrZSB0byBnZW5lcmF0ZSBhIHVybCBmcm9tLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgdmFsdWVzIHRvIGZpbGwgdGhlIHN0YXRlJ3MgcmVxdWlyZWQgcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipgbG9zc3lgKiogLSB7Ym9vbGVhbj10cnVlfSAtICBJZiB0cnVlLCBhbmQgaWYgdGhlcmUgaXMgbm8gdXJsIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3RhdGUgcHJvdmlkZWQgaW4gdGhlXG4gICAgICogICAgZmlyc3QgcGFyYW1ldGVyLCB0aGVuIHRoZSBjb25zdHJ1Y3RlZCBocmVmIHVybCB3aWxsIGJlIGJ1aWx0IGZyb20gdGhlIGZpcnN0IG5hdmlnYWJsZSBhbmNlc3RvciAoYWthXG4gICAgICogICAgYW5jZXN0b3Igd2l0aCBhIHZhbGlkIHVybCkuXG4gICAgICogLSAqKmBpbmhlcml0YCoqIC0ge2Jvb2xlYW49dHJ1ZX0sIElmIGB0cnVlYCB3aWxsIGluaGVyaXQgdXJsIHBhcmFtZXRlcnMgZnJvbSBjdXJyZW50IHVybC5cbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge29iamVjdD0kc3RhdGUuJGN1cnJlbnR9LCBXaGVuIHRyYW5zaXRpb25pbmcgd2l0aCByZWxhdGl2ZSBwYXRoIChlLmcgJ14nKSwgXG4gICAgICogICAgZGVmaW5lcyB3aGljaCBzdGF0ZSB0byBiZSByZWxhdGl2ZSBmcm9tLlxuICAgICAqIC0gKipgYWJzb2x1dGVgKiogLSB7Ym9vbGVhbj1mYWxzZX0sICBJZiB0cnVlIHdpbGwgZ2VuZXJhdGUgYW4gYWJzb2x1dGUgdXJsLCBlLmcuIFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbS9mdWxsdXJsXCIuXG4gICAgICogXG4gICAgICogQHJldHVybnMge3N0cmluZ30gY29tcGlsZWQgc3RhdGUgdXJsXG4gICAgICovXG4gICAgJHN0YXRlLmhyZWYgPSBmdW5jdGlvbiBocmVmKHN0YXRlT3JOYW1lLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoe1xuICAgICAgICBsb3NzeTogICAgdHJ1ZSxcbiAgICAgICAgaW5oZXJpdDogIHRydWUsXG4gICAgICAgIGFic29sdXRlOiBmYWxzZSxcbiAgICAgICAgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudFxuICAgICAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICAgIHZhciBzdGF0ZSA9IGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgIGlmICghaXNEZWZpbmVkKHN0YXRlKSkgcmV0dXJuIG51bGw7XG4gICAgICBpZiAob3B0aW9ucy5pbmhlcml0KSBwYXJhbXMgPSBpbmhlcml0UGFyYW1zKCRzdGF0ZVBhcmFtcywgcGFyYW1zIHx8IHt9LCAkc3RhdGUuJGN1cnJlbnQsIHN0YXRlKTtcbiAgICAgIFxuICAgICAgdmFyIG5hdiA9IChzdGF0ZSAmJiBvcHRpb25zLmxvc3N5KSA/IHN0YXRlLm5hdmlnYWJsZSA6IHN0YXRlO1xuXG4gICAgICBpZiAoIW5hdiB8fCBuYXYudXJsID09PSB1bmRlZmluZWQgfHwgbmF2LnVybCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkdXJsUm91dGVyLmhyZWYobmF2LnVybCwgZmlsdGVyQnlLZXlzKHN0YXRlLnBhcmFtcy4kJGtleXMoKS5jb25jYXQoJyMnKSwgcGFyYW1zIHx8IHt9KSwge1xuICAgICAgICBhYnNvbHV0ZTogb3B0aW9ucy5hYnNvbHV0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjZ2V0XG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBhbnkgc3BlY2lmaWMgc3RhdGUgb3IgYWxsIHN0YXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdD19IHN0YXRlT3JOYW1lIChhYnNvbHV0ZSBvciByZWxhdGl2ZSkgSWYgcHJvdmlkZWQsIHdpbGwgb25seSBnZXQgdGhlIGNvbmZpZyBmb3JcbiAgICAgKiB0aGUgcmVxdWVzdGVkIHN0YXRlLiBJZiBub3QgcHJvdmlkZWQsIHJldHVybnMgYW4gYXJyYXkgb2YgQUxMIHN0YXRlIGNvbmZpZ3MuXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PX0gY29udGV4dCBXaGVuIHN0YXRlT3JOYW1lIGlzIGEgcmVsYXRpdmUgc3RhdGUgcmVmZXJlbmNlLCB0aGUgc3RhdGUgd2lsbCBiZSByZXRyaWV2ZWQgcmVsYXRpdmUgdG8gY29udGV4dC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBTdGF0ZSBjb25maWd1cmF0aW9uIG9iamVjdCBvciBhcnJheSBvZiBhbGwgb2JqZWN0cy5cbiAgICAgKi9cbiAgICAkc3RhdGUuZ2V0ID0gZnVuY3Rpb24gKHN0YXRlT3JOYW1lLCBjb250ZXh0KSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG1hcChvYmplY3RLZXlzKHN0YXRlcyksIGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIHN0YXRlc1tuYW1lXS5zZWxmOyB9KTtcbiAgICAgIHZhciBzdGF0ZSA9IGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgY29udGV4dCB8fCAkc3RhdGUuJGN1cnJlbnQpO1xuICAgICAgcmV0dXJuIChzdGF0ZSAmJiBzdGF0ZS5zZWxmKSA/IHN0YXRlLnNlbGYgOiBudWxsO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlU3RhdGUoc3RhdGUsIHBhcmFtcywgcGFyYW1zQXJlRmlsdGVyZWQsIGluaGVyaXRlZCwgZHN0LCBvcHRpb25zKSB7XG4gICAgICAvLyBNYWtlIGEgcmVzdHJpY3RlZCAkc3RhdGVQYXJhbXMgd2l0aCBvbmx5IHRoZSBwYXJhbWV0ZXJzIHRoYXQgYXBwbHkgdG8gdGhpcyBzdGF0ZSBpZlxuICAgICAgLy8gbmVjZXNzYXJ5LiBJbiBhZGRpdGlvbiB0byBiZWluZyBhdmFpbGFibGUgdG8gdGhlIGNvbnRyb2xsZXIgYW5kIG9uRW50ZXIvb25FeGl0IGNhbGxiYWNrcyxcbiAgICAgIC8vIHdlIGFsc28gbmVlZCAkc3RhdGVQYXJhbXMgdG8gYmUgYXZhaWxhYmxlIGZvciBhbnkgJGluamVjdG9yIGNhbGxzIHdlIG1ha2UgZHVyaW5nIHRoZVxuICAgICAgLy8gZGVwZW5kZW5jeSByZXNvbHV0aW9uIHByb2Nlc3MuXG4gICAgICB2YXIgJHN0YXRlUGFyYW1zID0gKHBhcmFtc0FyZUZpbHRlcmVkKSA/IHBhcmFtcyA6IGZpbHRlckJ5S2V5cyhzdGF0ZS5wYXJhbXMuJCRrZXlzKCksIHBhcmFtcyk7XG4gICAgICB2YXIgbG9jYWxzID0geyAkc3RhdGVQYXJhbXM6ICRzdGF0ZVBhcmFtcyB9O1xuXG4gICAgICAvLyBSZXNvbHZlICdnbG9iYWwnIGRlcGVuZGVuY2llcyBmb3IgdGhlIHN0YXRlLCBpLmUuIHRob3NlIG5vdCBzcGVjaWZpYyB0byBhIHZpZXcuXG4gICAgICAvLyBXZSdyZSBhbHNvIGluY2x1ZGluZyAkc3RhdGVQYXJhbXMgaW4gdGhpczsgdGhhdCB3YXkgdGhlIHBhcmFtZXRlcnMgYXJlIHJlc3RyaWN0ZWRcbiAgICAgIC8vIHRvIHRoZSBzZXQgdGhhdCBzaG91bGQgYmUgdmlzaWJsZSB0byB0aGUgc3RhdGUsIGFuZCBhcmUgaW5kZXBlbmRlbnQgb2Ygd2hlbiB3ZSB1cGRhdGVcbiAgICAgIC8vIHRoZSBnbG9iYWwgJHN0YXRlIGFuZCAkc3RhdGVQYXJhbXMgdmFsdWVzLlxuICAgICAgZHN0LnJlc29sdmUgPSAkcmVzb2x2ZS5yZXNvbHZlKHN0YXRlLnJlc29sdmUsIGxvY2FscywgZHN0LnJlc29sdmUsIHN0YXRlKTtcbiAgICAgIHZhciBwcm9taXNlcyA9IFtkc3QucmVzb2x2ZS50aGVuKGZ1bmN0aW9uIChnbG9iYWxzKSB7XG4gICAgICAgIGRzdC5nbG9iYWxzID0gZ2xvYmFscztcbiAgICAgIH0pXTtcbiAgICAgIGlmIChpbmhlcml0ZWQpIHByb21pc2VzLnB1c2goaW5oZXJpdGVkKTtcblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVZpZXdzKCkge1xuICAgICAgICB2YXIgdmlld3NQcm9taXNlcyA9IFtdO1xuXG4gICAgICAgIC8vIFJlc29sdmUgdGVtcGxhdGUgYW5kIGRlcGVuZGVuY2llcyBmb3IgYWxsIHZpZXdzLlxuICAgICAgICBmb3JFYWNoKHN0YXRlLnZpZXdzLCBmdW5jdGlvbiAodmlldywgbmFtZSkge1xuICAgICAgICAgIHZhciBpbmplY3RhYmxlcyA9ICh2aWV3LnJlc29sdmUgJiYgdmlldy5yZXNvbHZlICE9PSBzdGF0ZS5yZXNvbHZlID8gdmlldy5yZXNvbHZlIDoge30pO1xuICAgICAgICAgIGluamVjdGFibGVzLiR0ZW1wbGF0ZSA9IFsgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICR2aWV3LmxvYWQobmFtZSwgeyB2aWV3OiB2aWV3LCBsb2NhbHM6IGRzdC5nbG9iYWxzLCBwYXJhbXM6ICRzdGF0ZVBhcmFtcywgbm90aWZ5OiBvcHRpb25zLm5vdGlmeSB9KSB8fCAnJztcbiAgICAgICAgICB9XTtcblxuICAgICAgICAgIHZpZXdzUHJvbWlzZXMucHVzaCgkcmVzb2x2ZS5yZXNvbHZlKGluamVjdGFibGVzLCBkc3QuZ2xvYmFscywgZHN0LnJlc29sdmUsIHN0YXRlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIC8vIFJlZmVyZW5jZXMgdG8gdGhlIGNvbnRyb2xsZXIgKG9ubHkgaW5zdGFudGlhdGVkIGF0IGxpbmsgdGltZSlcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHZpZXcuY29udHJvbGxlclByb3ZpZGVyKSB8fCBpc0FycmF5KHZpZXcuY29udHJvbGxlclByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICB2YXIgaW5qZWN0TG9jYWxzID0gYW5ndWxhci5leHRlbmQoe30sIGluamVjdGFibGVzLCBkc3QuZ2xvYmFscyk7XG4gICAgICAgICAgICAgIHJlc3VsdC4kJGNvbnRyb2xsZXIgPSAkaW5qZWN0b3IuaW52b2tlKHZpZXcuY29udHJvbGxlclByb3ZpZGVyLCBudWxsLCBpbmplY3RMb2NhbHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlciA9IHZpZXcuY29udHJvbGxlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb3ZpZGUgYWNjZXNzIHRvIHRoZSBzdGF0ZSBpdHNlbGYgZm9yIGludGVybmFsIHVzZVxuICAgICAgICAgICAgcmVzdWx0LiQkc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgIHJlc3VsdC4kJGNvbnRyb2xsZXJBcyA9IHZpZXcuY29udHJvbGxlckFzO1xuICAgICAgICAgICAgcmVzdWx0LiQkcmVzb2x2ZUFzID0gdmlldy5yZXNvbHZlQXM7XG4gICAgICAgICAgICBkc3RbbmFtZV0gPSByZXN1bHQ7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gJHEuYWxsKHZpZXdzUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gZHN0Lmdsb2JhbHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBXYWl0IGZvciBhbGwgdGhlIHByb21pc2VzIGFuZCB0aGVuIHJldHVybiB0aGUgYWN0aXZhdGlvbiBvYmplY3RcbiAgICAgIHJldHVybiAkcS5hbGwocHJvbWlzZXMpLnRoZW4ocmVzb2x2ZVZpZXdzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIGRzdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAkc3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRTa2lwUmVsb2FkKHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcywgbG9jYWxzLCBvcHRpb25zKSB7XG4gICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlcmUgYXJlIG5vIGRpZmZlcmVuY2VzIGluIG5vbi1zZWFyY2ggKHBhdGgvb2JqZWN0KSBwYXJhbXMsIGZhbHNlIGlmIHRoZXJlIGFyZSBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIG5vblNlYXJjaFBhcmFtc0VxdWFsKGZyb21BbmRUb1N0YXRlLCBmcm9tUGFyYW1zLCB0b1BhcmFtcykge1xuICAgICAgLy8gSWRlbnRpZnkgd2hldGhlciBhbGwgdGhlIHBhcmFtZXRlcnMgdGhhdCBkaWZmZXIgYmV0d2VlbiBgZnJvbVBhcmFtc2AgYW5kIGB0b1BhcmFtc2Agd2VyZSBzZWFyY2ggcGFyYW1zLlxuICAgICAgZnVuY3Rpb24gbm90U2VhcmNoUGFyYW0oa2V5KSB7XG4gICAgICAgIHJldHVybiBmcm9tQW5kVG9TdGF0ZS5wYXJhbXNba2V5XS5sb2NhdGlvbiAhPSBcInNlYXJjaFwiO1xuICAgICAgfVxuICAgICAgdmFyIG5vblF1ZXJ5UGFyYW1LZXlzID0gZnJvbUFuZFRvU3RhdGUucGFyYW1zLiQka2V5cygpLmZpbHRlcihub3RTZWFyY2hQYXJhbSk7XG4gICAgICB2YXIgbm9uUXVlcnlQYXJhbXMgPSBwaWNrLmFwcGx5KHt9LCBbZnJvbUFuZFRvU3RhdGUucGFyYW1zXS5jb25jYXQobm9uUXVlcnlQYXJhbUtleXMpKTtcbiAgICAgIHZhciBub25RdWVyeVBhcmFtU2V0ID0gbmV3ICQkVU1GUC5QYXJhbVNldChub25RdWVyeVBhcmFtcyk7XG4gICAgICByZXR1cm4gbm9uUXVlcnlQYXJhbVNldC4kJGVxdWFscyhmcm9tUGFyYW1zLCB0b1BhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gSWYgcmVsb2FkIHdhcyBub3QgZXhwbGljaXRseSByZXF1ZXN0ZWRcbiAgICAvLyBhbmQgd2UncmUgdHJhbnNpdGlvbmluZyB0byB0aGUgc2FtZSBzdGF0ZSB3ZSdyZSBhbHJlYWR5IGluXG4gICAgLy8gYW5kICAgIHRoZSBsb2NhbHMgZGlkbid0IGNoYW5nZVxuICAgIC8vICAgICBvciB0aGV5IGNoYW5nZWQgaW4gYSB3YXkgdGhhdCBkb2Vzbid0IG1lcml0IHJlbG9hZGluZ1xuICAgIC8vICAgICAgICAocmVsb2FkT25QYXJhbXM6ZmFsc2UsIG9yIHJlbG9hZE9uU2VhcmNoLmZhbHNlIGFuZCBvbmx5IHNlYXJjaCBwYXJhbXMgY2hhbmdlZClcbiAgICAvLyBUaGVuIHJldHVybiB0cnVlLlxuICAgIGlmICghb3B0aW9ucy5yZWxvYWQgJiYgdG8gPT09IGZyb20gJiZcbiAgICAgIChsb2NhbHMgPT09IGZyb20ubG9jYWxzIHx8ICh0by5zZWxmLnJlbG9hZE9uU2VhcmNoID09PSBmYWxzZSAmJiBub25TZWFyY2hQYXJhbXNFcXVhbChmcm9tLCBmcm9tUGFyYW1zLCB0b1BhcmFtcykpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxuICAuZmFjdG9yeSgnJHN0YXRlUGFyYW1zJywgZnVuY3Rpb24gKCkgeyByZXR1cm4ge307IH0pXG4gIC5jb25zdGFudChcIiRzdGF0ZS5ydW50aW1lXCIsIHsgYXV0b2luamVjdDogdHJ1ZSB9KVxuICAucHJvdmlkZXIoJyRzdGF0ZScsICRTdGF0ZVByb3ZpZGVyKVxuICAvLyBJbmplY3QgJHN0YXRlIHRvIGluaXRpYWxpemUgd2hlbiBlbnRlcmluZyBydW50aW1lLiAjMjU3NFxuICAucnVuKFsnJGluamVjdG9yJywgZnVuY3Rpb24gKCRpbmplY3Rvcikge1xuICAgIC8vIEFsbG93IHRlc3RzIChzdGF0ZVNwZWMuanMpIHRvIHR1cm4gdGhpcyBvZmYgYnkgZGVmaW5pbmcgdGhpcyBjb25zdGFudFxuICAgIGlmICgkaW5qZWN0b3IuZ2V0KFwiJHN0YXRlLnJ1bnRpbWVcIikuYXV0b2luamVjdCkge1xuICAgICAgJGluamVjdG9yLmdldCgnJHN0YXRlJyk7XG4gICAgfVxuICB9XSk7XG5cblxuJFZpZXdQcm92aWRlci4kaW5qZWN0ID0gW107XG5mdW5jdGlvbiAkVmlld1Byb3ZpZGVyKCkge1xuXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgKlxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICovXG4gICRnZXQuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckdGVtcGxhdGVGYWN0b3J5J107XG4gIGZ1bmN0aW9uICRnZXQoICAgJHJvb3RTY29wZSwgICAkdGVtcGxhdGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vICR2aWV3LmxvYWQoJ2Z1bGwudmlld05hbWUnLCB7IHRlbXBsYXRlOiAuLi4sIGNvbnRyb2xsZXI6IC4uLiwgcmVzb2x2ZTogLi4uLCBhc3luYzogZmFsc2UsIHBhcmFtczogLi4uIH0pXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR2aWV3I2xvYWRcbiAgICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHZpZXdcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBvcHRpb24gb2JqZWN0LlxuICAgICAgICovXG4gICAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCwgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgdGVtcGxhdGU6IG51bGwsIGNvbnRyb2xsZXI6IG51bGwsIHZpZXc6IG51bGwsIGxvY2FsczogbnVsbCwgbm90aWZ5OiB0cnVlLCBhc3luYzogdHJ1ZSwgcGFyYW1zOiB7fVxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAob3B0aW9ucy52aWV3KSB7XG4gICAgICAgICAgcmVzdWx0ID0gJHRlbXBsYXRlRmFjdG9yeS5mcm9tQ29uZmlnKG9wdGlvbnMudmlldywgb3B0aW9ucy5wYXJhbXMsIG9wdGlvbnMubG9jYWxzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpLnByb3ZpZGVyKCckdmlldycsICRWaWV3UHJvdmlkZXIpO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFByb3ZpZGVyIHRoYXQgcmV0dXJucyB0aGUge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsfSBzZXJ2aWNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiAkVmlld1Njcm9sbFByb3ZpZGVyKCkge1xuXG4gIHZhciB1c2VBbmNob3JTY3JvbGwgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsUHJvdmlkZXIjdXNlQW5jaG9yU2Nyb2xsXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXZlcnRzIGJhY2sgdG8gdXNpbmcgdGhlIGNvcmUgW2AkYW5jaG9yU2Nyb2xsYF0oaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJGFuY2hvclNjcm9sbCkgc2VydmljZSBmb3JcbiAgICogc2Nyb2xsaW5nIGJhc2VkIG9uIHRoZSB1cmwgYW5jaG9yLlxuICAgKi9cbiAgdGhpcy51c2VBbmNob3JTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlQW5jaG9yU2Nyb2xsID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFxuICAgKlxuICAgKiBAcmVxdWlyZXMgJGFuY2hvclNjcm9sbFxuICAgKiBAcmVxdWlyZXMgJHRpbWVvdXRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBqcUxpdGUgZWxlbWVudCwgaXQgc2Nyb2xscyB0aGUgZWxlbWVudCBpbnRvIHZpZXcgKGFmdGVyIGFcbiAgICogYCR0aW1lb3V0YCBzbyB0aGUgRE9NIGhhcyB0aW1lIHRvIHJlZnJlc2gpLlxuICAgKlxuICAgKiBJZiB5b3UgcHJlZmVyIHRvIHJlbHkgb24gYCRhbmNob3JTY3JvbGxgIHRvIHNjcm9sbCB0aGUgdmlldyB0byB0aGUgYW5jaG9yLFxuICAgKiB0aGlzIGNhbiBiZSBlbmFibGVkIGJ5IGNhbGxpbmcge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsUHJvdmlkZXIjbWV0aG9kc191c2VBbmNob3JTY3JvbGwgYCR1aVZpZXdTY3JvbGxQcm92aWRlci51c2VBbmNob3JTY3JvbGwoKWB9LlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckYW5jaG9yU2Nyb2xsJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRhbmNob3JTY3JvbGwsICR0aW1lb3V0KSB7XG4gICAgaWYgKHVzZUFuY2hvclNjcm9sbCkge1xuICAgICAgcmV0dXJuICRhbmNob3JTY3JvbGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgICAgcmV0dXJuICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGVsZW1lbnRbMF0uc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICB9O1xuICB9XTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpLnByb3ZpZGVyKCckdWlWaWV3U2Nyb2xsJywgJFZpZXdTY3JvbGxQcm92aWRlcik7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS12aWV3XG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyAkY29tcGlsZVxuICogQHJlcXVpcmVzICRjb250cm9sbGVyXG4gKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgdWktdmlldyBkaXJlY3RpdmUgdGVsbHMgJHN0YXRlIHdoZXJlIHRvIHBsYWNlIHlvdXIgdGVtcGxhdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBBIHZpZXcgbmFtZS4gVGhlIG5hbWUgc2hvdWxkIGJlIHVuaXF1ZSBhbW9uZ3N0IHRoZSBvdGhlciB2aWV3cyBpbiB0aGVcbiAqIHNhbWUgc3RhdGUuIFlvdSBjYW4gaGF2ZSB2aWV3cyBvZiB0aGUgc2FtZSBuYW1lIHRoYXQgbGl2ZSBpbiBkaWZmZXJlbnQgc3RhdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXV0b3Njcm9sbCBJdCBhbGxvd3MgeW91IHRvIHNldCB0aGUgc2Nyb2xsIGJlaGF2aW9yIG9mIHRoZSBicm93c2VyIHdpbmRvd1xuICogd2hlbiBhIHZpZXcgaXMgcG9wdWxhdGVkLiBCeSBkZWZhdWx0LCAkYW5jaG9yU2Nyb2xsIGlzIG92ZXJyaWRkZW4gYnkgdWktcm91dGVyJ3MgY3VzdG9tIHNjcm9sbFxuICogc2VydmljZSwge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsfS4gVGhpcyBjdXN0b20gc2VydmljZSBsZXQncyB5b3VcbiAqIHNjcm9sbCB1aS12aWV3IGVsZW1lbnRzIGludG8gdmlldyB3aGVuIHRoZXkgYXJlIHBvcHVsYXRlZCBkdXJpbmcgYSBzdGF0ZSBhY3RpdmF0aW9uLlxuICpcbiAqICpOb3RlOiBUbyByZXZlcnQgYmFjayB0byBvbGQgW2AkYW5jaG9yU2Nyb2xsYF0oaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJGFuY2hvclNjcm9sbClcbiAqIGZ1bmN0aW9uYWxpdHksIGNhbGwgYCR1aVZpZXdTY3JvbGxQcm92aWRlci51c2VBbmNob3JTY3JvbGwoKWAuKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbmV2ZXIgdGhlIHZpZXcgdXBkYXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogQSB2aWV3IGNhbiBiZSB1bm5hbWVkIG9yIG5hbWVkLlxuICogPHByZT5cbiAqIDwhLS0gVW5uYW1lZCAtLT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj5cbiAqXG4gKiA8IS0tIE5hbWVkIC0tPlxuICogPGRpdiB1aS12aWV3PVwidmlld05hbWVcIj48L2Rpdj5cbiAqIDwvcHJlPlxuICpcbiAqIFlvdSBjYW4gb25seSBoYXZlIG9uZSB1bm5hbWVkIHZpZXcgd2l0aGluIGFueSB0ZW1wbGF0ZSAob3Igcm9vdCBodG1sKS4gSWYgeW91IGFyZSBvbmx5IHVzaW5nIGFcbiAqIHNpbmdsZSB2aWV3IGFuZCBpdCBpcyB1bm5hbWVkIHRoZW4geW91IGNhbiBwb3B1bGF0ZSBpdCBsaWtlIHNvOlxuICogPHByZT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHRlbXBsYXRlOiBcIjxoMT5IRUxMTyE8L2gxPlwiXG4gKiB9KVxuICogPC9wcmU+XG4gKlxuICogVGhlIGFib3ZlIGlzIGEgY29udmVuaWVudCBzaG9ydGN1dCBlcXVpdmFsZW50IHRvIHNwZWNpZnlpbmcgeW91ciB2aWV3IGV4cGxpY2l0bHkgd2l0aCB0aGUge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlciNtZXRob2RzX3N0YXRlIGB2aWV3c2B9XG4gKiBjb25maWcgcHJvcGVydHksIGJ5IG5hbWUsIGluIHRoaXMgY2FzZSBhbiBlbXB0eSBuYW1lOlxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9XG4gKiAgIH0gICAgXG4gKiB9KVxuICogPC9wcmU+XG4gKlxuICogQnV0IHR5cGljYWxseSB5b3UnbGwgb25seSB1c2UgdGhlIHZpZXdzIHByb3BlcnR5IGlmIHlvdSBuYW1lIHlvdXIgdmlldyBvciBoYXZlIG1vcmUgdGhhbiBvbmUgdmlld1xuICogaW4gdGhlIHNhbWUgdGVtcGxhdGUuIFRoZXJlJ3Mgbm90IHJlYWxseSBhIGNvbXBlbGxpbmcgcmVhc29uIHRvIG5hbWUgYSB2aWV3IGlmIGl0cyB0aGUgb25seSBvbmUsXG4gKiBidXQgeW91IGNvdWxkIGlmIHlvdSB3YW50ZWQsIGxpa2Ugc286XG4gKiA8cHJlPlxuICogPGRpdiB1aS12aWV3PVwibWFpblwiPjwvZGl2PlxuICogPC9wcmU+XG4gKiA8cHJlPlxuICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIsIHtcbiAqICAgdmlld3M6IHtcbiAqICAgICBcIm1haW5cIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9XG4gKiAgIH0gICAgXG4gKiB9KVxuICogPC9wcmU+XG4gKlxuICogUmVhbGx5IHRob3VnaCwgeW91J2xsIHVzZSB2aWV3cyB0byBzZXQgdXAgbXVsdGlwbGUgdmlld3M6XG4gKiA8cHJlPlxuICogPGRpdiB1aS12aWV3PjwvZGl2PlxuICogPGRpdiB1aS12aWV3PVwiY2hhcnRcIj48L2Rpdj5cbiAqIDxkaXYgdWktdmlldz1cImRhdGFcIj48L2Rpdj5cbiAqIDwvcHJlPlxuICpcbiAqIDxwcmU+XG4gKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIiwge1xuICogICB2aWV3czoge1xuICogICAgIFwiXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxoMT5IRUxMTyE8L2gxPlwiXG4gKiAgICAgfSxcbiAqICAgICBcImNoYXJ0XCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxjaGFydF90aGluZy8+XCJcbiAqICAgICB9LFxuICogICAgIFwiZGF0YVwiOiB7XG4gKiAgICAgICB0ZW1wbGF0ZTogXCI8ZGF0YV90aGluZy8+XCJcbiAqICAgICB9XG4gKiAgIH0gICAgXG4gKiB9KVxuICogPC9wcmU+XG4gKlxuICogRXhhbXBsZXMgZm9yIGBhdXRvc2Nyb2xsYDpcbiAqXG4gKiA8cHJlPlxuICogPCEtLSBJZiBhdXRvc2Nyb2xsIHByZXNlbnQgd2l0aCBubyBleHByZXNzaW9uLFxuICogICAgICB0aGVuIHNjcm9sbCB1aS12aWV3IGludG8gdmlldyAtLT5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGwvPlxuICpcbiAqIDwhLS0gSWYgYXV0b3Njcm9sbCBwcmVzZW50IHdpdGggdmFsaWQgZXhwcmVzc2lvbixcbiAqICAgICAgdGhlbiBzY3JvbGwgdWktdmlldyBpbnRvIHZpZXcgaWYgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZSAtLT5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGw9J3RydWUnLz5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGw9J2ZhbHNlJy8+XG4gKiA8dWktdmlldyBhdXRvc2Nyb2xsPSdzY29wZVZhcmlhYmxlJy8+XG4gKiA8L3ByZT5cbiAqXG4gKiBSZXNvbHZlIGRhdGE6XG4gKlxuICogVGhlIHJlc29sdmVkIGRhdGEgZnJvbSB0aGUgc3RhdGUncyBgcmVzb2x2ZWAgYmxvY2sgaXMgcGxhY2VkIG9uIHRoZSBzY29wZSBhcyBgJHJlc29sdmVgICh0aGlzXG4gKiBjYW4gYmUgY3VzdG9taXplZCB1c2luZyBbW1ZpZXdEZWNsYXJhdGlvbi5yZXNvbHZlQXNdXSkuICBUaGlzIGNhbiBiZSB0aGVuIGFjY2Vzc2VkIGZyb20gdGhlIHRlbXBsYXRlLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIGBjb250cm9sbGVyQXNgIGlzIGJlaW5nIHVzZWQsIGAkcmVzb2x2ZWAgaXMgc2V0IG9uIHRoZSBjb250cm9sbGVyIGluc3RhbmNlICphZnRlciogdGhlXG4gKiBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZC4gIFRoZSBgJG9uSW5pdCgpYCBob29rIGNhbiBiZSB1c2VkIHRvIHBlcmZvcm0gaW5pdGlhbGl6YXRpb24gY29kZSB3aGljaFxuICogZGVwZW5kcyBvbiBgJHJlc29sdmVgIGRhdGEuXG4gKlxuICogRXhhbXBsZSB1c2FnZSBvZiAkcmVzb2x2ZSBpbiBhIHZpZXcgdGVtcGxhdGVcbiAqIDxwcmU+XG4gKiAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaG9tZScsIHtcbiAqICAgdGVtcGxhdGU6ICc8bXktY29tcG9uZW50IHVzZXI9XCIkcmVzb2x2ZS51c2VyXCI+PC9teS1jb21wb25lbnQ+JyxcbiAqICAgcmVzb2x2ZToge1xuICogICAgIHVzZXI6IGZ1bmN0aW9uKFVzZXJTZXJ2aWNlKSB7IHJldHVybiBVc2VyU2VydmljZS5mZXRjaFVzZXIoKTsgfVxuICogICB9XG4gKiB9KTtcbiAqIDwvcHJlPlxuICovXG4kVmlld0RpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJGluamVjdG9yJywgJyR1aVZpZXdTY3JvbGwnLCAnJGludGVycG9sYXRlJywgJyRxJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZSggICAkc3RhdGUsICAgJGluamVjdG9yLCAgICR1aVZpZXdTY3JvbGwsICAgJGludGVycG9sYXRlLCAgICRxKSB7XG5cbiAgZnVuY3Rpb24gZ2V0U2VydmljZSgpIHtcbiAgICByZXR1cm4gKCRpbmplY3Rvci5oYXMpID8gZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5oYXMoc2VydmljZSkgPyAkaW5qZWN0b3IuZ2V0KHNlcnZpY2UpIDogbnVsbDtcbiAgICB9IDogZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQoc2VydmljZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgc2VydmljZSA9IGdldFNlcnZpY2UoKSxcbiAgICAgICRhbmltYXRvciA9IHNlcnZpY2UoJyRhbmltYXRvcicpLFxuICAgICAgJGFuaW1hdGUgPSBzZXJ2aWNlKCckYW5pbWF0ZScpO1xuXG4gIC8vIFJldHVybnMgYSBzZXQgb2YgRE9NIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgYmFzZWQgb24gd2hpY2ggQW5ndWxhciB2ZXJzaW9uXG4gIC8vIGl0IHNob3VsZCB1c2VcbiAgZnVuY3Rpb24gZ2V0UmVuZGVyZXIoYXR0cnMsIHNjb3BlKSB7XG4gICAgdmFyIHN0YXRpY3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbiAoZWxlbWVudCwgdGFyZ2V0LCBjYikgeyB0YXJnZXQuYWZ0ZXIoZWxlbWVudCk7IGNiKCk7IH0sXG4gICAgICAgIGxlYXZlOiBmdW5jdGlvbiAoZWxlbWVudCwgY2IpIHsgZWxlbWVudC5yZW1vdmUoKTsgY2IoKTsgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKCRhbmltYXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgdGFyZ2V0LCBjYikge1xuICAgICAgICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWlub3IgPiAyKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBudWxsLCB0YXJnZXQpLnRoZW4oY2IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBudWxsLCB0YXJnZXQsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBjYikge1xuICAgICAgICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWlub3IgPiAyKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50KS50aGVuKGNiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudCwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoJGFuaW1hdG9yKSB7XG4gICAgICB2YXIgYW5pbWF0ZSA9ICRhbmltYXRvciAmJiAkYW5pbWF0b3Ioc2NvcGUsIGF0dHJzKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHRhcmdldCwgY2IpIHthbmltYXRlLmVudGVyKGVsZW1lbnQsIG51bGwsIHRhcmdldCk7IGNiKCk7IH0sXG4gICAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBjYikgeyBhbmltYXRlLmxlYXZlKGVsZW1lbnQpOyBjYigpOyB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0aWNzKCk7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlID0ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBwcmlvcml0eTogNDAwLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRycywgJHRyYW5zY2x1ZGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsICRlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgcHJldmlvdXNFbCwgY3VycmVudEVsLCBjdXJyZW50U2NvcGUsIGxhdGVzdExvY2FscyxcbiAgICAgICAgICAgIG9ubG9hZEV4cCAgICAgPSBhdHRycy5vbmxvYWQgfHwgJycsXG4gICAgICAgICAgICBhdXRvU2Nyb2xsRXhwID0gYXR0cnMuYXV0b3Njcm9sbCxcbiAgICAgICAgICAgIHJlbmRlcmVyICAgICAgPSBnZXRSZW5kZXJlcihhdHRycywgc2NvcGUpLFxuICAgICAgICAgICAgaW5oZXJpdGVkICAgICA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcblxuICAgICAgICBzY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdXBkYXRlVmlldyh0cnVlKTtcblxuICAgICAgICBmdW5jdGlvbiBjbGVhbnVwTGFzdFZpZXcoKSB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzRWwpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWwucmVtb3ZlKCk7XG4gICAgICAgICAgICBwcmV2aW91c0VsID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1cnJlbnRFbCkge1xuICAgICAgICAgICAgdmFyICR1aVZpZXdEYXRhID0gY3VycmVudEVsLmRhdGEoJyR1aVZpZXdBbmltJyk7XG4gICAgICAgICAgICByZW5kZXJlci5sZWF2ZShjdXJyZW50RWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkdWlWaWV3RGF0YS4kJGFuaW1MZWF2ZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWwgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByZXZpb3VzRWwgPSBjdXJyZW50RWw7XG4gICAgICAgICAgICBjdXJyZW50RWwgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZpZXcoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgdmFyIG5ld1Njb3BlLFxuICAgICAgICAgICAgICBuYW1lICAgICAgICAgICAgPSBnZXRVaVZpZXdOYW1lKHNjb3BlLCBhdHRycywgJGVsZW1lbnQsICRpbnRlcnBvbGF0ZSksXG4gICAgICAgICAgICAgIHByZXZpb3VzTG9jYWxzICA9IG5hbWUgJiYgJHN0YXRlLiRjdXJyZW50ICYmICRzdGF0ZS4kY3VycmVudC5sb2NhbHNbbmFtZV07XG5cbiAgICAgICAgICBpZiAoIWZpcnN0VGltZSAmJiBwcmV2aW91c0xvY2FscyA9PT0gbGF0ZXN0TG9jYWxzKSByZXR1cm47IC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICBsYXRlc3RMb2NhbHMgPSAkc3RhdGUuJGN1cnJlbnQubG9jYWxzW25hbWVdO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS12aWV3IyR2aWV3Q29udGVudExvYWRpbmdcbiAgICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXdcbiAgICAgICAgICAgKiBAZXZlbnRUeXBlIGVtaXRzIG9uIHVpLXZpZXcgZGlyZWN0aXZlIHNjb3BlXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBGaXJlZCBvbmNlIHRoZSB2aWV3ICoqYmVnaW5zIGxvYWRpbmcqKiwgKmJlZm9yZSogdGhlIERPTSBpcyByZW5kZXJlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZpZXdOYW1lIE5hbWUgb2YgdGhlIHZpZXcuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmV3U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudExvYWRpbmcnLCBuYW1lKTtcblxuICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgdmFyIGFuaW1FbnRlciA9ICRxLmRlZmVyKCksIGFuaW1MZWF2ZSA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgdmlld0FuaW1EYXRhID0ge1xuICAgICAgICAgICAgICAkYW5pbUVudGVyOiBhbmltRW50ZXIucHJvbWlzZSxcbiAgICAgICAgICAgICAgJGFuaW1MZWF2ZTogYW5pbUxlYXZlLnByb21pc2UsXG4gICAgICAgICAgICAgICQkYW5pbUxlYXZlOiBhbmltTGVhdmVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNsb25lLmRhdGEoJyR1aVZpZXdBbmltJywgdmlld0FuaW1EYXRhKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmVudGVyKGNsb25lLCAkZWxlbWVudCwgZnVuY3Rpb24gb25VaVZpZXdFbnRlcigpIHtcbiAgICAgICAgICAgICAgYW5pbUVudGVyLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgaWYoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckdmlld0NvbnRlbnRBbmltYXRpb25FbmRlZCcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICFhdXRvU2Nyb2xsRXhwIHx8IHNjb3BlLiRldmFsKGF1dG9TY3JvbGxFeHApKSB7XG4gICAgICAgICAgICAgICAgJHVpVmlld1Njcm9sbChjbG9uZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2xlYW51cExhc3RWaWV3KCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjdXJyZW50RWwgPSBjbG9uZTtcbiAgICAgICAgICBjdXJyZW50U2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXcjJHZpZXdDb250ZW50TG9hZGVkXG4gICAgICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS12aWV3XG4gICAgICAgICAgICogQGV2ZW50VHlwZSBlbWl0cyBvbiB1aS12aWV3IGRpcmVjdGl2ZSBzY29wZVxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEZpcmVkIG9uY2UgdGhlIHZpZXcgaXMgKipsb2FkZWQqKiwgKmFmdGVyKiB0aGUgRE9NIGlzIHJlbmRlcmVkLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmlld05hbWUgTmFtZSBvZiB0aGUgdmlldy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudExvYWRlZCcsIG5hbWUpO1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZGlyZWN0aXZlO1xufVxuXG4kVmlld0RpcmVjdGl2ZUZpbGwuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJGNvbnRyb2xsZXInLCAnJHN0YXRlJywgJyRpbnRlcnBvbGF0ZSddO1xuZnVuY3Rpb24gJFZpZXdEaXJlY3RpdmVGaWxsICggICRjb21waWxlLCAgICRjb250cm9sbGVyLCAgICRzdGF0ZSwgICAkaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgcHJpb3JpdHk6IC00MDAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHRFbGVtZW50KSB7XG4gICAgICB2YXIgaW5pdGlhbCA9IHRFbGVtZW50Lmh0bWwoKTtcbiAgICAgIGlmICh0RWxlbWVudC5lbXB0eSkge1xuICAgICAgICB0RWxlbWVudC5lbXB0eSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbmcgMS4wLjAgZG9lc24ndCBoYXZlIGVtcHR5KCksIHdoaWNoIGNsZWFucyB1cCBkYXRhIGFuZCBoYW5kbGVyc1xuICAgICAgICB0RWxlbWVudFswXS5pbm5lckhUTUwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSAkc3RhdGUuJGN1cnJlbnQsXG4gICAgICAgICAgICBuYW1lID0gZ2V0VWlWaWV3TmFtZShzY29wZSwgYXR0cnMsICRlbGVtZW50LCAkaW50ZXJwb2xhdGUpLFxuICAgICAgICAgICAgbG9jYWxzICA9IGN1cnJlbnQgJiYgY3VycmVudC5sb2NhbHNbbmFtZV07XG5cbiAgICAgICAgaWYgKCEgbG9jYWxzKSB7XG4gICAgICAgICAgJGVsZW1lbnQuaHRtbChpbml0aWFsKTtcbiAgICAgICAgICAkY29tcGlsZSgkZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuZGF0YSgnJHVpVmlldycsIHsgbmFtZTogbmFtZSwgc3RhdGU6IGxvY2Fscy4kJHN0YXRlIH0pO1xuICAgICAgICAkZWxlbWVudC5odG1sKGxvY2Fscy4kdGVtcGxhdGUgPyBsb2NhbHMuJHRlbXBsYXRlIDogaW5pdGlhbCk7XG5cbiAgICAgICAgdmFyIHJlc29sdmVEYXRhID0gYW5ndWxhci5leHRlbmQoe30sIGxvY2Fscyk7XG4gICAgICAgIHNjb3BlW2xvY2Fscy4kJHJlc29sdmVBc10gPSByZXNvbHZlRGF0YTtcblxuICAgICAgICB2YXIgbGluayA9ICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpO1xuXG4gICAgICAgIGlmIChsb2NhbHMuJCRjb250cm9sbGVyKSB7XG4gICAgICAgICAgbG9jYWxzLiRzY29wZSA9IHNjb3BlO1xuICAgICAgICAgIGxvY2Fscy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gJGNvbnRyb2xsZXIobG9jYWxzLiQkY29udHJvbGxlciwgbG9jYWxzKTtcbiAgICAgICAgICBpZiAobG9jYWxzLiQkY29udHJvbGxlckFzKSB7XG4gICAgICAgICAgICBzY29wZVtsb2NhbHMuJCRjb250cm9sbGVyQXNdID0gY29udHJvbGxlcjtcbiAgICAgICAgICAgIHNjb3BlW2xvY2Fscy4kJGNvbnRyb2xsZXJBc11bbG9jYWxzLiQkcmVzb2x2ZUFzXSA9IHJlc29sdmVEYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVyLiRvbkluaXQpKSBjb250cm9sbGVyLiRvbkluaXQoKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKCckbmdDb250cm9sbGVyQ29udHJvbGxlcicsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICRlbGVtZW50LmNoaWxkcmVuKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjb250cm9sbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmsoc2NvcGUpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogU2hhcmVkIHVpLXZpZXcgY29kZSBmb3IgYm90aCBkaXJlY3RpdmVzOlxuICogR2l2ZW4gc2NvcGUsIGVsZW1lbnQsIGFuZCBpdHMgYXR0cmlidXRlcywgcmV0dXJuIHRoZSB2aWV3J3MgbmFtZVxuICovXG5mdW5jdGlvbiBnZXRVaVZpZXdOYW1lKHNjb3BlLCBhdHRycywgZWxlbWVudCwgJGludGVycG9sYXRlKSB7XG4gIHZhciBuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLnVpVmlldyB8fCBhdHRycy5uYW1lIHx8ICcnKShzY29wZSk7XG4gIHZhciB1aVZpZXdDcmVhdGVkQnkgPSBlbGVtZW50LmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcbiAgcmV0dXJuIG5hbWUuaW5kZXhPZignQCcpID49IDAgPyAgbmFtZSA6ICAobmFtZSArICdAJyArICh1aVZpZXdDcmVhdGVkQnkgPyB1aVZpZXdDcmVhdGVkQnkuc3RhdGUubmFtZSA6ICcnKSk7XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlRmlsbCk7XG5cbmZ1bmN0aW9uIHBhcnNlU3RhdGVSZWYocmVmLCBjdXJyZW50KSB7XG4gIHZhciBwcmVwYXJzZWQgPSByZWYubWF0Y2goL15cXHMqKHtbXn1dKn0pXFxzKiQvKSwgcGFyc2VkO1xuICBpZiAocHJlcGFyc2VkKSByZWYgPSBjdXJyZW50ICsgJygnICsgcHJlcGFyc2VkWzFdICsgJyknO1xuICBwYXJzZWQgPSByZWYucmVwbGFjZSgvXFxuL2csIFwiIFwiKS5tYXRjaCgvXihbXihdKz8pXFxzKihcXCgoLiopXFwpKT8kLyk7XG4gIGlmICghcGFyc2VkIHx8IHBhcnNlZC5sZW5ndGggIT09IDQpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIiArIHJlZiArIFwiJ1wiKTtcbiAgcmV0dXJuIHsgc3RhdGU6IHBhcnNlZFsxXSwgcGFyYW1FeHByOiBwYXJzZWRbM10gfHwgbnVsbCB9O1xufVxuXG5mdW5jdGlvbiBzdGF0ZUNvbnRleHQoZWwpIHtcbiAgdmFyIHN0YXRlRGF0YSA9IGVsLnBhcmVudCgpLmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcblxuICBpZiAoc3RhdGVEYXRhICYmIHN0YXRlRGF0YS5zdGF0ZSAmJiBzdGF0ZURhdGEuc3RhdGUubmFtZSkge1xuICAgIHJldHVybiBzdGF0ZURhdGEuc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZm8oZWwpIHtcbiAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLlxuICB2YXIgaXNTdmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZWwucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJztcbiAgdmFyIGlzRm9ybSA9IGVsWzBdLm5vZGVOYW1lID09PSBcIkZPUk1cIjtcblxuICByZXR1cm4ge1xuICAgIGF0dHI6IGlzRm9ybSA/IFwiYWN0aW9uXCIgOiAoaXNTdmcgPyAneGxpbms6aHJlZicgOiAnaHJlZicpLFxuICAgIGlzQW5jaG9yOiBlbC5wcm9wKFwidGFnTmFtZVwiKS50b1VwcGVyQ2FzZSgpID09PSBcIkFcIixcbiAgICBjbGlja2FibGU6ICFpc0Zvcm1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpY2tIb29rKGVsLCAkc3RhdGUsICR0aW1lb3V0LCB0eXBlLCBjdXJyZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGJ1dHRvbiA9IGUud2hpY2ggfHwgZS5idXR0b24sIHRhcmdldCA9IGN1cnJlbnQoKTtcblxuICAgIGlmICghKGJ1dHRvbiA+IDEgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5IHx8IGVsLmF0dHIoJ3RhcmdldCcpKSkge1xuICAgICAgLy8gSEFDSzogVGhpcyBpcyB0byBhbGxvdyBuZy1jbGlja3MgdG8gYmUgcHJvY2Vzc2VkIGJlZm9yZSB0aGUgdHJhbnNpdGlvbiBpcyBpbml0aWF0ZWQ6XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc3RhdGUuZ28odGFyZ2V0LnN0YXRlLCB0YXJnZXQucGFyYW1zLCB0YXJnZXQub3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gaWYgdGhlIHN0YXRlIGhhcyBubyBVUkwsIGlnbm9yZSBvbmUgcHJldmVudERlZmF1bHQgZnJvbSB0aGUgPGE+IGRpcmVjdGl2ZS5cbiAgICAgIHZhciBpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50ID0gdHlwZS5pc0FuY2hvciAmJiAhdGFyZ2V0LmhyZWYgPyAxOiAwO1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50LS0gPD0gMCkgJHRpbWVvdXQuY2FuY2VsKHRyYW5zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRPcHRzKGVsLCAkc3RhdGUpIHtcbiAgcmV0dXJuIHsgcmVsYXRpdmU6IHN0YXRlQ29udGV4dChlbCkgfHwgJHN0YXRlLiRjdXJyZW50LCBpbmhlcml0OiB0cnVlIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyAkdGltZW91dFxuICpcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGJpbmRzIGEgbGluayAoYDxhPmAgdGFnKSB0byBhIHN0YXRlLiBJZiB0aGUgc3RhdGUgaGFzIGFuIGFzc29jaWF0ZWRcbiAqIFVSTCwgdGhlIGRpcmVjdGl2ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgJiB1cGRhdGUgdGhlIGBocmVmYCBhdHRyaWJ1dGUgdmlhXG4gKiB0aGUge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19ocmVmICRzdGF0ZS5ocmVmKCl9IG1ldGhvZC4gQ2xpY2tpbmdcbiAqIHRoZSBsaW5rIHdpbGwgdHJpZ2dlciBhIHN0YXRlIHRyYW5zaXRpb24gd2l0aCBvcHRpb25hbCBwYXJhbWV0ZXJzLlxuICpcbiAqIEFsc28gbWlkZGxlLWNsaWNraW5nLCByaWdodC1jbGlja2luZywgYW5kIGN0cmwtY2xpY2tpbmcgb24gdGhlIGxpbmsgd2lsbCBiZVxuICogaGFuZGxlZCBuYXRpdmVseSBieSB0aGUgYnJvd3Nlci5cbiAqXG4gKiBZb3UgY2FuIGFsc28gdXNlIHJlbGF0aXZlIHN0YXRlIHBhdGhzIHdpdGhpbiB1aS1zcmVmLCBqdXN0IGxpa2UgdGhlIHJlbGF0aXZlXG4gKiBwYXRocyBwYXNzZWQgdG8gYCRzdGF0ZS5nbygpYC4gWW91IGp1c3QgbmVlZCB0byBiZSBhd2FyZSB0aGF0IHRoZSBwYXRoIGlzIHJlbGF0aXZlXG4gKiB0byB0aGUgc3RhdGUgdGhhdCB0aGUgbGluayBsaXZlcyBpbiwgaW4gb3RoZXIgd29yZHMgdGhlIHN0YXRlIHRoYXQgbG9hZGVkIHRoZVxuICogdGVtcGxhdGUgY29udGFpbmluZyB0aGUgbGluay5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgb3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvKCl9XG4gKiB1c2luZyB0aGUgYHVpLXNyZWYtb3B0c2AgYXR0cmlidXRlLiBPcHRpb25zIGFyZSByZXN0cmljdGVkIHRvIGBsb2NhdGlvbmAsIGBpbmhlcml0YCxcbiAqIGFuZCBgcmVsb2FkYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSdzIGFuIGV4YW1wbGUgb2YgaG93IHlvdSdkIHVzZSB1aS1zcmVmIGFuZCBob3cgaXQgd291bGQgY29tcGlsZS4gSWYgeW91IGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgdGVtcGxhdGU6XG4gKiA8cHJlPlxuICogPGEgdWktc3JlZj1cImhvbWVcIj5Ib21lPC9hPiB8IDxhIHVpLXNyZWY9XCJhYm91dFwiPkFib3V0PC9hPiB8IDxhIHVpLXNyZWY9XCJ7cGFnZTogMn1cIj5OZXh0IHBhZ2U8L2E+XG4gKlxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIHVpLXNyZWY9XCJjb250YWN0cy5kZXRhaWwoeyBpZDogY29udGFjdC5pZCB9KVwiPnt7IGNvbnRhY3QubmFtZSB9fTwvYT5cbiAqICAgICA8L2xpPlxuICogPC91bD5cbiAqIDwvcHJlPlxuICpcbiAqIFRoZW4gdGhlIGNvbXBpbGVkIGh0bWwgd291bGQgYmUgKGFzc3VtaW5nIEh0bWw1TW9kZSBpcyBvZmYgYW5kIGN1cnJlbnQgc3RhdGUgaXMgY29udGFjdHMpOlxuICogPHByZT5cbiAqIDxhIGhyZWY9XCIjL2hvbWVcIiB1aS1zcmVmPVwiaG9tZVwiPkhvbWU8L2E+IHwgPGEgaHJlZj1cIiMvYWJvdXRcIiB1aS1zcmVmPVwiYWJvdXRcIj5BYm91dDwvYT4gfCA8YSBocmVmPVwiIy9jb250YWN0cz9wYWdlPTJcIiB1aS1zcmVmPVwie3BhZ2U6IDJ9XCI+TmV4dCBwYWdlPC9hPlxuICpcbiAqIDx1bD5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8xXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+Sm9lPC9hPlxuICogICAgIDwvbGk+XG4gKiAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cbiAqICAgICAgICAgPGEgaHJlZj1cIiMvY29udGFjdHMvMlwiIHVpLXNyZWY9XCJjb250YWN0cy5kZXRhaWwoeyBpZDogY29udGFjdC5pZCB9KVwiPkFsaWNlPC9hPlxuICogICAgIDwvbGk+XG4gKiAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cbiAqICAgICAgICAgPGEgaHJlZj1cIiMvY29udGFjdHMvM1wiIHVpLXNyZWY9XCJjb250YWN0cy5kZXRhaWwoeyBpZDogY29udGFjdC5pZCB9KVwiPkJvYjwvYT5cbiAqICAgICA8L2xpPlxuICogPC91bD5cbiAqXG4gKiA8YSB1aS1zcmVmPVwiaG9tZVwiIHVpLXNyZWYtb3B0cz1cIntyZWxvYWQ6IHRydWV9XCI+SG9tZTwvYT5cbiAqIDwvcHJlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1aS1zcmVmICdzdGF0ZU5hbWUnIGNhbiBiZSBhbnkgdmFsaWQgYWJzb2x1dGUgb3IgcmVsYXRpdmUgc3RhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB1aS1zcmVmLW9wdHMgb3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvKCl9XG4gKi9cbiRTdGF0ZVJlZkRpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHRpbWVvdXQnXTtcbmZ1bmN0aW9uICRTdGF0ZVJlZkRpcmVjdGl2ZSgkc3RhdGUsICR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiBbJz9edWlTcmVmQWN0aXZlJywgJz9edWlTcmVmQWN0aXZlRXEnXSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHVpU3JlZkFjdGl2ZSkge1xuICAgICAgdmFyIHJlZiAgICA9IHBhcnNlU3RhdGVSZWYoYXR0cnMudWlTcmVmLCAkc3RhdGUuY3VycmVudC5uYW1lKTtcbiAgICAgIHZhciBkZWYgICAgPSB7IHN0YXRlOiByZWYuc3RhdGUsIGhyZWY6IG51bGwsIHBhcmFtczogbnVsbCB9O1xuICAgICAgdmFyIHR5cGUgICA9IGdldFR5cGVJbmZvKGVsZW1lbnQpO1xuICAgICAgdmFyIGFjdGl2ZSA9IHVpU3JlZkFjdGl2ZVsxXSB8fCB1aVNyZWZBY3RpdmVbMF07XG4gICAgICB2YXIgdW5saW5rSW5mb0ZuID0gbnVsbDtcbiAgICAgIHZhciBob29rRm47XG5cbiAgICAgIGRlZi5vcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRPcHRzKGVsZW1lbnQsICRzdGF0ZSksIGF0dHJzLnVpU3JlZk9wdHMgPyBzY29wZS4kZXZhbChhdHRycy51aVNyZWZPcHRzKSA6IHt9KTtcblxuICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsKSBkZWYucGFyYW1zID0gYW5ndWxhci5jb3B5KHZhbCk7XG4gICAgICAgIGRlZi5ocmVmID0gJHN0YXRlLmhyZWYocmVmLnN0YXRlLCBkZWYucGFyYW1zLCBkZWYub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHVubGlua0luZm9GbikgdW5saW5rSW5mb0ZuKCk7XG4gICAgICAgIGlmIChhY3RpdmUpIHVubGlua0luZm9GbiA9IGFjdGl2ZS4kJGFkZFN0YXRlSW5mbyhyZWYuc3RhdGUsIGRlZi5wYXJhbXMpO1xuICAgICAgICBpZiAoZGVmLmhyZWYgIT09IG51bGwpIGF0dHJzLiRzZXQodHlwZS5hdHRyLCBkZWYuaHJlZik7XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVmLnBhcmFtRXhwcikge1xuICAgICAgICBzY29wZS4kd2F0Y2gocmVmLnBhcmFtRXhwciwgZnVuY3Rpb24odmFsKSB7IGlmICh2YWwgIT09IGRlZi5wYXJhbXMpIHVwZGF0ZSh2YWwpOyB9LCB0cnVlKTtcbiAgICAgICAgZGVmLnBhcmFtcyA9IGFuZ3VsYXIuY29weShzY29wZS4kZXZhbChyZWYucGFyYW1FeHByKSk7XG4gICAgICB9XG4gICAgICB1cGRhdGUoKTtcblxuICAgICAgaWYgKCF0eXBlLmNsaWNrYWJsZSkgcmV0dXJuO1xuICAgICAgaG9va0ZuID0gY2xpY2tIb29rKGVsZW1lbnQsICRzdGF0ZSwgJHRpbWVvdXQsIHR5cGUsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZGVmOyB9KTtcbiAgICAgIGVsZW1lbnRbZWxlbWVudC5vbiA/ICdvbicgOiAnYmluZCddKFwiY2xpY2tcIiwgaG9va0ZuKTtcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudFtlbGVtZW50Lm9mZiA/ICdvZmYnIDogJ3VuYmluZCddKFwiY2xpY2tcIiwgaG9va0ZuKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXN0YXRlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS51aVNyZWZcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTXVjaCBsaWtlIHVpLXNyZWYsIGJ1dCB3aWxsIGFjY2VwdCBuYW1lZCAkc2NvcGUgcHJvcGVydGllcyB0byBldmFsdWF0ZSBmb3IgYSBzdGF0ZSBkZWZpbml0aW9uLFxuICogcGFyYW1zIGFuZCBvdmVycmlkZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1aS1zdGF0ZSAnc3RhdGVOYW1lJyBjYW4gYmUgYW55IHZhbGlkIGFic29sdXRlIG9yIHJlbGF0aXZlIHN0YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdWktc3RhdGUtcGFyYW1zIHBhcmFtcyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaHJlZiAkc3RhdGUuaHJlZigpfVxuICogQHBhcmFtIHtPYmplY3R9IHVpLXN0YXRlLW9wdHMgb3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvKCl9XG4gKi9cbiRTdGF0ZVJlZkR5bmFtaWNEaXJlY3RpdmUuJGluamVjdCA9IFsnJHN0YXRlJywgJyR0aW1lb3V0J107XG5mdW5jdGlvbiAkU3RhdGVSZWZEeW5hbWljRGlyZWN0aXZlKCRzdGF0ZSwgJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnP151aVNyZWZBY3RpdmUnLCAnP151aVNyZWZBY3RpdmVFcSddLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgdWlTcmVmQWN0aXZlKSB7XG4gICAgICB2YXIgdHlwZSAgID0gZ2V0VHlwZUluZm8oZWxlbWVudCk7XG4gICAgICB2YXIgYWN0aXZlID0gdWlTcmVmQWN0aXZlWzFdIHx8IHVpU3JlZkFjdGl2ZVswXTtcbiAgICAgIHZhciBncm91cCAgPSBbYXR0cnMudWlTdGF0ZSwgYXR0cnMudWlTdGF0ZVBhcmFtcyB8fCBudWxsLCBhdHRycy51aVN0YXRlT3B0cyB8fCBudWxsXTtcbiAgICAgIHZhciB3YXRjaCAgPSAnWycgKyBncm91cC5tYXAoZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgfHwgJ251bGwnOyB9KS5qb2luKCcsICcpICsgJ10nO1xuICAgICAgdmFyIGRlZiAgICA9IHsgc3RhdGU6IG51bGwsIHBhcmFtczogbnVsbCwgb3B0aW9uczogbnVsbCwgaHJlZjogbnVsbCB9O1xuICAgICAgdmFyIHVubGlua0luZm9GbiA9IG51bGw7XG4gICAgICB2YXIgaG9va0ZuO1xuXG4gICAgICBmdW5jdGlvbiBydW5TdGF0ZVJlZkxpbmsgKGdyb3VwKSB7XG4gICAgICAgIGRlZi5zdGF0ZSA9IGdyb3VwWzBdOyBkZWYucGFyYW1zID0gZ3JvdXBbMV07IGRlZi5vcHRpb25zID0gZ3JvdXBbMl07XG4gICAgICAgIGRlZi5ocmVmID0gJHN0YXRlLmhyZWYoZGVmLnN0YXRlLCBkZWYucGFyYW1zLCBkZWYub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHVubGlua0luZm9GbikgdW5saW5rSW5mb0ZuKCk7XG4gICAgICAgIGlmIChhY3RpdmUpIHVubGlua0luZm9GbiA9IGFjdGl2ZS4kJGFkZFN0YXRlSW5mbyhkZWYuc3RhdGUsIGRlZi5wYXJhbXMpO1xuICAgICAgICBpZiAoZGVmLmhyZWYpIGF0dHJzLiRzZXQodHlwZS5hdHRyLCBkZWYuaHJlZik7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaCwgcnVuU3RhdGVSZWZMaW5rLCB0cnVlKTtcbiAgICAgIHJ1blN0YXRlUmVmTGluayhzY29wZS4kZXZhbCh3YXRjaCkpO1xuXG4gICAgICBpZiAoIXR5cGUuY2xpY2thYmxlKSByZXR1cm47XG4gICAgICBob29rRm4gPSBjbGlja0hvb2soZWxlbWVudCwgJHN0YXRlLCAkdGltZW91dCwgdHlwZSwgZnVuY3Rpb24oKSB7IHJldHVybiBkZWY7IH0pO1xuICAgICAgZWxlbWVudFtlbGVtZW50Lm9uID8gJ29uJyA6ICdiaW5kJ10oXCJjbGlja1wiLCBob29rRm4pO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50W2VsZW1lbnQub2ZmID8gJ29mZicgOiAndW5iaW5kJ10oXCJjbGlja1wiLCBob29rRm4pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZVxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVBhcmFtc1xuICogQHJlcXVpcmVzICRpbnRlcnBvbGF0ZVxuICpcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGRpcmVjdGl2ZSB3b3JraW5nIGFsb25nc2lkZSB1aS1zcmVmIHRvIGFkZCBjbGFzc2VzIHRvIGFuIGVsZW1lbnQgd2hlbiB0aGVcbiAqIHJlbGF0ZWQgdWktc3JlZiBkaXJlY3RpdmUncyBzdGF0ZSBpcyBhY3RpdmUsIGFuZCByZW1vdmluZyB0aGVtIHdoZW4gaXQgaXMgaW5hY3RpdmUuXG4gKiBUaGUgcHJpbWFyeSB1c2UtY2FzZSBpcyB0byBzaW1wbGlmeSB0aGUgc3BlY2lhbCBhcHBlYXJhbmNlIG9mIG5hdmlnYXRpb24gbWVudXNcbiAqIHJlbHlpbmcgb24gYHVpLXNyZWZgLCBieSBoYXZpbmcgdGhlIFwiYWN0aXZlXCIgc3RhdGUncyBtZW51IGJ1dHRvbiBhcHBlYXIgZGlmZmVyZW50LFxuICogZGlzdGluZ3Vpc2hpbmcgaXQgZnJvbSB0aGUgaW5hY3RpdmUgbWVudSBpdGVtcy5cbiAqXG4gKiB1aS1zcmVmLWFjdGl2ZSBjYW4gbGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIHVpLXNyZWYgb3Igb24gYSBwYXJlbnQgZWxlbWVudC4gVGhlIGZpcnN0XG4gKiB1aS1zcmVmLWFjdGl2ZSBmb3VuZCBhdCB0aGUgc2FtZSBsZXZlbCBvciBhYm92ZSB0aGUgdWktc3JlZiB3aWxsIGJlIHVzZWQuXG4gKlxuICogV2lsbCBhY3RpdmF0ZSB3aGVuIHRoZSB1aS1zcmVmJ3MgdGFyZ2V0IHN0YXRlIG9yIGFueSBjaGlsZCBzdGF0ZSBpcyBhY3RpdmUuIElmIHlvdVxuICogbmVlZCB0byBhY3RpdmF0ZSBvbmx5IHdoZW4gdGhlIHVpLXNyZWYgdGFyZ2V0IHN0YXRlIGlzIGFjdGl2ZSBhbmQgKm5vdCogYW55IG9mXG4gKiBpdCdzIGNoaWxkcmVuLCB0aGVuIHlvdSB3aWxsIHVzZVxuICoge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktc3JlZi1hY3RpdmUtZXEgdWktc3JlZi1hY3RpdmUtZXF9XG4gKlxuICogQGV4YW1wbGVcbiAqIEdpdmVuIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGU6XG4gKiA8cHJlPlxuICogPHVsPlxuICogICA8bGkgdWktc3JlZi1hY3RpdmU9XCJhY3RpdmVcIiBjbGFzcz1cIml0ZW1cIj5cbiAqICAgICA8YSBocmVmIHVpLXNyZWY9XCJhcHAudXNlcih7dXNlcjogJ2JpbGJvYmFnZ2lucyd9KVwiPkBiaWxib2JhZ2dpbnM8L2E+XG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKlxuICpcbiAqIFdoZW4gdGhlIGFwcCBzdGF0ZSBpcyBcImFwcC51c2VyXCIgKG9yIGFueSBjaGlsZHJlbiBzdGF0ZXMpLCBhbmQgY29udGFpbnMgdGhlIHN0YXRlIHBhcmFtZXRlciBcInVzZXJcIiB3aXRoIHZhbHVlIFwiYmlsYm9iYWdnaW5zXCIsXG4gKiB0aGUgcmVzdWx0aW5nIEhUTUwgd2lsbCBhcHBlYXIgYXMgKG5vdGUgdGhlICdhY3RpdmUnIGNsYXNzKTpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT1cImFjdGl2ZVwiIGNsYXNzPVwiaXRlbSBhY3RpdmVcIj5cbiAqICAgICA8YSB1aS1zcmVmPVwiYXBwLnVzZXIoe3VzZXI6ICdiaWxib2JhZ2dpbnMnfSlcIiBocmVmPVwiL3VzZXJzL2JpbGJvYmFnZ2luc1wiPkBiaWxib2JhZ2dpbnM8L2E+XG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKlxuICogVGhlIGNsYXNzIG5hbWUgaXMgaW50ZXJwb2xhdGVkICoqb25jZSoqIGR1cmluZyB0aGUgZGlyZWN0aXZlcyBsaW5rIHRpbWUgKGFueSBmdXJ0aGVyIGNoYW5nZXMgdG8gdGhlXG4gKiBpbnRlcnBvbGF0ZWQgdmFsdWUgYXJlIGlnbm9yZWQpLlxuICpcbiAqIE11bHRpcGxlIGNsYXNzZXMgbWF5IGJlIHNwZWNpZmllZCBpbiBhIHNwYWNlLXNlcGFyYXRlZCBmb3JtYXQ6XG4gKiA8cHJlPlxuICogPHVsPlxuICogICA8bGkgdWktc3JlZi1hY3RpdmU9J2NsYXNzMSBjbGFzczIgY2xhc3MzJz5cbiAqICAgICA8YSB1aS1zcmVmPVwiYXBwLnVzZXJcIj5saW5rPC9hPlxuICogICA8L2xpPlxuICogPC91bD5cbiAqIDwvcHJlPlxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gcGFzcyB1aS1zcmVmLWFjdGl2ZSBhbiBleHByZXNzaW9uIHRoYXQgZXZhbHVhdGVzXG4gKiB0byBhbiBvYmplY3QgaGFzaCwgd2hvc2Uga2V5cyByZXByZXNlbnQgYWN0aXZlIGNsYXNzIG5hbWVzIGFuZCB3aG9zZVxuICogdmFsdWVzIHJlcHJlc2VudCB0aGUgcmVzcGVjdGl2ZSBzdGF0ZSBuYW1lcy9nbG9icy5cbiAqIHVpLXNyZWYtYWN0aXZlIHdpbGwgbWF0Y2ggaWYgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlICoqaW5jbHVkZXMqKiBhbnkgb2ZcbiAqIHRoZSBzcGVjaWZpZWQgc3RhdGUgbmFtZXMvZ2xvYnMsIGV2ZW4gdGhlIGFic3RyYWN0IG9uZXMuXG4gKlxuICogQEV4YW1wbGVcbiAqIEdpdmVuIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUsIHdpdGggXCJhZG1pblwiIGJlaW5nIGFuIGFic3RyYWN0IHN0YXRlOlxuICogPHByZT5cbiAqIDxkaXYgdWktc3JlZi1hY3RpdmU9XCJ7J2FjdGl2ZSc6ICdhZG1pbi4qJ31cIj5cbiAqICAgPGEgdWktc3JlZi1hY3RpdmU9XCJhY3RpdmVcIiB1aS1zcmVmPVwiYWRtaW4ucm9sZXNcIj5Sb2xlczwvYT5cbiAqIDwvZGl2PlxuICogPC9wcmU+XG4gKlxuICogV2hlbiB0aGUgY3VycmVudCBzdGF0ZSBpcyBcImFkbWluLnJvbGVzXCIgdGhlIFwiYWN0aXZlXCIgY2xhc3Mgd2lsbCBiZSBhcHBsaWVkXG4gKiB0byBib3RoIHRoZSA8ZGl2PiBhbmQgPGE+IGVsZW1lbnRzLiBJdCBpcyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IHRoZSBzdGF0ZVxuICogbmFtZXMvZ2xvYnMgcGFzc2VkIHRvIHVpLXNyZWYtYWN0aXZlIHNoYWRvdyB0aGUgc3RhdGUgcHJvdmlkZWQgYnkgdWktc3JlZi5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktc3JlZi1hY3RpdmUtZXFcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQYXJhbXNcbiAqIEByZXF1aXJlcyAkaW50ZXJwb2xhdGVcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHNhbWUgYXMge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktc3JlZi1hY3RpdmUgdWktc3JlZi1hY3RpdmV9IGJ1dCB3aWxsIG9ubHkgYWN0aXZhdGVcbiAqIHdoZW4gdGhlIGV4YWN0IHRhcmdldCBzdGF0ZSB1c2VkIGluIHRoZSBgdWktc3JlZmAgaXMgYWN0aXZlOyBubyBjaGlsZCBzdGF0ZXMuXG4gKlxuICovXG4kU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUuJGluamVjdCA9IFsnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uICRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZSgkc3RhdGUsICRzdGF0ZVBhcmFtcywgJGludGVycG9sYXRlKSB7XG4gIHJldHVybiAge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdGltZW91dCkge1xuICAgICAgdmFyIHN0YXRlcyA9IFtdLCBhY3RpdmVDbGFzc2VzID0ge30sIGFjdGl2ZUVxQ2xhc3MsIHVpU3JlZkFjdGl2ZTtcblxuICAgICAgLy8gVGhlcmUgcHJvYmFibHkgaXNuJ3QgbXVjaCBwb2ludCBpbiAkb2JzZXJ2aW5nIHRoaXNcbiAgICAgIC8vIHVpU3JlZkFjdGl2ZSBhbmQgdWlTcmVmQWN0aXZlRXEgc2hhcmUgdGhlIHNhbWUgZGlyZWN0aXZlIG9iamVjdCB3aXRoIHNvbWVcbiAgICAgIC8vIHNsaWdodCBkaWZmZXJlbmNlIGluIGxvZ2ljIHJvdXRpbmdcbiAgICAgIGFjdGl2ZUVxQ2xhc3MgPSAkaW50ZXJwb2xhdGUoJGF0dHJzLnVpU3JlZkFjdGl2ZUVxIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdWlTcmVmQWN0aXZlID0gJHNjb3BlLiRldmFsKCRhdHRycy51aVNyZWZBY3RpdmUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBEbyBub3RoaW5nLiB1aVNyZWZBY3RpdmUgaXMgbm90IGEgdmFsaWQgZXhwcmVzc2lvbi5cbiAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHVzaW5nICRpbnRlcnBvbGF0ZSBiZWxvd1xuICAgICAgfVxuICAgICAgdWlTcmVmQWN0aXZlID0gdWlTcmVmQWN0aXZlIHx8ICRpbnRlcnBvbGF0ZSgkYXR0cnMudWlTcmVmQWN0aXZlIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcbiAgICAgIGlmIChpc09iamVjdCh1aVNyZWZBY3RpdmUpKSB7XG4gICAgICAgIGZvckVhY2godWlTcmVmQWN0aXZlLCBmdW5jdGlvbihzdGF0ZU9yTmFtZSwgYWN0aXZlQ2xhc3MpIHtcbiAgICAgICAgICBpZiAoaXNTdHJpbmcoc3RhdGVPck5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgcmVmID0gcGFyc2VTdGF0ZVJlZihzdGF0ZU9yTmFtZSwgJHN0YXRlLmN1cnJlbnQubmFtZSk7XG4gICAgICAgICAgICBhZGRTdGF0ZShyZWYuc3RhdGUsICRzY29wZS4kZXZhbChyZWYucGFyYW1FeHByKSwgYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFsbG93IHVpU3JlZiB0byBjb21tdW5pY2F0ZSB3aXRoIHVpU3JlZkFjdGl2ZVtFcXVhbHNdXG4gICAgICB0aGlzLiQkYWRkU3RhdGVJbmZvID0gZnVuY3Rpb24gKG5ld1N0YXRlLCBuZXdQYXJhbXMpIHtcbiAgICAgICAgLy8gd2UgYWxyZWFkeSBnb3QgYW4gZXhwbGljaXQgc3RhdGUgcHJvdmlkZWQgYnkgdWktc3JlZi1hY3RpdmUsIHNvIHdlXG4gICAgICAgIC8vIHNoYWRvdyB0aGUgb25lIHRoYXQgY29tZXMgZnJvbSB1aS1zcmVmXG4gICAgICAgIGlmIChpc09iamVjdCh1aVNyZWZBY3RpdmUpICYmIHN0YXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZXJlZ2lzdGVyID0gYWRkU3RhdGUobmV3U3RhdGUsIG5ld1BhcmFtcywgdWlTcmVmQWN0aXZlKTtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgIHJldHVybiBkZXJlZ2lzdGVyO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIHVwZGF0ZSk7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZFN0YXRlKHN0YXRlTmFtZSwgc3RhdGVQYXJhbXMsIGFjdGl2ZUNsYXNzKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9ICRzdGF0ZS5nZXQoc3RhdGVOYW1lLCBzdGF0ZUNvbnRleHQoJGVsZW1lbnQpKTtcbiAgICAgICAgdmFyIHN0YXRlSGFzaCA9IGNyZWF0ZVN0YXRlSGFzaChzdGF0ZU5hbWUsIHN0YXRlUGFyYW1zKTtcblxuICAgICAgICB2YXIgc3RhdGVJbmZvID0ge1xuICAgICAgICAgIHN0YXRlOiBzdGF0ZSB8fCB7IG5hbWU6IHN0YXRlTmFtZSB9LFxuICAgICAgICAgIHBhcmFtczogc3RhdGVQYXJhbXMsXG4gICAgICAgICAgaGFzaDogc3RhdGVIYXNoXG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGVzLnB1c2goc3RhdGVJbmZvKTtcbiAgICAgICAgYWN0aXZlQ2xhc3Nlc1tzdGF0ZUhhc2hdID0gYWN0aXZlQ2xhc3M7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlbW92ZVN0YXRlKCkge1xuICAgICAgICAgIHZhciBpZHggPSBzdGF0ZXMuaW5kZXhPZihzdGF0ZUluZm8pO1xuICAgICAgICAgIGlmIChpZHggIT09IC0xKSBzdGF0ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlXG4gICAgICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IFtwYXJhbXNdXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZVN0YXRlSGFzaChzdGF0ZSwgcGFyYW1zKSB7XG4gICAgICAgIGlmICghaXNTdHJpbmcoc3RhdGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGF0ZSBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3QocGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSArIHRvSnNvbihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcyA9ICRzY29wZS4kZXZhbChwYXJhbXMpO1xuICAgICAgICBpZiAoaXNPYmplY3QocGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSArIHRvSnNvbihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHJvdXRlIHN0YXRlXG4gICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFueU1hdGNoKHN0YXRlc1tpXS5zdGF0ZSwgc3RhdGVzW2ldLnBhcmFtcykpIHtcbiAgICAgICAgICAgIGFkZENsYXNzKCRlbGVtZW50LCBhY3RpdmVDbGFzc2VzW3N0YXRlc1tpXS5oYXNoXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCRlbGVtZW50LCBhY3RpdmVDbGFzc2VzW3N0YXRlc1tpXS5oYXNoXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4YWN0TWF0Y2goc3RhdGVzW2ldLnN0YXRlLCBzdGF0ZXNbaV0ucGFyYW1zKSkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoJGVsZW1lbnQsIGFjdGl2ZUVxQ2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcygkZWxlbWVudCwgYWN0aXZlRXFDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHsgJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyBlbC5hZGRDbGFzcyhjbGFzc05hbWUpOyB9KTsgfVxuICAgICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkgeyBlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpOyB9XG4gICAgICBmdW5jdGlvbiBhbnlNYXRjaChzdGF0ZSwgcGFyYW1zKSB7IHJldHVybiAkc3RhdGUuaW5jbHVkZXMoc3RhdGUubmFtZSwgcGFyYW1zKTsgfVxuICAgICAgZnVuY3Rpb24gZXhhY3RNYXRjaChzdGF0ZSwgcGFyYW1zKSB7IHJldHVybiAkc3RhdGUuaXMoc3RhdGUubmFtZSwgcGFyYW1zKTsgfVxuXG4gICAgICB1cGRhdGUoKTtcbiAgICB9XVxuICB9O1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJylcbiAgLmRpcmVjdGl2ZSgndWlTcmVmJywgJFN0YXRlUmVmRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCd1aVNyZWZBY3RpdmUnLCAkU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3VpU3JlZkFjdGl2ZUVxJywgJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCd1aVN0YXRlJywgJFN0YXRlUmVmRHluYW1pY0RpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmZpbHRlcjppc1N0YXRlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRyYW5zbGF0ZXMgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19pcyAkc3RhdGUuaXMoXCJzdGF0ZU5hbWVcIil9LlxuICovXG4kSXNTdGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckc3RhdGUnXTtcbmZ1bmN0aW9uICRJc1N0YXRlRmlsdGVyKCRzdGF0ZSkge1xuICB2YXIgaXNGaWx0ZXIgPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcykge1xuICAgIHJldHVybiAkc3RhdGUuaXMoc3RhdGUsIHBhcmFtcyk7XG4gIH07XG4gIGlzRmlsdGVyLiRzdGF0ZWZ1bCA9IHRydWU7XG4gIHJldHVybiBpc0ZpbHRlcjtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZmlsdGVyOmluY2x1ZGVkQnlTdGF0ZVxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUcmFuc2xhdGVzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaW5jbHVkZXMgJHN0YXRlLmluY2x1ZGVzKCdmdWxsT3JQYXJ0aWFsU3RhdGVOYW1lJyl9LlxuICovXG4kSW5jbHVkZWRCeVN0YXRlRmlsdGVyLiRpbmplY3QgPSBbJyRzdGF0ZSddO1xuZnVuY3Rpb24gJEluY2x1ZGVkQnlTdGF0ZUZpbHRlcigkc3RhdGUpIHtcbiAgdmFyIGluY2x1ZGVzRmlsdGVyID0gZnVuY3Rpb24gKHN0YXRlLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJHN0YXRlLmluY2x1ZGVzKHN0YXRlLCBwYXJhbXMsIG9wdGlvbnMpO1xuICB9O1xuICBpbmNsdWRlc0ZpbHRlci4kc3RhdGVmdWwgPSB0cnVlO1xuICByZXR1cm4gIGluY2x1ZGVzRmlsdGVyO1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJylcbiAgLmZpbHRlcignaXNTdGF0ZScsICRJc1N0YXRlRmlsdGVyKVxuICAuZmlsdGVyKCdpbmNsdWRlZEJ5U3RhdGUnLCAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKTtcbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xuLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNi40XG4gKiAoYykgMjAxMC0yMDE3IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIpIHsndXNlIHN0cmljdCc7XG5cbnZhciAkcmVzb3VyY2VNaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyKCckcmVzb3VyY2UnKTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBhbmQgcmVnZXggdG8gbG9va3VwIGEgZG90dGVkIHBhdGggb24gYW4gb2JqZWN0XG4vLyBzdG9wcGluZyBhdCB1bmRlZmluZWQvbnVsbC4gIFRoZSBwYXRoIG11c3QgYmUgY29tcG9zZWQgb2YgQVNDSUlcbi8vIGlkZW50aWZpZXJzIChqdXN0IGxpa2UgJHBhcnNlKVxudmFyIE1FTUJFUl9OQU1FX1JFR0VYID0gL14oXFwuW2EtekEtWl8kQF1bMC05YS16QS1aXyRAXSopKyQvO1xuXG5mdW5jdGlvbiBpc1ZhbGlkRG90dGVkUGF0aChwYXRoKSB7XG4gIHJldHVybiAocGF0aCAhPSBudWxsICYmIHBhdGggIT09ICcnICYmIHBhdGggIT09ICdoYXNPd25Qcm9wZXJ0eScgJiZcbiAgICAgIE1FTUJFUl9OQU1FX1JFR0VYLnRlc3QoJy4nICsgcGF0aCkpO1xufVxuXG5mdW5jdGlvbiBsb29rdXBEb3R0ZWRQYXRoKG9iaiwgcGF0aCkge1xuICBpZiAoIWlzVmFsaWREb3R0ZWRQYXRoKHBhdGgpKSB7XG4gICAgdGhyb3cgJHJlc291cmNlTWluRXJyKCdiYWRtZW1iZXInLCAnRG90dGVkIG1lbWJlciBwYXRoIFwiQHswfVwiIGlzIGludmFsaWQuJywgcGF0aCk7XG4gIH1cbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIGZvciAodmFyIGkgPSAwLCBpaSA9IGtleXMubGVuZ3RoOyBpIDwgaWkgJiYgYW5ndWxhci5pc0RlZmluZWQob2JqKTsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgb2JqID0gKG9iaiAhPT0gbnVsbCkgPyBvYmpba2V5XSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QgYW5kIGNsZWFyIG90aGVyIGZpZWxkcyBmcm9tIHRoZSBkZXN0aW5hdGlvblxuICovXG5mdW5jdGlvbiBzaGFsbG93Q2xlYXJBbmRDb3B5KHNyYywgZHN0KSB7XG4gIGRzdCA9IGRzdCB8fCB7fTtcblxuICBhbmd1bGFyLmZvckVhY2goZHN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgZGVsZXRlIGRzdFtrZXldO1xuICB9KTtcblxuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ1Jlc291cmNlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nUmVzb3VyY2VcbiAqXG4gKiBUaGUgYG5nUmVzb3VyY2VgIG1vZHVsZSBwcm92aWRlcyBpbnRlcmFjdGlvbiBzdXBwb3J0IHdpdGggUkVTVGZ1bCBzZXJ2aWNlc1xuICogdmlhIHRoZSAkcmVzb3VyY2Ugc2VydmljZS5cbiAqXG4gKlxuICogPGRpdiBkb2MtbW9kdWxlLWNvbXBvbmVudHM9XCJuZ1Jlc291cmNlXCI+PC9kaXY+XG4gKlxuICogU2VlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVByb3ZpZGVyfSBhbmQge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlfSBmb3IgdXNhZ2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRyZXNvdXJjZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIGAkcmVzb3VyY2VQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2V9XG4gKiBzZXJ2aWNlLlxuICpcbiAqICMjIERlcGVuZGVuY2llc1xuICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ1Jlc291cmNlIH0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAqXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHJlc291cmNlXG4gKiBAcmVxdWlyZXMgJGh0dHBcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKiBAcmVxdWlyZXMgJHFcbiAqIEByZXF1aXJlcyBuZy4kdGltZW91dFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmYWN0b3J5IHdoaWNoIGNyZWF0ZXMgYSByZXNvdXJjZSBvYmplY3QgdGhhdCBsZXRzIHlvdSBpbnRlcmFjdCB3aXRoXG4gKiBbUkVTVGZ1bF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SZXByZXNlbnRhdGlvbmFsX1N0YXRlX1RyYW5zZmVyKSBzZXJ2ZXItc2lkZSBkYXRhIHNvdXJjZXMuXG4gKlxuICogVGhlIHJldHVybmVkIHJlc291cmNlIG9iamVjdCBoYXMgYWN0aW9uIG1ldGhvZHMgd2hpY2ggcHJvdmlkZSBoaWdoLWxldmVsIGJlaGF2aW9ycyB3aXRob3V0XG4gKiB0aGUgbmVlZCB0byBpbnRlcmFjdCB3aXRoIHRoZSBsb3cgbGV2ZWwge0BsaW5rIG5nLiRodHRwICRodHRwfSBzZXJ2aWNlLlxuICpcbiAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgbmdSZXNvdXJjZSBgbmdSZXNvdXJjZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gKlxuICogQnkgZGVmYXVsdCwgdHJhaWxpbmcgc2xhc2hlcyB3aWxsIGJlIHN0cmlwcGVkIGZyb20gdGhlIGNhbGN1bGF0ZWQgVVJMcyxcbiAqIHdoaWNoIGNhbiBwb3NlIHByb2JsZW1zIHdpdGggc2VydmVyIGJhY2tlbmRzIHRoYXQgZG8gbm90IGV4cGVjdCB0aGF0XG4gKiBiZWhhdmlvci4gIFRoaXMgY2FuIGJlIGRpc2FibGVkIGJ5IGNvbmZpZ3VyaW5nIHRoZSBgJHJlc291cmNlUHJvdmlkZXJgIGxpa2VcbiAqIHRoaXM6XG4gKlxuICogYGBganNcbiAgICAgYXBwLmNvbmZpZyhbJyRyZXNvdXJjZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJlc291cmNlUHJvdmlkZXIpIHtcbiAgICAgICAvLyBEb24ndCBzdHJpcCB0cmFpbGluZyBzbGFzaGVzIGZyb20gY2FsY3VsYXRlZCBVUkxzXG4gICAgICAgJHJlc291cmNlUHJvdmlkZXIuZGVmYXVsdHMuc3RyaXBUcmFpbGluZ1NsYXNoZXMgPSBmYWxzZTtcbiAgICAgfV0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBBIHBhcmFtZXRlcml6ZWQgVVJMIHRlbXBsYXRlIHdpdGggcGFyYW1ldGVycyBwcmVmaXhlZCBieSBgOmAgYXMgaW5cbiAqICAgYC91c2VyLzp1c2VybmFtZWAuIElmIHlvdSBhcmUgdXNpbmcgYSBVUkwgd2l0aCBhIHBvcnQgbnVtYmVyIChlLmcuXG4gKiAgIGBodHRwOi8vZXhhbXBsZS5jb206ODA4MC9hcGlgKSwgaXQgd2lsbCBiZSByZXNwZWN0ZWQuXG4gKlxuICogICBJZiB5b3UgYXJlIHVzaW5nIGEgdXJsIHdpdGggYSBzdWZmaXgsIGp1c3QgYWRkIHRoZSBzdWZmaXgsIGxpa2UgdGhpczpcbiAqICAgYCRyZXNvdXJjZSgnaHR0cDovL2V4YW1wbGUuY29tL3Jlc291cmNlLmpzb24nKWAgb3IgYCRyZXNvdXJjZSgnaHR0cDovL2V4YW1wbGUuY29tLzppZC5qc29uJylgXG4gKiAgIG9yIGV2ZW4gYCRyZXNvdXJjZSgnaHR0cDovL2V4YW1wbGUuY29tL3Jlc291cmNlLzpyZXNvdXJjZV9pZC46Zm9ybWF0JylgXG4gKiAgIElmIHRoZSBwYXJhbWV0ZXIgYmVmb3JlIHRoZSBzdWZmaXggaXMgZW1wdHksIDpyZXNvdXJjZV9pZCBpbiB0aGlzIGNhc2UsIHRoZW4gdGhlIGAvLmAgd2lsbCBiZVxuICogICBjb2xsYXBzZWQgZG93biB0byBhIHNpbmdsZSBgLmAuICBJZiB5b3UgbmVlZCB0aGlzIHNlcXVlbmNlIHRvIGFwcGVhciBhbmQgbm90IGNvbGxhcHNlIHRoZW4geW91XG4gKiAgIGNhbiBlc2NhcGUgaXQgd2l0aCBgL1xcLmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q9fSBwYXJhbURlZmF1bHRzIERlZmF1bHQgdmFsdWVzIGZvciBgdXJsYCBwYXJhbWV0ZXJzLiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiBpblxuICogICBgYWN0aW9uc2AgbWV0aG9kcy4gSWYgYSBwYXJhbWV0ZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgZXZlcnkgdGltZVxuICogICBhIHBhcmFtIHZhbHVlIG5lZWRzIHRvIGJlIG9idGFpbmVkIGZvciBhIHJlcXVlc3QgKHVubGVzcyB0aGUgcGFyYW0gd2FzIG92ZXJyaWRkZW4pLiBUaGUgZnVuY3Rpb25cbiAqICAgd2lsbCBiZSBwYXNzZWQgdGhlIGN1cnJlbnQgZGF0YSB2YWx1ZSBhcyBhbiBhcmd1bWVudC5cbiAqXG4gKiAgIEVhY2gga2V5IHZhbHVlIGluIHRoZSBwYXJhbWV0ZXIgb2JqZWN0IGlzIGZpcnN0IGJvdW5kIHRvIHVybCB0ZW1wbGF0ZSBpZiBwcmVzZW50IGFuZCB0aGVuIGFueVxuICogICBleGNlc3Mga2V5cyBhcmUgYXBwZW5kZWQgdG8gdGhlIHVybCBzZWFyY2ggcXVlcnkgYWZ0ZXIgdGhlIGA/YC5cbiAqXG4gKiAgIEdpdmVuIGEgdGVtcGxhdGUgYC9wYXRoLzp2ZXJiYCBhbmQgcGFyYW1ldGVyIGB7dmVyYjonZ3JlZXQnLCBzYWx1dGF0aW9uOidIZWxsbyd9YCByZXN1bHRzIGluXG4gKiAgIFVSTCBgL3BhdGgvZ3JlZXQ/c2FsdXRhdGlvbj1IZWxsb2AuXG4gKlxuICogICBJZiB0aGUgcGFyYW1ldGVyIHZhbHVlIGlzIHByZWZpeGVkIHdpdGggYEBgLCB0aGVuIHRoZSB2YWx1ZSBmb3IgdGhhdCBwYXJhbWV0ZXIgd2lsbCBiZVxuICogICBleHRyYWN0ZWQgZnJvbSB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBvbiB0aGUgYGRhdGFgIG9iamVjdCAocHJvdmlkZWQgd2hlbiBjYWxsaW5nIGFjdGlvbnNcbiAqICAgd2l0aCBhIHJlcXVlc3QgYm9keSkuXG4gKiAgIEZvciBleGFtcGxlLCBpZiB0aGUgYGRlZmF1bHRQYXJhbWAgb2JqZWN0IGlzIGB7c29tZVBhcmFtOiAnQHNvbWVQcm9wJ31gIHRoZW4gdGhlIHZhbHVlIG9mXG4gKiAgIGBzb21lUGFyYW1gIHdpbGwgYmUgYGRhdGEuc29tZVByb3BgLlxuICogICBOb3RlIHRoYXQgdGhlIHBhcmFtZXRlciB3aWxsIGJlIGlnbm9yZWQsIHdoZW4gY2FsbGluZyBhIFwiR0VUXCIgYWN0aW9uIG1ldGhvZCAoaS5lLiBhbiBhY3Rpb25cbiAqICAgbWV0aG9kIHRoYXQgZG9lcyBub3QgYWNjZXB0IGEgcmVxdWVzdCBib2R5KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0LjxPYmplY3Q+PX0gYWN0aW9ucyBIYXNoIHdpdGggZGVjbGFyYXRpb24gb2YgY3VzdG9tIGFjdGlvbnMgdGhhdCB3aWxsIGJlIGF2YWlsYWJsZVxuICogICBpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdCBzZXQgb2YgcmVzb3VyY2UgYWN0aW9ucyAoc2VlIGJlbG93KS4gSWYgYSBjdXN0b20gYWN0aW9uIGhhcyB0aGUgc2FtZVxuICogICBrZXkgYXMgYSBkZWZhdWx0IGFjdGlvbiAoZS5nLiBgc2F2ZWApLCB0aGVuIHRoZSBkZWZhdWx0IGFjdGlvbiB3aWxsIGJlICpvdmVyd3JpdHRlbiosIGFuZCBub3RcbiAqICAgZXh0ZW5kZWQuXG4gKlxuICogICBUaGUgZGVjbGFyYXRpb24gc2hvdWxkIGJlIGNyZWF0ZWQgaW4gdGhlIGZvcm1hdCBvZiB7QGxpbmsgbmcuJGh0dHAjdXNhZ2UgJGh0dHAuY29uZmlnfTpcbiAqXG4gKiAgICAgICB7YWN0aW9uMToge21ldGhvZDo/LCBwYXJhbXM6PywgaXNBcnJheTo/LCBoZWFkZXJzOj8sIC4uLn0sXG4gKiAgICAgICAgYWN0aW9uMjoge21ldGhvZDo/LCBwYXJhbXM6PywgaXNBcnJheTo/LCBoZWFkZXJzOj8sIC4uLn0sXG4gKiAgICAgICAgLi4ufVxuICpcbiAqICAgV2hlcmU6XG4gKlxuICogICAtICoqYGFjdGlvbmAqKiDigJMge3N0cmluZ30g4oCTIFRoZSBuYW1lIG9mIGFjdGlvbi4gVGhpcyBuYW1lIGJlY29tZXMgdGhlIG5hbWUgb2YgdGhlIG1ldGhvZCBvblxuICogICAgIHlvdXIgcmVzb3VyY2Ugb2JqZWN0LlxuICogICAtICoqYG1ldGhvZGAqKiDigJMge3N0cmluZ30g4oCTIENhc2UgaW5zZW5zaXRpdmUgSFRUUCBtZXRob2QgKGUuZy4gYEdFVGAsIGBQT1NUYCwgYFBVVGAsXG4gKiAgICAgYERFTEVURWAsIGBKU09OUGAsIGV0YykuXG4gKiAgIC0gKipgcGFyYW1zYCoqIOKAkyB7T2JqZWN0PX0g4oCTIE9wdGlvbmFsIHNldCBvZiBwcmUtYm91bmQgcGFyYW1ldGVycyBmb3IgdGhpcyBhY3Rpb24uIElmIGFueSBvZlxuICogICAgIHRoZSBwYXJhbWV0ZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgZXZlcnkgdGltZSB3aGVuIGEgcGFyYW0gdmFsdWUgbmVlZHMgdG9cbiAqICAgICBiZSBvYnRhaW5lZCBmb3IgYSByZXF1ZXN0ICh1bmxlc3MgdGhlIHBhcmFtIHdhcyBvdmVycmlkZGVuKS4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRoZVxuICogICAgIGN1cnJlbnQgZGF0YSB2YWx1ZSBhcyBhbiBhcmd1bWVudC5cbiAqICAgLSAqKmB1cmxgKiog4oCTIHtzdHJpbmd9IOKAkyBhY3Rpb24gc3BlY2lmaWMgYHVybGAgb3ZlcnJpZGUuIFRoZSB1cmwgdGVtcGxhdGluZyBpcyBzdXBwb3J0ZWQganVzdFxuICogICAgIGxpa2UgZm9yIHRoZSByZXNvdXJjZS1sZXZlbCB1cmxzLlxuICogICAtICoqYGlzQXJyYXlgKiog4oCTIHtib29sZWFuPX0g4oCTIElmIHRydWUgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0IGZvciB0aGlzIGFjdGlvbiBpcyBhbiBhcnJheSxcbiAqICAgICBzZWUgYHJldHVybnNgIHNlY3Rpb24uXG4gKiAgIC0gKipgdHJhbnNmb3JtUmVxdWVzdGAqKiDigJNcbiAqICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJNcbiAqICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAqICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAqICAgICBCeSBkZWZhdWx0LCB0cmFuc2Zvcm1SZXF1ZXN0IHdpbGwgY29udGFpbiBvbmUgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlIHJlcXVlc3QgZGF0YSBpc1xuICogICAgIGFuIG9iamVjdCBhbmQgc2VyaWFsaXplcyBpdCB1c2luZyBgYW5ndWxhci50b0pzb25gLiBUbyBwcmV2ZW50IHRoaXMgYmVoYXZpb3IsIHNldFxuICogICAgIGB0cmFuc2Zvcm1SZXF1ZXN0YCB0byBhbiBlbXB0eSBhcnJheTogYHRyYW5zZm9ybVJlcXVlc3Q6IFtdYFxuICogICAtICoqYHRyYW5zZm9ybVJlc3BvbnNlYCoqIOKAk1xuICogICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKT59YCDigJNcbiAqICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAqICAgICByZXNwb25zZSBib2R5LCBoZWFkZXJzIGFuZCBzdGF0dXMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKVxuICogICAgIHZlcnNpb24uXG4gKiAgICAgQnkgZGVmYXVsdCwgdHJhbnNmb3JtUmVzcG9uc2Ugd2lsbCBjb250YWluIG9uZSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgcmVzcG9uc2UgbG9va3NcbiAqICAgICBsaWtlIGEgSlNPTiBzdHJpbmcgYW5kIGRlc2VyaWFsaXplcyBpdCB1c2luZyBgYW5ndWxhci5mcm9tSnNvbmAuIFRvIHByZXZlbnQgdGhpcyBiZWhhdmlvcixcbiAqICAgICBzZXQgYHRyYW5zZm9ybVJlc3BvbnNlYCB0byBhbiBlbXB0eSBhcnJheTogYHRyYW5zZm9ybVJlc3BvbnNlOiBbXWBcbiAqICAgLSAqKmBjYWNoZWAqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlXG4gKiAgICAgR0VUIHJlcXVlc3QsIG90aGVyd2lzZSBpZiBhIGNhY2hlIGluc3RhbmNlIGJ1aWx0IHdpdGhcbiAqICAgICB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSBpcyBzdXBwbGllZCwgdGhpcyBjYWNoZSB3aWxsIGJlIHVzZWQgZm9yXG4gKiAgICAgY2FjaGluZy5cbiAqICAgLSAqKmB0aW1lb3V0YCoqIOKAkyBge251bWJlcn1gIOKAkyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcy48YnIgLz5cbiAqICAgICAqKk5vdGU6KiogSW4gY29udHJhc3QgdG8ge0BsaW5rIG5nLiRodHRwI3VzYWdlICRodHRwLmNvbmZpZ30sIHtAbGluayBuZy4kcSBwcm9taXNlc30gYXJlXG4gKiAgICAgKipub3QqKiBzdXBwb3J0ZWQgaW4gJHJlc291cmNlLCBiZWNhdXNlIHRoZSBzYW1lIHZhbHVlIHdvdWxkIGJlIHVzZWQgZm9yIG11bHRpcGxlIHJlcXVlc3RzLlxuICogICAgIElmIHlvdSBhcmUgbG9va2luZyBmb3IgYSB3YXkgdG8gY2FuY2VsIHJlcXVlc3RzLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGNhbmNlbGxhYmxlYCBvcHRpb24uXG4gKiAgIC0gKipgY2FuY2VsbGFibGVgKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBpZiBzZXQgdG8gdHJ1ZSwgdGhlIHJlcXVlc3QgbWFkZSBieSBhIFwibm9uLWluc3RhbmNlXCIgY2FsbFxuICogICAgIHdpbGwgYmUgY2FuY2VsbGVkIChpZiBub3QgYWxyZWFkeSBjb21wbGV0ZWQpIGJ5IGNhbGxpbmcgYCRjYW5jZWxSZXF1ZXN0KClgIG9uIHRoZSBjYWxsJ3NcbiAqICAgICByZXR1cm4gdmFsdWUuIENhbGxpbmcgYCRjYW5jZWxSZXF1ZXN0KClgIGZvciBhIG5vbi1jYW5jZWxsYWJsZSBvciBhbiBhbHJlYWR5XG4gKiAgICAgY29tcGxldGVkL2NhbmNlbGxlZCByZXF1ZXN0IHdpbGwgaGF2ZSBubyBlZmZlY3QuPGJyIC8+XG4gKiAgIC0gKipgd2l0aENyZWRlbnRpYWxzYCoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGVcbiAqICAgICBYSFIgb2JqZWN0LiBTZWVcbiAqICAgICBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vaHR0cF9hY2Nlc3NfY29udHJvbCNzZWN0aW9uXzUpXG4gKiAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiAgIC0gKipgcmVzcG9uc2VUeXBlYCoqIC0gYHtzdHJpbmd9YCAtIHNlZVxuICogICAgIFtyZXF1ZXN0VHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vWE1MSHR0cFJlcXVlc3QjcmVzcG9uc2VUeXBlKS5cbiAqICAgLSAqKmBpbnRlcmNlcHRvcmAqKiAtIGB7T2JqZWN0PX1gIC0gVGhlIGludGVyY2VwdG9yIG9iamVjdCBoYXMgdHdvIG9wdGlvbmFsIG1ldGhvZHMgLVxuICogICAgIGByZXNwb25zZWAgYW5kIGByZXNwb25zZUVycm9yYC4gQm90aCBgcmVzcG9uc2VgIGFuZCBgcmVzcG9uc2VFcnJvcmAgaW50ZXJjZXB0b3JzIGdldCBjYWxsZWRcbiAqICAgICB3aXRoIGBodHRwIHJlc3BvbnNlYCBvYmplY3QuIFNlZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHAgaW50ZXJjZXB0b3JzfS5cbiAqICAgLSAqKmBoYXNCb2R5YCoqIC0gYHtib29sZWFufWAgLSBhbGxvd3MgdG8gc3BlY2lmeSBpZiBhIHJlcXVlc3QgYm9keSBzaG91bGQgYmUgaW5jbHVkZWQgb3Igbm90LlxuICogICAgIElmIG5vdCBzcGVjaWZpZWQgb25seSBQT1NULCBQVVQgYW5kIFBBVENIIHJlcXVlc3RzIHdpbGwgaGF2ZSBhIGJvZHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgSGFzaCB3aXRoIGN1c3RvbSBzZXR0aW5ncyB0aGF0IHNob3VsZCBleHRlbmQgdGhlXG4gKiAgIGRlZmF1bHQgYCRyZXNvdXJjZVByb3ZpZGVyYCBiZWhhdmlvci4gIFRoZSBzdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogICAtICoqYHN0cmlwVHJhaWxpbmdTbGFzaGVzYCoqIOKAkyB7Ym9vbGVhbn0g4oCTIElmIHRydWUgdGhlbiB0aGUgdHJhaWxpbmdcbiAqICAgc2xhc2hlcyBmcm9tIGFueSBjYWxjdWxhdGVkIFVSTCB3aWxsIGJlIHN0cmlwcGVkLiAoRGVmYXVsdHMgdG8gdHJ1ZS4pXG4gKiAgIC0gKipgY2FuY2VsbGFibGVgKiog4oCTIHtib29sZWFufSDigJMgSWYgdHJ1ZSwgdGhlIHJlcXVlc3QgbWFkZSBieSBhIFwibm9uLWluc3RhbmNlXCIgY2FsbCB3aWxsIGJlXG4gKiAgIGNhbmNlbGxlZCAoaWYgbm90IGFscmVhZHkgY29tcGxldGVkKSBieSBjYWxsaW5nIGAkY2FuY2VsUmVxdWVzdCgpYCBvbiB0aGUgY2FsbCdzIHJldHVybiB2YWx1ZS5cbiAqICAgVGhpcyBjYW4gYmUgb3ZlcndyaXR0ZW4gcGVyIGFjdGlvbi4gKERlZmF1bHRzIHRvIGZhbHNlLilcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBIHJlc291cmNlIFwiY2xhc3NcIiBvYmplY3Qgd2l0aCBtZXRob2RzIGZvciB0aGUgZGVmYXVsdCBzZXQgb2YgcmVzb3VyY2UgYWN0aW9uc1xuICogICBvcHRpb25hbGx5IGV4dGVuZGVkIHdpdGggY3VzdG9tIGBhY3Rpb25zYC4gVGhlIGRlZmF1bHQgc2V0IGNvbnRhaW5zIHRoZXNlIGFjdGlvbnM6XG4gKiAgIGBgYGpzXG4gKiAgIHsgJ2dldCc6ICAgIHttZXRob2Q6J0dFVCd9LFxuICogICAgICdzYXZlJzogICB7bWV0aG9kOidQT1NUJ30sXG4gKiAgICAgJ3F1ZXJ5JzogIHttZXRob2Q6J0dFVCcsIGlzQXJyYXk6dHJ1ZX0sXG4gKiAgICAgJ3JlbW92ZSc6IHttZXRob2Q6J0RFTEVURSd9LFxuICogICAgICdkZWxldGUnOiB7bWV0aG9kOidERUxFVEUnfSB9O1xuICogICBgYGBcbiAqXG4gKiAgIENhbGxpbmcgdGhlc2UgbWV0aG9kcyBpbnZva2UgYW4ge0BsaW5rIG5nLiRodHRwfSB3aXRoIHRoZSBzcGVjaWZpZWQgaHR0cCBtZXRob2QsXG4gKiAgIGRlc3RpbmF0aW9uIGFuZCBwYXJhbWV0ZXJzLiBXaGVuIHRoZSBkYXRhIGlzIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciB0aGVuIHRoZSBvYmplY3QgaXMgYW5cbiAqICAgaW5zdGFuY2Ugb2YgdGhlIHJlc291cmNlIGNsYXNzLiBUaGUgYWN0aW9ucyBgc2F2ZWAsIGByZW1vdmVgIGFuZCBgZGVsZXRlYCBhcmUgYXZhaWxhYmxlIG9uIGl0XG4gKiAgIGFzICBtZXRob2RzIHdpdGggdGhlIGAkYCBwcmVmaXguIFRoaXMgYWxsb3dzIHlvdSB0byBlYXNpbHkgcGVyZm9ybSBDUlVEIG9wZXJhdGlvbnMgKGNyZWF0ZSxcbiAqICAgcmVhZCwgdXBkYXRlLCBkZWxldGUpIG9uIHNlcnZlci1zaWRlIGRhdGEgbGlrZSB0aGlzOlxuICogICBgYGBqc1xuICogICB2YXIgVXNlciA9ICRyZXNvdXJjZSgnL3VzZXIvOnVzZXJJZCcsIHt1c2VySWQ6J0BpZCd9KTtcbiAqICAgdmFyIHVzZXIgPSBVc2VyLmdldCh7dXNlcklkOjEyM30sIGZ1bmN0aW9uKCkge1xuICogICAgIHVzZXIuYWJjID0gdHJ1ZTtcbiAqICAgICB1c2VyLiRzYXZlKCk7XG4gKiAgIH0pO1xuICogICBgYGBcbiAqXG4gKiAgIEl0IGlzIGltcG9ydGFudCB0byByZWFsaXplIHRoYXQgaW52b2tpbmcgYSAkcmVzb3VyY2Ugb2JqZWN0IG1ldGhvZCBpbW1lZGlhdGVseSByZXR1cm5zIGFuXG4gKiAgIGVtcHR5IHJlZmVyZW5jZSAob2JqZWN0IG9yIGFycmF5IGRlcGVuZGluZyBvbiBgaXNBcnJheWApLiBPbmNlIHRoZSBkYXRhIGlzIHJldHVybmVkIGZyb20gdGhlXG4gKiAgIHNlcnZlciB0aGUgZXhpc3RpbmcgcmVmZXJlbmNlIGlzIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YS4gVGhpcyBpcyBhIHVzZWZ1bCB0cmljayBzaW5jZVxuICogICB1c3VhbGx5IHRoZSByZXNvdXJjZSBpcyBhc3NpZ25lZCB0byBhIG1vZGVsIHdoaWNoIGlzIHRoZW4gcmVuZGVyZWQgYnkgdGhlIHZpZXcuIEhhdmluZyBhbiBlbXB0eVxuICogICBvYmplY3QgcmVzdWx0cyBpbiBubyByZW5kZXJpbmcsIG9uY2UgdGhlIGRhdGEgYXJyaXZlcyBmcm9tIHRoZSBzZXJ2ZXIgdGhlbiB0aGUgb2JqZWN0IGlzXG4gKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBkYXRhIGFuZCB0aGUgdmlldyBhdXRvbWF0aWNhbGx5IHJlLXJlbmRlcnMgaXRzZWxmIHNob3dpbmcgdGhlIG5ldyBkYXRhLiBUaGlzXG4gKiAgIG1lYW5zIHRoYXQgaW4gbW9zdCBjYXNlcyBvbmUgbmV2ZXIgaGFzIHRvIHdyaXRlIGEgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSBhY3Rpb24gbWV0aG9kcy5cbiAqXG4gKiAgIFRoZSBhY3Rpb24gbWV0aG9kcyBvbiB0aGUgY2xhc3Mgb2JqZWN0IG9yIGluc3RhbmNlIG9iamVjdCBjYW4gYmUgaW52b2tlZCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqICAgcGFyYW1ldGVyczpcbiAqXG4gKiAgIC0gXCJjbGFzc1wiIGFjdGlvbnMgd2l0aG91dCBhIGJvZHk6IGBSZXNvdXJjZS5hY3Rpb24oW3BhcmFtZXRlcnNdLCBbc3VjY2Vzc10sIFtlcnJvcl0pYFxuICogICAtIFwiY2xhc3NcIiBhY3Rpb25zIHdpdGggYSBib2R5OiBgUmVzb3VyY2UuYWN0aW9uKFtwYXJhbWV0ZXJzXSwgcG9zdERhdGEsIFtzdWNjZXNzXSwgW2Vycm9yXSlgXG4gKiAgIC0gaW5zdGFuY2UgYWN0aW9uczogYGluc3RhbmNlLiRhY3Rpb24oW3BhcmFtZXRlcnNdLCBbc3VjY2Vzc10sIFtlcnJvcl0pYFxuICpcbiAqXG4gKiAgIFdoZW4gY2FsbGluZyBpbnN0YW5jZSBtZXRob2RzLCB0aGUgaW5zdGFuY2UgaXRzZWxmIGlzIHVzZWQgYXMgdGhlIHJlcXVlc3QgYm9keSAoaWYgdGhlIGFjdGlvblxuICogICBzaG91bGQgaGF2ZSBhIGJvZHkpLiBCeSBkZWZhdWx0LCBvbmx5IGFjdGlvbnMgdXNpbmcgYFBPU1RgLCBgUFVUYCBvciBgUEFUQ0hgIGhhdmUgcmVxdWVzdFxuICogICBib2RpZXMsIGJ1dCB5b3UgY2FuIHVzZSB0aGUgYGhhc0JvZHlgIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIHNwZWNpZnkgd2hldGhlciBhbiBhY3Rpb25cbiAqICAgc2hvdWxkIGhhdmUgYSBib2R5IG9yIG5vdCAocmVnYXJkbGVzcyBvZiBpdHMgSFRUUCBtZXRob2QpLlxuICpcbiAqXG4gKiAgIFN1Y2Nlc3MgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggKHZhbHVlIChPYmplY3R8QXJyYXkpLCByZXNwb25zZUhlYWRlcnMgKEZ1bmN0aW9uKSxcbiAqICAgc3RhdHVzIChudW1iZXIpLCBzdGF0dXNUZXh0IChzdHJpbmcpKSBhcmd1bWVudHMsIHdoZXJlIHRoZSB2YWx1ZSBpcyB0aGUgcG9wdWxhdGVkIHJlc291cmNlXG4gKiAgIGluc3RhbmNlIG9yIGNvbGxlY3Rpb24gb2JqZWN0LiBUaGUgZXJyb3IgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggKGh0dHBSZXNwb25zZSkgYXJndW1lbnQuXG4gKlxuICogICBDbGFzcyBhY3Rpb25zIHJldHVybiBlbXB0eSBpbnN0YW5jZSAod2l0aCBhZGRpdGlvbmFsIHByb3BlcnRpZXMgYmVsb3cpLlxuICogICBJbnN0YW5jZSBhY3Rpb25zIHJldHVybiBwcm9taXNlIG9mIHRoZSBhY3Rpb24uXG4gKlxuICogICBUaGUgUmVzb3VyY2UgaW5zdGFuY2VzIGFuZCBjb2xsZWN0aW9ucyBoYXZlIHRoZXNlIGFkZGl0aW9uYWwgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYCRwcm9taXNlYDogdGhlIHtAbGluayBuZy4kcSBwcm9taXNlfSBvZiB0aGUgb3JpZ2luYWwgc2VydmVyIGludGVyYWN0aW9uIHRoYXQgY3JlYXRlZCB0aGlzXG4gKiAgICAgaW5zdGFuY2Ugb3IgY29sbGVjdGlvbi5cbiAqXG4gKiAgICAgT24gc3VjY2VzcywgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgc2FtZSByZXNvdXJjZSBpbnN0YW5jZSBvciBjb2xsZWN0aW9uIG9iamVjdCxcbiAqICAgICB1cGRhdGVkIHdpdGggZGF0YSBmcm9tIHNlcnZlci4gVGhpcyBtYWtlcyBpdCBlYXN5IHRvIHVzZSBpblxuICogICAgIHtAbGluayBuZ1JvdXRlLiRyb3V0ZVByb3ZpZGVyIHJlc29sdmUgc2VjdGlvbiBvZiAkcm91dGVQcm92aWRlci53aGVuKCl9IHRvIGRlZmVyIHZpZXdcbiAqICAgICByZW5kZXJpbmcgdW50aWwgdGhlIHJlc291cmNlKHMpIGFyZSBsb2FkZWQuXG4gKlxuICogICAgIE9uIGZhaWx1cmUsIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggdGhlIHtAbGluayBuZy4kaHR0cCBodHRwIHJlc3BvbnNlfSBvYmplY3QsIHdpdGhvdXRcbiAqICAgICB0aGUgYHJlc291cmNlYCBwcm9wZXJ0eS5cbiAqXG4gKiAgICAgSWYgYW4gaW50ZXJjZXB0b3Igb2JqZWN0IHdhcyBwcm92aWRlZCwgdGhlIHByb21pc2Ugd2lsbCBpbnN0ZWFkIGJlIHJlc29sdmVkIHdpdGggdGhlIHZhbHVlXG4gKiAgICAgcmV0dXJuZWQgYnkgdGhlIGludGVyY2VwdG9yLlxuICpcbiAqICAgLSBgJHJlc29sdmVkYDogYHRydWVgIGFmdGVyIGZpcnN0IHNlcnZlciBpbnRlcmFjdGlvbiBpcyBjb21wbGV0ZWQgKGVpdGhlciB3aXRoIHN1Y2Nlc3Mgb3JcbiAqICAgICAgcmVqZWN0aW9uKSwgYGZhbHNlYCBiZWZvcmUgdGhhdC4gS25vd2luZyBpZiB0aGUgUmVzb3VyY2UgaGFzIGJlZW4gcmVzb2x2ZWQgaXMgdXNlZnVsIGluXG4gKiAgICAgIGRhdGEtYmluZGluZy5cbiAqXG4gKiAgIFRoZSBSZXNvdXJjZSBpbnN0YW5jZXMgYW5kIGNvbGxlY3Rpb25zIGhhdmUgdGhlc2UgYWRkaXRpb25hbCBtZXRob2RzOlxuICpcbiAqICAgLSBgJGNhbmNlbFJlcXVlc3RgOiBJZiB0aGVyZSBpcyBhIGNhbmNlbGxhYmxlLCBwZW5kaW5nIHJlcXVlc3QgcmVsYXRlZCB0byB0aGUgaW5zdGFuY2Ugb3JcbiAqICAgICAgY29sbGVjdGlvbiwgY2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIGFib3J0IHRoZSByZXF1ZXN0LlxuICpcbiAqICAgVGhlIFJlc291cmNlIGluc3RhbmNlcyBoYXZlIHRoZXNlIGFkZGl0aW9uYWwgbWV0aG9kczpcbiAqXG4gKiAgIC0gYHRvSlNPTmA6IEl0IHJldHVybnMgYSBzaW1wbGUgb2JqZWN0IHdpdGhvdXQgYW55IG9mIHRoZSBleHRyYSBwcm9wZXJ0aWVzIGFkZGVkIGFzIHBhcnQgb2ZcbiAqICAgICB0aGUgUmVzb3VyY2UgQVBJLiBUaGlzIG9iamVjdCBjYW4gYmUgc2VyaWFsaXplZCB0aHJvdWdoIHtAbGluayBhbmd1bGFyLnRvSnNvbn0gc2FmZWx5XG4gKiAgICAgd2l0aG91dCBhdHRhY2hpbmcgQW5ndWxhci1zcGVjaWZpYyBmaWVsZHMuIE5vdGljZSB0aGF0IGBKU09OLnN0cmluZ2lmeWAgKGFuZFxuICogICAgIGBhbmd1bGFyLnRvSnNvbmApIGF1dG9tYXRpY2FsbHkgdXNlIHRoaXMgbWV0aG9kIHdoZW4gc2VyaWFsaXppbmcgYSBSZXNvdXJjZSBpbnN0YW5jZVxuICogICAgIChzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9zdHJpbmdpZnkjdG9KU09OJTI4JTI5X2JlaGF2aW9yKSkuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAjIENyZWRpdCBjYXJkIHJlc291cmNlXG4gKlxuICogYGBganNcbiAgICAgLy8gRGVmaW5lIENyZWRpdENhcmQgY2xhc3NcbiAgICAgdmFyIENyZWRpdENhcmQgPSAkcmVzb3VyY2UoJy91c2VyLzp1c2VySWQvY2FyZC86Y2FyZElkJyxcbiAgICAgIHt1c2VySWQ6MTIzLCBjYXJkSWQ6J0BpZCd9LCB7XG4gICAgICAgY2hhcmdlOiB7bWV0aG9kOidQT1NUJywgcGFyYW1zOntjaGFyZ2U6dHJ1ZX19XG4gICAgICB9KTtcblxuICAgICAvLyBXZSBjYW4gcmV0cmlldmUgYSBjb2xsZWN0aW9uIGZyb20gdGhlIHNlcnZlclxuICAgICB2YXIgY2FyZHMgPSBDcmVkaXRDYXJkLnF1ZXJ5KGZ1bmN0aW9uKCkge1xuICAgICAgIC8vIEdFVDogL3VzZXIvMTIzL2NhcmRcbiAgICAgICAvLyBzZXJ2ZXIgcmV0dXJuczogWyB7aWQ6NDU2LCBudW1iZXI6JzEyMzQnLCBuYW1lOidTbWl0aCd9IF07XG5cbiAgICAgICB2YXIgY2FyZCA9IGNhcmRzWzBdO1xuICAgICAgIC8vIGVhY2ggaXRlbSBpcyBhbiBpbnN0YW5jZSBvZiBDcmVkaXRDYXJkXG4gICAgICAgZXhwZWN0KGNhcmQgaW5zdGFuY2VvZiBDcmVkaXRDYXJkKS50b0VxdWFsKHRydWUpO1xuICAgICAgIGNhcmQubmFtZSA9IFwiSi4gU21pdGhcIjtcbiAgICAgICAvLyBub24gR0VUIG1ldGhvZHMgYXJlIG1hcHBlZCBvbnRvIHRoZSBpbnN0YW5jZXNcbiAgICAgICBjYXJkLiRzYXZlKCk7XG4gICAgICAgLy8gUE9TVDogL3VzZXIvMTIzL2NhcmQvNDU2IHtpZDo0NTYsIG51bWJlcjonMTIzNCcsIG5hbWU6J0ouIFNtaXRoJ31cbiAgICAgICAvLyBzZXJ2ZXIgcmV0dXJuczoge2lkOjQ1NiwgbnVtYmVyOicxMjM0JywgbmFtZTogJ0ouIFNtaXRoJ307XG5cbiAgICAgICAvLyBvdXIgY3VzdG9tIG1ldGhvZCBpcyBtYXBwZWQgYXMgd2VsbC5cbiAgICAgICBjYXJkLiRjaGFyZ2Uoe2Ftb3VudDo5Ljk5fSk7XG4gICAgICAgLy8gUE9TVDogL3VzZXIvMTIzL2NhcmQvNDU2P2Ftb3VudD05Ljk5JmNoYXJnZT10cnVlIHtpZDo0NTYsIG51bWJlcjonMTIzNCcsIG5hbWU6J0ouIFNtaXRoJ31cbiAgICAgfSk7XG5cbiAgICAgLy8gd2UgY2FuIGNyZWF0ZSBhbiBpbnN0YW5jZSBhcyB3ZWxsXG4gICAgIHZhciBuZXdDYXJkID0gbmV3IENyZWRpdENhcmQoe251bWJlcjonMDEyMyd9KTtcbiAgICAgbmV3Q2FyZC5uYW1lID0gXCJNaWtlIFNtaXRoXCI7XG4gICAgIG5ld0NhcmQuJHNhdmUoKTtcbiAgICAgLy8gUE9TVDogL3VzZXIvMTIzL2NhcmQge251bWJlcjonMDEyMycsIG5hbWU6J01pa2UgU21pdGgnfVxuICAgICAvLyBzZXJ2ZXIgcmV0dXJuczoge2lkOjc4OSwgbnVtYmVyOicwMTIzJywgbmFtZTogJ01pa2UgU21pdGgnfTtcbiAgICAgZXhwZWN0KG5ld0NhcmQuaWQpLnRvRXF1YWwoNzg5KTtcbiAqIGBgYFxuICpcbiAqIFRoZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGlzIGZ1bmN0aW9uIGV4ZWN1dGlvbiBpcyBhIHJlc291cmNlIFwiY2xhc3NcIiB3aGljaCBoYXMgXCJzdGF0aWNcIiBtZXRob2RcbiAqIGZvciBlYWNoIGFjdGlvbiBpbiB0aGUgZGVmaW5pdGlvbi5cbiAqXG4gKiBDYWxsaW5nIHRoZXNlIG1ldGhvZHMgaW52b2tlIGAkaHR0cGAgb24gdGhlIGB1cmxgIHRlbXBsYXRlIHdpdGggdGhlIGdpdmVuIGBtZXRob2RgLCBgcGFyYW1zYCBhbmRcbiAqIGBoZWFkZXJzYC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICMgVXNlciByZXNvdXJjZVxuICpcbiAqIFdoZW4gdGhlIGRhdGEgaXMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIHRoZW4gdGhlIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgcmVzb3VyY2UgdHlwZSBhbmRcbiAqIGFsbCBvZiB0aGUgbm9uLUdFVCBtZXRob2RzIGFyZSBhdmFpbGFibGUgd2l0aCBgJGAgcHJlZml4LiBUaGlzIGFsbG93cyB5b3UgdG8gZWFzaWx5IHN1cHBvcnQgQ1JVRFxuICogb3BlcmF0aW9ucyAoY3JlYXRlLCByZWFkLCB1cGRhdGUsIGRlbGV0ZSkgb24gc2VydmVyLXNpZGUgZGF0YS5cblxuICAgYGBganNcbiAgICAgdmFyIFVzZXIgPSAkcmVzb3VyY2UoJy91c2VyLzp1c2VySWQnLCB7dXNlcklkOidAaWQnfSk7XG4gICAgIFVzZXIuZ2V0KHt1c2VySWQ6MTIzfSwgZnVuY3Rpb24odXNlcikge1xuICAgICAgIHVzZXIuYWJjID0gdHJ1ZTtcbiAgICAgICB1c2VyLiRzYXZlKCk7XG4gICAgIH0pO1xuICAgYGBgXG4gKlxuICogSXQncyB3b3J0aCBub3RpbmcgdGhhdCB0aGUgc3VjY2VzcyBjYWxsYmFjayBmb3IgYGdldGAsIGBxdWVyeWAgYW5kIG90aGVyIG1ldGhvZHMgZ2V0cyBwYXNzZWRcbiAqIGluIHRoZSByZXNwb25zZSB0aGF0IGNhbWUgZnJvbSB0aGUgc2VydmVyIGFzIHdlbGwgYXMgJGh0dHAgaGVhZGVyIGdldHRlciBmdW5jdGlvbiwgc28gb25lXG4gKiBjb3VsZCByZXdyaXRlIHRoZSBhYm92ZSBleGFtcGxlIGFuZCBnZXQgYWNjZXNzIHRvIGh0dHAgaGVhZGVycyBhczpcbiAqXG4gICBgYGBqc1xuICAgICB2YXIgVXNlciA9ICRyZXNvdXJjZSgnL3VzZXIvOnVzZXJJZCcsIHt1c2VySWQ6J0BpZCd9KTtcbiAgICAgVXNlci5nZXQoe3VzZXJJZDoxMjN9LCBmdW5jdGlvbih1c2VyLCBnZXRSZXNwb25zZUhlYWRlcnMpe1xuICAgICAgIHVzZXIuYWJjID0gdHJ1ZTtcbiAgICAgICB1c2VyLiRzYXZlKGZ1bmN0aW9uKHVzZXIsIHB1dFJlc3BvbnNlSGVhZGVycykge1xuICAgICAgICAgLy91c2VyID0+IHNhdmVkIHVzZXIgb2JqZWN0XG4gICAgICAgICAvL3B1dFJlc3BvbnNlSGVhZGVycyA9PiAkaHR0cCBoZWFkZXIgZ2V0dGVyXG4gICAgICAgfSk7XG4gICAgIH0pO1xuICAgYGBgXG4gKlxuICogWW91IGNhbiBhbHNvIGFjY2VzcyB0aGUgcmF3IGAkaHR0cGAgcHJvbWlzZSB2aWEgdGhlIGAkcHJvbWlzZWAgcHJvcGVydHkgb24gdGhlIG9iamVjdCByZXR1cm5lZFxuICpcbiAgIGBgYFxuICAgICB2YXIgVXNlciA9ICRyZXNvdXJjZSgnL3VzZXIvOnVzZXJJZCcsIHt1c2VySWQ6J0BpZCd9KTtcbiAgICAgVXNlci5nZXQoe3VzZXJJZDoxMjN9KVxuICAgICAgICAgLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAkc2NvcGUudXNlciA9IHVzZXI7XG4gICAgICAgICB9KTtcbiAgIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogIyBDcmVhdGluZyBhIGN1c3RvbSAnUFVUJyByZXF1ZXN0XG4gKlxuICogSW4gdGhpcyBleGFtcGxlIHdlIGNyZWF0ZSBhIGN1c3RvbSBtZXRob2Qgb24gb3VyIHJlc291cmNlIHRvIG1ha2UgYSBQVVQgcmVxdWVzdFxuICogYGBganNcbiAqICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyduZ1Jlc291cmNlJywgJ25nUm91dGUnXSk7XG4gKlxuICogICAgLy8gU29tZSBBUElzIGV4cGVjdCBhIFBVVCByZXF1ZXN0IGluIHRoZSBmb3JtYXQgVVJML29iamVjdC9JRFxuICogICAgLy8gSGVyZSB3ZSBhcmUgY3JlYXRpbmcgYW4gJ3VwZGF0ZScgbWV0aG9kXG4gKiAgICBhcHAuZmFjdG9yeSgnTm90ZXMnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uKCRyZXNvdXJjZSkge1xuICogICAgcmV0dXJuICRyZXNvdXJjZSgnL25vdGVzLzppZCcsIG51bGwsXG4gKiAgICAgICAge1xuICogICAgICAgICAgICAndXBkYXRlJzogeyBtZXRob2Q6J1BVVCcgfVxuICogICAgICAgIH0pO1xuICogICAgfV0pO1xuICpcbiAqICAgIC8vIEluIG91ciBjb250cm9sbGVyIHdlIGdldCB0aGUgSUQgZnJvbSB0aGUgVVJMIHVzaW5nIG5nUm91dGUgYW5kICRyb3V0ZVBhcmFtc1xuICogICAgLy8gV2UgcGFzcyBpbiAkcm91dGVQYXJhbXMgYW5kIG91ciBOb3RlcyBmYWN0b3J5IGFsb25nIHdpdGggJHNjb3BlXG4gKiAgICBhcHAuY29udHJvbGxlcignTm90ZXNDdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJ05vdGVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkcm91dGVQYXJhbXMsIE5vdGVzKSB7XG4gKiAgICAvLyBGaXJzdCBnZXQgYSBub3RlIG9iamVjdCBmcm9tIHRoZSBmYWN0b3J5XG4gKiAgICB2YXIgbm90ZSA9IE5vdGVzLmdldCh7IGlkOiRyb3V0ZVBhcmFtcy5pZCB9KTtcbiAqICAgICRpZCA9IG5vdGUuaWQ7XG4gKlxuICogICAgLy8gTm93IGNhbGwgdXBkYXRlIHBhc3NpbmcgaW4gdGhlIElEIGZpcnN0IHRoZW4gdGhlIG9iamVjdCB5b3UgYXJlIHVwZGF0aW5nXG4gKiAgICBOb3Rlcy51cGRhdGUoeyBpZDokaWQgfSwgbm90ZSk7XG4gKlxuICogICAgLy8gVGhpcyB3aWxsIFBVVCAvbm90ZXMvSUQgd2l0aCB0aGUgbm90ZSBvYmplY3QgaW4gdGhlIHJlcXVlc3QgcGF5bG9hZFxuICogICAgfV0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAjIENhbmNlbGxpbmcgcmVxdWVzdHNcbiAqXG4gKiBJZiBhbiBhY3Rpb24ncyBjb25maWd1cmF0aW9uIHNwZWNpZmllcyB0aGF0IGl0IGlzIGNhbmNlbGxhYmxlLCB5b3UgY2FuIGNhbmNlbCB0aGUgcmVxdWVzdCByZWxhdGVkXG4gKiB0byBhbiBpbnN0YW5jZSBvciBjb2xsZWN0aW9uIChhcyBsb25nIGFzIGl0IGlzIGEgcmVzdWx0IG9mIGEgXCJub24taW5zdGFuY2VcIiBjYWxsKTpcbiAqXG4gICBgYGBqc1xuICAgICAvLyAuLi5kZWZpbmluZyB0aGUgYEhvdGVsYCByZXNvdXJjZS4uLlxuICAgICB2YXIgSG90ZWwgPSAkcmVzb3VyY2UoJy9hcGkvaG90ZWwvOmlkJywge2lkOiAnQGlkJ30sIHtcbiAgICAgICAvLyBMZXQncyBtYWtlIHRoZSBgcXVlcnkoKWAgbWV0aG9kIGNhbmNlbGxhYmxlXG4gICAgICAgcXVlcnk6IHttZXRob2Q6ICdnZXQnLCBpc0FycmF5OiB0cnVlLCBjYW5jZWxsYWJsZTogdHJ1ZX1cbiAgICAgfSk7XG5cbiAgICAgLy8gLi4uc29tZXdoZXJlIGluIHRoZSBQbGFuVmFjYXRpb25Db250cm9sbGVyLi4uXG4gICAgIC4uLlxuICAgICB0aGlzLm9uRGVzdGluYXRpb25DaGFuZ2VkID0gZnVuY3Rpb24gb25EZXN0aW5hdGlvbkNoYW5nZWQoZGVzdGluYXRpb24pIHtcbiAgICAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IGFueSBwZW5kaW5nIHJlcXVlc3QgZm9yIGhvdGVsc1xuICAgICAgIC8vIGluIGEgZGlmZmVyZW50IGRlc3RpbmF0aW9uIGFueSBtb3JlXG4gICAgICAgdGhpcy5hdmFpbGFibGVIb3RlbHMuJGNhbmNlbFJlcXVlc3QoKTtcblxuICAgICAgIC8vIExldCdzIHF1ZXJ5IGZvciBob3RlbHMgaW4gJzxkZXN0aW5hdGlvbj4nXG4gICAgICAgLy8gKGNhbGxzOiAvYXBpL2hvdGVsP2xvY2F0aW9uPTxkZXN0aW5hdGlvbj4pXG4gICAgICAgdGhpcy5hdmFpbGFibGVIb3RlbHMgPSBIb3RlbC5xdWVyeSh7bG9jYXRpb246IGRlc3RpbmF0aW9ufSk7XG4gICAgIH07XG4gICBgYGBcbiAqXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ1Jlc291cmNlJywgWyduZyddKS5cbiAgaW5mbyh7IGFuZ3VsYXJWZXJzaW9uOiAnMS42LjQnIH0pLlxuICBwcm92aWRlcignJHJlc291cmNlJywgZnVuY3Rpb24gUmVzb3VyY2VQcm92aWRlcigpIHtcbiAgICB2YXIgUFJPVE9DT0xfQU5EX0lQVjZfUkVHRVggPSAvXmh0dHBzPzpcXC9cXC9cXFtbXlxcXV0qXVteL10qLztcblxuICAgIHZhciBwcm92aWRlciA9IHRoaXM7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgKiBAbmFtZSAkcmVzb3VyY2VQcm92aWRlciNkZWZhdWx0c1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIE9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgb3B0aW9ucyB1c2VkIHdoZW4gY3JlYXRpbmcgYCRyZXNvdXJjZWAgaW5zdGFuY2VzLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWVzIHNhdGlzZnkgYSB3aWRlIHJhbmdlIG9mIHVzZWNhc2VzLCBidXQgeW91IG1heSBjaG9vc2UgdG8gb3ZlcndyaXRlIGFueSBvZlxuICAgICAqIHRoZW0gdG8gZnVydGhlciBjdXN0b21pemUgeW91ciBpbnN0YW5jZXMuIFRoZSBhdmFpbGFibGUgcHJvcGVydGllcyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqc3RyaXBUcmFpbGluZ1NsYXNoZXMqKiDigJMgYHtib29sZWFufWAg4oCTIElmIHRydWUsIHRoZW4gdGhlIHRyYWlsaW5nIHNsYXNoZXMgZnJvbSBhbnlcbiAgICAgKiAgIGNhbGN1bGF0ZWQgVVJMIHdpbGwgYmUgc3RyaXBwZWQuPGJyIC8+XG4gICAgICogICAoRGVmYXVsdHMgdG8gdHJ1ZS4pXG4gICAgICogLSAqKmNhbmNlbGxhYmxlKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBJZiB0cnVlLCB0aGUgcmVxdWVzdCBtYWRlIGJ5IGEgXCJub24taW5zdGFuY2VcIiBjYWxsIHdpbGwgYmVcbiAgICAgKiAgIGNhbmNlbGxlZCAoaWYgbm90IGFscmVhZHkgY29tcGxldGVkKSBieSBjYWxsaW5nIGAkY2FuY2VsUmVxdWVzdCgpYCBvbiB0aGUgY2FsbCdzIHJldHVyblxuICAgICAqICAgdmFsdWUuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2V9LiBUaGlzIGNhbiBiZSBvdmVyd3JpdHRlbiBwZXJcbiAgICAgKiAgIHJlc291cmNlIGNsYXNzIG9yIGFjdGlvbi48YnIgLz5cbiAgICAgKiAgIChEZWZhdWx0cyB0byBmYWxzZS4pXG4gICAgICogLSAqKmFjdGlvbnMqKiAtIGB7T2JqZWN0LjxPYmplY3Q+fWAgLSBBIGhhc2ggd2l0aCBkZWZhdWx0IGFjdGlvbnMgZGVjbGFyYXRpb25zLiBBY3Rpb25zIGFyZVxuICAgICAqICAgaGlnaC1sZXZlbCBtZXRob2RzIGNvcnJlc3BvbmRpbmcgdG8gUkVTVGZ1bCBhY3Rpb25zL21ldGhvZHMgb24gcmVzb3VyY2VzLiBBbiBhY3Rpb24gbWF5XG4gICAgICogICBzcGVjaWZ5IHdoYXQgSFRUUCBtZXRob2QgdG8gdXNlLCB3aGF0IFVSTCB0byBoaXQsIGlmIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSBhIHNpbmdsZVxuICAgICAqICAgb2JqZWN0IG9yIGEgY29sbGVjdGlvbiAoYXJyYXkpIG9mIG9iamVjdHMgZXRjLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWVcbiAgICAgKiAgIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZX0uIFRoZSBhY3Rpb25zIGNhbiBhbHNvIGJlIGVuaGFuY2VkIG9yIG92ZXJ3cml0dGVuIHBlciByZXNvdXJjZVxuICAgICAqICAgY2xhc3MuPGJyIC8+XG4gICAgICogICBUaGUgZGVmYXVsdCBhY3Rpb25zIGFyZTpcbiAgICAgKiAgIGBgYGpzXG4gICAgICogICB7XG4gICAgICogICAgIGdldDoge21ldGhvZDogJ0dFVCd9LFxuICAgICAqICAgICBzYXZlOiB7bWV0aG9kOiAnUE9TVCd9LFxuICAgICAqICAgICBxdWVyeToge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWV9LFxuICAgICAqICAgICByZW1vdmU6IHttZXRob2Q6ICdERUxFVEUnfSxcbiAgICAgKiAgICAgZGVsZXRlOiB7bWV0aG9kOiAnREVMRVRFJ31cbiAgICAgKiAgIH1cbiAgICAgKiAgIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgeW91IGNhbiBzcGVjaWZ5IGEgbmV3IGB1cGRhdGVgIGFjdGlvbiB0aGF0IHVzZXMgdGhlIGBQVVRgIEhUVFAgdmVyYjpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICBhbmd1bGFyLlxuICAgICAqICAgICBtb2R1bGUoJ215QXBwJykuXG4gICAgICogICAgIGNvbmZpZyhbJyRyZXNvdXJjZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRyZXNvdXJjZVByb3ZpZGVyKSB7XG4gICAgICogICAgICAgJHJlc291cmNlUHJvdmlkZXIuZGVmYXVsdHMuYWN0aW9ucy51cGRhdGUgPSB7XG4gICAgICogICAgICAgICBtZXRob2Q6ICdQVVQnXG4gICAgICogICAgICAgfTtcbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBPciB5b3UgY2FuIGV2ZW4gb3ZlcndyaXRlIHRoZSB3aG9sZSBgYWN0aW9uc2AgbGlzdCBhbmQgc3BlY2lmeSB5b3VyIG93bjpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICBhbmd1bGFyLlxuICAgICAqICAgICBtb2R1bGUoJ215QXBwJykuXG4gICAgICogICAgIGNvbmZpZyhbJyRyZXNvdXJjZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRyZXNvdXJjZVByb3ZpZGVyKSB7XG4gICAgICogICAgICAgJHJlc291cmNlUHJvdmlkZXIuZGVmYXVsdHMuYWN0aW9ucyA9IHtcbiAgICAgKiAgICAgICAgIGNyZWF0ZToge21ldGhvZDogJ1BPU1QnfSxcbiAgICAgKiAgICAgICAgIGdldDogICAge21ldGhvZDogJ0dFVCd9LFxuICAgICAqICAgICAgICAgZ2V0QWxsOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTp0cnVlfSxcbiAgICAgKiAgICAgICAgIHVwZGF0ZToge21ldGhvZDogJ1BVVCd9LFxuICAgICAqICAgICAgICAgZGVsZXRlOiB7bWV0aG9kOiAnREVMRVRFJ31cbiAgICAgKiAgICAgICB9O1xuICAgICAqICAgICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqL1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICAvLyBTdHJpcCBzbGFzaGVzIGJ5IGRlZmF1bHRcbiAgICAgIHN0cmlwVHJhaWxpbmdTbGFzaGVzOiB0cnVlLFxuXG4gICAgICAvLyBNYWtlIG5vbi1pbnN0YW5jZSByZXF1ZXN0cyBjYW5jZWxsYWJsZSAodmlhIGAkY2FuY2VsUmVxdWVzdCgpYClcbiAgICAgIGNhbmNlbGxhYmxlOiBmYWxzZSxcblxuICAgICAgLy8gRGVmYXVsdCBhY3Rpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgJ2dldCc6IHttZXRob2Q6ICdHRVQnfSxcbiAgICAgICAgJ3NhdmUnOiB7bWV0aG9kOiAnUE9TVCd9LFxuICAgICAgICAncXVlcnknOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZX0sXG4gICAgICAgICdyZW1vdmUnOiB7bWV0aG9kOiAnREVMRVRFJ30sXG4gICAgICAgICdkZWxldGUnOiB7bWV0aG9kOiAnREVMRVRFJ31cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy4kZ2V0ID0gWyckaHR0cCcsICckbG9nJywgJyRxJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJGh0dHAsICRsb2csICRxLCAkdGltZW91dCkge1xuXG4gICAgICB2YXIgbm9vcCA9IGFuZ3VsYXIubm9vcCxcbiAgICAgICAgICBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoLFxuICAgICAgICAgIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kLFxuICAgICAgICAgIGNvcHkgPSBhbmd1bGFyLmNvcHksXG4gICAgICAgICAgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheSxcbiAgICAgICAgICBpc0RlZmluZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCxcbiAgICAgICAgICBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uLFxuICAgICAgICAgIGlzTnVtYmVyID0gYW5ndWxhci5pc051bWJlcixcbiAgICAgICAgICBlbmNvZGVVcmlRdWVyeSA9IGFuZ3VsYXIuJCRlbmNvZGVVcmlRdWVyeSxcbiAgICAgICAgICBlbmNvZGVVcmlTZWdtZW50ID0gYW5ndWxhci4kJGVuY29kZVVyaVNlZ21lbnQ7XG5cbiAgICAgIGZ1bmN0aW9uIFJvdXRlKHRlbXBsYXRlLCBkZWZhdWx0cykge1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSBleHRlbmQoe30sIHByb3ZpZGVyLmRlZmF1bHRzLCBkZWZhdWx0cyk7XG4gICAgICAgIHRoaXMudXJsUGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIFJvdXRlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgc2V0VXJsUGFyYW1zOiBmdW5jdGlvbihjb25maWcsIHBhcmFtcywgYWN0aW9uVXJsKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgdXJsID0gYWN0aW9uVXJsIHx8IHNlbGYudGVtcGxhdGUsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlbmNvZGVkVmFsLFxuICAgICAgICAgICAgcHJvdG9jb2xBbmRJcHY2ID0gJyc7XG5cbiAgICAgICAgICB2YXIgdXJsUGFyYW1zID0gc2VsZi51cmxQYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGZvckVhY2godXJsLnNwbGl0KC9cXFcvKSwgZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgICAgIGlmIChwYXJhbSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgICAgICAgICAgICB0aHJvdyAkcmVzb3VyY2VNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgcGFyYW1ldGVyIG5hbWUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShuZXcgUmVnRXhwKCdeXFxcXGQrJCcpLnRlc3QocGFyYW0pKSAmJiBwYXJhbSAmJlxuICAgICAgICAgICAgICAobmV3IFJlZ0V4cCgnKF58W15cXFxcXFxcXF0pOicgKyBwYXJhbSArICcoXFxcXFd8JCknKS50ZXN0KHVybCkpKSB7XG4gICAgICAgICAgICAgIHVybFBhcmFtc1twYXJhbV0gPSB7XG4gICAgICAgICAgICAgICAgaXNRdWVyeVBhcmFtVmFsdWU6IChuZXcgUmVnRXhwKCdcXFxcPy4qPTonICsgcGFyYW0gKyAnKD86XFxcXFd8JCknKSkudGVzdCh1cmwpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcXFw6L2csICc6Jyk7XG4gICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoUFJPVE9DT0xfQU5EX0lQVjZfUkVHRVgsIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgICAgICBwcm90b2NvbEFuZElwdjYgPSBtYXRjaDtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICAgICAgICBmb3JFYWNoKHNlbGYudXJsUGFyYW1zLCBmdW5jdGlvbihwYXJhbUluZm8sIHVybFBhcmFtKSB7XG4gICAgICAgICAgICB2YWwgPSBwYXJhbXMuaGFzT3duUHJvcGVydHkodXJsUGFyYW0pID8gcGFyYW1zW3VybFBhcmFtXSA6IHNlbGYuZGVmYXVsdHNbdXJsUGFyYW1dO1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBpZiAocGFyYW1JbmZvLmlzUXVlcnlQYXJhbVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbCA9IGVuY29kZVVyaVF1ZXJ5KHZhbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZFZhbCA9IGVuY29kZVVyaVNlZ21lbnQodmFsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShuZXcgUmVnRXhwKCc6JyArIHVybFBhcmFtICsgJyhcXFxcV3wkKScsICdnJyksIGZ1bmN0aW9uKG1hdGNoLCBwMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGVkVmFsICsgcDE7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UobmV3IFJlZ0V4cCgnKC8/KTonICsgdXJsUGFyYW0gKyAnKFxcXFxXfCQpJywgJ2cnKSwgZnVuY3Rpb24obWF0Y2gsXG4gICAgICAgICAgICAgICAgICBsZWFkaW5nU2xhc2hlcywgdGFpbCkge1xuICAgICAgICAgICAgICAgIGlmICh0YWlsLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGFpbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdTbGFzaGVzICsgdGFpbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gc3RyaXAgdHJhaWxpbmcgc2xhc2hlcyBhbmQgc2V0IHRoZSB1cmwgKHVubGVzcyB0aGlzIGJlaGF2aW9yIGlzIHNwZWNpZmljYWxseSBkaXNhYmxlZClcbiAgICAgICAgICBpZiAoc2VsZi5kZWZhdWx0cy5zdHJpcFRyYWlsaW5nU2xhc2hlcykge1xuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcLyskLywgJycpIHx8ICcvJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb2xsYXBzZSBgLy5gIGlmIGZvdW5kIGluIHRoZSBsYXN0IFVSTCBwYXRoIHNlZ21lbnQgYmVmb3JlIHRoZSBxdWVyeS5cbiAgICAgICAgICAvLyBFLmcuIGBodHRwOi8vdXJsLmNvbS9pZC8uZm9ybWF0P3E9eGAgYmVjb21lcyBgaHR0cDovL3VybC5jb20vaWQuZm9ybWF0P3E9eGAuXG4gICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcL1xcLig/PVxcdysoJHxcXD8pKS8sICcuJyk7XG4gICAgICAgICAgLy8gUmVwbGFjZSBlc2NhcGVkIGAvXFwuYCB3aXRoIGAvLmAuXG4gICAgICAgICAgLy8gKElmIGBcXC5gIGNvbWVzIGZyb20gYSBwYXJhbSB2YWx1ZSwgaXQgd2lsbCBiZSBlbmNvZGVkIGFzIGAlNUMuYC4pXG4gICAgICAgICAgY29uZmlnLnVybCA9IHByb3RvY29sQW5kSXB2NiArIHVybC5yZXBsYWNlKC9cXC8oXFxcXHwlNUMpXFwuLywgJy8uJyk7XG5cblxuICAgICAgICAgIC8vIHNldCBwYXJhbXMgLSBkZWxlZ2F0ZSBwYXJhbSBlbmNvZGluZyB0byAkaHR0cFxuICAgICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYudXJsUGFyYW1zW2tleV0pIHtcbiAgICAgICAgICAgICAgY29uZmlnLnBhcmFtcyA9IGNvbmZpZy5wYXJhbXMgfHwge307XG4gICAgICAgICAgICAgIGNvbmZpZy5wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIGZ1bmN0aW9uIHJlc291cmNlRmFjdG9yeSh1cmwsIHBhcmFtRGVmYXVsdHMsIGFjdGlvbnMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJvdXRlID0gbmV3IFJvdXRlKHVybCwgb3B0aW9ucyk7XG5cbiAgICAgICAgYWN0aW9ucyA9IGV4dGVuZCh7fSwgcHJvdmlkZXIuZGVmYXVsdHMuYWN0aW9ucywgYWN0aW9ucyk7XG5cbiAgICAgICAgZnVuY3Rpb24gZXh0cmFjdFBhcmFtcyhkYXRhLCBhY3Rpb25QYXJhbXMpIHtcbiAgICAgICAgICB2YXIgaWRzID0ge307XG4gICAgICAgICAgYWN0aW9uUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbURlZmF1bHRzLCBhY3Rpb25QYXJhbXMpO1xuICAgICAgICAgIGZvckVhY2goYWN0aW9uUGFyYW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHsgdmFsdWUgPSB2YWx1ZShkYXRhKTsgfVxuICAgICAgICAgICAgaWRzW2tleV0gPSB2YWx1ZSAmJiB2YWx1ZS5jaGFyQXQgJiYgdmFsdWUuY2hhckF0KDApID09PSAnQCcgP1xuICAgICAgICAgICAgICBsb29rdXBEb3R0ZWRQYXRoKGRhdGEsIHZhbHVlLnN1YnN0cigxKSkgOiB2YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gaWRzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGVmYXVsdFJlc3BvbnNlSW50ZXJjZXB0b3IocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBSZXNvdXJjZSh2YWx1ZSkge1xuICAgICAgICAgIHNoYWxsb3dDbGVhckFuZENvcHkodmFsdWUgfHwge30sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgUmVzb3VyY2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gZXh0ZW5kKHt9LCB0aGlzKTtcbiAgICAgICAgICBkZWxldGUgZGF0YS4kcHJvbWlzZTtcbiAgICAgICAgICBkZWxldGUgZGF0YS4kcmVzb2x2ZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGEuJGNhbmNlbFJlcXVlc3Q7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yRWFjaChhY3Rpb25zLCBmdW5jdGlvbihhY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgICB2YXIgaGFzQm9keSA9IGFjdGlvbi5oYXNCb2R5ID09PSB0cnVlIHx8IChhY3Rpb24uaGFzQm9keSAhPT0gZmFsc2UgJiYgL14oUE9TVHxQVVR8UEFUQ0gpJC9pLnRlc3QoYWN0aW9uLm1ldGhvZCkpO1xuICAgICAgICAgIHZhciBudW1lcmljVGltZW91dCA9IGFjdGlvbi50aW1lb3V0O1xuICAgICAgICAgIHZhciBjYW5jZWxsYWJsZSA9IGlzRGVmaW5lZChhY3Rpb24uY2FuY2VsbGFibGUpID9cbiAgICAgICAgICAgICAgYWN0aW9uLmNhbmNlbGxhYmxlIDogcm91dGUuZGVmYXVsdHMuY2FuY2VsbGFibGU7XG5cbiAgICAgICAgICBpZiAobnVtZXJpY1RpbWVvdXQgJiYgIWlzTnVtYmVyKG51bWVyaWNUaW1lb3V0KSkge1xuICAgICAgICAgICAgJGxvZy5kZWJ1ZygnbmdSZXNvdXJjZTpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgJyAgT25seSBudW1lcmljIHZhbHVlcyBhcmUgYWxsb3dlZCBhcyBgdGltZW91dGAuXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICcgIFByb21pc2VzIGFyZSBub3Qgc3VwcG9ydGVkIGluICRyZXNvdXJjZSwgYmVjYXVzZSB0aGUgc2FtZSB2YWx1ZSB3b3VsZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgJ2JlIHVzZWQgZm9yIG11bHRpcGxlIHJlcXVlc3RzLiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGEgd2F5IHRvIGNhbmNlbCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RzLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGNhbmNlbGxhYmxlYCBvcHRpb24uJyk7XG4gICAgICAgICAgICBkZWxldGUgYWN0aW9uLnRpbWVvdXQ7XG4gICAgICAgICAgICBudW1lcmljVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgUmVzb3VyY2VbbmFtZV0gPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCkge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9LCBkYXRhLCBzdWNjZXNzLCBlcnJvcjtcblxuICAgICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBlcnJvciA9IGE0O1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBhMztcbiAgICAgICAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGEyKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBhMTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBhMjtcbiAgICAgICAgICAgICAgICAgIGVycm9yID0gYTM7XG4gICAgICAgICAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IGExO1xuICAgICAgICAgICAgICAgICAgZGF0YSA9IGEyO1xuICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IGEzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGExKSkgc3VjY2VzcyA9IGExO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhhc0JvZHkpIGRhdGEgPSBhMTtcbiAgICAgICAgICAgICAgICBlbHNlIHBhcmFtcyA9IGExO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDA6IGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93ICRyZXNvdXJjZU1pbkVycignYmFkYXJncycsXG4gICAgICAgICAgICAgICAgICAnRXhwZWN0ZWQgdXAgdG8gNCBhcmd1bWVudHMgW3BhcmFtcywgZGF0YSwgc3VjY2VzcywgZXJyb3JdLCBnb3QgezB9IGFyZ3VtZW50cycsXG4gICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlzSW5zdGFuY2VDYWxsID0gdGhpcyBpbnN0YW5jZW9mIFJlc291cmNlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gaXNJbnN0YW5jZUNhbGwgPyBkYXRhIDogKGFjdGlvbi5pc0FycmF5ID8gW10gOiBuZXcgUmVzb3VyY2UoZGF0YSkpO1xuICAgICAgICAgICAgdmFyIGh0dHBDb25maWcgPSB7fTtcbiAgICAgICAgICAgIHZhciByZXNwb25zZUludGVyY2VwdG9yID0gYWN0aW9uLmludGVyY2VwdG9yICYmIGFjdGlvbi5pbnRlcmNlcHRvci5yZXNwb25zZSB8fFxuICAgICAgICAgICAgICBkZWZhdWx0UmVzcG9uc2VJbnRlcmNlcHRvcjtcbiAgICAgICAgICAgIHZhciByZXNwb25zZUVycm9ySW50ZXJjZXB0b3IgPSBhY3Rpb24uaW50ZXJjZXB0b3IgJiYgYWN0aW9uLmludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IgfHxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGhhc0Vycm9yID0gISFlcnJvcjtcbiAgICAgICAgICAgIHZhciBoYXNSZXNwb25zZUVycm9ySW50ZXJjZXB0b3IgPSAhIXJlc3BvbnNlRXJyb3JJbnRlcmNlcHRvcjtcbiAgICAgICAgICAgIHZhciB0aW1lb3V0RGVmZXJyZWQ7XG4gICAgICAgICAgICB2YXIgbnVtZXJpY1RpbWVvdXRQcm9taXNlO1xuXG4gICAgICAgICAgICBmb3JFYWNoKGFjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBodHRwQ29uZmlnW2tleV0gPSBjb3B5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BhcmFtcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaXNBcnJheSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnaW50ZXJjZXB0b3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbGxhYmxlJzpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFpc0luc3RhbmNlQ2FsbCAmJiBjYW5jZWxsYWJsZSkge1xuICAgICAgICAgICAgICB0aW1lb3V0RGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICBodHRwQ29uZmlnLnRpbWVvdXQgPSB0aW1lb3V0RGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICAgICAgICBpZiAobnVtZXJpY1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBudW1lcmljVGltZW91dFByb21pc2UgPSAkdGltZW91dCh0aW1lb3V0RGVmZXJyZWQucmVzb2x2ZSwgbnVtZXJpY1RpbWVvdXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNCb2R5KSBodHRwQ29uZmlnLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgcm91dGUuc2V0VXJsUGFyYW1zKGh0dHBDb25maWcsXG4gICAgICAgICAgICAgIGV4dGVuZCh7fSwgZXh0cmFjdFBhcmFtcyhkYXRhLCBhY3Rpb24ucGFyYW1zIHx8IHt9KSwgcGFyYW1zKSxcbiAgICAgICAgICAgICAgYWN0aW9uLnVybCk7XG5cbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gJGh0dHAoaHR0cENvbmZpZykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgYWN0aW9uLmlzQXJyYXkgdG8gYm9vbGVhbiBpbiBjYXNlIGl0IGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KGRhdGEpICE9PSAoISFhY3Rpb24uaXNBcnJheSkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93ICRyZXNvdXJjZU1pbkVycignYmFkY2ZnJyxcbiAgICAgICAgICAgICAgICAgICAgICAnRXJyb3IgaW4gcmVzb3VyY2UgY29uZmlndXJhdGlvbiBmb3IgYWN0aW9uIGB7MH1gLiBFeHBlY3RlZCByZXNwb25zZSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnY29udGFpbiBhbiB7MX0gYnV0IGdvdCBhbiB7Mn0gKFJlcXVlc3Q6IHszfSB7NH0pJywgbmFtZSwgYWN0aW9uLmlzQXJyYXkgPyAnYXJyYXknIDogJ29iamVjdCcsXG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkoZGF0YSkgPyAnYXJyYXknIDogJ29iamVjdCcsIGh0dHBDb25maWcubWV0aG9kLCBodHRwQ29uZmlnLnVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uaXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgIGZvckVhY2goZGF0YSwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChuZXcgUmVzb3VyY2UoaXRlbSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFZhbGlkIEpTT04gdmFsdWVzIG1heSBiZSBzdHJpbmcgbGl0ZXJhbHMsIGFuZCB0aGVzZSBzaG91bGQgbm90IGJlIGNvbnZlcnRlZFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGludG8gb2JqZWN0cy4gVGhlc2UgaXRlbXMgd2lsbCBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIFJlc291cmNlIHByb3RvdHlwZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIG1ldGhvZHMsIGJ1dCB1bmZvcnR1bmF0ZWx5IHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gdmFsdWUuJHByb21pc2U7ICAgICAvLyBTYXZlIHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICBzaGFsbG93Q2xlYXJBbmRDb3B5KGRhdGEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIHZhbHVlLiRwcm9taXNlID0gcHJvbWlzZTsgICAgICAgICAvLyBSZXN0b3JlIHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3BvbnNlLnJlc291cmNlID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlWydmaW5hbGx5J10oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhbHVlLiRyZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGlmICghaXNJbnN0YW5jZUNhbGwgJiYgY2FuY2VsbGFibGUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS4kY2FuY2VsUmVxdWVzdCA9IG5vb3A7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKG51bWVyaWNUaW1lb3V0UHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgdGltZW91dERlZmVycmVkID0gbnVtZXJpY1RpbWVvdXRQcm9taXNlID0gaHR0cENvbmZpZy50aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVzcG9uc2VJbnRlcmNlcHRvcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgKHN1Y2Nlc3MgfHwgbm9vcCkodmFsdWUsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoaGFzRXJyb3IgfHwgaGFzUmVzcG9uc2VFcnJvckludGVyY2VwdG9yKSA/XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvciAmJiAhaGFzUmVzcG9uc2VFcnJvckludGVyY2VwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGBQb3NzaWJseSBVbmhhbmRsZWQgUmVqZWN0aW9uYCBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHN0aWxsIGZ1bGZpbGwgdGhlIHJldHVybmVkIHByb21pc2Ugd2l0aCBhIHJlamVjdGlvblxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSBlcnJvcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFzUmVzcG9uc2VFcnJvckludGVyY2VwdG9yID9cbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VFcnJvckludGVyY2VwdG9yKHJlc3BvbnNlKSA6XG4gICAgICAgICAgICAgICAgICAgICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgaWYgKCFpc0luc3RhbmNlQ2FsbCkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgY3JlYXRpbmcgaW5zdGFuY2UgLyBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgIC8vIC0gc2V0IHRoZSBpbml0aWFsIHByb21pc2VcbiAgICAgICAgICAgICAgLy8gLSByZXR1cm4gdGhlIGluc3RhbmNlIC8gY29sbGVjdGlvblxuICAgICAgICAgICAgICB2YWx1ZS4kcHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgICAgICAgIHZhbHVlLiRyZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FuY2VsbGFibGUpIHZhbHVlLiRjYW5jZWxSZXF1ZXN0ID0gY2FuY2VsUmVxdWVzdDtcblxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGluc3RhbmNlIGNhbGxcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxSZXF1ZXN0KHZhbHVlKSB7XG4gICAgICAgICAgICAgIHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgICAgICAgICAgIHRpbWVvdXREZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICBSZXNvdXJjZS5wcm90b3R5cGVbJyQnICsgbmFtZV0gPSBmdW5jdGlvbihwYXJhbXMsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwYXJhbXMpKSB7XG4gICAgICAgICAgICAgIGVycm9yID0gc3VjY2Vzczsgc3VjY2VzcyA9IHBhcmFtczsgcGFyYW1zID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gUmVzb3VyY2VbbmFtZV0uY2FsbCh0aGlzLCBwYXJhbXMsIHRoaXMsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuJHByb21pc2UgfHwgcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFJlc291cmNlLmJpbmQgPSBmdW5jdGlvbihhZGRpdGlvbmFsUGFyYW1EZWZhdWx0cykge1xuICAgICAgICAgIHZhciBleHRlbmRlZFBhcmFtRGVmYXVsdHMgPSBleHRlbmQoe30sIHBhcmFtRGVmYXVsdHMsIGFkZGl0aW9uYWxQYXJhbURlZmF1bHRzKTtcbiAgICAgICAgICByZXR1cm4gcmVzb3VyY2VGYWN0b3J5KHVybCwgZXh0ZW5kZWRQYXJhbURlZmF1bHRzLCBhY3Rpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzb3VyY2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNvdXJjZUZhY3Rvcnk7XG4gICAgfV07XG4gIH0pO1xuXG5cbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xuXG4vKipcbiAqIENoZWNrbGlzdC1tb2RlbFxuICogQW5ndWxhckpTIGRpcmVjdGl2ZSBmb3IgbGlzdCBvZiBjaGVja2JveGVzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMvY2hlY2tsaXN0LW1vZGVsXG4gKiBMaWNlbnNlOiBNSVQgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbiAvKiBjb21tb25qcyBwYWNrYWdlIG1hbmFnZXIgc3VwcG9ydCAoZWcgY29tcG9uZW50anMpICovXG4gaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMgPT09IGV4cG9ydHMpe1xuICAgbW9kdWxlLmV4cG9ydHMgPSAnY2hlY2tsaXN0LW1vZGVsJztcbiB9XG5cbmFuZ3VsYXIubW9kdWxlKCdjaGVja2xpc3QtbW9kZWwnLCBbXSlcbi5kaXJlY3RpdmUoJ2NoZWNrbGlzdE1vZGVsJywgWyckcGFyc2UnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkcGFyc2UsICRjb21waWxlKSB7XG4gIC8vIGNvbnRhaW5zXG4gIGZ1bmN0aW9uIGNvbnRhaW5zKGFyciwgaXRlbSwgY29tcGFyYXRvcikge1xuICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoYXJyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IGFyci5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyW2ldLCBpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGFkZFxuICBmdW5jdGlvbiBhZGQoYXJyLCBpdGVtLCBjb21wYXJhdG9yKSB7XG4gICAgYXJyID0gYW5ndWxhci5pc0FycmF5KGFycikgPyBhcnIgOiBbXTtcbiAgICAgIGlmKCFjb250YWlucyhhcnIsIGl0ZW0sIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgYXJyLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8vIHJlbW92ZVxuICBmdW5jdGlvbiByZW1vdmUoYXJyLCBpdGVtLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNBcnJheShhcnIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gYXJyLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoY29tcGFyYXRvcihhcnJbaV0sIGl0ZW0pKSB7XG4gICAgICAgICAgYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTkyMjgzMDIvMTQ1ODE2MlxuICBmdW5jdGlvbiBwb3N0TGlua0ZuKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgICAvLyBleGNsdWRlIHJlY3Vyc2lvbiwgYnV0IHN0aWxsIGtlZXAgdGhlIG1vZGVsXG4gICAgdmFyIGNoZWNrbGlzdE1vZGVsID0gYXR0cnMuY2hlY2tsaXN0TW9kZWw7XG4gICAgYXR0cnMuJHNldChcImNoZWNrbGlzdE1vZGVsXCIsIG51bGwpO1xuICAgIC8vIGNvbXBpbGUgd2l0aCBgbmctbW9kZWxgIHBvaW50aW5nIHRvIGBjaGVja2VkYFxuICAgICRjb21waWxlKGVsZW0pKHNjb3BlKTtcbiAgICBhdHRycy4kc2V0KFwiY2hlY2tsaXN0TW9kZWxcIiwgY2hlY2tsaXN0TW9kZWwpO1xuXG4gICAgLy8gZ2V0dGVyIGZvciBvcmlnaW5hbCBtb2RlbFxuICAgIHZhciBjaGVja2xpc3RNb2RlbEdldHRlciA9ICRwYXJzZShjaGVja2xpc3RNb2RlbCk7XG4gICAgdmFyIGNoZWNrbGlzdENoYW5nZSA9ICRwYXJzZShhdHRycy5jaGVja2xpc3RDaGFuZ2UpO1xuICAgIHZhciBjaGVja2xpc3RCZWZvcmVDaGFuZ2UgPSAkcGFyc2UoYXR0cnMuY2hlY2tsaXN0QmVmb3JlQ2hhbmdlKTtcbiAgICB2YXIgbmdNb2RlbEdldHRlciA9ICRwYXJzZShhdHRycy5uZ01vZGVsKTtcblxuXG5cbiAgICB2YXIgY29tcGFyYXRvciA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZighaXNOYU4oYSkgJiYgIWlzTmFOKGIpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhhLGIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoJ2NoZWNrbGlzdENvbXBhcmF0b3InKSl7XG4gICAgICBpZiAoYXR0cnMuY2hlY2tsaXN0Q29tcGFyYXRvclswXSA9PSAnLicpIHtcbiAgICAgICAgdmFyIGNvbXBhcmF0b3JFeHByZXNzaW9uID0gYXR0cnMuY2hlY2tsaXN0Q29tcGFyYXRvci5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhW2NvbXBhcmF0b3JFeHByZXNzaW9uXSA9PT0gYltjb21wYXJhdG9yRXhwcmVzc2lvbl07XG4gICAgICAgIH07XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSAkcGFyc2UoYXR0cnMuY2hlY2tsaXN0Q29tcGFyYXRvcikoc2NvcGUuJHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gd2F0Y2ggVUkgY2hlY2tlZCBjaGFuZ2VcbiAgICB2YXIgdW5iaW5kTW9kZWwgPSBzY29wZS4kd2F0Y2goYXR0cnMubmdNb2RlbCwgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoZWNrbGlzdEJlZm9yZUNoYW5nZSAmJiAoY2hlY2tsaXN0QmVmb3JlQ2hhbmdlKHNjb3BlKSA9PT0gZmFsc2UpKSB7XG4gICAgICAgIG5nTW9kZWxHZXR0ZXIuYXNzaWduKHNjb3BlLCBjb250YWlucyhjaGVja2xpc3RNb2RlbEdldHRlcihzY29wZS4kcGFyZW50KSwgZ2V0Q2hlY2tsaXN0VmFsdWUoKSwgY29tcGFyYXRvcikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFZhbHVlSW5DaGVja2xpc3RNb2RlbChnZXRDaGVja2xpc3RWYWx1ZSgpLCBuZXdWYWx1ZSk7XG5cbiAgICAgIGlmIChjaGVja2xpc3RDaGFuZ2UpIHtcbiAgICAgICAgY2hlY2tsaXN0Q2hhbmdlKHNjb3BlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHdhdGNoZXMgZm9yIHZhbHVlIGNoYW5nZSBvZiBjaGVja2xpc3RWYWx1ZVxuICAgIHZhciB1bmJpbmRDaGVja0xpc3RWYWx1ZSA9IHNjb3BlLiR3YXRjaChnZXRDaGVja2xpc3RWYWx1ZSwgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICBpZiggbmV3VmFsdWUgIT0gb2xkVmFsdWUgJiYgYW5ndWxhci5pc0RlZmluZWQob2xkVmFsdWUpICYmIHNjb3BlW2F0dHJzLm5nTW9kZWxdID09PSB0cnVlICkge1xuICAgICAgICB2YXIgY3VycmVudCA9IGNoZWNrbGlzdE1vZGVsR2V0dGVyKHNjb3BlLiRwYXJlbnQpO1xuICAgICAgICBjaGVja2xpc3RNb2RlbEdldHRlci5hc3NpZ24oc2NvcGUuJHBhcmVudCwgcmVtb3ZlKGN1cnJlbnQsIG9sZFZhbHVlLCBjb21wYXJhdG9yKSk7XG4gICAgICAgIGNoZWNrbGlzdE1vZGVsR2V0dGVyLmFzc2lnbihzY29wZS4kcGFyZW50LCBhZGQoY3VycmVudCwgbmV3VmFsdWUsIGNvbXBhcmF0b3IpKTtcbiAgICAgIH1cbiAgICB9LCB0cnVlKTtcblxuICAgIHZhciB1bmJpbmREZXN0cm95ID0gc2NvcGUuJG9uKCckZGVzdHJveScsIGRlc3Ryb3kpO1xuXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHVuYmluZE1vZGVsKCk7XG4gICAgICB1bmJpbmRDaGVja0xpc3RWYWx1ZSgpO1xuICAgICAgdW5iaW5kRGVzdHJveSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoZWNrbGlzdFZhbHVlKCkge1xuICAgICAgcmV0dXJuIGF0dHJzLmNoZWNrbGlzdFZhbHVlID8gJHBhcnNlKGF0dHJzLmNoZWNrbGlzdFZhbHVlKShzY29wZS4kcGFyZW50KSA6IGF0dHJzLnZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbHVlSW5DaGVja2xpc3RNb2RlbCh2YWx1ZSwgY2hlY2tlZCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBjaGVja2xpc3RNb2RlbEdldHRlcihzY29wZS4kcGFyZW50KTtcbiAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oY2hlY2tsaXN0TW9kZWxHZXR0ZXIuYXNzaWduKSkge1xuICAgICAgICBpZiAoY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNoZWNrbGlzdE1vZGVsR2V0dGVyLmFzc2lnbihzY29wZS4kcGFyZW50LCBhZGQoY3VycmVudCwgdmFsdWUsIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja2xpc3RNb2RlbEdldHRlci5hc3NpZ24oc2NvcGUuJHBhcmVudCwgcmVtb3ZlKGN1cnJlbnQsIHZhbHVlLCBjb21wYXJhdG9yKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIGRlY2xhcmUgb25lIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIGJvdGggJHdhdGNoIGZ1bmN0aW9uc1xuICAgIGZ1bmN0aW9uIHNldENoZWNrZWQobmV3QXJyLCBvbGRBcnIpIHtcbiAgICAgIGlmIChjaGVja2xpc3RCZWZvcmVDaGFuZ2UgJiYgKGNoZWNrbGlzdEJlZm9yZUNoYW5nZShzY29wZSkgPT09IGZhbHNlKSkge1xuICAgICAgICBzZXRWYWx1ZUluQ2hlY2tsaXN0TW9kZWwoZ2V0Q2hlY2tsaXN0VmFsdWUoKSwgbmdNb2RlbEdldHRlcihzY29wZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuZ01vZGVsR2V0dGVyLmFzc2lnbihzY29wZSwgY29udGFpbnMobmV3QXJyLCBnZXRDaGVja2xpc3RWYWx1ZSgpLCBjb21wYXJhdG9yKSk7XG4gICAgfVxuXG4gICAgLy8gd2F0Y2ggb3JpZ2luYWwgbW9kZWwgY2hhbmdlXG4gICAgLy8gdXNlIHRoZSBmYXN0ZXIgJHdhdGNoQ29sbGVjdGlvbiBtZXRob2QgaWYgaXQncyBhdmFpbGFibGVcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNjb3BlLiRwYXJlbnQuJHdhdGNoQ29sbGVjdGlvbikpIHtcbiAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2hDb2xsZWN0aW9uKGNoZWNrbGlzdE1vZGVsLCBzZXRDaGVja2VkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChjaGVja2xpc3RNb2RlbCwgc2V0Q2hlY2tlZCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHNjb3BlOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcblxuICAgICAgaWYgKCF0QXR0cnMuY2hlY2tsaXN0VmFsdWUgJiYgIXRBdHRycy52YWx1ZSkge1xuICAgICAgICB0aHJvdyAnWW91IHNob3VsZCBwcm92aWRlIGB2YWx1ZWAgb3IgYGNoZWNrbGlzdC12YWx1ZWAuJztcbiAgICAgIH1cblxuICAgICAgLy8gYnkgZGVmYXVsdCBuZ01vZGVsIGlzICdjaGVja2VkJywgc28gd2Ugc2V0IGl0IGlmIG5vdCBzcGVjaWZpZWRcbiAgICAgIGlmICghdEF0dHJzLm5nTW9kZWwpIHtcbiAgICAgICAgLy8gbG9jYWwgc2NvcGUgdmFyIHN0b3JpbmcgaW5kaXZpZHVhbCBjaGVja2JveCBtb2RlbFxuICAgICAgICB0QXR0cnMuJHNldChcIm5nTW9kZWxcIiwgXCJjaGVja2VkXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcG9zdExpbmtGbjtcbiAgICB9XG4gIH07XG59XSk7XG5cbi8qKlxuICogU2F0ZWxsaXplciAwLjE1LjVcbiAqIChjKSAyMDE2IFNhaGF0IFlhbGthYm92IFxuICogTGljZW5zZTogTUlUIFxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5zYXRlbGxpemVyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQ29uZmlnKCkge1xuICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gJy8nO1xuICAgICAgICAgICAgdGhpcy5sb2dpblVybCA9ICcvYXV0aC9sb2dpbic7XG4gICAgICAgICAgICB0aGlzLnNpZ251cFVybCA9ICcvYXV0aC9zaWdudXAnO1xuICAgICAgICAgICAgdGhpcy51bmxpbmtVcmwgPSAnL2F1dGgvdW5saW5rLyc7XG4gICAgICAgICAgICB0aGlzLnRva2VuTmFtZSA9ICd0b2tlbic7XG4gICAgICAgICAgICB0aGlzLnRva2VuUHJlZml4ID0gJ3NhdGVsbGl6ZXInO1xuICAgICAgICAgICAgdGhpcy50b2tlbkhlYWRlciA9ICdBdXRob3JpemF0aW9uJztcbiAgICAgICAgICAgIHRoaXMudG9rZW5UeXBlID0gJ0JlYXJlcic7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VUeXBlID0gJ2xvY2FsU3RvcmFnZSc7XG4gICAgICAgICAgICB0aGlzLnRva2VuUm9vdCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgZmFjZWJvb2s6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2ZhY2Vib29rJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvZmFjZWJvb2snLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vdjIuNS9kaWFsb2cvb2F1dGgnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnZGlzcGxheScsICdzY29wZSddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogWydlbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJywnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAncG9wdXAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDU4MCwgaGVpZ2h0OiA0MDAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ29vZ2xlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdnb29nbGUnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXV0aC9nb29nbGUnLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aCcsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogWydzY29wZSddLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbFVybFBhcmFtczogWydkaXNwbGF5JywgJ3N0YXRlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ3Byb2ZpbGUnLCAnZW1haWwnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVQcmVmaXg6ICdvcGVuaWQnLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJyAnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAncG9wdXAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDQ1MiwgaGVpZ2h0OiA2MzMgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMikpOyB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnaXRodWI6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2dpdGh1YicsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdXRoL2dpdGh1YicsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9sb2dpbi9vYXV0aC9hdXRob3JpemUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxVcmxQYXJhbXM6IFsnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsndXNlcjplbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJyAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDEwMjAsIGhlaWdodDogNjE4IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluc3RhZ3JhbToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnaW5zdGFncmFtJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvaW5zdGFncmFtJyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hcGkuaW5zdGFncmFtLmNvbS9vYXV0aC9hdXRob3JpemUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsnYmFzaWMnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6ICcrJyxcbiAgICAgICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMi4wJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGlua2VkaW46IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2xpbmtlZGluJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvbGlua2VkaW4nLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL3d3dy5saW5rZWRpbi5jb20vdWFzL29hdXRoMi9hdXRob3JpemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBbJ3N0YXRlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ3JfZW1haWxhZGRyZXNzJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnICcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnU1RBVEUnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDUyNywgaGVpZ2h0OiA1ODIgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHdpdHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAndHdpdHRlcicsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdXRoL3R3aXR0ZXInLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FwaS50d2l0dGVyLmNvbS9vYXV0aC9hdXRoZW50aWNhdGUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMS4wJyxcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiA0OTUsIGhlaWdodDogNjQ1IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR3aXRjaDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAndHdpdGNoJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvdHdpdGNoJyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hcGkudHdpdGNoLnR2L2tyYWtlbi9vYXV0aDIvYXV0aG9yaXplJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBbJ3Njb3BlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ3VzZXJfcmVhZCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJyAnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAncG9wdXAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiA1NjAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdXRoL2xpdmUnLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2xvZ2luLmxpdmUuY29tL29hdXRoMjBfYXV0aG9yaXplLnNyZicsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogWydkaXNwbGF5JywgJ3Njb3BlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ3dsLmVtYWlscyddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogJyAnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAncG9wdXAnLFxuICAgICAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgICAgICBwb3B1cE9wdGlvbnM6IHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiA1NjAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeWFob286IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3lhaG9vJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgveWFob28nLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FwaS5sb2dpbi55YWhvby5jb20vb2F1dGgyL3JlcXVlc3RfYXV0aCcsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnLCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTU5LCBoZWlnaHQ6IDUxOSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiaXRidWNrZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2JpdGJ1Y2tldCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdXRoL2JpdGJ1Y2tldCcsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYml0YnVja2V0Lm9yZy9zaXRlL29hdXRoMi9hdXRob3JpemUnLFxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IFsnc2NvcGUnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFsnZW1haWwnXSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6ICcgJyxcbiAgICAgICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBPcHRpb25zOiB7IHdpZHRoOiAxMDI4LCBoZWlnaHQ6IDUyOSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcG90aWZ5OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2F1dGgvc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuc3BvdGlmeS5jb20vYXV0aG9yaXplJyxcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsVXJsUGFyYW1zOiBbJ3N0YXRlJ10sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkVXJsUGFyYW1zOiBbJ3Njb3BlJ10sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBbJ3VzZXItcmVhZC1lbWFpbCddLFxuICAgICAgICAgICAgICAgICAgICBzY29wZVByZWZpeDogJycsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlRGVsaW1pdGVyOiAnLCcsXG4gICAgICAgICAgICAgICAgICAgIG9hdXRoVHlwZTogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogNTAwLCBoZWlnaHQ6IDUzMCB9LFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKSk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5odHRwSW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25maWcsIFwiZ2V0Q29uc3RhbnRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25maWcoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQ29uZmlnO1xuICAgIH0oKSk7XG4gICAgO1xuXG4gICAgdmFyIEF1dGhQcm92aWRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEF1dGhQcm92aWRlcihTYXRlbGxpemVyQ29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcgPSBTYXRlbGxpemVyQ29uZmlnO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcImJhc2VVcmxcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybDsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJsb2dpblVybFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5sb2dpblVybDsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5sb2dpblVybCA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwic2lnbnVwVXJsXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnNpZ251cFVybDsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5zaWdudXBVcmwgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcInVubGlua1VybFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy51bmxpbmtVcmw7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB0aGlzLlNhdGVsbGl6ZXJDb25maWcudW5saW5rVXJsID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJ0b2tlblJvb3RcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5Sb290OyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUm9vdCA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwidG9rZW5OYW1lXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuTmFtZTsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbk5hbWUgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcInRva2VuUHJlZml4XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUHJlZml4OyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuUHJlZml4ID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJ0b2tlbkhlYWRlclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbkhlYWRlcjsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbkhlYWRlciA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwidG9rZW5UeXBlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuVHlwZTsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblR5cGUgPSB2YWx1ZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdXRoUHJvdmlkZXIucHJvdG90eXBlLCBcIndpdGhDcmVkZW50aWFsc1wiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHM7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB0aGlzLlNhdGVsbGl6ZXJDb25maWcud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXV0aFByb3ZpZGVyLnByb3RvdHlwZSwgXCJzdG9yYWdlVHlwZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5zdG9yYWdlVHlwZTsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5zdG9yYWdlVHlwZSA9IHZhbHVlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhQcm92aWRlci5wcm90b3R5cGUsIFwiaHR0cEludGVyY2VwdG9yXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5TYXRlbGxpemVyQ29uZmlnLmh0dHBJbnRlcmNlcHRvcjsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcuaHR0cEludGVyY2VwdG9yID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcuaHR0cEludGVyY2VwdG9yID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuZmFjZWJvb2sgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVycy5mYWNlYm9vaywgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuZ29vZ2xlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMuZ29vZ2xlLCBvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS5naXRodWIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVycy5naXRodWIsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLmluc3RhZ3JhbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmluc3RhZ3JhbSwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUubGlua2VkaW4gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5TYXRlbGxpemVyQ29uZmlnLnByb3ZpZGVycy5saW5rZWRpbiwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUudHdpdHRlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLnR3aXR0ZXIsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLnR3aXRjaCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLnR3aXRjaCwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUubGl2ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmxpdmUsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLnlhaG9vID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnMueWFob28sIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLmJpdGJ1Y2tldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLmJpdGJ1Y2tldCwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuc3BvdGlmeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzLnNwb3RpZnksIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICBBdXRoUHJvdmlkZXIucHJvdG90eXBlLm9hdXRoMSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzW29wdGlvbnMubmFtZV0gPSBhbmd1bGFyLmV4dGVuZChvcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgb2F1dGhUeXBlOiAnMS4wJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUub2F1dGgyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5wcm92aWRlcnNbb3B0aW9ucy5uYW1lXSA9IGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLnByb3RvdHlwZS4kZ2V0ID0gZnVuY3Rpb24gKFNhdGVsbGl6ZXJTaGFyZWQsIFNhdGVsbGl6ZXJMb2NhbCwgU2F0ZWxsaXplck9BdXRoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxvZ2luOiBmdW5jdGlvbiAodXNlciwgb3B0aW9ucykgeyByZXR1cm4gU2F0ZWxsaXplckxvY2FsLmxvZ2luKHVzZXIsIG9wdGlvbnMpOyB9LFxuICAgICAgICAgICAgICAgIHNpZ251cDogZnVuY3Rpb24gKHVzZXIsIG9wdGlvbnMpIHsgcmV0dXJuIFNhdGVsbGl6ZXJMb2NhbC5zaWdudXAodXNlciwgb3B0aW9ucyk7IH0sXG4gICAgICAgICAgICAgICAgbG9nb3V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTYXRlbGxpemVyU2hhcmVkLmxvZ291dCgpOyB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHsgcmV0dXJuIFNhdGVsbGl6ZXJPQXV0aC5hdXRoZW50aWNhdGUobmFtZSwgZGF0YSk7IH0sXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHsgcmV0dXJuIFNhdGVsbGl6ZXJPQXV0aC5hdXRoZW50aWNhdGUobmFtZSwgZGF0YSk7IH0sXG4gICAgICAgICAgICAgICAgdW5saW5rOiBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucykgeyByZXR1cm4gU2F0ZWxsaXplck9BdXRoLnVubGluayhuYW1lLCBvcHRpb25zKTsgfSxcbiAgICAgICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNhdGVsbGl6ZXJTaGFyZWQuaXNBdXRoZW50aWNhdGVkKCk7IH0sXG4gICAgICAgICAgICAgICAgZ2V0UGF5bG9hZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2F0ZWxsaXplclNoYXJlZC5nZXRQYXlsb2FkKCk7IH0sXG4gICAgICAgICAgICAgICAgZ2V0VG9rZW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNhdGVsbGl6ZXJTaGFyZWQuZ2V0VG9rZW4oKTsgfSxcbiAgICAgICAgICAgICAgICBzZXRUb2tlbjogZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiBTYXRlbGxpemVyU2hhcmVkLnNldFRva2VuKHsgYWNjZXNzX3Rva2VuOiB0b2tlbiB9KTsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVUb2tlbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2F0ZWxsaXplclNoYXJlZC5yZW1vdmVUb2tlbigpOyB9LFxuICAgICAgICAgICAgICAgIHNldFN0b3JhZ2VUeXBlOiBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gU2F0ZWxsaXplclNoYXJlZC5zZXRTdG9yYWdlVHlwZSh0eXBlKTsgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgQXV0aFByb3ZpZGVyLiRpbmplY3QgPSBbJ1NhdGVsbGl6ZXJDb25maWcnXTtcbiAgICAgICAgcmV0dXJuIEF1dGhQcm92aWRlcjtcbiAgICB9KCkpO1xuICAgIEF1dGhQcm92aWRlci5wcm90b3R5cGUuJGdldC4kaW5qZWN0ID0gWydTYXRlbGxpemVyU2hhcmVkJywgJ1NhdGVsbGl6ZXJMb2NhbCcsICdTYXRlbGxpemVyT0F1dGgnXTtcblxuICAgIGZ1bmN0aW9uIGpvaW5VcmwoYmFzZVVybCwgdXJsKSB7XG4gICAgICAgIGlmICgvXig/OlthLXpdKzopP1xcL1xcLy9pLnRlc3QodXJsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgam9pbmVkID0gW2Jhc2VVcmwsIHVybF0uam9pbignLycpO1xuICAgICAgICB2YXIgbm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0clxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFwvXSsvZywgJy8nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXD8vZywgJz8nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXCMvZywgJyMnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXDpcXC8vZywgJzovLycpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplKGpvaW5lZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZ1bGxVcmxQYXRoKGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciBpc0h0dHBzID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgICByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgK1xuICAgICAgICAgICAgJzonICsgKGxvY2F0aW9uLnBvcnQgfHwgKGlzSHR0cHMgPyAnNDQzJyA6ICc4MCcpKSArXG4gICAgICAgICAgICAoL15cXC8vLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpID8gbG9jYXRpb24ucGF0aG5hbWUgOiAnLycgKyBsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcoc3RyKSB7XG4gICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goKHN0ciB8fCAnJykuc3BsaXQoJyYnKSwgZnVuY3Rpb24gKGtleVZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGtleVZhbHVlLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlWzBdKTtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlWzFdKSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZVsxXSkgOiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlQmFzZTY0KHN0cikge1xuICAgICAgICB2YXIgYnVmZmVyO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuICAgICAgICB2YXIgcmVfYnRvdSA9IG5ldyBSZWdFeHAoW1xuICAgICAgICAgICAgJ1tcXHhDMC1cXHhERl1bXFx4ODAtXFx4QkZdJyxcbiAgICAgICAgICAgICdbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfScsXG4gICAgICAgICAgICAnW1xceEYwLVxceEY3XVtcXHg4MC1cXHhCRl17M30nXG4gICAgICAgIF0uam9pbignfCcpLCAnZycpO1xuICAgICAgICB2YXIgY2JfYnRvdSA9IGZ1bmN0aW9uIChjY2NjKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNjY2MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICB2YXIgY3AgPSAoKDB4MDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4KVxuICAgICAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNwIC0gMHgxMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmcm9tQ2hhckNvZGUoKG9mZnNldCA+Pj4gMTApICsgMHhEODAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoKG9mZnNldCAmIDB4M0ZGKSArIDB4REMwMCkpO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZSgoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb21DaGFyQ29kZSgoKDB4MWYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBidG91ID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLnJlcGxhY2UocmVfYnRvdSwgY2JfYnRvdSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfZGVjb2RlID0gYnVmZmVyID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoYS5jb25zdHJ1Y3RvciA9PT0gYnVmZmVyLmNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgPyBhIDogbmV3IGJ1ZmZlcihhLCAnYmFzZTY0JykpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgICAgIDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnRvdShhdG9iKGEpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBfZGVjb2RlKFN0cmluZyhzdHIpLnJlcGxhY2UoL1stX10vZywgZnVuY3Rpb24gKG0wKSB7XG4gICAgICAgICAgICByZXR1cm4gbTAgPT09ICctJyA/ICcrJyA6ICcvJztcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL10vZywgJycpKTtcbiAgICB9XG5cbiAgICB2YXIgU2hhcmVkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU2hhcmVkKCRxLCAkd2luZG93LCBTYXRlbGxpemVyQ29uZmlnLCBTYXRlbGxpemVyU3RvcmFnZSkge1xuICAgICAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlID0gU2F0ZWxsaXplclN0b3JhZ2U7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLlNhdGVsbGl6ZXJDb25maWcsIHRva2VuTmFtZSA9IF9hLnRva2VuTmFtZSwgdG9rZW5QcmVmaXggPSBfYS50b2tlblByZWZpeDtcbiAgICAgICAgICAgIHRoaXMucHJlZml4ZWRUb2tlbk5hbWUgPSB0b2tlblByZWZpeCA/IFt0b2tlblByZWZpeCwgdG9rZW5OYW1lXS5qb2luKCdfJykgOiB0b2tlbk5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgU2hhcmVkLnByb3RvdHlwZS5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldCh0aGlzLnByZWZpeGVkVG9rZW5OYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2hhcmVkLnByb3RvdHlwZS5nZXRQYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5TYXRlbGxpemVyU3RvcmFnZS5nZXQodGhpcy5wcmVmaXhlZFRva2VuTmFtZSk7XG4gICAgICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4uc3BsaXQoJy4nKS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlQmFzZTY0KGJhc2U2NCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU2hhcmVkLnByb3RvdHlwZS5zZXRUb2tlbiA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIHRva2VuUm9vdCA9IHRoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblJvb3Q7XG4gICAgICAgICAgICB2YXIgdG9rZW5OYW1lID0gdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuTmFtZTtcbiAgICAgICAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KGFjY2Vzc1Rva2VuKSAmJiBhbmd1bGFyLmlzT2JqZWN0KGFjY2Vzc1Rva2VuLmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoYWNjZXNzVG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0b2tlbiAmJiByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlblJvb3REYXRhID0gdG9rZW5Sb290ICYmIHRva2VuUm9vdC5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAobywgeCkgeyByZXR1cm4gb1t4XTsgfSwgcmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlblJvb3REYXRhID8gdG9rZW5Sb290RGF0YVt0b2tlbk5hbWVdIDogcmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhW3Rva2VuTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLnNldCh0aGlzLnByZWZpeGVkVG9rZW5OYW1lLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFNoYXJlZC5wcm90b3R5cGUucmVtb3ZlVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLnJlbW92ZSh0aGlzLnByZWZpeGVkVG9rZW5OYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2hhcmVkLnByb3RvdHlwZS5pc0F1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLmdldCh0aGlzLnByZWZpeGVkVG9rZW5OYW1lKTtcbiAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5zcGxpdCgnLicpLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IEpTT04ucGFyc2UodGhpcy4kd2luZG93LmF0b2IoYmFzZTY0KSkuZXhwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleHAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8IGV4cDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFBhc3M6IE5vbi1KV1QgdG9rZW4gdGhhdCBsb29rcyBsaWtlIEpXVFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBQYXNzOiBBbGwgb3RoZXIgdG9rZW5zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEZhaWw6IE5vIHRva2VuIGF0IGFsbFxuICAgICAgICB9O1xuICAgICAgICBTaGFyZWQucHJvdG90eXBlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UucmVtb3ZlKHRoaXMucHJlZml4ZWRUb2tlbk5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEud2hlbigpO1xuICAgICAgICB9O1xuICAgICAgICBTaGFyZWQucHJvdG90eXBlLnNldFN0b3JhZ2VUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5zdG9yYWdlVHlwZSA9IHR5cGU7XG4gICAgICAgIH07XG4gICAgICAgIFNoYXJlZC4kaW5qZWN0ID0gWyckcScsICckd2luZG93JywgJ1NhdGVsbGl6ZXJDb25maWcnLCAnU2F0ZWxsaXplclN0b3JhZ2UnXTtcbiAgICAgICAgcmV0dXJuIFNoYXJlZDtcbiAgICB9KCkpO1xuXG4gICAgdmFyIExvY2FsID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTG9jYWwoJGh0dHAsIFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJTaGFyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTaGFyZWQgPSBTYXRlbGxpemVyU2hhcmVkO1xuICAgICAgICB9XG4gICAgICAgIExvY2FsLnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9ucy51cmwgPyBvcHRpb25zLnVybCA6IGpvaW5VcmwodGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwsIHRoaXMuU2F0ZWxsaXplckNvbmZpZy5sb2dpblVybCk7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEgPSB1c2VyIHx8IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgJ1BPU1QnO1xuICAgICAgICAgICAgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCB0aGlzLlNhdGVsbGl6ZXJDb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAob3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5TYXRlbGxpemVyU2hhcmVkLnNldFRva2VuKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTG9jYWwucHJvdG90eXBlLnNpZ251cCA9IGZ1bmN0aW9uICh1c2VyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBvcHRpb25zLnVybCA/IG9wdGlvbnMudXJsIDogam9pblVybCh0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCwgdGhpcy5TYXRlbGxpemVyQ29uZmlnLnNpZ251cFVybCk7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEgPSB1c2VyIHx8IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgJ1BPU1QnO1xuICAgICAgICAgICAgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCB0aGlzLlNhdGVsbGl6ZXJDb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAob3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIExvY2FsLiRpbmplY3QgPSBbJyRodHRwJywgJ1NhdGVsbGl6ZXJDb25maWcnLCAnU2F0ZWxsaXplclNoYXJlZCddO1xuICAgICAgICByZXR1cm4gTG9jYWw7XG4gICAgfSgpKTtcblxuICAgIHZhciBQb3B1cCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFBvcHVwKCRpbnRlcnZhbCwgJHdpbmRvdywgJHEpIHtcbiAgICAgICAgICAgIHRoaXMuJGludGVydmFsID0gJGludGVydmFsO1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuJHEgPSAkcTtcbiAgICAgICAgICAgIHRoaXMucG9wdXAgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBQb3B1cC5wcm90b3R5cGUuc3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJz0nICsgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbignLCcpO1xuICAgICAgICB9O1xuICAgICAgICBQb3B1cC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICh1cmwsIG5hbWUsIHBvcHVwT3B0aW9ucywgcmVkaXJlY3RVcmksIGRvbnRQb2xsKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBwb3B1cE9wdGlvbnMud2lkdGggfHwgNTAwO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBvcHVwT3B0aW9ucy5oZWlnaHQgfHwgNTAwO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnN0cmluZ2lmeU9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMuJHdpbmRvdy5zY3JlZW5ZICsgKCh0aGlzLiR3aW5kb3cub3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gMi41KSxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLiR3aW5kb3cuc2NyZWVuWCArICgodGhpcy4kd2luZG93Lm91dGVyV2lkdGggLSB3aWR0aCkgLyAyKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgcG9wdXBOYW1lID0gdGhpcy4kd2luZG93Wydjb3Jkb3ZhJ10gfHwgdGhpcy4kd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA+IC0xID8gJ19ibGFuaycgOiBuYW1lO1xuICAgICAgICAgICAgdGhpcy5wb3B1cCA9IHRoaXMuJHdpbmRvdy5vcGVuKHVybCwgcG9wdXBOYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvcHVwICYmIHRoaXMucG9wdXAuZm9jdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9udFBvbGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4kd2luZG93Wydjb3Jkb3ZhJ10pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudExpc3RlbmVyKHJlZGlyZWN0VXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh1cmwgPT09ICdhYm91dDpibGFuaycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9sbGluZyhyZWRpcmVjdFVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFBvcHVwLnByb3RvdHlwZS5wb2xsaW5nID0gZnVuY3Rpb24gKHJlZGlyZWN0VXJpKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciByZWRpcmVjdFVyaVBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaVBhcnNlci5ocmVmID0gcmVkaXJlY3RVcmk7XG4gICAgICAgICAgICAgICAgdmFyIHJlZGlyZWN0VXJpUGF0aCA9IGdldEZ1bGxVcmxQYXRoKHJlZGlyZWN0VXJpUGFyc2VyKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9sbGluZyA9IF90aGlzLiRpbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMucG9wdXAgfHwgX3RoaXMucG9wdXAuY2xvc2VkIHx8IF90aGlzLnBvcHVwLmNsb3NlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy4kaW50ZXJ2YWwuY2FuY2VsKHBvbGxpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVGhlIHBvcHVwIHdpbmRvdyB3YXMgY2xvc2VkJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBXaW5kb3dQYXRoID0gZ2V0RnVsbFVybFBhdGgoX3RoaXMucG9wdXAubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHVwV2luZG93UGF0aCA9PT0gcmVkaXJlY3RVcmlQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnBvcHVwLmxvY2F0aW9uLnNlYXJjaCB8fCBfdGhpcy5wb3B1cC5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcoX3RoaXMucG9wdXAubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8kLywgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBwYXJzZVF1ZXJ5U3RyaW5nKF90aGlzLnBvcHVwLmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1tcXC8kXS8sICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgcXVlcnksIGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKHBhcmFtcy5lcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdPQXV0aCByZWRpcmVjdCBoYXMgb2NjdXJyZWQgYnV0IG5vIHF1ZXJ5IG9yIGhhc2ggcGFyYW1ldGVycyB3ZXJlIGZvdW5kLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaGV5IHdlcmUgZWl0aGVyIG5vdCBzZXQgZHVyaW5nIHRoZSByZWRpcmVjdCwgb3Igd2VyZSByZW1vdmVk4oCUdHlwaWNhbGx5IGJ5IGEgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncm91dGluZyBsaWJyYXJ54oCUYmVmb3JlIFNhdGVsbGl6ZXIgY291bGQgcmVhZCBpdC4nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRpbnRlcnZhbC5jYW5jZWwocG9sbGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgUG9wdXAucHJvdG90eXBlLmV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAocmVkaXJlY3RVcmkpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC51cmwuaW5kZXhPZihyZWRpcmVjdFVyaSkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZXIuaHJlZiA9IGV2ZW50LnVybDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlci5zZWFyY2ggfHwgcGFyc2VyLmhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcocGFyc2VyLnNlYXJjaC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvXFwvJC8sICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHBhcnNlUXVlcnlTdHJpbmcocGFyc2VyLmhhc2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1tcXC8kXS8sICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gYW5ndWxhci5leHRlbmQoe30sIHF1ZXJ5LCBoYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKHBhcmFtcy5lcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignQXV0aG9yaXphdGlvbiBmYWlsZWQnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignZXhpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVGhlIHBvcHVwIHdpbmRvdyB3YXMgY2xvc2VkJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFBvcHVwLiRpbmplY3QgPSBbJyRpbnRlcnZhbCcsICckd2luZG93JywgJyRxJ107XG4gICAgICAgIHJldHVybiBQb3B1cDtcbiAgICB9KCkpO1xuXG4gICAgdmFyIE9BdXRoMSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE9BdXRoMSgkaHR0cCwgJHdpbmRvdywgU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclBvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gICAgICAgICAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyQ29uZmlnID0gU2F0ZWxsaXplckNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclBvcHVwID0gU2F0ZWxsaXplclBvcHVwO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uRW5kcG9pbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NvcGU6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NvcGVQcmVmaXg6IG51bGwsXG4gICAgICAgICAgICAgICAgc2NvcGVEZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWRVcmxQYXJhbXM6IG51bGwsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFVybFBhcmFtczogbnVsbCxcbiAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcxLjAnLFxuICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogbnVsbCwgaGVpZ2h0OiBudWxsIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgO1xuICAgICAgICBPQXV0aDEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucywgdXNlckRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLCBwb3B1cE9wdGlvbnMgPSBvcHRpb25zLnBvcHVwT3B0aW9ucztcbiAgICAgICAgICAgIHZhciByZWRpcmVjdFVyaSA9IHRoaXMuZGVmYXVsdHMucmVkaXJlY3RVcmk7XG4gICAgICAgICAgICAvLyBTaG91bGQgb3BlbiBhbiBlbXB0eSBwb3B1cCBhbmQgd2FpdCB1bnRpbCByZXF1ZXN0IHRva2VuIGlzIHJlY2VpdmVkXG4gICAgICAgICAgICBpZiAoIXRoaXMuJHdpbmRvd1snY29yZG92YSddKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyUG9wdXAub3BlbignYWJvdXQ6YmxhbmsnLCBuYW1lLCBwb3B1cE9wdGlvbnMsIHJlZGlyZWN0VXJpLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3RUb2tlbigpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wZW5Qb3B1cChvcHRpb25zLCByZXNwb25zZSkudGhlbihmdW5jdGlvbiAocG9wdXBSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZXhjaGFuZ2VGb3JUb2tlbihwb3B1cFJlc3BvbnNlLCB1c2VyRGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgT0F1dGgxLnByb3RvdHlwZS5vcGVuUG9wdXAgPSBmdW5jdGlvbiAob3B0aW9ucywgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBbb3B0aW9ucy5hdXRob3JpemF0aW9uRW5kcG9pbnQsIHRoaXMuYnVpbGRRdWVyeVN0cmluZyhyZXNwb25zZS5kYXRhKV0uam9pbignPycpO1xuICAgICAgICAgICAgdmFyIHJlZGlyZWN0VXJpID0gdGhpcy5kZWZhdWx0cy5yZWRpcmVjdFVyaTtcbiAgICAgICAgICAgIGlmICh0aGlzLiR3aW5kb3dbJ2NvcmRvdmEnXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlNhdGVsbGl6ZXJQb3B1cC5vcGVuKHVybCwgb3B0aW9ucy5uYW1lLCBvcHRpb25zLnBvcHVwT3B0aW9ucywgcmVkaXJlY3RVcmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyUG9wdXAucG9wdXAubG9jYXRpb24gPSB1cmw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuU2F0ZWxsaXplclBvcHVwLnBvbGxpbmcocmVkaXJlY3RVcmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBPQXV0aDEucHJvdG90eXBlLmdldFJlcXVlc3RUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCA/IGpvaW5VcmwodGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwsIHRoaXMuZGVmYXVsdHMudXJsKSA6IHRoaXMuZGVmYXVsdHMudXJsO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdCh1cmwsIHRoaXMuZGVmYXVsdHMpO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDEucHJvdG90eXBlLmV4Y2hhbmdlRm9yVG9rZW4gPSBmdW5jdGlvbiAob2F1dGhEYXRhLCB1c2VyRGF0YSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBhbmd1bGFyLmV4dGVuZCh7fSwgdXNlckRhdGEsIG9hdXRoRGF0YSk7XG4gICAgICAgICAgICB2YXIgZXhjaGFuZ2VGb3JUb2tlblVybCA9IHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsID8gam9pblVybCh0aGlzLlNhdGVsbGl6ZXJDb25maWcuYmFzZVVybCwgdGhpcy5kZWZhdWx0cy51cmwpIDogdGhpcy5kZWZhdWx0cy51cmw7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5wb3N0KGV4Y2hhbmdlRm9yVG9rZW5VcmwsIHBheWxvYWQsIHsgd2l0aENyZWRlbnRpYWxzOiB0aGlzLlNhdGVsbGl6ZXJDb25maWcud2l0aENyZWRlbnRpYWxzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDEucHJvdG90eXBlLmJ1aWxkUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gW107XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdHIuam9pbignJicpO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDEuJGluamVjdCA9IFsnJGh0dHAnLCAnJHdpbmRvdycsICdTYXRlbGxpemVyQ29uZmlnJywgJ1NhdGVsbGl6ZXJQb3B1cCddO1xuICAgICAgICByZXR1cm4gT0F1dGgxO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgT0F1dGgyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gT0F1dGgyKCRodHRwLCAkd2luZG93LCAkdGltZW91dCwgJHEsIFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJQb3B1cCwgU2F0ZWxsaXplclN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgICAgICAgICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG4gICAgICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgICAgICAgICB0aGlzLiRxID0gJHE7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJDb25maWcgPSBTYXRlbGxpemVyQ29uZmlnO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyUG9wdXAgPSBTYXRlbGxpemVyUG9wdXA7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTdG9yYWdlID0gU2F0ZWxsaXplclN0b3JhZ2U7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICAgICAgICAgIGNsaWVudElkOiBudWxsLFxuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25FbmRwb2ludDogbnVsbCxcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZTogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZVByZWZpeDogbnVsbCxcbiAgICAgICAgICAgICAgICBzY29wZURlbGltaXRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByZXF1aXJlZFVybFBhcmFtczogbnVsbCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VXJsUGFyYW1zOiBbJ3Jlc3BvbnNlX3R5cGUnLCAnY2xpZW50X2lkJywgJ3JlZGlyZWN0X3VyaSddLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2NvZGUnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlUGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6ICdjbGllbnRJZCcsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiAncmVkaXJlY3RVcmknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvYXV0aFR5cGU6ICcyLjAnLFxuICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczogeyB3aWR0aDogbnVsbCwgaGVpZ2h0OiBudWxsIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgT0F1dGgyLmNhbWVsQ2FzZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZS5yZXBsYWNlKC8oW1xcOlxcLVxcX10rKC4pKS9nLCBmdW5jdGlvbiAoXywgc2VwYXJhdG9yLCBsZXR0ZXIsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucywgdXNlckRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoX3RoaXMuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZU5hbWUgPSBfdGhpcy5kZWZhdWx0cy5uYW1lICsgJ19zdGF0ZSc7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuZGVmYXVsdHMsIG5hbWUgPSBfYS5uYW1lLCBzdGF0ZSA9IF9hLnN0YXRlLCBwb3B1cE9wdGlvbnMgPSBfYS5wb3B1cE9wdGlvbnMsIHJlZGlyZWN0VXJpID0gX2EucmVkaXJlY3RVcmksIHJlc3BvbnNlVHlwZSA9IF9hLnJlc3BvbnNlVHlwZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLnNldChzdGF0ZU5hbWUsIHN0YXRlKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLlNhdGVsbGl6ZXJTdG9yYWdlLnNldChzdGF0ZU5hbWUsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IFtfdGhpcy5kZWZhdWx0cy5hdXRob3JpemF0aW9uRW5kcG9pbnQsIF90aGlzLmJ1aWxkUXVlcnlTdHJpbmcoKV0uam9pbignPycpO1xuICAgICAgICAgICAgICAgIF90aGlzLlNhdGVsbGl6ZXJQb3B1cC5vcGVuKHVybCwgbmFtZSwgcG9wdXBPcHRpb25zLCByZWRpcmVjdFVyaSkudGhlbihmdW5jdGlvbiAob2F1dGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ3Rva2VuJyB8fCAhdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShvYXV0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9hdXRoLnN0YXRlICYmIG9hdXRoLnN0YXRlICE9PSBfdGhpcy5TYXRlbGxpemVyU3RvcmFnZS5nZXQoc3RhdGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1RoZSB2YWx1ZSByZXR1cm5lZCBpbiB0aGUgc3RhdGUgcGFyYW1ldGVyIGRvZXMgbm90IG1hdGNoIHRoZSBzdGF0ZSB2YWx1ZSBmcm9tIHlvdXIgb3JpZ2luYWwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24gY29kZSByZXF1ZXN0LicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmV4Y2hhbmdlRm9yVG9rZW4ob2F1dGgsIHVzZXJEYXRhKSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiByZWplY3QoZXJyb3IpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDIucHJvdG90eXBlLmV4Y2hhbmdlRm9yVG9rZW4gPSBmdW5jdGlvbiAob2F1dGhEYXRhLCB1c2VyRGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBwYXlsb2FkID0gYW5ndWxhci5leHRlbmQoe30sIHVzZXJEYXRhKTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmRlZmF1bHRzLnJlc3BvbnNlUGFyYW1zLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZFt2YWx1ZV0gPSBvYXV0aERhdGEuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjbGllbnRJZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkW3ZhbHVlXSA9IF90aGlzLmRlZmF1bHRzLmNsaWVudElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlZGlyZWN0VXJpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWRbdmFsdWVdID0gX3RoaXMuZGVmYXVsdHMucmVkaXJlY3RVcmk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWRbdmFsdWVdID0gb2F1dGhEYXRhW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob2F1dGhEYXRhLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5zdGF0ZSA9IG9hdXRoRGF0YS5zdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleGNoYW5nZUZvclRva2VuVXJsID0gdGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwgP1xuICAgICAgICAgICAgICAgIGpvaW5VcmwodGhpcy5TYXRlbGxpemVyQ29uZmlnLmJhc2VVcmwsIHRoaXMuZGVmYXVsdHMudXJsKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0cy51cmw7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5wb3N0KGV4Y2hhbmdlRm9yVG9rZW5VcmwsIHBheWxvYWQsIHsgd2l0aENyZWRlbnRpYWxzOiB0aGlzLlNhdGVsbGl6ZXJDb25maWcud2l0aENyZWRlbnRpYWxzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPQXV0aDIucHJvdG90eXBlLmJ1aWxkUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlUGFpcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciB1cmxQYXJhbXNDYXRlZ29yaWVzID0gWydkZWZhdWx0VXJsUGFyYW1zJywgJ3JlcXVpcmVkVXJsUGFyYW1zJywgJ29wdGlvbmFsVXJsUGFyYW1zJ107XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godXJsUGFyYW1zQ2F0ZWdvcmllcywgZnVuY3Rpb24gKHBhcmFtc0NhdGVnb3J5KSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKF90aGlzLmRlZmF1bHRzW3BhcmFtc0NhdGVnb3J5XSwgZnVuY3Rpb24gKHBhcmFtTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FtZWxpemVkTmFtZSA9IE9BdXRoMi5jYW1lbENhc2UocGFyYW1OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBhbmd1bGFyLmlzRnVuY3Rpb24oX3RoaXMuZGVmYXVsdHNbcGFyYW1OYW1lXSkgPyBfdGhpcy5kZWZhdWx0c1twYXJhbU5hbWVdKCkgOiBfdGhpcy5kZWZhdWx0c1tjYW1lbGl6ZWROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtTmFtZSA9PT0gJ3JlZGlyZWN0X3VyaScgJiYgIXBhcmFtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1OYW1lID09PSAnc3RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVOYW1lID0gX3RoaXMuZGVmYXVsdHMubmFtZSArICdfc3RhdGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1WYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChfdGhpcy5TYXRlbGxpemVyU3RvcmFnZS5nZXQoc3RhdGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtTmFtZSA9PT0gJ3Njb3BlJyAmJiBBcnJheS5pc0FycmF5KHBhcmFtVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlID0gcGFyYW1WYWx1ZS5qb2luKF90aGlzLmRlZmF1bHRzLnNjb3BlRGVsaW1pdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWZhdWx0cy5zY29wZVByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtVmFsdWUgPSBbX3RoaXMuZGVmYXVsdHMuc2NvcGVQcmVmaXgsIHBhcmFtVmFsdWVdLmpvaW4oX3RoaXMuZGVmYXVsdHMuc2NvcGVEZWxpbWl0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGtleVZhbHVlUGFpcnMucHVzaChbcGFyYW1OYW1lLCBwYXJhbVZhbHVlXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBrZXlWYWx1ZVBhaXJzLm1hcChmdW5jdGlvbiAocGFpcikgeyByZXR1cm4gcGFpci5qb2luKCc9Jyk7IH0pLmpvaW4oJyYnKTtcbiAgICAgICAgfTtcbiAgICAgICAgT0F1dGgyLiRpbmplY3QgPSBbJyRodHRwJywgJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCAnJHEnLCAnU2F0ZWxsaXplckNvbmZpZycsICdTYXRlbGxpemVyUG9wdXAnLCAnU2F0ZWxsaXplclN0b3JhZ2UnXTtcbiAgICAgICAgcmV0dXJuIE9BdXRoMjtcbiAgICB9KCkpO1xuXG4gICAgdmFyIE9BdXRoID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gT0F1dGgoJGh0dHAsICR3aW5kb3csICR0aW1lb3V0LCAkcSwgU2F0ZWxsaXplckNvbmZpZywgU2F0ZWxsaXplclBvcHVwLCBTYXRlbGxpemVyU3RvcmFnZSwgU2F0ZWxsaXplclNoYXJlZCwgU2F0ZWxsaXplck9BdXRoMSwgU2F0ZWxsaXplck9BdXRoMikge1xuICAgICAgICAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgICAgIHRoaXMuJHEgPSAkcTtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJQb3B1cCA9IFNhdGVsbGl6ZXJQb3B1cDtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclN0b3JhZ2UgPSBTYXRlbGxpemVyU3RvcmFnZTtcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplclNoYXJlZCA9IFNhdGVsbGl6ZXJTaGFyZWQ7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJPQXV0aDEgPSBTYXRlbGxpemVyT0F1dGgxO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyT0F1dGgyID0gU2F0ZWxsaXplck9BdXRoMjtcbiAgICAgICAgfVxuICAgICAgICBPQXV0aC5wcm90b3R5cGUuYXV0aGVudGljYXRlID0gZnVuY3Rpb24gKG5hbWUsIHVzZXJEYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBwcm92aWRlciA9IF90aGlzLlNhdGVsbGl6ZXJDb25maWcucHJvdmlkZXJzW25hbWVdO1xuICAgICAgICAgICAgICAgIHZhciBvYXV0aCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwcm92aWRlci5vYXV0aFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnMS4wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoID0gbmV3IE9BdXRoMShfdGhpcy4kaHR0cCwgX3RoaXMuJHdpbmRvdywgX3RoaXMuU2F0ZWxsaXplckNvbmZpZywgX3RoaXMuU2F0ZWxsaXplclBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcyLjAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGggPSBuZXcgT0F1dGgyKF90aGlzLiRodHRwLCBfdGhpcy4kd2luZG93LCBfdGhpcy4kdGltZW91dCwgX3RoaXMuJHEsIF90aGlzLlNhdGVsbGl6ZXJDb25maWcsIF90aGlzLlNhdGVsbGl6ZXJQb3B1cCwgX3RoaXMuU2F0ZWxsaXplclN0b3JhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBPQXV0aCBUeXBlJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2F1dGguaW5pdChwcm92aWRlciwgdXNlckRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm92aWRlci51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLlNhdGVsbGl6ZXJTaGFyZWQuc2V0VG9rZW4ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoLnByb3RvdHlwZS51bmxpbmsgPSBmdW5jdGlvbiAocHJvdmlkZXIsIGh0dHBPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoaHR0cE9wdGlvbnMgPT09IHZvaWQgMCkgeyBodHRwT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICBodHRwT3B0aW9ucy51cmwgPSBodHRwT3B0aW9ucy51cmwgPyBodHRwT3B0aW9ucy51cmwgOiBqb2luVXJsKHRoaXMuU2F0ZWxsaXplckNvbmZpZy5iYXNlVXJsLCB0aGlzLlNhdGVsbGl6ZXJDb25maWcudW5saW5rVXJsKTtcbiAgICAgICAgICAgIGh0dHBPcHRpb25zLmRhdGEgPSB7IHByb3ZpZGVyOiBwcm92aWRlciB9IHx8IGh0dHBPcHRpb25zLmRhdGE7XG4gICAgICAgICAgICBodHRwT3B0aW9ucy5tZXRob2QgPSBodHRwT3B0aW9ucy5tZXRob2QgfHwgJ1BPU1QnO1xuICAgICAgICAgICAgaHR0cE9wdGlvbnMud2l0aENyZWRlbnRpYWxzID0gaHR0cE9wdGlvbnMud2l0aENyZWRlbnRpYWxzIHx8IHRoaXMuU2F0ZWxsaXplckNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kaHR0cChodHRwT3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIE9BdXRoLiRpbmplY3QgPSBbXG4gICAgICAgICAgICAnJGh0dHAnLFxuICAgICAgICAgICAgJyR3aW5kb3cnLFxuICAgICAgICAgICAgJyR0aW1lb3V0JyxcbiAgICAgICAgICAgICckcScsXG4gICAgICAgICAgICAnU2F0ZWxsaXplckNvbmZpZycsXG4gICAgICAgICAgICAnU2F0ZWxsaXplclBvcHVwJyxcbiAgICAgICAgICAgICdTYXRlbGxpemVyU3RvcmFnZScsXG4gICAgICAgICAgICAnU2F0ZWxsaXplclNoYXJlZCcsXG4gICAgICAgICAgICAnU2F0ZWxsaXplck9BdXRoMScsXG4gICAgICAgICAgICAnU2F0ZWxsaXplck9BdXRoMidcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIE9BdXRoO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU3RvcmFnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFN0b3JhZ2UoJHdpbmRvdywgU2F0ZWxsaXplckNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLm1lbW9yeVN0b3JlID0ge307XG4gICAgICAgIH1cbiAgICAgICAgU3RvcmFnZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kd2luZG93W3RoaXMuU2F0ZWxsaXplckNvbmZpZy5zdG9yYWdlVHlwZV0uZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1vcnlTdG9yZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTdG9yYWdlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLiR3aW5kb3dbdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlXS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lbW9yeVN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU3RvcmFnZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLiR3aW5kb3dbdGhpcy5TYXRlbGxpemVyQ29uZmlnLnN0b3JhZ2VUeXBlXS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1lbW9yeVN0b3JlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFN0b3JhZ2UuJGluamVjdCA9IFsnJHdpbmRvdycsICdTYXRlbGxpemVyQ29uZmlnJ107XG4gICAgICAgIHJldHVybiBTdG9yYWdlO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgSW50ZXJjZXB0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBJbnRlcmNlcHRvcihTYXRlbGxpemVyQ29uZmlnLCBTYXRlbGxpemVyU2hhcmVkLCBTYXRlbGxpemVyU3RvcmFnZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuU2F0ZWxsaXplckNvbmZpZyA9IFNhdGVsbGl6ZXJDb25maWc7XG4gICAgICAgICAgICB0aGlzLlNhdGVsbGl6ZXJTaGFyZWQgPSBTYXRlbGxpemVyU2hhcmVkO1xuICAgICAgICAgICAgdGhpcy5TYXRlbGxpemVyU3RvcmFnZSA9IFNhdGVsbGl6ZXJTdG9yYWdlO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maWdbJ3NraXBBdXRob3JpemF0aW9uJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLlNhdGVsbGl6ZXJTaGFyZWQuaXNBdXRoZW50aWNhdGVkKCkgJiYgX3RoaXMuU2F0ZWxsaXplckNvbmZpZy5odHRwSW50ZXJjZXB0b3IoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5OYW1lID0gX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblByZWZpeCA/XG4gICAgICAgICAgICAgICAgICAgICAgICBbX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblByZWZpeCwgX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlbk5hbWVdLmpvaW4oJ18nKSA6IF90aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5OYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBfdGhpcy5TYXRlbGxpemVyU3RvcmFnZS5nZXQodG9rZW5OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLlNhdGVsbGl6ZXJDb25maWcudG9rZW5IZWFkZXIgJiYgX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX3RoaXMuU2F0ZWxsaXplckNvbmZpZy50b2tlblR5cGUgKyAnICcgKyB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVyc1tfdGhpcy5TYXRlbGxpemVyQ29uZmlnLnRva2VuSGVhZGVyXSA9IHRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBJbnRlcmNlcHRvci5GYWN0b3J5ID0gZnVuY3Rpb24gKFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJTaGFyZWQsIFNhdGVsbGl6ZXJTdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGVyY2VwdG9yKFNhdGVsbGl6ZXJDb25maWcsIFNhdGVsbGl6ZXJTaGFyZWQsIFNhdGVsbGl6ZXJTdG9yYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgSW50ZXJjZXB0b3IuJGluamVjdCA9IFsnU2F0ZWxsaXplckNvbmZpZycsICdTYXRlbGxpemVyU2hhcmVkJywgJ1NhdGVsbGl6ZXJTdG9yYWdlJ107XG4gICAgICAgIHJldHVybiBJbnRlcmNlcHRvcjtcbiAgICB9KCkpO1xuICAgIEludGVyY2VwdG9yLkZhY3RvcnkuJGluamVjdCA9IFsnU2F0ZWxsaXplckNvbmZpZycsICdTYXRlbGxpemVyU2hhcmVkJywgJ1NhdGVsbGl6ZXJTdG9yYWdlJ107XG5cbiAgICB2YXIgSHR0cFByb3ZpZGVyQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSHR0cFByb3ZpZGVyQ29uZmlnKCRodHRwUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHBQcm92aWRlciA9ICRodHRwUHJvdmlkZXI7XG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKEludGVyY2VwdG9yLkZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIEh0dHBQcm92aWRlckNvbmZpZy4kaW5qZWN0ID0gWyckaHR0cFByb3ZpZGVyJ107XG4gICAgICAgIHJldHVybiBIdHRwUHJvdmlkZXJDb25maWc7XG4gICAgfSgpKTtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzYXRlbGxpemVyJywgW10pXG4gICAgICAgIC5wcm92aWRlcignJGF1dGgnLCBbJ1NhdGVsbGl6ZXJDb25maWcnLCBmdW5jdGlvbiAoU2F0ZWxsaXplckNvbmZpZykgeyByZXR1cm4gbmV3IEF1dGhQcm92aWRlcihTYXRlbGxpemVyQ29uZmlnKTsgfV0pXG4gICAgICAgIC5jb25zdGFudCgnU2F0ZWxsaXplckNvbmZpZycsIENvbmZpZy5nZXRDb25zdGFudClcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJTaGFyZWQnLCBTaGFyZWQpXG4gICAgICAgIC5zZXJ2aWNlKCdTYXRlbGxpemVyTG9jYWwnLCBMb2NhbClcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJQb3B1cCcsIFBvcHVwKVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplck9BdXRoJywgT0F1dGgpXG4gICAgICAgIC5zZXJ2aWNlKCdTYXRlbGxpemVyT0F1dGgyJywgT0F1dGgyKVxuICAgICAgICAuc2VydmljZSgnU2F0ZWxsaXplck9BdXRoMScsIE9BdXRoMSlcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJTdG9yYWdlJywgU3RvcmFnZSlcbiAgICAgICAgLnNlcnZpY2UoJ1NhdGVsbGl6ZXJJbnRlcmNlcHRvcicsIEludGVyY2VwdG9yKVxuICAgICAgICAuY29uZmlnKFsnJGh0dHBQcm92aWRlcicsIGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyKSB7IHJldHVybiBuZXcgSHR0cFByb3ZpZGVyQ29uZmlnKCRodHRwUHJvdmlkZXIpOyB9XSk7XG4gICAgdmFyIG5nMSA9ICdzYXRlbGxpemVyJztcblxuICAgIHJldHVybiBuZzE7XG5cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhdGVsbGl6ZXIuanMubWFwXG5cbi8qXG4gKiBhbmd1bGFyLXVpLWJvb3RzdHJhcFxuICogaHR0cDovL2FuZ3VsYXItdWkuZ2l0aHViLmlvL2Jvb3RzdHJhcC9cblxuICogVmVyc2lvbjogMi41LjAgLSAyMDE3LTAxLTI4XG4gKiBMaWNlbnNlOiBNSVRcbiAqL2FuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwXCIsIFtcInVpLmJvb3RzdHJhcC50cGxzXCIsIFwidWkuYm9vdHN0cmFwLmNvbGxhcHNlXCIsXCJ1aS5ib290c3RyYXAudGFiaW5kZXhcIixcInVpLmJvb3RzdHJhcC5hY2NvcmRpb25cIixcInVpLmJvb3RzdHJhcC5hbGVydFwiLFwidWkuYm9vdHN0cmFwLmJ1dHRvbnNcIixcInVpLmJvb3RzdHJhcC5jYXJvdXNlbFwiLFwidWkuYm9vdHN0cmFwLmRhdGVwYXJzZXJcIixcInVpLmJvb3RzdHJhcC5pc0NsYXNzXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBpY2tlclwiLFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBpY2tlclBvcHVwXCIsXCJ1aS5ib290c3RyYXAuZGVib3VuY2VcIixcInVpLmJvb3RzdHJhcC5tdWx0aU1hcFwiLFwidWkuYm9vdHN0cmFwLmRyb3Bkb3duXCIsXCJ1aS5ib290c3RyYXAuc3RhY2tlZE1hcFwiLFwidWkuYm9vdHN0cmFwLm1vZGFsXCIsXCJ1aS5ib290c3RyYXAucGFnaW5nXCIsXCJ1aS5ib290c3RyYXAucGFnZXJcIixcInVpLmJvb3RzdHJhcC5wYWdpbmF0aW9uXCIsXCJ1aS5ib290c3RyYXAudG9vbHRpcFwiLFwidWkuYm9vdHN0cmFwLnBvcG92ZXJcIixcInVpLmJvb3RzdHJhcC5wcm9ncmVzc2JhclwiLFwidWkuYm9vdHN0cmFwLnJhdGluZ1wiLFwidWkuYm9vdHN0cmFwLnRhYnNcIixcInVpLmJvb3RzdHJhcC50aW1lcGlja2VyXCIsXCJ1aS5ib290c3RyYXAudHlwZWFoZWFkXCJdKTtcbmFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnRwbHNcIiwgW1widWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLFwidWliL3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcInVpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiXSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmNvbGxhcHNlJywgW10pXG5cbiAgLmRpcmVjdGl2ZSgndWliQ29sbGFwc2UnLCBbJyRhbmltYXRlJywgJyRxJywgJyRwYXJzZScsICckaW5qZWN0b3InLCBmdW5jdGlvbigkYW5pbWF0ZSwgJHEsICRwYXJzZSwgJGluamVjdG9yKSB7XG4gICAgdmFyICRhbmltYXRlQ3NzID0gJGluamVjdG9yLmhhcygnJGFuaW1hdGVDc3MnKSA/ICRpbmplY3Rvci5nZXQoJyRhbmltYXRlQ3NzJykgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIGV4cGFuZGluZ0V4cHIgPSAkcGFyc2UoYXR0cnMuZXhwYW5kaW5nKSxcbiAgICAgICAgICBleHBhbmRlZEV4cHIgPSAkcGFyc2UoYXR0cnMuZXhwYW5kZWQpLFxuICAgICAgICAgIGNvbGxhcHNpbmdFeHByID0gJHBhcnNlKGF0dHJzLmNvbGxhcHNpbmcpLFxuICAgICAgICAgIGNvbGxhcHNlZEV4cHIgPSAkcGFyc2UoYXR0cnMuY29sbGFwc2VkKSxcbiAgICAgICAgICBob3Jpem9udGFsID0gZmFsc2UsXG4gICAgICAgICAgY3NzID0ge30sXG4gICAgICAgICAgY3NzVG8gPSB7fTtcblxuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICBob3Jpem9udGFsID0gISEoJ2hvcml6b250YWwnIGluIGF0dHJzKTtcbiAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY3NzID0ge1xuICAgICAgICAgICAgICB3aWR0aDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjc3NUbyA9IHt3aWR0aDogJzAnfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzID0ge1xuICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY3NzVG8gPSB7aGVpZ2h0OiAnMCd9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNjb3BlLiRldmFsKGF0dHJzLnVpYkNvbGxhcHNlKSkge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgICAgICAgICAgLmNzcyhjc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHt3aWR0aDogZWxlbWVudC5zY3JvbGxXaWR0aCArICdweCd9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge2hlaWdodDogZWxlbWVudC5zY3JvbGxIZWlnaHQgKyAncHgnfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZCgpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnY29sbGFwc2UnKSAmJiBlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHEucmVzb2x2ZShleHBhbmRpbmdFeHByKHNjb3BlKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgIGlmICgkYW5pbWF0ZUNzcykge1xuICAgICAgICAgICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgIGFkZENsYXNzOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgZWFzaW5nOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdG86IGdldFNjcm9sbEZyb21FbGVtZW50KGVsZW1lbnRbMF0pXG4gICAgICAgICAgICAgICAgfSkuc3RhcnQoKVsnZmluYWxseSddKGV4cGFuZERvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0bzogZ2V0U2Nyb2xsRnJvbUVsZW1lbnQoZWxlbWVudFswXSlcbiAgICAgICAgICAgICAgICB9KS50aGVuKGV4cGFuZERvbmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhbmd1bGFyLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXhwYW5kRG9uZSgpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgLmNzcyhjc3MpO1xuICAgICAgICAgIGV4cGFuZGVkRXhwcihzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb2xsYXBzZSgpIHtcbiAgICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQ2xhc3MoJ2NvbGxhcHNlJykgJiYgIWVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsYXBzZURvbmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkcS5yZXNvbHZlKGNvbGxhcHNpbmdFeHByKHNjb3BlKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAgIC8vIElNUE9SVEFOVDogVGhlIHdpZHRoIG11c3QgYmUgc2V0IGJlZm9yZSBhZGRpbmcgXCJjb2xsYXBzaW5nXCIgY2xhc3MuXG4gICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIGJyb3dzZXIgYXR0ZW1wdHMgdG8gYW5pbWF0ZSBmcm9tIHdpZHRoIDAgKGluXG4gICAgICAgICAgICAgIC8vIGNvbGxhcHNpbmcgY2xhc3MpIHRvIHRoZSBnaXZlbiB3aWR0aCBoZXJlLlxuICAgICAgICAgICAgICAgIC5jc3MoZ2V0U2Nyb2xsRnJvbUVsZW1lbnQoZWxlbWVudFswXSkpXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGx5IGFsbCBwYW5lbCBjb2xsYXBzZSBoYXZlIHRoZSBjb2xsYXBzZSBjbGFzcywgdGhpcyByZW1vdmFsXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudHMgdGhlIGFuaW1hdGlvbiBmcm9tIGp1bXBpbmcgdG8gY29sbGFwc2VkIHN0YXRlXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAgICAgICAgIGlmICgkYW5pbWF0ZUNzcykge1xuICAgICAgICAgICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiAnaW4nLFxuICAgICAgICAgICAgICAgICAgdG86IGNzc1RvXG4gICAgICAgICAgICAgICAgfSkuc3RhcnQoKVsnZmluYWxseSddKGNvbGxhcHNlRG9uZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ2luJywge1xuICAgICAgICAgICAgICAgICAgdG86IGNzc1RvXG4gICAgICAgICAgICAgICAgfSkudGhlbihjb2xsYXBzZURvbmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhbmd1bGFyLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29sbGFwc2VEb25lKCkge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKGNzc1RvKTsgLy8gUmVxdWlyZWQgc28gdGhhdCBjb2xsYXBzZSB3b3JrcyB3aGVuIGFuaW1hdGlvbiBpcyBkaXNhYmxlZFxuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpO1xuICAgICAgICAgIGNvbGxhcHNlZEV4cHIoc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLnVpYkNvbGxhcHNlLCBmdW5jdGlvbihzaG91bGRDb2xsYXBzZSkge1xuICAgICAgICAgIGlmIChzaG91bGRDb2xsYXBzZSkge1xuICAgICAgICAgICAgY29sbGFwc2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhwYW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGFiaW5kZXgnLCBbXSlcblxuLmRpcmVjdGl2ZSgndWliVGFiaW5kZXhUb2dnbGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgICAgYXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24oZGlzYWJsZWQpIHtcbiAgICAgICAgYXR0cnMuJHNldCgndGFiaW5kZXgnLCBkaXNhYmxlZCA/IC0xIDogbnVsbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5hY2NvcmRpb24nLCBbJ3VpLmJvb3RzdHJhcC5jb2xsYXBzZScsICd1aS5ib290c3RyYXAudGFiaW5kZXgnXSlcblxuLmNvbnN0YW50KCd1aWJBY2NvcmRpb25Db25maWcnLCB7XG4gIGNsb3NlT3RoZXJzOiB0cnVlXG59KVxuXG4uY29udHJvbGxlcignVWliQWNjb3JkaW9uQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICd1aWJBY2NvcmRpb25Db25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgYWNjb3JkaW9uQ29uZmlnKSB7XG4gIC8vIFRoaXMgYXJyYXkga2VlcHMgdHJhY2sgb2YgdGhlIGFjY29yZGlvbiBncm91cHNcbiAgdGhpcy5ncm91cHMgPSBbXTtcblxuICAvLyBFbnN1cmUgdGhhdCBhbGwgdGhlIGdyb3VwcyBpbiB0aGlzIGFjY29yZGlvbiBhcmUgY2xvc2VkLCB1bmxlc3MgY2xvc2Utb3RoZXJzIGV4cGxpY2l0bHkgc2F5cyBub3QgdG9cbiAgdGhpcy5jbG9zZU90aGVycyA9IGZ1bmN0aW9uKG9wZW5Hcm91cCkge1xuICAgIHZhciBjbG9zZU90aGVycyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5jbG9zZU90aGVycykgP1xuICAgICAgJHNjb3BlLiRldmFsKCRhdHRycy5jbG9zZU90aGVycykgOiBhY2NvcmRpb25Db25maWcuY2xvc2VPdGhlcnM7XG4gICAgaWYgKGNsb3NlT3RoZXJzKSB7XG4gICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5ncm91cHMsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChncm91cCAhPT0gb3Blbkdyb3VwKSB7XG4gICAgICAgICAgZ3JvdXAuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIHRvIGFkZCBpdHNlbGYgdG8gdGhlIGFjY29yZGlvblxuICB0aGlzLmFkZEdyb3VwID0gZnVuY3Rpb24oZ3JvdXBTY29wZSkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwU2NvcGUpO1xuXG4gICAgZ3JvdXBTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHRoYXQucmVtb3ZlR3JvdXAoZ3JvdXBTY29wZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgYWNjb3JkaW9uLWdyb3VwIGRpcmVjdGl2ZSB3aGVuIHRvIHJlbW92ZSBpdHNlbGZcbiAgdGhpcy5yZW1vdmVHcm91cCA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5ncm91cHMuaW5kZXhPZihncm91cCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5ncm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH07XG59XSlcblxuLy8gVGhlIGFjY29yZGlvbiBkaXJlY3RpdmUgc2ltcGx5IHNldHMgdXAgdGhlIGRpcmVjdGl2ZSBjb250cm9sbGVyXG4vLyBhbmQgYWRkcyBhbiBhY2NvcmRpb24gQ1NTIGNsYXNzIHRvIGl0c2VsZiBlbGVtZW50LlxuLmRpcmVjdGl2ZSgndWliQWNjb3JkaW9uJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogJ1VpYkFjY29yZGlvbkNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2FjY29yZGlvbicsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbCc7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgaW5kaWNhdGVzIGEgYmxvY2sgb2YgaHRtbCB0aGF0IHdpbGwgZXhwYW5kIGFuZCBjb2xsYXBzZSBpbiBhbiBhY2NvcmRpb25cbi5kaXJlY3RpdmUoJ3VpYkFjY29yZGlvbkdyb3VwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJBY2NvcmRpb24nLCAgICAgICAgIC8vIFdlIG5lZWQgdGhpcyBkaXJlY3RpdmUgdG8gYmUgaW5zaWRlIGFuIGFjY29yZGlvblxuICAgIHRyYW5zY2x1ZGU6IHRydWUsICAgICAgICAgICAgICAvLyBJdCB0cmFuc2NsdWRlcyB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSBpbnRvIHRoZSB0ZW1wbGF0ZVxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWwnO1xuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGhlYWRpbmc6ICdAJywgICAgICAgICAgICAgICAvLyBJbnRlcnBvbGF0ZSB0aGUgaGVhZGluZyBhdHRyaWJ1dGUgb250byB0aGlzIHNjb3BlXG4gICAgICBwYW5lbENsYXNzOiAnQD8nLCAgICAgICAgICAgLy8gRGl0dG8gd2l0aCBwYW5lbENsYXNzXG4gICAgICBpc09wZW46ICc9PycsXG4gICAgICBpc0Rpc2FibGVkOiAnPT8nXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0SGVhZGluZyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5oZWFkaW5nID0gZWxlbWVudDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGFjY29yZGlvbkN0cmwpIHtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ3BhbmVsJyk7XG4gICAgICBhY2NvcmRpb25DdHJsLmFkZEdyb3VwKHNjb3BlKTtcblxuICAgICAgc2NvcGUub3BlbkNsYXNzID0gYXR0cnMub3BlbkNsYXNzIHx8ICdwYW5lbC1vcGVuJztcbiAgICAgIHNjb3BlLnBhbmVsQ2xhc3MgPSBhdHRycy5wYW5lbENsYXNzIHx8ICdwYW5lbC1kZWZhdWx0JztcbiAgICAgIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhzY29wZS5vcGVuQ2xhc3MsICEhdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBhY2NvcmRpb25DdHJsLmNsb3NlT3RoZXJzKHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLnRvZ2dsZU9wZW4gPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgaWYgKCFzY29wZS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgaWYgKCEkZXZlbnQgfHwgJGV2ZW50LndoaWNoID09PSAzMikge1xuICAgICAgICAgICAgc2NvcGUuaXNPcGVuID0gIXNjb3BlLmlzT3BlbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBpZCA9ICdhY2NvcmRpb25ncm91cC0nICsgc2NvcGUuJGlkICsgJy0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgICAgc2NvcGUuaGVhZGluZ0lkID0gaWQgKyAnLXRhYic7XG4gICAgICBzY29wZS5wYW5lbElkID0gaWQgKyAnLXBhbmVsJztcbiAgICB9XG4gIH07XG59KVxuXG4vLyBVc2UgYWNjb3JkaW9uLWhlYWRpbmcgYmVsb3cgYW4gYWNjb3JkaW9uLWdyb3VwIHRvIHByb3ZpZGUgYSBoZWFkaW5nIGNvbnRhaW5pbmcgSFRNTFxuLmRpcmVjdGl2ZSgndWliQWNjb3JkaW9uSGVhZGluZycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zY2x1ZGU6IHRydWUsICAgLy8gR3JhYiB0aGUgY29udGVudHMgdG8gYmUgdXNlZCBhcyB0aGUgaGVhZGluZ1xuICAgIHRlbXBsYXRlOiAnJywgICAgICAgLy8gSW4gZWZmZWN0IHJlbW92ZSB0aGlzIGVsZW1lbnQhXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICByZXF1aXJlOiAnXnVpYkFjY29yZGlvbkdyb3VwJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGFjY29yZGlvbkdyb3VwQ3RybCwgdHJhbnNjbHVkZSkge1xuICAgICAgLy8gUGFzcyB0aGUgaGVhZGluZyB0byB0aGUgYWNjb3JkaW9uLWdyb3VwIGNvbnRyb2xsZXJcbiAgICAgIC8vIHNvIHRoYXQgaXQgY2FuIGJlIHRyYW5zY2x1ZGVkIGludG8gdGhlIHJpZ2h0IHBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICAgICAgLy8gW1RoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIHRyYW5zY2x1ZGUgY2F1c2VzIHRoZSBlbGVtZW50cyB0byBiZSBjbG9uZWQgc28gdGhhdCB0aGV5IHdvcmsgaW4gbmctcmVwZWF0XVxuICAgICAgYWNjb3JkaW9uR3JvdXBDdHJsLnNldEhlYWRpbmcodHJhbnNjbHVkZShzY29wZSwgYW5ndWxhci5ub29wKSk7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVXNlIGluIHRoZSBhY2NvcmRpb24tZ3JvdXAgdGVtcGxhdGUgdG8gaW5kaWNhdGUgd2hlcmUgeW91IHdhbnQgdGhlIGhlYWRpbmcgdG8gYmUgdHJhbnNjbHVkZWRcbi8vIFlvdSBtdXN0IHByb3ZpZGUgdGhlIHByb3BlcnR5IG9uIHRoZSBhY2NvcmRpb24tZ3JvdXAgY29udHJvbGxlciB0aGF0IHdpbGwgaG9sZCB0aGUgdHJhbnNjbHVkZWQgZWxlbWVudFxuLmRpcmVjdGl2ZSgndWliQWNjb3JkaW9uVHJhbnNjbHVkZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdedWliQWNjb3JkaW9uR3JvdXAnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcikge1xuICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gY29udHJvbGxlclthdHRycy51aWJBY2NvcmRpb25UcmFuc2NsdWRlXTsgfSwgZnVuY3Rpb24oaGVhZGluZykge1xuICAgICAgICBpZiAoaGVhZGluZykge1xuICAgICAgICAgIHZhciBlbGVtID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcihnZXRIZWFkZXJTZWxlY3RvcnMoKSkpO1xuICAgICAgICAgIGVsZW0uaHRtbCgnJyk7XG4gICAgICAgICAgZWxlbS5hcHBlbmQoaGVhZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXRIZWFkZXJTZWxlY3RvcnMoKSB7XG4gICAgICByZXR1cm4gJ3VpYi1hY2NvcmRpb24taGVhZGVyLCcgK1xuICAgICAgICAgICdkYXRhLXVpYi1hY2NvcmRpb24taGVhZGVyLCcgK1xuICAgICAgICAgICd4LXVpYi1hY2NvcmRpb24taGVhZGVyLCcgK1xuICAgICAgICAgICd1aWJcXFxcOmFjY29yZGlvbi1oZWFkZXIsJyArXG4gICAgICAgICAgJ1t1aWItYWNjb3JkaW9uLWhlYWRlcl0sJyArXG4gICAgICAgICAgJ1tkYXRhLXVpYi1hY2NvcmRpb24taGVhZGVyXSwnICtcbiAgICAgICAgICAnW3gtdWliLWFjY29yZGlvbi1oZWFkZXJdJztcbiAgfVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYWxlcnQnLCBbXSlcblxuLmNvbnRyb2xsZXIoJ1VpYkFsZXJ0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckaW50ZXJwb2xhdGUnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRpbnRlcnBvbGF0ZSwgJHRpbWVvdXQpIHtcbiAgJHNjb3BlLmNsb3NlYWJsZSA9ICEhJGF0dHJzLmNsb3NlO1xuICAkZWxlbWVudC5hZGRDbGFzcygnYWxlcnQnKTtcbiAgJGF0dHJzLiRzZXQoJ3JvbGUnLCAnYWxlcnQnKTtcbiAgaWYgKCRzY29wZS5jbG9zZWFibGUpIHtcbiAgICAkZWxlbWVudC5hZGRDbGFzcygnYWxlcnQtZGlzbWlzc2libGUnKTtcbiAgfVxuXG4gIHZhciBkaXNtaXNzT25UaW1lb3V0ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpc21pc3NPblRpbWVvdXQpID9cbiAgICAkaW50ZXJwb2xhdGUoJGF0dHJzLmRpc21pc3NPblRpbWVvdXQpKCRzY29wZS4kcGFyZW50KSA6IG51bGw7XG5cbiAgaWYgKGRpc21pc3NPblRpbWVvdXQpIHtcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5jbG9zZSgpO1xuICAgIH0sIHBhcnNlSW50KGRpc21pc3NPblRpbWVvdXQsIDEwKSk7XG4gIH1cbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJBbGVydCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRyb2xsZXI6ICdVaWJBbGVydENvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2FsZXJ0JyxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbCc7XG4gICAgfSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOiB7XG4gICAgICBjbG9zZTogJyYnXG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYnV0dG9ucycsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYkJ1dHRvbkNvbmZpZycsIHtcbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICB0b2dnbGVFdmVudDogJ2NsaWNrJ1xufSlcblxuLmNvbnRyb2xsZXIoJ1VpYkJ1dHRvbnNDb250cm9sbGVyJywgWyd1aWJCdXR0b25Db25maWcnLCBmdW5jdGlvbihidXR0b25Db25maWcpIHtcbiAgdGhpcy5hY3RpdmVDbGFzcyA9IGJ1dHRvbkNvbmZpZy5hY3RpdmVDbGFzcyB8fCAnYWN0aXZlJztcbiAgdGhpcy50b2dnbGVFdmVudCA9IGJ1dHRvbkNvbmZpZy50b2dnbGVFdmVudCB8fCAnY2xpY2snO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkJ0blJhZGlvJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYkJ0blJhZGlvJywgJ25nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiAnVWliQnV0dG9uc0NvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2J1dHRvbnMnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBidXR0b25zQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgdmFyIHVuY2hlY2thYmxlRXhwciA9ICRwYXJzZShhdHRycy51aWJVbmNoZWNrYWJsZSk7XG5cbiAgICAgIGVsZW1lbnQuZmluZCgnaW5wdXQnKS5jc3Moe2Rpc3BsYXk6ICdub25lJ30pO1xuXG4gICAgICAvL21vZGVsIC0+IFVJXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQudG9nZ2xlQ2xhc3MoYnV0dG9uc0N0cmwuYWN0aXZlQ2xhc3MsIGFuZ3VsYXIuZXF1YWxzKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlLCBzY29wZS4kZXZhbChhdHRycy51aWJCdG5SYWRpbykpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vdWktPm1vZGVsXG4gICAgICBlbGVtZW50Lm9uKGJ1dHRvbnNDdHJsLnRvZ2dsZUV2ZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlID0gZWxlbWVudC5oYXNDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy51bmNoZWNrYWJsZSkpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGlzQWN0aXZlID8gbnVsbCA6IHNjb3BlLiRldmFsKGF0dHJzLnVpYkJ0blJhZGlvKSk7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYXR0cnMudWliVW5jaGVja2FibGUpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKHVuY2hlY2thYmxlRXhwciwgZnVuY3Rpb24odW5jaGVja2FibGUpIHtcbiAgICAgICAgICBhdHRycy4kc2V0KCd1bmNoZWNrYWJsZScsIHVuY2hlY2thYmxlID8gJycgOiB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQnRuQ2hlY2tib3gnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ3VpYkJ0bkNoZWNrYm94JywgJ25nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiAnVWliQnV0dG9uc0NvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2J1dHRvbicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGJ1dHRvbnNDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGVsZW1lbnQuZmluZCgnaW5wdXQnKS5jc3Moe2Rpc3BsYXk6ICdub25lJ30pO1xuXG4gICAgICBmdW5jdGlvbiBnZXRUcnVlVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBnZXRDaGVja2JveFZhbHVlKGF0dHJzLmJ0bkNoZWNrYm94VHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEZhbHNlVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBnZXRDaGVja2JveFZhbHVlKGF0dHJzLmJ0bkNoZWNrYm94RmFsc2UsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShhdHRyaWJ1dGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoYXR0cmlidXRlKSA/IHNjb3BlLiRldmFsKGF0dHJpYnV0ZSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vbW9kZWwgLT4gVUlcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcywgYW5ndWxhci5lcXVhbHMobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUsIGdldFRydWVWYWx1ZSgpKSk7XG4gICAgICB9O1xuXG4gICAgICAvL3VpLT5tb2RlbFxuICAgICAgZWxlbWVudC5vbihidXR0b25zQ3RybC50b2dnbGVFdmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChhdHRycy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQuaGFzQ2xhc3MoYnV0dG9uc0N0cmwuYWN0aXZlQ2xhc3MpID8gZ2V0RmFsc2VWYWx1ZSgpIDogZ2V0VHJ1ZVZhbHVlKCkpO1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jYXJvdXNlbCcsIFtdKVxuXG4uY29udHJvbGxlcignVWliQ2Fyb3VzZWxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGludGVydmFsJywgJyR0aW1lb3V0JywgJyRhbmltYXRlJywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGludGVydmFsLCAkdGltZW91dCwgJGFuaW1hdGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgIHNsaWRlcyA9IHNlbGYuc2xpZGVzID0gJHNjb3BlLnNsaWRlcyA9IFtdLFxuICAgIFNMSURFX0RJUkVDVElPTiA9ICd1aWItc2xpZGVEaXJlY3Rpb24nLFxuICAgIGN1cnJlbnRJbmRleCA9ICRzY29wZS5hY3RpdmUsXG4gICAgY3VycmVudEludGVydmFsLCBpc1BsYXlpbmc7XG5cbiAgdmFyIGRlc3Ryb3llZCA9IGZhbHNlO1xuICAkZWxlbWVudC5hZGRDbGFzcygnY2Fyb3VzZWwnKTtcblxuICBzZWxmLmFkZFNsaWRlID0gZnVuY3Rpb24oc2xpZGUsIGVsZW1lbnQpIHtcbiAgICBzbGlkZXMucHVzaCh7XG4gICAgICBzbGlkZTogc2xpZGUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgfSk7XG4gICAgc2xpZGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuICthLnNsaWRlLmluZGV4IC0gK2Iuc2xpZGUuaW5kZXg7XG4gICAgfSk7XG4gICAgLy9pZiB0aGlzIGlzIHRoZSBmaXJzdCBzbGlkZSBvciB0aGUgc2xpZGUgaXMgc2V0IHRvIGFjdGl2ZSwgc2VsZWN0IGl0XG4gICAgaWYgKHNsaWRlLmluZGV4ID09PSAkc2NvcGUuYWN0aXZlIHx8IHNsaWRlcy5sZW5ndGggPT09IDEgJiYgIWFuZ3VsYXIuaXNOdW1iZXIoJHNjb3BlLmFjdGl2ZSkpIHtcbiAgICAgIGlmICgkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uKSB7XG4gICAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50SW5kZXggPSBzbGlkZS5pbmRleDtcbiAgICAgICRzY29wZS5hY3RpdmUgPSBzbGlkZS5pbmRleDtcbiAgICAgIHNldEFjdGl2ZShjdXJyZW50SW5kZXgpO1xuICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW2ZpbmRTbGlkZUluZGV4KHNsaWRlKV0pO1xuICAgICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJHNjb3BlLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2VsZi5nZXRDdXJyZW50SW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHNsaWRlc1tpXS5zbGlkZS5pbmRleCA9PT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBzZWxmLm5leHQgPSAkc2NvcGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdJbmRleCA9IChzZWxmLmdldEN1cnJlbnRJbmRleCgpICsgMSkgJSBzbGlkZXMubGVuZ3RoO1xuXG4gICAgaWYgKG5ld0luZGV4ID09PSAwICYmICRzY29wZS5ub1dyYXAoKSkge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc2VsZWN0KHNsaWRlc1tuZXdJbmRleF0sICduZXh0Jyk7XG4gIH07XG5cbiAgc2VsZi5wcmV2ID0gJHNjb3BlLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3SW5kZXggPSBzZWxmLmdldEN1cnJlbnRJbmRleCgpIC0gMSA8IDAgPyBzbGlkZXMubGVuZ3RoIC0gMSA6IHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgLSAxO1xuXG4gICAgaWYgKCRzY29wZS5ub1dyYXAoKSAmJiBuZXdJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICRzY29wZS5wYXVzZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnNlbGVjdChzbGlkZXNbbmV3SW5kZXhdLCAncHJldicpO1xuICB9O1xuXG4gIHNlbGYucmVtb3ZlU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRTbGlkZUluZGV4KHNsaWRlKTtcblxuICAgIC8vZ2V0IHRoZSBpbmRleCBvZiB0aGUgc2xpZGUgaW5zaWRlIHRoZSBjYXJvdXNlbFxuICAgIHNsaWRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGlmIChzbGlkZXMubGVuZ3RoID4gMCAmJiBjdXJyZW50SW5kZXggPT09IGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPj0gc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgc2V0QWN0aXZlKGN1cnJlbnRJbmRleCk7XG4gICAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICRzY29wZS5hY3RpdmUgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgIHNldEFjdGl2ZShjdXJyZW50SW5kZXgpO1xuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRJbmRleCA+IGluZGV4KSB7XG4gICAgICBjdXJyZW50SW5kZXgtLTtcbiAgICAgICRzY29wZS5hY3RpdmUgPSBjdXJyZW50SW5kZXg7XG4gICAgfVxuXG4gICAgLy9jbGVhbiB0aGUgYWN0aXZlIHZhbHVlIHdoZW4gbm8gbW9yZSBzbGlkZVxuICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjdXJyZW50SW5kZXggPSBudWxsO1xuICAgICAgJHNjb3BlLmFjdGl2ZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qIGRpcmVjdGlvbjogXCJwcmV2XCIgb3IgXCJuZXh0XCIgKi9cbiAgc2VsZi5zZWxlY3QgPSAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24obmV4dFNsaWRlLCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gZmluZFNsaWRlSW5kZXgobmV4dFNsaWRlLnNsaWRlKTtcbiAgICAvL0RlY2lkZSBkaXJlY3Rpb24gaWYgaXQncyBub3QgZ2l2ZW5cbiAgICBpZiAoZGlyZWN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpcmVjdGlvbiA9IG5leHRJbmRleCA+IHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgPyAnbmV4dCcgOiAncHJldic7XG4gICAgfVxuICAgIC8vUHJldmVudCB0aGlzIHVzZXItdHJpZ2dlcmVkIHRyYW5zaXRpb24gZnJvbSBvY2N1cnJpbmcgaWYgdGhlcmUgaXMgYWxyZWFkeSBvbmUgaW4gcHJvZ3Jlc3NcbiAgICBpZiAobmV4dFNsaWRlLnNsaWRlLmluZGV4ICE9PSBjdXJyZW50SW5kZXggJiZcbiAgICAgICEkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uKSB7XG4gICAgICBnb05leHQobmV4dFNsaWRlLnNsaWRlLCBuZXh0SW5kZXgsIGRpcmVjdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIC8qIEFsbG93IG91dHNpZGUgcGVvcGxlIHRvIGNhbGwgaW5kZXhPZiBvbiBzbGlkZXMgYXJyYXkgKi9cbiAgJHNjb3BlLmluZGV4T2ZTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgcmV0dXJuICtzbGlkZS5zbGlkZS5pbmRleDtcbiAgfTtcblxuICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgIHJldHVybiAkc2NvcGUuYWN0aXZlID09PSBzbGlkZS5zbGlkZS5pbmRleDtcbiAgfTtcblxuICAkc2NvcGUuaXNQcmV2RGlzYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJHNjb3BlLmFjdGl2ZSA9PT0gMCAmJiAkc2NvcGUubm9XcmFwKCk7XG4gIH07XG5cbiAgJHNjb3BlLmlzTmV4dERpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRzY29wZS5hY3RpdmUgPT09IHNsaWRlcy5sZW5ndGggLSAxICYmICRzY29wZS5ub1dyYXAoKTtcbiAgfTtcblxuICAkc2NvcGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub1BhdXNlKSB7XG4gICAgICBpc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgIHJlc2V0VGltZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWlzUGxheWluZykge1xuICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgIHJlc3RhcnRUaW1lcigpO1xuICAgIH1cbiAgfTtcblxuICAkZWxlbWVudC5vbignbW91c2VlbnRlcicsICRzY29wZS5wYXVzZSk7XG4gICRlbGVtZW50Lm9uKCdtb3VzZWxlYXZlJywgJHNjb3BlLnBsYXkpO1xuXG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXNldFRpbWVyKCk7XG4gIH0pO1xuXG4gICRzY29wZS4kd2F0Y2goJ25vVHJhbnNpdGlvbicsIGZ1bmN0aW9uKG5vVHJhbnNpdGlvbikge1xuICAgICRhbmltYXRlLmVuYWJsZWQoJGVsZW1lbnQsICFub1RyYW5zaXRpb24pO1xuICB9KTtcblxuICAkc2NvcGUuJHdhdGNoKCdpbnRlcnZhbCcsIHJlc3RhcnRUaW1lcik7XG5cbiAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3NsaWRlcycsIHJlc2V0VHJhbnNpdGlvbik7XG5cbiAgJHNjb3BlLiR3YXRjaCgnYWN0aXZlJywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAoYW5ndWxhci5pc051bWJlcihpbmRleCkgJiYgY3VycmVudEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXS5zbGlkZS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNsaWRlID0gc2xpZGVzW2luZGV4XTtcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzZXRBY3RpdmUoaW5kZXgpO1xuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbaW5kZXhdKTtcbiAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0uaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzbGlkZXNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWN0aXZlKGluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNsaWRlc1tpXS5zbGlkZS5hY3RpdmUgPSBpID09PSBpbmRleDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnb05leHQoc2xpZGUsIGluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYW5ndWxhci5leHRlbmQoc2xpZGUsIHtkaXJlY3Rpb246IGRpcmVjdGlvbn0pO1xuICAgIGFuZ3VsYXIuZXh0ZW5kKHNsaWRlc1tjdXJyZW50SW5kZXhdLnNsaWRlIHx8IHt9LCB7ZGlyZWN0aW9uOiBkaXJlY3Rpb259KTtcbiAgICBpZiAoJGFuaW1hdGUuZW5hYmxlZCgkZWxlbWVudCkgJiYgISRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gJiZcbiAgICAgIHNsaWRlc1tpbmRleF0uZWxlbWVudCAmJiBzZWxmLnNsaWRlcy5sZW5ndGggPiAxKSB7XG4gICAgICBzbGlkZXNbaW5kZXhdLmVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04sIHNsaWRlLmRpcmVjdGlvbik7XG4gICAgICB2YXIgY3VycmVudElkeCA9IHNlbGYuZ2V0Q3VycmVudEluZGV4KCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGN1cnJlbnRJZHgpICYmIHNsaWRlc1tjdXJyZW50SWR4XS5lbGVtZW50KSB7XG4gICAgICAgIHNsaWRlc1tjdXJyZW50SWR4XS5lbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OLCBzbGlkZS5kaXJlY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgICRhbmltYXRlLm9uKCdhZGRDbGFzcycsIHNsaWRlc1tpbmRleF0uZWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCwgcGhhc2UpIHtcbiAgICAgICAgaWYgKHBoYXNlID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgICAgJGFuaW1hdGUub2ZmKCdhZGRDbGFzcycsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuYWN0aXZlID0gc2xpZGUuaW5kZXg7XG4gICAgY3VycmVudEluZGV4ID0gc2xpZGUuaW5kZXg7XG4gICAgc2V0QWN0aXZlKGluZGV4KTtcblxuICAgIC8vZXZlcnkgdGltZSB5b3UgY2hhbmdlIHNsaWRlcywgcmVzZXQgdGhlIHRpbWVyXG4gICAgcmVzdGFydFRpbWVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kU2xpZGVJbmRleChzbGlkZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldLnNsaWRlID09PSBzbGlkZSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRpbWVyKCkge1xuICAgIGlmIChjdXJyZW50SW50ZXJ2YWwpIHtcbiAgICAgICRpbnRlcnZhbC5jYW5jZWwoY3VycmVudEludGVydmFsKTtcbiAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcmFuc2l0aW9uKHNsaWRlcykge1xuICAgIGlmICghc2xpZGVzLmxlbmd0aCkge1xuICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzdGFydFRpbWVyKCkge1xuICAgIHJlc2V0VGltZXIoKTtcbiAgICB2YXIgaW50ZXJ2YWwgPSArJHNjb3BlLmludGVydmFsO1xuICAgIGlmICghaXNOYU4oaW50ZXJ2YWwpICYmIGludGVydmFsID4gMCkge1xuICAgICAgY3VycmVudEludGVydmFsID0gJGludGVydmFsKHRpbWVyRm4sIGludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckZuKCkge1xuICAgIHZhciBpbnRlcnZhbCA9ICskc2NvcGUuaW50ZXJ2YWw7XG4gICAgaWYgKGlzUGxheWluZyAmJiAhaXNOYU4oaW50ZXJ2YWwpICYmIGludGVydmFsID4gMCAmJiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAkc2NvcGUubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2NvcGUucGF1c2UoKTtcbiAgICB9XG4gIH1cbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJDYXJvdXNlbCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1VpYkNhcm91c2VsQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnY2Fyb3VzZWwnLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sJztcbiAgICB9LFxuICAgIHNjb3BlOiB7XG4gICAgICBhY3RpdmU6ICc9JyxcbiAgICAgIGludGVydmFsOiAnPScsXG4gICAgICBub1RyYW5zaXRpb246ICc9JyxcbiAgICAgIG5vUGF1c2U6ICc9JyxcbiAgICAgIG5vV3JhcDogJyYnXG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliU2xpZGUnLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXnVpYkNhcm91c2VsJyxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sJztcbiAgICB9LFxuICAgIHNjb3BlOiB7XG4gICAgICBhY3R1YWw6ICc9PycsXG4gICAgICBpbmRleDogJz0/J1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY2Fyb3VzZWxDdHJsKSB7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdpdGVtJyk7XG4gICAgICBjYXJvdXNlbEN0cmwuYWRkU2xpZGUoc2NvcGUsIGVsZW1lbnQpO1xuICAgICAgLy93aGVuIHRoZSBzY29wZSBpcyBkZXN0cm95ZWQgdGhlbiByZW1vdmUgdGhlIHNsaWRlIGZyb20gdGhlIGN1cnJlbnQgc2xpZGVzIGFycmF5XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNhcm91c2VsQ3RybC5yZW1vdmVTbGlkZShzY29wZSk7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbihhY3RpdmUpIHtcbiAgICAgICAgJGFuaW1hdGVbYWN0aXZlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsICdhY3RpdmUnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uYW5pbWF0aW9uKCcuaXRlbScsIFsnJGFuaW1hdGVDc3MnLFxuZnVuY3Rpb24oJGFuaW1hdGVDc3MpIHtcbiAgdmFyIFNMSURFX0RJUkVDVElPTiA9ICd1aWItc2xpZGVEaXJlY3Rpb24nO1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgY2FsbGJhY2spIHtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmVmb3JlQWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04pO1xuICAgICAgICB2YXIgZGlyZWN0aW9uQ2xhc3MgPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIHZhciByZW1vdmVDbGFzc0ZuID0gcmVtb3ZlQ2xhc3MuYmluZCh0aGlzLCBlbGVtZW50LFxuICAgICAgICAgIGRpcmVjdGlvbkNsYXNzICsgJyAnICsgZGlyZWN0aW9uLCBkb25lKTtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhkaXJlY3Rpb24pO1xuXG4gICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHthZGRDbGFzczogZGlyZWN0aW9uQ2xhc3N9KVxuICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgLmRvbmUocmVtb3ZlQ2xhc3NGbik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZG9uZSgpO1xuICAgIH0sXG4gICAgYmVmb3JlUmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgIGlmIChjbGFzc05hbWUgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbkNsYXNzID0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB2YXIgcmVtb3ZlQ2xhc3NGbiA9IHJlbW92ZUNsYXNzLmJpbmQodGhpcywgZWxlbWVudCwgZGlyZWN0aW9uQ2xhc3MsIGRvbmUpO1xuXG4gICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHthZGRDbGFzczogZGlyZWN0aW9uQ2xhc3N9KVxuICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgLmRvbmUocmVtb3ZlQ2xhc3NGbik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGFyc2VyJywgW10pXG5cbi5zZXJ2aWNlKCd1aWJEYXRlUGFyc2VyJywgWyckbG9nJywgJyRsb2NhbGUnLCAnZGF0ZUZpbHRlcicsICdvcmRlckJ5RmlsdGVyJywgJ2ZpbHRlckZpbHRlcicsIGZ1bmN0aW9uKCRsb2csICRsb2NhbGUsIGRhdGVGaWx0ZXIsIG9yZGVyQnlGaWx0ZXIsIGZpbHRlckZpbHRlcikge1xuICAvLyBQdWxsZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWJvc3RvY2svZDMvYmxvYi9tYXN0ZXIvc3JjL2Zvcm1hdC9yZXF1b3RlLmpzXG4gIHZhciBTUEVDSUFMX0NIQVJBQ1RFUlNfUkVHRVhQID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuXG4gIHZhciBsb2NhbGVJZDtcbiAgdmFyIGZvcm1hdENvZGVUb1JlZ2V4O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIGxvY2FsZUlkID0gJGxvY2FsZS5pZDtcblxuICAgIHRoaXMucGFyc2VycyA9IHt9O1xuICAgIHRoaXMuZm9ybWF0dGVycyA9IHt9O1xuXG4gICAgZm9ybWF0Q29kZVRvUmVnZXggPSBbXG4gICAgICB7XG4gICAgICAgIGtleTogJ3l5eXknLFxuICAgICAgICByZWdleDogJ1xcXFxkezR9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMueWVhciA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIF9kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICBfZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmFicyhkYXRlLmdldEZ1bGxZZWFyKCkpKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihfZGF0ZSwgJ3l5eXknKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAneXknLFxuICAgICAgICByZWdleDogJ1xcXFxkezJ9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHZhbHVlID0gK3ZhbHVlOyB0aGlzLnllYXIgPSB2YWx1ZSA8IDY5ID8gdmFsdWUgKyAyMDAwIDogdmFsdWUgKyAxOTAwOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgX2RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIF9kYXRlLnNldEZ1bGxZZWFyKE1hdGguYWJzKGRhdGUuZ2V0RnVsbFllYXIoKSkpO1xuICAgICAgICAgIHJldHVybiBkYXRlRmlsdGVyKF9kYXRlLCAneXknKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAneScsXG4gICAgICAgIHJlZ2V4OiAnXFxcXGR7MSw0fScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnllYXIgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgIHZhciBfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgX2RhdGUuc2V0RnVsbFllYXIoTWF0aC5hYnMoZGF0ZS5nZXRGdWxsWWVhcigpKSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoX2RhdGUsICd5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ00hJyxcbiAgICAgICAgcmVnZXg6ICcwP1sxLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgaWYgKC9eWzAtOV0kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ01NJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ00nKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnTU1NTScsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuTU9OVEguam9pbignfCcpLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5tb250aCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5NT05USC5pbmRleE9mKHZhbHVlKTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdNTU1NJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ01NTScsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USC5qb2luKCd8JyksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUTU9OVEguaW5kZXhPZih2YWx1ZSk7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTU1NJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ01NJyxcbiAgICAgICAgcmVnZXg6ICcwWzEtOV18MVswLTJdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSB2YWx1ZSAtIDE7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTU0nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnTScsXG4gICAgICAgIHJlZ2V4OiAnWzEtOV18MVswLTJdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSB2YWx1ZSAtIDE7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnTScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdkIScsXG4gICAgICAgIHJlZ2V4OiAnWzAtMl0/WzAtOV17MX18M1swLTFdezF9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF0ZSA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgICAgICAgaWYgKC9eWzEtOV0kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2RkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2QnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnZGQnLFxuICAgICAgICByZWdleDogJ1swLTJdWzAtOV17MX18M1swLTFdezF9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF0ZSA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdkZCcpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdkJyxcbiAgICAgICAgcmVnZXg6ICdbMS0yXT9bMC05XXsxfXwzWzAtMV17MX0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5kYXRlID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2QnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnRUVFRScsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuREFZLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdFRUVFJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0VFRScsXG4gICAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlREQVkuam9pbignfCcpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0VFRScpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdISCcsXG4gICAgICAgIHJlZ2V4OiAnKD86MHwxKVswLTldfDJbMC0zXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0hIJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2hoJyxcbiAgICAgICAgcmVnZXg6ICcwWzAtOV18MVswLTJdJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnaGgnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnSCcsXG4gICAgICAgIHJlZ2V4OiAnMT9bMC05XXwyWzAtM10nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdIJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2gnLFxuICAgICAgICByZWdleDogJ1swLTldfDFbMC0yXScsXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2gnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbW0nLFxuICAgICAgICByZWdleDogJ1swLTVdWzAtOV0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5taW51dGVzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ21tJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ20nLFxuICAgICAgICByZWdleDogJ1swLTldfFsxLTVdWzAtOV0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5taW51dGVzID0gK3ZhbHVlOyB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ20nKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnc3NzJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XVswLTldWzAtOV0nLFxuICAgICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5taWxsaXNlY29uZHMgPSArdmFsdWU7IH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAnc3NzJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3NzJyxcbiAgICAgICAgcmVnZXg6ICdbMC01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuc2Vjb25kcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdzcycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdzJyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXxbMS01XVswLTldJyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuc2Vjb25kcyA9ICt2YWx1ZTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdzJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ2EnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkFNUE1TLmpvaW4oJ3wnKSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaG91cnMgPT09IDEyKSB7XG4gICAgICAgICAgICB0aGlzLmhvdXJzID0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09ICdQTScpIHtcbiAgICAgICAgICAgIHRoaXMuaG91cnMgKz0gMTI7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ2EnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnWicsXG4gICAgICAgIHJlZ2V4OiAnWystXVxcXFxkezR9JyxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIG1hdGNoZXMgPSB2YWx1ZS5tYXRjaCgvKFsrLV0pKFxcZHsyfSkoXFxkezJ9KS8pLFxuICAgICAgICAgICAgc2lnbiA9IG1hdGNoZXNbMV0sXG4gICAgICAgICAgICBob3VycyA9IG1hdGNoZXNbMl0sXG4gICAgICAgICAgICBtaW51dGVzID0gbWF0Y2hlc1szXTtcbiAgICAgICAgICB0aGlzLmhvdXJzICs9IHRvSW50KHNpZ24gKyBob3Vycyk7XG4gICAgICAgICAgdGhpcy5taW51dGVzICs9IHRvSW50KHNpZ24gKyBtaW51dGVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ1onKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnd3cnLFxuICAgICAgICByZWdleDogJ1swLTRdWzAtOV18NVswLTNdJyxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICd3dycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICd3JyxcbiAgICAgICAgcmVnZXg6ICdbMC05XXxbMS00XVswLTldfDVbMC0zXScsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oZGF0ZSkgeyByZXR1cm4gZGF0ZUZpbHRlcihkYXRlLCAndycpOyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6ICdHR0dHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFOQU1FUy5qb2luKCd8JykucmVwbGFjZSgvXFxzL2csICdcXFxccycpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0dHR0cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnR0dHJyxcbiAgICAgICAgcmVnZXg6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5FUkFTLmpvaW4oJ3wnKSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdHR0cnKTsgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnR0cnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkVSQVMuam9pbignfCcpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0dHJyk7IH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ0cnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkVSQVMuam9pbignfCcpLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKGRhdGUpIHsgcmV0dXJuIGRhdGVGaWx0ZXIoZGF0ZSwgJ0cnKTsgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICBpZiAoYW5ndWxhci52ZXJzaW9uLm1ham9yID49IDEgJiYgYW5ndWxhci52ZXJzaW9uLm1pbm9yID4gNCkge1xuICAgICAgZm9ybWF0Q29kZVRvUmVnZXgucHVzaCh7XG4gICAgICAgIGtleTogJ0xMTEwnLFxuICAgICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNUQU5EQUxPTkVNT05USC5qb2luKCd8JyksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNUQU5EQUxPTkVNT05USC5pbmRleE9mKHZhbHVlKTsgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihkYXRlKSB7IHJldHVybiBkYXRlRmlsdGVyKGRhdGUsICdMTExMJyk7IH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmluaXQoKTtcblxuICBmdW5jdGlvbiBnZXRGb3JtYXRDb2RlVG9SZWdleChrZXkpIHtcbiAgICByZXR1cm4gZmlsdGVyRmlsdGVyKGZvcm1hdENvZGVUb1JlZ2V4LCB7a2V5OiBrZXl9LCB0cnVlKVswXTtcbiAgfVxuXG4gIHRoaXMuZ2V0UGFyc2VyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBmID0gZ2V0Rm9ybWF0Q29kZVRvUmVnZXgoa2V5KTtcbiAgICByZXR1cm4gZiAmJiBmLmFwcGx5IHx8IG51bGw7XG4gIH07XG5cbiAgdGhpcy5vdmVycmlkZVBhcnNlciA9IGZ1bmN0aW9uIChrZXksIHBhcnNlcikge1xuICAgIHZhciBmID0gZ2V0Rm9ybWF0Q29kZVRvUmVnZXgoa2V5KTtcbiAgICBpZiAoZiAmJiBhbmd1bGFyLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgdGhpcy5wYXJzZXJzID0ge307XG4gICAgICBmLmFwcGx5ID0gcGFyc2VyO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhcnNlcihmb3JtYXQpIHtcbiAgICB2YXIgbWFwID0gW10sIHJlZ2V4ID0gZm9ybWF0LnNwbGl0KCcnKTtcblxuICAgIC8vIGNoZWNrIGZvciBsaXRlcmFsIHZhbHVlc1xuICAgIHZhciBxdW90ZUluZGV4ID0gZm9ybWF0LmluZGV4T2YoJ1xcJycpO1xuICAgIGlmIChxdW90ZUluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBpbkxpdGVyYWwgPSBmYWxzZTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5zcGxpdCgnJyk7XG4gICAgICBmb3IgKHZhciBpID0gcXVvdGVJbmRleDsgaSA8IGZvcm1hdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5MaXRlcmFsKSB7XG4gICAgICAgICAgaWYgKGZvcm1hdFtpXSA9PT0gJ1xcJycpIHtcbiAgICAgICAgICAgIGlmIChpICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0W2krMV0gPT09ICdcXCcnKSB7IC8vIGVzY2FwZWQgc2luZ2xlIHF1b3RlXG4gICAgICAgICAgICAgIGZvcm1hdFtpKzFdID0gJyQnO1xuICAgICAgICAgICAgICByZWdleFtpKzFdID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBlbmQgb2YgbGl0ZXJhbFxuICAgICAgICAgICAgICByZWdleFtpXSA9ICcnO1xuICAgICAgICAgICAgICBpbkxpdGVyYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9ybWF0W2ldID0gJyQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmb3JtYXRbaV0gPT09ICdcXCcnKSB7IC8vIHN0YXJ0IG9mIGxpdGVyYWxcbiAgICAgICAgICAgIGZvcm1hdFtpXSA9ICckJztcbiAgICAgICAgICAgIHJlZ2V4W2ldID0gJyc7XG4gICAgICAgICAgICBpbkxpdGVyYWwgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3JtYXQgPSBmb3JtYXQuam9pbignJyk7XG4gICAgfVxuXG4gICAgYW5ndWxhci5mb3JFYWNoKGZvcm1hdENvZGVUb1JlZ2V4LCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgaW5kZXggPSBmb3JtYXQuaW5kZXhPZihkYXRhLmtleSk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5zcGxpdCgnJyk7XG5cbiAgICAgICAgcmVnZXhbaW5kZXhdID0gJygnICsgZGF0YS5yZWdleCArICcpJztcbiAgICAgICAgZm9ybWF0W2luZGV4XSA9ICckJzsgLy8gQ3VzdG9tIHN5bWJvbCB0byBkZWZpbmUgY29uc3VtZWQgcGFydCBvZiBmb3JtYXRcbiAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMSwgbiA9IGluZGV4ICsgZGF0YS5rZXkubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcmVnZXhbaV0gPSAnJztcbiAgICAgICAgICBmb3JtYXRbaV0gPSAnJCc7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LmpvaW4oJycpO1xuXG4gICAgICAgIG1hcC5wdXNoKHtcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAga2V5OiBkYXRhLmtleSxcbiAgICAgICAgICBhcHBseTogZGF0YS5hcHBseSxcbiAgICAgICAgICBtYXRjaGVyOiBkYXRhLnJlZ2V4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZ2V4OiBuZXcgUmVnRXhwKCdeJyArIHJlZ2V4LmpvaW4oJycpICsgJyQnKSxcbiAgICAgIG1hcDogb3JkZXJCeUZpbHRlcihtYXAsICdpbmRleCcpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1hdHRlcihmb3JtYXQpIHtcbiAgICB2YXIgZm9ybWF0dGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgZm9ybWF0dGVyLCBsaXRlcmFsSWR4O1xuICAgIHdoaWxlIChpIDwgZm9ybWF0Lmxlbmd0aCkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIobGl0ZXJhbElkeCkpIHtcbiAgICAgICAgaWYgKGZvcm1hdC5jaGFyQXQoaSkgPT09ICdcXCcnKSB7XG4gICAgICAgICAgaWYgKGkgKyAxID49IGZvcm1hdC5sZW5ndGggfHwgZm9ybWF0LmNoYXJBdChpICsgMSkgIT09ICdcXCcnKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXJzLnB1c2goY29uc3RydWN0TGl0ZXJhbEZvcm1hdHRlcihmb3JtYXQsIGxpdGVyYWxJZHgsIGkpKTtcbiAgICAgICAgICAgIGxpdGVyYWxJZHggPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBmb3JtYXQubGVuZ3RoKSB7XG4gICAgICAgICAgd2hpbGUgKGxpdGVyYWxJZHggPCBmb3JtYXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXIgPSBjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4KGZvcm1hdCwgbGl0ZXJhbElkeCk7XG4gICAgICAgICAgICBmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgICAgICAgICAgIGxpdGVyYWxJZHggPSBmb3JtYXR0ZXIuZW5kSWR4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JtYXQuY2hhckF0KGkpID09PSAnXFwnJykge1xuICAgICAgICBsaXRlcmFsSWR4ID0gaTtcbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9ybWF0dGVyID0gY29uc3RydWN0Rm9ybWF0dGVyRnJvbUlkeChmb3JtYXQsIGkpO1xuXG4gICAgICBmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyLnBhcnNlcik7XG4gICAgICBpID0gZm9ybWF0dGVyLmVuZElkeDtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0dGVycztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdExpdGVyYWxGb3JtYXR0ZXIoZm9ybWF0LCBsaXRlcmFsSWR4LCBlbmRJZHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9ybWF0LnN1YnN0cihsaXRlcmFsSWR4ICsgMSwgZW5kSWR4IC0gbGl0ZXJhbElkeCAtIDEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdHJ1Y3RGb3JtYXR0ZXJGcm9tSWR4KGZvcm1hdCwgaSkge1xuICAgIHZhciBjdXJyZW50UG9zU3RyID0gZm9ybWF0LnN1YnN0cihpKTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvcm1hdENvZGVUb1JlZ2V4Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAobmV3IFJlZ0V4cCgnXicgKyBmb3JtYXRDb2RlVG9SZWdleFtqXS5rZXkpLnRlc3QoY3VycmVudFBvc1N0cikpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBmb3JtYXRDb2RlVG9SZWdleFtqXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbmRJZHg6IGkgKyBkYXRhLmtleS5sZW5ndGgsXG4gICAgICAgICAgcGFyc2VyOiBkYXRhLmZvcm1hdHRlclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBlbmRJZHg6IGkgKyAxLFxuICAgICAgcGFyc2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQb3NTdHIuY2hhckF0KDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB0aGlzLmZpbHRlciA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkge1xuICAgIGlmICghYW5ndWxhci5pc0RhdGUoZGF0ZSkgfHwgaXNOYU4oZGF0ZSkgfHwgIWZvcm1hdCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcblxuICAgIGlmICgkbG9jYWxlLmlkICE9PSBsb2NhbGVJZCkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZvcm1hdHRlcnNbZm9ybWF0XSkge1xuICAgICAgdGhpcy5mb3JtYXR0ZXJzW2Zvcm1hdF0gPSBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0KTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVycyA9IHRoaXMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgcmV0dXJuIGZvcm1hdHRlcnMucmVkdWNlKGZ1bmN0aW9uKHN0ciwgZm9ybWF0dGVyKSB7XG4gICAgICByZXR1cm4gc3RyICsgZm9ybWF0dGVyKGRhdGUpO1xuICAgIH0sICcnKTtcbiAgfTtcblxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGZvcm1hdCwgYmFzZURhdGUpIHtcbiAgICBpZiAoIWFuZ3VsYXIuaXNTdHJpbmcoaW5wdXQpIHx8ICFmb3JtYXQpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCwgJ1xcXFwkJicpO1xuXG4gICAgaWYgKCRsb2NhbGUuaWQgIT09IGxvY2FsZUlkKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucGFyc2Vyc1tmb3JtYXRdKSB7XG4gICAgICB0aGlzLnBhcnNlcnNbZm9ybWF0XSA9IGNyZWF0ZVBhcnNlcihmb3JtYXQsICdhcHBseScpO1xuICAgIH1cblxuICAgIHZhciBwYXJzZXIgPSB0aGlzLnBhcnNlcnNbZm9ybWF0XSxcbiAgICAgICAgcmVnZXggPSBwYXJzZXIucmVnZXgsXG4gICAgICAgIG1hcCA9IHBhcnNlci5tYXAsXG4gICAgICAgIHJlc3VsdHMgPSBpbnB1dC5tYXRjaChyZWdleCksXG4gICAgICAgIHR6T2Zmc2V0ID0gZmFsc2U7XG4gICAgaWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgIHZhciBmaWVsZHMsIGR0O1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKGJhc2VEYXRlKSAmJiAhaXNOYU4oYmFzZURhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICBmaWVsZHMgPSB7XG4gICAgICAgICAgeWVhcjogYmFzZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICBtb250aDogYmFzZURhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICBkYXRlOiBiYXNlRGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgaG91cnM6IGJhc2VEYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgbWludXRlczogYmFzZURhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgIHNlY29uZHM6IGJhc2VEYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICBtaWxsaXNlY29uZHM6IGJhc2VEYXRlLmdldE1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYmFzZURhdGUpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ2RhdGVwYXJzZXI6JywgJ2Jhc2VEYXRlIGlzIG5vdCBhIHZhbGlkIGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZHMgPSB7IHllYXI6IDE5MDAsIG1vbnRoOiAwLCBkYXRlOiAxLCBob3VyczogMCwgbWludXRlczogMCwgc2Vjb25kczogMCwgbWlsbGlzZWNvbmRzOiAwIH07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBuID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIG1hcHBlciA9IG1hcFtpIC0gMV07XG4gICAgICAgIGlmIChtYXBwZXIubWF0Y2hlciA9PT0gJ1onKSB7XG4gICAgICAgICAgdHpPZmZzZXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcHBlci5hcHBseSkge1xuICAgICAgICAgIG1hcHBlci5hcHBseS5jYWxsKGZpZWxkcywgcmVzdWx0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGVzZXR0ZXIgPSB0ek9mZnNldCA/IERhdGUucHJvdG90eXBlLnNldFVUQ0Z1bGxZZWFyIDpcbiAgICAgICAgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXI7XG4gICAgICB2YXIgdGltZXNldHRlciA9IHR6T2Zmc2V0ID8gRGF0ZS5wcm90b3R5cGUuc2V0VVRDSG91cnMgOlxuICAgICAgICBEYXRlLnByb3RvdHlwZS5zZXRIb3VycztcblxuICAgICAgaWYgKGlzVmFsaWQoZmllbGRzLnllYXIsIGZpZWxkcy5tb250aCwgZmllbGRzLmRhdGUpKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZShiYXNlRGF0ZSkgJiYgIWlzTmFOKGJhc2VEYXRlLmdldFRpbWUoKSkgJiYgIXR6T2Zmc2V0KSB7XG4gICAgICAgICAgZHQgPSBuZXcgRGF0ZShiYXNlRGF0ZSk7XG4gICAgICAgICAgZGF0ZXNldHRlci5jYWxsKGR0LCBmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSk7XG4gICAgICAgICAgdGltZXNldHRlci5jYWxsKGR0LCBmaWVsZHMuaG91cnMsIGZpZWxkcy5taW51dGVzLFxuICAgICAgICAgICAgZmllbGRzLnNlY29uZHMsIGZpZWxkcy5taWxsaXNlY29uZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGR0ID0gbmV3IERhdGUoMCk7XG4gICAgICAgICAgZGF0ZXNldHRlci5jYWxsKGR0LCBmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSk7XG4gICAgICAgICAgdGltZXNldHRlci5jYWxsKGR0LCBmaWVsZHMuaG91cnMgfHwgMCwgZmllbGRzLm1pbnV0ZXMgfHwgMCxcbiAgICAgICAgICAgIGZpZWxkcy5zZWNvbmRzIHx8IDAsIGZpZWxkcy5taWxsaXNlY29uZHMgfHwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR0O1xuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayBpZiBkYXRlIGlzIHZhbGlkIGZvciBzcGVjaWZpYyBtb250aCAoYW5kIHllYXIgZm9yIEZlYnJ1YXJ5KS5cbiAgLy8gTW9udGg6IDAgPSBKYW4sIDEgPSBGZWIsIGV0Y1xuICBmdW5jdGlvbiBpc1ZhbGlkKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gICAgaWYgKGRhdGUgPCAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG1vbnRoID09PSAxICYmIGRhdGUgPiAyOCkge1xuICAgICAgcmV0dXJuIGRhdGUgPT09IDI5ICYmICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xuICAgIH1cblxuICAgIGlmIChtb250aCA9PT0gMyB8fCBtb250aCA9PT0gNSB8fCBtb250aCA9PT0gOCB8fCBtb250aCA9PT0gMTApIHtcbiAgICAgIHJldHVybiBkYXRlIDwgMzE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIH1cblxuICB0aGlzLnRvVGltZXpvbmUgPSB0b1RpbWV6b25lO1xuICB0aGlzLmZyb21UaW1lem9uZSA9IGZyb21UaW1lem9uZTtcbiAgdGhpcy50aW1lem9uZVRvT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldDtcbiAgdGhpcy5hZGREYXRlTWludXRlcyA9IGFkZERhdGVNaW51dGVzO1xuICB0aGlzLmNvbnZlcnRUaW1lem9uZVRvTG9jYWwgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsO1xuXG4gIGZ1bmN0aW9uIHRvVGltZXpvbmUoZGF0ZSwgdGltZXpvbmUpIHtcbiAgICByZXR1cm4gZGF0ZSAmJiB0aW1lem9uZSA/IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUpIDogZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyb21UaW1lem9uZShkYXRlLCB0aW1lem9uZSkge1xuICAgIHJldHVybiBkYXRlICYmIHRpbWV6b25lID8gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgdHJ1ZSkgOiBkYXRlO1xuICB9XG5cbiAgLy9odHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvNjIyYzQyMTY5Njk5ZWMwN2ZjNmRhYWExOWZlNmQyMjRlNWQyZjcwZS9zcmMvQW5ndWxhci5qcyNMMTIwN1xuICBmdW5jdGlvbiB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBmYWxsYmFjaykge1xuICAgIHRpbWV6b25lID0gdGltZXpvbmUucmVwbGFjZSgvOi9nLCAnJyk7XG4gICAgdmFyIHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0ID0gRGF0ZS5wYXJzZSgnSmFuIDAxLCAxOTcwIDAwOjAwOjAwICcgKyB0aW1lem9uZSkgLyA2MDAwMDtcbiAgICByZXR1cm4gaXNOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERhdGVNaW51dGVzKGRhdGUsIG1pbnV0ZXMpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgcmV2ZXJzZSkge1xuICAgIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICAgIHZhciBkYXRlVGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGVUaW1lem9uZU9mZnNldCkpO1xuICB9XG59XSk7XG5cbi8vIEF2b2lkaW5nIHVzZSBvZiBuZy1jbGFzcyBhcyBpdCBjcmVhdGVzIGEgbG90IG9mIHdhdGNoZXJzIHdoZW4gYSBjbGFzcyBpcyB0byBiZSBhcHBsaWVkIHRvXG4vLyBhdCBtb3N0IG9uZSBlbGVtZW50LlxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5pc0NsYXNzJywgW10pXG4uZGlyZWN0aXZlKCd1aWJJc0NsYXNzJywgW1xuICAgICAgICAgJyRhbmltYXRlJyxcbmZ1bmN0aW9uICgkYW5pbWF0ZSkge1xuICAvLyAgICAgICAgICAgICAgICAgICAgMTExMTExMTEgICAgICAgICAgMjIyMjIyMjJcbiAgdmFyIE9OX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KVxccytvblxccysoW1xcc1xcU10rPylcXHMqJC87XG4gIC8vICAgICAgICAgICAgICAgICAgICAxMTExMTExMSAgICAgICAgICAgMjIyMjIyMjJcbiAgdmFyIElTX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KVxccytmb3JcXHMrKFtcXHNcXFNdKz8pXFxzKiQvO1xuXG4gIHZhciBkYXRhUGVyVHJhY2tlZCA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICB2YXIgbGlua2VkU2NvcGVzID0gW107XG4gICAgICB2YXIgaW5zdGFuY2VzID0gW107XG4gICAgICB2YXIgZXhwVG9EYXRhID0ge307XG4gICAgICB2YXIgbGFzdEFjdGl2YXRlZCA9IG51bGw7XG4gICAgICB2YXIgb25FeHBNYXRjaGVzID0gdEF0dHJzLnVpYklzQ2xhc3MubWF0Y2goT05fUkVHRVhQKTtcbiAgICAgIHZhciBvbkV4cCA9IG9uRXhwTWF0Y2hlc1syXTtcbiAgICAgIHZhciBleHBzU3RyID0gb25FeHBNYXRjaGVzWzFdO1xuICAgICAgdmFyIGV4cHMgPSBleHBzU3RyLnNwbGl0KCcsJyk7XG5cbiAgICAgIHJldHVybiBsaW5rRm47XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgbGlua2VkU2NvcGVzLnB1c2goc2NvcGUpO1xuICAgICAgICBpbnN0YW5jZXMucHVzaCh7XG4gICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwcy5mb3JFYWNoKGZ1bmN0aW9uKGV4cCwgaykge1xuICAgICAgICAgIGFkZEZvckV4cChleHAsIHNjb3BlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHJlbW92ZVNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkRm9yRXhwKGV4cCwgc2NvcGUpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBleHAubWF0Y2goSVNfUkVHRVhQKTtcbiAgICAgICAgdmFyIGNsYXp6ID0gc2NvcGUuJGV2YWwobWF0Y2hlc1sxXSk7XG4gICAgICAgIHZhciBjb21wYXJlV2l0aEV4cCA9IG1hdGNoZXNbMl07XG4gICAgICAgIHZhciBkYXRhID0gZXhwVG9EYXRhW2V4cF07XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIHZhciB3YXRjaEZuID0gZnVuY3Rpb24oY29tcGFyZVdpdGhWYWwpIHtcbiAgICAgICAgICAgIHZhciBuZXdBY3RpdmF0ZWQgPSBudWxsO1xuICAgICAgICAgICAgaW5zdGFuY2VzLnNvbWUoZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgdmFyIHRoaXNWYWwgPSBpbnN0YW5jZS5zY29wZS4kZXZhbChvbkV4cCk7XG4gICAgICAgICAgICAgIGlmICh0aGlzVmFsID09PSBjb21wYXJlV2l0aFZhbCkge1xuICAgICAgICAgICAgICAgIG5ld0FjdGl2YXRlZCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxhc3RBY3RpdmF0ZWQgIT09IG5ld0FjdGl2YXRlZCkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS5sYXN0QWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZGF0YS5sYXN0QWN0aXZhdGVkLmVsZW1lbnQsIGNsYXp6KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobmV3QWN0aXZhdGVkKSB7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MobmV3QWN0aXZhdGVkLmVsZW1lbnQsIGNsYXp6KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkYXRhLmxhc3RBY3RpdmF0ZWQgPSBuZXdBY3RpdmF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBleHBUb0RhdGFbZXhwXSA9IGRhdGEgPSB7XG4gICAgICAgICAgICBsYXN0QWN0aXZhdGVkOiBudWxsLFxuICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgd2F0Y2hGbjogd2F0Y2hGbixcbiAgICAgICAgICAgIGNvbXBhcmVXaXRoRXhwOiBjb21wYXJlV2l0aEV4cCxcbiAgICAgICAgICAgIHdhdGNoZXI6IHNjb3BlLiR3YXRjaChjb21wYXJlV2l0aEV4cCwgd2F0Y2hGbilcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGRhdGEud2F0Y2hGbihzY29wZS4kZXZhbChjb21wYXJlV2l0aEV4cCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVTY29wZShlKSB7XG4gICAgICAgIHZhciByZW1vdmVkU2NvcGUgPSBlLnRhcmdldFNjb3BlO1xuICAgICAgICB2YXIgaW5kZXggPSBsaW5rZWRTY29wZXMuaW5kZXhPZihyZW1vdmVkU2NvcGUpO1xuICAgICAgICBsaW5rZWRTY29wZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGlmIChsaW5rZWRTY29wZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG5ld1dhdGNoU2NvcGUgPSBsaW5rZWRTY29wZXNbMF07XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV4cFRvRGF0YSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuc2NvcGUgPT09IHJlbW92ZWRTY29wZSkge1xuICAgICAgICAgICAgICBkYXRhLndhdGNoZXIgPSBuZXdXYXRjaFNjb3BlLiR3YXRjaChkYXRhLmNvbXBhcmVXaXRoRXhwLCBkYXRhLndhdGNoRm4pO1xuICAgICAgICAgICAgICBkYXRhLnNjb3BlID0gbmV3V2F0Y2hTY29wZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleHBUb0RhdGEgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBpY2tlcicsIFsndWkuYm9vdHN0cmFwLmRhdGVwYXJzZXInLCAndWkuYm9vdHN0cmFwLmlzQ2xhc3MnXSlcblxuLnZhbHVlKCckZGF0ZXBpY2tlclN1cHByZXNzRXJyb3InLCBmYWxzZSlcblxuLnZhbHVlKCckZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nJywgdHJ1ZSlcblxuLmNvbnN0YW50KCd1aWJEYXRlcGlja2VyQ29uZmlnJywge1xuICBkYXRlcGlja2VyTW9kZTogJ2RheScsXG4gIGZvcm1hdERheTogJ2RkJyxcbiAgZm9ybWF0TW9udGg6ICdNTU1NJyxcbiAgZm9ybWF0WWVhcjogJ3l5eXknLFxuICBmb3JtYXREYXlIZWFkZXI6ICdFRUUnLFxuICBmb3JtYXREYXlUaXRsZTogJ01NTU0geXl5eScsXG4gIGZvcm1hdE1vbnRoVGl0bGU6ICd5eXl5JyxcbiAgbWF4RGF0ZTogbnVsbCxcbiAgbWF4TW9kZTogJ3llYXInLFxuICBtaW5EYXRlOiBudWxsLFxuICBtaW5Nb2RlOiAnZGF5JyxcbiAgbW9udGhDb2x1bW5zOiAzLFxuICBuZ01vZGVsT3B0aW9uczoge30sXG4gIHNob3J0Y3V0UHJvcGFnYXRpb246IGZhbHNlLFxuICBzaG93V2Vla3M6IHRydWUsXG4gIHllYXJDb2x1bW5zOiA1LFxuICB5ZWFyUm93czogNFxufSlcblxuLmNvbnRyb2xsZXIoJ1VpYkRhdGVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRwYXJzZScsICckaW50ZXJwb2xhdGUnLCAnJGxvY2FsZScsICckbG9nJywgJ2RhdGVGaWx0ZXInLCAndWliRGF0ZXBpY2tlckNvbmZpZycsICckZGF0ZXBpY2tlckxpdGVyYWxXYXJuaW5nJywgJyRkYXRlcGlja2VyU3VwcHJlc3NFcnJvcicsICd1aWJEYXRlUGFyc2VyJyxcbiAgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkcGFyc2UsICRpbnRlcnBvbGF0ZSwgJGxvY2FsZSwgJGxvZywgZGF0ZUZpbHRlciwgZGF0ZXBpY2tlckNvbmZpZywgJGRhdGVwaWNrZXJMaXRlcmFsV2FybmluZywgJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yLCBkYXRlUGFyc2VyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG5nTW9kZWxDdHJsID0geyAkc2V0Vmlld1ZhbHVlOiBhbmd1bGFyLm5vb3AgfSwgLy8gbnVsbE1vZGVsQ3RybDtcbiAgICAgIG5nTW9kZWxPcHRpb25zID0ge30sXG4gICAgICB3YXRjaExpc3RlbmVycyA9IFtdO1xuXG4gICRlbGVtZW50LmFkZENsYXNzKCd1aWItZGF0ZXBpY2tlcicpO1xuICAkYXR0cnMuJHNldCgncm9sZScsICdhcHBsaWNhdGlvbicpO1xuXG4gIGlmICghJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zKSB7XG4gICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zID0ge307XG4gIH1cblxuICAvLyBNb2RlcyBjaGFpblxuICB0aGlzLm1vZGVzID0gWydkYXknLCAnbW9udGgnLCAneWVhciddO1xuXG4gIFtcbiAgICAnY3VzdG9tQ2xhc3MnLFxuICAgICdkYXRlRGlzYWJsZWQnLFxuICAgICdkYXRlcGlja2VyTW9kZScsXG4gICAgJ2Zvcm1hdERheScsXG4gICAgJ2Zvcm1hdERheUhlYWRlcicsXG4gICAgJ2Zvcm1hdERheVRpdGxlJyxcbiAgICAnZm9ybWF0TW9udGgnLFxuICAgICdmb3JtYXRNb250aFRpdGxlJyxcbiAgICAnZm9ybWF0WWVhcicsXG4gICAgJ21heERhdGUnLFxuICAgICdtYXhNb2RlJyxcbiAgICAnbWluRGF0ZScsXG4gICAgJ21pbk1vZGUnLFxuICAgICdtb250aENvbHVtbnMnLFxuICAgICdzaG93V2Vla3MnLFxuICAgICdzaG9ydGN1dFByb3BhZ2F0aW9uJyxcbiAgICAnc3RhcnRpbmdEYXknLFxuICAgICd5ZWFyQ29sdW1ucycsXG4gICAgJ3llYXJSb3dzJ1xuICBdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2N1c3RvbUNsYXNzJzpcbiAgICAgIGNhc2UgJ2RhdGVEaXNhYmxlZCc6XG4gICAgICAgICRzY29wZVtrZXldID0gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0gfHwgYW5ndWxhci5ub29wO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGVwaWNrZXJNb2RlJzpcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlKSA/XG4gICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlIDogZGF0ZXBpY2tlckNvbmZpZy5kYXRlcGlja2VyTW9kZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmb3JtYXREYXknOlxuICAgICAgY2FzZSAnZm9ybWF0RGF5SGVhZGVyJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdERheVRpdGxlJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdE1vbnRoJzpcbiAgICAgIGNhc2UgJ2Zvcm1hdE1vbnRoVGl0bGUnOlxuICAgICAgY2FzZSAnZm9ybWF0WWVhcic6XG4gICAgICAgIHNlbGZba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSA/XG4gICAgICAgICAgJGludGVycG9sYXRlKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSgkc2NvcGUuJHBhcmVudCkgOlxuICAgICAgICAgIGRhdGVwaWNrZXJDb25maWdba2V5XTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aENvbHVtbnMnOlxuICAgICAgY2FzZSAnc2hvd1dlZWtzJzpcbiAgICAgIGNhc2UgJ3Nob3J0Y3V0UHJvcGFnYXRpb24nOlxuICAgICAgY2FzZSAneWVhckNvbHVtbnMnOlxuICAgICAgY2FzZSAneWVhclJvd3MnOlxuICAgICAgICBzZWxmW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkgP1xuICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldIDogZGF0ZXBpY2tlckNvbmZpZ1trZXldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0YXJ0aW5nRGF5JzpcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5zdGFydGluZ0RheSkpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLnN0YXJ0aW5nRGF5O1xuICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoZGF0ZXBpY2tlckNvbmZpZy5zdGFydGluZ0RheSkpIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gZGF0ZXBpY2tlckNvbmZpZy5zdGFydGluZ0RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnN0YXJ0aW5nRGF5ID0gKCRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5GSVJTVERBWU9GV0VFSyArIDgpICUgNztcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWF4RGF0ZSc6XG4gICAgICBjYXNlICdtaW5EYXRlJzpcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnZGF0ZXBpY2tlck9wdGlvbnMuJyArIGtleSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgc2VsZltrZXldID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUodmFsdWUpLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCRkYXRlcGlja2VyTGl0ZXJhbFdhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICAkbG9nLndhcm4oJ0xpdGVyYWwgZGF0ZSBzdXBwb3J0IGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzd2l0Y2ggdG8gZGF0ZSBvYmplY3QgdXNhZ2UnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNlbGZba2V5XSA9IG5ldyBEYXRlKGRhdGVGaWx0ZXIodmFsdWUsICdtZWRpdW0nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGZba2V5XSA9IGRhdGVwaWNrZXJDb25maWdba2V5XSA/XG4gICAgICAgICAgICAgIGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKGRhdGVwaWNrZXJDb25maWdba2V5XSksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSkgOlxuICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtYXhNb2RlJzpcbiAgICAgIGNhc2UgJ21pbk1vZGUnOlxuICAgICAgICBpZiAoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV07IH0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWxmW2tleV0gPSAkc2NvcGVba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbWluTW9kZScgJiYgc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSkgPCBzZWxmLm1vZGVzLmluZGV4T2Yoc2VsZltrZXldKSB8fFxuICAgICAgICAgICAgICBrZXkgPT09ICdtYXhNb2RlJyAmJiBzZWxmLm1vZGVzLmluZGV4T2YoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlKSA+IHNlbGYubW9kZXMuaW5kZXhPZihzZWxmW2tleV0pKSB7XG4gICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9IHNlbGZba2V5XTtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlID0gc2VsZltrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGZba2V5XSA9ICRzY29wZVtrZXldID0gZGF0ZXBpY2tlckNvbmZpZ1trZXldIHx8IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuXG4gICRzY29wZS51bmlxdWVJZCA9ICdkYXRlcGlja2VyLScgKyAkc2NvcGUuJGlkICsgJy0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuXG4gICRzY29wZS5kaXNhYmxlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kaXNhYmxlZCkgfHwgZmFsc2U7XG4gIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubmdEaXNhYmxlZCkpIHtcbiAgICB3YXRjaExpc3RlbmVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkYXR0cnMubmdEaXNhYmxlZCwgZnVuY3Rpb24oZGlzYWJsZWQpIHtcbiAgICAgICRzY29wZS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgIH0pKTtcbiAgfVxuXG4gICRzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKGRhdGVPYmplY3QpIHtcbiAgICBpZiAoc2VsZi5jb21wYXJlKGRhdGVPYmplY3QuZGF0ZSwgc2VsZi5hY3RpdmVEYXRlKSA9PT0gMCkge1xuICAgICAgJHNjb3BlLmFjdGl2ZURhdGVJZCA9IGRhdGVPYmplY3QudWlkO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8pIHtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcbiAgICBuZ01vZGVsT3B0aW9ucyA9IGV4dHJhY3RPcHRpb25zKG5nTW9kZWxDdHJsKTtcblxuICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGUpIHtcbiAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKCRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5pbml0RGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKSB8fCBuZXcgRGF0ZSgpO1xuICAgICAgJHNjb3BlLiR3YXRjaCgnZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGUnLCBmdW5jdGlvbihpbml0RGF0ZSkge1xuICAgICAgICBpZiAoaW5pdERhdGUgJiYgKG5nTW9kZWxDdHJsLiRpc0VtcHR5KG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSB8fCBuZ01vZGVsQ3RybC4kaW52YWxpZCkpIHtcbiAgICAgICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShpbml0RGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmFjdGl2ZURhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBkYXRlID0gbmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUgPyBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSkgOiBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuYWN0aXZlRGF0ZSA9ICFpc05hTihkYXRlKSA/XG4gICAgICBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShkYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpIDpcbiAgICAgIGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKG5ldyBEYXRlKCksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG5cbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlbmRlcigpO1xuICAgIH07XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSxcbiAgICAgICAgICBpc1ZhbGlkID0gIWlzTmFOKGRhdGUpO1xuXG4gICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICB0aGlzLmFjdGl2ZURhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShkYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgfSBlbHNlIGlmICghJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yKSB7XG4gICAgICAgICRsb2cuZXJyb3IoJ0RhdGVwaWNrZXIgZGlyZWN0aXZlOiBcIm5nLW1vZGVsXCIgdmFsdWUgbXVzdCBiZSBhIERhdGUgb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICB0aGlzLnJlZnJlc2hWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgJHNjb3BlLnNlbGVjdGVkRHQgPSBudWxsO1xuICAgICAgdGhpcy5fcmVmcmVzaFZpZXcoKTtcbiAgICAgIGlmICgkc2NvcGUuYWN0aXZlRHQpIHtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZURhdGVJZCA9ICRzY29wZS5hY3RpdmVEdC51aWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIDogbnVsbDtcbiAgICAgIGRhdGUgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShkYXRlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdkYXRlRGlzYWJsZWQnLCAhZGF0ZSB8fFxuICAgICAgICB0aGlzLmVsZW1lbnQgJiYgIXRoaXMuaXNEaXNhYmxlZChkYXRlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY3JlYXRlRGF0ZU9iamVjdCA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkge1xuICAgIHZhciBtb2RlbCA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPyBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSA6IG51bGw7XG4gICAgbW9kZWwgPSBkYXRlUGFyc2VyLmZyb21UaW1lem9uZShtb2RlbCwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIHRvZGF5ID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodG9kYXksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgdmFyIHRpbWUgPSB0aGlzLmNvbXBhcmUoZGF0ZSwgdG9kYXkpO1xuICAgIHZhciBkdCA9IHtcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBsYWJlbDogZGF0ZVBhcnNlci5maWx0ZXIoZGF0ZSwgZm9ybWF0KSxcbiAgICAgIHNlbGVjdGVkOiBtb2RlbCAmJiB0aGlzLmNvbXBhcmUoZGF0ZSwgbW9kZWwpID09PSAwLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZChkYXRlKSxcbiAgICAgIHBhc3Q6IHRpbWUgPCAwLFxuICAgICAgY3VycmVudDogdGltZSA9PT0gMCxcbiAgICAgIGZ1dHVyZTogdGltZSA+IDAsXG4gICAgICBjdXN0b21DbGFzczogdGhpcy5jdXN0b21DbGFzcyhkYXRlKSB8fCBudWxsXG4gICAgfTtcblxuICAgIGlmIChtb2RlbCAmJiB0aGlzLmNvbXBhcmUoZGF0ZSwgbW9kZWwpID09PSAwKSB7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWREdCA9IGR0O1xuICAgIH1cblxuICAgIGlmIChzZWxmLmFjdGl2ZURhdGUgJiYgdGhpcy5jb21wYXJlKGR0LmRhdGUsIHNlbGYuYWN0aXZlRGF0ZSkgPT09IDApIHtcbiAgICAgICRzY29wZS5hY3RpdmVEdCA9IGR0O1xuICAgIH1cblxuICAgIHJldHVybiBkdDtcbiAgfTtcblxuICB0aGlzLmlzRGlzYWJsZWQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuICRzY29wZS5kaXNhYmxlZCB8fFxuICAgICAgdGhpcy5taW5EYXRlICYmIHRoaXMuY29tcGFyZShkYXRlLCB0aGlzLm1pbkRhdGUpIDwgMCB8fFxuICAgICAgdGhpcy5tYXhEYXRlICYmIHRoaXMuY29tcGFyZShkYXRlLCB0aGlzLm1heERhdGUpID4gMCB8fFxuICAgICAgJHNjb3BlLmRhdGVEaXNhYmxlZCAmJiAkc2NvcGUuZGF0ZURpc2FibGVkKHtkYXRlOiBkYXRlLCBtb2RlOiAkc2NvcGUuZGF0ZXBpY2tlck1vZGV9KTtcbiAgfTtcblxuICB0aGlzLmN1c3RvbUNsYXNzID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiAkc2NvcGUuY3VzdG9tQ2xhc3Moe2RhdGU6IGRhdGUsIG1vZGU6ICRzY29wZS5kYXRlcGlja2VyTW9kZX0pO1xuICB9O1xuXG4gIC8vIFNwbGl0IGFycmF5IGludG8gc21hbGxlciBhcnJheXNcbiAgdGhpcy5zcGxpdCA9IGZ1bmN0aW9uKGFyciwgc2l6ZSkge1xuICAgIHZhciBhcnJheXMgPSBbXTtcbiAgICB3aGlsZSAoYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgIGFycmF5cy5wdXNoKGFyci5zcGxpY2UoMCwgc2l6ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXlzO1xuICB9O1xuXG4gICRzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgaWYgKCRzY29wZS5kYXRlcGlja2VyTW9kZSA9PT0gc2VsZi5taW5Nb2RlKSB7XG4gICAgICB2YXIgZHQgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSkgOiBuZXcgRGF0ZSgwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgICAgIGR0LnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSk7XG4gICAgICBkdCA9IGRhdGVQYXJzZXIudG9UaW1lem9uZShkdCwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZHQpO1xuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmFjdGl2ZURhdGUgPSBkYXRlO1xuICAgICAgc2V0TW9kZShzZWxmLm1vZGVzW3NlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpIC0gMV0pO1xuXG4gICAgICAkc2NvcGUuJGVtaXQoJ3VpYjpkYXRlcGlja2VyLm1vZGUnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuJGJyb2FkY2FzdCgndWliOmRhdGVwaWNrZXIuZm9jdXMnKTtcbiAgfTtcblxuICAkc2NvcGUubW92ZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgIHZhciB5ZWFyID0gc2VsZi5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkgKyBkaXJlY3Rpb24gKiAoc2VsZi5zdGVwLnllYXJzIHx8IDApLFxuICAgICAgICBtb250aCA9IHNlbGYuYWN0aXZlRGF0ZS5nZXRNb250aCgpICsgZGlyZWN0aW9uICogKHNlbGYuc3RlcC5tb250aHMgfHwgMCk7XG4gICAgc2VsZi5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCAxKTtcbiAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZU1vZGUgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgMTtcblxuICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWF4TW9kZSAmJiBkaXJlY3Rpb24gPT09IDEgfHxcbiAgICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9PT0gc2VsZi5taW5Nb2RlICYmIGRpcmVjdGlvbiA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRNb2RlKHNlbGYubW9kZXNbc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyTW9kZSkgKyBkaXJlY3Rpb25dKTtcblxuICAgICRzY29wZS4kZW1pdCgndWliOmRhdGVwaWNrZXIubW9kZScpO1xuICB9O1xuXG4gIC8vIEtleSBldmVudCBtYXBwZXJcbiAgJHNjb3BlLmtleXMgPSB7IDEzOiAnZW50ZXInLCAzMjogJ3NwYWNlJywgMzM6ICdwYWdldXAnLCAzNDogJ3BhZ2Vkb3duJywgMzU6ICdlbmQnLCAzNjogJ2hvbWUnLCAzNzogJ2xlZnQnLCAzODogJ3VwJywgMzk6ICdyaWdodCcsIDQwOiAnZG93bicgfTtcblxuICB2YXIgZm9jdXNFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbGVtZW50WzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgLy8gTGlzdGVuIGZvciBmb2N1cyByZXF1ZXN0cyBmcm9tIHBvcHVwIGRpcmVjdGl2ZVxuICAkc2NvcGUuJG9uKCd1aWI6ZGF0ZXBpY2tlci5mb2N1cycsIGZvY3VzRWxlbWVudCk7XG5cbiAgJHNjb3BlLmtleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICB2YXIga2V5ID0gJHNjb3BlLmtleXNbZXZ0LndoaWNoXTtcblxuICAgIGlmICgha2V5IHx8IGV2dC5zaGlmdEtleSB8fCBldnQuYWx0S2V5IHx8ICRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghc2VsZi5zaG9ydGN1dFByb3BhZ2F0aW9uKSB7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ2VudGVyJyB8fCBrZXkgPT09ICdzcGFjZScpIHtcbiAgICAgIGlmIChzZWxmLmlzRGlzYWJsZWQoc2VsZi5hY3RpdmVEYXRlKSkge1xuICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmdcbiAgICAgIH1cbiAgICAgICRzY29wZS5zZWxlY3Qoc2VsZi5hY3RpdmVEYXRlKTtcbiAgICB9IGVsc2UgaWYgKGV2dC5jdHJsS2V5ICYmIChrZXkgPT09ICd1cCcgfHwga2V5ID09PSAnZG93bicpKSB7XG4gICAgICAkc2NvcGUudG9nZ2xlTW9kZShrZXkgPT09ICd1cCcgPyAxIDogLTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmhhbmRsZUtleURvd24oa2V5LCBldnQpO1xuICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgIH1cbiAgfTtcblxuICAkZWxlbWVudC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2dCkge1xuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUua2V5ZG93bihldnQpO1xuICAgIH0pO1xuICB9KTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vQ2xlYXIgYWxsIHdhdGNoIGxpc3RlbmVycyBvbiBkZXN0cm95XG4gICAgd2hpbGUgKHdhdGNoTGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgd2F0Y2hMaXN0ZW5lcnMuc2hpZnQoKSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0TW9kZShtb2RlKSB7XG4gICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gbW9kZTtcbiAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGUgPSBtb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0cmFjdE9wdGlvbnMobmdNb2RlbEN0cmwpIHtcbiAgICB2YXIgbmdNb2RlbE9wdGlvbnM7XG5cbiAgICBpZiAoYW5ndWxhci52ZXJzaW9uLm1pbm9yIDwgNikgeyAvLyBpbiBhbmd1bGFyIDwgMS42ICRvcHRpb25zIGNvdWxkIGJlIG1pc3NpbmdcbiAgICAgIC8vIGd1YXJhbnRlZSBhIHZhbHVlXG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IG5nTW9kZWxDdHJsLiRvcHRpb25zIHx8XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5uZ01vZGVsT3B0aW9ucyB8fFxuICAgICAgICBkYXRlcGlja2VyQ29uZmlnLm5nTW9kZWxPcHRpb25zIHx8XG4gICAgICAgIHt9O1xuXG4gICAgICAvLyBtaW1pYyAxLjYrIGFwaVxuICAgICAgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnNba2V5XTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHsgLy8gaW4gYW5ndWxhciA+PTEuNiAkb3B0aW9ucyBpcyBhbHdheXMgcHJlc2VudFxuICAgICAgLy8gbmctbW9kZWwtb3B0aW9ucyBkZWZhdWx0cyB0aW1lem9uZSB0byBudWxsOyBkb24ndCBsZXQgaXRzIHByZWNlZGVuY2Ugc3F1YXNoIGEgbm9uLW51bGwgdmFsdWVcbiAgICAgIHZhciB0aW1lem9uZSA9IG5nTW9kZWxDdHJsLiRvcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSB8fFxuICAgICAgICAoJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLm5nTW9kZWxPcHRpb25zID8gJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zLm5nTW9kZWxPcHRpb25zLnRpbWV6b25lIDogbnVsbCkgfHxcbiAgICAgICAgKGRhdGVwaWNrZXJDb25maWcubmdNb2RlbE9wdGlvbnMgPyBkYXRlcGlja2VyQ29uZmlnLm5nTW9kZWxPcHRpb25zLnRpbWV6b25lIDogbnVsbCk7XG5cbiAgICAgIC8vIHZhbHVlcyBwYXNzZWQgdG8gY3JlYXRlQ2hpbGQgb3ZlcnJpZGUgZXhpc3RpbmcgdmFsdWVzXG4gICAgICBuZ01vZGVsT3B0aW9ucyA9IG5nTW9kZWxDdHJsLiRvcHRpb25zIC8vIHN0YXJ0IHdpdGggYSBNb2RlbE9wdGlvbnMgaW5zdGFuY2VcbiAgICAgICAgLmNyZWF0ZUNoaWxkKGRhdGVwaWNrZXJDb25maWcubmdNb2RlbE9wdGlvbnMpIC8vIGxvd2VzdCBwcmVjZWRlbmNlXG4gICAgICAgIC5jcmVhdGVDaGlsZCgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMubmdNb2RlbE9wdGlvbnMpXG4gICAgICAgIC5jcmVhdGVDaGlsZChuZ01vZGVsQ3RybC4kb3B0aW9ucykgLy8gaGlnaGVzdCBwcmVjZWRlbmNlXG4gICAgICAgIC5jcmVhdGVDaGlsZCh7dGltZXpvbmU6IHRpbWV6b25lfSk7IC8vIHRvIGtlZXAgZnJvbSBzcXVhc2hpbmcgYSBub24tbnVsbCB2YWx1ZVxuICAgIH1cblxuICAgIHJldHVybiBuZ01vZGVsT3B0aW9ucztcbiAgfVxufV0pXG5cbi5jb250cm9sbGVyKCdVaWJEYXlwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnZGF0ZUZpbHRlcicsIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgZGF0ZUZpbHRlcikge1xuICB2YXIgREFZU19JTl9NT05USCA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuICB0aGlzLnN0ZXAgPSB7IG1vbnRoczogMSB9O1xuICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudDtcbiAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICByZXR1cm4gbW9udGggPT09IDEgJiYgeWVhciAlIDQgPT09IDAgJiZcbiAgICAgICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApID8gMjkgOiBEQVlTX0lOX01PTlRIW21vbnRoXTtcbiAgfVxuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGN0cmwpIHtcbiAgICBhbmd1bGFyLmV4dGVuZChjdHJsLCB0aGlzKTtcbiAgICBzY29wZS5zaG93V2Vla3MgPSBjdHJsLnNob3dXZWVrcztcbiAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gIH07XG5cbiAgdGhpcy5nZXREYXRlcyA9IGZ1bmN0aW9uKHN0YXJ0RGF0ZSwgbikge1xuICAgIHZhciBkYXRlcyA9IG5ldyBBcnJheShuKSwgY3VycmVudCA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSksIGkgPSAwLCBkYXRlO1xuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnQpO1xuICAgICAgZGF0ZXNbaSsrXSA9IGRhdGU7XG4gICAgICBjdXJyZW50LnNldERhdGUoY3VycmVudC5nZXREYXRlKCkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVzO1xuICB9O1xuXG4gIHRoaXMuX3JlZnJlc2hWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHllYXIgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIG1vbnRoID0gdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCksXG4gICAgICBmaXJzdERheU9mTW9udGggPSBuZXcgRGF0ZSh0aGlzLmFjdGl2ZURhdGUpO1xuXG4gICAgZmlyc3REYXlPZk1vbnRoLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCAxKTtcblxuICAgIHZhciBkaWZmZXJlbmNlID0gdGhpcy5zdGFydGluZ0RheSAtIGZpcnN0RGF5T2ZNb250aC5nZXREYXkoKSxcbiAgICAgIG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID0gZGlmZmVyZW5jZSA+IDAgP1xuICAgICAgICA3IC0gZGlmZmVyZW5jZSA6IC0gZGlmZmVyZW5jZSxcbiAgICAgIGZpcnN0RGF0ZSA9IG5ldyBEYXRlKGZpcnN0RGF5T2ZNb250aCk7XG5cbiAgICBpZiAobnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGggPiAwKSB7XG4gICAgICBmaXJzdERhdGUuc2V0RGF0ZSgtbnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGggKyAxKTtcbiAgICB9XG5cbiAgICAvLyA0MiBpcyB0aGUgbnVtYmVyIG9mIGRheXMgb24gYSBzaXgtd2VlayBjYWxlbmRhclxuICAgIHZhciBkYXlzID0gdGhpcy5nZXREYXRlcyhmaXJzdERhdGUsIDQyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQyOyBpICsrKSB7XG4gICAgICBkYXlzW2ldID0gYW5ndWxhci5leHRlbmQodGhpcy5jcmVhdGVEYXRlT2JqZWN0KGRheXNbaV0sIHRoaXMuZm9ybWF0RGF5KSwge1xuICAgICAgICBzZWNvbmRhcnk6IGRheXNbaV0uZ2V0TW9udGgoKSAhPT0gbW9udGgsXG4gICAgICAgIHVpZDogc2NvcGUudW5pcXVlSWQgKyAnLScgKyBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzY29wZS5sYWJlbHMgPSBuZXcgQXJyYXkoNyk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcbiAgICAgIHNjb3BlLmxhYmVsc1tqXSA9IHtcbiAgICAgICAgYWJicjogZGF0ZUZpbHRlcihkYXlzW2pdLmRhdGUsIHRoaXMuZm9ybWF0RGF5SGVhZGVyKSxcbiAgICAgICAgZnVsbDogZGF0ZUZpbHRlcihkYXlzW2pdLmRhdGUsICdFRUVFJylcbiAgICAgIH07XG4gICAgfVxuXG4gICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKHRoaXMuYWN0aXZlRGF0ZSwgdGhpcy5mb3JtYXREYXlUaXRsZSk7XG4gICAgc2NvcGUucm93cyA9IHRoaXMuc3BsaXQoZGF5cywgNyk7XG5cbiAgICBpZiAoc2NvcGUuc2hvd1dlZWtzKSB7XG4gICAgICBzY29wZS53ZWVrTnVtYmVycyA9IFtdO1xuICAgICAgdmFyIHRodXJzZGF5SW5kZXggPSAoNCArIDcgLSB0aGlzLnN0YXJ0aW5nRGF5KSAlIDcsXG4gICAgICAgICAgbnVtV2Vla3MgPSBzY29wZS5yb3dzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGN1cldlZWsgPSAwOyBjdXJXZWVrIDwgbnVtV2Vla3M7IGN1cldlZWsrKykge1xuICAgICAgICBzY29wZS53ZWVrTnVtYmVycy5wdXNoKFxuICAgICAgICAgIGdldElTTzg2MDFXZWVrTnVtYmVyKHNjb3BlLnJvd3NbY3VyV2Vla11bdGh1cnNkYXlJbmRleF0uZGF0ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICB2YXIgX2RhdGUxID0gbmV3IERhdGUoZGF0ZTEuZ2V0RnVsbFllYXIoKSwgZGF0ZTEuZ2V0TW9udGgoKSwgZGF0ZTEuZ2V0RGF0ZSgpKTtcbiAgICB2YXIgX2RhdGUyID0gbmV3IERhdGUoZGF0ZTIuZ2V0RnVsbFllYXIoKSwgZGF0ZTIuZ2V0TW9udGgoKSwgZGF0ZTIuZ2V0RGF0ZSgpKTtcbiAgICBfZGF0ZTEuc2V0RnVsbFllYXIoZGF0ZTEuZ2V0RnVsbFllYXIoKSk7XG4gICAgX2RhdGUyLnNldEZ1bGxZZWFyKGRhdGUyLmdldEZ1bGxZZWFyKCkpO1xuICAgIHJldHVybiBfZGF0ZTEgLSBfZGF0ZTI7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0SVNPODYwMVdlZWtOdW1iZXIoZGF0ZSkge1xuICAgIHZhciBjaGVja0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICBjaGVja0RhdGUuc2V0RGF0ZShjaGVja0RhdGUuZ2V0RGF0ZSgpICsgNCAtIChjaGVja0RhdGUuZ2V0RGF5KCkgfHwgNykpOyAvLyBUaHVyc2RheVxuICAgIHZhciB0aW1lID0gY2hlY2tEYXRlLmdldFRpbWUoKTtcbiAgICBjaGVja0RhdGUuc2V0TW9udGgoMCk7IC8vIENvbXBhcmUgd2l0aCBKYW4gMVxuICAgIGNoZWNrRGF0ZS5zZXREYXRlKDEpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucm91bmQoKHRpbWUgLSBjaGVja0RhdGUpIC8gODY0MDAwMDApIC8gNykgKyAxO1xuICB9XG5cbiAgdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24oa2V5LCBldnQpIHtcbiAgICB2YXIgZGF0ZSA9IHRoaXMuYWN0aXZlRGF0ZS5nZXREYXRlKCk7XG5cbiAgICBpZiAoa2V5ID09PSAnbGVmdCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3VwJykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSA3O1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmlnaHQnKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdkb3duJykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyA3O1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncGFnZXVwJyB8fCBrZXkgPT09ICdwYWdlZG93bicpIHtcbiAgICAgIHZhciBtb250aCA9IHRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpICsgKGtleSA9PT0gJ3BhZ2V1cCcgPyAtIDEgOiAxKTtcbiAgICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXRNb250aChtb250aCwgMSk7XG4gICAgICBkYXRlID0gTWF0aC5taW4oZ2V0RGF5c0luTW9udGgodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpKSwgZGF0ZSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdob21lJykge1xuICAgICAgZGF0ZSA9IDE7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdlbmQnKSB7XG4gICAgICBkYXRlID0gZ2V0RGF5c0luTW9udGgodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVEYXRlLnNldERhdGUoZGF0ZSk7XG4gIH07XG59XSlcblxuLmNvbnRyb2xsZXIoJ1VpYk1vbnRocGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGRhdGVGaWx0ZXIpIHtcbiAgdGhpcy5zdGVwID0geyB5ZWFyczogMSB9O1xuICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudDtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjdHJsKSB7XG4gICAgYW5ndWxhci5leHRlbmQoY3RybCwgdGhpcyk7XG4gICAgY3RybC5yZWZyZXNoVmlldygpO1xuICB9O1xuXG4gIHRoaXMuX3JlZnJlc2hWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1vbnRocyA9IG5ldyBBcnJheSgxMiksXG4gICAgICAgIHllYXIgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgZGF0ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuYWN0aXZlRGF0ZSk7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKHllYXIsIGksIDEpO1xuICAgICAgbW9udGhzW2ldID0gYW5ndWxhci5leHRlbmQodGhpcy5jcmVhdGVEYXRlT2JqZWN0KGRhdGUsIHRoaXMuZm9ybWF0TW9udGgpLCB7XG4gICAgICAgIHVpZDogc2NvcGUudW5pcXVlSWQgKyAnLScgKyBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzY29wZS50aXRsZSA9IGRhdGVGaWx0ZXIodGhpcy5hY3RpdmVEYXRlLCB0aGlzLmZvcm1hdE1vbnRoVGl0bGUpO1xuICAgIHNjb3BlLnJvd3MgPSB0aGlzLnNwbGl0KG1vbnRocywgdGhpcy5tb250aENvbHVtbnMpO1xuICAgIHNjb3BlLnllYXJIZWFkZXJDb2xzcGFuID0gdGhpcy5tb250aENvbHVtbnMgPiAzID8gdGhpcy5tb250aENvbHVtbnMgLSAyIDogMTtcbiAgfTtcblxuICB0aGlzLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICB2YXIgX2RhdGUxID0gbmV3IERhdGUoZGF0ZTEuZ2V0RnVsbFllYXIoKSwgZGF0ZTEuZ2V0TW9udGgoKSk7XG4gICAgdmFyIF9kYXRlMiA9IG5ldyBEYXRlKGRhdGUyLmdldEZ1bGxZZWFyKCksIGRhdGUyLmdldE1vbnRoKCkpO1xuICAgIF9kYXRlMS5zZXRGdWxsWWVhcihkYXRlMS5nZXRGdWxsWWVhcigpKTtcbiAgICBfZGF0ZTIuc2V0RnVsbFllYXIoZGF0ZTIuZ2V0RnVsbFllYXIoKSk7XG4gICAgcmV0dXJuIF9kYXRlMSAtIF9kYXRlMjtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbihrZXksIGV2dCkge1xuICAgIHZhciBkYXRlID0gdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCk7XG5cbiAgICBpZiAoa2V5ID09PSAnbGVmdCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlIC0gMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3VwJykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSB0aGlzLm1vbnRoQ29sdW1ucztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgdGhpcy5tb250aENvbHVtbnM7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdwYWdldXAnIHx8IGtleSA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgdmFyIHllYXIgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSArIChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSk7XG4gICAgICB0aGlzLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdob21lJykge1xuICAgICAgZGF0ZSA9IDA7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdlbmQnKSB7XG4gICAgICBkYXRlID0gMTE7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlRGF0ZS5zZXRNb250aChkYXRlKTtcbiAgfTtcbn1dKVxuXG4uY29udHJvbGxlcignVWliWWVhcnBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICdkYXRlRmlsdGVyJywgZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBkYXRlRmlsdGVyKSB7XG4gIHZhciBjb2x1bW5zLCByYW5nZTtcbiAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnQ7XG5cbiAgZnVuY3Rpb24gZ2V0U3RhcnRpbmdZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoKHllYXIgLSAxKSAvIHJhbmdlLCAxMCkgKiByYW5nZSArIDE7XG4gIH1cblxuICB0aGlzLnllYXJwaWNrZXJJbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgY29sdW1ucyA9IHRoaXMueWVhckNvbHVtbnM7XG4gICAgcmFuZ2UgPSB0aGlzLnllYXJSb3dzICogY29sdW1ucztcbiAgICB0aGlzLnN0ZXAgPSB7IHllYXJzOiByYW5nZSB9O1xuICB9O1xuXG4gIHRoaXMuX3JlZnJlc2hWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHllYXJzID0gbmV3IEFycmF5KHJhbmdlKSwgZGF0ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBzdGFydCA9IGdldFN0YXJ0aW5nWWVhcih0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSk7IGkgPCByYW5nZTsgaSsrKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKTtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoc3RhcnQgKyBpLCAwLCAxKTtcbiAgICAgIHllYXJzW2ldID0gYW5ndWxhci5leHRlbmQodGhpcy5jcmVhdGVEYXRlT2JqZWN0KGRhdGUsIHRoaXMuZm9ybWF0WWVhciksIHtcbiAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNjb3BlLnRpdGxlID0gW3llYXJzWzBdLmxhYmVsLCB5ZWFyc1tyYW5nZSAtIDFdLmxhYmVsXS5qb2luKCcgLSAnKTtcbiAgICBzY29wZS5yb3dzID0gdGhpcy5zcGxpdCh5ZWFycywgY29sdW1ucyk7XG4gICAgc2NvcGUuY29sdW1ucyA9IGNvbHVtbnM7XG4gIH07XG5cbiAgdGhpcy5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgcmV0dXJuIGRhdGUxLmdldEZ1bGxZZWFyKCkgLSBkYXRlMi5nZXRGdWxsWWVhcigpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgdmFyIGRhdGUgPSB0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKTtcblxuICAgIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZGF0ZSA9IGRhdGUgLSAxO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICBkYXRlID0gZGF0ZSAtIGNvbHVtbnM7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGRhdGUgPSBkYXRlICsgMTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICBkYXRlID0gZGF0ZSArIGNvbHVtbnM7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdwYWdldXAnIHx8IGtleSA9PT0gJ3BhZ2Vkb3duJykge1xuICAgICAgZGF0ZSArPSAoa2V5ID09PSAncGFnZXVwJyA/IC0gMSA6IDEpICogcmFuZ2U7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdob21lJykge1xuICAgICAgZGF0ZSA9IGdldFN0YXJ0aW5nWWVhcih0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdlbmQnKSB7XG4gICAgICBkYXRlID0gZ2V0U3RhcnRpbmdZZWFyKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKSArIHJhbmdlIC0gMTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKGRhdGUpO1xuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRhdGVwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sJztcbiAgICB9LFxuICAgIHNjb3BlOiB7XG4gICAgICBkYXRlcGlja2VyT3B0aW9uczogJz0/J1xuICAgIH0sXG4gICAgcmVxdWlyZTogWyd1aWJEYXRlcGlja2VyJywgJ15uZ01vZGVsJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliRGF0ZXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2RhdGVwaWNrZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBkYXRlcGlja2VyQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEYXlwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWwnO1xuICAgIH0sXG4gICAgcmVxdWlyZTogWydedWliRGF0ZXBpY2tlcicsICd1aWJEYXlwaWNrZXInXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJEYXlwaWNrZXJDb250cm9sbGVyJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgZGF0ZXBpY2tlckN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgZGF5cGlja2VyQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBkYXlwaWNrZXJDdHJsLmluaXQoZGF0ZXBpY2tlckN0cmwpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYk1vbnRocGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWwnO1xuICAgIH0sXG4gICAgcmVxdWlyZTogWydedWliRGF0ZXBpY2tlcicsICd1aWJNb250aHBpY2tlciddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYk1vbnRocGlja2VyQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGRhdGVwaWNrZXJDdHJsID0gY3RybHNbMF0sXG4gICAgICAgIG1vbnRocGlja2VyQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBtb250aHBpY2tlckN0cmwuaW5pdChkYXRlcGlja2VyQ3RybCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliWWVhcnBpY2tlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWwnO1xuICAgIH0sXG4gICAgcmVxdWlyZTogWydedWliRGF0ZXBpY2tlcicsICd1aWJZZWFycGlja2VyJ10sXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnVWliWWVhcnBpY2tlckNvbnRyb2xsZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBjdHJsID0gY3RybHNbMF07XG4gICAgICBhbmd1bGFyLmV4dGVuZChjdHJsLCBjdHJsc1sxXSk7XG4gICAgICBjdHJsLnllYXJwaWNrZXJJbml0KCk7XG5cbiAgICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicsIFtdKVxuXG4vKipcbiAqIEEgc2V0IG9mIHV0aWxpdHkgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIHRoZSBET00uXG4gKiBJdCBpcyBtZWFudCB0byBiZSB1c2VkIHdoZXJlIHdlIG5lZWQgdG8gYWJzb2x1dGUtcG9zaXRpb24gZWxlbWVudHMgaW5cbiAqIHJlbGF0aW9uIHRvIGFub3RoZXIgZWxlbWVudCAodGhpcyBpcyB0aGUgY2FzZSBmb3IgdG9vbHRpcHMsIHBvcG92ZXJzLFxuICogdHlwZWFoZWFkIHN1Z2dlc3Rpb25zIGV0Yy4pLlxuICovXG4gIC5mYWN0b3J5KCckdWliUG9zaXRpb24nLCBbJyRkb2N1bWVudCcsICckd2luZG93JywgZnVuY3Rpb24oJGRvY3VtZW50LCAkd2luZG93KSB7XG4gICAgLyoqXG4gICAgICogVXNlZCBieSBzY3JvbGxiYXJXaWR0aCgpIGZ1bmN0aW9uIHRvIGNhY2hlIHNjcm9sbGJhcidzIHdpZHRoLlxuICAgICAqIERvIG5vdCBhY2Nlc3MgdGhpcyB2YXJpYWJsZSBkaXJlY3RseSwgdXNlIHNjcm9sbGJhcldpZHRoKCkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICB2YXIgU0NST0xMQkFSX1dJRFRIO1xuICAgIC8qKlxuICAgICAqIHNjcm9sbGJhciBvbiBib2R5IGFuZCBodG1sIGVsZW1lbnQgaW4gSUUgYW5kIEVkZ2Ugb3ZlcmxheVxuICAgICAqIGNvbnRlbnQgYW5kIHNob3VsZCBiZSBjb25zaWRlcmVkIDAgd2lkdGguXG4gICAgICovXG4gICAgdmFyIEJPRFlfU0NST0xMQkFSX1dJRFRIO1xuICAgIHZhciBPVkVSRkxPV19SRUdFWCA9IHtcbiAgICAgIG5vcm1hbDogLyhhdXRvfHNjcm9sbCkvLFxuICAgICAgaGlkZGVuOiAvKGF1dG98c2Nyb2xsfGhpZGRlbikvXG4gICAgfTtcbiAgICB2YXIgUExBQ0VNRU5UX1JFR0VYID0ge1xuICAgICAgYXV0bzogL1xccz9hdXRvP1xccz8vaSxcbiAgICAgIHByaW1hcnk6IC9eKHRvcHxib3R0b218bGVmdHxyaWdodCkkLyxcbiAgICAgIHNlY29uZGFyeTogL14odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0fGNlbnRlcikkLyxcbiAgICAgIHZlcnRpY2FsOiAvXih0b3B8Ym90dG9tKSQvXG4gICAgfTtcbiAgICB2YXIgQk9EWV9SRUdFWCA9IC8oSFRNTHxCT0RZKS87XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGEgcmF3IERPTSBlbGVtZW50IGZyb20gYSBqUXVlcnkvalFMaXRlIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtIC0gVGhlIGVsZW1lbnQgdG8gY29udmVydC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZWxlbWVudH0gQSBIVE1MIGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIGdldFJhd05vZGU6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgPyBlbGVtIDogZWxlbVswXSB8fCBlbGVtO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBhIHBhcnNlZCBudW1iZXIgZm9yIGEgc3R5bGUgcHJvcGVydHkuICBTdHJpcHNcbiAgICAgICAqIHVuaXRzIGFuZCBjYXN0cyBpbnZhbGlkIG51bWJlcnMgdG8gMC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgc3R5bGUgdmFsdWUgdG8gcGFyc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge251bWJlcn0gQSB2YWxpZCBudW1iZXIuXG4gICAgICAgKi9cbiAgICAgIHBhcnNlU3R5bGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IDA7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBjbG9zZXN0IHBvc2l0aW9uZWQgYW5jZXN0b3IuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBvZmZlc3QgcGFyZW50IGZvci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZWxlbWVudH0gVGhlIGNsb3Nlc3QgcG9zaXRpb25lZCBhbmNlc3Rvci5cbiAgICAgICAqL1xuICAgICAgb2Zmc2V0UGFyZW50OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTdGF0aWNQb3NpdGlvbmVkKGVsKSB7XG4gICAgICAgICAgcmV0dXJuICgkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLnBvc2l0aW9uIHx8ICdzdGF0aWMnKSA9PT0gJ3N0YXRpYyc7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudCAmJiBpc1N0YXRpY1Bvc2l0aW9uZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHRoZSBzY3JvbGxiYXIgd2lkdGgsIGNvbmNlcHQgZnJvbSBUV0JTIG1lYXN1cmVTY3JvbGxiYXIoKVxuICAgICAgICogZnVuY3Rpb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL2pzL21vZGFsLmpzXG4gICAgICAgKiBJbiBJRSBhbmQgRWRnZSwgc2NvbGxiYXIgb24gYm9keSBhbmQgaHRtbCBlbGVtZW50IG92ZXJsYXkgYW5kIHNob3VsZFxuICAgICAgICogcmV0dXJuIGEgd2lkdGggb2YgMC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgd2lkdGggb2YgdGhlIGJyb3dzZXIgc2NvbGxiYXIuXG4gICAgICAgKi9cbiAgICAgIHNjcm9sbGJhcldpZHRoOiBmdW5jdGlvbihpc0JvZHkpIHtcbiAgICAgICAgaWYgKGlzQm9keSkge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKEJPRFlfU0NST0xMQkFSX1dJRFRIKSkge1xuICAgICAgICAgICAgdmFyIGJvZHlFbGVtID0gJGRvY3VtZW50LmZpbmQoJ2JvZHknKTtcbiAgICAgICAgICAgIGJvZHlFbGVtLmFkZENsYXNzKCd1aWItcG9zaXRpb24tYm9keS1zY3JvbGxiYXItbWVhc3VyZScpO1xuICAgICAgICAgICAgQk9EWV9TQ1JPTExCQVJfV0lEVEggPSAkd2luZG93LmlubmVyV2lkdGggLSBib2R5RWxlbVswXS5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIEJPRFlfU0NST0xMQkFSX1dJRFRIID0gaXNGaW5pdGUoQk9EWV9TQ1JPTExCQVJfV0lEVEgpID8gQk9EWV9TQ1JPTExCQVJfV0lEVEggOiAwO1xuICAgICAgICAgICAgYm9keUVsZW0ucmVtb3ZlQ2xhc3MoJ3VpYi1wb3NpdGlvbi1ib2R5LXNjcm9sbGJhci1tZWFzdXJlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBCT0RZX1NDUk9MTEJBUl9XSURUSDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKFNDUk9MTEJBUl9XSURUSCkpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsRWxlbSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cInVpYi1wb3NpdGlvbi1zY3JvbGxiYXItbWVhc3VyZVwiPjwvZGl2PicpO1xuICAgICAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKHNjcm9sbEVsZW0pO1xuICAgICAgICAgIFNDUk9MTEJBUl9XSURUSCA9IHNjcm9sbEVsZW1bMF0ub2Zmc2V0V2lkdGggLSBzY3JvbGxFbGVtWzBdLmNsaWVudFdpZHRoO1xuICAgICAgICAgIFNDUk9MTEJBUl9XSURUSCA9IGlzRmluaXRlKFNDUk9MTEJBUl9XSURUSCkgPyBTQ1JPTExCQVJfV0lEVEggOiAwO1xuICAgICAgICAgIHNjcm9sbEVsZW0ucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU0NST0xMQkFSX1dJRFRIO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyB0aGUgcGFkZGluZyByZXF1aXJlZCBvbiBhbiBlbGVtZW50IHRvIHJlcGxhY2UgdGhlIHNjcm9sbGJhci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+KipzY3JvbGxiYXJXaWR0aCoqOiB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbGJhcjwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqd2lkdGhPdmVyZmxvdyoqOiB3aGV0aGVyIHRoZSB0aGUgd2lkdGggaXMgb3ZlcmZsb3dpbmc8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnJpZ2h0Kio6IHRoZSBhbW91bnQgb2YgcmlnaHQgcGFkZGluZyBvbiB0aGUgZWxlbWVudCBuZWVkZWQgdG8gcmVwbGFjZSB0aGUgc2Nyb2xsYmFyPC9saT5cbiAgICAgICAqICAgICA8bGk+KipyaWdodE9yaWdpbmFsKio6IHRoZSBhbW91bnQgb2YgcmlnaHQgcGFkZGluZyBjdXJyZW50bHkgb24gdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmhlaWdodE92ZXJmbG93Kio6IHdoZXRoZXIgdGhlIHRoZSBoZWlnaHQgaXMgb3ZlcmZsb3dpbmc8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmJvdHRvbSoqOiB0aGUgYW1vdW50IG9mIGJvdHRvbSBwYWRkaW5nIG9uIHRoZSBlbGVtZW50IG5lZWRlZCB0byByZXBsYWNlIHRoZSBzY3JvbGxiYXI8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmJvdHRvbU9yaWdpbmFsKio6IHRoZSBhbW91bnQgb2YgYm90dG9tIHBhZGRpbmcgY3VycmVudGx5IG9uIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgc2Nyb2xsYmFyUGFkZGluZzogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBlbGVtU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSB0aGlzLnBhcnNlU3R5bGUoZWxlbVN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICAgIHZhciBwYWRkaW5nQm90dG9tID0gdGhpcy5wYXJzZVN0eWxlKGVsZW1TdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgdmFyIHNjcm9sbFBhcmVudCA9IHRoaXMuc2Nyb2xsUGFyZW50KGVsZW0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gdGhpcy5zY3JvbGxiYXJXaWR0aChCT0RZX1JFR0VYLnRlc3Qoc2Nyb2xsUGFyZW50LnRhZ05hbWUpKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbGJhcldpZHRoOiBzY3JvbGxiYXJXaWR0aCxcbiAgICAgICAgICB3aWR0aE92ZXJmbG93OiBzY3JvbGxQYXJlbnQuc2Nyb2xsV2lkdGggPiBzY3JvbGxQYXJlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgcmlnaHQ6IHBhZGRpbmdSaWdodCArIHNjcm9sbGJhcldpZHRoLFxuICAgICAgICAgIG9yaWdpbmFsUmlnaHQ6IHBhZGRpbmdSaWdodCxcbiAgICAgICAgICBoZWlnaHRPdmVyZmxvdzogc2Nyb2xsUGFyZW50LnNjcm9sbEhlaWdodCA+IHNjcm9sbFBhcmVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgYm90dG9tOiBwYWRkaW5nQm90dG9tICsgc2Nyb2xsYmFyV2lkdGgsXG4gICAgICAgICAgb3JpZ2luYWxCb3R0b206IHBhZGRpbmdCb3R0b21cbiAgICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyB0byBzZWUgaWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBjaGVjay5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbmNsdWRlSGlkZGVuPWZhbHNlXSAtIFNob3VsZCBzY3JvbGwgc3R5bGUgb2YgJ2hpZGRlbicgYmUgY29uc2lkZXJlZCxcbiAgICAgICAqICAgZGVmYXVsdCBpcyBmYWxzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlLlxuICAgICAgICovXG4gICAgICBpc1Njcm9sbGFibGU6IGZ1bmN0aW9uKGVsZW0sIGluY2x1ZGVIaWRkZW4pIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgb3ZlcmZsb3dSZWdleCA9IGluY2x1ZGVIaWRkZW4gPyBPVkVSRkxPV19SRUdFWC5oaWRkZW4gOiBPVkVSRkxPV19SRUdFWC5ub3JtYWw7XG4gICAgICAgIHZhciBlbGVtU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIHJldHVybiBvdmVyZmxvd1JlZ2V4LnRlc3QoZWxlbVN0eWxlLm92ZXJmbG93ICsgZWxlbVN0eWxlLm92ZXJmbG93WSArIGVsZW1TdHlsZS5vdmVyZmxvd1gpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyB0aGUgY2xvc2VzdCBzY3JvbGxhYmxlIGFuY2VzdG9yLlxuICAgICAgICogQSBwb3J0IG9mIHRoZSBqUXVlcnkgVUkgc2Nyb2xsUGFyZW50IG1ldGhvZDpcbiAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LXVpL2Jsb2IvbWFzdGVyL3VpL3Njcm9sbC1wYXJlbnQuanNcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBmaW5kIHRoZSBzY3JvbGwgcGFyZW50IG9mLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVIaWRkZW49ZmFsc2VdIC0gU2hvdWxkIHNjcm9sbCBzdHlsZSBvZiAnaGlkZGVuJyBiZSBjb25zaWRlcmVkLFxuICAgICAgICogICBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVTZWxmPWZhbHNlXSAtIFNob3VsZCB0aGUgZWxlbWVudCBiZWluZyBwYXNzZWQgYmVcbiAgICAgICAqIGluY2x1ZGVkIGluIHRoZSBzY3JvbGxhYmxlIGxsb2t1cC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZWxlbWVudH0gQSBIVE1MIGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIHNjcm9sbFBhcmVudDogZnVuY3Rpb24oZWxlbSwgaW5jbHVkZUhpZGRlbiwgaW5jbHVkZVNlbGYpIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgb3ZlcmZsb3dSZWdleCA9IGluY2x1ZGVIaWRkZW4gPyBPVkVSRkxPV19SRUdFWC5oaWRkZW4gOiBPVkVSRkxPV19SRUdFWC5ub3JtYWw7XG4gICAgICAgIHZhciBkb2N1bWVudEVsID0gJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgaWYgKGluY2x1ZGVTZWxmICYmIG92ZXJmbG93UmVnZXgudGVzdChlbGVtU3R5bGUub3ZlcmZsb3cgKyBlbGVtU3R5bGUub3ZlcmZsb3dZICsgZWxlbVN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXhjbHVkZVN0YXRpYyA9IGVsZW1TdHlsZS5wb3NpdGlvbiA9PT0gJ2Fic29sdXRlJztcbiAgICAgICAgdmFyIHNjcm9sbFBhcmVudCA9IGVsZW0ucGFyZW50RWxlbWVudCB8fCBkb2N1bWVudEVsO1xuXG4gICAgICAgIGlmIChzY3JvbGxQYXJlbnQgPT09IGRvY3VtZW50RWwgfHwgZWxlbVN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIGRvY3VtZW50RWw7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoc2Nyb2xsUGFyZW50LnBhcmVudEVsZW1lbnQgJiYgc2Nyb2xsUGFyZW50ICE9PSBkb2N1bWVudEVsKSB7XG4gICAgICAgICAgdmFyIHNwU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2Nyb2xsUGFyZW50KTtcbiAgICAgICAgICBpZiAoZXhjbHVkZVN0YXRpYyAmJiBzcFN0eWxlLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgICAgICAgZXhjbHVkZVN0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXhjbHVkZVN0YXRpYyAmJiBvdmVyZmxvd1JlZ2V4LnRlc3Qoc3BTdHlsZS5vdmVyZmxvdyArIHNwU3R5bGUub3ZlcmZsb3dZICsgc3BTdHlsZS5vdmVyZmxvd1gpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nyb2xsUGFyZW50ID0gc2Nyb2xsUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2Nyb2xsUGFyZW50O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyByZWFkLW9ubHkgZXF1aXZhbGVudCBvZiBqUXVlcnkncyBwb3NpdGlvbiBmdW5jdGlvbjpcbiAgICAgICAqIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wb3NpdGlvbi8gLSBkaXN0YW5jZSB0byBjbG9zZXN0IHBvc2l0aW9uZWRcbiAgICAgICAqIGFuY2VzdG9yLiAgRG9lcyBub3QgYWNjb3VudCBmb3IgbWFyZ2lucyBieSBkZWZhdWx0IGxpa2UgalF1ZXJ5IHBvc2l0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbSAtIFRoZSBlbGVtZW50IHRvIGNhY2x1bGF0ZSB0aGUgcG9zaXRpb24gb24uXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW5jbHVkZU1hcmdpbnM9ZmFsc2VdIC0gU2hvdWxkIG1hcmdpbnMgYmUgYWNjb3VudGVkXG4gICAgICAgKiBmb3IsIGRlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPioqd2lkdGgqKjogdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+KipoZWlnaHQqKjogdGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqdG9wKio6IGRpc3RhbmNlIHRvIHRvcCBlZGdlIG9mIG9mZnNldCBwYXJlbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmxlZnQqKjogZGlzdGFuY2UgdG8gbGVmdCBlZGdlIG9mIG9mZnNldCBwYXJlbnQ8L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBwb3NpdGlvbjogZnVuY3Rpb24oZWxlbSwgaW5jbHVkZU1hZ2lucykge1xuICAgICAgICBlbGVtID0gdGhpcy5nZXRSYXdOb2RlKGVsZW0pO1xuXG4gICAgICAgIHZhciBlbGVtT2Zmc2V0ID0gdGhpcy5vZmZzZXQoZWxlbSk7XG4gICAgICAgIGlmIChpbmNsdWRlTWFnaW5zKSB7XG4gICAgICAgICAgdmFyIGVsZW1TdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgICBlbGVtT2Zmc2V0LnRvcCAtPSB0aGlzLnBhcnNlU3R5bGUoZWxlbVN0eWxlLm1hcmdpblRvcCk7XG4gICAgICAgICAgZWxlbU9mZnNldC5sZWZ0IC09IHRoaXMucGFyc2VTdHlsZShlbGVtU3R5bGUubWFyZ2luTGVmdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KGVsZW0pO1xuICAgICAgICB2YXIgcGFyZW50T2Zmc2V0ID0ge3RvcDogMCwgbGVmdDogMH07XG5cbiAgICAgICAgaWYgKHBhcmVudCAhPT0gJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIHBhcmVudE9mZnNldCA9IHRoaXMub2Zmc2V0KHBhcmVudCk7XG4gICAgICAgICAgcGFyZW50T2Zmc2V0LnRvcCArPSBwYXJlbnQuY2xpZW50VG9wIC0gcGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBwYXJlbnQuY2xpZW50TGVmdCAtIHBhcmVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChhbmd1bGFyLmlzTnVtYmVyKGVsZW1PZmZzZXQud2lkdGgpID8gZWxlbU9mZnNldC53aWR0aCA6IGVsZW0ub2Zmc2V0V2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChhbmd1bGFyLmlzTnVtYmVyKGVsZW1PZmZzZXQuaGVpZ2h0KSA/IGVsZW1PZmZzZXQuaGVpZ2h0IDogZWxlbS5vZmZzZXRIZWlnaHQpLFxuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChlbGVtT2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQoZWxlbU9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQpXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIG9mZnNldCBmdW5jdGlvbjpcbiAgICAgICAqIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmZzZXQvIC0gZGlzdGFuY2UgdG8gdmlld3BvcnQuICBEb2VzXG4gICAgICAgKiBub3QgYWNjb3VudCBmb3IgYm9yZGVycywgbWFyZ2lucywgb3IgcGFkZGluZyBvbiB0aGUgYm9keVxuICAgICAgICogZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCBvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+Kip3aWR0aCoqOiB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmhlaWdodCoqOiB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50PC9saT5cbiAgICAgICAqICAgICA8bGk+Kip0b3AqKjogZGlzdGFuY2UgdG8gdG9wIGVkZ2Ugb2Ygdmlld3BvcnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnJpZ2h0Kio6IGRpc3RhbmNlIHRvIGJvdHRvbSBlZGdlIG9mIHZpZXdwb3J0PC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqL1xuICAgICAgb2Zmc2V0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzLmdldFJhd05vZGUoZWxlbSk7XG5cbiAgICAgICAgdmFyIGVsZW1CQ1IgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbUJDUi53aWR0aCkgPyBlbGVtQkNSLndpZHRoIDogZWxlbS5vZmZzZXRXaWR0aCksXG4gICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoZWxlbUJDUi5oZWlnaHQpID8gZWxlbUJDUi5oZWlnaHQgOiBlbGVtLm9mZnNldEhlaWdodCksXG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKGVsZW1CQ1IudG9wICsgKCR3aW5kb3cucGFnZVlPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApKSxcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKGVsZW1CQ1IubGVmdCArICgkd2luZG93LnBhZ2VYT2Zmc2V0IHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCkpXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIG9mZnNldCBkaXN0YW5jZSB0byB0aGUgY2xvc2VzdCBzY3JvbGxhYmxlIGFuY2VzdG9yXG4gICAgICAgKiBvciB2aWV3cG9ydC4gIEFjY291bnRzIGZvciBib3JkZXIgYW5kIHNjcm9sbGJhciB3aWR0aC5cbiAgICAgICAqXG4gICAgICAgKiBSaWdodCBhbmQgYm90dG9tIGRpbWVuc2lvbnMgcmVwcmVzZW50IHRoZSBkaXN0YW5jZSB0byB0aGVcbiAgICAgICAqIHJlc3BlY3RpdmUgZWRnZSBvZiB0aGUgdmlld3BvcnQgZWxlbWVudC4gIElmIHRoZSBlbGVtZW50XG4gICAgICAgKiBlZGdlIGV4dGVuZHMgYmV5b25kIHRoZSB2aWV3cG9ydCwgYSBuZWdhdGl2ZSB2YWx1ZSB3aWxsIGJlXG4gICAgICAgKiByZXBvcnRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHZpZXdwb3J0IG9mZnNldCBmb3IuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbdXNlRG9jdW1lbnQ9ZmFsc2VdIC0gU2hvdWxkIHRoZSB2aWV3cG9ydCBiZSB0aGUgZG9jdW1lbnQgZWxlbWVudCBpbnN0ZWFkXG4gICAgICAgKiBvZiB0aGUgZmlyc3Qgc2Nyb2xsYWJsZSBlbGVtZW50LCBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2luY2x1ZGVQYWRkaW5nPXRydWVdIC0gU2hvdWxkIHRoZSBwYWRkaW5nIG9uIHRoZSBvZmZzZXQgcGFyZW50IGVsZW1lbnRcbiAgICAgICAqIGJlIGFjY291bnRlZCBmb3IsIGRlZmF1bHQgaXMgdHJ1ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKiAgIDx1bD5cbiAgICAgICAqICAgICA8bGk+Kip0b3AqKjogZGlzdGFuY2UgdG8gdGhlIHRvcCBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgICAgPGxpPioqYm90dG9tKio6IGRpc3RhbmNlIHRvIHRoZSBib3R0b20gY29udGVudCBlZGdlIG9mIHZpZXdwb3J0IGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKmxlZnQqKjogZGlzdGFuY2UgdG8gdGhlIGxlZnQgY29udGVudCBlZGdlIG9mIHZpZXdwb3J0IGVsZW1lbnQ8L2xpPlxuICAgICAgICogICAgIDxsaT4qKnJpZ2h0Kio6IGRpc3RhbmNlIHRvIHRoZSByaWdodCBjb250ZW50IGVkZ2Ugb2Ygdmlld3BvcnQgZWxlbWVudDwvbGk+XG4gICAgICAgKiAgIDwvdWw+XG4gICAgICAgKi9cbiAgICAgIHZpZXdwb3J0T2Zmc2V0OiBmdW5jdGlvbihlbGVtLCB1c2VEb2N1bWVudCwgaW5jbHVkZVBhZGRpbmcpIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcbiAgICAgICAgaW5jbHVkZVBhZGRpbmcgPSBpbmNsdWRlUGFkZGluZyAhPT0gZmFsc2UgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgdmFyIGVsZW1CQ1IgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgb2Zmc2V0QkNSID0ge3RvcDogMCwgbGVmdDogMCwgYm90dG9tOiAwLCByaWdodDogMH07XG5cbiAgICAgICAgdmFyIG9mZnNldFBhcmVudCA9IHVzZURvY3VtZW50ID8gJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudCA6IHRoaXMuc2Nyb2xsUGFyZW50KGVsZW0pO1xuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50QkNSID0gb2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIG9mZnNldEJDUi50b3AgPSBvZmZzZXRQYXJlbnRCQ1IudG9wICsgb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICAgICAgb2Zmc2V0QkNSLmxlZnQgPSBvZmZzZXRQYXJlbnRCQ1IubGVmdCArIG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgICBpZiAob2Zmc2V0UGFyZW50ID09PSAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgb2Zmc2V0QkNSLnRvcCArPSAkd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgIG9mZnNldEJDUi5sZWZ0ICs9ICR3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0QkNSLmJvdHRvbSA9IG9mZnNldEJDUi50b3AgKyBvZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICBvZmZzZXRCQ1IucmlnaHQgPSBvZmZzZXRCQ1IubGVmdCArIG9mZnNldFBhcmVudC5jbGllbnRXaWR0aDtcblxuICAgICAgICBpZiAoaW5jbHVkZVBhZGRpbmcpIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50U3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KTtcbiAgICAgICAgICBvZmZzZXRCQ1IudG9wICs9IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nVG9wKTtcbiAgICAgICAgICBvZmZzZXRCQ1IuYm90dG9tIC09IHRoaXMucGFyc2VTdHlsZShvZmZzZXRQYXJlbnRTdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgICBvZmZzZXRCQ1IubGVmdCArPSB0aGlzLnBhcnNlU3R5bGUob2Zmc2V0UGFyZW50U3R5bGUucGFkZGluZ0xlZnQpO1xuICAgICAgICAgIG9mZnNldEJDUi5yaWdodCAtPSB0aGlzLnBhcnNlU3R5bGUob2Zmc2V0UGFyZW50U3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKGVsZW1CQ1IudG9wIC0gb2Zmc2V0QkNSLnRvcCksXG4gICAgICAgICAgYm90dG9tOiBNYXRoLnJvdW5kKG9mZnNldEJDUi5ib3R0b20gLSBlbGVtQkNSLmJvdHRvbSksXG4gICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChlbGVtQkNSLmxlZnQgLSBvZmZzZXRCQ1IubGVmdCksXG4gICAgICAgICAgcmlnaHQ6IE1hdGgucm91bmQob2Zmc2V0QkNSLnJpZ2h0IC0gZWxlbUJDUi5yaWdodClcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYW4gYXJyYXkgb2YgcGxhY2VtZW50IHZhbHVlcyBwYXJzZWQgZnJvbSBhIHBsYWNlbWVudCBzdHJpbmcuXG4gICAgICAgKiBBbG9uZyB3aXRoIHRoZSAnYXV0bycgaW5kaWNhdG9yLCBzdXBwb3J0ZWQgcGxhY2VtZW50IHN0cmluZ3MgYXJlOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPnRvcDogZWxlbWVudCBvbiB0b3AsIGhvcml6b250YWxseSBjZW50ZXJlZCBvbiBob3N0IGVsZW1lbnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLWxlZnQ6IGVsZW1lbnQgb24gdG9wLCBsZWZ0IGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBsZWZ0IGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+dG9wLXJpZ2h0OiBlbGVtZW50IG9uIHRvcCwgbGVyaWdodGZ0IGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCByaWdodCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmJvdHRvbTogZWxlbWVudCBvbiBib3R0b20sIGhvcml6b250YWxseSBjZW50ZXJlZCBvbiBob3N0IGVsZW1lbnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tLWxlZnQ6IGVsZW1lbnQgb24gYm90dG9tLCBsZWZ0IGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCBsZWZ0IGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tLXJpZ2h0OiBlbGVtZW50IG9uIGJvdHRvbSwgcmlnaHQgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHJpZ2h0IGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdDogZWxlbWVudCBvbiBsZWZ0LCB2ZXJ0aWNhbGx5IGNlbnRlcmVkIG9uIGhvc3QgZWxlbWVudC48L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0LXRvcDogZWxlbWVudCBvbiBsZWZ0LCB0b3AgZWRnZSBhbGlnbmVkIHdpdGggaG9zdCBlbGVtZW50IHRvcCBlZGdlLjwvbGk+XG4gICAgICAgKiAgICAgPGxpPmxlZnQtYm90dG9tOiBlbGVtZW50IG9uIGxlZnQsIGJvdHRvbSBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgYm90dG9tIGVkZ2UuPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQ6IGVsZW1lbnQgb24gcmlnaHQsIHZlcnRpY2FsbHkgY2VudGVyZWQgb24gaG9zdCBlbGVtZW50LjwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0LXRvcDogZWxlbWVudCBvbiByaWdodCwgdG9wIGVkZ2UgYWxpZ25lZCB3aXRoIGhvc3QgZWxlbWVudCB0b3AgZWRnZS48L2xpPlxuICAgICAgICogICAgIDxsaT5yaWdodC1ib3R0b206IGVsZW1lbnQgb24gcmlnaHQsIGJvdHRvbSBlZGdlIGFsaWduZWQgd2l0aCBob3N0IGVsZW1lbnQgYm90dG9tIGVkZ2UuPC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqIEEgcGxhY2VtZW50IHN0cmluZyB3aXRoIGFuICdhdXRvJyBpbmRpY2F0b3IgaXMgZXhwZWN0ZWQgdG8gYmVcbiAgICAgICAqIHNwYWNlIHNlcGFyYXRlZCBmcm9tIHRoZSBwbGFjZW1lbnQsIGkuZTogJ2F1dG8gYm90dG9tLWxlZnQnICBJZlxuICAgICAgICogdGhlIHByaW1hcnkgYW5kIHNlY29uZGFyeSBwbGFjZW1lbnQgdmFsdWVzIGRvIG5vdCBtYXRjaCAndG9wLFxuICAgICAgICogYm90dG9tLCBsZWZ0LCByaWdodCcgdGhlbiAndG9wJyB3aWxsIGJlIHRoZSBwcmltYXJ5IHBsYWNlbWVudCBhbmRcbiAgICAgICAqICdjZW50ZXInIHdpbGwgYmUgdGhlIHNlY29uZGFyeSBwbGFjZW1lbnQuICBJZiAnYXV0bycgaXMgcGFzc2VkLCB0cnVlXG4gICAgICAgKiB3aWxsIGJlIHJldHVybmVkIGFzIHRoZSAzcmQgdmFsdWUgb2YgdGhlIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGFjZW1lbnQgLSBUaGUgcGxhY2VtZW50IHN0cmluZyB0byBwYXJzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7YXJyYXl9IEFuIGFycmF5IHdpdGggdGhlIGZvbGxvd2luZyB2YWx1ZXNcbiAgICAgICAqIDx1bD5cbiAgICAgICAqICAgPGxpPioqWzBdKio6IFRoZSBwcmltYXJ5IHBsYWNlbWVudC48L2xpPlxuICAgICAgICogICA8bGk+KipbMV0qKjogVGhlIHNlY29uZGFyeSBwbGFjZW1lbnQuPC9saT5cbiAgICAgICAqICAgPGxpPioqWzJdKio6IElmIGF1dG8gaXMgcGFzc2VkOiB0cnVlLCBlbHNlIHVuZGVmaW5lZC48L2xpPlxuICAgICAgICogPC91bD5cbiAgICAgICAqL1xuICAgICAgcGFyc2VQbGFjZW1lbnQ6IGZ1bmN0aW9uKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgYXV0b1BsYWNlID0gUExBQ0VNRU5UX1JFR0VYLmF1dG8udGVzdChwbGFjZW1lbnQpO1xuICAgICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnJlcGxhY2UoUExBQ0VNRU5UX1JFR0VYLmF1dG8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpO1xuXG4gICAgICAgIHBsYWNlbWVudFswXSA9IHBsYWNlbWVudFswXSB8fCAndG9wJztcbiAgICAgICAgaWYgKCFQTEFDRU1FTlRfUkVHRVgucHJpbWFyeS50ZXN0KHBsYWNlbWVudFswXSkpIHtcbiAgICAgICAgICBwbGFjZW1lbnRbMF0gPSAndG9wJztcbiAgICAgICAgfVxuXG4gICAgICAgIHBsYWNlbWVudFsxXSA9IHBsYWNlbWVudFsxXSB8fCAnY2VudGVyJztcbiAgICAgICAgaWYgKCFQTEFDRU1FTlRfUkVHRVguc2Vjb25kYXJ5LnRlc3QocGxhY2VtZW50WzFdKSkge1xuICAgICAgICAgIHBsYWNlbWVudFsxXSA9ICdjZW50ZXInO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICAgIHBsYWNlbWVudFsyXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxhY2VtZW50WzJdID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhY2VtZW50O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQcm92aWRlcyBjb29yZGluYXRlcyBmb3IgYW4gZWxlbWVudCB0byBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvXG4gICAgICAgKiBhbm90aGVyIGVsZW1lbnQuICBQYXNzaW5nICdhdXRvJyBhcyBwYXJ0IG9mIHRoZSBwbGFjZW1lbnQgcGFyYW1ldGVyXG4gICAgICAgKiB3aWxsIGVuYWJsZSBzbWFydCBwbGFjZW1lbnQgLSB3aGVyZSB0aGUgZWxlbWVudCBmaXRzLiBpLmU6XG4gICAgICAgKiAnYXV0byBsZWZ0LXRvcCcgd2lsbCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgZW5vdWdoIHNwYWNlIHRvIHRoZSBsZWZ0XG4gICAgICAgKiBvZiB0aGUgaG9zdEVsZW0gdG8gZml0IHRoZSB0YXJnZXRFbGVtLCBpZiBub3QgcGxhY2UgcmlnaHQgKHNhbWUgZm9yIHNlY29uZGFyeVxuICAgICAgICogdG9wIHBsYWNlbWVudCkuICBBdmFpbGFibGUgc3BhY2UgaXMgY2FsY3VsYXRlZCB1c2luZyB0aGUgdmlld3BvcnRPZmZzZXRcbiAgICAgICAqIGZ1bmN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gaG9zdEVsZW0gLSBUaGUgZWxlbWVudCB0byBwb3NpdGlvbiBhZ2FpbnN0LlxuICAgICAgICogQHBhcmFtIHtlbGVtZW50fSB0YXJnZXRFbGVtIC0gVGhlIGVsZW1lbnQgdG8gcG9zaXRpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IFtwbGFjZW1lbnQ9dG9wXSAtIFRoZSBwbGFjZW1lbnQgZm9yIHRoZSB0YXJnZXRFbGVtLFxuICAgICAgICogICBkZWZhdWx0IGlzICd0b3AnLiAnY2VudGVyJyBpcyBhc3N1bWVkIGFzIHNlY29uZGFyeSBwbGFjZW1lbnQgZm9yXG4gICAgICAgKiAgICd0b3AnLCAnbGVmdCcsICdyaWdodCcsIGFuZCAnYm90dG9tJyBwbGFjZW1lbnRzLiAgQXZhaWxhYmxlIHBsYWNlbWVudHMgYXJlOlxuICAgICAgICogICA8dWw+XG4gICAgICAgKiAgICAgPGxpPnRvcDwvbGk+XG4gICAgICAgKiAgICAgPGxpPnRvcC1yaWdodDwvbGk+XG4gICAgICAgKiAgICAgPGxpPnRvcC1sZWZ0PC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tPC9saT5cbiAgICAgICAqICAgICA8bGk+Ym90dG9tLWxlZnQ8L2xpPlxuICAgICAgICogICAgIDxsaT5ib3R0b20tcmlnaHQ8L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0PC9saT5cbiAgICAgICAqICAgICA8bGk+bGVmdC10b3A8L2xpPlxuICAgICAgICogICAgIDxsaT5sZWZ0LWJvdHRvbTwvbGk+XG4gICAgICAgKiAgICAgPGxpPnJpZ2h0PC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQtdG9wPC9saT5cbiAgICAgICAqICAgICA8bGk+cmlnaHQtYm90dG9tPC9saT5cbiAgICAgICAqICAgPC91bD5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFthcHBlbmRUb0JvZHk9ZmFsc2VdIC0gU2hvdWxkIHRoZSB0b3AgYW5kIGxlZnQgdmFsdWVzIHJldHVybmVkXG4gICAgICAgKiAgIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgYm9keSBlbGVtZW50LCBkZWZhdWx0IGlzIGZhbHNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqICAgPHVsPlxuICAgICAgICogICAgIDxsaT4qKnRvcCoqOiBWYWx1ZSBmb3IgdGFyZ2V0RWxlbSB0b3AuPC9saT5cbiAgICAgICAqICAgICA8bGk+KipsZWZ0Kio6IFZhbHVlIGZvciB0YXJnZXRFbGVtIGxlZnQuPC9saT5cbiAgICAgICAqICAgICA8bGk+KipwbGFjZW1lbnQqKjogVGhlIHJlc29sdmVkIHBsYWNlbWVudC48L2xpPlxuICAgICAgICogICA8L3VsPlxuICAgICAgICovXG4gICAgICBwb3NpdGlvbkVsZW1lbnRzOiBmdW5jdGlvbihob3N0RWxlbSwgdGFyZ2V0RWxlbSwgcGxhY2VtZW50LCBhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgaG9zdEVsZW0gPSB0aGlzLmdldFJhd05vZGUoaG9zdEVsZW0pO1xuICAgICAgICB0YXJnZXRFbGVtID0gdGhpcy5nZXRSYXdOb2RlKHRhcmdldEVsZW0pO1xuXG4gICAgICAgIC8vIG5lZWQgdG8gcmVhZCBmcm9tIHByb3AgdG8gc3VwcG9ydCB0ZXN0cy5cbiAgICAgICAgdmFyIHRhcmdldFdpZHRoID0gYW5ndWxhci5pc0RlZmluZWQodGFyZ2V0RWxlbS5vZmZzZXRXaWR0aCkgPyB0YXJnZXRFbGVtLm9mZnNldFdpZHRoIDogdGFyZ2V0RWxlbS5wcm9wKCdvZmZzZXRXaWR0aCcpO1xuICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gYW5ndWxhci5pc0RlZmluZWQodGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQpID8gdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQgOiB0YXJnZXRFbGVtLnByb3AoJ29mZnNldEhlaWdodCcpO1xuXG4gICAgICAgIHBsYWNlbWVudCA9IHRoaXMucGFyc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgICAgICB2YXIgaG9zdEVsZW1Qb3MgPSBhcHBlbmRUb0JvZHkgPyB0aGlzLm9mZnNldChob3N0RWxlbSkgOiB0aGlzLnBvc2l0aW9uKGhvc3RFbGVtKTtcbiAgICAgICAgdmFyIHRhcmdldEVsZW1Qb3MgPSB7dG9wOiAwLCBsZWZ0OiAwLCBwbGFjZW1lbnQ6ICcnfTtcblxuICAgICAgICBpZiAocGxhY2VtZW50WzJdKSB7XG4gICAgICAgICAgdmFyIHZpZXdwb3J0T2Zmc2V0ID0gdGhpcy52aWV3cG9ydE9mZnNldChob3N0RWxlbSwgYXBwZW5kVG9Cb2R5KTtcblxuICAgICAgICAgIHZhciB0YXJnZXRFbGVtU3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxlbSk7XG4gICAgICAgICAgdmFyIGFkanVzdGVkU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB0YXJnZXRXaWR0aCArIE1hdGgucm91bmQoTWF0aC5hYnModGhpcy5wYXJzZVN0eWxlKHRhcmdldEVsZW1TdHlsZS5tYXJnaW5MZWZ0KSArIHRoaXMucGFyc2VTdHlsZSh0YXJnZXRFbGVtU3R5bGUubWFyZ2luUmlnaHQpKSksXG4gICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodCArIE1hdGgucm91bmQoTWF0aC5hYnModGhpcy5wYXJzZVN0eWxlKHRhcmdldEVsZW1TdHlsZS5tYXJnaW5Ub3ApICsgdGhpcy5wYXJzZVN0eWxlKHRhcmdldEVsZW1TdHlsZS5tYXJnaW5Cb3R0b20pKSlcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcGxhY2VtZW50WzBdID0gcGxhY2VtZW50WzBdID09PSAndG9wJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQudG9wICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQuYm90dG9tID8gJ2JvdHRvbScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFswXSA9PT0gJ2JvdHRvbScgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCA+IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LnRvcCA/ICd0b3AnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMF0gPT09ICdsZWZ0JyAmJiBhZGp1c3RlZFNpemUud2lkdGggPiB2aWV3cG9ydE9mZnNldC5sZWZ0ICYmIGFkanVzdGVkU2l6ZS53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5yaWdodCA/ICdyaWdodCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFswXSA9PT0gJ3JpZ2h0JyAmJiBhZGp1c3RlZFNpemUud2lkdGggPiB2aWV3cG9ydE9mZnNldC5yaWdodCAmJiBhZGp1c3RlZFNpemUud2lkdGggPD0gdmlld3BvcnRPZmZzZXQubGVmdCA/ICdsZWZ0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50WzBdO1xuXG4gICAgICAgICAgcGxhY2VtZW50WzFdID0gcGxhY2VtZW50WzFdID09PSAndG9wJyAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQuYm90dG9tICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQudG9wID8gJ2JvdHRvbScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudFsxXSA9PT0gJ2JvdHRvbScgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA+IHZpZXdwb3J0T2Zmc2V0LnRvcCAmJiBhZGp1c3RlZFNpemUuaGVpZ2h0IC0gaG9zdEVsZW1Qb3MuaGVpZ2h0IDw9IHZpZXdwb3J0T2Zmc2V0LmJvdHRvbSA/ICd0b3AnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPT09ICdsZWZ0JyAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LmxlZnQgPyAncmlnaHQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPT09ICdyaWdodCcgJiYgYWRqdXN0ZWRTaXplLndpZHRoIC0gaG9zdEVsZW1Qb3Mud2lkdGggPiB2aWV3cG9ydE9mZnNldC5sZWZ0ICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ID8gJ2xlZnQnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV07XG5cbiAgICAgICAgICBpZiAocGxhY2VtZW50WzFdID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgaWYgKFBMQUNFTUVOVF9SRUdFWC52ZXJ0aWNhbC50ZXN0KHBsYWNlbWVudFswXSkpIHtcbiAgICAgICAgICAgICAgdmFyIHhPdmVyZmxvdyA9IGhvc3RFbGVtUG9zLndpZHRoIC8gMiAtIHRhcmdldFdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0T2Zmc2V0LmxlZnQgKyB4T3ZlcmZsb3cgPCAwICYmIGFkanVzdGVkU2l6ZS53aWR0aCAtIGhvc3RFbGVtUG9zLndpZHRoIDw9IHZpZXdwb3J0T2Zmc2V0LnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID0gJ2xlZnQnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0T2Zmc2V0LnJpZ2h0ICsgeE92ZXJmbG93IDwgMCAmJiBhZGp1c3RlZFNpemUud2lkdGggLSBob3N0RWxlbVBvcy53aWR0aCA8PSB2aWV3cG9ydE9mZnNldC5sZWZ0KSB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHlPdmVyZmxvdyA9IGhvc3RFbGVtUG9zLmhlaWdodCAvIDIgLSBhZGp1c3RlZFNpemUuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgaWYgKHZpZXdwb3J0T2Zmc2V0LnRvcCArIHlPdmVyZmxvdyA8IDAgJiYgYWRqdXN0ZWRTaXplLmhlaWdodCAtIGhvc3RFbGVtUG9zLmhlaWdodCA8PSB2aWV3cG9ydE9mZnNldC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRbMV0gPSAndG9wJztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aWV3cG9ydE9mZnNldC5ib3R0b20gKyB5T3ZlcmZsb3cgPCAwICYmIGFkanVzdGVkU2l6ZS5oZWlnaHQgLSBob3N0RWxlbVBvcy5oZWlnaHQgPD0gdmlld3BvcnRPZmZzZXQudG9wKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50WzFdID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudFswXSkge1xuICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IGhvc3RFbGVtUG9zLnRvcCAtIHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IGhvc3RFbGVtUG9zLnRvcCArIGhvc3RFbGVtUG9zLmhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCAtIHRhcmdldFdpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdCArIGhvc3RFbGVtUG9zLndpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudFsxXSkge1xuICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IGhvc3RFbGVtUG9zLnRvcDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IGhvc3RFbGVtUG9zLnRvcCArIGhvc3RFbGVtUG9zLmhlaWdodCAtIHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxlbVBvcy5sZWZ0ID0gaG9zdEVsZW1Qb3MubGVmdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IGhvc3RFbGVtUG9zLmxlZnQgKyBob3N0RWxlbVBvcy53aWR0aCAtIHRhcmdldFdpZHRoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgIGlmIChQTEFDRU1FTlRfUkVHRVgudmVydGljYWwudGVzdChwbGFjZW1lbnRbMF0pKSB7XG4gICAgICAgICAgICAgIHRhcmdldEVsZW1Qb3MubGVmdCA9IGhvc3RFbGVtUG9zLmxlZnQgKyBob3N0RWxlbVBvcy53aWR0aCAvIDIgLSB0YXJnZXRXaWR0aCAvIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IGhvc3RFbGVtUG9zLnRvcCArIGhvc3RFbGVtUG9zLmhlaWdodCAvIDIgLSB0YXJnZXRIZWlnaHQgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRFbGVtUG9zLnRvcCA9IE1hdGgucm91bmQodGFyZ2V0RWxlbVBvcy50b3ApO1xuICAgICAgICB0YXJnZXRFbGVtUG9zLmxlZnQgPSBNYXRoLnJvdW5kKHRhcmdldEVsZW1Qb3MubGVmdCk7XG4gICAgICAgIHRhcmdldEVsZW1Qb3MucGxhY2VtZW50ID0gcGxhY2VtZW50WzFdID09PSAnY2VudGVyJyA/IHBsYWNlbWVudFswXSA6IHBsYWNlbWVudFswXSArICctJyArIHBsYWNlbWVudFsxXTtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0RWxlbVBvcztcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogUHJvdmlkZXMgYSB3YXkgdG8gYWRqdXN0IHRoZSB0b3AgcG9zaXRpb25pbmcgYWZ0ZXIgZmlyc3RcbiAgICAgICAqIHJlbmRlciB0byBjb3JyZWN0bHkgYWxpZ24gZWxlbWVudCB0byB0b3AgYWZ0ZXIgY29udGVudFxuICAgICAgICogcmVuZGVyaW5nIGNhdXNlcyByZXNpemVkIGVsZW1lbnQgaGVpZ2h0XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHthcnJheX0gcGxhY2VtZW50Q2xhc3NlcyAtIFRoZSBhcnJheSBvZiBzdHJpbmdzIG9mIGNsYXNzZXNcbiAgICAgICAqIGVsZW1lbnQgc2hvdWxkIGhhdmUuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGFpbmVyUG9zaXRpb24gLSBUaGUgb2JqZWN0IHdpdGggY29udGFpbmVyXG4gICAgICAgKiBwb3NpdGlvbiBpbmZvcm1hdGlvblxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluaXRpYWxIZWlnaHQgLSBUaGUgaW5pdGlhbCBoZWlnaHQgZm9yIHRoZSBlbGVtLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRIZWlnaHQgLSBUaGUgY3VycmVudCBoZWlnaHQgZm9yIHRoZSBlbGVtLlxuICAgICAgICovXG4gICAgICBhZGp1c3RUb3A6IGZ1bmN0aW9uKHBsYWNlbWVudENsYXNzZXMsIGNvbnRhaW5lclBvc2l0aW9uLCBpbml0aWFsSGVpZ2h0LCBjdXJyZW50SGVpZ2h0KSB7XG4gICAgICAgIGlmIChwbGFjZW1lbnRDbGFzc2VzLmluZGV4T2YoJ3RvcCcpICE9PSAtMSAmJiBpbml0aWFsSGVpZ2h0ICE9PSBjdXJyZW50SGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogY29udGFpbmVyUG9zaXRpb24udG9wIC0gY3VycmVudEhlaWdodCArICdweCdcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGEgd2F5IGZvciBwb3NpdGlvbmluZyB0b29sdGlwICYgZHJvcGRvd25cbiAgICAgICAqIGFycm93cyB3aGVuIHVzaW5nIHBsYWNlbWVudCBvcHRpb25zIGJleW9uZCB0aGUgc3RhbmRhcmRcbiAgICAgICAqIGxlZnQsIHJpZ2h0LCB0b3AsIG9yIGJvdHRvbS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW0gLSBUaGUgdG9vbHRpcC9kcm9wZG93biBlbGVtZW50LlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlbWVudCAtIFRoZSBwbGFjZW1lbnQgZm9yIHRoZSBlbGVtLlxuICAgICAgICovXG4gICAgICBwb3NpdGlvbkFycm93OiBmdW5jdGlvbihlbGVtLCBwbGFjZW1lbnQpIHtcbiAgICAgICAgZWxlbSA9IHRoaXMuZ2V0UmF3Tm9kZShlbGVtKTtcblxuICAgICAgICB2YXIgaW5uZXJFbGVtID0gZWxlbS5xdWVyeVNlbGVjdG9yKCcudG9vbHRpcC1pbm5lciwgLnBvcG92ZXItaW5uZXInKTtcbiAgICAgICAgaWYgKCFpbm5lckVsZW0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNUb29sdGlwID0gYW5ndWxhci5lbGVtZW50KGlubmVyRWxlbSkuaGFzQ2xhc3MoJ3Rvb2x0aXAtaW5uZXInKTtcblxuICAgICAgICB2YXIgYXJyb3dFbGVtID0gaXNUb29sdGlwID8gZWxlbS5xdWVyeVNlbGVjdG9yKCcudG9vbHRpcC1hcnJvdycpIDogZWxlbS5xdWVyeVNlbGVjdG9yKCcuYXJyb3cnKTtcbiAgICAgICAgaWYgKCFhcnJvd0VsZW0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXJyb3dDc3MgPSB7XG4gICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgIGxlZnQ6ICcnLFxuICAgICAgICAgIHJpZ2h0OiAnJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHBsYWNlbWVudCA9IHRoaXMucGFyc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgICAgICAgaWYgKHBsYWNlbWVudFsxXSA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAvLyBubyBhZGp1c3RtZW50IG5lY2Vzc2FyeSAtIGp1c3QgcmVzZXQgc3R5bGVzXG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KGFycm93RWxlbSkuY3NzKGFycm93Q3NzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm9yZGVyUHJvcCA9ICdib3JkZXItJyArIHBsYWNlbWVudFswXSArICctd2lkdGgnO1xuICAgICAgICB2YXIgYm9yZGVyV2lkdGggPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoYXJyb3dFbGVtKVtib3JkZXJQcm9wXTtcblxuICAgICAgICB2YXIgYm9yZGVyUmFkaXVzUHJvcCA9ICdib3JkZXItJztcbiAgICAgICAgaWYgKFBMQUNFTUVOVF9SRUdFWC52ZXJ0aWNhbC50ZXN0KHBsYWNlbWVudFswXSkpIHtcbiAgICAgICAgICBib3JkZXJSYWRpdXNQcm9wICs9IHBsYWNlbWVudFswXSArICctJyArIHBsYWNlbWVudFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3JkZXJSYWRpdXNQcm9wICs9IHBsYWNlbWVudFsxXSArICctJyArIHBsYWNlbWVudFswXTtcbiAgICAgICAgfVxuICAgICAgICBib3JkZXJSYWRpdXNQcm9wICs9ICctcmFkaXVzJztcbiAgICAgICAgdmFyIGJvcmRlclJhZGl1cyA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpc1Rvb2x0aXAgPyBpbm5lckVsZW0gOiBlbGVtKVtib3JkZXJSYWRpdXNQcm9wXTtcblxuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudFswXSkge1xuICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBhcnJvd0Nzcy5ib3R0b20gPSBpc1Rvb2x0aXAgPyAnMCcgOiAnLScgKyBib3JkZXJXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICBhcnJvd0Nzcy50b3AgPSBpc1Rvb2x0aXAgPyAnMCcgOiAnLScgKyBib3JkZXJXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgYXJyb3dDc3MucmlnaHQgPSBpc1Rvb2x0aXAgPyAnMCcgOiAnLScgKyBib3JkZXJXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIGFycm93Q3NzLmxlZnQgPSBpc1Rvb2x0aXAgPyAnMCcgOiAnLScgKyBib3JkZXJXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJyb3dDc3NbcGxhY2VtZW50WzFdXSA9IGJvcmRlclJhZGl1cztcblxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoYXJyb3dFbGVtKS5jc3MoYXJyb3dDc3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyUG9wdXAnLCBbJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4udmFsdWUoJyRkYXRlcGlja2VyUG9wdXBMaXRlcmFsV2FybmluZycsIHRydWUpXG5cbi5jb25zdGFudCgndWliRGF0ZXBpY2tlclBvcHVwQ29uZmlnJywge1xuICBhbHRJbnB1dEZvcm1hdHM6IFtdLFxuICBhcHBlbmRUb0JvZHk6IGZhbHNlLFxuICBjbGVhclRleHQ6ICdDbGVhcicsXG4gIGNsb3NlT25EYXRlU2VsZWN0aW9uOiB0cnVlLFxuICBjbG9zZVRleHQ6ICdEb25lJyxcbiAgY3VycmVudFRleHQ6ICdUb2RheScsXG4gIGRhdGVwaWNrZXJQb3B1cDogJ3l5eXktTU0tZGQnLFxuICBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyUG9wdXAvcG9wdXAuaHRtbCcsXG4gIGRhdGVwaWNrZXJUZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbCcsXG4gIGh0bWw1VHlwZXM6IHtcbiAgICBkYXRlOiAneXl5eS1NTS1kZCcsXG4gICAgJ2RhdGV0aW1lLWxvY2FsJzogJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyxcbiAgICAnbW9udGgnOiAneXl5eS1NTSdcbiAgfSxcbiAgb25PcGVuRm9jdXM6IHRydWUsXG4gIHNob3dCdXR0b25CYXI6IHRydWUsXG4gIHBsYWNlbWVudDogJ2F1dG8gYm90dG9tLWxlZnQnXG59KVxuXG4uY29udHJvbGxlcignVWliRGF0ZXBpY2tlclBvcHVwQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckY29tcGlsZScsICckbG9nJywgJyRwYXJzZScsICckd2luZG93JywgJyRkb2N1bWVudCcsICckcm9vdFNjb3BlJywgJyR1aWJQb3NpdGlvbicsICdkYXRlRmlsdGVyJywgJ3VpYkRhdGVQYXJzZXInLCAndWliRGF0ZXBpY2tlclBvcHVwQ29uZmlnJywgJyR0aW1lb3V0JywgJ3VpYkRhdGVwaWNrZXJDb25maWcnLCAnJGRhdGVwaWNrZXJQb3B1cExpdGVyYWxXYXJuaW5nJyxcbmZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbXBpbGUsICRsb2csICRwYXJzZSwgJHdpbmRvdywgJGRvY3VtZW50LCAkcm9vdFNjb3BlLCAkcG9zaXRpb24sIGRhdGVGaWx0ZXIsIGRhdGVQYXJzZXIsIGRhdGVwaWNrZXJQb3B1cENvbmZpZywgJHRpbWVvdXQsIGRhdGVwaWNrZXJDb25maWcsICRkYXRlcGlja2VyUG9wdXBMaXRlcmFsV2FybmluZykge1xuICB2YXIgY2FjaGUgPSB7fSxcbiAgICBpc0h0bWw1RGF0ZUlucHV0ID0gZmFsc2U7XG4gIHZhciBkYXRlRm9ybWF0LCBjbG9zZU9uRGF0ZVNlbGVjdGlvbiwgYXBwZW5kVG9Cb2R5LCBvbk9wZW5Gb2N1cyxcbiAgICBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCwgZGF0ZXBpY2tlclRlbXBsYXRlVXJsLCBwb3B1cEVsLCBkYXRlcGlja2VyRWwsIHNjcm9sbFBhcmVudEVsLFxuICAgIG5nTW9kZWwsIG5nTW9kZWxPcHRpb25zLCAkcG9wdXAsIGFsdElucHV0Rm9ybWF0cywgd2F0Y2hMaXN0ZW5lcnMgPSBbXTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihfbmdNb2RlbF8pIHtcbiAgICBuZ01vZGVsID0gX25nTW9kZWxfO1xuICAgIG5nTW9kZWxPcHRpb25zID0gZXh0cmFjdE9wdGlvbnMobmdNb2RlbCk7XG4gICAgY2xvc2VPbkRhdGVTZWxlY3Rpb24gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuY2xvc2VPbkRhdGVTZWxlY3Rpb24pID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5jbG9zZU9uRGF0ZVNlbGVjdGlvbikgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmNsb3NlT25EYXRlU2VsZWN0aW9uO1xuICAgIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuZGF0ZXBpY2tlckFwcGVuZFRvQm9keSkgOlxuICAgICAgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmFwcGVuZFRvQm9keTtcbiAgICBvbk9wZW5Gb2N1cyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5vbk9wZW5Gb2N1cykgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm9uT3BlbkZvY3VzKSA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5vbk9wZW5Gb2N1cztcbiAgICBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCkgP1xuICAgICAgJGF0dHJzLmRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDtcbiAgICBkYXRlcGlja2VyVGVtcGxhdGVVcmwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZGF0ZXBpY2tlclRlbXBsYXRlVXJsKSA/XG4gICAgICAkYXR0cnMuZGF0ZXBpY2tlclRlbXBsYXRlVXJsIDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJUZW1wbGF0ZVVybDtcbiAgICBhbHRJbnB1dEZvcm1hdHMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYWx0SW5wdXRGb3JtYXRzKSA/XG4gICAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYWx0SW5wdXRGb3JtYXRzKSA6XG4gICAgICBkYXRlcGlja2VyUG9wdXBDb25maWcuYWx0SW5wdXRGb3JtYXRzO1xuXG4gICAgJHNjb3BlLnNob3dCdXR0b25CYXIgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc2hvd0J1dHRvbkJhcikgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnNob3dCdXR0b25CYXIpIDpcbiAgICAgIGRhdGVwaWNrZXJQb3B1cENvbmZpZy5zaG93QnV0dG9uQmFyO1xuXG4gICAgaWYgKGRhdGVwaWNrZXJQb3B1cENvbmZpZy5odG1sNVR5cGVzWyRhdHRycy50eXBlXSkge1xuICAgICAgZGF0ZUZvcm1hdCA9IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5odG1sNVR5cGVzWyRhdHRycy50eXBlXTtcbiAgICAgIGlzSHRtbDVEYXRlSW5wdXQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlRm9ybWF0ID0gJGF0dHJzLnVpYkRhdGVwaWNrZXJQb3B1cCB8fCBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwO1xuICAgICAgJGF0dHJzLiRvYnNlcnZlKCd1aWJEYXRlcGlja2VyUG9wdXAnLCBmdW5jdGlvbih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFyIG5ld0RhdGVGb3JtYXQgPSB2YWx1ZSB8fCBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwO1xuICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSAkbW9kZWxWYWx1ZSB0byBlbnN1cmUgdGhhdCBmb3JtYXR0ZXJzIHJlLXJ1blxuICAgICAgICAvLyBGSVhNRTogUmVmYWN0b3Igd2hlbiBQUiBpcyBtZXJnZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMDc2NFxuICAgICAgICBpZiAobmV3RGF0ZUZvcm1hdCAhPT0gZGF0ZUZvcm1hdCkge1xuICAgICAgICAgIGRhdGVGb3JtYXQgPSBuZXdEYXRlRm9ybWF0O1xuICAgICAgICAgIG5nTW9kZWwuJG1vZGVsVmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKCFkYXRlRm9ybWF0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VpYkRhdGVwaWNrZXJQb3B1cCBtdXN0IGhhdmUgYSBkYXRlIGZvcm1hdCBzcGVjaWZpZWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGVGb3JtYXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndWliRGF0ZXBpY2tlclBvcHVwIG11c3QgaGF2ZSBhIGRhdGUgZm9ybWF0IHNwZWNpZmllZC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNIdG1sNURhdGVJbnB1dCAmJiAkYXR0cnMudWliRGF0ZXBpY2tlclBvcHVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hUTUw1IGRhdGUgaW5wdXQgdHlwZXMgZG8gbm90IHN1cHBvcnQgY3VzdG9tIGZvcm1hdHMuJyk7XG4gICAgfVxuXG4gICAgLy8gcG9wdXAgZWxlbWVudCB1c2VkIHRvIGRpc3BsYXkgY2FsZW5kYXJcbiAgICBwb3B1cEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHVpYi1kYXRlcGlja2VyLXBvcHVwLXdyYXA+PGRpdiB1aWItZGF0ZXBpY2tlcj48L2Rpdj48L2Rpdj4nKTtcblxuICAgIHBvcHVwRWwuYXR0cih7XG4gICAgICAnbmctbW9kZWwnOiAnZGF0ZScsXG4gICAgICAnbmctY2hhbmdlJzogJ2RhdGVTZWxlY3Rpb24oZGF0ZSknLFxuICAgICAgJ3RlbXBsYXRlLXVybCc6IGRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsXG4gICAgfSk7XG5cbiAgICAvLyBkYXRlcGlja2VyIGVsZW1lbnRcbiAgICBkYXRlcGlja2VyRWwgPSBhbmd1bGFyLmVsZW1lbnQocG9wdXBFbC5jaGlsZHJlbigpWzBdKTtcbiAgICBkYXRlcGlja2VyRWwuYXR0cigndGVtcGxhdGUtdXJsJywgZGF0ZXBpY2tlclRlbXBsYXRlVXJsKTtcblxuICAgIGlmICghJHNjb3BlLmRhdGVwaWNrZXJPcHRpb25zKSB7XG4gICAgICAkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoaXNIdG1sNURhdGVJbnB1dCkge1xuICAgICAgaWYgKCRhdHRycy50eXBlID09PSAnbW9udGgnKSB7XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSA9ICdtb250aCc7XG4gICAgICAgICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucy5taW5Nb2RlID0gJ21vbnRoJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRlcGlja2VyRWwuYXR0cignZGF0ZXBpY2tlci1vcHRpb25zJywgJ2RhdGVwaWNrZXJPcHRpb25zJyk7XG5cbiAgICBpZiAoIWlzSHRtbDVEYXRlSW5wdXQpIHtcbiAgICAgIC8vIEludGVybmFsIEFQSSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBuZy1pbnZhbGlkLVtrZXldIGNsYXNzXG4gICAgICBuZ01vZGVsLiQkcGFyc2VyTmFtZSA9ICdkYXRlJztcbiAgICAgIG5nTW9kZWwuJHZhbGlkYXRvcnMuZGF0ZSA9IHZhbGlkYXRvcjtcbiAgICAgIG5nTW9kZWwuJHBhcnNlcnMudW5zaGlmdChwYXJzZURhdGUpO1xuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChuZ01vZGVsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICRzY29wZS5kYXRlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuZGF0ZSA9IGRhdGVQYXJzZXIuZnJvbVRpbWV6b25lKHZhbHVlLCBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24oJ3RpbWV6b25lJykpO1xuXG4gICAgICAgIHJldHVybiBkYXRlUGFyc2VyLmZpbHRlcigkc2NvcGUuZGF0ZSwgZGF0ZUZvcm1hdCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICRzY29wZS5kYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodmFsdWUsIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERldGVjdCBjaGFuZ2VzIGluIHRoZSB2aWV3IGZyb20gdGhlIHRleHQgYm94XG4gICAgbmdNb2RlbC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmRhdGUgPSBwYXJzZURhdGVTdHJpbmcobmdNb2RlbC4kdmlld1ZhbHVlKTtcbiAgICB9KTtcblxuICAgICRlbGVtZW50Lm9uKCdrZXlkb3duJywgaW5wdXRLZXlkb3duQmluZCk7XG5cbiAgICAkcG9wdXAgPSAkY29tcGlsZShwb3B1cEVsKSgkc2NvcGUpO1xuICAgIC8vIFByZXZlbnQgalF1ZXJ5IGNhY2hlIG1lbW9yeSBsZWFrICh0ZW1wbGF0ZSBpcyBub3cgcmVkdW5kYW50IGFmdGVyIGxpbmtpbmcpXG4gICAgcG9wdXBFbC5yZW1vdmUoKTtcblxuICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKCRwb3B1cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRlbGVtZW50LmFmdGVyKCRwb3B1cCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgkc2NvcGUuaXNPcGVuID09PSB0cnVlKSB7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkcG9wdXAucmVtb3ZlKCk7XG4gICAgICAkZWxlbWVudC5vZmYoJ2tleWRvd24nLCBpbnB1dEtleWRvd25CaW5kKTtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgZG9jdW1lbnRDbGlja0JpbmQpO1xuICAgICAgaWYgKHNjcm9sbFBhcmVudEVsKSB7XG4gICAgICAgIHNjcm9sbFBhcmVudEVsLm9mZignc2Nyb2xsJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgICB9XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub2ZmKCdyZXNpemUnLCBwb3NpdGlvblBvcHVwKTtcblxuICAgICAgLy9DbGVhciBhbGwgd2F0Y2ggbGlzdGVuZXJzIG9uIGRlc3Ryb3lcbiAgICAgIHdoaWxlICh3YXRjaExpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgd2F0Y2hMaXN0ZW5lcnMuc2hpZnQoKSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gICRzY29wZS5nZXRUZXh0ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuICRzY29wZVtrZXkgKyAnVGV4dCddIHx8IGRhdGVwaWNrZXJQb3B1cENvbmZpZ1trZXkgKyAnVGV4dCddO1xuICB9O1xuXG4gICRzY29wZS5pc0Rpc2FibGVkID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIGlmIChkYXRlID09PSAndG9kYXknKSB7XG4gICAgICBkYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUobmV3IERhdGUoKSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0ZXMgPSB7fTtcbiAgICBhbmd1bGFyLmZvckVhY2goWydtaW5EYXRlJywgJ21heERhdGUnXSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoISRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKSB7XG4gICAgICAgIGRhdGVzW2tleV0gPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzRGF0ZSgkc2NvcGUuZGF0ZXBpY2tlck9wdGlvbnNba2V5XSkpIHtcbiAgICAgICAgZGF0ZXNba2V5XSA9IG5ldyBEYXRlKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkZGF0ZXBpY2tlclBvcHVwTGl0ZXJhbFdhcm5pbmcpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ0xpdGVyYWwgZGF0ZSBzdXBwb3J0IGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzd2l0Y2ggdG8gZGF0ZSBvYmplY3QgdXNhZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGVzW2tleV0gPSBuZXcgRGF0ZShkYXRlRmlsdGVyKCRzY29wZS5kYXRlcGlja2VyT3B0aW9uc1trZXldLCAnbWVkaXVtJykpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRzY29wZS5kYXRlcGlja2VyT3B0aW9ucyAmJlxuICAgICAgZGF0ZXMubWluRGF0ZSAmJiAkc2NvcGUuY29tcGFyZShkYXRlLCBkYXRlcy5taW5EYXRlKSA8IDAgfHxcbiAgICAgIGRhdGVzLm1heERhdGUgJiYgJHNjb3BlLmNvbXBhcmUoZGF0ZSwgZGF0ZXMubWF4RGF0ZSkgPiAwO1xuICB9O1xuXG4gICRzY29wZS5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCksIGRhdGUxLmdldERhdGUoKSkgLSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpLCBkYXRlMi5nZXREYXRlKCkpO1xuICB9O1xuXG4gIC8vIElubmVyIGNoYW5nZVxuICAkc2NvcGUuZGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uKGR0KSB7XG4gICAgJHNjb3BlLmRhdGUgPSBkdDtcbiAgICB2YXIgZGF0ZSA9ICRzY29wZS5kYXRlID8gZGF0ZVBhcnNlci5maWx0ZXIoJHNjb3BlLmRhdGUsIGRhdGVGb3JtYXQpIDogbnVsbDsgLy8gU2V0dGluZyB0byBOVUxMIGlzIG5lY2Vzc2FyeSBmb3IgZm9ybSB2YWxpZGF0b3JzIHRvIGZ1bmN0aW9uXG4gICAgJGVsZW1lbnQudmFsKGRhdGUpO1xuICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShkYXRlKTtcblxuICAgIGlmIChjbG9zZU9uRGF0ZVNlbGVjdGlvbikge1xuICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmtleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICBpZiAoZXZ0LndoaWNoID09PSAyNykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgJHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgJGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGRhdGUsIGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmIChkYXRlID09PSAndG9kYXknKSB7XG4gICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKCRzY29wZS5kYXRlKSkge1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGUpO1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHRvZGF5LmdldEZ1bGxZZWFyKCksIHRvZGF5LmdldE1vbnRoKCksIHRvZGF5LmdldERhdGUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlID0gZGF0ZVBhcnNlci5mcm9tVGltZXpvbmUodG9kYXksIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbigndGltZXpvbmUnKSk7XG4gICAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgICRzY29wZS5kYXRlU2VsZWN0aW9uKGRhdGUpO1xuICB9O1xuXG4gICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAkZWxlbWVudFswXS5mb2N1cygpO1xuICB9O1xuXG4gICRzY29wZS5kaXNhYmxlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5kaXNhYmxlZCkgfHwgZmFsc2U7XG4gIGlmICgkYXR0cnMubmdEaXNhYmxlZCkge1xuICAgIHdhdGNoTGlzdGVuZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubmdEaXNhYmxlZCksIGZ1bmN0aW9uKGRpc2FibGVkKSB7XG4gICAgICAkc2NvcGUuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9KSk7XG4gIH1cblxuICAkc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKCEkc2NvcGUuZGlzYWJsZWQpIHtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcG9zaXRpb25Qb3B1cCgpO1xuXG4gICAgICAgICAgaWYgKG9uT3BlbkZvY3VzKSB7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgndWliOmRhdGVwaWNrZXIuZm9jdXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkZG9jdW1lbnQub24oJ2NsaWNrJywgZG9jdW1lbnRDbGlja0JpbmQpO1xuXG4gICAgICAgICAgdmFyIHBsYWNlbWVudCA9ICRhdHRycy5wb3B1cFBsYWNlbWVudCA/ICRhdHRycy5wb3B1cFBsYWNlbWVudCA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5wbGFjZW1lbnQ7XG4gICAgICAgICAgaWYgKGFwcGVuZFRvQm9keSB8fCAkcG9zaXRpb24ucGFyc2VQbGFjZW1lbnQocGxhY2VtZW50KVsyXSkge1xuICAgICAgICAgICAgc2Nyb2xsUGFyZW50RWwgPSBzY3JvbGxQYXJlbnRFbCB8fCBhbmd1bGFyLmVsZW1lbnQoJHBvc2l0aW9uLnNjcm9sbFBhcmVudCgkZWxlbWVudCkpO1xuICAgICAgICAgICAgaWYgKHNjcm9sbFBhcmVudEVsKSB7XG4gICAgICAgICAgICAgIHNjcm9sbFBhcmVudEVsLm9uKCdzY3JvbGwnLCBwb3NpdGlvblBvcHVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsUGFyZW50RWwgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgcG9zaXRpb25Qb3B1cCk7XG4gICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBkb2N1bWVudENsaWNrQmluZCk7XG4gICAgICBpZiAoc2Nyb2xsUGFyZW50RWwpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50RWwub2ZmKCdzY3JvbGwnLCBwb3NpdGlvblBvcHVwKTtcbiAgICAgIH1cbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIHBvc2l0aW9uUG9wdXApO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2FtZWx0b0Rhc2goc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uKCQxKSB7IHJldHVybiAnLScgKyAkMS50b0xvd2VyQ2FzZSgpOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF0ZVN0cmluZyh2aWV3VmFsdWUpIHtcbiAgICB2YXIgZGF0ZSA9IGRhdGVQYXJzZXIucGFyc2Uodmlld1ZhbHVlLCBkYXRlRm9ybWF0LCAkc2NvcGUuZGF0ZSk7XG4gICAgaWYgKGlzTmFOKGRhdGUpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsdElucHV0Rm9ybWF0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZSh2aWV3VmFsdWUsIGFsdElucHV0Rm9ybWF0c1tpXSwgJHNjb3BlLmRhdGUpO1xuICAgICAgICBpZiAoIWlzTmFOKGRhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURhdGUodmlld1ZhbHVlKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmlld1ZhbHVlKSkge1xuICAgICAgLy8gcHJlc3VtYWJseSB0aW1lc3RhbXAgdG8gZGF0ZSBvYmplY3RcbiAgICAgIHZpZXdWYWx1ZSA9IG5ldyBEYXRlKHZpZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF2aWV3VmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRGF0ZSh2aWV3VmFsdWUpICYmICFpc05hTih2aWV3VmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmlld1ZhbHVlO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZpZXdWYWx1ZSkpIHtcbiAgICAgIHZhciBkYXRlID0gcGFyc2VEYXRlU3RyaW5nKHZpZXdWYWx1ZSk7XG4gICAgICBpZiAoIWlzTmFOKGRhdGUpKSB7XG4gICAgICAgIHJldHVybiBkYXRlUGFyc2VyLnRvVGltZXpvbmUoZGF0ZSwgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKSA/IHZpZXdWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcblxuICAgIGlmICghJGF0dHJzLm5nUmVxdWlyZWQgJiYgIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhbmd1bGFyLmlzRGF0ZSh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRGF0ZVN0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2tCaW5kKGV2ZW50KSB7XG4gICAgaWYgKCEkc2NvcGUuaXNPcGVuICYmICRzY29wZS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3B1cCA9ICRwb3B1cFswXTtcbiAgICB2YXIgZHBDb250YWluc1RhcmdldCA9ICRlbGVtZW50WzBdLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgLy8gVGhlIHBvcHVwIG5vZGUgbWF5IG5vdCBiZSBhbiBlbGVtZW50IG5vZGVcbiAgICAvLyBJbiBzb21lIGJyb3dzZXJzIChJRSkgb25seSBlbGVtZW50IG5vZGVzIGhhdmUgdGhlICdjb250YWlucycgZnVuY3Rpb25cbiAgICB2YXIgcG9wdXBDb250YWluc1RhcmdldCA9IHBvcHVwLmNvbnRhaW5zICE9PSB1bmRlZmluZWQgJiYgcG9wdXAuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgICBpZiAoJHNjb3BlLmlzT3BlbiAmJiAhKGRwQ29udGFpbnNUYXJnZXQgfHwgcG9wdXBDb250YWluc1RhcmdldCkpIHtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlucHV0S2V5ZG93bkJpbmQoZXZ0KSB7XG4gICAgaWYgKGV2dC53aGljaCA9PT0gMjcgJiYgJHNjb3BlLmlzT3Blbikge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmIChldnQud2hpY2ggPT09IDQwICYmICEkc2NvcGUuaXNPcGVuKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5pc09wZW4gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Qb3B1cCgpIHtcbiAgICBpZiAoJHNjb3BlLmlzT3Blbikge1xuICAgICAgdmFyIGRwRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgkcG9wdXBbMF0ucXVlcnlTZWxlY3RvcignLnVpYi1kYXRlcGlja2VyLXBvcHVwJykpO1xuICAgICAgdmFyIHBsYWNlbWVudCA9ICRhdHRycy5wb3B1cFBsYWNlbWVudCA/ICRhdHRycy5wb3B1cFBsYWNlbWVudCA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5wbGFjZW1lbnQ7XG4gICAgICB2YXIgcG9zaXRpb24gPSAkcG9zaXRpb24ucG9zaXRpb25FbGVtZW50cygkZWxlbWVudCwgZHBFbGVtZW50LCBwbGFjZW1lbnQsIGFwcGVuZFRvQm9keSk7XG4gICAgICBkcEVsZW1lbnQuY3NzKHt0b3A6IHBvc2l0aW9uLnRvcCArICdweCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQgKyAncHgnfSk7XG4gICAgICBpZiAoZHBFbGVtZW50Lmhhc0NsYXNzKCd1aWItcG9zaXRpb24tbWVhc3VyZScpKSB7XG4gICAgICAgIGRwRWxlbWVudC5yZW1vdmVDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHRyYWN0T3B0aW9ucyhuZ01vZGVsQ3RybCkge1xuICAgIHZhciBuZ01vZGVsT3B0aW9ucztcblxuICAgIGlmIChhbmd1bGFyLnZlcnNpb24ubWlub3IgPCA2KSB7IC8vIGluIGFuZ3VsYXIgPCAxLjYgJG9wdGlvbnMgY291bGQgYmUgbWlzc2luZ1xuICAgICAgLy8gZ3VhcmFudGVlIGEgdmFsdWVcbiAgICAgIG5nTW9kZWxPcHRpb25zID0gYW5ndWxhci5pc09iamVjdChuZ01vZGVsQ3RybC4kb3B0aW9ucykgP1xuICAgICAgICBuZ01vZGVsQ3RybC4kb3B0aW9ucyA6XG4gICAgICAgIHtcbiAgICAgICAgICB0aW1lem9uZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAvLyBtaW1pYyAxLjYrIGFwaVxuICAgICAgbmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnNba2V5XTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHsgLy8gaW4gYW5ndWxhciA+PTEuNiAkb3B0aW9ucyBpcyBhbHdheXMgcHJlc2VudFxuICAgICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gbmdNb2RlbE9wdGlvbnM7XG4gIH1cblxuICAkc2NvcGUuJG9uKCd1aWI6ZGF0ZXBpY2tlci5tb2RlJywgZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQocG9zaXRpb25Qb3B1cCwgMCwgZmFsc2UpO1xuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJEYXRlcGlja2VyUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAndWliRGF0ZXBpY2tlclBvcHVwJ10sXG4gICAgY29udHJvbGxlcjogJ1VpYkRhdGVwaWNrZXJQb3B1cENvbnRyb2xsZXInLFxuICAgIHNjb3BlOiB7XG4gICAgICBkYXRlcGlja2VyT3B0aW9uczogJz0/JyxcbiAgICAgIGlzT3BlbjogJz0/JyxcbiAgICAgIGN1cnJlbnRUZXh0OiAnQCcsXG4gICAgICBjbGVhclRleHQ6ICdAJyxcbiAgICAgIGNsb3NlVGV4dDogJ0AnXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgbmdNb2RlbCA9IGN0cmxzWzBdLFxuICAgICAgICBjdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGN0cmwuaW5pdChuZ01vZGVsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJEYXRlcGlja2VyUG9wdXBXcmFwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWwnO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRlYm91bmNlJywgW10pXG4vKipcbiAqIEEgaGVscGVyLCBpbnRlcm5hbCBzZXJ2aWNlIHRoYXQgZGVib3VuY2VzIGEgZnVuY3Rpb25cbiAqL1xuICAuZmFjdG9yeSgnJCRkZWJvdW5jZScsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaywgZGVib3VuY2VUaW1lKSB7XG4gICAgICB2YXIgdGltZW91dFByb21pc2U7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aW1lb3V0UHJvbWlzZSkge1xuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0UHJvbWlzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lb3V0UHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICB9LCBkZWJvdW5jZVRpbWUpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAubXVsdGlNYXAnLCBbXSlcbi8qKlxuICogQSBoZWxwZXIsIGludGVybmFsIGRhdGEgc3RydWN0dXJlIHRoYXQgc3RvcmVzIGFsbCByZWZlcmVuY2VzIGF0dGFjaGVkIHRvIGtleVxuICovXG4gIC5mYWN0b3J5KCckJG11bHRpTWFwJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZU5ldzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtYXAgPSB7fTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXBba2V5XVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcFtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFzS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIW1hcFtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFtYXBba2V5XSkge1xuICAgICAgICAgICAgICBtYXBba2V5XSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXBba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG1hcFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIXZhbHVlcykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpZHggPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICAgICAgICAgIHZhbHVlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBtYXBba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZHJvcGRvd24nLCBbJ3VpLmJvb3RzdHJhcC5tdWx0aU1hcCcsICd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcblxuLmNvbnN0YW50KCd1aWJEcm9wZG93bkNvbmZpZycsIHtcbiAgYXBwZW5kVG9PcGVuQ2xhc3M6ICd1aWItZHJvcGRvd24tb3BlbicsXG4gIG9wZW5DbGFzczogJ29wZW4nXG59KVxuXG4uc2VydmljZSgndWliRHJvcGRvd25TZXJ2aWNlJywgWyckZG9jdW1lbnQnLCAnJHJvb3RTY29wZScsICckJG11bHRpTWFwJywgZnVuY3Rpb24oJGRvY3VtZW50LCAkcm9vdFNjb3BlLCAkJG11bHRpTWFwKSB7XG4gIHZhciBvcGVuU2NvcGUgPSBudWxsO1xuICB2YXIgb3BlbmVkQ29udGFpbmVycyA9ICQkbXVsdGlNYXAuY3JlYXRlTmV3KCk7XG5cbiAgdGhpcy5pc09ubHlPcGVuID0gZnVuY3Rpb24oZHJvcGRvd25TY29wZSwgYXBwZW5kVG8pIHtcbiAgICB2YXIgb3BlbmVkRHJvcGRvd25zID0gb3BlbmVkQ29udGFpbmVycy5nZXQoYXBwZW5kVG8pO1xuICAgIGlmIChvcGVuZWREcm9wZG93bnMpIHtcbiAgICAgIHZhciBvcGVuRHJvcGRvd24gPSBvcGVuZWREcm9wZG93bnMucmVkdWNlKGZ1bmN0aW9uKHRvQ2xvc2UsIGRyb3Bkb3duKSB7XG4gICAgICAgIGlmIChkcm9wZG93bi5zY29wZSA9PT0gZHJvcGRvd25TY29wZSkge1xuICAgICAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0Nsb3NlO1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKG9wZW5Ecm9wZG93bikge1xuICAgICAgICByZXR1cm4gb3BlbmVkRHJvcGRvd25zLmxlbmd0aCA9PT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5vcGVuID0gZnVuY3Rpb24oZHJvcGRvd25TY29wZSwgZWxlbWVudCwgYXBwZW5kVG8pIHtcbiAgICBpZiAoIW9wZW5TY29wZSkge1xuICAgICAgJGRvY3VtZW50Lm9uKCdjbGljaycsIGNsb3NlRHJvcGRvd24pO1xuICAgIH1cblxuICAgIGlmIChvcGVuU2NvcGUgJiYgb3BlblNjb3BlICE9PSBkcm9wZG93blNjb3BlKSB7XG4gICAgICBvcGVuU2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb3BlblNjb3BlID0gZHJvcGRvd25TY29wZTtcblxuICAgIGlmICghYXBwZW5kVG8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlbmVkRHJvcGRvd25zID0gb3BlbmVkQ29udGFpbmVycy5nZXQoYXBwZW5kVG8pO1xuICAgIGlmIChvcGVuZWREcm9wZG93bnMpIHtcbiAgICAgIHZhciBvcGVuZWRTY29wZXMgPSBvcGVuZWREcm9wZG93bnMubWFwKGZ1bmN0aW9uKGRyb3Bkb3duKSB7XG4gICAgICAgIHJldHVybiBkcm9wZG93bi5zY29wZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKG9wZW5lZFNjb3Blcy5pbmRleE9mKGRyb3Bkb3duU2NvcGUpID09PSAtMSkge1xuICAgICAgICBvcGVuZWRDb250YWluZXJzLnB1dChhcHBlbmRUbywge1xuICAgICAgICAgIHNjb3BlOiBkcm9wZG93blNjb3BlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuZWRDb250YWluZXJzLnB1dChhcHBlbmRUbywge1xuICAgICAgICBzY29wZTogZHJvcGRvd25TY29wZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY2xvc2UgPSBmdW5jdGlvbihkcm9wZG93blNjb3BlLCBlbGVtZW50LCBhcHBlbmRUbykge1xuICAgIGlmIChvcGVuU2NvcGUgPT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgICRkb2N1bWVudC5vZmYoJ2NsaWNrJywgY2xvc2VEcm9wZG93bik7XG4gICAgICAkZG9jdW1lbnQub2ZmKCdrZXlkb3duJywgdGhpcy5rZXliaW5kRmlsdGVyKTtcbiAgICAgIG9wZW5TY29wZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFhcHBlbmRUbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVuZWREcm9wZG93bnMgPSBvcGVuZWRDb250YWluZXJzLmdldChhcHBlbmRUbyk7XG4gICAgaWYgKG9wZW5lZERyb3Bkb3ducykge1xuICAgICAgdmFyIGRyb3Bkb3duVG9DbG9zZSA9IG9wZW5lZERyb3Bkb3ducy5yZWR1Y2UoZnVuY3Rpb24odG9DbG9zZSwgZHJvcGRvd24pIHtcbiAgICAgICAgaWYgKGRyb3Bkb3duLnNjb3BlID09PSBkcm9wZG93blNjb3BlKSB7XG4gICAgICAgICAgcmV0dXJuIGRyb3Bkb3duO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvQ2xvc2U7XG4gICAgICB9LCB7fSk7XG4gICAgICBpZiAoZHJvcGRvd25Ub0Nsb3NlKSB7XG4gICAgICAgIG9wZW5lZENvbnRhaW5lcnMucmVtb3ZlKGFwcGVuZFRvLCBkcm9wZG93blRvQ2xvc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgY2xvc2VEcm9wZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIC8vIFRoaXMgbWV0aG9kIG1heSBzdGlsbCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBzYW1lIG1vdXNlIGV2ZW50IHRoYXRcbiAgICAvLyB1bmJvdW5kIHRoaXMgZXZlbnQgaGFuZGxlci4gU28gY2hlY2sgb3BlblNjb3BlIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAgIGlmICghb3BlblNjb3BlIHx8ICFvcGVuU2NvcGUuaXNPcGVuKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKGV2dCAmJiBvcGVuU2NvcGUuZ2V0QXV0b0Nsb3NlKCkgPT09ICdkaXNhYmxlZCcpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZXZ0ICYmIGV2dC53aGljaCA9PT0gMykgeyByZXR1cm47IH1cblxuICAgIHZhciB0b2dnbGVFbGVtZW50ID0gb3BlblNjb3BlLmdldFRvZ2dsZUVsZW1lbnQoKTtcbiAgICBpZiAoZXZ0ICYmIHRvZ2dsZUVsZW1lbnQgJiYgdG9nZ2xlRWxlbWVudFswXS5jb250YWlucyhldnQudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0RHJvcGRvd25FbGVtZW50KCk7XG4gICAgaWYgKGV2dCAmJiBvcGVuU2NvcGUuZ2V0QXV0b0Nsb3NlKCkgPT09ICdvdXRzaWRlQ2xpY2snICYmXG4gICAgICBkcm9wZG93bkVsZW1lbnQgJiYgZHJvcGRvd25FbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3BlblNjb3BlLmZvY3VzVG9nZ2xlRWxlbWVudCgpO1xuICAgIG9wZW5TY29wZS5pc09wZW4gPSBmYWxzZTtcblxuICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICBvcGVuU2NvcGUuJGFwcGx5KCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMua2V5YmluZEZpbHRlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGlmICghb3BlblNjb3BlKSB7XG4gICAgICAvLyBzZWUgdGhpcy5jbG9zZSBhcyBFU0MgY291bGQgaGF2ZSBiZWVuIHByZXNzZWQgd2hpY2gga2lsbHMgdGhlIHNjb3BlIHNvIHdlIGNhbiBub3QgcHJvY2VlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0RHJvcGRvd25FbGVtZW50KCk7XG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCgpO1xuICAgIHZhciBkcm9wZG93bkVsZW1lbnRUYXJnZXRlZCA9IGRyb3Bkb3duRWxlbWVudCAmJiBkcm9wZG93bkVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCk7XG4gICAgdmFyIHRvZ2dsZUVsZW1lbnRUYXJnZXRlZCA9IHRvZ2dsZUVsZW1lbnQgJiYgdG9nZ2xlRWxlbWVudFswXS5jb250YWlucyhldnQudGFyZ2V0KTtcbiAgICBpZiAoZXZ0LndoaWNoID09PSAyNykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgb3BlblNjb3BlLmZvY3VzVG9nZ2xlRWxlbWVudCgpO1xuICAgICAgY2xvc2VEcm9wZG93bigpO1xuICAgIH0gZWxzZSBpZiAob3BlblNjb3BlLmlzS2V5bmF2RW5hYmxlZCgpICYmIFszOCwgNDBdLmluZGV4T2YoZXZ0LndoaWNoKSAhPT0gLTEgJiYgb3BlblNjb3BlLmlzT3BlbiAmJiAoZHJvcGRvd25FbGVtZW50VGFyZ2V0ZWQgfHwgdG9nZ2xlRWxlbWVudFRhcmdldGVkKSkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvcGVuU2NvcGUuZm9jdXNEcm9wZG93bkVudHJ5KGV2dC53aGljaCk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5jb250cm9sbGVyKCdVaWJEcm9wZG93bkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAnJHBhcnNlJywgJ3VpYkRyb3Bkb3duQ29uZmlnJywgJ3VpYkRyb3Bkb3duU2VydmljZScsICckYW5pbWF0ZScsICckdWliUG9zaXRpb24nLCAnJGRvY3VtZW50JywgJyRjb21waWxlJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRwYXJzZSwgZHJvcGRvd25Db25maWcsIHVpYkRyb3Bkb3duU2VydmljZSwgJGFuaW1hdGUsICRwb3NpdGlvbiwgJGRvY3VtZW50LCAkY29tcGlsZSwgJHRlbXBsYXRlUmVxdWVzdCkge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgc2NvcGUgPSAkc2NvcGUuJG5ldygpLCAvLyBjcmVhdGUgYSBjaGlsZCBzY29wZSBzbyB3ZSBhcmUgbm90IHBvbGx1dGluZyBvcmlnaW5hbCBvbmVcbiAgICB0ZW1wbGF0ZVNjb3BlLFxuICAgIGFwcGVuZFRvT3BlbkNsYXNzID0gZHJvcGRvd25Db25maWcuYXBwZW5kVG9PcGVuQ2xhc3MsXG4gICAgb3BlbkNsYXNzID0gZHJvcGRvd25Db25maWcub3BlbkNsYXNzLFxuICAgIGdldElzT3BlbixcbiAgICBzZXRJc09wZW4gPSBhbmd1bGFyLm5vb3AsXG4gICAgdG9nZ2xlSW52b2tlciA9ICRhdHRycy5vblRvZ2dsZSA/ICRwYXJzZSgkYXR0cnMub25Ub2dnbGUpIDogYW5ndWxhci5ub29wLFxuICAgIGtleW5hdkVuYWJsZWQgPSBmYWxzZSxcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG51bGwsXG4gICAgYm9keSA9ICRkb2N1bWVudC5maW5kKCdib2R5Jyk7XG5cbiAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duJyk7XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCRhdHRycy5pc09wZW4pIHtcbiAgICAgIGdldElzT3BlbiA9ICRwYXJzZSgkYXR0cnMuaXNPcGVuKTtcbiAgICAgIHNldElzT3BlbiA9IGdldElzT3Blbi5hc3NpZ247XG5cbiAgICAgICRzY29wZS4kd2F0Y2goZ2V0SXNPcGVuLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzY29wZS5pc09wZW4gPSAhIXZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5bmF2RW5hYmxlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5rZXlib2FyZE5hdik7XG4gIH07XG5cbiAgdGhpcy50b2dnbGUgPSBmdW5jdGlvbihvcGVuKSB7XG4gICAgc2NvcGUuaXNPcGVuID0gYXJndW1lbnRzLmxlbmd0aCA/ICEhb3BlbiA6ICFzY29wZS5pc09wZW47XG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzZXRJc09wZW4pKSB7XG4gICAgICBzZXRJc09wZW4oc2NvcGUsIHNjb3BlLmlzT3Blbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlLmlzT3BlbjtcbiAgfTtcblxuICAvLyBBbGxvdyBvdGhlciBkaXJlY3RpdmVzIHRvIHdhdGNoIHN0YXR1c1xuICB0aGlzLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzY29wZS5pc09wZW47XG4gIH07XG5cbiAgc2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLnRvZ2dsZUVsZW1lbnQ7XG4gIH07XG5cbiAgc2NvcGUuZ2V0QXV0b0Nsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICRhdHRycy5hdXRvQ2xvc2UgfHwgJ2Fsd2F5cyc7IC8vb3IgJ291dHNpZGVDbGljaycgb3IgJ2Rpc2FibGVkJ1xuICB9O1xuXG4gIHNjb3BlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJGVsZW1lbnQ7XG4gIH07XG5cbiAgc2NvcGUuaXNLZXluYXZFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGtleW5hdkVuYWJsZWQ7XG4gIH07XG5cbiAgc2NvcGUuZm9jdXNEcm9wZG93bkVudHJ5ID0gZnVuY3Rpb24oa2V5Q29kZSkge1xuICAgIHZhciBlbGVtcyA9IHNlbGYuZHJvcGRvd25NZW51ID8gLy9JZiBhcHBlbmQgdG8gYm9keSBpcyB1c2VkLlxuICAgICAgYW5ndWxhci5lbGVtZW50KHNlbGYuZHJvcGRvd25NZW51KS5maW5kKCdhJykgOlxuICAgICAgJGVsZW1lbnQuZmluZCgndWwnKS5lcSgwKS5maW5kKCdhJyk7XG5cbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgIGNhc2UgNDA6IHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKHNlbGYuc2VsZWN0ZWRPcHRpb24pKSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IHNlbGYuc2VsZWN0ZWRPcHRpb24gPT09IGVsZW1zLmxlbmd0aCAtIDEgP1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA6XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uICsgMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzg6IHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKHNlbGYuc2VsZWN0ZWRPcHRpb24pKSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IGVsZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiA9IHNlbGYuc2VsZWN0ZWRPcHRpb24gPT09IDAgP1xuICAgICAgICAgICAgMCA6IHNlbGYuc2VsZWN0ZWRPcHRpb24gLSAxO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBlbGVtc1tzZWxmLnNlbGVjdGVkT3B0aW9uXS5mb2N1cygpO1xuICB9O1xuXG4gIHNjb3BlLmdldERyb3Bkb3duRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRyb3Bkb3duTWVudTtcbiAgfTtcblxuICBzY29wZS5mb2N1c1RvZ2dsZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi50b2dnbGVFbGVtZW50KSB7XG4gICAgICBzZWxmLnRvZ2dsZUVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRHJvcGRvd25NZW51KCkge1xuICAgICRlbGVtZW50LmFwcGVuZChzZWxmLmRyb3Bkb3duTWVudSk7XG4gIH1cblxuICBzY29wZS4kd2F0Y2goJ2lzT3BlbicsIGZ1bmN0aW9uKGlzT3Blbiwgd2FzT3Blbikge1xuICAgIHZhciBhcHBlbmRUbyA9IG51bGwsXG4gICAgICBhcHBlbmRUb0JvZHkgPSBmYWxzZTtcblxuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZHJvcGRvd25BcHBlbmRUbykpIHtcbiAgICAgIHZhciBhcHBlbmRUb0VsID0gJHBhcnNlKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvKShzY29wZSk7XG4gICAgICBpZiAoYXBwZW5kVG9FbCkge1xuICAgICAgICBhcHBlbmRUbyA9IGFuZ3VsYXIuZWxlbWVudChhcHBlbmRUb0VsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRyb3Bkb3duQXBwZW5kVG9Cb2R5KSkge1xuICAgICAgdmFyIGFwcGVuZFRvQm9keVZhbHVlID0gJHBhcnNlKCRhdHRycy5kcm9wZG93bkFwcGVuZFRvQm9keSkoc2NvcGUpO1xuICAgICAgaWYgKGFwcGVuZFRvQm9keVZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICBhcHBlbmRUb0JvZHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcHBlbmRUb0JvZHkgJiYgIWFwcGVuZFRvKSB7XG4gICAgICBhcHBlbmRUbyA9IGJvZHk7XG4gICAgfVxuXG4gICAgaWYgKGFwcGVuZFRvICYmIHNlbGYuZHJvcGRvd25NZW51KSB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIGFwcGVuZFRvLmFwcGVuZChzZWxmLmRyb3Bkb3duTWVudSk7XG4gICAgICAgICRlbGVtZW50Lm9uKCckZGVzdHJveScsIHJlbW92ZURyb3Bkb3duTWVudSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxlbWVudC5vZmYoJyRkZXN0cm95JywgcmVtb3ZlRHJvcGRvd25NZW51KTtcbiAgICAgICAgcmVtb3ZlRHJvcGRvd25NZW51KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFwcGVuZFRvICYmIHNlbGYuZHJvcGRvd25NZW51KSB7XG4gICAgICB2YXIgcG9zID0gJHBvc2l0aW9uLnBvc2l0aW9uRWxlbWVudHMoJGVsZW1lbnQsIHNlbGYuZHJvcGRvd25NZW51LCAnYm90dG9tLWxlZnQnLCB0cnVlKSxcbiAgICAgICAgY3NzLFxuICAgICAgICByaWdodGFsaWduLFxuICAgICAgICBzY3JvbGxiYXJQYWRkaW5nLFxuICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IDA7XG5cbiAgICAgIGNzcyA9IHtcbiAgICAgICAgdG9wOiBwb3MudG9wICsgJ3B4JyxcbiAgICAgICAgZGlzcGxheTogaXNPcGVuID8gJ2Jsb2NrJyA6ICdub25lJ1xuICAgICAgfTtcblxuICAgICAgcmlnaHRhbGlnbiA9IHNlbGYuZHJvcGRvd25NZW51Lmhhc0NsYXNzKCdkcm9wZG93bi1tZW51LXJpZ2h0Jyk7XG4gICAgICBpZiAoIXJpZ2h0YWxpZ24pIHtcbiAgICAgICAgY3NzLmxlZnQgPSBwb3MubGVmdCArICdweCc7XG4gICAgICAgIGNzcy5yaWdodCA9ICdhdXRvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNzcy5sZWZ0ID0gJ2F1dG8nO1xuICAgICAgICBzY3JvbGxiYXJQYWRkaW5nID0gJHBvc2l0aW9uLnNjcm9sbGJhclBhZGRpbmcoYXBwZW5kVG8pO1xuXG4gICAgICAgIGlmIChzY3JvbGxiYXJQYWRkaW5nLmhlaWdodE92ZXJmbG93ICYmIHNjcm9sbGJhclBhZGRpbmcuc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbGJhclBhZGRpbmcuc2Nyb2xsYmFyV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBjc3MucmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIHNjcm9sbGJhcldpZHRoIC1cbiAgICAgICAgICAocG9zLmxlZnQgKyAkZWxlbWVudC5wcm9wKCdvZmZzZXRXaWR0aCcpKSArICdweCc7XG4gICAgICB9XG5cbiAgICAgIC8vIE5lZWQgdG8gYWRqdXN0IG91ciBwb3NpdGlvbmluZyB0byBiZSByZWxhdGl2ZSB0byB0aGUgYXBwZW5kVG8gY29udGFpbmVyXG4gICAgICAvLyBpZiBpdCdzIG5vdCB0aGUgYm9keSBlbGVtZW50XG4gICAgICBpZiAoIWFwcGVuZFRvQm9keSkge1xuICAgICAgICB2YXIgYXBwZW5kT2Zmc2V0ID0gJHBvc2l0aW9uLm9mZnNldChhcHBlbmRUbyk7XG5cbiAgICAgICAgY3NzLnRvcCA9IHBvcy50b3AgLSBhcHBlbmRPZmZzZXQudG9wICsgJ3B4JztcblxuICAgICAgICBpZiAoIXJpZ2h0YWxpZ24pIHtcbiAgICAgICAgICBjc3MubGVmdCA9IHBvcy5sZWZ0IC0gYXBwZW5kT2Zmc2V0LmxlZnQgKyAncHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNzcy5yaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC1cbiAgICAgICAgICAgIChwb3MubGVmdCAtIGFwcGVuZE9mZnNldC5sZWZ0ICsgJGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSkgKyAncHgnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuZHJvcGRvd25NZW51LmNzcyhjc3MpO1xuICAgIH1cblxuICAgIHZhciBvcGVuQ29udGFpbmVyID0gYXBwZW5kVG8gPyBhcHBlbmRUbyA6ICRlbGVtZW50O1xuICAgIHZhciBkcm9wZG93bk9wZW5DbGFzcyA9IGFwcGVuZFRvID8gYXBwZW5kVG9PcGVuQ2xhc3MgOiBvcGVuQ2xhc3M7XG4gICAgdmFyIGhhc09wZW5DbGFzcyA9IG9wZW5Db250YWluZXIuaGFzQ2xhc3MoZHJvcGRvd25PcGVuQ2xhc3MpO1xuICAgIHZhciBpc09ubHlPcGVuID0gdWliRHJvcGRvd25TZXJ2aWNlLmlzT25seU9wZW4oJHNjb3BlLCBhcHBlbmRUbyk7XG5cbiAgICBpZiAoaGFzT3BlbkNsYXNzID09PSAhaXNPcGVuKSB7XG4gICAgICB2YXIgdG9nZ2xlQ2xhc3M7XG4gICAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3MgPSAhaXNPbmx5T3BlbiA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3MgPSBpc09wZW4gPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJztcbiAgICAgIH1cbiAgICAgICRhbmltYXRlW3RvZ2dsZUNsYXNzXShvcGVuQ29udGFpbmVyLCBkcm9wZG93bk9wZW5DbGFzcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGlzT3BlbikgJiYgaXNPcGVuICE9PSB3YXNPcGVuKSB7XG4gICAgICAgICAgdG9nZ2xlSW52b2tlcigkc2NvcGUsIHsgb3BlbjogISFpc09wZW4gfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIGlmIChzZWxmLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsKSB7XG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkudGhlbihmdW5jdGlvbih0cGxDb250ZW50KSB7XG4gICAgICAgICAgdGVtcGxhdGVTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAkY29tcGlsZSh0cGxDb250ZW50LnRyaW0oKSkodGVtcGxhdGVTY29wZSwgZnVuY3Rpb24oZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbmV3RWwgPSBkcm9wZG93bkVsZW1lbnQ7XG4gICAgICAgICAgICBzZWxmLmRyb3Bkb3duTWVudS5yZXBsYWNlV2l0aChuZXdFbCk7XG4gICAgICAgICAgICBzZWxmLmRyb3Bkb3duTWVudSA9IG5ld0VsO1xuICAgICAgICAgICAgJGRvY3VtZW50Lm9uKCdrZXlkb3duJywgdWliRHJvcGRvd25TZXJ2aWNlLmtleWJpbmRGaWx0ZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIHVpYkRyb3Bkb3duU2VydmljZS5rZXliaW5kRmlsdGVyKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgICB1aWJEcm9wZG93blNlcnZpY2Uub3BlbihzY29wZSwgJGVsZW1lbnQsIGFwcGVuZFRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdWliRHJvcGRvd25TZXJ2aWNlLmNsb3NlKHNjb3BlLCAkZWxlbWVudCwgYXBwZW5kVG8pO1xuICAgICAgaWYgKHNlbGYuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwpIHtcbiAgICAgICAgaWYgKHRlbXBsYXRlU2NvcGUpIHtcbiAgICAgICAgICB0ZW1wbGF0ZVNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld0VsID0gYW5ndWxhci5lbGVtZW50KCc8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+PC91bD4nKTtcbiAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUucmVwbGFjZVdpdGgobmV3RWwpO1xuICAgICAgICBzZWxmLmRyb3Bkb3duTWVudSA9IG5ld0VsO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNldElzT3BlbikpIHtcbiAgICAgIHNldElzT3Blbigkc2NvcGUsIGlzT3Blbik7XG4gICAgfVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJEcm9wZG93bicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRyb2xsZXI6ICdVaWJEcm9wZG93bkNvbnRyb2xsZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZHJvcGRvd25DdHJsKSB7XG4gICAgICBkcm9wZG93bkN0cmwuaW5pdCgpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYkRyb3Bkb3duTWVudScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9edWliRHJvcGRvd24nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZHJvcGRvd25DdHJsKSB7XG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybCB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kcm9wZG93bk5lc3RlZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdkcm9wZG93bi1tZW51Jyk7XG5cbiAgICAgIHZhciB0cGxVcmwgPSBhdHRycy50ZW1wbGF0ZVVybDtcbiAgICAgIGlmICh0cGxVcmwpIHtcbiAgICAgICAgZHJvcGRvd25DdHJsLmRyb3Bkb3duTWVudVRlbXBsYXRlVXJsID0gdHBsVXJsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnUpIHtcbiAgICAgICAgZHJvcGRvd25DdHJsLmRyb3Bkb3duTWVudSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliRHJvcGRvd25Ub2dnbGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnP151aWJEcm9wZG93bicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBkcm9wZG93bkN0cmwpIHtcbiAgICAgIGlmICghZHJvcGRvd25DdHJsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnZHJvcGRvd24tdG9nZ2xlJyk7XG5cbiAgICAgIGRyb3Bkb3duQ3RybC50b2dnbGVFbGVtZW50ID0gZWxlbWVudDtcblxuICAgICAgdmFyIHRvZ2dsZURyb3Bkb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQ2xhc3MoJ2Rpc2FibGVkJykgJiYgIWF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZHJvcGRvd25DdHJsLnRvZ2dsZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBlbGVtZW50Lm9uKCdjbGljaycsIHRvZ2dsZURyb3Bkb3duKTtcblxuICAgICAgLy8gV0FJLUFSSUFcbiAgICAgIGVsZW1lbnQuYXR0cih7ICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSwgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSB9KTtcbiAgICAgIHNjb3BlLiR3YXRjaChkcm9wZG93bkN0cmwuaXNPcGVuLCBmdW5jdGlvbihpc09wZW4pIHtcbiAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgISFpc09wZW4pO1xuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgdG9nZ2xlRHJvcGRvd24pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuc3RhY2tlZE1hcCcsIFtdKVxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBhY3RzIGFzIGEgbWFwIGJ1dCBhbHNvIGFsbG93cyBnZXR0aW5nIC8gcmVtb3ZpbmdcbiAqIGVsZW1lbnRzIGluIHRoZSBMSUZPIG9yZGVyXG4gKi9cbiAgLmZhY3RvcnkoJyQkc3RhY2tlZE1hcCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVOZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhY2sgPSBbXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFkZDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gc3RhY2tbaV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtleXMucHVzaChzdGFja1tpXS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBpZHggPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gc3RhY2tbaV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnNwbGljZShpZHgsIDEpWzBdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlVG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5wb3AoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2subGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAubW9kYWwnLCBbJ3VpLmJvb3RzdHJhcC5tdWx0aU1hcCcsICd1aS5ib290c3RyYXAuc3RhY2tlZE1hcCcsICd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcbi8qKlxuICogUGx1Z2dhYmxlIHJlc29sdmUgbWVjaGFuaXNtIGZvciB0aGUgbW9kYWwgcmVzb2x2ZSByZXNvbHV0aW9uXG4gKiBTdXBwb3J0cyBVSSBSb3V0ZXIncyAkcmVzb2x2ZSBzZXJ2aWNlXG4gKi9cbiAgLnByb3ZpZGVyKCckdWliUmVzb2x2ZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNvbHZlID0gdGhpcztcbiAgICB0aGlzLnJlc29sdmVyID0gbnVsbDtcblxuICAgIHRoaXMuc2V0UmVzb2x2ZXIgPSBmdW5jdGlvbihyZXNvbHZlcikge1xuICAgICAgdGhpcy5yZXNvbHZlciA9IHJlc29sdmVyO1xuICAgIH07XG5cbiAgICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckcScsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHEpIHtcbiAgICAgIHZhciByZXNvbHZlciA9IHJlc29sdmUucmVzb2x2ZXIgPyAkaW5qZWN0b3IuZ2V0KHJlc29sdmUucmVzb2x2ZXIpIDogbnVsbDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKSB7XG4gICAgICAgICAgaWYgKHJlc29sdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIucmVzb2x2ZShpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG5cbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaW52b2NhYmxlcywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24odmFsdWUpIHx8IGFuZ3VsYXIuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgkcS5yZXNvbHZlKCRpbmplY3Rvci5pbnZva2UodmFsdWUpKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2goJHEucmVzb2x2ZSgkaW5qZWN0b3IuZ2V0KHZhbHVlKSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgkcS5yZXNvbHZlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gJHEuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlc29sdmVzKSB7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZU9iaiA9IHt9O1xuICAgICAgICAgICAgdmFyIHJlc29sdmVJdGVyID0gMDtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnZvY2FibGVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgIHJlc29sdmVPYmpba2V5XSA9IHJlc29sdmVzW3Jlc29sdmVJdGVyKytdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlT2JqO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9KVxuXG4vKipcbiAqIEEgaGVscGVyIGRpcmVjdGl2ZSBmb3IgdGhlICRtb2RhbCBzZXJ2aWNlLiBJdCBjcmVhdGVzIGEgYmFja2Ryb3AgZWxlbWVudC5cbiAqL1xuICAuZGlyZWN0aXZlKCd1aWJNb2RhbEJhY2tkcm9wJywgWyckYW5pbWF0ZScsICckaW5qZWN0b3InLCAnJHVpYk1vZGFsU3RhY2snLFxuICBmdW5jdGlvbigkYW5pbWF0ZSwgJGluamVjdG9yLCAkbW9kYWxTdGFjaykge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykge1xuICAgICAgICB0RWxlbWVudC5hZGRDbGFzcyh0QXR0cnMuYmFja2Ryb3BDbGFzcyk7XG4gICAgICAgIHJldHVybiBsaW5rRm47XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIGlmIChhdHRycy5tb2RhbEluQ2xhc3MpIHtcbiAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgYXR0cnMubW9kYWxJbkNsYXNzKTtcblxuICAgICAgICBzY29wZS4kb24oJG1vZGFsU3RhY2suTk9XX0NMT1NJTkdfRVZFTlQsIGZ1bmN0aW9uKGUsIHNldElzQXN5bmMpIHtcbiAgICAgICAgICB2YXIgZG9uZSA9IHNldElzQXN5bmMoKTtcbiAgICAgICAgICBpZiAoc2NvcGUubW9kYWxPcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYXR0cnMubW9kYWxJbkNsYXNzKS50aGVuKGRvbmUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYk1vZGFsV2luZG93JywgWyckdWliTW9kYWxTdGFjaycsICckcScsICckYW5pbWF0ZUNzcycsICckZG9jdW1lbnQnLFxuICBmdW5jdGlvbigkbW9kYWxTdGFjaywgJHEsICRhbmltYXRlQ3NzLCAkZG9jdW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgaW5kZXg6ICdAJ1xuICAgICAgfSxcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sJztcbiAgICAgIH0sXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhhdHRycy53aW5kb3dUb3BDbGFzcyB8fCAnJyk7XG4gICAgICAgIHNjb3BlLnNpemUgPSBhdHRycy5zaXplO1xuXG4gICAgICAgIHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgdmFyIG1vZGFsID0gJG1vZGFsU3RhY2suZ2V0VG9wKCk7XG4gICAgICAgICAgaWYgKG1vZGFsICYmIG1vZGFsLnZhbHVlLmJhY2tkcm9wICYmXG4gICAgICAgICAgICBtb2RhbC52YWx1ZS5iYWNrZHJvcCAhPT0gJ3N0YXRpYycgJiZcbiAgICAgICAgICAgIGV2dC50YXJnZXQgPT09IGV2dC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MobW9kYWwua2V5LCAnYmFja2Ryb3AgY2xpY2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gbW92ZWQgZnJvbSB0ZW1wbGF0ZSB0byBmaXggaXNzdWUgIzIyODBcbiAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCBzY29wZS5jbG9zZSk7XG5cbiAgICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IGFkZGVkIHRvIHRoZSBzY29wZSBmb3IgdGhlIHB1cnBvc2Ugb2YgZGV0ZWN0aW5nIHdoZW4gdGhpcyBkaXJlY3RpdmUgaXMgcmVuZGVyZWQuXG4gICAgICAgIC8vIFdlIGNhbiBkZXRlY3QgdGhhdCBieSB1c2luZyB0aGlzIHByb3BlcnR5IGluIHRoZSB0ZW1wbGF0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBkaXJlY3RpdmUgYW5kIHRoZW4gdXNlXG4gICAgICAgIC8vIHtAbGluayBBdHRyaWJ1dGUjJG9ic2VydmV9IG9uIGl0LiBGb3IgbW9yZSBkZXRhaWxzIHBsZWFzZSBzZWUge0BsaW5rIFRhYmxlQ29sdW1uUmVzaXplfS5cbiAgICAgICAgc2NvcGUuJGlzUmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIERlZmVycmVkIG9iamVjdCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGlzIG1vZGFsIGlzIHJlbmRlcmVkLlxuICAgICAgICB2YXIgbW9kYWxSZW5kZXJEZWZlck9iaiA9ICRxLmRlZmVyKCk7XG4gICAgICAgIC8vIFJlc29sdmUgcmVuZGVyIHByb21pc2UgcG9zdC1kaWdlc3RcbiAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG1vZGFsUmVuZGVyRGVmZXJPYmoucmVzb2x2ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBtb2RhbFJlbmRlckRlZmVyT2JqLnByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uUHJvbWlzZSA9IG51bGw7XG5cbiAgICAgICAgICBpZiAoYXR0cnMubW9kYWxJbkNsYXNzKSB7XG4gICAgICAgICAgICBhbmltYXRpb25Qcm9taXNlID0gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICAgICAgICAgICAgICBhZGRDbGFzczogYXR0cnMubW9kYWxJbkNsYXNzXG4gICAgICAgICAgICB9KS5zdGFydCgpO1xuXG4gICAgICAgICAgICBzY29wZS4kb24oJG1vZGFsU3RhY2suTk9XX0NMT1NJTkdfRVZFTlQsIGZ1bmN0aW9uKGUsIHNldElzQXN5bmMpIHtcbiAgICAgICAgICAgICAgdmFyIGRvbmUgPSBzZXRJc0FzeW5jKCk7XG4gICAgICAgICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogYXR0cnMubW9kYWxJbkNsYXNzXG4gICAgICAgICAgICAgIH0pLnN0YXJ0KCkudGhlbihkb25lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuXG4gICAgICAgICAgJHEud2hlbihhbmltYXRpb25Qcm9taXNlKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gTm90aWZ5IHtAbGluayAkbW9kYWxTdGFja30gdGhhdCBtb2RhbCBpcyByZW5kZXJlZC5cbiAgICAgICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbFN0YWNrLmdldFRvcCgpO1xuICAgICAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgICAgICRtb2RhbFN0YWNrLm1vZGFsUmVuZGVyZWQobW9kYWwua2V5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBzb21ldGhpbmcgd2l0aGluIHRoZSBmcmVzaGx5LW9wZW5lZCBtb2RhbCBhbHJlYWR5IGhhcyBmb2N1cyAocGVyaGFwcyB2aWEgYVxuICAgICAgICAgICAgICogZGlyZWN0aXZlIHRoYXQgY2F1c2VzIGZvY3VzKSB0aGVuIHRoZXJlJ3Mgbm8gbmVlZCB0byB0cnkgdG8gZm9jdXMgYW55dGhpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghKCRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ICYmIGVsZW1lbnRbMF0uY29udGFpbnMoJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQpKSkge1xuICAgICAgICAgICAgICB2YXIgaW5wdXRXaXRoQXV0b2ZvY3VzID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCdbYXV0b2ZvY3VzXScpO1xuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQXV0by1mb2N1c2luZyBvZiBhIGZyZXNobHktb3BlbmVkIG1vZGFsIGVsZW1lbnQgY2F1c2VzIGFueSBjaGlsZCBlbGVtZW50c1xuICAgICAgICAgICAgICAgKiB3aXRoIHRoZSBhdXRvZm9jdXMgYXR0cmlidXRlIHRvIGxvc2UgZm9jdXMuIFRoaXMgaXMgYW4gaXNzdWUgb24gdG91Y2hcbiAgICAgICAgICAgICAgICogYmFzZWQgZGV2aWNlcyB3aGljaCB3aWxsIHNob3cgYW5kIHRoZW4gaGlkZSB0aGUgb25zY3JlZW4ga2V5Ym9hcmQuXG4gICAgICAgICAgICAgICAqIEF0dGVtcHRzIHRvIHJlZm9jdXMgdGhlIGF1dG9mb2N1cyBlbGVtZW50IHZpYSBKYXZhU2NyaXB0IHdpbGwgbm90IHJlb3BlblxuICAgICAgICAgICAgICAgKiB0aGUgb25zY3JlZW4ga2V5Ym9hcmQuIEZpeGVkIGJ5IHVwZGF0ZWQgdGhlIGZvY3VzaW5nIGxvZ2ljIHRvIG9ubHkgYXV0b2ZvY3VzXG4gICAgICAgICAgICAgICAqIHRoZSBtb2RhbCBlbGVtZW50IGlmIHRoZSBtb2RhbCBkb2VzIG5vdCBjb250YWluIGFuIGF1dG9mb2N1cyBlbGVtZW50LlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgaWYgKGlucHV0V2l0aEF1dG9mb2N1cykge1xuICAgICAgICAgICAgICAgIGlucHV0V2l0aEF1dG9mb2N1cy5mb2N1cygpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSlcblxuICAuZGlyZWN0aXZlKCd1aWJNb2RhbEFuaW1hdGlvbkNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgaWYgKHRBdHRycy5tb2RhbEFuaW1hdGlvbikge1xuICAgICAgICAgIHRFbGVtZW50LmFkZENsYXNzKHRBdHRycy51aWJNb2RhbEFuaW1hdGlvbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLmRpcmVjdGl2ZSgndWliTW9kYWxUcmFuc2NsdWRlJywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZSkge1xuICAgICAgICB0cmFuc2NsdWRlKHNjb3BlLiRwYXJlbnQsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBlbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmZhY3RvcnkoJyR1aWJNb2RhbFN0YWNrJywgWyckYW5pbWF0ZScsICckYW5pbWF0ZUNzcycsICckZG9jdW1lbnQnLFxuICAgICckY29tcGlsZScsICckcm9vdFNjb3BlJywgJyRxJywgJyQkbXVsdGlNYXAnLCAnJCRzdGFja2VkTWFwJywgJyR1aWJQb3NpdGlvbicsXG4gICAgZnVuY3Rpb24oJGFuaW1hdGUsICRhbmltYXRlQ3NzLCAkZG9jdW1lbnQsICRjb21waWxlLCAkcm9vdFNjb3BlLCAkcSwgJCRtdWx0aU1hcCwgJCRzdGFja2VkTWFwLCAkdWliUG9zaXRpb24pIHtcbiAgICAgIHZhciBPUEVORURfTU9EQUxfQ0xBU1MgPSAnbW9kYWwtb3Blbic7XG5cbiAgICAgIHZhciBiYWNrZHJvcERvbUVsLCBiYWNrZHJvcFNjb3BlO1xuICAgICAgdmFyIG9wZW5lZFdpbmRvd3MgPSAkJHN0YWNrZWRNYXAuY3JlYXRlTmV3KCk7XG4gICAgICB2YXIgb3BlbmVkQ2xhc3NlcyA9ICQkbXVsdGlNYXAuY3JlYXRlTmV3KCk7XG4gICAgICB2YXIgJG1vZGFsU3RhY2sgPSB7XG4gICAgICAgIE5PV19DTE9TSU5HX0VWRU5UOiAnbW9kYWwuc3RhY2subm93LWNsb3NpbmcnXG4gICAgICB9O1xuICAgICAgdmFyIHRvcE1vZGFsSW5kZXggPSAwO1xuICAgICAgdmFyIHByZXZpb3VzVG9wT3BlbmVkTW9kYWwgPSBudWxsO1xuICAgICAgdmFyIEFSSUFfSElEREVOX0FUVFJJQlVURV9OQU1FID0gJ2RhdGEtYm9vdHN0cmFwLW1vZGFsLWFyaWEtaGlkZGVuLWNvdW50JztcblxuICAgICAgLy9Nb2RhbCBmb2N1cyBiZWhhdmlvclxuICAgICAgdmFyIHRhYmJhYmxlU2VsZWN0b3IgPSAnYVtocmVmXSwgYXJlYVtocmVmXSwgaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XFwnLTFcXCddKSwgJyArXG4gICAgICAgICdidXR0b246bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XFwnLTFcXCddKSxzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XFwnLTFcXCddKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XFwnLTFcXCddKSwgJyArXG4gICAgICAgICdpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XFwnLTFcXCddKSwgKltjb250ZW50ZWRpdGFibGU9dHJ1ZV0nO1xuICAgICAgdmFyIHNjcm9sbGJhclBhZGRpbmc7XG4gICAgICB2YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZztcblxuICAgICAgLy8gVE9ETzogZXh0cmFjdCBpbnRvIGNvbW1vbiBkZXBlbmRlbmN5IHdpdGggdG9vbHRpcFxuICAgICAgZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnLSc7XG4gICAgICAgIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgICAgICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzVmlzaWJsZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiAhIShlbGVtZW50Lm9mZnNldFdpZHRoIHx8XG4gICAgICAgICAgZWxlbWVudC5vZmZzZXRIZWlnaHQgfHxcbiAgICAgICAgICBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmFja2Ryb3BJbmRleCgpIHtcbiAgICAgICAgdmFyIHRvcEJhY2tkcm9wSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG9wZW5lZCA9IG9wZW5lZFdpbmRvd3Mua2V5cygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wZW5lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChvcGVuZWRXaW5kb3dzLmdldChvcGVuZWRbaV0pLnZhbHVlLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICB0b3BCYWNrZHJvcEluZGV4ID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhbnkgYmFja2Ryb3AgZXhpc3QsIGVuc3VyZSB0aGF0IGl0J3MgaW5kZXggaXMgYWx3YXlzXG4gICAgICAgIC8vIHJpZ2h0IGJlbG93IHRoZSB0b3AgbW9kYWxcbiAgICAgICAgaWYgKHRvcEJhY2tkcm9wSW5kZXggPiAtMSAmJiB0b3BCYWNrZHJvcEluZGV4IDwgdG9wTW9kYWxJbmRleCkge1xuICAgICAgICAgIHRvcEJhY2tkcm9wSW5kZXggPSB0b3BNb2RhbEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BCYWNrZHJvcEluZGV4O1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChiYWNrZHJvcEluZGV4LCBmdW5jdGlvbihuZXdCYWNrZHJvcEluZGV4KSB7XG4gICAgICAgIGlmIChiYWNrZHJvcFNjb3BlKSB7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5pbmRleCA9IG5ld0JhY2tkcm9wSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiByZW1vdmVNb2RhbFdpbmRvdyhtb2RhbEluc3RhbmNlLCBlbGVtZW50VG9SZWNlaXZlRm9jdXMpIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSkudmFsdWU7XG4gICAgICAgIHZhciBhcHBlbmRUb0VsZW1lbnQgPSBtb2RhbFdpbmRvdy5hcHBlbmRUbztcblxuICAgICAgICAvL2NsZWFuIHVwIHRoZSBzdGFja1xuICAgICAgICBvcGVuZWRXaW5kb3dzLnJlbW92ZShtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgcHJldmlvdXNUb3BPcGVuZWRNb2RhbCA9IG9wZW5lZFdpbmRvd3MudG9wKCk7XG4gICAgICAgIGlmIChwcmV2aW91c1RvcE9wZW5lZE1vZGFsKSB7XG4gICAgICAgICAgdG9wTW9kYWxJbmRleCA9IHBhcnNlSW50KHByZXZpb3VzVG9wT3BlbmVkTW9kYWwudmFsdWUubW9kYWxEb21FbC5hdHRyKCdpbmRleCcpLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZW1vdmVBZnRlckFuaW1hdGUobW9kYWxXaW5kb3cubW9kYWxEb21FbCwgbW9kYWxXaW5kb3cubW9kYWxTY29wZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIG1vZGFsQm9keUNsYXNzID0gbW9kYWxXaW5kb3cub3BlbmVkQ2xhc3MgfHwgT1BFTkVEX01PREFMX0NMQVNTO1xuICAgICAgICAgIG9wZW5lZENsYXNzZXMucmVtb3ZlKG1vZGFsQm9keUNsYXNzLCBtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgICB2YXIgYXJlQW55T3BlbiA9IG9wZW5lZENsYXNzZXMuaGFzS2V5KG1vZGFsQm9keUNsYXNzKTtcbiAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQudG9nZ2xlQ2xhc3MobW9kYWxCb2R5Q2xhc3MsIGFyZUFueU9wZW4pO1xuICAgICAgICAgIGlmICghYXJlQW55T3BlbiAmJiBzY3JvbGxiYXJQYWRkaW5nICYmIHNjcm9sbGJhclBhZGRpbmcuaGVpZ2h0T3ZlcmZsb3cgJiYgc2Nyb2xsYmFyUGFkZGluZy5zY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICAgICAgaWYgKHNjcm9sbGJhclBhZGRpbmcub3JpZ2luYWxSaWdodCkge1xuICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQuY3NzKHtwYWRkaW5nUmlnaHQ6IHNjcm9sbGJhclBhZGRpbmcub3JpZ2luYWxSaWdodCArICdweCd9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudC5jc3Moe3BhZGRpbmdSaWdodDogJyd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjcm9sbGJhclBhZGRpbmcgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2dnbGVUb3BXaW5kb3dDbGFzcyh0cnVlKTtcbiAgICAgICAgfSwgbW9kYWxXaW5kb3cuY2xvc2VkRGVmZXJyZWQpO1xuICAgICAgICBjaGVja1JlbW92ZUJhY2tkcm9wKCk7XG5cbiAgICAgICAgLy9tb3ZlIGZvY3VzIHRvIHNwZWNpZmllZCBlbGVtZW50IGlmIGF2YWlsYWJsZSwgb3IgZWxzZSB0byBib2R5XG4gICAgICAgIGlmIChlbGVtZW50VG9SZWNlaXZlRm9jdXMgJiYgZWxlbWVudFRvUmVjZWl2ZUZvY3VzLmZvY3VzKSB7XG4gICAgICAgICAgZWxlbWVudFRvUmVjZWl2ZUZvY3VzLmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBwZW5kVG9FbGVtZW50LmZvY3VzKSB7XG4gICAgICAgICAgYXBwZW5kVG9FbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWRkIG9yIHJlbW92ZSBcIndpbmRvd1RvcENsYXNzXCIgZnJvbSB0aGUgdG9wIHdpbmRvdyBpbiB0aGUgc3RhY2tcbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZVRvcFdpbmRvd0NsYXNzKHRvZ2dsZVN3aXRjaCkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3c7XG5cbiAgICAgICAgaWYgKG9wZW5lZFdpbmRvd3MubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLnRvcCgpLnZhbHVlO1xuICAgICAgICAgIG1vZGFsV2luZG93Lm1vZGFsRG9tRWwudG9nZ2xlQ2xhc3MobW9kYWxXaW5kb3cud2luZG93VG9wQ2xhc3MgfHwgJycsIHRvZ2dsZVN3aXRjaCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2hlY2tSZW1vdmVCYWNrZHJvcCgpIHtcbiAgICAgICAgLy9yZW1vdmUgYmFja2Ryb3AgaWYgbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAgICBpZiAoYmFja2Ryb3BEb21FbCAmJiBiYWNrZHJvcEluZGV4KCkgPT09IC0xKSB7XG4gICAgICAgICAgdmFyIGJhY2tkcm9wU2NvcGVSZWYgPSBiYWNrZHJvcFNjb3BlO1xuICAgICAgICAgIHJlbW92ZUFmdGVyQW5pbWF0ZShiYWNrZHJvcERvbUVsLCBiYWNrZHJvcFNjb3BlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJhY2tkcm9wU2NvcGVSZWYgPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJhY2tkcm9wRG9tRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVBZnRlckFuaW1hdGUoZG9tRWwsIHNjb3BlLCBkb25lLCBjbG9zZWREZWZlcnJlZCkge1xuICAgICAgICB2YXIgYXN5bmNEZWZlcnJlZDtcbiAgICAgICAgdmFyIGFzeW5jUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHZhciBzZXRJc0FzeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFhc3luY0RlZmVycmVkKSB7XG4gICAgICAgICAgICBhc3luY0RlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIGFzeW5jUHJvbWlzZSA9IGFzeW5jRGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNEb25lKCkge1xuICAgICAgICAgICAgYXN5bmNEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgkbW9kYWxTdGFjay5OT1dfQ0xPU0lOR19FVkVOVCwgc2V0SXNBc3luYyk7XG5cbiAgICAgICAgLy8gTm90ZSB0aGF0IGl0J3MgaW50ZW50aW9uYWwgdGhhdCBhc3luY1Byb21pc2UgbWlnaHQgYmUgbnVsbC5cbiAgICAgICAgLy8gVGhhdCdzIHdoZW4gc2V0SXNBc3luYyBoYXMgbm90IGJlZW4gY2FsbGVkIGR1cmluZyB0aGVcbiAgICAgICAgLy8gTk9XX0NMT1NJTkdfRVZFTlQgYnJvYWRjYXN0LlxuICAgICAgICByZXR1cm4gJHEud2hlbihhc3luY1Byb21pc2UpLnRoZW4oYWZ0ZXJBbmltYXRpbmcpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW5nKCkge1xuICAgICAgICAgIGlmIChhZnRlckFuaW1hdGluZy5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQW5pbWF0aW5nLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoZG9tRWwpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvbUVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKGNsb3NlZERlZmVycmVkKSB7XG4gICAgICAgICAgICAgIGNsb3NlZERlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGRvY3VtZW50Lm9uKCdrZXlkb3duJywga2V5ZG93bkxpc3RlbmVyKTtcblxuICAgICAgJHJvb3RTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICRkb2N1bWVudC5vZmYoJ2tleWRvd24nLCBrZXlkb3duTGlzdGVuZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGtleWRvd25MaXN0ZW5lcihldnQpIHtcbiAgICAgICAgaWYgKGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybiBldnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICBzd2l0Y2ggKGV2dC53aGljaCkge1xuICAgICAgICAgICAgY2FzZSAyNzoge1xuICAgICAgICAgICAgICBpZiAobW9kYWwudmFsdWUua2V5Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MobW9kYWwua2V5LCAnZXNjYXBlIGtleSBwcmVzcycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA5OiB7XG4gICAgICAgICAgICAgIHZhciBsaXN0ID0gJG1vZGFsU3RhY2subG9hZEZvY3VzRWxlbWVudExpc3QobW9kYWwpO1xuICAgICAgICAgICAgICB2YXIgZm9jdXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoJG1vZGFsU3RhY2suaXNGb2N1c0luRmlyc3RJdGVtKGV2dCwgbGlzdCkgfHwgJG1vZGFsU3RhY2suaXNNb2RhbEZvY3VzZWQoZXZ0LCBtb2RhbCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvY3VzQ2hhbmdlZCA9ICRtb2RhbFN0YWNrLmZvY3VzTGFzdEZvY3VzYWJsZUVsZW1lbnQobGlzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkbW9kYWxTdGFjay5pc0ZvY3VzSW5MYXN0SXRlbShldnQsIGxpc3QpKSB7XG4gICAgICAgICAgICAgICAgICBmb2N1c0NoYW5nZWQgPSAkbW9kYWxTdGFjay5mb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudChsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZm9jdXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRtb2RhbFN0YWNrLm9wZW4gPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlLCBtb2RhbCkge1xuICAgICAgICB2YXIgbW9kYWxPcGVuZXIgPSAkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCxcbiAgICAgICAgICBtb2RhbEJvZHlDbGFzcyA9IG1vZGFsLm9wZW5lZENsYXNzIHx8IE9QRU5FRF9NT0RBTF9DTEFTUztcblxuICAgICAgICB0b2dnbGVUb3BXaW5kb3dDbGFzcyhmYWxzZSk7XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIGN1cnJlbnQgdG9wIGZpcnN0LCB0byBkZXRlcm1pbmUgd2hhdCBpbmRleCB3ZSBvdWdodCB0byB1c2VcbiAgICAgICAgLy8gZm9yIHRoZSBjdXJyZW50IHRvcCBtb2RhbFxuICAgICAgICBwcmV2aW91c1RvcE9wZW5lZE1vZGFsID0gb3BlbmVkV2luZG93cy50b3AoKTtcblxuICAgICAgICBvcGVuZWRXaW5kb3dzLmFkZChtb2RhbEluc3RhbmNlLCB7XG4gICAgICAgICAgZGVmZXJyZWQ6IG1vZGFsLmRlZmVycmVkLFxuICAgICAgICAgIHJlbmRlckRlZmVycmVkOiBtb2RhbC5yZW5kZXJEZWZlcnJlZCxcbiAgICAgICAgICBjbG9zZWREZWZlcnJlZDogbW9kYWwuY2xvc2VkRGVmZXJyZWQsXG4gICAgICAgICAgbW9kYWxTY29wZTogbW9kYWwuc2NvcGUsXG4gICAgICAgICAgYmFja2Ryb3A6IG1vZGFsLmJhY2tkcm9wLFxuICAgICAgICAgIGtleWJvYXJkOiBtb2RhbC5rZXlib2FyZCxcbiAgICAgICAgICBvcGVuZWRDbGFzczogbW9kYWwub3BlbmVkQ2xhc3MsXG4gICAgICAgICAgd2luZG93VG9wQ2xhc3M6IG1vZGFsLndpbmRvd1RvcENsYXNzLFxuICAgICAgICAgIGFuaW1hdGlvbjogbW9kYWwuYW5pbWF0aW9uLFxuICAgICAgICAgIGFwcGVuZFRvOiBtb2RhbC5hcHBlbmRUb1xuICAgICAgICB9KTtcblxuICAgICAgICBvcGVuZWRDbGFzc2VzLnB1dChtb2RhbEJvZHlDbGFzcywgbW9kYWxJbnN0YW5jZSk7XG5cbiAgICAgICAgdmFyIGFwcGVuZFRvRWxlbWVudCA9IG1vZGFsLmFwcGVuZFRvLFxuICAgICAgICAgICAgY3VyckJhY2tkcm9wSW5kZXggPSBiYWNrZHJvcEluZGV4KCk7XG5cbiAgICAgICAgaWYgKGN1cnJCYWNrZHJvcEluZGV4ID49IDAgJiYgIWJhY2tkcm9wRG9tRWwpIHtcbiAgICAgICAgICBiYWNrZHJvcFNjb3BlID0gJHJvb3RTY29wZS4kbmV3KHRydWUpO1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUubW9kYWxPcHRpb25zID0gbW9kYWw7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5pbmRleCA9IGN1cnJCYWNrZHJvcEluZGV4O1xuICAgICAgICAgIGJhY2tkcm9wRG9tRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgdWliLW1vZGFsLWJhY2tkcm9wPVwibW9kYWwtYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgICAgICBiYWNrZHJvcERvbUVsLmF0dHIoe1xuICAgICAgICAgICAgJ2NsYXNzJzogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICAgICAgICAgICduZy1zdHlsZSc6ICd7XFwnei1pbmRleFxcJzogMTA0MCArIChpbmRleCAmJiAxIHx8IDApICsgaW5kZXgqMTB9JyxcbiAgICAgICAgICAgICd1aWItbW9kYWwtYW5pbWF0aW9uLWNsYXNzJzogJ2ZhZGUnLFxuICAgICAgICAgICAgJ21vZGFsLWluLWNsYXNzJzogJ2luJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtb2RhbC5iYWNrZHJvcENsYXNzKSB7XG4gICAgICAgICAgICBiYWNrZHJvcERvbUVsLmFkZENsYXNzKG1vZGFsLmJhY2tkcm9wQ2xhc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtb2RhbC5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIGJhY2tkcm9wRG9tRWwuYXR0cignbW9kYWwtYW5pbWF0aW9uJywgJ3RydWUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgJGNvbXBpbGUoYmFja2Ryb3BEb21FbCkoYmFja2Ryb3BTY29wZSk7XG4gICAgICAgICAgJGFuaW1hdGUuZW50ZXIoYmFja2Ryb3BEb21FbCwgYXBwZW5kVG9FbGVtZW50KTtcbiAgICAgICAgICBpZiAoJHVpYlBvc2l0aW9uLmlzU2Nyb2xsYWJsZShhcHBlbmRUb0VsZW1lbnQpKSB7XG4gICAgICAgICAgICBzY3JvbGxiYXJQYWRkaW5nID0gJHVpYlBvc2l0aW9uLnNjcm9sbGJhclBhZGRpbmcoYXBwZW5kVG9FbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChzY3JvbGxiYXJQYWRkaW5nLmhlaWdodE92ZXJmbG93ICYmIHNjcm9sbGJhclBhZGRpbmcuc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50LmNzcyh7cGFkZGluZ1JpZ2h0OiBzY3JvbGxiYXJQYWRkaW5nLnJpZ2h0ICsgJ3B4J30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250ZW50O1xuICAgICAgICBpZiAobW9kYWwuY29tcG9uZW50KSB7XG4gICAgICAgICAgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoc25ha2VfY2FzZShtb2RhbC5jb21wb25lbnQubmFtZSkpO1xuICAgICAgICAgIGNvbnRlbnQgPSBhbmd1bGFyLmVsZW1lbnQoY29udGVudCk7XG4gICAgICAgICAgY29udGVudC5hdHRyKHtcbiAgICAgICAgICAgIHJlc29sdmU6ICckcmVzb2x2ZScsXG4gICAgICAgICAgICAnbW9kYWwtaW5zdGFuY2UnOiAnJHVpYk1vZGFsSW5zdGFuY2UnLFxuICAgICAgICAgICAgY2xvc2U6ICckY2xvc2UoJHZhbHVlKScsXG4gICAgICAgICAgICBkaXNtaXNzOiAnJGRpc21pc3MoJHZhbHVlKSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZW50ID0gbW9kYWwuY29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgdG9wIG1vZGFsIGluZGV4IGJhc2VkIG9uIHRoZSBpbmRleCBvZiB0aGUgcHJldmlvdXMgdG9wIG1vZGFsXG4gICAgICAgIHRvcE1vZGFsSW5kZXggPSBwcmV2aW91c1RvcE9wZW5lZE1vZGFsID8gcGFyc2VJbnQocHJldmlvdXNUb3BPcGVuZWRNb2RhbC52YWx1ZS5tb2RhbERvbUVsLmF0dHIoJ2luZGV4JyksIDEwKSArIDEgOiAwO1xuICAgICAgICB2YXIgYW5ndWxhckRvbUVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHVpYi1tb2RhbC13aW5kb3c9XCJtb2RhbC13aW5kb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgYW5ndWxhckRvbUVsLmF0dHIoe1xuICAgICAgICAgICdjbGFzcyc6ICdtb2RhbCcsXG4gICAgICAgICAgJ3RlbXBsYXRlLXVybCc6IG1vZGFsLndpbmRvd1RlbXBsYXRlVXJsLFxuICAgICAgICAgICd3aW5kb3ctdG9wLWNsYXNzJzogbW9kYWwud2luZG93VG9wQ2xhc3MsXG4gICAgICAgICAgJ3JvbGUnOiAnZGlhbG9nJyxcbiAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbW9kYWwuYXJpYUxhYmVsbGVkQnksXG4gICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBtb2RhbC5hcmlhRGVzY3JpYmVkQnksXG4gICAgICAgICAgJ3NpemUnOiBtb2RhbC5zaXplLFxuICAgICAgICAgICdpbmRleCc6IHRvcE1vZGFsSW5kZXgsXG4gICAgICAgICAgJ2FuaW1hdGUnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgJ25nLXN0eWxlJzogJ3tcXCd6LWluZGV4XFwnOiAxMDUwICsgJCR0b3BNb2RhbEluZGV4KjEwLCBkaXNwbGF5OiBcXCdibG9ja1xcJ30nLFxuICAgICAgICAgICd0YWJpbmRleCc6IC0xLFxuICAgICAgICAgICd1aWItbW9kYWwtYW5pbWF0aW9uLWNsYXNzJzogJ2ZhZGUnLFxuICAgICAgICAgICdtb2RhbC1pbi1jbGFzcyc6ICdpbidcbiAgICAgICAgfSkuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICBpZiAobW9kYWwud2luZG93Q2xhc3MpIHtcbiAgICAgICAgICBhbmd1bGFyRG9tRWwuYWRkQ2xhc3MobW9kYWwud2luZG93Q2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGFsLmFuaW1hdGlvbikge1xuICAgICAgICAgIGFuZ3VsYXJEb21FbC5hdHRyKCdtb2RhbC1hbmltYXRpb24nLCAndHJ1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwZW5kVG9FbGVtZW50LmFkZENsYXNzKG1vZGFsQm9keUNsYXNzKTtcbiAgICAgICAgaWYgKG1vZGFsLnNjb3BlKSB7XG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBleHBsaWNpdGx5IGFkZCB0aGUgbW9kYWwgaW5kZXggdG8gdGhlIG1vZGFsIHNjb3BlXG4gICAgICAgICAgLy8gYmVjYXVzZSBpdCBpcyBuZWVkZWQgYnkgbmdTdHlsZSB0byBjb21wdXRlIHRoZSB6SW5kZXggcHJvcGVydHkuXG4gICAgICAgICAgbW9kYWwuc2NvcGUuJCR0b3BNb2RhbEluZGV4ID0gdG9wTW9kYWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICAkYW5pbWF0ZS5lbnRlcigkY29tcGlsZShhbmd1bGFyRG9tRWwpKG1vZGFsLnNjb3BlKSwgYXBwZW5kVG9FbGVtZW50KTtcblxuICAgICAgICBvcGVuZWRXaW5kb3dzLnRvcCgpLnZhbHVlLm1vZGFsRG9tRWwgPSBhbmd1bGFyRG9tRWw7XG4gICAgICAgIG9wZW5lZFdpbmRvd3MudG9wKCkudmFsdWUubW9kYWxPcGVuZXIgPSBtb2RhbE9wZW5lcjtcblxuICAgICAgICBhcHBseUFyaWFIaWRkZW4oYW5ndWxhckRvbUVsKTtcblxuICAgICAgICBmdW5jdGlvbiBhcHBseUFyaWFIaWRkZW4oZWwpIHtcbiAgICAgICAgICBpZiAoIWVsIHx8IGVsWzBdLnRhZ05hbWUgPT09ICdCT0RZJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGdldFNpYmxpbmdzKGVsKS5mb3JFYWNoKGZ1bmN0aW9uKHNpYmxpbmcpIHtcbiAgICAgICAgICAgIHZhciBlbGVtSXNBbHJlYWR5SGlkZGVuID0gc2libGluZy5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAgICAgYXJpYUhpZGRlbkNvdW50ID0gcGFyc2VJbnQoc2libGluZy5nZXRBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUpLCAxMCk7XG5cbiAgICAgICAgICAgIGlmICghYXJpYUhpZGRlbkNvdW50KSB7XG4gICAgICAgICAgICAgIGFyaWFIaWRkZW5Db3VudCA9IGVsZW1Jc0FscmVhZHlIaWRkZW4gPyAxIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2libGluZy5zZXRBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUsIGFyaWFIaWRkZW5Db3VudCArIDEpO1xuICAgICAgICAgICAgc2libGluZy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBhcHBseUFyaWFIaWRkZW4oZWwucGFyZW50KCkpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0U2libGluZ3MoZWwpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGVsLnBhcmVudCgpID8gZWwucGFyZW50KCkuY2hpbGRyZW4oKSA6IFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2hpbGQgIT09IGVsWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBicm9hZGNhc3RDbG9zaW5nKG1vZGFsV2luZG93LCByZXN1bHRPclJlYXNvbiwgY2xvc2luZykge1xuICAgICAgICByZXR1cm4gIW1vZGFsV2luZG93LnZhbHVlLm1vZGFsU2NvcGUuJGJyb2FkY2FzdCgnbW9kYWwuY2xvc2luZycsIHJlc3VsdE9yUmVhc29uLCBjbG9zaW5nKS5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1bmhpZGVCYWNrZ3JvdW5kRWxlbWVudHMoKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnWycgKyBBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSArICddJyksXG4gICAgICAgICAgZnVuY3Rpb24oaGlkZGVuRWwpIHtcbiAgICAgICAgICAgIHZhciBhcmlhSGlkZGVuQ291bnQgPSBwYXJzZUludChoaWRkZW5FbC5nZXRBdHRyaWJ1dGUoQVJJQV9ISURERU5fQVRUUklCVVRFX05BTUUpLCAxMCksXG4gICAgICAgICAgICAgIG5ld0hpZGRlbkNvdW50ID0gYXJpYUhpZGRlbkNvdW50IC0gMTtcbiAgICAgICAgICAgIGhpZGRlbkVsLnNldEF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSwgbmV3SGlkZGVuQ291bnQpO1xuXG4gICAgICAgICAgICBpZiAoIW5ld0hpZGRlbkNvdW50KSB7XG4gICAgICAgICAgICAgIGhpZGRlbkVsLnJlbW92ZUF0dHJpYnV0ZShBUklBX0hJRERFTl9BVFRSSUJVVEVfTkFNRSk7XG4gICAgICAgICAgICAgIGhpZGRlbkVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgICRtb2RhbFN0YWNrLmNsb3NlID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSwgcmVzdWx0KSB7XG4gICAgICAgIHZhciBtb2RhbFdpbmRvdyA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpO1xuICAgICAgICB1bmhpZGVCYWNrZ3JvdW5kRWxlbWVudHMoKTtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93ICYmIGJyb2FkY2FzdENsb3NpbmcobW9kYWxXaW5kb3csIHJlc3VsdCwgdHJ1ZSkpIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLmRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICByZW1vdmVNb2RhbFdpbmRvdyhtb2RhbEluc3RhbmNlLCBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbE9wZW5lcik7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gIW1vZGFsV2luZG93O1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suZGlzbWlzcyA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIHJlYXNvbikge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgdW5oaWRlQmFja2dyb3VuZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdyAmJiBicm9hZGNhc3RDbG9zaW5nKG1vZGFsV2luZG93LCByZWFzb24sIGZhbHNlKSkge1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsU2NvcGUuJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUuZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxPcGVuZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhbW9kYWxXaW5kb3c7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5kaXNtaXNzQWxsID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIHZhciB0b3BNb2RhbCA9IHRoaXMuZ2V0VG9wKCk7XG4gICAgICAgIHdoaWxlICh0b3BNb2RhbCAmJiB0aGlzLmRpc21pc3ModG9wTW9kYWwua2V5LCByZWFzb24pKSB7XG4gICAgICAgICAgdG9wTW9kYWwgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5nZXRUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG9wZW5lZFdpbmRvd3MudG9wKCk7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5tb2RhbFJlbmRlcmVkID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUucmVuZGVyRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5mb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGxpc3RbMF0uZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5mb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50ID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGlzdFtsaXN0Lmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suaXNNb2RhbEZvY3VzZWQgPSBmdW5jdGlvbihldnQsIG1vZGFsV2luZG93KSB7XG4gICAgICAgIGlmIChldnQgJiYgbW9kYWxXaW5kb3cpIHtcbiAgICAgICAgICB2YXIgbW9kYWxEb21FbCA9IG1vZGFsV2luZG93LnZhbHVlLm1vZGFsRG9tRWw7XG4gICAgICAgICAgaWYgKG1vZGFsRG9tRWwgJiYgbW9kYWxEb21FbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT09IG1vZGFsRG9tRWxbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmlzRm9jdXNJbkZpcnN0SXRlbSA9IGZ1bmN0aW9uKGV2dCwgbGlzdCkge1xuICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIChldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50KSA9PT0gbGlzdFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5pc0ZvY3VzSW5MYXN0SXRlbSA9IGZ1bmN0aW9uKGV2dCwgbGlzdCkge1xuICAgICAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIChldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50KSA9PT0gbGlzdFtsaXN0Lmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmxvYWRGb2N1c0VsZW1lbnRMaXN0ID0gZnVuY3Rpb24obW9kYWxXaW5kb3cpIHtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgdmFyIG1vZGFsRG9tRTEgPSBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbERvbUVsO1xuICAgICAgICAgIGlmIChtb2RhbERvbUUxICYmIG1vZGFsRG9tRTEubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBtb2RhbERvbUUxWzBdLnF1ZXJ5U2VsZWN0b3JBbGwodGFiYmFibGVTZWxlY3Rvcik7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHMgP1xuICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNWaXNpYmxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KSA6IGVsZW1lbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuICRtb2RhbFN0YWNrO1xuICAgIH1dKVxuXG4gIC5wcm92aWRlcignJHVpYk1vZGFsJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyICRtb2RhbFByb3ZpZGVyID0ge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgIGJhY2tkcm9wOiB0cnVlLCAvL2NhbiBhbHNvIGJlIGZhbHNlIG9yICdzdGF0aWMnXG4gICAgICAgIGtleWJvYXJkOiB0cnVlXG4gICAgICB9LFxuICAgICAgJGdldDogWyckcm9vdFNjb3BlJywgJyRxJywgJyRkb2N1bWVudCcsICckdGVtcGxhdGVSZXF1ZXN0JywgJyRjb250cm9sbGVyJywgJyR1aWJSZXNvbHZlJywgJyR1aWJNb2RhbFN0YWNrJyxcbiAgICAgICAgZnVuY3Rpb24gKCRyb290U2NvcGUsICRxLCAkZG9jdW1lbnQsICR0ZW1wbGF0ZVJlcXVlc3QsICRjb250cm9sbGVyLCAkdWliUmVzb2x2ZSwgJG1vZGFsU3RhY2spIHtcbiAgICAgICAgICB2YXIgJG1vZGFsID0ge307XG5cbiAgICAgICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZVByb21pc2Uob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudGVtcGxhdGUgPyAkcS53aGVuKG9wdGlvbnMudGVtcGxhdGUpIDpcbiAgICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChhbmd1bGFyLmlzRnVuY3Rpb24ob3B0aW9ucy50ZW1wbGF0ZVVybCkgP1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudGVtcGxhdGVVcmwoKSA6IG9wdGlvbnMudGVtcGxhdGVVcmwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcm9taXNlQ2hhaW4gPSBudWxsO1xuICAgICAgICAgICRtb2RhbC5nZXRQcm9taXNlQ2hhaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlQ2hhaW47XG4gICAgICAgICAgfTtcblxuICAgICAgICAgICRtb2RhbC5vcGVuID0gZnVuY3Rpb24obW9kYWxPcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgbW9kYWxSZXN1bHREZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgbW9kYWxPcGVuZWREZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgbW9kYWxDbG9zZWREZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICB2YXIgbW9kYWxSZW5kZXJEZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIC8vcHJlcGFyZSBhbiBpbnN0YW5jZSBvZiBhIG1vZGFsIHRvIGJlIGluamVjdGVkIGludG8gY29udHJvbGxlcnMgYW5kIHJldHVybmVkIHRvIGEgY2FsbGVyXG4gICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgICAgcmVzdWx0OiBtb2RhbFJlc3VsdERlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgICAgIG9wZW5lZDogbW9kYWxPcGVuZWREZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICBjbG9zZWQ6IG1vZGFsQ2xvc2VkRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgcmVuZGVyZWQ6IG1vZGFsUmVuZGVyRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJG1vZGFsU3RhY2suY2xvc2UobW9kYWxJbnN0YW5jZSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGlzbWlzczogZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsSW5zdGFuY2UsIHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vbWVyZ2UgYW5kIGNsZWFuIHVwIG9wdGlvbnNcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCAkbW9kYWxQcm92aWRlci5vcHRpb25zLCBtb2RhbE9wdGlvbnMpO1xuICAgICAgICAgICAgbW9kYWxPcHRpb25zLnJlc29sdmUgPSBtb2RhbE9wdGlvbnMucmVzb2x2ZSB8fCB7fTtcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucy5hcHBlbmRUbyA9IG1vZGFsT3B0aW9ucy5hcHBlbmRUbyB8fCAkZG9jdW1lbnQuZmluZCgnYm9keScpLmVxKDApO1xuXG4gICAgICAgICAgICBpZiAoIW1vZGFsT3B0aW9ucy5hcHBlbmRUby5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcHBlbmRUbyBlbGVtZW50IG5vdCBmb3VuZC4gTWFrZSBzdXJlIHRoYXQgdGhlIGVsZW1lbnQgcGFzc2VkIGlzIGluIERPTS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy92ZXJpZnkgb3B0aW9uc1xuICAgICAgICAgICAgaWYgKCFtb2RhbE9wdGlvbnMuY29tcG9uZW50ICYmICFtb2RhbE9wdGlvbnMudGVtcGxhdGUgJiYgIW1vZGFsT3B0aW9ucy50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiBjb21wb25lbnQgb3IgdGVtcGxhdGUgb3IgdGVtcGxhdGVVcmwgb3B0aW9ucyBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2U7XG4gICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlID0gJHEud2hlbigkdWliUmVzb2x2ZS5yZXNvbHZlKG1vZGFsT3B0aW9ucy5yZXNvbHZlLCB7fSwgbnVsbCwgbnVsbCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSA9XG4gICAgICAgICAgICAgICAgJHEuYWxsKFtnZXRUZW1wbGF0ZVByb21pc2UobW9kYWxPcHRpb25zKSwgJHVpYlJlc29sdmUucmVzb2x2ZShtb2RhbE9wdGlvbnMucmVzb2x2ZSwge30sIG51bGwsIG51bGwpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVXaXRoVGVtcGxhdGUoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZXhpc3RpbmcgcHJvbWlzZSBjaGFpbi5cbiAgICAgICAgICAgIC8vIFRoZW4gc3dpdGNoIHRvIG91ciBvd24gY29tYmluZWQgcHJvbWlzZSBkZXBlbmRlbmN5IChyZWdhcmRsZXNzIG9mIGhvdyB0aGUgcHJldmlvdXMgbW9kYWwgZmFyZWQpLlxuICAgICAgICAgICAgLy8gVGhlbiBhZGQgdG8gJG1vZGFsU3RhY2sgYW5kIHJlc29sdmUgb3BlbmVkLlxuICAgICAgICAgICAgLy8gRmluYWxseSBjbGVhbiB1cCB0aGUgY2hhaW4gdmFyaWFibGUgaWYgbm8gc3Vic2VxdWVudCBtb2RhbCBoYXMgb3ZlcndyaXR0ZW4gaXQuXG4gICAgICAgICAgICB2YXIgc2FtZVByb21pc2U7XG4gICAgICAgICAgICBzYW1lUHJvbWlzZSA9IHByb21pc2VDaGFpbiA9ICRxLmFsbChbcHJvbWlzZUNoYWluXSlcbiAgICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZVdpdGhUZW1wbGF0ZSwgcmVzb2x2ZVdpdGhUZW1wbGF0ZSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gcmVzb2x2ZVN1Y2Nlc3ModHBsQW5kVmFycykge1xuICAgICAgICAgICAgICAgIHZhciBwcm92aWRlZFNjb3BlID0gbW9kYWxPcHRpb25zLnNjb3BlIHx8ICRyb290U2NvcGU7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxTY29wZSA9IHByb3ZpZGVkU2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJGNsb3NlID0gbW9kYWxJbnN0YW5jZS5jbG9zZTtcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRkaXNtaXNzID0gbW9kYWxJbnN0YW5jZS5kaXNtaXNzO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsU2NvcGUuJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRkaXNtaXNzKCckdWliVW5zY2hlZHVsZWREZXN0cnVjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsID0ge1xuICAgICAgICAgICAgICAgICAgc2NvcGU6IG1vZGFsU2NvcGUsXG4gICAgICAgICAgICAgICAgICBkZWZlcnJlZDogbW9kYWxSZXN1bHREZWZlcnJlZCxcbiAgICAgICAgICAgICAgICAgIHJlbmRlckRlZmVycmVkOiBtb2RhbFJlbmRlckRlZmVycmVkLFxuICAgICAgICAgICAgICAgICAgY2xvc2VkRGVmZXJyZWQ6IG1vZGFsQ2xvc2VkRGVmZXJyZWQsXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb246IG1vZGFsT3B0aW9ucy5hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcDogbW9kYWxPcHRpb25zLmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IG1vZGFsT3B0aW9ucy5rZXlib2FyZCxcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wQ2xhc3M6IG1vZGFsT3B0aW9ucy5iYWNrZHJvcENsYXNzLFxuICAgICAgICAgICAgICAgICAgd2luZG93VG9wQ2xhc3M6IG1vZGFsT3B0aW9ucy53aW5kb3dUb3BDbGFzcyxcbiAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiBtb2RhbE9wdGlvbnMud2luZG93Q2xhc3MsXG4gICAgICAgICAgICAgICAgICB3aW5kb3dUZW1wbGF0ZVVybDogbW9kYWxPcHRpb25zLndpbmRvd1RlbXBsYXRlVXJsLFxuICAgICAgICAgICAgICAgICAgYXJpYUxhYmVsbGVkQnk6IG1vZGFsT3B0aW9ucy5hcmlhTGFiZWxsZWRCeSxcbiAgICAgICAgICAgICAgICAgIGFyaWFEZXNjcmliZWRCeTogbW9kYWxPcHRpb25zLmFyaWFEZXNjcmliZWRCeSxcbiAgICAgICAgICAgICAgICAgIHNpemU6IG1vZGFsT3B0aW9ucy5zaXplLFxuICAgICAgICAgICAgICAgICAgb3BlbmVkQ2xhc3M6IG1vZGFsT3B0aW9ucy5vcGVuZWRDbGFzcyxcbiAgICAgICAgICAgICAgICAgIGFwcGVuZFRvOiBtb2RhbE9wdGlvbnMuYXBwZW5kVG9cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjdHJsSW5zdGFuY2UsIGN0cmxJbnN0YW50aWF0ZSwgY3RybExvY2FscyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsT3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdExvY2Fscyhjb21wb25lbnQsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBjb21wb25lbnQubmFtZSA9IG1vZGFsT3B0aW9ucy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICBtb2RhbC5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgY29uc3RydWN0TG9jYWxzKGN0cmxMb2NhbHMsIHRydWUsIGZhbHNlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgLy8gdGhlIHRoaXJkIHBhcmFtIHdpbGwgbWFrZSB0aGUgY29udHJvbGxlciBpbnN0YW50aWF0ZSBsYXRlcixwcml2YXRlIGFwaVxuICAgICAgICAgICAgICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2Jsb2IvbWFzdGVyL3NyYy9uZy9jb250cm9sbGVyLmpzI0wxMjZcbiAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW50aWF0ZSA9ICRjb250cm9sbGVyKG1vZGFsT3B0aW9ucy5jb250cm9sbGVyLCBjdHJsTG9jYWxzLCB0cnVlLCBtb2RhbE9wdGlvbnMuY29udHJvbGxlckFzKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlckFzICYmIG1vZGFsT3B0aW9ucy5iaW5kVG9Db250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZSA9IGN0cmxJbnN0YW50aWF0ZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgY3RybEluc3RhbmNlLiRjbG9zZSA9IG1vZGFsU2NvcGUuJGNsb3NlO1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UuJGRpc21pc3MgPSBtb2RhbFNjb3BlLiRkaXNtaXNzO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChjdHJsSW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAkcmVzb2x2ZTogY3RybExvY2Fscy4kc2NvcGUuJHJlc29sdmVcbiAgICAgICAgICAgICAgICAgICAgfSwgcHJvdmlkZWRTY29wZSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGN0cmxJbnN0YW5jZSA9IGN0cmxJbnN0YW50aWF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGN0cmxJbnN0YW5jZS4kb25Jbml0KSkge1xuICAgICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UuJG9uSW5pdCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghbW9kYWxPcHRpb25zLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgbW9kYWwuY29udGVudCA9IHRwbEFuZFZhcnNbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJG1vZGFsU3RhY2sub3Blbihtb2RhbEluc3RhbmNlLCBtb2RhbCk7XG4gICAgICAgICAgICAgICAgbW9kYWxPcGVuZWREZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29uc3RydWN0TG9jYWxzKG9iaiwgdGVtcGxhdGUsIGluc3RhbmNlT25TY29wZSwgaW5qZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgb2JqLiRzY29wZSA9IG1vZGFsU2NvcGU7XG4gICAgICAgICAgICAgICAgICBvYmouJHNjb3BlLiRyZXNvbHZlID0ge307XG4gICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2VPblNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai4kc2NvcGUuJHVpYk1vZGFsSW5zdGFuY2UgPSBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLiR1aWJNb2RhbEluc3RhbmNlID0gbW9kYWxJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFyIHJlc29sdmVzID0gdGVtcGxhdGUgPyB0cGxBbmRWYXJzWzFdIDogdHBsQW5kVmFycztcbiAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNvbHZlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvYmouJHNjb3BlLiRyZXNvbHZlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIHJlc29sdmVFcnJvcihyZWFzb24pIHtcbiAgICAgICAgICAgICAgbW9kYWxPcGVuZWREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgbW9kYWxSZXN1bHREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pWydmaW5hbGx5J10oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9taXNlQ2hhaW4gPT09IHNhbWVQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZUNoYWluID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBtb2RhbEluc3RhbmNlO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gJG1vZGFsO1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcblxuICAgIHJldHVybiAkbW9kYWxQcm92aWRlcjtcbiAgfSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnaW5nJywgW10pXG4vKipcbiAqIEhlbHBlciBpbnRlcm5hbCBzZXJ2aWNlIGZvciBnZW5lcmF0aW5nIGNvbW1vbiBjb250cm9sbGVyIGNvZGUgYmV0d2VlbiB0aGVcbiAqIHBhZ2VyIGFuZCBwYWdpbmF0aW9uIGNvbXBvbmVudHNcbiAqL1xuLmZhY3RvcnkoJ3VpYlBhZ2luZycsIFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbihjdHJsLCAkc2NvcGUsICRhdHRycykge1xuICAgICAgY3RybC5zZXROdW1QYWdlcyA9ICRhdHRycy5udW1QYWdlcyA/ICRwYXJzZSgkYXR0cnMubnVtUGFnZXMpLmFzc2lnbiA6IGFuZ3VsYXIubm9vcDtcbiAgICAgIGN0cmwubmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9OyAvLyBudWxsTW9kZWxDdHJsXG4gICAgICBjdHJsLl93YXRjaGVycyA9IFtdO1xuXG4gICAgICBjdHJsLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybCwgY29uZmlnKSB7XG4gICAgICAgIGN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcbiAgICAgICAgY3RybC5jb25maWcgPSBjb25maWc7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN0cmwucmVuZGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCRhdHRycy5pdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgICBjdHJsLl93YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkYXR0cnMuaXRlbXNQZXJQYWdlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY3RybC5pdGVtc1BlclBhZ2UgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgICAgJHNjb3BlLnRvdGFsUGFnZXMgPSBjdHJsLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcbiAgICAgICAgICAgIGN0cmwudXBkYXRlUGFnZSgpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHJsLml0ZW1zUGVyUGFnZSA9IGNvbmZpZy5pdGVtc1BlclBhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCd0b3RhbEl0ZW1zJywgZnVuY3Rpb24obmV3VG90YWwsIG9sZFRvdGFsKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld1RvdGFsKSB8fCBuZXdUb3RhbCAhPT0gb2xkVG90YWwpIHtcbiAgICAgICAgICAgICRzY29wZS50b3RhbFBhZ2VzID0gY3RybC5jYWxjdWxhdGVUb3RhbFBhZ2VzKCk7XG4gICAgICAgICAgICBjdHJsLnVwZGF0ZVBhZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY3RybC5jYWxjdWxhdGVUb3RhbFBhZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0b3RhbFBhZ2VzID0gY3RybC5pdGVtc1BlclBhZ2UgPCAxID8gMSA6IE1hdGguY2VpbCgkc2NvcGUudG90YWxJdGVtcyAvIGN0cmwuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRvdGFsUGFnZXMgfHwgMCwgMSk7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUucGFnZSA9IHBhcnNlSW50KGN0cmwubmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSwgMTApIHx8IDE7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuc2VsZWN0UGFnZSA9IGZ1bmN0aW9uKHBhZ2UsIGV2dCkge1xuICAgICAgICBpZiAoZXZ0KSB7XG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2xpY2tBbGxvd2VkID0gISRzY29wZS5uZ0Rpc2FibGVkIHx8ICFldnQ7XG4gICAgICAgIGlmIChjbGlja0FsbG93ZWQgJiYgJHNjb3BlLnBhZ2UgIT09IHBhZ2UgJiYgcGFnZSA+IDAgJiYgcGFnZSA8PSAkc2NvcGUudG90YWxQYWdlcykge1xuICAgICAgICAgIGlmIChldnQgJiYgZXZ0LnRhcmdldCkge1xuICAgICAgICAgICAgZXZ0LnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN0cmwubmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShwYWdlKTtcbiAgICAgICAgICBjdHJsLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJHNjb3BlLmdldFRleHQgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZVtrZXkgKyAnVGV4dCddIHx8IGN0cmwuY29uZmlnW2tleSArICdUZXh0J107XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUubm9QcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnBhZ2UgPT09IDE7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUubm9OZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUucGFnZSA9PT0gJHNjb3BlLnRvdGFsUGFnZXM7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnVwZGF0ZVBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC5zZXROdW1QYWdlcygkc2NvcGUuJHBhcmVudCwgJHNjb3BlLnRvdGFsUGFnZXMpOyAvLyBSZWFkb25seSB2YXJpYWJsZVxuXG4gICAgICAgIGlmICgkc2NvcGUucGFnZSA+ICRzY29wZS50b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgJHNjb3BlLnNlbGVjdFBhZ2UoJHNjb3BlLnRvdGFsUGFnZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0cmwubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB3aGlsZSAoY3RybC5fd2F0Y2hlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY3RybC5fd2F0Y2hlcnMuc2hpZnQoKSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnZXInLCBbJ3VpLmJvb3RzdHJhcC5wYWdpbmcnLCAndWkuYm9vdHN0cmFwLnRhYmluZGV4J10pXG5cbi5jb250cm9sbGVyKCdVaWJQYWdlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAndWliUGFnaW5nJywgJ3VpYlBhZ2VyQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHVpYlBhZ2luZywgdWliUGFnZXJDb25maWcpIHtcbiAgJHNjb3BlLmFsaWduID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFsaWduKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hbGlnbikgOiB1aWJQYWdlckNvbmZpZy5hbGlnbjtcblxuICB1aWJQYWdpbmcuY3JlYXRlKHRoaXMsICRzY29wZSwgJGF0dHJzKTtcbn1dKVxuXG4uY29uc3RhbnQoJ3VpYlBhZ2VyQ29uZmlnJywge1xuICBpdGVtc1BlclBhZ2U6IDEwLFxuICBwcmV2aW91c1RleHQ6ICfCqyBQcmV2aW91cycsXG4gIG5leHRUZXh0OiAnTmV4dCDCuycsXG4gIGFsaWduOiB0cnVlXG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQYWdlcicsIFsndWliUGFnZXJDb25maWcnLCBmdW5jdGlvbih1aWJQYWdlckNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICB0b3RhbEl0ZW1zOiAnPScsXG4gICAgICBwcmV2aW91c1RleHQ6ICdAJyxcbiAgICAgIG5leHRUZXh0OiAnQCcsXG4gICAgICBuZ0Rpc2FibGVkOiAnPSdcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsndWliUGFnZXInLCAnP25nTW9kZWwnXSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQYWdlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3BhZ2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3BhZ2VyL3BhZ2VyLmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygncGFnZXInKTtcbiAgICAgIHZhciBwYWdpbmF0aW9uQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSB7XG4gICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuICAgICAgfVxuXG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KG5nTW9kZWxDdHJsLCB1aWJQYWdlckNvbmZpZyk7XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBhZ2luYXRpb24nLCBbJ3VpLmJvb3RzdHJhcC5wYWdpbmcnLCAndWkuYm9vdHN0cmFwLnRhYmluZGV4J10pXG4uY29udHJvbGxlcignVWliUGFnaW5hdGlvbkNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAnJHBhcnNlJywgJ3VpYlBhZ2luZycsICd1aWJQYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgdWliUGFnaW5nLCB1aWJQYWdpbmF0aW9uQ29uZmlnKSB7XG4gIHZhciBjdHJsID0gdGhpcztcbiAgLy8gU2V0dXAgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXG4gIHZhciBtYXhTaXplID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLm1heFNpemUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLm1heFNpemUpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5tYXhTaXplLFxuICAgIHJvdGF0ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5yb3RhdGUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJvdGF0ZSkgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLnJvdGF0ZSxcbiAgICBmb3JjZUVsbGlwc2VzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmZvcmNlRWxsaXBzZXMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmZvcmNlRWxsaXBzZXMpIDogdWliUGFnaW5hdGlvbkNvbmZpZy5mb3JjZUVsbGlwc2VzLFxuICAgIGJvdW5kYXJ5TGlua051bWJlcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYm91bmRhcnlMaW5rTnVtYmVycykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuYm91bmRhcnlMaW5rTnVtYmVycykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmJvdW5kYXJ5TGlua051bWJlcnMsXG4gICAgcGFnZUxhYmVsID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnBhZ2VMYWJlbCkgPyBmdW5jdGlvbihpZHgpIHsgcmV0dXJuICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5wYWdlTGFiZWwsIHskcGFnZTogaWR4fSk7IH0gOiBhbmd1bGFyLmlkZW50aXR5O1xuICAkc2NvcGUuYm91bmRhcnlMaW5rcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5ib3VuZGFyeUxpbmtzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5ib3VuZGFyeUxpbmtzKSA6IHVpYlBhZ2luYXRpb25Db25maWcuYm91bmRhcnlMaW5rcztcbiAgJHNjb3BlLmRpcmVjdGlvbkxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmRpcmVjdGlvbkxpbmtzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5kaXJlY3Rpb25MaW5rcykgOiB1aWJQYWdpbmF0aW9uQ29uZmlnLmRpcmVjdGlvbkxpbmtzO1xuICAkYXR0cnMuJHNldCgncm9sZScsICdtZW51Jyk7XG5cbiAgdWliUGFnaW5nLmNyZWF0ZSh0aGlzLCAkc2NvcGUsICRhdHRycyk7XG5cbiAgaWYgKCRhdHRycy5tYXhTaXplKSB7XG4gICAgY3RybC5fd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5tYXhTaXplKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIG1heFNpemUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgY3RybC5yZW5kZXIoKTtcbiAgICB9KSk7XG4gIH1cblxuICAvLyBDcmVhdGUgcGFnZSBvYmplY3QgdXNlZCBpbiB0ZW1wbGF0ZVxuICBmdW5jdGlvbiBtYWtlUGFnZShudW1iZXIsIHRleHQsIGlzQWN0aXZlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgICAgdGV4dDogdGV4dCxcbiAgICAgIGFjdGl2ZTogaXNBY3RpdmVcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZXMoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpIHtcbiAgICB2YXIgcGFnZXMgPSBbXTtcblxuICAgIC8vIERlZmF1bHQgcGFnZSBsaW1pdHNcbiAgICB2YXIgc3RhcnRQYWdlID0gMSwgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gICAgdmFyIGlzTWF4U2l6ZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChtYXhTaXplKSAmJiBtYXhTaXplIDwgdG90YWxQYWdlcztcblxuICAgIC8vIHJlY29tcHV0ZSBpZiBtYXhTaXplXG4gICAgaWYgKGlzTWF4U2l6ZWQpIHtcbiAgICAgIGlmIChyb3RhdGUpIHtcbiAgICAgICAgLy8gQ3VycmVudCBwYWdlIGlzIGRpc3BsYXllZCBpbiB0aGUgbWlkZGxlIG9mIHRoZSB2aXNpYmxlIG9uZXNcbiAgICAgICAgc3RhcnRQYWdlID0gTWF0aC5tYXgoY3VycmVudFBhZ2UgLSBNYXRoLmZsb29yKG1heFNpemUgLyAyKSwgMSk7XG4gICAgICAgIGVuZFBhZ2UgPSBzdGFydFBhZ2UgKyBtYXhTaXplIC0gMTtcblxuICAgICAgICAvLyBBZGp1c3QgaWYgbGltaXQgaXMgZXhjZWVkZWRcbiAgICAgICAgaWYgKGVuZFBhZ2UgPiB0b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gICAgICAgICAgc3RhcnRQYWdlID0gZW5kUGFnZSAtIG1heFNpemUgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBWaXNpYmxlIHBhZ2VzIGFyZSBwYWdpbmF0ZWQgd2l0aCBtYXhTaXplXG4gICAgICAgIHN0YXJ0UGFnZSA9IChNYXRoLmNlaWwoY3VycmVudFBhZ2UgLyBtYXhTaXplKSAtIDEpICogbWF4U2l6ZSArIDE7XG5cbiAgICAgICAgLy8gQWRqdXN0IGxhc3QgcGFnZSBpZiBsaW1pdCBpcyBleGNlZWRlZFxuICAgICAgICBlbmRQYWdlID0gTWF0aC5taW4oc3RhcnRQYWdlICsgbWF4U2l6ZSAtIDEsIHRvdGFsUGFnZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBwYWdlIG51bWJlciBsaW5rc1xuICAgIGZvciAodmFyIG51bWJlciA9IHN0YXJ0UGFnZTsgbnVtYmVyIDw9IGVuZFBhZ2U7IG51bWJlcisrKSB7XG4gICAgICB2YXIgcGFnZSA9IG1ha2VQYWdlKG51bWJlciwgcGFnZUxhYmVsKG51bWJlciksIG51bWJlciA9PT0gY3VycmVudFBhZ2UpO1xuICAgICAgcGFnZXMucHVzaChwYWdlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlua3MgdG8gbW92ZSBiZXR3ZWVuIHBhZ2Ugc2V0c1xuICAgIGlmIChpc01heFNpemVkICYmIG1heFNpemUgPiAwICYmICghcm90YXRlIHx8IGZvcmNlRWxsaXBzZXMgfHwgYm91bmRhcnlMaW5rTnVtYmVycykpIHtcbiAgICAgIGlmIChzdGFydFBhZ2UgPiAxKSB7XG4gICAgICAgIGlmICghYm91bmRhcnlMaW5rTnVtYmVycyB8fCBzdGFydFBhZ2UgPiAzKSB7IC8vbmVlZCBlbGxpcHNpcyBmb3IgYWxsIG9wdGlvbnMgdW5sZXNzIHJhbmdlIGlzIHRvbyBjbG9zZSB0byBiZWdpbm5pbmdcbiAgICAgICAgdmFyIHByZXZpb3VzUGFnZVNldCA9IG1ha2VQYWdlKHN0YXJ0UGFnZSAtIDEsICcuLi4nLCBmYWxzZSk7XG4gICAgICAgIHBhZ2VzLnVuc2hpZnQocHJldmlvdXNQYWdlU2V0KTtcbiAgICAgIH1cbiAgICAgICAgaWYgKGJvdW5kYXJ5TGlua051bWJlcnMpIHtcbiAgICAgICAgICBpZiAoc3RhcnRQYWdlID09PSAzKSB7IC8vbmVlZCB0byByZXBsYWNlIGVsbGlwc2lzIHdoZW4gdGhlIGJ1dHRvbnMgd291bGQgYmUgc2VxdWVudGlhbFxuICAgICAgICAgICAgdmFyIHNlY29uZFBhZ2VMaW5rID0gbWFrZVBhZ2UoMiwgJzInLCBmYWxzZSk7XG4gICAgICAgICAgICBwYWdlcy51bnNoaWZ0KHNlY29uZFBhZ2VMaW5rKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9hZGQgdGhlIGZpcnN0IHBhZ2VcbiAgICAgICAgICB2YXIgZmlyc3RQYWdlTGluayA9IG1ha2VQYWdlKDEsICcxJywgZmFsc2UpO1xuICAgICAgICAgIHBhZ2VzLnVuc2hpZnQoZmlyc3RQYWdlTGluayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFBhZ2UgPCB0b3RhbFBhZ2VzKSB7XG4gICAgICAgIGlmICghYm91bmRhcnlMaW5rTnVtYmVycyB8fCBlbmRQYWdlIDwgdG90YWxQYWdlcyAtIDIpIHsgLy9uZWVkIGVsbGlwc2lzIGZvciBhbGwgb3B0aW9ucyB1bmxlc3MgcmFuZ2UgaXMgdG9vIGNsb3NlIHRvIGVuZFxuICAgICAgICB2YXIgbmV4dFBhZ2VTZXQgPSBtYWtlUGFnZShlbmRQYWdlICsgMSwgJy4uLicsIGZhbHNlKTtcbiAgICAgICAgcGFnZXMucHVzaChuZXh0UGFnZVNldCk7XG4gICAgICB9XG4gICAgICAgIGlmIChib3VuZGFyeUxpbmtOdW1iZXJzKSB7XG4gICAgICAgICAgaWYgKGVuZFBhZ2UgPT09IHRvdGFsUGFnZXMgLSAyKSB7IC8vbmVlZCB0byByZXBsYWNlIGVsbGlwc2lzIHdoZW4gdGhlIGJ1dHRvbnMgd291bGQgYmUgc2VxdWVudGlhbFxuICAgICAgICAgICAgdmFyIHNlY29uZFRvTGFzdFBhZ2VMaW5rID0gbWFrZVBhZ2UodG90YWxQYWdlcyAtIDEsIHRvdGFsUGFnZXMgLSAxLCBmYWxzZSk7XG4gICAgICAgICAgICBwYWdlcy5wdXNoKHNlY29uZFRvTGFzdFBhZ2VMaW5rKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9hZGQgdGhlIGxhc3QgcGFnZVxuICAgICAgICAgIHZhciBsYXN0UGFnZUxpbmsgPSBtYWtlUGFnZSh0b3RhbFBhZ2VzLCB0b3RhbFBhZ2VzLCBmYWxzZSk7XG4gICAgICAgICAgcGFnZXMucHVzaChsYXN0UGFnZUxpbmspO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWdlcztcbiAgfVxuXG4gIHZhciBvcmlnaW5hbFJlbmRlciA9IHRoaXMucmVuZGVyO1xuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIG9yaWdpbmFsUmVuZGVyKCk7XG4gICAgaWYgKCRzY29wZS5wYWdlID4gMCAmJiAkc2NvcGUucGFnZSA8PSAkc2NvcGUudG90YWxQYWdlcykge1xuICAgICAgJHNjb3BlLnBhZ2VzID0gZ2V0UGFnZXMoJHNjb3BlLnBhZ2UsICRzY29wZS50b3RhbFBhZ2VzKTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnN0YW50KCd1aWJQYWdpbmF0aW9uQ29uZmlnJywge1xuICBpdGVtc1BlclBhZ2U6IDEwLFxuICBib3VuZGFyeUxpbmtzOiBmYWxzZSxcbiAgYm91bmRhcnlMaW5rTnVtYmVyczogZmFsc2UsXG4gIGRpcmVjdGlvbkxpbmtzOiB0cnVlLFxuICBmaXJzdFRleHQ6ICdGaXJzdCcsXG4gIHByZXZpb3VzVGV4dDogJ1ByZXZpb3VzJyxcbiAgbmV4dFRleHQ6ICdOZXh0JyxcbiAgbGFzdFRleHQ6ICdMYXN0JyxcbiAgcm90YXRlOiB0cnVlLFxuICBmb3JjZUVsbGlwc2VzOiBmYWxzZVxufSlcblxuLmRpcmVjdGl2ZSgndWliUGFnaW5hdGlvbicsIFsnJHBhcnNlJywgJ3VpYlBhZ2luYXRpb25Db25maWcnLCBmdW5jdGlvbigkcGFyc2UsIHVpYlBhZ2luYXRpb25Db25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBzY29wZToge1xuICAgICAgdG90YWxJdGVtczogJz0nLFxuICAgICAgZmlyc3RUZXh0OiAnQCcsXG4gICAgICBwcmV2aW91c1RleHQ6ICdAJyxcbiAgICAgIG5leHRUZXh0OiAnQCcsXG4gICAgICBsYXN0VGV4dDogJ0AnLFxuICAgICAgbmdEaXNhYmxlZDonPSdcbiAgICB9LFxuICAgIHJlcXVpcmU6IFsndWliUGFnaW5hdGlvbicsICc/bmdNb2RlbCddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYlBhZ2luYXRpb25Db250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdwYWdpbmF0aW9uJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sJztcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ3BhZ2luYXRpb24nKTtcbiAgICAgIHZhciBwYWdpbmF0aW9uQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSB7XG4gICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcbiAgICAgIH1cblxuICAgICAgcGFnaW5hdGlvbkN0cmwuaW5pdChuZ01vZGVsQ3RybCwgdWliUGFnaW5hdGlvbkNvbmZpZyk7XG4gICAgfVxuICB9O1xufV0pO1xuXG4vKipcbiAqIFRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgYXJlIHN0aWxsIG91dHN0YW5kaW5nOiBhbmltYXRpb24gYXMgYVxuICogZnVuY3Rpb24sIHBsYWNlbWVudCBhcyBhIGZ1bmN0aW9uLCBpbnNpZGUsIHN1cHBvcnQgZm9yIG1vcmUgdHJpZ2dlcnMgdGhhblxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgaHRtbCB0b29sdGlwcywgYW5kIHNlbGVjdG9yIGRlbGVnYXRpb24uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudG9vbHRpcCcsIFsndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgJ3VpLmJvb3RzdHJhcC5zdGFja2VkTWFwJ10pXG5cbi8qKlxuICogVGhlICR0b29sdGlwIHNlcnZpY2UgY3JlYXRlcyB0b29sdGlwLSBhbmQgcG9wb3Zlci1saWtlIGRpcmVjdGl2ZXMgYXMgd2VsbCBhc1xuICogaG91c2VzIGdsb2JhbCBvcHRpb25zIGZvciB0aGVtLlxuICovXG4ucHJvdmlkZXIoJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oKSB7XG4gIC8vIFRoZSBkZWZhdWx0IG9wdGlvbnMgdG9vbHRpcCBhbmQgcG9wb3Zlci5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgcGxhY2VtZW50Q2xhc3NQcmVmaXg6ICcnLFxuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwb3B1cERlbGF5OiAwLFxuICAgIHBvcHVwQ2xvc2VEZWxheTogMCxcbiAgICB1c2VDb250ZW50RXhwOiBmYWxzZVxuICB9O1xuXG4gIC8vIERlZmF1bHQgaGlkZSB0cmlnZ2VycyBmb3IgZWFjaCBzaG93IHRyaWdnZXJcbiAgdmFyIHRyaWdnZXJNYXAgPSB7XG4gICAgJ21vdXNlZW50ZXInOiAnbW91c2VsZWF2ZScsXG4gICAgJ2NsaWNrJzogJ2NsaWNrJyxcbiAgICAnb3V0c2lkZUNsaWNrJzogJ291dHNpZGVDbGljaycsXG4gICAgJ2ZvY3VzJzogJ2JsdXInLFxuICAgICdub25lJzogJydcbiAgfTtcblxuICAvLyBUaGUgb3B0aW9ucyBzcGVjaWZpZWQgdG8gdGhlIHByb3ZpZGVyIGdsb2JhbGx5LlxuICB2YXIgZ2xvYmFsT3B0aW9ucyA9IHt9O1xuXG4gIC8qKlxuICAgKiBgb3B0aW9ucyh7fSlgIGFsbG93cyBnbG9iYWwgY29uZmlndXJhdGlvbiBvZiBhbGwgdG9vbHRpcHMgaW4gdGhlXG4gICAqIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSggJ0FwcCcsIFsndWkuYm9vdHN0cmFwLnRvb2x0aXAnXSwgZnVuY3Rpb24oICR0b29sdGlwUHJvdmlkZXIgKSB7XG4gICAqICAgICAvLyBwbGFjZSB0b29sdGlwcyBsZWZ0IGluc3RlYWQgb2YgdG9wIGJ5IGRlZmF1bHRcbiAgICogICAgICR0b29sdGlwUHJvdmlkZXIub3B0aW9ucyggeyBwbGFjZW1lbnQ6ICdsZWZ0JyB9ICk7XG4gICAqICAgfSk7XG4gICAqL1xuXHR0aGlzLm9wdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGFuZ3VsYXIuZXh0ZW5kKGdsb2JhbE9wdGlvbnMsIHZhbHVlKTtcblx0fTtcblxuICAvKipcbiAgICogVGhpcyBhbGxvd3MgeW91IHRvIGV4dGVuZCB0aGUgc2V0IG9mIHRyaWdnZXIgbWFwcGluZ3MgYXZhaWxhYmxlLiBFLmcuOlxuICAgKlxuICAgKiAgICR0b29sdGlwUHJvdmlkZXIuc2V0VHJpZ2dlcnMoIHsgJ29wZW5UcmlnZ2VyJzogJ2Nsb3NlVHJpZ2dlcicgfSApO1xuICAgKi9cbiAgdGhpcy5zZXRUcmlnZ2VycyA9IGZ1bmN0aW9uIHNldFRyaWdnZXJzKHRyaWdnZXJzKSB7XG4gICAgYW5ndWxhci5leHRlbmQodHJpZ2dlck1hcCwgdHJpZ2dlcnMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciB0cmFuc2xhdGluZyBjYW1lbC1jYXNlIHRvIHNuYWtlX2Nhc2UuXG4gICAqL1xuICBmdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUpIHtcbiAgICB2YXIgcmVnZXhwID0gL1tBLVpdL2c7XG4gICAgdmFyIHNlcGFyYXRvciA9ICctJztcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKHJlZ2V4cCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWN0dWFsIGluc3RhbmNlIG9mIHRoZSAkdG9vbHRpcCBzZXJ2aWNlLlxuICAgKiBUT0RPIHN1cHBvcnQgbXVsdGlwbGUgdHJpZ2dlcnNcbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckY29tcGlsZScsICckdGltZW91dCcsICckZG9jdW1lbnQnLCAnJHVpYlBvc2l0aW9uJywgJyRpbnRlcnBvbGF0ZScsICckcm9vdFNjb3BlJywgJyRwYXJzZScsICckJHN0YWNrZWRNYXAnLCBmdW5jdGlvbigkd2luZG93LCAkY29tcGlsZSwgJHRpbWVvdXQsICRkb2N1bWVudCwgJHBvc2l0aW9uLCAkaW50ZXJwb2xhdGUsICRyb290U2NvcGUsICRwYXJzZSwgJCRzdGFja2VkTWFwKSB7XG4gICAgdmFyIG9wZW5lZFRvb2x0aXBzID0gJCRzdGFja2VkTWFwLmNyZWF0ZU5ldygpO1xuICAgICRkb2N1bWVudC5vbigna2V5dXAnLCBrZXlwcmVzc0xpc3RlbmVyKTtcblxuICAgICRyb290U2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgJGRvY3VtZW50Lm9mZigna2V5dXAnLCBrZXlwcmVzc0xpc3RlbmVyKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGtleXByZXNzTGlzdGVuZXIoZSkge1xuICAgICAgaWYgKGUud2hpY2ggPT09IDI3KSB7XG4gICAgICAgIHZhciBsYXN0ID0gb3BlbmVkVG9vbHRpcHMudG9wKCk7XG4gICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgbGFzdC52YWx1ZS5jbG9zZSgpO1xuICAgICAgICAgIGxhc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICR0b29sdGlwKHR0VHlwZSwgcHJlZml4LCBkZWZhdWx0VHJpZ2dlclNob3csIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIGdsb2JhbE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHNob3cgYW5kIGhpZGUgdHJpZ2dlcnMuXG4gICAgICAgKlxuICAgICAgICogSWYgYSB0cmlnZ2VyIGlzIHN1cHBsaWVkLFxuICAgICAgICogaXQgaXMgdXNlZCB0byBzaG93IHRoZSB0b29sdGlwOyBvdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdHJpZ2dlcmBcbiAgICAgICAqIG9wdGlvbiBwYXNzZWQgdG8gdGhlIGAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnNgIG1ldGhvZDsgZWxzZSBpdCB3aWxsXG4gICAgICAgKiBkZWZhdWx0IHRvIHRoZSB0cmlnZ2VyIHN1cHBsaWVkIHRvIHRoaXMgZGlyZWN0aXZlIGZhY3RvcnkuXG4gICAgICAgKlxuICAgICAgICogVGhlIGhpZGUgdHJpZ2dlciBpcyBiYXNlZCBvbiB0aGUgc2hvdyB0cmlnZ2VyLiBJZiB0aGUgYHRyaWdnZXJgIG9wdGlvblxuICAgICAgICogd2FzIHBhc3NlZCB0byB0aGUgYCR0b29sdGlwUHJvdmlkZXIub3B0aW9uc2AgbWV0aG9kLCBpdCB3aWxsIHVzZSB0aGVcbiAgICAgICAqIG1hcHBlZCB0cmlnZ2VyIGZyb20gYHRyaWdnZXJNYXBgIG9yIHRoZSBwYXNzZWQgdHJpZ2dlciBpZiB0aGUgbWFwIGlzXG4gICAgICAgKiB1bmRlZmluZWQ7IG90aGVyd2lzZSwgaXQgdXNlcyB0aGUgYHRyaWdnZXJNYXBgIHZhbHVlIG9mIHRoZSBzaG93XG4gICAgICAgKiB0cmlnZ2VyOyBlbHNlIGl0IHdpbGwganVzdCB1c2UgdGhlIHNob3cgdHJpZ2dlci5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0VHJpZ2dlcnModHJpZ2dlcikge1xuICAgICAgICB2YXIgc2hvdyA9ICh0cmlnZ2VyIHx8IG9wdGlvbnMudHJpZ2dlciB8fCBkZWZhdWx0VHJpZ2dlclNob3cpLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciBoaWRlID0gc2hvdy5tYXAoZnVuY3Rpb24odHJpZ2dlcikge1xuICAgICAgICAgIHJldHVybiB0cmlnZ2VyTWFwW3RyaWdnZXJdIHx8IHRyaWdnZXI7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3csXG4gICAgICAgICAgaGlkZTogaGlkZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IHNuYWtlX2Nhc2UodHRUeXBlKTtcblxuICAgICAgdmFyIHN0YXJ0U3ltID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCk7XG4gICAgICB2YXIgZW5kU3ltID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpO1xuICAgICAgdmFyIHRlbXBsYXRlID1cbiAgICAgICAgJzxkaXYgJysgZGlyZWN0aXZlTmFtZSArICctcG9wdXAgJyArXG4gICAgICAgICAgJ3VpYi10aXRsZT1cIicgKyBzdGFydFN5bSArICd0aXRsZScgKyBlbmRTeW0gKyAnXCIgJyArXG4gICAgICAgICAgKG9wdGlvbnMudXNlQ29udGVudEV4cCA/XG4gICAgICAgICAgICAnY29udGVudC1leHA9XCJjb250ZW50RXhwKClcIiAnIDpcbiAgICAgICAgICAgICdjb250ZW50PVwiJyArIHN0YXJ0U3ltICsgJ2NvbnRlbnQnICsgZW5kU3ltICsgJ1wiICcpICtcbiAgICAgICAgICAnb3JpZ2luLXNjb3BlPVwib3JpZ1Njb3BlXCIgJyArXG4gICAgICAgICAgJ2NsYXNzPVwidWliLXBvc2l0aW9uLW1lYXN1cmUgJyArIHByZWZpeCArICdcIiAnICtcbiAgICAgICAgICAndG9vbHRpcC1hbmltYXRpb24tY2xhc3M9XCJmYWRlXCInICtcbiAgICAgICAgICAndWliLXRvb2x0aXAtY2xhc3NlcyAnICtcbiAgICAgICAgICAnbmctY2xhc3M9XCJ7IGluOiBpc09wZW4gfVwiICcgK1xuICAgICAgICAgICc+JyArXG4gICAgICAgICc8L2Rpdj4nO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbSwgdEF0dHJzKSB7XG4gICAgICAgICAgdmFyIHRvb2x0aXBMaW5rZXIgPSAkY29tcGlsZSh0ZW1wbGF0ZSk7XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIHRvb2x0aXBDdHJsKSB7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcDtcbiAgICAgICAgICAgIHZhciB0b29sdGlwTGlua2VkU2NvcGU7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgc2hvd1RpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgaGlkZVRpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgdmFyIGFkanVzdG1lbnRUaW1lb3V0O1xuICAgICAgICAgICAgdmFyIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKG9wdGlvbnMuYXBwZW5kVG9Cb2R5KSA/IG9wdGlvbnMuYXBwZW5kVG9Cb2R5IDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlcnMgPSBnZXRUcmlnZ2Vycyh1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIGhhc0VuYWJsZUV4cCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdFbmFibGUnXSk7XG4gICAgICAgICAgICB2YXIgdHRTY29wZSA9IHNjb3BlLiRuZXcodHJ1ZSk7XG4gICAgICAgICAgICB2YXIgcmVwb3NpdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlzT3BlblBhcnNlID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnNbcHJlZml4ICsgJ0lzT3BlbiddKSA/ICRwYXJzZShhdHRyc1twcmVmaXggKyAnSXNPcGVuJ10pIDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgY29udGVudFBhcnNlID0gb3B0aW9ucy51c2VDb250ZW50RXhwID8gJHBhcnNlKGF0dHJzW3R0VHlwZV0pIDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gW107XG4gICAgICAgICAgICB2YXIgbGFzdFBsYWNlbWVudDtcblxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uVG9vbHRpcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0b29sdGlwIGV4aXN0cyBhbmQgaXMgbm90IGVtcHR5XG4gICAgICAgICAgICAgIGlmICghdG9vbHRpcCB8fCAhdG9vbHRpcC5odG1sKCkpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB0dFBvc2l0aW9uID0gJHBvc2l0aW9uLnBvc2l0aW9uRWxlbWVudHMoZWxlbWVudCwgdG9vbHRpcCwgdHRTY29wZS5wbGFjZW1lbnQsIGFwcGVuZFRvQm9keSk7XG4gICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbEhlaWdodCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHRvb2x0aXAub2Zmc2V0SGVpZ2h0KSA/IHRvb2x0aXAub2Zmc2V0SGVpZ2h0IDogdG9vbHRpcC5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50UG9zID0gYXBwZW5kVG9Cb2R5ID8gJHBvc2l0aW9uLm9mZnNldChlbGVtZW50KSA6ICRwb3NpdGlvbi5wb3NpdGlvbihlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIHRvb2x0aXAuY3NzKHsgdG9wOiB0dFBvc2l0aW9uLnRvcCArICdweCcsIGxlZnQ6IHR0UG9zaXRpb24ubGVmdCArICdweCcgfSk7XG4gICAgICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50Q2xhc3NlcyA9IHR0UG9zaXRpb24ucGxhY2VtZW50LnNwbGl0KCctJyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICghdG9vbHRpcC5oYXNDbGFzcyhwbGFjZW1lbnRDbGFzc2VzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZUNsYXNzKGxhc3RQbGFjZW1lbnQuc3BsaXQoJy0nKVswXSk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuYWRkQ2xhc3MocGxhY2VtZW50Q2xhc3Nlc1swXSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICghdG9vbHRpcC5oYXNDbGFzcyhvcHRpb25zLnBsYWNlbWVudENsYXNzUHJlZml4ICsgdHRQb3NpdGlvbi5wbGFjZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlQ2xhc3Mob3B0aW9ucy5wbGFjZW1lbnRDbGFzc1ByZWZpeCArIGxhc3RQbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0b29sdGlwLmFkZENsYXNzKG9wdGlvbnMucGxhY2VtZW50Q2xhc3NQcmVmaXggKyB0dFBvc2l0aW9uLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGFkanVzdG1lbnRUaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gYW5ndWxhci5pc0RlZmluZWQodG9vbHRpcC5vZmZzZXRIZWlnaHQpID8gdG9vbHRpcC5vZmZzZXRIZWlnaHQgOiB0b29sdGlwLnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWRqdXN0bWVudCA9ICRwb3NpdGlvbi5hZGp1c3RUb3AocGxhY2VtZW50Q2xhc3NlcywgZWxlbWVudFBvcywgaW5pdGlhbEhlaWdodCwgY3VycmVudEhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGp1c3RtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5jc3MoYWRqdXN0bWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWRqdXN0bWVudFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBmaXJzdCB0aW1lIHRocm91Z2ggdHQgZWxlbWVudCB3aWxsIGhhdmUgdGhlXG4gICAgICAgICAgICAgICAgICAvLyB1aWItcG9zaXRpb24tbWVhc3VyZSBjbGFzcyBvciBpZiB0aGUgcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAvLyBoYXMgY2hhbmdlZCB3ZSBuZWVkIHRvIHBvc2l0aW9uIHRoZSBhcnJvdy5cbiAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwLmhhc0NsYXNzKCd1aWItcG9zaXRpb24tbWVhc3VyZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICRwb3NpdGlvbi5wb3NpdGlvbkFycm93KHRvb2x0aXAsIHR0UG9zaXRpb24ucGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmVDbGFzcygndWliLXBvc2l0aW9uLW1lYXN1cmUnKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdFBsYWNlbWVudCAhPT0gdHRQb3NpdGlvbi5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHBvc2l0aW9uLnBvc2l0aW9uQXJyb3codG9vbHRpcCwgdHRQb3NpdGlvbi5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbGFzdFBsYWNlbWVudCA9IHR0UG9zaXRpb24ucGxhY2VtZW50O1xuXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBjb3JyZWN0IHNjb3BlIHRvIGFsbG93IHRyYW5zY2x1c2lvbiBsYXRlclxuICAgICAgICAgICAgdHRTY29wZS5vcmlnU2NvcGUgPSBzY29wZTtcblxuICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgdGhlIHRvb2x0aXAgaXMgbm90IG9wZW4uXG4gICAgICAgICAgICAvLyBUT0RPIGFkZCBhYmlsaXR5IHRvIHN0YXJ0IHRvb2x0aXAgb3BlbmVkXG4gICAgICAgICAgICB0dFNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0b2dnbGVUb29sdGlwQmluZCgpIHtcbiAgICAgICAgICAgICAgaWYgKCF0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIHNob3dUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZGVUb29sdGlwQmluZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNob3cgdGhlIHRvb2x0aXAgd2l0aCBkZWxheSBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBzaG93IGl0IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBmdW5jdGlvbiBzaG93VG9vbHRpcEJpbmQoKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNFbmFibGVFeHAgJiYgIXNjb3BlLiRldmFsKGF0dHJzW3ByZWZpeCArICdFbmFibGUnXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjYW5jZWxIaWRlKCk7XG4gICAgICAgICAgICAgIHByZXBhcmVUb29sdGlwKCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR0U2NvcGUucG9wdXBEZWxheSkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlIHRvb2x0aXAgd2FzIGFscmVhZHkgc2NoZWR1bGVkIHRvIHBvcC11cC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaWYgc2hvdyBpcyB0cmlnZ2VyZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIGFueSBoaWRlIGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICAgICAgICBpZiAoIXNob3dUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICBzaG93VGltZW91dCA9ICR0aW1lb3V0KHNob3csIHR0U2NvcGUucG9wdXBEZWxheSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZVRvb2x0aXBCaW5kKCkge1xuICAgICAgICAgICAgICBjYW5jZWxTaG93KCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR0U2NvcGUucG9wdXBDbG9zZURlbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoaWRlVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSAkdGltZW91dChoaWRlLCB0dFNjb3BlLnBvcHVwQ2xvc2VEZWxheSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdG9vbHRpcCBwb3B1cCBlbGVtZW50LlxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgICAgICAgY2FuY2VsU2hvdygpO1xuICAgICAgICAgICAgICBjYW5jZWxIaWRlKCk7XG5cbiAgICAgICAgICAgICAgLy8gRG9uJ3Qgc2hvdyBlbXB0eSB0b29sdGlwcy5cbiAgICAgICAgICAgICAgaWYgKCF0dFNjb3BlLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5ub29wO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY3JlYXRlVG9vbHRpcCgpO1xuXG4gICAgICAgICAgICAgIC8vIEFuZCBzaG93IHRoZSB0b29sdGlwLlxuICAgICAgICAgICAgICB0dFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdHRTY29wZS5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFzc2lnbklzT3Blbih0cnVlKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbFNob3coKSB7XG4gICAgICAgICAgICAgIGlmIChzaG93VGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChzaG93VGltZW91dCk7XG4gICAgICAgICAgICAgICAgc2hvd1RpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChwb3NpdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgdG9vbHRpcCBwb3B1cCBlbGVtZW50LlxuICAgICAgICAgICAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgICAgICAgaWYgKCF0dFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gRmlyc3QgdGhpbmdzIGZpcnN0OiB3ZSBkb24ndCBzaG93IGl0IGFueW1vcmUuXG4gICAgICAgICAgICAgIHR0U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodHRTY29wZSkge1xuICAgICAgICAgICAgICAgICAgdHRTY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIGFzc2lnbklzT3BlbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAvLyBBbmQgbm93IHdlIHJlbW92ZSBpdCBmcm9tIHRoZSBET00uIEhvd2V2ZXIsIGlmIHdlIGhhdmUgYW5pbWF0aW9uLCB3ZVxuICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byB3YWl0IGZvciBpdCB0byBleHBpcmUgYmVmb3JlaGFuZC5cbiAgICAgICAgICAgICAgICAgIC8vIEZJWE1FOiB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgcG9ydCBvZiB0aGUgdHJhbnNpdGlvbnMgbGlicmFyeS5cbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBmYWRlIHRyYW5zaXRpb24gaW4gVFdCUyBpcyAxNTBtcy5cbiAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zaXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSAkdGltZW91dChyZW1vdmVUb29sdGlwLCAxNTAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbEhpZGUoKSB7XG4gICAgICAgICAgICAgIGlmIChoaWRlVGltZW91dCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChoaWRlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRyYW5zaXRpb25UaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHRvb2x0aXAgZWxlbWVudCBwZXIgZGlyZWN0aXZlIHNob3duIGF0IG9uY2UuXG4gICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdG9vbHRpcExpbmtlZFNjb3BlID0gdHRTY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIHRvb2x0aXAgPSB0b29sdGlwTGlua2VyKHRvb2x0aXBMaW5rZWRTY29wZSwgZnVuY3Rpb24odG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIGlmIChhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgICAgICAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKHRvb2x0aXApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmFmdGVyKHRvb2x0aXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgb3BlbmVkVG9vbHRpcHMuYWRkKHR0U2NvcGUsIHtcbiAgICAgICAgICAgICAgICBjbG9zZTogaGlkZVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBwcmVwT2JzZXJ2ZXJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIGNhbmNlbFNob3coKTtcbiAgICAgICAgICAgICAgY2FuY2VsSGlkZSgpO1xuICAgICAgICAgICAgICB1bnJlZ2lzdGVyT2JzZXJ2ZXJzKCk7XG5cbiAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChhZGp1c3RtZW50VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGFkanVzdG1lbnRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvcGVuZWRUb29sdGlwcy5yZW1vdmUodHRTY29wZSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZiAodG9vbHRpcExpbmtlZFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcExpbmtlZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcExpbmtlZFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldCB0aGUgaW5pdGlhbCBzY29wZSB2YWx1ZXMuIE9uY2VcbiAgICAgICAgICAgICAqIHRoZSB0b29sdGlwIGlzIGNyZWF0ZWQsIHRoZSBvYnNlcnZlcnNcbiAgICAgICAgICAgICAqIHdpbGwgYmUgYWRkZWQgdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcGFyZVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIHR0U2NvcGUudGl0bGUgPSBhdHRyc1twcmVmaXggKyAnVGl0bGUnXTtcbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnRQYXJzZSkge1xuICAgICAgICAgICAgICAgIHR0U2NvcGUuY29udGVudCA9IGNvbnRlbnRQYXJzZShzY29wZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHRTY29wZS5jb250ZW50ID0gYXR0cnNbdHRUeXBlXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHR0U2NvcGUucG9wdXBDbGFzcyA9IGF0dHJzW3ByZWZpeCArICdDbGFzcyddO1xuICAgICAgICAgICAgICB0dFNjb3BlLnBsYWNlbWVudCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdQbGFjZW1lbnQnXSkgPyBhdHRyc1twcmVmaXggKyAnUGxhY2VtZW50J10gOiBvcHRpb25zLnBsYWNlbWVudDtcbiAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9ICRwb3NpdGlvbi5wYXJzZVBsYWNlbWVudCh0dFNjb3BlLnBsYWNlbWVudCk7XG4gICAgICAgICAgICAgIGxhc3RQbGFjZW1lbnQgPSBwbGFjZW1lbnRbMV0gPyBwbGFjZW1lbnRbMF0gKyAnLScgKyBwbGFjZW1lbnRbMV0gOiBwbGFjZW1lbnRbMF07XG5cbiAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gcGFyc2VJbnQoYXR0cnNbcHJlZml4ICsgJ1BvcHVwRGVsYXknXSwgMTApO1xuICAgICAgICAgICAgICB2YXIgY2xvc2VEZWxheSA9IHBhcnNlSW50KGF0dHJzW3ByZWZpeCArICdQb3B1cENsb3NlRGVsYXknXSwgMTApO1xuICAgICAgICAgICAgICB0dFNjb3BlLnBvcHVwRGVsYXkgPSAhaXNOYU4oZGVsYXkpID8gZGVsYXkgOiBvcHRpb25zLnBvcHVwRGVsYXk7XG4gICAgICAgICAgICAgIHR0U2NvcGUucG9wdXBDbG9zZURlbGF5ID0gIWlzTmFOKGNsb3NlRGVsYXkpID8gY2xvc2VEZWxheSA6IG9wdGlvbnMucG9wdXBDbG9zZURlbGF5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhc3NpZ25Jc09wZW4oaXNPcGVuKSB7XG4gICAgICAgICAgICAgIGlmIChpc09wZW5QYXJzZSAmJiBhbmd1bGFyLmlzRnVuY3Rpb24oaXNPcGVuUGFyc2UuYXNzaWduKSkge1xuICAgICAgICAgICAgICAgIGlzT3BlblBhcnNlLmFzc2lnbihzY29wZSwgaXNPcGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnRFeHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR0U2NvcGUuY29udGVudDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT2JzZXJ2ZSB0aGUgcmVsZXZhbnQgYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxTaG93KCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodmFsICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGlzT3BlblBhcnNlKSB7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpc09wZW5QYXJzZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUgJiYgIXZhbCA9PT0gdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcE9ic2VydmVycygpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnRQYXJzZSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGNvbnRlbnRQYXJzZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHR0U2NvcGUuY29udGVudCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWwgJiYgdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgdG9vbHRpcExpbmtlZFNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXBvc2l0aW9uU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVwb3NpdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcExpbmtlZFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9zaXRpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSh0dFR5cGUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZShwcmVmaXggKyAnVGl0bGUnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgIHR0U2NvcGUudGl0bGUgPSB2YWw7XG4gICAgICAgICAgICAgICAgICBpZiAodHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBvYnNlcnZlcnMucHVzaChcbiAgICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZShwcmVmaXggKyAnUGxhY2VtZW50JywgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICB0dFNjb3BlLnBsYWNlbWVudCA9IHZhbCA/IHZhbCA6IG9wdGlvbnMucGxhY2VtZW50O1xuICAgICAgICAgICAgICAgICAgaWYgKHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXJPYnNlcnZlcnMoKSB7XG4gICAgICAgICAgICAgIGlmIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG9ic2VydmVycywgZnVuY3Rpb24ob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgIG9ic2VydmVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaGlkZSB0b29sdGlwcy9wb3BvdmVycyBmb3Igb3V0c2lkZUNsaWNrIHRyaWdnZXJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJvZHlIaWRlVG9vbHRpcEJpbmQoZSkge1xuICAgICAgICAgICAgICBpZiAoIXR0U2NvcGUgfHwgIXR0U2NvcGUuaXNPcGVuIHx8ICF0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgdG9vbHRpcC9wb3BvdmVyIGxpbmsgb3IgdG9vbCB0b29sdGlwL3BvcG92ZXIgaXRzZWxmIHdlcmUgbm90IGNsaWNrZWRcbiAgICAgICAgICAgICAgaWYgKCFlbGVtZW50WzBdLmNvbnRhaW5zKGUudGFyZ2V0KSAmJiAhdG9vbHRpcFswXS5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLZXlib2FyZEV2ZW50IGhhbmRsZXIgdG8gaGlkZSB0aGUgdG9vbHRpcCBvbiBFc2NhcGUga2V5IHByZXNzXG4gICAgICAgICAgICBmdW5jdGlvbiBoaWRlT25Fc2NhcGVLZXkoZSkge1xuICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcEJpbmQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdW5yZWdpc3RlclRyaWdnZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLnNob3cuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdvdXRzaWRlQ2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZignY2xpY2snLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQub2ZmKHRyaWdnZXIsIHNob3dUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnQub2ZmKCdrZXlwcmVzcycsIGhpZGVPbkVzY2FwZUtleSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0cmlnZ2Vycy5oaWRlLmZvckVhY2goZnVuY3Rpb24odHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnb3V0c2lkZUNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBib2R5SGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmYodHJpZ2dlciwgaGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcFRyaWdnZXJzKCkge1xuICAgICAgICAgICAgICB2YXIgc2hvd1RyaWdnZXJzID0gW10sIGhpZGVUcmlnZ2VycyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgdmFsID0gc2NvcGUuJGV2YWwoYXR0cnNbcHJlZml4ICsgJ1RyaWdnZXInXSk7XG4gICAgICAgICAgICAgIHVucmVnaXN0ZXJUcmlnZ2VycygpO1xuXG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWwpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgICBzaG93VHJpZ2dlcnMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgaGlkZVRyaWdnZXJzLnB1c2godmFsW2tleV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzID0ge1xuICAgICAgICAgICAgICAgICAgc2hvdzogc2hvd1RyaWdnZXJzLFxuICAgICAgICAgICAgICAgICAgaGlkZTogaGlkZVRyaWdnZXJzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VycyA9IGdldFRyaWdnZXJzKHZhbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHJpZ2dlcnMuc2hvdyAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnMuc2hvdy5mb3JFYWNoKGZ1bmN0aW9uKHRyaWdnZXIsIGlkeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdvdXRzaWRlQ2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgdG9nZ2xlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub24oJ2NsaWNrJywgYm9keUhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgPT09IHRyaWdnZXJzLmhpZGVbaWR4XSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKHRyaWdnZXIsIHRvZ2dsZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKHRyaWdnZXIsIHNob3dUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlcnMuaGlkZVtpZHhdLCBoaWRlVG9vbHRpcEJpbmQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbigna2V5cHJlc3MnLCBoaWRlT25Fc2NhcGVLZXkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZXBUcmlnZ2VycygpO1xuXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gc2NvcGUuJGV2YWwoYXR0cnNbcHJlZml4ICsgJ0FuaW1hdGlvbiddKTtcbiAgICAgICAgICAgIHR0U2NvcGUuYW5pbWF0aW9uID0gYW5ndWxhci5pc0RlZmluZWQoYW5pbWF0aW9uKSA/ICEhYW5pbWF0aW9uIDogb3B0aW9ucy5hbmltYXRpb247XG5cbiAgICAgICAgICAgIHZhciBhcHBlbmRUb0JvZHlWYWw7XG4gICAgICAgICAgICB2YXIgYXBwZW5kS2V5ID0gcHJlZml4ICsgJ0FwcGVuZFRvQm9keSc7XG4gICAgICAgICAgICBpZiAoYXBwZW5kS2V5IGluIGF0dHJzICYmIGF0dHJzW2FwcGVuZEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBhcHBlbmRUb0JvZHlWYWwgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXBwZW5kVG9Cb2R5VmFsID0gc2NvcGUuJGV2YWwoYXR0cnNbYXBwZW5kS2V5XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGFwcGVuZFRvQm9keVZhbCkgPyBhcHBlbmRUb0JvZHlWYWwgOiBhcHBlbmRUb0JvZHk7XG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0b29sdGlwIGlzIGRlc3Ryb3llZCBhbmQgcmVtb3ZlZC5cbiAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiBvbkRlc3Ryb3lUb29sdGlwKCkge1xuICAgICAgICAgICAgICB1bnJlZ2lzdGVyVHJpZ2dlcnMoKTtcbiAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICAgICAgICB0dFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfV07XG59KVxuXG4vLyBUaGlzIGlzIG1vc3RseSBuZ0luY2x1ZGUgY29kZSBidXQgd2l0aCBhIGN1c3RvbSBzY29wZVxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZScsIFtcbiAgICAgICAgICckYW5pbWF0ZScsICckc2NlJywgJyRjb21waWxlJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLFxuZnVuY3Rpb24gKCRhbmltYXRlLCAkc2NlLCAkY29tcGlsZSwgJHRlbXBsYXRlUmVxdWVzdCkge1xuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgICAgdmFyIG9yaWdTY29wZSA9IHNjb3BlLiRldmFsKGF0dHJzLnRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGVTY29wZSk7XG5cbiAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgY3VycmVudFNjb3BlLFxuICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNSZXNvdXJjZVVybChhdHRycy51aWJUb29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlKSwgZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgIHZhciB0aGlzQ2hhbmdlSWQgPSArK2NoYW5nZUNvdW50ZXI7XG5cbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAvL2NvbnRlbnRzIGFuZCBzY29wZSBjYW4gYmUgY2xlYW5lZCB1cC5cbiAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IG9yaWdTY29wZS4kbmV3KCk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgdmFyIGNsb25lID0gJGNvbXBpbGUodGVtcGxhdGUpKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBlbGVtKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJywgc3JjKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50RXJyb3InLCBzcmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWQnLCBzcmMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KTtcbiAgICB9XG4gIH07XG59XSlcblxuLyoqXG4gKiBOb3RlIHRoYXQgaXQncyBpbnRlbnRpb25hbCB0aGF0IHRoZXNlIGNsYXNzZXMgYXJlICpub3QqIGFwcGxpZWQgdGhyb3VnaCAkYW5pbWF0ZS5cbiAqIFRoZXkgbXVzdCBub3QgYmUgYW5pbWF0ZWQgYXMgdGhleSdyZSBleHBlY3RlZCB0byBiZSBwcmVzZW50IG9uIHRoZSB0b29sdGlwIG9uXG4gKiBpbml0aWFsaXphdGlvbi5cbiAqL1xuLmRpcmVjdGl2ZSgndWliVG9vbHRpcENsYXNzZXMnLCBbJyR1aWJQb3NpdGlvbicsIGZ1bmN0aW9uKCR1aWJQb3NpdGlvbikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAvLyBuZWVkIHRvIHNldCB0aGUgcHJpbWFyeSBwb3NpdGlvbiBzbyB0aGVcbiAgICAgIC8vIGFycm93IGhhcyBzcGFjZSBkdXJpbmcgcG9zaXRpb24gbWVhc3VyZS5cbiAgICAgIC8vIHRvb2x0aXAucG9zaXRpb25Ub29sdGlwKClcbiAgICAgIGlmIChzY29wZS5wbGFjZW1lbnQpIHtcbiAgICAgICAgLy8gLy8gVGhlcmUgYXJlIG5vIHRvcC1sZWZ0IGV0Yy4uLiBjbGFzc2VzXG4gICAgICAgIC8vIC8vIGluIFRXQlMsIHNvIHdlIG5lZWQgdGhlIHByaW1hcnkgcG9zaXRpb24uXG4gICAgICAgIHZhciBwb3NpdGlvbiA9ICR1aWJQb3NpdGlvbi5wYXJzZVBsYWNlbWVudChzY29wZS5wbGFjZW1lbnQpO1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKHBvc2l0aW9uWzBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjb3BlLnBvcHVwQ2xhc3MpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhzY29wZS5wb3B1cENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjb3BlLmFuaW1hdGlvbikge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKGF0dHJzLnRvb2x0aXBBbmltYXRpb25DbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHsgY29udGVudDogJ0AnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwJywgWyAnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlRvb2x0aXAnLCAndG9vbHRpcCcsICdtb3VzZWVudGVyJyk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcFRlbXBsYXRlUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IGNvbnRlbnRFeHA6ICcmJywgb3JpZ2luU2NvcGU6ICcmJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliVG9vbHRpcFRlbXBsYXRlJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliVG9vbHRpcFRlbXBsYXRlJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRvb2x0aXBIdG1sUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IGNvbnRlbnRFeHA6ICcmJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJUb29sdGlwSHRtbCcsIFsnJHVpYlRvb2x0aXAnLCBmdW5jdGlvbigkdWliVG9vbHRpcCkge1xuICByZXR1cm4gJHVpYlRvb2x0aXAoJ3VpYlRvb2x0aXBIdG1sJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pO1xuXG4vKipcbiAqIFRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgYXJlIHN0aWxsIG91dHN0YW5kaW5nOiBwb3B1cCBkZWxheSwgYW5pbWF0aW9uIGFzIGFcbiAqIGZ1bmN0aW9uLCBwbGFjZW1lbnQgYXMgYSBmdW5jdGlvbiwgaW5zaWRlLCBzdXBwb3J0IGZvciBtb3JlIHRyaWdnZXJzIHRoYW5cbiAqIGp1c3QgbW91c2UgZW50ZXIvbGVhdmUsIGFuZCBzZWxlY3RvciBkZWxlZ2F0YXRpb24uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucG9wb3ZlcicsIFsndWkuYm9vdHN0cmFwLnRvb2x0aXAnXSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3ZlclRlbXBsYXRlUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7IHVpYlRpdGxlOiAnQCcsIGNvbnRlbnRFeHA6ICcmJywgb3JpZ2luU2NvcGU6ICcmJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci10ZW1wbGF0ZS5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3ZlclRlbXBsYXRlJywgWyckdWliVG9vbHRpcCcsIGZ1bmN0aW9uKCR1aWJUb29sdGlwKSB7XG4gIHJldHVybiAkdWliVG9vbHRpcCgndWliUG9wb3ZlclRlbXBsYXRlJywgJ3BvcG92ZXInLCAnY2xpY2snLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJQb3BvdmVySHRtbFBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyBjb250ZW50RXhwOiAnJicsIHVpYlRpdGxlOiAnQCcgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3Zlckh0bWwnLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJQb3BvdmVySHRtbCcsICdwb3BvdmVyJywgJ2NsaWNrJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUG9wb3ZlclBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogeyB1aWJUaXRsZTogJ0AnLCBjb250ZW50OiAnQCcgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXIuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlBvcG92ZXInLCBbJyR1aWJUb29sdGlwJywgZnVuY3Rpb24oJHVpYlRvb2x0aXApIHtcbiAgcmV0dXJuICR1aWJUb29sdGlwKCd1aWJQb3BvdmVyJywgJ3BvcG92ZXInLCAnY2xpY2snKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wcm9ncmVzc2JhcicsIFtdKVxuXG4uY29uc3RhbnQoJ3VpYlByb2dyZXNzQ29uZmlnJywge1xuICBhbmltYXRlOiB0cnVlLFxuICBtYXg6IDEwMFxufSlcblxuLmNvbnRyb2xsZXIoJ1VpYlByb2dyZXNzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICd1aWJQcm9ncmVzc0NvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBwcm9ncmVzc0NvbmZpZykge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBhbmltYXRlID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFuaW1hdGUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmFuaW1hdGUpIDogcHJvZ3Jlc3NDb25maWcuYW5pbWF0ZTtcblxuICB0aGlzLmJhcnMgPSBbXTtcbiAgJHNjb3BlLm1heCA9IGdldE1heE9yRGVmYXVsdCgpO1xuXG4gIHRoaXMuYWRkQmFyID0gZnVuY3Rpb24oYmFyLCBlbGVtZW50LCBhdHRycykge1xuICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgZWxlbWVudC5jc3Moeyd0cmFuc2l0aW9uJzogJ25vbmUnfSk7XG4gICAgfVxuXG4gICAgdGhpcy5iYXJzLnB1c2goYmFyKTtcblxuICAgIGJhci5tYXggPSBnZXRNYXhPckRlZmF1bHQoKTtcbiAgICBiYXIudGl0bGUgPSBhdHRycyAmJiBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50aXRsZSkgPyBhdHRycy50aXRsZSA6ICdwcm9ncmVzc2Jhcic7XG5cbiAgICBiYXIuJHdhdGNoKCd2YWx1ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlKCk7XG4gICAgfSk7XG5cbiAgICBiYXIucmVjYWxjdWxhdGVQZXJjZW50YWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdG90YWxQZXJjZW50YWdlID0gc2VsZi5iYXJzLnJlZHVjZShmdW5jdGlvbih0b3RhbCwgYmFyKSB7XG4gICAgICAgIGJhci5wZXJjZW50ID0gKygxMDAgKiBiYXIudmFsdWUgLyBiYXIubWF4KS50b0ZpeGVkKDIpO1xuICAgICAgICByZXR1cm4gdG90YWwgKyBiYXIucGVyY2VudDtcbiAgICAgIH0sIDApO1xuXG4gICAgICBpZiAodG90YWxQZXJjZW50YWdlID4gMTAwKSB7XG4gICAgICAgIGJhci5wZXJjZW50IC09IHRvdGFsUGVyY2VudGFnZSAtIDEwMDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYmFyLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIGVsZW1lbnQgPSBudWxsO1xuICAgICAgc2VsZi5yZW1vdmVCYXIoYmFyKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLnJlbW92ZUJhciA9IGZ1bmN0aW9uKGJhcikge1xuICAgIHRoaXMuYmFycy5zcGxpY2UodGhpcy5iYXJzLmluZGV4T2YoYmFyKSwgMSk7XG4gICAgdGhpcy5iYXJzLmZvckVhY2goZnVuY3Rpb24gKGJhcikge1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vJGF0dHJzLiRvYnNlcnZlKCdtYXhQYXJhbScsIGZ1bmN0aW9uKG1heFBhcmFtKSB7XG4gICRzY29wZS4kd2F0Y2goJ21heFBhcmFtJywgZnVuY3Rpb24obWF4UGFyYW0pIHtcbiAgICBzZWxmLmJhcnMuZm9yRWFjaChmdW5jdGlvbihiYXIpIHtcbiAgICAgIGJhci5tYXggPSBnZXRNYXhPckRlZmF1bHQoKTtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0TWF4T3JEZWZhdWx0ICgpIHtcbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoJHNjb3BlLm1heFBhcmFtKSA/ICRzY29wZS5tYXhQYXJhbSA6IHByb2dyZXNzQ29uZmlnLm1heDtcbiAgfVxufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlByb2dyZXNzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdVaWJQcm9ncmVzc0NvbnRyb2xsZXInLFxuICAgIHJlcXVpcmU6ICd1aWJQcm9ncmVzcycsXG4gICAgc2NvcGU6IHtcbiAgICAgIG1heFBhcmFtOiAnPT9tYXgnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndWliQmFyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcXVpcmU6ICdedWliUHJvZ3Jlc3MnLFxuICAgIHNjb3BlOiB7XG4gICAgICB2YWx1ZTogJz0nLFxuICAgICAgdHlwZTogJ0AnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBwcm9ncmVzc0N0cmwpIHtcbiAgICAgIHByb2dyZXNzQ3RybC5hZGRCYXIoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCd1aWJQcm9ncmVzc2JhcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnVWliUHJvZ3Jlc3NDb250cm9sbGVyJyxcbiAgICBzY29wZToge1xuICAgICAgdmFsdWU6ICc9JyxcbiAgICAgIG1heFBhcmFtOiAnPT9tYXgnLFxuICAgICAgdHlwZTogJ0AnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHByb2dyZXNzQ3RybCkge1xuICAgICAgcHJvZ3Jlc3NDdHJsLmFkZEJhcihzY29wZSwgYW5ndWxhci5lbGVtZW50KGVsZW1lbnQuY2hpbGRyZW4oKVswXSksIHt0aXRsZTogYXR0cnMudGl0bGV9KTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5yYXRpbmcnLCBbXSlcblxuLmNvbnN0YW50KCd1aWJSYXRpbmdDb25maWcnLCB7XG4gIG1heDogNSxcbiAgc3RhdGVPbjogbnVsbCxcbiAgc3RhdGVPZmY6IG51bGwsXG4gIGVuYWJsZVJlc2V0OiB0cnVlLFxuICB0aXRsZXM6IFsnb25lJywgJ3R3bycsICd0aHJlZScsICdmb3VyJywgJ2ZpdmUnXVxufSlcblxuLmNvbnRyb2xsZXIoJ1VpYlJhdGluZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAndWliUmF0aW5nQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHJhdGluZ0NvbmZpZykge1xuICB2YXIgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9LFxuICAgIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXykge1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSB0aGlzLnJlbmRlcjtcblxuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSA8PCAwICE9PSB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YXRlT24gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc3RhdGVPbikgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc3RhdGVPbikgOiByYXRpbmdDb25maWcuc3RhdGVPbjtcbiAgICB0aGlzLnN0YXRlT2ZmID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnN0YXRlT2ZmKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zdGF0ZU9mZikgOiByYXRpbmdDb25maWcuc3RhdGVPZmY7XG4gICAgdGhpcy5lbmFibGVSZXNldCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5lbmFibGVSZXNldCkgP1xuICAgICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmVuYWJsZVJlc2V0KSA6IHJhdGluZ0NvbmZpZy5lbmFibGVSZXNldDtcbiAgICB2YXIgdG1wVGl0bGVzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnRpdGxlcykgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMudGl0bGVzKSA6IHJhdGluZ0NvbmZpZy50aXRsZXM7XG4gICAgdGhpcy50aXRsZXMgPSBhbmd1bGFyLmlzQXJyYXkodG1wVGl0bGVzKSAmJiB0bXBUaXRsZXMubGVuZ3RoID4gMCA/XG4gICAgICB0bXBUaXRsZXMgOiByYXRpbmdDb25maWcudGl0bGVzO1xuXG4gICAgdmFyIHJhdGluZ1N0YXRlcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5yYXRpbmdTdGF0ZXMpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5yYXRpbmdTdGF0ZXMpIDpcbiAgICAgIG5ldyBBcnJheShhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWF4KSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tYXgpIDogcmF0aW5nQ29uZmlnLm1heCk7XG4gICAgJHNjb3BlLnJhbmdlID0gdGhpcy5idWlsZFRlbXBsYXRlT2JqZWN0cyhyYXRpbmdTdGF0ZXMpO1xuICB9O1xuXG4gIHRoaXMuYnVpbGRUZW1wbGF0ZU9iamVjdHMgPSBmdW5jdGlvbihzdGF0ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHN0YXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHN0YXRlc1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKHsgaW5kZXg6IGkgfSwgeyBzdGF0ZU9uOiB0aGlzLnN0YXRlT24sIHN0YXRlT2ZmOiB0aGlzLnN0YXRlT2ZmLCB0aXRsZTogdGhpcy5nZXRUaXRsZShpKSB9LCBzdGF0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGVzO1xuICB9O1xuXG4gIHRoaXMuZ2V0VGl0bGUgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmIChpbmRleCA+PSB0aGlzLnRpdGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGl0bGVzW2luZGV4XTtcbiAgfTtcblxuICAkc2NvcGUucmF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCEkc2NvcGUucmVhZG9ubHkgJiYgdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAkc2NvcGUucmFuZ2UubGVuZ3RoKSB7XG4gICAgICB2YXIgbmV3Vmlld1ZhbHVlID0gc2VsZi5lbmFibGVSZXNldCAmJiBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09PSB2YWx1ZSA/IDAgOiB2YWx1ZTtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUobmV3Vmlld1ZhbHVlKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmVudGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoISRzY29wZS5yZWFkb25seSkge1xuICAgICAgJHNjb3BlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgICRzY29wZS5vbkhvdmVyKHt2YWx1ZTogdmFsdWV9KTtcbiAgfTtcblxuICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUudmFsdWUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICRzY29wZS5vbkxlYXZlKCk7XG4gIH07XG5cbiAgJHNjb3BlLm9uS2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGlmICgvKDM3fDM4fDM5fDQwKS8udGVzdChldnQud2hpY2gpKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS5yYXRlKCRzY29wZS52YWx1ZSArIChldnQud2hpY2ggPT09IDM4IHx8IGV2dC53aGljaCA9PT0gMzkgPyAxIDogLTEpKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUudmFsdWUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICRzY29wZS50aXRsZSA9IHNlbGYuZ2V0VGl0bGUoJHNjb3BlLnZhbHVlIC0gMSk7XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUmF0aW5nJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogWyd1aWJSYXRpbmcnLCAnbmdNb2RlbCddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHJlYWRvbmx5OiAnPT9yZWFkT25seScsXG4gICAgICBvbkhvdmVyOiAnJicsXG4gICAgICBvbkxlYXZlOiAnJidcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdVaWJSYXRpbmdDb250cm9sbGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciByYXRpbmdDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICByYXRpbmdDdHJsLmluaXQobmdNb2RlbEN0cmwpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRhYnMnLCBbXSlcblxuLmNvbnRyb2xsZXIoJ1VpYlRhYnNldENvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgdmFyIGN0cmwgPSB0aGlzLFxuICAgIG9sZEluZGV4O1xuICBjdHJsLnRhYnMgPSBbXTtcblxuICBjdHJsLnNlbGVjdCA9IGZ1bmN0aW9uKGluZGV4LCBldnQpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdmFyIHByZXZpb3VzSW5kZXggPSBmaW5kVGFiSW5kZXgob2xkSW5kZXgpO1xuICAgICAgdmFyIHByZXZpb3VzU2VsZWN0ZWQgPSBjdHJsLnRhYnNbcHJldmlvdXNJbmRleF07XG4gICAgICBpZiAocHJldmlvdXNTZWxlY3RlZCkge1xuICAgICAgICBwcmV2aW91c1NlbGVjdGVkLnRhYi5vbkRlc2VsZWN0KHtcbiAgICAgICAgICAkZXZlbnQ6IGV2dCxcbiAgICAgICAgICAkc2VsZWN0ZWRJbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChldnQgJiYgZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzU2VsZWN0ZWQudGFiLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0ZWQgPSBjdHJsLnRhYnNbaW5kZXhdO1xuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHNlbGVjdGVkLnRhYi5vblNlbGVjdCh7XG4gICAgICAgICAgJGV2ZW50OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGVjdGVkLnRhYi5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBjdHJsLmFjdGl2ZSA9IHNlbGVjdGVkLmluZGV4O1xuICAgICAgICBvbGRJbmRleCA9IHNlbGVjdGVkLmluZGV4O1xuICAgICAgfSBlbHNlIGlmICghc2VsZWN0ZWQgJiYgYW5ndWxhci5pc0RlZmluZWQob2xkSW5kZXgpKSB7XG4gICAgICAgIGN0cmwuYWN0aXZlID0gbnVsbDtcbiAgICAgICAgb2xkSW5kZXggPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjdHJsLmFkZFRhYiA9IGZ1bmN0aW9uIGFkZFRhYih0YWIpIHtcbiAgICBjdHJsLnRhYnMucHVzaCh7XG4gICAgICB0YWI6IHRhYixcbiAgICAgIGluZGV4OiB0YWIuaW5kZXhcbiAgICB9KTtcbiAgICBjdHJsLnRhYnMuc29ydChmdW5jdGlvbih0MSwgdDIpIHtcbiAgICAgIGlmICh0MS5pbmRleCA+IHQyLmluZGV4KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodDEuaW5kZXggPCB0Mi5pbmRleCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgaWYgKHRhYi5pbmRleCA9PT0gY3RybC5hY3RpdmUgfHwgIWFuZ3VsYXIuaXNEZWZpbmVkKGN0cmwuYWN0aXZlKSAmJiBjdHJsLnRhYnMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBmaW5kVGFiSW5kZXgodGFiLmluZGV4KTtcbiAgICAgIGN0cmwuc2VsZWN0KG5ld0FjdGl2ZUluZGV4KTtcbiAgICB9XG4gIH07XG5cbiAgY3RybC5yZW1vdmVUYWIgPSBmdW5jdGlvbiByZW1vdmVUYWIodGFiKSB7XG4gICAgdmFyIGluZGV4O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3RybC50YWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY3RybC50YWJzW2ldLnRhYiA9PT0gdGFiKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN0cmwudGFic1tpbmRleF0uaW5kZXggPT09IGN0cmwuYWN0aXZlKSB7XG4gICAgICB2YXIgbmV3QWN0aXZlVGFiSW5kZXggPSBpbmRleCA9PT0gY3RybC50YWJzLmxlbmd0aCAtIDEgP1xuICAgICAgICBpbmRleCAtIDEgOiBpbmRleCArIDEgJSBjdHJsLnRhYnMubGVuZ3RoO1xuICAgICAgY3RybC5zZWxlY3QobmV3QWN0aXZlVGFiSW5kZXgpO1xuICAgIH1cblxuICAgIGN0cmwudGFicy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9O1xuXG4gICRzY29wZS4kd2F0Y2goJ3RhYnNldC5hY3RpdmUnLCBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQodmFsKSAmJiB2YWwgIT09IG9sZEluZGV4KSB7XG4gICAgICBjdHJsLnNlbGVjdChmaW5kVGFiSW5kZXgodmFsKSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZGVzdHJveWVkO1xuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGZpbmRUYWJJbmRleChpbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3RybC50YWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY3RybC50YWJzW2ldLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUYWJzZXQnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHt9LFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgIGFjdGl2ZTogJz0/JyxcbiAgICAgIHR5cGU6ICdAJ1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogJ1VpYlRhYnNldENvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3RhYnNldCcsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sJztcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgc2NvcGUudmVydGljYWwgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy52ZXJ0aWNhbCkgP1xuICAgICAgICBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLnZlcnRpY2FsKSA6IGZhbHNlO1xuICAgICAgc2NvcGUuanVzdGlmaWVkID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuanVzdGlmaWVkKSA/XG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMuanVzdGlmaWVkKSA6IGZhbHNlO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYicsIFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ151aWJUYWJzZXQnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3VpYi90ZW1wbGF0ZS90YWJzL3RhYi5odG1sJztcbiAgICB9LFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIGhlYWRpbmc6ICdAJyxcbiAgICAgIGluZGV4OiAnPT8nLFxuICAgICAgY2xhc3NlczogJ0A/JyxcbiAgICAgIG9uU2VsZWN0OiAnJnNlbGVjdCcsIC8vVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgaW4gY29udGVudEhlYWRpbmdUcmFuc2NsdWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vb25jZSBpdCBpbnNlcnRzIHRoZSB0YWIncyBjb250ZW50IGludG8gdGhlIGRvbVxuICAgICAgb25EZXNlbGVjdDogJyZkZXNlbGVjdCdcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgLy9FbXB0eSBjb250cm9sbGVyIHNvIG90aGVyIGRpcmVjdGl2ZXMgY2FuIHJlcXVpcmUgYmVpbmcgJ3VuZGVyJyBhIHRhYlxuICAgIH0sXG4gICAgY29udHJvbGxlckFzOiAndGFiJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgdGFic2V0Q3RybCwgdHJhbnNjbHVkZSkge1xuICAgICAgc2NvcGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIGlmIChhdHRycy5kaXNhYmxlKSB7XG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZShhdHRycy5kaXNhYmxlKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBzY29wZS5kaXNhYmxlZCA9ICEhIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoYXR0cnMuaW5kZXgpKSB7XG4gICAgICAgIGlmICh0YWJzZXRDdHJsLnRhYnMgJiYgdGFic2V0Q3RybC50YWJzLmxlbmd0aCkge1xuICAgICAgICAgIHNjb3BlLmluZGV4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgdGFic2V0Q3RybC50YWJzLm1hcChmdW5jdGlvbih0KSB7IHJldHVybiB0LmluZGV4OyB9KSkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjb3BlLmluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChhdHRycy5jbGFzc2VzKSkge1xuICAgICAgICBzY29wZS5jbGFzc2VzID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBpZiAoIXNjb3BlLmRpc2FibGVkKSB7XG4gICAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFic2V0Q3RybC50YWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGFic2V0Q3RybC50YWJzW2ldLnRhYiA9PT0gc2NvcGUpIHtcbiAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YWJzZXRDdHJsLnNlbGVjdChpbmRleCwgZXZ0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGFic2V0Q3RybC5hZGRUYWIoc2NvcGUpO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0YWJzZXRDdHJsLnJlbW92ZVRhYihzY29wZSk7XG4gICAgICB9KTtcblxuICAgICAgLy9XZSBuZWVkIHRvIHRyYW5zY2x1ZGUgbGF0ZXIsIG9uY2UgdGhlIGNvbnRlbnQgY29udGFpbmVyIGlzIHJlYWR5LlxuICAgICAgLy93aGVuIHRoaXMgbGluayBoYXBwZW5zLCB3ZSdyZSBpbnNpZGUgYSB0YWIgaGVhZGluZy5cbiAgICAgIHNjb3BlLiR0cmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd1aWJUYWJIZWFkaW5nVHJhbnNjbHVkZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ151aWJUYWInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0pIHtcbiAgICAgIHNjb3BlLiR3YXRjaCgnaGVhZGluZ0VsZW1lbnQnLCBmdW5jdGlvbiB1cGRhdGVIZWFkaW5nRWxlbWVudChoZWFkaW5nKSB7XG4gICAgICAgIGlmIChoZWFkaW5nKSB7XG4gICAgICAgICAgZWxtLmh0bWwoJycpO1xuICAgICAgICAgIGVsbS5hcHBlbmQoaGVhZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRhYkNvbnRlbnRUcmFuc2NsdWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnXnVpYlRhYnNldCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cnMpIHtcbiAgICAgIHZhciB0YWIgPSBzY29wZS4kZXZhbChhdHRycy51aWJUYWJDb250ZW50VHJhbnNjbHVkZSkudGFiO1xuXG4gICAgICAvL05vdyBvdXIgdGFiIGlzIHJlYWR5IHRvIGJlIHRyYW5zY2x1ZGVkOiBib3RoIHRoZSB0YWIgaGVhZGluZyBhcmVhXG4gICAgICAvL2FuZCB0aGUgdGFiIGNvbnRlbnQgYXJlYSBhcmUgbG9hZGVkLiAgVHJhbnNjbHVkZSAnZW0gYm90aC5cbiAgICAgIHRhYi4kdHJhbnNjbHVkZUZuKHRhYi4kcGFyZW50LCBmdW5jdGlvbihjb250ZW50cykge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goY29udGVudHMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAoaXNUYWJIZWFkaW5nKG5vZGUpKSB7XG4gICAgICAgICAgICAvL0xldCB0YWJIZWFkaW5nVHJhbnNjbHVkZSBrbm93LlxuICAgICAgICAgICAgdGFiLmhlYWRpbmdFbGVtZW50ID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxtLmFwcGVuZChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzVGFiSGVhZGluZyhub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSAmJiAoXG4gICAgICBub2RlLmhhc0F0dHJpYnV0ZSgndWliLXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXVpYi10YWItaGVhZGluZycpIHx8XG4gICAgICBub2RlLmhhc0F0dHJpYnV0ZSgneC11aWItdGFiLWhlYWRpbmcnKSB8fFxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd1aWItdGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2RhdGEtdWliLXRhYi1oZWFkaW5nJyB8fFxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd4LXVpYi10YWItaGVhZGluZycgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndWliOnRhYi1oZWFkaW5nJ1xuICAgICk7XG4gIH1cbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRpbWVwaWNrZXInLCBbXSlcblxuLmNvbnN0YW50KCd1aWJUaW1lcGlja2VyQ29uZmlnJywge1xuICBob3VyU3RlcDogMSxcbiAgbWludXRlU3RlcDogMSxcbiAgc2Vjb25kU3RlcDogMSxcbiAgc2hvd01lcmlkaWFuOiB0cnVlLFxuICBzaG93U2Vjb25kczogZmFsc2UsXG4gIG1lcmlkaWFuczogbnVsbCxcbiAgcmVhZG9ubHlJbnB1dDogZmFsc2UsXG4gIG1vdXNld2hlZWw6IHRydWUsXG4gIGFycm93a2V5czogdHJ1ZSxcbiAgc2hvd1NwaW5uZXJzOiB0cnVlLFxuICB0ZW1wbGF0ZVVybDogJ3VpYi90ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbCdcbn0pXG5cbi5jb250cm9sbGVyKCdVaWJUaW1lcGlja2VyQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckcGFyc2UnLCAnJGxvZycsICckbG9jYWxlJywgJ3VpYlRpbWVwaWNrZXJDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRwYXJzZSwgJGxvZywgJGxvY2FsZSwgdGltZXBpY2tlckNvbmZpZykge1xuICB2YXIgaG91cnNNb2RlbEN0cmwsIG1pbnV0ZXNNb2RlbEN0cmwsIHNlY29uZHNNb2RlbEN0cmw7XG4gIHZhciBzZWxlY3RlZCA9IG5ldyBEYXRlKCksXG4gICAgd2F0Y2hlcnMgPSBbXSxcbiAgICBuZ01vZGVsQ3RybCA9IHsgJHNldFZpZXdWYWx1ZTogYW5ndWxhci5ub29wIH0sIC8vIG51bGxNb2RlbEN0cmxcbiAgICBtZXJpZGlhbnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWVyaWRpYW5zKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tZXJpZGlhbnMpIDogdGltZXBpY2tlckNvbmZpZy5tZXJpZGlhbnMgfHwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkFNUE1TLFxuICAgIHBhZEhvdXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnBhZEhvdXJzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5wYWRIb3VycykgOiB0cnVlO1xuXG4gICRzY29wZS50YWJpbmRleCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy50YWJpbmRleCkgPyAkYXR0cnMudGFiaW5kZXggOiAwO1xuICAkZWxlbWVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXywgaW5wdXRzKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IHRoaXMucmVuZGVyO1xuXG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbihtb2RlbFZhbHVlKSB7XG4gICAgICByZXR1cm4gbW9kZWxWYWx1ZSA/IG5ldyBEYXRlKG1vZGVsVmFsdWUpIDogbnVsbDtcbiAgICB9KTtcblxuICAgIHZhciBob3Vyc0lucHV0RWwgPSBpbnB1dHMuZXEoMCksXG4gICAgICAgIG1pbnV0ZXNJbnB1dEVsID0gaW5wdXRzLmVxKDEpLFxuICAgICAgICBzZWNvbmRzSW5wdXRFbCA9IGlucHV0cy5lcSgyKTtcblxuICAgIGhvdXJzTW9kZWxDdHJsID0gaG91cnNJbnB1dEVsLmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICBtaW51dGVzTW9kZWxDdHJsID0gbWludXRlc0lucHV0RWwuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHNlY29uZHNNb2RlbEN0cmwgPSBzZWNvbmRzSW5wdXRFbC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICB2YXIgbW91c2V3aGVlbCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tb3VzZXdoZWVsKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tb3VzZXdoZWVsKSA6IHRpbWVwaWNrZXJDb25maWcubW91c2V3aGVlbDtcblxuICAgIGlmIChtb3VzZXdoZWVsKSB7XG4gICAgICB0aGlzLnNldHVwTW91c2V3aGVlbEV2ZW50cyhob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCk7XG4gICAgfVxuXG4gICAgdmFyIGFycm93a2V5cyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5hcnJvd2tleXMpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmFycm93a2V5cykgOiB0aW1lcGlja2VyQ29uZmlnLmFycm93a2V5cztcbiAgICBpZiAoYXJyb3drZXlzKSB7XG4gICAgICB0aGlzLnNldHVwQXJyb3drZXlFdmVudHMoaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpO1xuICAgIH1cblxuICAgICRzY29wZS5yZWFkb25seUlucHV0ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJlYWRvbmx5SW5wdXQpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJlYWRvbmx5SW5wdXQpIDogdGltZXBpY2tlckNvbmZpZy5yZWFkb25seUlucHV0O1xuICAgIHRoaXMuc2V0dXBJbnB1dEV2ZW50cyhob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsLCBzZWNvbmRzSW5wdXRFbCk7XG4gIH07XG5cbiAgdmFyIGhvdXJTdGVwID0gdGltZXBpY2tlckNvbmZpZy5ob3VyU3RlcDtcbiAgaWYgKCRhdHRycy5ob3VyU3RlcCkge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMuaG91clN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaG91clN0ZXAgPSArdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIG1pbnV0ZVN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLm1pbnV0ZVN0ZXA7XG4gIGlmICgkYXR0cnMubWludXRlU3RlcCkge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWludXRlU3RlcCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBtaW51dGVTdGVwID0gK3ZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBtaW47XG4gIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWluKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgZHQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgbWluID0gaXNOYU4oZHQpID8gdW5kZWZpbmVkIDogZHQ7XG4gIH0pKTtcblxuICB2YXIgbWF4O1xuICB3YXRjaGVycy5wdXNoKCRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm1heCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGR0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgIG1heCA9IGlzTmFOKGR0KSA/IHVuZGVmaW5lZCA6IGR0O1xuICB9KSk7XG5cbiAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG4gIGlmICgkYXR0cnMubmdEaXNhYmxlZCkge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubmdEaXNhYmxlZCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBkaXNhYmxlZCA9IHZhbHVlO1xuICAgIH0pKTtcbiAgfVxuXG4gICRzY29wZS5ub0luY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCBob3VyU3RlcCAqIDYwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW47XG4gIH07XG5cbiAgJHNjb3BlLm5vRGVjcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVjcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIC1ob3VyU3RlcCAqIDYwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgZGVjcmVtZW50ZWRTZWxlY3RlZCA8IG1pbiB8fFxuICAgICAgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IHNlbGVjdGVkICYmIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXg7XG4gIH07XG5cbiAgJHNjb3BlLm5vSW5jcmVtZW50TWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgbWludXRlU3RlcCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGluY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXggfHxcbiAgICAgIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBzZWxlY3RlZCAmJiBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgbWluO1xuICB9O1xuXG4gICRzY29wZS5ub0RlY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVjcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIC1taW51dGVTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgZGVjcmVtZW50ZWRTZWxlY3RlZCA8IG1pbiB8fFxuICAgICAgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IHNlbGVjdGVkICYmIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXg7XG4gIH07XG5cbiAgJHNjb3BlLm5vSW5jcmVtZW50U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmNyZW1lbnRlZFNlbGVjdGVkID0gYWRkU2Vjb25kcyhzZWxlY3RlZCwgc2Vjb25kU3RlcCk7XG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGluY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXggfHxcbiAgICAgIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBzZWxlY3RlZCAmJiBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgbWluO1xuICB9O1xuXG4gICRzY29wZS5ub0RlY3JlbWVudFNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVjcmVtZW50ZWRTZWxlY3RlZCA9IGFkZFNlY29uZHMoc2VsZWN0ZWQsIC1zZWNvbmRTdGVwKTtcbiAgICByZXR1cm4gZGlzYWJsZWQgfHwgZGVjcmVtZW50ZWRTZWxlY3RlZCA8IG1pbiB8fFxuICAgICAgZGVjcmVtZW50ZWRTZWxlY3RlZCA+IHNlbGVjdGVkICYmIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXg7XG4gIH07XG5cbiAgJHNjb3BlLm5vVG9nZ2xlTWVyaWRpYW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZWQgfHwgYWRkTWludXRlcyhzZWxlY3RlZCwgMTIgKiA2MCkgPiBtYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc2FibGVkIHx8IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIC0xMiAqIDYwKSA8IG1pbjtcbiAgfTtcblxuICB2YXIgc2Vjb25kU3RlcCA9IHRpbWVwaWNrZXJDb25maWcuc2Vjb25kU3RlcDtcbiAgaWYgKCRhdHRycy5zZWNvbmRTdGVwKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5zZWNvbmRTdGVwKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHNlY29uZFN0ZXAgPSArdmFsdWU7XG4gICAgfSkpO1xuICB9XG5cbiAgJHNjb3BlLnNob3dTZWNvbmRzID0gdGltZXBpY2tlckNvbmZpZy5zaG93U2Vjb25kcztcbiAgaWYgKCRhdHRycy5zaG93U2Vjb25kcykge1xuICAgIHdhdGNoZXJzLnB1c2goJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMuc2hvd1NlY29uZHMpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgJHNjb3BlLnNob3dTZWNvbmRzID0gISF2YWx1ZTtcbiAgICB9KSk7XG4gIH1cblxuICAvLyAxMkggLyAyNEggbW9kZVxuICAkc2NvcGUuc2hvd01lcmlkaWFuID0gdGltZXBpY2tlckNvbmZpZy5zaG93TWVyaWRpYW47XG4gIGlmICgkYXR0cnMuc2hvd01lcmlkaWFuKSB7XG4gICAgd2F0Y2hlcnMucHVzaCgkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5zaG93TWVyaWRpYW4pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgJHNjb3BlLnNob3dNZXJpZGlhbiA9ICEhdmFsdWU7XG5cbiAgICAgIGlmIChuZ01vZGVsQ3RybC4kZXJyb3IudGltZSkge1xuICAgICAgICAvLyBFdmFsdWF0ZSBmcm9tIHRlbXBsYXRlXG4gICAgICAgIHZhciBob3VycyA9IGdldEhvdXJzRnJvbVRlbXBsYXRlKCksIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCk7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChob3VycykgJiYgYW5ndWxhci5pc0RlZmluZWQobWludXRlcykpIHtcbiAgICAgICAgICBzZWxlY3RlZC5zZXRIb3Vycyhob3Vycyk7XG4gICAgICAgICAgcmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVUZW1wbGF0ZSgpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuXG4gIC8vIEdldCAkc2NvcGUuaG91cnMgaW4gMjRIIG1vZGUgaWYgdmFsaWRcbiAgZnVuY3Rpb24gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSB7XG4gICAgdmFyIGhvdXJzID0gKyRzY29wZS5ob3VycztcbiAgICB2YXIgdmFsaWQgPSAkc2NvcGUuc2hvd01lcmlkaWFuID8gaG91cnMgPiAwICYmIGhvdXJzIDwgMTMgOlxuICAgICAgaG91cnMgPj0gMCAmJiBob3VycyA8IDI0O1xuICAgIGlmICghdmFsaWQgfHwgJHNjb3BlLmhvdXJzID09PSAnJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoJHNjb3BlLnNob3dNZXJpZGlhbikge1xuICAgICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgICBob3VycyA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoJHNjb3BlLm1lcmlkaWFuID09PSBtZXJpZGlhbnNbMV0pIHtcbiAgICAgICAgaG91cnMgPSBob3VycyArIDEyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaG91cnM7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBtaW51dGVzID0gKyRzY29wZS5taW51dGVzO1xuICAgIHZhciB2YWxpZCA9IG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjA7XG4gICAgaWYgKCF2YWxpZCB8fCAkc2NvcGUubWludXRlcyA9PT0gJycpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBtaW51dGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2Vjb25kc0Zyb21UZW1wbGF0ZSgpIHtcbiAgICB2YXIgc2Vjb25kcyA9ICskc2NvcGUuc2Vjb25kcztcbiAgICByZXR1cm4gc2Vjb25kcyA+PSAwICYmIHNlY29uZHMgPCA2MCA/IHNlY29uZHMgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBwYWQodmFsdWUsIG5vUGFkKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKHZhbHVlKSAmJiB2YWx1ZS50b1N0cmluZygpLmxlbmd0aCA8IDIgJiYgIW5vUGFkID9cbiAgICAgICcwJyArIHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8vIFJlc3BvbmQgb24gbW91c2V3aGVlbCBzcGluXG4gIHRoaXMuc2V0dXBNb3VzZXdoZWVsRXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCwgc2Vjb25kc0lucHV0RWwpIHtcbiAgICB2YXIgaXNTY3JvbGxpbmdVcCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgIH1cbiAgICAgIC8vcGljayBjb3JyZWN0IGRlbHRhIHZhcmlhYmxlIGRlcGVuZGluZyBvbiBldmVudFxuICAgICAgdmFyIGRlbHRhID0gZS53aGVlbERlbHRhID8gZS53aGVlbERlbHRhIDogLWUuZGVsdGFZO1xuICAgICAgcmV0dXJuIGUuZGV0YWlsIHx8IGRlbHRhID4gMDtcbiAgICB9O1xuXG4gICAgaG91cnNJbnB1dEVsLm9uKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGlzU2Nyb2xsaW5nVXAoZSkgPyAkc2NvcGUuaW5jcmVtZW50SG91cnMoKSA6ICRzY29wZS5kZWNyZW1lbnRIb3VycygpKTtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgIG1pbnV0ZXNJbnB1dEVsLm9uKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGlzU2Nyb2xsaW5nVXAoZSkgPyAkc2NvcGUuaW5jcmVtZW50TWludXRlcygpIDogJHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMoKSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAgc2Vjb25kc0lucHV0RWwub24oJ21vdXNld2hlZWwgd2hlZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoaXNTY3JvbGxpbmdVcChlKSA/ICRzY29wZS5pbmNyZW1lbnRTZWNvbmRzKCkgOiAkc2NvcGUuZGVjcmVtZW50U2Vjb25kcygpKTtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBSZXNwb25kIG9uIHVwL2Rvd24gYXJyb3drZXlzXG4gIHRoaXMuc2V0dXBBcnJvd2tleUV2ZW50cyA9IGZ1bmN0aW9uKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKSB7XG4gICAgaG91cnNJbnB1dEVsLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gMzgpIHsgLy8gdXBcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmluY3JlbWVudEhvdXJzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwKSB7IC8vIGRvd25cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmRlY3JlbWVudEhvdXJzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBtaW51dGVzSW5wdXRFbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDM4KSB7IC8vIHVwXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICRzY29wZS5pbmNyZW1lbnRNaW51dGVzKCk7XG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwKSB7IC8vIGRvd25cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlY29uZHNJbnB1dEVsLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gMzgpIHsgLy8gdXBcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgJHNjb3BlLmluY3JlbWVudFNlY29uZHMoKTtcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PT0gNDApIHsgLy8gZG93blxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAkc2NvcGUuZGVjcmVtZW50U2Vjb25kcygpO1xuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuc2V0dXBJbnB1dEV2ZW50cyA9IGZ1bmN0aW9uKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwsIHNlY29uZHNJbnB1dEVsKSB7XG4gICAgaWYgKCRzY29wZS5yZWFkb25seUlucHV0KSB7XG4gICAgICAkc2NvcGUudXBkYXRlSG91cnMgPSBhbmd1bGFyLm5vb3A7XG4gICAgICAkc2NvcGUudXBkYXRlTWludXRlcyA9IGFuZ3VsYXIubm9vcDtcbiAgICAgICRzY29wZS51cGRhdGVTZWNvbmRzID0gYW5ndWxhci5ub29wO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkYXRlID0gZnVuY3Rpb24oaW52YWxpZEhvdXJzLCBpbnZhbGlkTWludXRlcywgaW52YWxpZFNlY29uZHMpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCBmYWxzZSk7XG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaW52YWxpZEhvdXJzKSkge1xuICAgICAgICAkc2NvcGUuaW52YWxpZEhvdXJzID0gaW52YWxpZEhvdXJzO1xuICAgICAgICBpZiAoaG91cnNNb2RlbEN0cmwpIHtcbiAgICAgICAgICBob3Vyc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2hvdXJzJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkTWludXRlcykpIHtcbiAgICAgICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gaW52YWxpZE1pbnV0ZXM7XG4gICAgICAgIGlmIChtaW51dGVzTW9kZWxDdHJsKSB7XG4gICAgICAgICAgbWludXRlc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ21pbnV0ZXMnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGludmFsaWRTZWNvbmRzKSkge1xuICAgICAgICAkc2NvcGUuaW52YWxpZFNlY29uZHMgPSBpbnZhbGlkU2Vjb25kcztcbiAgICAgICAgaWYgKHNlY29uZHNNb2RlbEN0cmwpIHtcbiAgICAgICAgICBzZWNvbmRzTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnc2Vjb25kcycsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUudXBkYXRlSG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBob3VycyA9IGdldEhvdXJzRnJvbVRlbXBsYXRlKCksXG4gICAgICAgIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCk7XG5cbiAgICAgIG5nTW9kZWxDdHJsLiRzZXREaXJ0eSgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaG91cnMpICYmIGFuZ3VsYXIuaXNEZWZpbmVkKG1pbnV0ZXMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgc2VsZWN0ZWQuc2V0TWludXRlcyhtaW51dGVzKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkIDwgbWluIHx8IHNlbGVjdGVkID4gbWF4KSB7XG4gICAgICAgICAgaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZyZXNoKCdoJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGhvdXJzSW5wdXRFbC5vbignYmx1cicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRUb3VjaGVkKCk7XG4gICAgICBpZiAobW9kZWxJc0VtcHR5KCkpIHtcbiAgICAgICAgbWFrZVZhbGlkKCk7XG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5ob3VycyA9PT0gbnVsbCB8fCAkc2NvcGUuaG91cnMgPT09ICcnKSB7XG4gICAgICAgIGludmFsaWRhdGUodHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCEkc2NvcGUuaW52YWxpZEhvdXJzICYmICRzY29wZS5ob3VycyA8IDEwKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmhvdXJzID0gcGFkKCRzY29wZS5ob3VycywgIXBhZEhvdXJzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUudXBkYXRlTWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCksXG4gICAgICAgIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKTtcblxuICAgICAgbmdNb2RlbEN0cmwuJHNldERpcnR5KCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChob3VycykpIHtcbiAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoaG91cnMpO1xuICAgICAgICBzZWxlY3RlZC5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICAgICAgICBpZiAoc2VsZWN0ZWQgPCBtaW4gfHwgc2VsZWN0ZWQgPiBtYXgpIHtcbiAgICAgICAgICBpbnZhbGlkYXRlKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmcmVzaCgnbScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhbGlkYXRlKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIG1pbnV0ZXNJbnB1dEVsLm9uKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFRvdWNoZWQoKTtcbiAgICAgIGlmIChtb2RlbElzRW1wdHkoKSkge1xuICAgICAgICBtYWtlVmFsaWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLm1pbnV0ZXMgPT09IG51bGwpIHtcbiAgICAgICAgaW52YWxpZGF0ZSh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghJHNjb3BlLmludmFsaWRNaW51dGVzICYmICRzY29wZS5taW51dGVzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUubWludXRlcyA9IHBhZCgkc2NvcGUubWludXRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLnVwZGF0ZVNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWNvbmRzID0gZ2V0U2Vjb25kc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgICBuZ01vZGVsQ3RybC4kc2V0RGlydHkoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHNlY29uZHMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldFNlY29uZHMoc2Vjb25kcyk7XG4gICAgICAgIHJlZnJlc2goJ3MnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzZWNvbmRzSW5wdXRFbC5vbignYmx1cicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChtb2RlbElzRW1wdHkoKSkge1xuICAgICAgICBtYWtlVmFsaWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoISRzY29wZS5pbnZhbGlkU2Vjb25kcyAmJiAkc2NvcGUuc2Vjb25kcyA8IDEwKSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5zZWNvbmRzID0gcGFkKCRzY29wZS5zZWNvbmRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcblxuICAgIGlmIChpc05hTihkYXRlKSkge1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgZmFsc2UpO1xuICAgICAgJGxvZy5lcnJvcignVGltZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QsIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAwMS4wMS4xOTcwIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhbiBSRkMyODIyIG9yIElTTyA4NjAxIGRhdGUuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgIHNlbGVjdGVkID0gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdGVkIDwgbWluIHx8IHNlbGVjdGVkID4gbWF4KSB7XG4gICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcbiAgICAgICAgJHNjb3BlLmludmFsaWRIb3VycyA9IHRydWU7XG4gICAgICAgICRzY29wZS5pbnZhbGlkTWludXRlcyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYWtlVmFsaWQoKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZVRlbXBsYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIENhbGwgaW50ZXJuYWxseSB3aGVuIHdlIGtub3cgdGhhdCBtb2RlbCBpcyB2YWxpZC5cbiAgZnVuY3Rpb24gcmVmcmVzaChrZXlib2FyZENoYW5nZSkge1xuICAgIG1ha2VWYWxpZCgpO1xuICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUobmV3IERhdGUoc2VsZWN0ZWQpKTtcbiAgICB1cGRhdGVUZW1wbGF0ZShrZXlib2FyZENoYW5nZSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlVmFsaWQoKSB7XG4gICAgaWYgKGhvdXJzTW9kZWxDdHJsKSB7XG4gICAgICBob3Vyc01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2hvdXJzJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG1pbnV0ZXNNb2RlbEN0cmwpIHtcbiAgICAgIG1pbnV0ZXNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdtaW51dGVzJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHNlY29uZHNNb2RlbEN0cmwpIHtcbiAgICAgIHNlY29uZHNNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdzZWNvbmRzJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgdHJ1ZSk7XG4gICAgJHNjb3BlLmludmFsaWRIb3VycyA9IGZhbHNlO1xuICAgICRzY29wZS5pbnZhbGlkTWludXRlcyA9IGZhbHNlO1xuICAgICRzY29wZS5pbnZhbGlkU2Vjb25kcyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVGVtcGxhdGUoa2V5Ym9hcmRDaGFuZ2UpIHtcbiAgICBpZiAoIW5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSB7XG4gICAgICAkc2NvcGUuaG91cnMgPSBudWxsO1xuICAgICAgJHNjb3BlLm1pbnV0ZXMgPSBudWxsO1xuICAgICAgJHNjb3BlLnNlY29uZHMgPSBudWxsO1xuICAgICAgJHNjb3BlLm1lcmlkaWFuID0gbWVyaWRpYW5zWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaG91cnMgPSBzZWxlY3RlZC5nZXRIb3VycygpLFxuICAgICAgICBtaW51dGVzID0gc2VsZWN0ZWQuZ2V0TWludXRlcygpLFxuICAgICAgICBzZWNvbmRzID0gc2VsZWN0ZWQuZ2V0U2Vjb25kcygpO1xuXG4gICAgICBpZiAoJHNjb3BlLnNob3dNZXJpZGlhbikge1xuICAgICAgICBob3VycyA9IGhvdXJzID09PSAwIHx8IGhvdXJzID09PSAxMiA/IDEyIDogaG91cnMgJSAxMjsgLy8gQ29udmVydCAyNCB0byAxMiBob3VyIHN5c3RlbVxuICAgICAgfVxuXG4gICAgICAkc2NvcGUuaG91cnMgPSBrZXlib2FyZENoYW5nZSA9PT0gJ2gnID8gaG91cnMgOiBwYWQoaG91cnMsICFwYWRIb3Vycyk7XG4gICAgICBpZiAoa2V5Ym9hcmRDaGFuZ2UgIT09ICdtJykge1xuICAgICAgICAkc2NvcGUubWludXRlcyA9IHBhZChtaW51dGVzKTtcbiAgICAgIH1cbiAgICAgICRzY29wZS5tZXJpZGlhbiA9IHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IG1lcmlkaWFuc1swXSA6IG1lcmlkaWFuc1sxXTtcblxuICAgICAgaWYgKGtleWJvYXJkQ2hhbmdlICE9PSAncycpIHtcbiAgICAgICAgJHNjb3BlLnNlY29uZHMgPSBwYWQoc2Vjb25kcyk7XG4gICAgICB9XG4gICAgICAkc2NvcGUubWVyaWRpYW4gPSBzZWxlY3RlZC5nZXRIb3VycygpIDwgMTIgPyBtZXJpZGlhbnNbMF0gOiBtZXJpZGlhbnNbMV07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkU2Vjb25kc1RvU2VsZWN0ZWQoc2Vjb25kcykge1xuICAgIHNlbGVjdGVkID0gYWRkU2Vjb25kcyhzZWxlY3RlZCwgc2Vjb25kcyk7XG4gICAgcmVmcmVzaCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTWludXRlcyhzZWxlY3RlZCwgbWludXRlcykge1xuICAgIHJldHVybiBhZGRTZWNvbmRzKHNlbGVjdGVkLCBtaW51dGVzKjYwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNlY29uZHMoZGF0ZSwgc2Vjb25kcykge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpICsgc2Vjb25kcyAqIDEwMDApO1xuICAgIHZhciBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgbmV3RGF0ZS5zZXRIb3VycyhkdC5nZXRIb3VycygpLCBkdC5nZXRNaW51dGVzKCksIGR0LmdldFNlY29uZHMoKSk7XG4gICAgcmV0dXJuIG5ld0RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBtb2RlbElzRW1wdHkoKSB7XG4gICAgcmV0dXJuICgkc2NvcGUuaG91cnMgPT09IG51bGwgfHwgJHNjb3BlLmhvdXJzID09PSAnJykgJiZcbiAgICAgICgkc2NvcGUubWludXRlcyA9PT0gbnVsbCB8fCAkc2NvcGUubWludXRlcyA9PT0gJycpICYmXG4gICAgICAoISRzY29wZS5zaG93U2Vjb25kcyB8fCAkc2NvcGUuc2hvd1NlY29uZHMgJiYgKCRzY29wZS5zZWNvbmRzID09PSBudWxsIHx8ICRzY29wZS5zZWNvbmRzID09PSAnJykpO1xuICB9XG5cbiAgJHNjb3BlLnNob3dTcGlubmVycyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zaG93U3Bpbm5lcnMpID9cbiAgICAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc2hvd1NwaW5uZXJzKSA6IHRpbWVwaWNrZXJDb25maWcuc2hvd1NwaW5uZXJzO1xuXG4gICRzY29wZS5pbmNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vSW5jcmVtZW50SG91cnMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoaG91clN0ZXAgKiA2MCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmRlY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9EZWNyZW1lbnRIb3VycygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgtaG91clN0ZXAgKiA2MCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmluY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudE1pbnV0ZXMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQobWludXRlU3RlcCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0RlY3JlbWVudE1pbnV0ZXMoKSkge1xuICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoLW1pbnV0ZVN0ZXAgKiA2MCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5pbmNyZW1lbnRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9JbmNyZW1lbnRTZWNvbmRzKCkpIHtcbiAgICAgIGFkZFNlY29uZHNUb1NlbGVjdGVkKHNlY29uZFN0ZXApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50U2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghJHNjb3BlLm5vRGVjcmVtZW50U2Vjb25kcygpKSB7XG4gICAgICBhZGRTZWNvbmRzVG9TZWxlY3RlZCgtc2Vjb25kU3RlcCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS50b2dnbGVNZXJpZGlhbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtaW51dGVzID0gZ2V0TWludXRlc0Zyb21UZW1wbGF0ZSgpLFxuICAgICAgICBob3VycyA9IGdldEhvdXJzRnJvbVRlbXBsYXRlKCk7XG5cbiAgICBpZiAoISRzY29wZS5ub1RvZ2dsZU1lcmlkaWFuKCkpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChob3VycykpIHtcbiAgICAgICAgYWRkU2Vjb25kc1RvU2VsZWN0ZWQoMTIgKiA2MCAqIChzZWxlY3RlZC5nZXRIb3VycygpIDwgMTIgPyA2MCA6IC02MCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLm1lcmlkaWFuID0gJHNjb3BlLm1lcmlkaWFuID09PSBtZXJpZGlhbnNbMF0gPyBtZXJpZGlhbnNbMV0gOiBtZXJpZGlhbnNbMF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5ibHVyID0gZnVuY3Rpb24oKSB7XG4gICAgbmdNb2RlbEN0cmwuJHNldFRvdWNoZWQoKTtcbiAgfTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIHdoaWxlICh3YXRjaGVycy5sZW5ndGgpIHtcbiAgICAgIHdhdGNoZXJzLnNoaWZ0KCkoKTtcbiAgICB9XG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3VpYlRpbWVwaWNrZXInLCBbJ3VpYlRpbWVwaWNrZXJDb25maWcnLCBmdW5jdGlvbih1aWJUaW1lcGlja2VyQ29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogWyd1aWJUaW1lcGlja2VyJywgJz9ebmdNb2RlbCddLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1VpYlRpbWVwaWNrZXJDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICd0aW1lcGlja2VyJyxcbiAgICBzY29wZToge30sXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgdWliVGltZXBpY2tlckNvbmZpZy50ZW1wbGF0ZVVybDtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciB0aW1lcGlja2VyQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBpZiAobmdNb2RlbEN0cmwpIHtcbiAgICAgICAgdGltZXBpY2tlckN0cmwuaW5pdChuZ01vZGVsQ3RybCwgZWxlbWVudC5maW5kKCdpbnB1dCcpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudHlwZWFoZWFkJywgWyd1aS5ib290c3RyYXAuZGVib3VuY2UnLCAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJ10pXG5cbi8qKlxuICogQSBoZWxwZXIgc2VydmljZSB0aGF0IGNhbiBwYXJzZSB0eXBlYWhlYWQncyBzeW50YXggKHN0cmluZyBwcm92aWRlZCBieSB1c2VycylcbiAqIEV4dHJhY3RlZCB0byBhIHNlcGFyYXRlIHNlcnZpY2UgZm9yIGVhc2Ugb2YgdW5pdCB0ZXN0aW5nXG4gKi9cbiAgLmZhY3RvcnkoJ3VpYlR5cGVhaGVhZFBhcnNlcicsIFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgMDAwMDAxMTExMTExMTAwMDAwMDAwMDAwMDAyMjIyMjIyMjAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMzMzMzMwMDAwMDAwMDAwMDQ0NDQ0NDQ0MDAwXG4gICAgdmFyIFRZUEVBSEVBRF9SRUdFWFAgPSAvXlxccyooW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbXFwkXFx3XVtcXCRcXHdcXGRdKikpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSQvO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gaW5wdXQubWF0Y2goVFlQRUFIRUFEX1JFR0VYUCk7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnRXhwZWN0ZWQgdHlwZWFoZWFkIHNwZWNpZmljYXRpb24gaW4gZm9ybSBvZiBcIl9tb2RlbFZhbHVlXyAoYXMgX2xhYmVsXyk/IGZvciBfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXCInICtcbiAgICAgICAgICAgICAgJyBidXQgZ290IFwiJyArIGlucHV0ICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpdGVtTmFtZTogbWF0Y2hbM10sXG4gICAgICAgICAgc291cmNlOiAkcGFyc2UobWF0Y2hbNF0pLFxuICAgICAgICAgIHZpZXdNYXBwZXI6ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksXG4gICAgICAgICAgbW9kZWxNYXBwZXI6ICRwYXJzZShtYXRjaFsxXSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XSlcblxuICAuY29udHJvbGxlcignVWliVHlwZWFoZWFkQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICckY29tcGlsZScsICckcGFyc2UnLCAnJHEnLCAnJHRpbWVvdXQnLCAnJGRvY3VtZW50JywgJyR3aW5kb3cnLCAnJHJvb3RTY29wZScsICckJGRlYm91bmNlJywgJyR1aWJQb3NpdGlvbicsICd1aWJUeXBlYWhlYWRQYXJzZXInLFxuICAgIGZ1bmN0aW9uKG9yaWdpbmFsU2NvcGUsIGVsZW1lbnQsIGF0dHJzLCAkY29tcGlsZSwgJHBhcnNlLCAkcSwgJHRpbWVvdXQsICRkb2N1bWVudCwgJHdpbmRvdywgJHJvb3RTY29wZSwgJCRkZWJvdW5jZSwgJHBvc2l0aW9uLCB0eXBlYWhlYWRQYXJzZXIpIHtcbiAgICB2YXIgSE9UX0tFWVMgPSBbOSwgMTMsIDI3LCAzOCwgNDBdO1xuICAgIHZhciBldmVudERlYm91bmNlVGltZSA9IDIwMDtcbiAgICB2YXIgbW9kZWxDdHJsLCBuZ01vZGVsT3B0aW9ucztcbiAgICAvL1NVUFBPUlRFRCBBVFRSSUJVVEVTIChPUFRJT05TKVxuXG4gICAgLy9taW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0byBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICB2YXIgbWluTGVuZ3RoID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRNaW5MZW5ndGgpO1xuICAgIGlmICghbWluTGVuZ3RoICYmIG1pbkxlbmd0aCAhPT0gMCkge1xuICAgICAgbWluTGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICBvcmlnaW5hbFNjb3BlLiR3YXRjaChhdHRycy50eXBlYWhlYWRNaW5MZW5ndGgsIGZ1bmN0aW9uIChuZXdWYWwpIHtcbiAgICAgICAgbWluTGVuZ3RoID0gIW5ld1ZhbCAmJiBuZXdWYWwgIT09IDAgPyAxIDogbmV3VmFsO1xuICAgIH0pO1xuXG4gICAgLy9taW5pbWFsIHdhaXQgdGltZSBhZnRlciBsYXN0IGNoYXJhY3RlciB0eXBlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgdmFyIHdhaXRUaW1lID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRXYWl0TXMpIHx8IDA7XG5cbiAgICAvL3Nob3VsZCBpdCByZXN0cmljdCBtb2RlbCB2YWx1ZXMgdG8gdGhlIG9uZXMgc2VsZWN0ZWQgZnJvbSB0aGUgcG9wdXAgb25seT9cbiAgICB2YXIgaXNFZGl0YWJsZSA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkRWRpdGFibGUpICE9PSBmYWxzZTtcbiAgICBvcmlnaW5hbFNjb3BlLiR3YXRjaChhdHRycy50eXBlYWhlYWRFZGl0YWJsZSwgZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgaXNFZGl0YWJsZSA9IG5ld1ZhbCAhPT0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvL2JpbmRpbmcgdG8gYSB2YXJpYWJsZSB0aGF0IGluZGljYXRlcyBpZiBtYXRjaGVzIGFyZSBiZWluZyByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHlcbiAgICB2YXIgaXNMb2FkaW5nU2V0dGVyID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZExvYWRpbmcpLmFzc2lnbiB8fCBhbmd1bGFyLm5vb3A7XG5cbiAgICAvL2EgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGFuIGV2ZW50IHNob3VsZCBjYXVzZSBzZWxlY3Rpb25cbiAgICB2YXIgaXNTZWxlY3RFdmVudCA9IGF0dHJzLnR5cGVhaGVhZFNob3VsZFNlbGVjdCA/ICRwYXJzZShhdHRycy50eXBlYWhlYWRTaG91bGRTZWxlY3QpIDogZnVuY3Rpb24oc2NvcGUsIHZhbHMpIHtcbiAgICAgIHZhciBldnQgPSB2YWxzLiRldmVudDtcbiAgICAgIHJldHVybiBldnQud2hpY2ggPT09IDEzIHx8IGV2dC53aGljaCA9PT0gOTtcbiAgICB9O1xuXG4gICAgLy9hIGNhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gYSBtYXRjaCBpcyBzZWxlY3RlZFxuICAgIHZhciBvblNlbGVjdENhbGxiYWNrID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZE9uU2VsZWN0KTtcblxuICAgIC8vc2hvdWxkIGl0IHNlbGVjdCBoaWdobGlnaHRlZCBwb3B1cCB2YWx1ZSB3aGVuIGxvc2luZyBmb2N1cz9cbiAgICB2YXIgaXNTZWxlY3RPbkJsdXIgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50eXBlYWhlYWRTZWxlY3RPbkJsdXIpID8gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRTZWxlY3RPbkJsdXIpIDogZmFsc2U7XG5cbiAgICAvL2JpbmRpbmcgdG8gYSB2YXJpYWJsZSB0aGF0IGluZGljYXRlcyBpZiB0aGVyZSB3ZXJlIG5vIHJlc3VsdHMgYWZ0ZXIgdGhlIHF1ZXJ5IGlzIGNvbXBsZXRlZFxuICAgIHZhciBpc05vUmVzdWx0c1NldHRlciA9ICRwYXJzZShhdHRycy50eXBlYWhlYWROb1Jlc3VsdHMpLmFzc2lnbiB8fCBhbmd1bGFyLm5vb3A7XG5cbiAgICB2YXIgaW5wdXRGb3JtYXR0ZXIgPSBhdHRycy50eXBlYWhlYWRJbnB1dEZvcm1hdHRlciA/ICRwYXJzZShhdHRycy50eXBlYWhlYWRJbnB1dEZvcm1hdHRlcikgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgYXBwZW5kVG9Cb2R5ID0gYXR0cnMudHlwZWFoZWFkQXBwZW5kVG9Cb2R5ID8gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRBcHBlbmRUb0JvZHkpIDogZmFsc2U7XG5cbiAgICB2YXIgYXBwZW5kVG8gPSBhdHRycy50eXBlYWhlYWRBcHBlbmRUbyA/XG4gICAgICBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvKSA6IG51bGw7XG5cbiAgICB2YXIgZm9jdXNGaXJzdCA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkRm9jdXNGaXJzdCkgIT09IGZhbHNlO1xuXG4gICAgLy9JZiBpbnB1dCBtYXRjaGVzIGFuIGl0ZW0gb2YgdGhlIGxpc3QgZXhhY3RseSwgc2VsZWN0IGl0IGF1dG9tYXRpY2FsbHlcbiAgICB2YXIgc2VsZWN0T25FeGFjdCA9IGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uRXhhY3QgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uRXhhY3QpIDogZmFsc2U7XG5cbiAgICAvL2JpbmRpbmcgdG8gYSB2YXJpYWJsZSB0aGF0IGluZGljYXRlcyBpZiBkcm9wZG93biBpcyBvcGVuXG4gICAgdmFyIGlzT3BlblNldHRlciA9ICRwYXJzZShhdHRycy50eXBlYWhlYWRJc09wZW4pLmFzc2lnbiB8fCBhbmd1bGFyLm5vb3A7XG5cbiAgICB2YXIgc2hvd0hpbnQgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFNob3dIaW50KSB8fCBmYWxzZTtcblxuICAgIC8vSU5URVJOQUwgVkFSSUFCTEVTXG5cbiAgICAvL21vZGVsIHNldHRlciBleGVjdXRlZCB1cG9uIG1hdGNoIHNlbGVjdGlvblxuICAgIHZhciBwYXJzZWRNb2RlbCA9ICRwYXJzZShhdHRycy5uZ01vZGVsKTtcbiAgICB2YXIgaW52b2tlTW9kZWxTZXR0ZXIgPSAkcGFyc2UoYXR0cnMubmdNb2RlbCArICcoJCQkcCknKTtcbiAgICB2YXIgJHNldE1vZGVsVmFsdWUgPSBmdW5jdGlvbihzY29wZSwgbmV3VmFsdWUpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24ocGFyc2VkTW9kZWwob3JpZ2luYWxTY29wZSkpICYmXG4gICAgICAgIG5nTW9kZWxPcHRpb25zLmdldE9wdGlvbignZ2V0dGVyU2V0dGVyJykpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZU1vZGVsU2V0dGVyKHNjb3BlLCB7JCQkcDogbmV3VmFsdWV9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlZE1vZGVsLmFzc2lnbihzY29wZSwgbmV3VmFsdWUpO1xuICAgIH07XG5cbiAgICAvL2V4cHJlc3Npb25zIHVzZWQgYnkgdHlwZWFoZWFkXG4gICAgdmFyIHBhcnNlclJlc3VsdCA9IHR5cGVhaGVhZFBhcnNlci5wYXJzZShhdHRycy51aWJUeXBlYWhlYWQpO1xuXG4gICAgdmFyIGhhc0ZvY3VzO1xuXG4gICAgLy9Vc2VkIHRvIGF2b2lkIGJ1ZyBpbiBpT1Mgd2VidmlldyB3aGVyZSBpT1Mga2V5Ym9hcmQgZG9lcyBub3QgZmlyZVxuICAgIC8vbW91c2Vkb3duICYgbW91c2V1cCBldmVudHNcbiAgICAvL0lzc3VlICMzNjk5XG4gICAgdmFyIHNlbGVjdGVkO1xuXG4gICAgLy9jcmVhdGUgYSBjaGlsZCBzY29wZSBmb3IgdGhlIHR5cGVhaGVhZCBkaXJlY3RpdmUgc28gd2UgYXJlIG5vdCBwb2xsdXRpbmcgb3JpZ2luYWwgc2NvcGVcbiAgICAvL3dpdGggdHlwZWFoZWFkLXNwZWNpZmljIGRhdGEgKG1hdGNoZXMsIHF1ZXJ5IGV0Yy4pXG4gICAgdmFyIHNjb3BlID0gb3JpZ2luYWxTY29wZS4kbmV3KCk7XG4gICAgdmFyIG9mZkRlc3Ryb3kgPSBvcmlnaW5hbFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLiRkZXN0cm95KCk7XG4gICAgfSk7XG4gICAgc2NvcGUuJG9uKCckZGVzdHJveScsIG9mZkRlc3Ryb3kpO1xuXG4gICAgLy8gV0FJLUFSSUFcbiAgICB2YXIgcG9wdXBJZCA9ICd0eXBlYWhlYWQtJyArIHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICBlbGVtZW50LmF0dHIoe1xuICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogJ2xpc3QnLFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICdhcmlhLW93bnMnOiBwb3B1cElkXG4gICAgfSk7XG5cbiAgICB2YXIgaW5wdXRzQ29udGFpbmVyLCBoaW50SW5wdXRFbGVtO1xuICAgIC8vYWRkIHJlYWQtb25seSBpbnB1dCB0byBzaG93IGhpbnRcbiAgICBpZiAoc2hvd0hpbnQpIHtcbiAgICAgIGlucHV0c0NvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj48L2Rpdj4nKTtcbiAgICAgIGlucHV0c0NvbnRhaW5lci5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XG4gICAgICBlbGVtZW50LmFmdGVyKGlucHV0c0NvbnRhaW5lcik7XG4gICAgICBoaW50SW5wdXRFbGVtID0gZWxlbWVudC5jbG9uZSgpO1xuICAgICAgaGludElucHV0RWxlbS5hdHRyKCdwbGFjZWhvbGRlcicsICcnKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0uYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0udmFsKCcnKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0uY3NzKHtcbiAgICAgICAgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJyxcbiAgICAgICAgJ3RvcCc6ICcwcHgnLFxuICAgICAgICAnbGVmdCc6ICcwcHgnLFxuICAgICAgICAnYm9yZGVyLWNvbG9yJzogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgJ2JveC1zaGFkb3cnOiAnbm9uZScsXG4gICAgICAgICdvcGFjaXR5JzogMSxcbiAgICAgICAgJ2JhY2tncm91bmQnOiAnbm9uZSAwJSAwJSAvIGF1dG8gcmVwZWF0IHNjcm9sbCBwYWRkaW5nLWJveCBib3JkZXItYm94IHJnYigyNTUsIDI1NSwgMjU1KScsXG4gICAgICAgICdjb2xvcic6ICcjOTk5J1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50LmNzcyh7XG4gICAgICAgICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsXG4gICAgICAgICd2ZXJ0aWNhbC1hbGlnbic6ICd0b3AnLFxuICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6ICd0cmFuc3BhcmVudCdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGludElucHV0RWxlbS5hdHRyKCdpZCcpKSB7XG4gICAgICAgIGhpbnRJbnB1dEVsZW0ucmVtb3ZlQXR0cignaWQnKTsgLy8gcmVtb3ZlIGR1cGxpY2F0ZSBpZCBpZiBwcmVzZW50LlxuICAgICAgfVxuICAgICAgaW5wdXRzQ29udGFpbmVyLmFwcGVuZChoaW50SW5wdXRFbGVtKTtcbiAgICAgIGhpbnRJbnB1dEVsZW0uYWZ0ZXIoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy9wb3AtdXAgZWxlbWVudCB1c2VkIHRvIGRpc3BsYXkgbWF0Y2hlc1xuICAgIHZhciBwb3BVcEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHVpYi10eXBlYWhlYWQtcG9wdXA+PC9kaXY+Jyk7XG4gICAgcG9wVXBFbC5hdHRyKHtcbiAgICAgIGlkOiBwb3B1cElkLFxuICAgICAgbWF0Y2hlczogJ21hdGNoZXMnLFxuICAgICAgYWN0aXZlOiAnYWN0aXZlSWR4JyxcbiAgICAgIHNlbGVjdDogJ3NlbGVjdChhY3RpdmVJZHgsIGV2dCknLFxuICAgICAgJ21vdmUtaW4tcHJvZ3Jlc3MnOiAnbW92ZUluUHJvZ3Jlc3MnLFxuICAgICAgcXVlcnk6ICdxdWVyeScsXG4gICAgICBwb3NpdGlvbjogJ3Bvc2l0aW9uJyxcbiAgICAgICdhc3NpZ24taXMtb3Blbic6ICdhc3NpZ25Jc09wZW4oaXNPcGVuKScsXG4gICAgICBkZWJvdW5jZTogJ2RlYm91bmNlVXBkYXRlJ1xuICAgIH0pO1xuICAgIC8vY3VzdG9tIGl0ZW0gdGVtcGxhdGVcbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudHlwZWFoZWFkVGVtcGxhdGVVcmwpKSB7XG4gICAgICBwb3BVcEVsLmF0dHIoJ3RlbXBsYXRlLXVybCcsIGF0dHJzLnR5cGVhaGVhZFRlbXBsYXRlVXJsKTtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudHlwZWFoZWFkUG9wdXBUZW1wbGF0ZVVybCkpIHtcbiAgICAgIHBvcFVwRWwuYXR0cigncG9wdXAtdGVtcGxhdGUtdXJsJywgYXR0cnMudHlwZWFoZWFkUG9wdXBUZW1wbGF0ZVVybCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc2V0SGludCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNob3dIaW50KSB7XG4gICAgICAgIGhpbnRJbnB1dEVsZW0udmFsKCcnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc2V0TWF0Y2hlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUubWF0Y2hlcyA9IFtdO1xuICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gLTE7XG4gICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICByZXNldEhpbnQoKTtcbiAgICB9O1xuXG4gICAgdmFyIGdldE1hdGNoSWQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHBvcHVwSWQgKyAnLW9wdGlvbi0nICsgaW5kZXg7XG4gICAgfTtcblxuICAgIC8vIEluZGljYXRlIHRoYXQgdGhlIHNwZWNpZmllZCBtYXRjaCBpcyB0aGUgYWN0aXZlIChwcmUtc2VsZWN0ZWQpIGl0ZW0gaW4gdGhlIGxpc3Qgb3duZWQgYnkgdGhpcyB0eXBlYWhlYWQuXG4gICAgLy8gVGhpcyBhdHRyaWJ1dGUgaXMgYWRkZWQgb3IgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGBhY3RpdmVJZHhgIGNoYW5nZXMuXG4gICAgc2NvcGUuJHdhdGNoKCdhY3RpdmVJZHgnLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBnZXRNYXRjaElkKGluZGV4KSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgaW5wdXRJc0V4YWN0TWF0Y2ggPSBmdW5jdGlvbihpbnB1dFZhbHVlLCBpbmRleCkge1xuICAgICAgaWYgKHNjb3BlLm1hdGNoZXMubGVuZ3RoID4gaW5kZXggJiYgaW5wdXRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZS50b1VwcGVyQ2FzZSgpID09PSBzY29wZS5tYXRjaGVzW2luZGV4XS5sYWJlbC50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHZhciBnZXRNYXRjaGVzQXN5bmMgPSBmdW5jdGlvbihpbnB1dFZhbHVlLCBldnQpIHtcbiAgICAgIHZhciBsb2NhbHMgPSB7JHZpZXdWYWx1ZTogaW5wdXRWYWx1ZX07XG4gICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgdHJ1ZSk7XG4gICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAkcS53aGVuKHBhcnNlclJlc3VsdC5zb3VyY2Uob3JpZ2luYWxTY29wZSwgbG9jYWxzKSkudGhlbihmdW5jdGlvbihtYXRjaGVzKSB7XG4gICAgICAgIC8vaXQgbWlnaHQgaGFwcGVuIHRoYXQgc2V2ZXJhbCBhc3luYyBxdWVyaWVzIHdlcmUgaW4gcHJvZ3Jlc3MgaWYgYSB1c2VyIHdlcmUgdHlwaW5nIGZhc3RcbiAgICAgICAgLy9idXQgd2UgYXJlIGludGVyZXN0ZWQgb25seSBpbiByZXNwb25zZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBjdXJyZW50IHZpZXcgdmFsdWVcbiAgICAgICAgdmFyIG9uQ3VycmVudFJlcXVlc3QgPSBpbnB1dFZhbHVlID09PSBtb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgICAgaWYgKG9uQ3VycmVudFJlcXVlc3QgJiYgaGFzRm9jdXMpIHtcbiAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IGZvY3VzRmlyc3QgPyAwIDogLTE7XG4gICAgICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICBzY29wZS5tYXRjaGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIC8vdHJhbnNmb3JtIGxhYmVsc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gbWF0Y2hlc1tpXTtcbiAgICAgICAgICAgICAgc2NvcGUubWF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogZ2V0TWF0Y2hJZChpKSxcbiAgICAgICAgICAgICAgICBsYWJlbDogcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIoc2NvcGUsIGxvY2FscyksXG4gICAgICAgICAgICAgICAgbW9kZWw6IG1hdGNoZXNbaV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNjb3BlLnF1ZXJ5ID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIC8vcG9zaXRpb24gcG9wLXVwIHdpdGggbWF0Y2hlcyAtIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIGl0cyBwb3NpdGlvbiBlYWNoIHRpbWUgd2UgYXJlIG9wZW5pbmcgYSB3aW5kb3dcbiAgICAgICAgICAgIC8vd2l0aCBtYXRjaGVzIGFzIGEgcG9wLXVwIG1pZ2h0IGJlIGFic29sdXRlLXBvc2l0aW9uZWQgYW5kIHBvc2l0aW9uIG9mIGFuIGlucHV0IG1pZ2h0IGhhdmUgY2hhbmdlZCBvbiBhIHBhZ2VcbiAgICAgICAgICAgIC8vZHVlIHRvIG90aGVyIGVsZW1lbnRzIGJlaW5nIHJlbmRlcmVkXG4gICAgICAgICAgICByZWNhbGN1bGF0ZVBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAvL1NlbGVjdCB0aGUgc2luZ2xlIHJlbWFpbmluZyBvcHRpb24gaWYgdXNlciBpbnB1dCBtYXRjaGVzXG4gICAgICAgICAgICBpZiAoc2VsZWN0T25FeGFjdCAmJiBzY29wZS5tYXRjaGVzLmxlbmd0aCA9PT0gMSAmJiBpbnB1dElzRXhhY3RNYXRjaChpbnB1dFZhbHVlLCAwKSkge1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZSkgfHwgYW5ndWxhci5pc09iamVjdChzY29wZS5kZWJvdW5jZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAkJGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KDAsIGV2dCk7XG4gICAgICAgICAgICAgICAgfSwgYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZSkgPyBzY29wZS5kZWJvdW5jZVVwZGF0ZSA6IHNjb3BlLmRlYm91bmNlVXBkYXRlWydkZWZhdWx0J10pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdCgwLCBldnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG93SGludCkge1xuICAgICAgICAgICAgICB2YXIgZmlyc3RMYWJlbCA9IHNjb3BlLm1hdGNoZXNbMF0ubGFiZWw7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGlucHV0VmFsdWUpICYmXG4gICAgICAgICAgICAgICAgaW5wdXRWYWx1ZS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgZmlyc3RMYWJlbC5zbGljZSgwLCBpbnB1dFZhbHVlLmxlbmd0aCkudG9VcHBlckNhc2UoKSA9PT0gaW5wdXRWYWx1ZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgaGludElucHV0RWxlbS52YWwoaW5wdXRWYWx1ZSArIGZpcnN0TGFiZWwuc2xpY2UoaW5wdXRWYWx1ZS5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaW50SW5wdXRFbGVtLnZhbCgnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uQ3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgIGlzTm9SZXN1bHRzU2V0dGVyKG9yaWdpbmFsU2NvcGUsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGJpbmQgZXZlbnRzIG9ubHkgaWYgYXBwZW5kVG9Cb2R5IHBhcmFtcyBleGlzdCAtIHBlcmZvcm1hbmNlIGZlYXR1cmVcbiAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3Jlc2l6ZScsIGZpcmVSZWNhbGN1bGF0aW5nKTtcbiAgICAgICRkb2N1bWVudC5maW5kKCdib2R5Jykub24oJ3Njcm9sbCcsIGZpcmVSZWNhbGN1bGF0aW5nKTtcbiAgICB9XG5cbiAgICAvLyBEZWNsYXJlIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gb3V0c2lkZSByZWNhbGN1bGF0aW5nIGZvclxuICAgIC8vIHByb3BlciBkZWJvdW5jaW5nXG4gICAgdmFyIGRlYm91bmNlZFJlY2FsY3VsYXRlID0gJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIHBvcHVwIGlzIHZpc2libGVcbiAgICAgIGlmIChzY29wZS5tYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICByZWNhbGN1bGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLm1vdmVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfSwgZXZlbnREZWJvdW5jZVRpbWUpO1xuXG4gICAgLy8gRGVmYXVsdCBwcm9ncmVzcyB0eXBlXG4gICAgc2NvcGUubW92ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGZpcmVSZWNhbGN1bGF0aW5nKCkge1xuICAgICAgaWYgKCFzY29wZS5tb3ZlSW5Qcm9ncmVzcykge1xuICAgICAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgIH1cblxuICAgICAgZGVib3VuY2VkUmVjYWxjdWxhdGUoKTtcbiAgICB9XG5cbiAgICAvLyByZWNhbGN1bGF0ZSBhY3R1YWwgcG9zaXRpb24gYW5kIHNldCBuZXcgdmFsdWVzIHRvIHNjb3BlXG4gICAgLy8gYWZ0ZXIgZGlnZXN0IGxvb3AgaXMgcG9wdXAgaW4gcmlnaHQgcG9zaXRpb25cbiAgICBmdW5jdGlvbiByZWNhbGN1bGF0ZVBvc2l0aW9uKCkge1xuICAgICAgc2NvcGUucG9zaXRpb24gPSBhcHBlbmRUb0JvZHkgPyAkcG9zaXRpb24ub2Zmc2V0KGVsZW1lbnQpIDogJHBvc2l0aW9uLnBvc2l0aW9uKGVsZW1lbnQpO1xuICAgICAgc2NvcGUucG9zaXRpb24udG9wICs9IGVsZW1lbnQucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgfVxuXG4gICAgLy93ZSBuZWVkIHRvIHByb3BhZ2F0ZSB1c2VyJ3MgcXVlcnkgc28gd2UgY2FuIGhpZ2xpZ2h0IG1hdGNoZXNcbiAgICBzY29wZS5xdWVyeSA9IHVuZGVmaW5lZDtcblxuICAgIC8vRGVjbGFyZSB0aGUgdGltZW91dCBwcm9taXNlIHZhciBvdXRzaWRlIHRoZSBmdW5jdGlvbiBzY29wZSBzbyB0aGF0IHN0YWNrZWQgY2FsbHMgY2FuIGJlIGNhbmNlbGxlZCBsYXRlclxuICAgIHZhciB0aW1lb3V0UHJvbWlzZTtcblxuICAgIHZhciBzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0ID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuICAgICAgdGltZW91dFByb21pc2UgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2V0TWF0Y2hlc0FzeW5jKGlucHV0VmFsdWUpO1xuICAgICAgfSwgd2FpdFRpbWUpO1xuICAgIH07XG5cbiAgICB2YXIgY2FuY2VsUHJldmlvdXNUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGltZW91dFByb21pc2UpIHtcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVvdXRQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVzZXRNYXRjaGVzKCk7XG5cbiAgICBzY29wZS5hc3NpZ25Jc09wZW4gPSBmdW5jdGlvbiAoaXNPcGVuKSB7XG4gICAgICBpc09wZW5TZXR0ZXIob3JpZ2luYWxTY29wZSwgaXNPcGVuKTtcbiAgICB9O1xuXG4gICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oYWN0aXZlSWR4LCBldnQpIHtcbiAgICAgIC8vY2FsbGVkIGZyb20gd2l0aGluIHRoZSAkZGlnZXN0KCkgY3ljbGVcbiAgICAgIHZhciBsb2NhbHMgPSB7fTtcbiAgICAgIHZhciBtb2RlbCwgaXRlbTtcblxuICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSBpdGVtID0gc2NvcGUubWF0Y2hlc1thY3RpdmVJZHhdLm1vZGVsO1xuICAgICAgbW9kZWwgPSBwYXJzZXJSZXN1bHQubW9kZWxNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcbiAgICAgICRzZXRNb2RlbFZhbHVlKG9yaWdpbmFsU2NvcGUsIG1vZGVsKTtcbiAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdwYXJzZScsIHRydWUpO1xuXG4gICAgICBvblNlbGVjdENhbGxiYWNrKG9yaWdpbmFsU2NvcGUsIHtcbiAgICAgICAgJGl0ZW06IGl0ZW0sXG4gICAgICAgICRtb2RlbDogbW9kZWwsXG4gICAgICAgICRsYWJlbDogcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKSxcbiAgICAgICAgJGV2ZW50OiBldnRcbiAgICAgIH0pO1xuXG4gICAgICByZXNldE1hdGNoZXMoKTtcblxuICAgICAgLy9yZXR1cm4gZm9jdXMgdG8gdGhlIGlucHV0IGVsZW1lbnQgaWYgYSBtYXRjaCB3YXMgc2VsZWN0ZWQgdmlhIGEgbW91c2UgY2xpY2sgZXZlbnRcbiAgICAgIC8vIHVzZSB0aW1lb3V0IHRvIGF2b2lkICRyb290U2NvcGU6aW5wcm9nIGVycm9yXG4gICAgICBpZiAoc2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkRm9jdXNPblNlbGVjdCkgIT09IGZhbHNlKSB7XG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkgeyBlbGVtZW50WzBdLmZvY3VzKCk7IH0sIDAsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9iaW5kIGtleWJvYXJkIGV2ZW50czogYXJyb3dzIHVwKDM4KSAvIGRvd24oNDApLCBlbnRlcigxMykgYW5kIHRhYig5KSwgZXNjKDI3KVxuICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldnQpIHtcbiAgICAgIC8vdHlwZWFoZWFkIGlzIG9wZW4gYW5kIGFuIFwiaW50ZXJlc3RpbmdcIiBrZXkgd2FzIHByZXNzZWRcbiAgICAgIGlmIChzY29wZS5tYXRjaGVzLmxlbmd0aCA9PT0gMCB8fCBIT1RfS0VZUy5pbmRleE9mKGV2dC53aGljaCkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3VsZFNlbGVjdCA9IGlzU2VsZWN0RXZlbnQob3JpZ2luYWxTY29wZSwgeyRldmVudDogZXZ0fSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogaWYgdGhlcmUncyBub3RoaW5nIHNlbGVjdGVkIChpLmUuIGZvY3VzRmlyc3QpIGFuZCBlbnRlciBvciB0YWIgaXMgaGl0XG4gICAgICAgKiBvclxuICAgICAgICogc2hpZnQgKyB0YWIgaXMgcHJlc3NlZCB0byBicmluZyBmb2N1cyB0byB0aGUgcHJldmlvdXMgZWxlbWVudFxuICAgICAgICogdGhlbiBjbGVhciB0aGUgcmVzdWx0c1xuICAgICAgICovXG4gICAgICBpZiAoc2NvcGUuYWN0aXZlSWR4ID09PSAtMSAmJiBzaG91bGRTZWxlY3QgfHwgZXZ0LndoaWNoID09PSA5ICYmICEhZXZ0LnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgdGFyZ2V0O1xuICAgICAgc3dpdGNoIChldnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSAyNzogLy8gZXNjYXBlXG4gICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgcmVzZXRNYXRjaGVzKCk7XG4gICAgICAgICAgb3JpZ2luYWxTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzg6IC8vIHVwIGFycm93XG4gICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gKHNjb3BlLmFjdGl2ZUlkeCA+IDAgPyBzY29wZS5hY3RpdmVJZHggOiBzY29wZS5tYXRjaGVzLmxlbmd0aCkgLSAxO1xuICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB0YXJnZXQgPSBwb3BVcEVsWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJy51aWItdHlwZWFoZWFkLW1hdGNoJylbc2NvcGUuYWN0aXZlSWR4XTtcbiAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB0YXJnZXQub2Zmc2V0VG9wO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOiAvLyBkb3duIGFycm93XG4gICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gKHNjb3BlLmFjdGl2ZUlkeCArIDEpICUgc2NvcGUubWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIHRhcmdldCA9IHBvcFVwRWxbMF0ucXVlcnlTZWxlY3RvckFsbCgnLnVpYi10eXBlYWhlYWQtbWF0Y2gnKVtzY29wZS5hY3RpdmVJZHhdO1xuICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLnNjcm9sbFRvcCA9IHRhcmdldC5vZmZzZXRUb3A7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHNob3VsZFNlbGVjdCkge1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcihzY29wZS5kZWJvdW5jZVVwZGF0ZSkgfHwgYW5ndWxhci5pc09iamVjdChzY29wZS5kZWJvdW5jZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAkJGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHNjb3BlLmFjdGl2ZUlkeCwgZXZ0KTtcbiAgICAgICAgICAgICAgICB9LCBhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLmRlYm91bmNlVXBkYXRlKSA/IHNjb3BlLmRlYm91bmNlVXBkYXRlIDogc2NvcGUuZGVib3VuY2VVcGRhdGVbJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHNjb3BlLmFjdGl2ZUlkeCwgZXZ0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBoYXNGb2N1cyA9IHRydWU7XG4gICAgICBpZiAobWluTGVuZ3RoID09PSAwICYmICFtb2RlbEN0cmwuJHZpZXdWYWx1ZSkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMobW9kZWxDdHJsLiR2aWV3VmFsdWUsIGV2dCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgaWYgKGlzU2VsZWN0T25CbHVyICYmIHNjb3BlLm1hdGNoZXMubGVuZ3RoICYmIHNjb3BlLmFjdGl2ZUlkeCAhPT0gLTEgJiYgIXNlbGVjdGVkKSB7XG4gICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KHNjb3BlLmRlYm91bmNlVXBkYXRlKSAmJiBhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLmRlYm91bmNlVXBkYXRlLmJsdXIpKSB7XG4gICAgICAgICAgICAkJGRlYm91bmNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzY29wZS5zZWxlY3Qoc2NvcGUuYWN0aXZlSWR4LCBldnQpO1xuICAgICAgICAgICAgfSwgc2NvcGUuZGVib3VuY2VVcGRhdGUuYmx1cik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgsIGV2dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNFZGl0YWJsZSAmJiBtb2RlbEN0cmwuJGVycm9yLmVkaXRhYmxlKSB7XG4gICAgICAgIG1vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKCk7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBSZXNldCB2YWxpZGl0eSBhcyB3ZSBhcmUgY2xlYXJpbmdcbiAgICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3BhcnNlJywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50LnZhbCgnJyk7XG4gICAgICB9XG4gICAgICBoYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIGNsaWNrIGhhbmRsZXIgdG8gdW5iaW5kIGl0LlxuICAgIHZhciBkaXNtaXNzQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAvLyBJc3N1ZSAjMzk3M1xuICAgICAgLy8gRmlyZWZveCB0cmVhdHMgcmlnaHQgY2xpY2sgYXMgYSBjbGljayBvbiBkb2N1bWVudFxuICAgICAgaWYgKGVsZW1lbnRbMF0gIT09IGV2dC50YXJnZXQgJiYgZXZ0LndoaWNoICE9PSAzICYmIHNjb3BlLm1hdGNoZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgIG9yaWdpbmFsU2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgICRkb2N1bWVudC5vbignY2xpY2snLCBkaXNtaXNzQ2xpY2tIYW5kbGVyKTtcblxuICAgIG9yaWdpbmFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgJGRvY3VtZW50Lm9mZignY2xpY2snLCBkaXNtaXNzQ2xpY2tIYW5kbGVyKTtcbiAgICAgIGlmIChhcHBlbmRUb0JvZHkgfHwgYXBwZW5kVG8pIHtcbiAgICAgICAgJHBvcHVwLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIGZpcmVSZWNhbGN1bGF0aW5nKTtcbiAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5vZmYoJ3Njcm9sbCcsIGZpcmVSZWNhbGN1bGF0aW5nKTtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgalF1ZXJ5IGNhY2hlIG1lbW9yeSBsZWFrXG4gICAgICBwb3BVcEVsLnJlbW92ZSgpO1xuXG4gICAgICBpZiAoc2hvd0hpbnQpIHtcbiAgICAgICAgICBpbnB1dHNDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgJHBvcHVwID0gJGNvbXBpbGUocG9wVXBFbCkoc2NvcGUpO1xuXG4gICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQoJHBvcHVwKTtcbiAgICB9IGVsc2UgaWYgKGFwcGVuZFRvKSB7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoYXBwZW5kVG8pLmVxKDApLmFwcGVuZCgkcG9wdXApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LmFmdGVyKCRwb3B1cCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0ID0gZnVuY3Rpb24oX21vZGVsQ3RybCkge1xuICAgICAgbW9kZWxDdHJsID0gX21vZGVsQ3RybDtcbiAgICAgIG5nTW9kZWxPcHRpb25zID0gZXh0cmFjdE9wdGlvbnMobW9kZWxDdHJsKTtcblxuICAgICAgc2NvcGUuZGVib3VuY2VVcGRhdGUgPSAkcGFyc2UobmdNb2RlbE9wdGlvbnMuZ2V0T3B0aW9uKCdkZWJvdW5jZScpKShvcmlnaW5hbFNjb3BlKTtcblxuICAgICAgLy9wbHVnIGludG8gJHBhcnNlcnMgcGlwZWxpbmUgdG8gb3BlbiBhIHR5cGVhaGVhZCBvbiB2aWV3IGNoYW5nZXMgaW5pdGlhdGVkIGZyb20gRE9NXG4gICAgICAvLyRwYXJzZXJzIGtpY2staW4gb24gYWxsIHRoZSBjaGFuZ2VzIGNvbWluZyBmcm9tIHRoZSB2aWV3IGFzIHdlbGwgYXMgbWFudWFsbHkgdHJpZ2dlcmVkIGJ5ICRzZXRWaWV3VmFsdWVcbiAgICAgIG1vZGVsQ3RybC4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgICAgaGFzRm9jdXMgPSB0cnVlO1xuXG4gICAgICAgIGlmIChtaW5MZW5ndGggPT09IDAgfHwgaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+PSBtaW5MZW5ndGgpIHtcbiAgICAgICAgICBpZiAod2FpdFRpbWUgPiAwKSB7XG4gICAgICAgICAgICBjYW5jZWxQcmV2aW91c1RpbWVvdXQoKTtcbiAgICAgICAgICAgIHNjaGVkdWxlU2VhcmNoV2l0aFRpbWVvdXQoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldE1hdGNoZXNBc3luYyhpbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICBjYW5jZWxQcmV2aW91c1RpbWVvdXQoKTtcbiAgICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlucHV0VmFsdWUpIHtcbiAgICAgICAgICAvLyBSZXNldCBpbiBjYXNlIHVzZXIgaGFkIHR5cGVkIHNvbWV0aGluZyBwcmV2aW91c2x5LlxuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICBtb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihtb2RlbFZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGVWaWV3VmFsdWUsIGVtcHR5Vmlld1ZhbHVlO1xuICAgICAgICB2YXIgbG9jYWxzID0ge307XG5cbiAgICAgICAgLy8gVGhlIHZhbGlkaXR5IG1heSBiZSBzZXQgdG8gZmFsc2UgdmlhICRwYXJzZXJzIChzZWUgYWJvdmUpIGlmXG4gICAgICAgIC8vIHRoZSBtb2RlbCBpcyByZXN0cmljdGVkIHRvIHNlbGVjdGVkIHZhbHVlcy4gSWYgdGhlIG1vZGVsXG4gICAgICAgIC8vIGlzIHNldCBtYW51YWxseSBpdCBpcyBjb25zaWRlcmVkIHRvIGJlIHZhbGlkLlxuICAgICAgICBpZiAoIWlzRWRpdGFibGUpIHtcbiAgICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0Rm9ybWF0dGVyKSB7XG4gICAgICAgICAgbG9jYWxzLiRtb2RlbCA9IG1vZGVsVmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGlucHV0Rm9ybWF0dGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2l0IG1pZ2h0IGhhcHBlbiB0aGF0IHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm8gdG8gcHJvcGVybHkgcmVuZGVyIGlucHV0IHZhbHVlXG4gICAgICAgIC8vd2UgbmVlZCB0byBjaGVjayBmb3IgdGhpcyBzaXR1YXRpb24gYW5kIHNpbXBseSByZXR1cm4gbW9kZWwgdmFsdWUgaWYgd2UgY2FuJ3QgYXBwbHkgY3VzdG9tIGZvcm1hdHRpbmdcbiAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSBtb2RlbFZhbHVlO1xuICAgICAgICBjYW5kaWRhdGVWaWV3VmFsdWUgPSBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZW1wdHlWaWV3VmFsdWUgPSBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGVWaWV3VmFsdWUgIT09IGVtcHR5Vmlld1ZhbHVlID8gY2FuZGlkYXRlVmlld1ZhbHVlIDogbW9kZWxWYWx1ZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0T3B0aW9ucyhuZ01vZGVsQ3RybCkge1xuICAgICAgdmFyIG5nTW9kZWxPcHRpb25zO1xuXG4gICAgICBpZiAoYW5ndWxhci52ZXJzaW9uLm1pbm9yIDwgNikgeyAvLyBpbiBhbmd1bGFyIDwgMS42ICRvcHRpb25zIGNvdWxkIGJlIG1pc3NpbmdcbiAgICAgICAgLy8gZ3VhcmFudGVlIGEgdmFsdWVcbiAgICAgICAgbmdNb2RlbE9wdGlvbnMgPSBuZ01vZGVsQ3RybC4kb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAvLyBtaW1pYyAxLjYrIGFwaVxuICAgICAgICBuZ01vZGVsT3B0aW9ucy5nZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIG5nTW9kZWxPcHRpb25zW2tleV07XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgeyAvLyBpbiBhbmd1bGFyID49MS42ICRvcHRpb25zIGlzIGFsd2F5cyBwcmVzZW50XG4gICAgICAgIG5nTW9kZWxPcHRpb25zID0gbmdNb2RlbEN0cmwuJG9wdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZ01vZGVsT3B0aW9ucztcbiAgICB9XG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3VpYlR5cGVhaGVhZCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250cm9sbGVyOiAnVWliVHlwZWFoZWFkQ29udHJvbGxlcicsXG4gICAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAndWliVHlwZWFoZWFkJ10sXG4gICAgICBsaW5rOiBmdW5jdGlvbihvcmlnaW5hbFNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgICAgY3RybHNbMV0uaW5pdChjdHJsc1swXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSlcblxuICAuZGlyZWN0aXZlKCd1aWJUeXBlYWhlYWRQb3B1cCcsIFsnJCRkZWJvdW5jZScsIGZ1bmN0aW9uKCQkZGVib3VuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgbWF0Y2hlczogJz0nLFxuICAgICAgICBxdWVyeTogJz0nLFxuICAgICAgICBhY3RpdmU6ICc9JyxcbiAgICAgICAgcG9zaXRpb246ICcmJyxcbiAgICAgICAgbW92ZUluUHJvZ3Jlc3M6ICc9JyxcbiAgICAgICAgc2VsZWN0OiAnJicsXG4gICAgICAgIGFzc2lnbklzT3BlbjogJyYnLFxuICAgICAgICBkZWJvdW5jZTogJyYnXG4gICAgICB9LFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgICByZXR1cm4gYXR0cnMucG9wdXBUZW1wbGF0ZVVybCB8fCAndWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbCc7XG4gICAgICB9LFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLnRlbXBsYXRlVXJsID0gYXR0cnMudGVtcGxhdGVVcmw7XG5cbiAgICAgICAgc2NvcGUuaXNPcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGlzRHJvcGRvd25PcGVuID0gc2NvcGUubWF0Y2hlcy5sZW5ndGggPiAwO1xuICAgICAgICAgIHNjb3BlLmFzc2lnbklzT3Blbih7IGlzT3BlbjogaXNEcm9wZG93bk9wZW4gfSk7XG4gICAgICAgICAgcmV0dXJuIGlzRHJvcGRvd25PcGVuO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24obWF0Y2hJZHgpIHtcbiAgICAgICAgICByZXR1cm4gc2NvcGUuYWN0aXZlID09PSBtYXRjaElkeDtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5zZWxlY3RBY3RpdmUgPSBmdW5jdGlvbihtYXRjaElkeCkge1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZSA9IG1hdGNoSWR4O1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLnNlbGVjdE1hdGNoID0gZnVuY3Rpb24oYWN0aXZlSWR4LCBldnQpIHtcbiAgICAgICAgICB2YXIgZGVib3VuY2UgPSBzY29wZS5kZWJvdW5jZSgpO1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKGRlYm91bmNlKSB8fCBhbmd1bGFyLmlzT2JqZWN0KGRlYm91bmNlKSkge1xuICAgICAgICAgICAgJCRkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHthY3RpdmVJZHg6IGFjdGl2ZUlkeCwgZXZ0OiBldnR9KTtcbiAgICAgICAgICAgIH0sIGFuZ3VsYXIuaXNOdW1iZXIoZGVib3VuY2UpID8gZGVib3VuY2UgOiBkZWJvdW5jZVsnZGVmYXVsdCddKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NvcGUuc2VsZWN0KHthY3RpdmVJZHg6IGFjdGl2ZUlkeCwgZXZ0OiBldnR9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgndWliVHlwZWFoZWFkTWF0Y2gnLCBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGNvbXBpbGUnLCAnJHBhcnNlJywgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgJGNvbXBpbGUsICRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZToge1xuICAgICAgICBpbmRleDogJz0nLFxuICAgICAgICBtYXRjaDogJz0nLFxuICAgICAgICBxdWVyeTogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciB0cGxVcmwgPSAkcGFyc2UoYXR0cnMudGVtcGxhdGVVcmwpKHNjb3BlLiRwYXJlbnQpIHx8ICd1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sJztcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdCh0cGxVcmwpLnRoZW4oZnVuY3Rpb24odHBsQ29udGVudCkge1xuICAgICAgICAgIHZhciB0cGxFbCA9IGFuZ3VsYXIuZWxlbWVudCh0cGxDb250ZW50LnRyaW0oKSk7XG4gICAgICAgICAgZWxlbWVudC5yZXBsYWNlV2l0aCh0cGxFbCk7XG4gICAgICAgICAgJGNvbXBpbGUodHBsRWwpKHNjb3BlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmZpbHRlcigndWliVHlwZWFoZWFkSGlnaGxpZ2h0JywgWyckc2NlJywgJyRpbmplY3RvcicsICckbG9nJywgZnVuY3Rpb24oJHNjZSwgJGluamVjdG9yLCAkbG9nKSB7XG4gICAgdmFyIGlzU2FuaXRpemVQcmVzZW50O1xuICAgIGlzU2FuaXRpemVQcmVzZW50ID0gJGluamVjdG9yLmhhcygnJHNhbml0aXplJyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdleHAocXVlcnlUb0VzY2FwZSkge1xuICAgICAgLy8gUmVnZXg6IGNhcHR1cmUgdGhlIHdob2xlIHF1ZXJ5IHN0cmluZyBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoZSBzdHJpbmcgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWF0Y2hcbiAgICAgIC8vIHRoZSByZXN1bHRzLCBmb3IgZXhhbXBsZSBpZiB0aGUgY2FwdHVyZSBpcyBcImFcIiB0aGUgcmVzdWx0IHdpbGwgYmUgXFxhXG4gICAgICByZXR1cm4gcXVlcnlUb0VzY2FwZS5yZXBsYWNlKC8oWy4/KiteJFtcXF1cXFxcKCl7fXwtXSkvZywgJ1xcXFwkMScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zSHRtbChtYXRjaEl0ZW0pIHtcbiAgICAgIHJldHVybiAvPC4qPi9nLnRlc3QobWF0Y2hJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24obWF0Y2hJdGVtLCBxdWVyeSkge1xuICAgICAgaWYgKCFpc1Nhbml0aXplUHJlc2VudCAmJiBjb250YWluc0h0bWwobWF0Y2hJdGVtKSkge1xuICAgICAgICAkbG9nLndhcm4oJ1Vuc2FmZSB1c2Ugb2YgdHlwZWFoZWFkIHBsZWFzZSB1c2UgbmdTYW5pdGl6ZScpOyAvLyBXYXJuIHRoZSB1c2VyIGFib3V0IHRoZSBkYW5nZXJcbiAgICAgIH1cbiAgICAgIG1hdGNoSXRlbSA9IHF1ZXJ5ID8gKCcnICsgbWF0Y2hJdGVtKS5yZXBsYWNlKG5ldyBSZWdFeHAoZXNjYXBlUmVnZXhwKHF1ZXJ5KSwgJ2dpJyksICc8c3Ryb25nPiQmPC9zdHJvbmc+JykgOiBtYXRjaEl0ZW07IC8vIFJlcGxhY2VzIHRoZSBjYXB0dXJlIHN0cmluZyB3aXRoIGEgdGhlIHNhbWUgc3RyaW5nIGluc2lkZSBvZiBhIFwic3Ryb25nXCIgdGFnXG4gICAgICBpZiAoIWlzU2FuaXRpemVQcmVzZW50KSB7XG4gICAgICAgIG1hdGNoSXRlbSA9ICRzY2UudHJ1c3RBc0h0bWwobWF0Y2hJdGVtKTsgLy8gSWYgJHNhbml0aXplIGlzIG5vdCBwcmVzZW50IHdlIHBhY2sgdGhlIHN0cmluZyBpbiBhICRzY2Ugb2JqZWN0IGZvciB0aGUgbmctYmluZC1odG1sIGRpcmVjdGl2ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoSXRlbTtcbiAgICB9O1xuICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIixcbiAgICBcIjxkaXYgcm9sZT1cXFwidGFiXFxcIiBpZD1cXFwie3s6OmhlYWRpbmdJZH19XFxcIiBhcmlhLXNlbGVjdGVkPVxcXCJ7e2lzT3Blbn19XFxcIiBjbGFzcz1cXFwicGFuZWwtaGVhZGluZ1xcXCIgbmcta2V5cHJlc3M9XFxcInRvZ2dsZU9wZW4oJGV2ZW50KVxcXCI+XFxuXCIgK1xuICAgIFwiICA8aDQgY2xhc3M9XFxcInBhbmVsLXRpdGxlXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGEgcm9sZT1cXFwiYnV0dG9uXFxcIiBkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiIGhyZWYgYXJpYS1leHBhbmRlZD1cXFwie3tpc09wZW59fVxcXCIgYXJpYS1jb250cm9scz1cXFwie3s6OnBhbmVsSWR9fVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIGNsYXNzPVxcXCJhY2NvcmRpb24tdG9nZ2xlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlT3BlbigpXFxcIiB1aWItYWNjb3JkaW9uLXRyYW5zY2x1ZGU9XFxcImhlYWRpbmdcXFwiIG5nLWRpc2FibGVkPVxcXCJpc0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPjxzcGFuIHVpYi1hY2NvcmRpb24taGVhZGVyIG5nLWNsYXNzPVxcXCJ7J3RleHQtbXV0ZWQnOiBpc0Rpc2FibGVkfVxcXCI+e3toZWFkaW5nfX08L3NwYW4+PC9hPlxcblwiICtcbiAgICBcIiAgPC9oND5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCI8ZGl2IGlkPVxcXCJ7ezo6cGFuZWxJZH19XFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInt7OjpoZWFkaW5nSWR9fVxcXCIgYXJpYS1oaWRkZW49XFxcInt7IWlzT3Blbn19XFxcIiByb2xlPVxcXCJ0YWJwYW5lbFxcXCIgY2xhc3M9XFxcInBhbmVsLWNvbGxhcHNlIGNvbGxhcHNlXFxcIiB1aWItY29sbGFwc2U9XFxcIiFpc09wZW5cXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIixcbiAgICBcIjxkaXYgcm9sZT1cXFwidGFibGlzdFxcXCIgY2xhc3M9XFxcInBhbmVsLWdyb3VwXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsXG4gICAgXCI8YnV0dG9uIG5nLXNob3c9XFxcImNsb3NlYWJsZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiY2xvc2VcXFwiIG5nLWNsaWNrPVxcXCJjbG9zZSh7JGV2ZW50OiAkZXZlbnR9KVxcXCI+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+JnRpbWVzOzwvc3Bhbj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5DbG9zZTwvc3Bhbj5cXG5cIiArXG4gICAgXCI8L2J1dHRvbj5cXG5cIiArXG4gICAgXCI8ZGl2IG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcImNhcm91c2VsLWlubmVyXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIjxhIHJvbGU9XFxcImJ1dHRvblxcXCIgaHJlZiBjbGFzcz1cXFwibGVmdCBjYXJvdXNlbC1jb250cm9sXFxcIiBuZy1jbGljaz1cXFwicHJldigpXFxcIiBuZy1jbGFzcz1cXFwieyBkaXNhYmxlZDogaXNQcmV2RGlzYWJsZWQoKSB9XFxcIiBuZy1zaG93PVxcXCJzbGlkZXMubGVuZ3RoID4gMVxcXCI+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L3NwYW4+XFxuXCIgK1xuICAgIFwiICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+cHJldmlvdXM8L3NwYW4+XFxuXCIgK1xuICAgIFwiPC9hPlxcblwiICtcbiAgICBcIjxhIHJvbGU9XFxcImJ1dHRvblxcXCIgaHJlZiBjbGFzcz1cXFwicmlnaHQgY2Fyb3VzZWwtY29udHJvbFxcXCIgbmctY2xpY2s9XFxcIm5leHQoKVxcXCIgbmctY2xhc3M9XFxcInsgZGlzYWJsZWQ6IGlzTmV4dERpc2FibGVkKCkgfVxcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcbiAgICBcIiAgPHNwYW4gYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvc3Bhbj5cXG5cIiArXG4gICAgXCIgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5uZXh0PC9zcGFuPlxcblwiICtcbiAgICBcIjwvYT5cXG5cIiArXG4gICAgXCI8b2wgY2xhc3M9XFxcImNhcm91c2VsLWluZGljYXRvcnNcXFwiIG5nLXNob3c9XFxcInNsaWRlcy5sZW5ndGggPiAxXFxcIj5cXG5cIiArXG4gICAgXCIgIDxsaSBuZy1yZXBlYXQ9XFxcInNsaWRlIGluIHNsaWRlcyB8IG9yZGVyQnk6aW5kZXhPZlNsaWRlIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctY2xhc3M9XFxcInsgYWN0aXZlOiBpc0FjdGl2ZShzbGlkZSkgfVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdChzbGlkZSlcXFwiPlxcblwiICtcbiAgICBcIiAgICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+c2xpZGUge3sgJGluZGV4ICsgMSB9fSBvZiB7eyBzbGlkZXMubGVuZ3RoIH19PHNwYW4gbmctaWY9XFxcImlzQWN0aXZlKHNsaWRlKVxcXCI+LCBjdXJyZW50bHkgYWN0aXZlPC9zcGFuPjwvc3Bhbj5cXG5cIiArXG4gICAgXCIgIDwvbGk+XFxuXCIgK1xuICAgIFwiPC9vbD5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLFxuICAgIFwiPGRpdiBuZy1zd2l0Y2g9XFxcImRhdGVwaWNrZXJNb2RlXFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgdWliLWRheXBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cXFwiZGF5XFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi1kYXlwaWNrZXJcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiB1aWItbW9udGhwaWNrZXIgbmctc3dpdGNoLXdoZW49XFxcIm1vbnRoXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi1tb250aHBpY2tlclxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8ZGl2IHVpYi15ZWFycGlja2VyIG5nLXN3aXRjaC13aGVuPVxcXCJ5ZWFyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcInVpYi15ZWFycGlja2VyXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+cHJldmlvdXM8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggY29sc3Bhbj1cXFwie3s6OjUgKyBzaG93V2Vla3N9fVxcXCI+PGJ1dHRvbiBpZD1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIHJvbGU9XFxcImhlYWRpbmdcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSB1aWItdGl0bGVcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNb2RlKClcXFwiIG5nLWRpc2FibGVkPVxcXCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0IHVpYi1yaWdodFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+bmV4dDwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIG5nLWlmPVxcXCJzaG93V2Vla3NcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggbmctcmVwZWF0PVxcXCJsYWJlbCBpbiA6OmxhYmVscyB0cmFjayBieSAkaW5kZXhcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+PHNtYWxsIGFyaWEtbGFiZWw9XFxcInt7OjpsYWJlbC5mdWxsfX1cXFwiPnt7OjpsYWJlbC5hYmJyfX08L3NtYWxsPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3RoZWFkPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgY2xhc3M9XFxcInVpYi13ZWVrc1xcXCIgbmctcmVwZWF0PVxcXCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiIHJvbGU9XFxcInJvd1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLWlmPVxcXCJzaG93V2Vla3NcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlciBoNlxcXCI+PGVtPnt7IHdlZWtOdW1iZXJzWyRpbmRleF0gfX08L2VtPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXJlcGVhdD1cXFwiZHQgaW4gcm93XFxcIiBjbGFzcz1cXFwidWliLWRheSB0ZXh0LWNlbnRlclxcXCIgcm9sZT1cXFwiZ3JpZGNlbGxcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBpZD1cXFwie3s6OmR0LnVpZH19XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgbmctY2xhc3M9XFxcIjo6ZHQuY3VzdG9tQ2xhc3NcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB1aWItaXMtY2xhc3M9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdidG4taW5mbycgZm9yIHNlbGVjdGVkRHQsXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2FjdGl2ZScgZm9yIGFjdGl2ZUR0XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgb24gZHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIG5nLWRpc2FibGVkPVxcXCI6OmR0LmRpc2FibGVkXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIG5nLWNsYXNzPVxcXCI6OnsndGV4dC1tdXRlZCc6IGR0LnNlY29uZGFyeSwgJ3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+cHJldmlvdXM8L3NwYW4+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggY29sc3Bhbj1cXFwie3s6OnllYXJIZWFkZXJDb2xzcGFufX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gdWliLXRpdGxlXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+PHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPm5leHQ8L3NwYW4+PC9pPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3RoZWFkPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgY2xhc3M9XFxcInVpYi1tb250aHNcXFwiIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIiByb2xlPVxcXCJyb3dcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvd1xcXCIgY2xhc3M9XFxcInVpYi1tb250aCB0ZXh0LWNlbnRlclxcXCIgcm9sZT1cXFwiZ3JpZGNlbGxcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBpZD1cXFwie3s6OmR0LnVpZH19XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgbmctY2xhc3M9XFxcIjo6ZHQuY3VzdG9tQ2xhc3NcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHVpYi1pcy1jbGFzcz1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgJ2J0bi1pbmZvJyBmb3Igc2VsZWN0ZWREdCxcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYWN0aXZlJyBmb3IgYWN0aXZlRHRcXG5cIiArXG4gICAgXCIgICAgICAgICAgICBvbiBkdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctY2xpY2s9XFxcInNlbGVjdChkdC5kYXRlKVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgbmctZGlzYWJsZWQ9XFxcIjo6ZHQuZGlzYWJsZWRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gbmctY2xhc3M9XFxcIjo6eyd0ZXh0LWluZm8nOiBkdC5jdXJyZW50fVxcXCI+e3s6OmR0LmxhYmVsfX08L3NwYW4+PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGJvZHk+XFxuXCIgK1xuICAgIFwiPC90YWJsZT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsXG4gICAgXCI8dGFibGUgcm9sZT1cXFwiZ3JpZFxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVxcXCJ7e2FjdGl2ZURhdGVJZH19XFxcIj5cXG5cIiArXG4gICAgXCIgIDx0aGVhZD5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0IHVpYi1sZWZ0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgtMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5wcmV2aW91czwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aCBjb2xzcGFuPVxcXCJ7ezo6Y29sdW1ucyAtIDJ9fVxcXCI+PGJ1dHRvbiBpZD1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIHJvbGU9XFxcImhlYWRpbmdcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSB1aWItdGl0bGVcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNb2RlKClcXFwiIG5nLWRpc2FibGVkPVxcXCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0IHVpYi1yaWdodFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoMSlcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PGkgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+bmV4dDwvc3Bhbj48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ1aWIteWVhcnNcXFwiIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIiByb2xlPVxcXCJyb3dcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvd1xcXCIgY2xhc3M9XFxcInVpYi15ZWFyIHRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdWliLWlzLWNsYXNzPVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAnYnRuLWluZm8nIGZvciBzZWxlY3RlZER0LFxcblwiICtcbiAgICBcIiAgICAgICAgICAgICdhY3RpdmUnIGZvciBhY3RpdmVEdFxcblwiICtcbiAgICBcIiAgICAgICAgICAgIG9uIGR0XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICBuZy1kaXNhYmxlZD1cXFwiOjpkdC5kaXNhYmxlZFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwiOjp7J3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlclBvcHVwL3BvcHVwLmh0bWxcIixcbiAgICBcIjx1bCByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiIGNsYXNzPVxcXCJ1aWItZGF0ZXBpY2tlci1wb3B1cCBkcm9wZG93bi1tZW51IHVpYi1wb3NpdGlvbi1tZWFzdXJlXFxcIiBkcm9wZG93bi1uZXN0ZWQgbmctaWY9XFxcImlzT3BlblxcXCIgbmcta2V5ZG93bj1cXFwia2V5ZG93bigkZXZlbnQpXFxcIiBuZy1jbGljaz1cXFwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXFxcIj5cXG5cIiArXG4gICAgXCIgIDxsaSBuZy10cmFuc2NsdWRlPjwvbGk+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctaWY9XFxcInNob3dCdXR0b25CYXJcXFwiIGNsYXNzPVxcXCJ1aWItYnV0dG9uLWJhclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxzcGFuIGNsYXNzPVxcXCJidG4tZ3JvdXAgcHVsbC1sZWZ0XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWluZm8gdWliLWRhdGVwaWNrZXItY3VycmVudFxcXCIgbmctY2xpY2s9XFxcInNlbGVjdCgndG9kYXknLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZCgndG9kYXknKVxcXCI+e3sgZ2V0VGV4dCgnY3VycmVudCcpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXIgdWliLWNsZWFyXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KG51bGwsICRldmVudClcXFwiPnt7IGdldFRleHQoJ2NsZWFyJykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgPC9zcGFuPlxcblwiICtcbiAgICBcIiAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLXN1Y2Nlc3MgcHVsbC1yaWdodCB1aWItY2xvc2VcXFwiIG5nLWNsaWNrPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj57eyBnZXRUZXh0KCdjbG9zZScpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICA8L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtZGlhbG9nIHt7c2l6ZSA/ICdtb2RhbC0nICsgc2l6ZSA6ICcnfX1cXFwiPjxkaXYgY2xhc3M9XFxcIm1vZGFsLWNvbnRlbnRcXFwiIHVpYi1tb2RhbC10cmFuc2NsdWRlPjwvZGl2PjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcGFnZXIvcGFnZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wYWdlci9wYWdlci5odG1sXCIsXG4gICAgXCI8bGkgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkLCBwcmV2aW91czogYWxpZ259XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgLSAxLCAkZXZlbnQpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCdwcmV2aW91cycpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCI8bGkgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWQsIG5leHQ6IGFsaWdufVxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tZmlyc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UoMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnZmlyc3QnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1pZj1cXFwiOjpkaXJlY3Rpb25MaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tcHJldlxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlIC0gMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgncHJldmlvdXMnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiPGxpIHJvbGU9XFxcIm1lbnVpdGVtXFxcIiBuZy1yZXBlYXQ9XFxcInBhZ2UgaW4gcGFnZXMgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogcGFnZS5hY3RpdmUsZGlzYWJsZWQ6IG5nRGlzYWJsZWQmJiFwYWdlLmFjdGl2ZX1cXFwiIGNsYXNzPVxcXCJwYWdpbmF0aW9uLXBhZ2VcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZS5udW1iZXIsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJuZ0Rpc2FibGVkJiYhcGFnZS5hY3RpdmVcXFwiIHVpYi10YWJpbmRleC10b2dnbGU+e3twYWdlLnRleHR9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6ZGlyZWN0aW9uTGlua3NcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tbmV4dFxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vTmV4dCgpfHxuZ0Rpc2FibGVkXFxcIiB1aWItdGFiaW5kZXgtdG9nZ2xlPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjxsaSByb2xlPVxcXCJtZW51aXRlbVxcXCIgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1sYXN0XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHRvdGFsUGFnZXMsICRldmVudClcXFwiIG5nLWRpc2FibGVkPVxcXCJub05leHQoKXx8bmdEaXNhYmxlZFxcXCIgdWliLXRhYmluZGV4LXRvZ2dsZT57ezo6Z2V0VGV4dCgnbGFzdCcpfX08L2E+PC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZC1odG1sPVxcXCJjb250ZW50RXhwKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtaW5uZXJcXFwiIG5nLWJpbmQ9XFxcImNvbnRlbnRcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXAtaW5uZXJcXFwiXFxuXCIgK1xuICAgIFwiICB1aWItdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlPVxcXCJjb250ZW50RXhwKClcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIiBuZy1iaW5kLWh0bWw9XFxcImNvbnRlbnRFeHAoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwiYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlxcblwiICtcbiAgICBcIjxkaXYgY2xhc3M9XFxcInBvcG92ZXItaW5uZXJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8aDMgY2xhc3M9XFxcInBvcG92ZXItdGl0bGVcXFwiIG5nLWJpbmQ9XFxcInVpYlRpdGxlXFxcIiBuZy1pZj1cXFwidWliVGl0bGVcXFwiPjwvaDM+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcInBvcG92ZXItY29udGVudFxcXCJcXG5cIiArXG4gICAgXCIgICAgICB1aWItdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlPVxcXCJjb250ZW50RXhwKClcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlLXNjb3BlPVxcXCJvcmlnaW5TY29wZSgpXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxoMyBjbGFzcz1cXFwicG9wb3Zlci10aXRsZVxcXCIgbmctYmluZD1cXFwidWliVGl0bGVcXFwiIG5nLWlmPVxcXCJ1aWJUaXRsZVxcXCI+PC9oMz5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIiBuZy1iaW5kPVxcXCJjb250ZW50XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiIG5nLWNsYXNzPVxcXCJ0eXBlICYmICdwcm9ncmVzcy1iYXItJyArIHR5cGVcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWVtaW49XFxcIjBcXFwiIGFyaWEtdmFsdWVtYXg9XFxcInt7bWF4fX1cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IChwZXJjZW50IDwgMTAwID8gcGVyY2VudCA6IDEwMCkgKyAnJSd9XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3twZXJjZW50IHwgbnVtYmVyOjB9fSVcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBuZy10cmFuc2NsdWRlIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiPjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInVpYi90ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzc1xcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiIG5nLWNsYXNzPVxcXCJ0eXBlICYmICdwcm9ncmVzcy1iYXItJyArIHR5cGVcXFwiIHJvbGU9XFxcInByb2dyZXNzYmFyXFxcIiBhcmlhLXZhbHVlbm93PVxcXCJ7e3ZhbHVlfX1cXFwiIGFyaWEtdmFsdWVtaW49XFxcIjBcXFwiIGFyaWEtdmFsdWVtYXg9XFxcInt7bWF4fX1cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IChwZXJjZW50IDwgMTAwID8gcGVyY2VudCA6IDEwMCkgKyAnJSd9XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3twZXJjZW50IHwgbnVtYmVyOjB9fSVcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnRpdGxlfX1cXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXG4gICAgXCI8c3BhbiBuZy1tb3VzZWxlYXZlPVxcXCJyZXNldCgpXFxcIiBuZy1rZXlkb3duPVxcXCJvbktleWRvd24oJGV2ZW50KVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIHJvbGU9XFxcInNsaWRlclxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3tyYW5nZS5sZW5ndGh9fVxcXCIgYXJpYS12YWx1ZW5vdz1cXFwie3t2YWx1ZX19XFxcIiBhcmlhLXZhbHVldGV4dD1cXFwie3t0aXRsZX19XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPHNwYW4gbmctcmVwZWF0LXN0YXJ0PVxcXCJyIGluIHJhbmdlIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcInNyLW9ubHlcXFwiPih7eyAkaW5kZXggPCB2YWx1ZSA/ICcqJyA6ICcgJyB9fSk8L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgIDxpIG5nLXJlcGVhdC1lbmQgbmctbW91c2VlbnRlcj1cXFwiZW50ZXIoJGluZGV4ICsgMSlcXFwiIG5nLWNsaWNrPVxcXCJyYXRlKCRpbmRleCArIDEpXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uXFxcIiBuZy1jbGFzcz1cXFwiJGluZGV4IDwgdmFsdWUgJiYgKHIuc3RhdGVPbiB8fCAnZ2x5cGhpY29uLXN0YXInKSB8fCAoci5zdGF0ZU9mZiB8fCAnZ2x5cGhpY29uLXN0YXItZW1wdHknKVxcXCIgbmctYXR0ci10aXRsZT1cXFwie3tyLnRpdGxlfX1cXFwiPjwvaT5cXG5cIiArXG4gICAgXCI8L3NwYW4+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixcbiAgICBcIjxsaSBuZy1jbGFzcz1cXFwiW3thY3RpdmU6IGFjdGl2ZSwgZGlzYWJsZWQ6IGRpc2FibGVkfSwgY2xhc3Nlc11cXFwiIGNsYXNzPVxcXCJ1aWItdGFiIG5hdi1pdGVtXFxcIj5cXG5cIiArXG4gICAgXCIgIDxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdCgkZXZlbnQpXFxcIiBjbGFzcz1cXFwibmF2LWxpbmtcXFwiIHVpYi10YWItaGVhZGluZy10cmFuc2NsdWRlPnt7aGVhZGluZ319PC9hPlxcblwiICtcbiAgICBcIjwvbGk+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcbiAgICBcIjxkaXY+XFxuXCIgK1xuICAgIFwiICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYte3t0YWJzZXQudHlwZSB8fCAndGFicyd9fVxcXCIgbmctY2xhc3M9XFxcInsnbmF2LXN0YWNrZWQnOiB2ZXJ0aWNhbCwgJ25hdi1qdXN0aWZpZWQnOiBqdXN0aWZpZWR9XFxcIiBuZy10cmFuc2NsdWRlPjwvdWw+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0YWItY29udGVudFxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcInRhYi1wYW5lXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLXJlcGVhdD1cXFwidGFiIGluIHRhYnNldC50YWJzXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiB0YWJzZXQuYWN0aXZlID09PSB0YWIuaW5kZXh9XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgIHVpYi10YWItY29udGVudC10cmFuc2NsdWRlPVxcXCJ0YWJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ1aWIvdGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIixcbiAgICBcIjx0YWJsZSBjbGFzcz1cXFwidWliLXRpbWVwaWNrZXJcXFwiPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiBuZy1zaG93PVxcXCI6OnNob3dTcGlubmVyc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IGhvdXJzXFxcIj48YSBuZy1jbGljaz1cXFwiaW5jcmVtZW50SG91cnMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9JbmNyZW1lbnRIb3VycygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50SG91cnMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkPiZuYnNwOzwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJ1aWItaW5jcmVtZW50IG1pbnV0ZXNcXFwiPjxhIG5nLWNsaWNrPVxcXCJpbmNyZW1lbnRNaW51dGVzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vSW5jcmVtZW50TWludXRlcygpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50TWludXRlcygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiPiZuYnNwOzwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dTZWNvbmRzXFxcIiBjbGFzcz1cXFwidWliLWluY3JlbWVudCBzZWNvbmRzXFxcIj48YSBuZy1jbGljaz1cXFwiaW5jcmVtZW50U2Vjb25kcygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0luY3JlbWVudFNlY29uZHMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudFNlY29uZHMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCI+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwiZm9ybS1ncm91cCB1aWItdGltZSBob3Vyc1xcXCIgbmctY2xhc3M9XFxcInsnaGFzLWVycm9yJzogaW52YWxpZEhvdXJzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIkhIXFxcIiBuZy1tb2RlbD1cXFwiaG91cnNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlSG91cnMoKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCB0ZXh0LWNlbnRlclxcXCIgbmctcmVhZG9ubHk9XFxcIjo6cmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudEhvdXJzKClcXFwiIG5nLWJsdXI9XFxcImJsdXIoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1zZXBhcmF0b3JcXFwiPjo8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwiZm9ybS1ncm91cCB1aWItdGltZSBtaW51dGVzXFxcIiBuZy1jbGFzcz1cXFwieydoYXMtZXJyb3InOiBpbnZhbGlkTWludXRlc31cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJNTVxcXCIgbmctbW9kZWw9XFxcIm1pbnV0ZXNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlTWludXRlcygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwiOjpyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIHRhYmluZGV4PVxcXCJ7ezo6dGFiaW5kZXh9fVxcXCIgbmctZGlzYWJsZWQ9XFxcIm5vSW5jcmVtZW50TWludXRlcygpXFxcIiBuZy1ibHVyPVxcXCJibHVyKClcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dTZWNvbmRzXFxcIiBjbGFzcz1cXFwidWliLXNlcGFyYXRvclxcXCI+OjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHVpYi10aW1lIHNlY29uZHNcXFwiIG5nLWNsYXNzPVxcXCJ7J2hhcy1lcnJvcic6IGludmFsaWRTZWNvbmRzfVxcXCIgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHBsYWNlaG9sZGVyPVxcXCJTU1xcXCIgbmctbW9kZWw9XFxcInNlY29uZHNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlU2Vjb25kcygpXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwicmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiIG5nLWRpc2FibGVkPVxcXCJub0luY3JlbWVudFNlY29uZHMoKVxcXCIgbmctYmx1cj1cXFwiYmx1cigpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiIGNsYXNzPVxcXCJ1aWItdGltZSBhbS1wbVxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vVG9nZ2xlTWVyaWRpYW4oKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgdGV4dC1jZW50ZXJcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNZXJpZGlhbigpXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9Ub2dnbGVNZXJpZGlhbigpXFxcIiB0YWJpbmRleD1cXFwie3s6OnRhYmluZGV4fX1cXFwiPnt7bWVyaWRpYW59fTwvYnV0dG9uPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcInVpYi1kZWNyZW1lbnQgaG91cnNcXFwiPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRIb3VycygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0RlY3JlbWVudEhvdXJzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIiBuZy1kaXNhYmxlZD1cXFwibm9EZWNyZW1lbnRIb3VycygpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZD4mbmJzcDs8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwidWliLWRlY3JlbWVudCBtaW51dGVzXFxcIj48YSBuZy1jbGljaz1cXFwiZGVjcmVtZW50TWludXRlcygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0RlY3JlbWVudE1pbnV0ZXMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0RlY3JlbWVudE1pbnV0ZXMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd25cXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd1NlY29uZHNcXFwiPiZuYnNwOzwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dTZWNvbmRzXFxcIiBjbGFzcz1cXFwidWliLWRlY3JlbWVudCBzZWNvbmRzXFxcIj48YSBuZy1jbGljaz1cXFwiZGVjcmVtZW50U2Vjb25kcygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0RlY3JlbWVudFNlY29uZHMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiIG5nLWRpc2FibGVkPVxcXCJub0RlY3JlbWVudFNlY29uZHMoKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd25cXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd01lcmlkaWFuXFxcIj48L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLFxuICAgIFwiPGEgaHJlZlxcblwiICtcbiAgICBcIiAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG5cIiArXG4gICAgXCIgICBuZy1iaW5kLWh0bWw9XFxcIm1hdGNoLmxhYmVsIHwgdWliVHlwZWFoZWFkSGlnaGxpZ2h0OnF1ZXJ5XFxcIlxcblwiICtcbiAgICBcIiAgIG5nLWF0dHItdGl0bGU9XFxcInt7bWF0Y2gubGFiZWx9fVxcXCI+PC9hPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiLFxuICAgIFwiPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51XFxcIiBuZy1zaG93PVxcXCJpc09wZW4oKSAmJiAhbW92ZUluUHJvZ3Jlc3NcXFwiIG5nLXN0eWxlPVxcXCJ7dG9wOiBwb3NpdGlvbigpLnRvcCsncHgnLCBsZWZ0OiBwb3NpdGlvbigpLmxlZnQrJ3B4J31cXFwiIHJvbGU9XFxcImxpc3Rib3hcXFwiIGFyaWEtaGlkZGVuPVxcXCJ7eyFpc09wZW4oKX19XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGxpIGNsYXNzPVxcXCJ1aWItdHlwZWFoZWFkLW1hdGNoXFxcIiBuZy1yZXBlYXQ9XFxcIm1hdGNoIGluIG1hdGNoZXMgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogaXNBY3RpdmUoJGluZGV4KSB9XFxcIiBuZy1tb3VzZWVudGVyPVxcXCJzZWxlY3RBY3RpdmUoJGluZGV4KVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdE1hdGNoKCRpbmRleCwgJGV2ZW50KVxcXCIgcm9sZT1cXFwib3B0aW9uXFxcIiBpZD1cXFwie3s6Om1hdGNoLmlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGRpdiB1aWItdHlwZWFoZWFkLW1hdGNoIGluZGV4PVxcXCIkaW5kZXhcXFwiIG1hdGNoPVxcXCJtYXRjaFxcXCIgcXVlcnk9XFxcInF1ZXJ5XFxcIiB0ZW1wbGF0ZS11cmw9XFxcInRlbXBsYXRlVXJsXFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgPC9saT5cXG5cIiArXG4gICAgXCI8L3VsPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuY2Fyb3VzZWwnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliQ2Fyb3VzZWxDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5uZy1hbmltYXRlLml0ZW06bm90KC5sZWZ0KTpub3QoLnJpZ2h0KXstd2Via2l0LXRyYW5zaXRpb246MHMgZWFzZS1pbi1vdXQgbGVmdDt0cmFuc2l0aW9uOjBzIGVhc2UtaW4tb3V0IGxlZnR9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkNhcm91c2VsQ3NzID0gdHJ1ZTsgfSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliRGF0ZXBpY2tlckNzcyAmJiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LnVpYi1kYXRlcGlja2VyIC51aWItdGl0bGV7d2lkdGg6MTAwJTt9LnVpYi1kYXkgYnV0dG9uLC51aWItbW9udGggYnV0dG9uLC51aWIteWVhciBidXR0b257bWluLXdpZHRoOjEwMCU7fS51aWItbGVmdCwudWliLXJpZ2h0e3dpZHRoOjEwMCV9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkRhdGVwaWNrZXJDc3MgPSB0cnVlOyB9KTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucG9zaXRpb24nKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliUG9zaXRpb25Dc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItcG9zaXRpb24tbWVhc3VyZXtkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7dmlzaWJpbGl0eTpoaWRkZW4gIWltcG9ydGFudDtwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O3RvcDotOTk5OXB4ICFpbXBvcnRhbnQ7bGVmdDotOTk5OXB4ICFpbXBvcnRhbnQ7fS51aWItcG9zaXRpb24tc2Nyb2xsYmFyLW1lYXN1cmV7cG9zaXRpb246YWJzb2x1dGUgIWltcG9ydGFudDt0b3A6LTk5OTlweCAhaW1wb3J0YW50O3dpZHRoOjUwcHggIWltcG9ydGFudDtoZWlnaHQ6NTBweCAhaW1wb3J0YW50O292ZXJmbG93OnNjcm9sbCAhaW1wb3J0YW50O30udWliLXBvc2l0aW9uLWJvZHktc2Nyb2xsYmFyLW1lYXN1cmV7b3ZlcmZsb3c6c2Nyb2xsICFpbXBvcnRhbnQ7fTwvc3R5bGU+Jyk7IGFuZ3VsYXIuJCR1aWJQb3NpdGlvbkNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyUG9wdXAnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliRGF0ZXBpY2tlcnBvcHVwQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4udWliLWRhdGVwaWNrZXItcG9wdXAuZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO2Zsb2F0Om5vbmU7bWFyZ2luOjA7fS51aWItYnV0dG9uLWJhcntwYWRkaW5nOjEwcHggOXB4IDJweDt9PC9zdHlsZT4nKTsgYW5ndWxhci4kJHVpYkRhdGVwaWNrZXJwb3B1cENzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50b29sdGlwJykucnVuKGZ1bmN0aW9uKCkgeyFhbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiAhYW5ndWxhci4kJHVpYlRvb2x0aXBDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC50b3AtcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLmxlZnQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1wb3B1cF0udG9vbHRpcC5yaWdodC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnRvcC1yaWdodCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLmJvdHRvbS1sZWZ0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLWh0bWwtcG9wdXBdLnRvb2x0aXAubGVmdC10b3AgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtaHRtbC1wb3B1cF0udG9vbHRpcC5sZWZ0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC1odG1sLXBvcHVwXS50b29sdGlwLnJpZ2h0LWJvdHRvbSA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC50b3AtbGVmdCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC50b3AtcmlnaHQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAuYm90dG9tLWxlZnQgPiAudG9vbHRpcC1hcnJvdyxbdWliLXRvb2x0aXAtdGVtcGxhdGUtcG9wdXBdLnRvb2x0aXAuYm90dG9tLXJpZ2h0ID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLmxlZnQtdG9wID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLmxlZnQtYm90dG9tID4gLnRvb2x0aXAtYXJyb3csW3VpYi10b29sdGlwLXRlbXBsYXRlLXBvcHVwXS50b29sdGlwLnJpZ2h0LXRvcCA+IC50b29sdGlwLWFycm93LFt1aWItdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cF0udG9vbHRpcC5yaWdodC1ib3R0b20gPiAudG9vbHRpcC1hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIudG9wLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnRvcC1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1yaWdodCA+IC5hcnJvdyxbdWliLXBvcG92ZXItcG9wdXBdLnBvcG92ZXIubGVmdC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3Zlci5yaWdodC10b3AgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci50b3AtbGVmdCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci50b3AtcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIuYm90dG9tLWxlZnQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLWh0bWwtcG9wdXBdLnBvcG92ZXIuYm90dG9tLXJpZ2h0ID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLmxlZnQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLmxlZnQtYm90dG9tID4gLmFycm93LFt1aWItcG9wb3Zlci1odG1sLXBvcHVwXS5wb3BvdmVyLnJpZ2h0LXRvcCA+IC5hcnJvdyxbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3Zlci5yaWdodC1ib3R0b20gPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLnRvcC1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci50b3AtcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmJvdHRvbS1sZWZ0ID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5ib3R0b20tcmlnaHQgPiAuYXJyb3csW3VpYi1wb3BvdmVyLXRlbXBsYXRlLXBvcHVwXS5wb3BvdmVyLmxlZnQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5sZWZ0LWJvdHRvbSA+IC5hcnJvdyxbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXIucmlnaHQtdG9wID4gLmFycm93LFt1aWItcG9wb3Zlci10ZW1wbGF0ZS1wb3B1cF0ucG9wb3Zlci5yaWdodC1ib3R0b20gPiAuYXJyb3d7dG9wOmF1dG87Ym90dG9tOmF1dG87bGVmdDphdXRvO3JpZ2h0OmF1dG87bWFyZ2luOjA7fVt1aWItcG9wb3Zlci1wb3B1cF0ucG9wb3ZlcixbdWliLXBvcG92ZXItaHRtbC1wb3B1cF0ucG9wb3ZlcixbdWliLXBvcG92ZXItdGVtcGxhdGUtcG9wdXBdLnBvcG92ZXJ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVG9vbHRpcENzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50aW1lcGlja2VyJykucnVuKGZ1bmN0aW9uKCkgeyFhbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiAhYW5ndWxhci4kJHVpYlRpbWVwaWNrZXJDc3MgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItdGltZSBpbnB1dHt3aWR0aDo1MHB4O308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVGltZXBpY2tlckNzcyA9IHRydWU7IH0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnKS5ydW4oZnVuY3Rpb24oKSB7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmICFhbmd1bGFyLiQkdWliVHlwZWFoZWFkQ3NzICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5bdWliLXR5cGVhaGVhZC1wb3B1cF0uZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO308L3N0eWxlPicpOyBhbmd1bGFyLiQkdWliVHlwZWFoZWFkQ3NzID0gdHJ1ZTsgfSk7XG4vKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS42LjRcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhcikgeyd1c2Ugc3RyaWN0JztcblxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcblxudmFyIEFERF9DTEFTU19TVUZGSVggPSAnLWFkZCc7XG52YXIgUkVNT1ZFX0NMQVNTX1NVRkZJWCA9ICctcmVtb3ZlJztcbnZhciBFVkVOVF9DTEFTU19QUkVGSVggPSAnbmctJztcbnZhciBBQ1RJVkVfQ0xBU1NfU1VGRklYID0gJy1hY3RpdmUnO1xudmFyIFBSRVBBUkVfQ0xBU1NfU1VGRklYID0gJy1wcmVwYXJlJztcblxudmFyIE5HX0FOSU1BVEVfQ0xBU1NOQU1FID0gJ25nLWFuaW1hdGUnO1xudmFyIE5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSA9ICckJG5nQW5pbWF0ZUNoaWxkcmVuJztcblxuLy8gRGV0ZWN0IHByb3BlciB0cmFuc2l0aW9uZW5kL2FuaW1hdGlvbmVuZCBldmVudCBuYW1lcy5cbnZhciBDU1NfUFJFRklYID0gJycsIFRSQU5TSVRJT05fUFJPUCwgVFJBTlNJVElPTkVORF9FVkVOVCwgQU5JTUFUSU9OX1BST1AsIEFOSU1BVElPTkVORF9FVkVOVDtcblxuLy8gSWYgdW5wcmVmaXhlZCBldmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYnV0IHdlYmtpdC1wcmVmaXhlZCBhcmUsIHVzZSB0aGUgbGF0dGVyLlxuLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSBXM0MgbmFtZXMsIGJyb3dzZXJzIG5vdCBzdXBwb3J0aW5nIHRoZW0gYXQgYWxsIHdpbGwganVzdCBpZ25vcmUgdGhlbS5cbi8vIE5vdGU6IENocm9tZSBpbXBsZW1lbnRzIGB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmRgIGFuZCBkb2Vzbid0IGltcGxlbWVudCBgd2luZG93Lm9uYW5pbWF0aW9uZW5kYFxuLy8gYnV0IGF0IHRoZSBzYW1lIHRpbWUgZGlzcGF0Y2hlcyB0aGUgYGFuaW1hdGlvbmVuZGAgZXZlbnQgYW5kIG5vdCBgd2Via2l0QW5pbWF0aW9uRW5kYC5cbi8vIFJlZ2lzdGVyIGJvdGggZXZlbnRzIGluIGNhc2UgYHdpbmRvdy5vbmFuaW1hdGlvbmVuZGAgaXMgbm90IHN1cHBvcnRlZCBiZWNhdXNlIG9mIHRoYXQsXG4vLyBkbyB0aGUgc2FtZSBmb3IgYHRyYW5zaXRpb25lbmRgIGFzIFNhZmFyaSBpcyBsaWtlbHkgdG8gZXhoaWJpdCBzaW1pbGFyIGJlaGF2aW9yLlxuLy8gQWxzbywgdGhlIG9ubHkgbW9kZXJuIGJyb3dzZXIgdGhhdCB1c2VzIHZlbmRvciBwcmVmaXhlcyBmb3IgdHJhbnNpdGlvbnMva2V5ZnJhbWVzIGlzIHdlYmtpdFxuLy8gdGhlcmVmb3JlIHRoZXJlIGlzIG5vIHJlYXNvbiB0byB0ZXN0IGFueW1vcmUgZm9yIG90aGVyIHZlbmRvciBwcmVmaXhlczpcbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cbmlmICgod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkKSAmJiAod2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSkge1xuICBDU1NfUFJFRklYID0gJy13ZWJraXQtJztcbiAgVFJBTlNJVElPTl9QUk9QID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICBUUkFOU0lUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCc7XG59IGVsc2Uge1xuICBUUkFOU0lUSU9OX1BST1AgPSAndHJhbnNpdGlvbic7XG4gIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAndHJhbnNpdGlvbmVuZCc7XG59XG5cbmlmICgod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQpICYmICh3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkpIHtcbiAgQ1NTX1BSRUZJWCA9ICctd2Via2l0LSc7XG4gIEFOSU1BVElPTl9QUk9QID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gIEFOSU1BVElPTkVORF9FVkVOVCA9ICd3ZWJraXRBbmltYXRpb25FbmQgYW5pbWF0aW9uZW5kJztcbn0gZWxzZSB7XG4gIEFOSU1BVElPTl9QUk9QID0gJ2FuaW1hdGlvbic7XG4gIEFOSU1BVElPTkVORF9FVkVOVCA9ICdhbmltYXRpb25lbmQnO1xufVxuXG52YXIgRFVSQVRJT05fS0VZID0gJ0R1cmF0aW9uJztcbnZhciBQUk9QRVJUWV9LRVkgPSAnUHJvcGVydHknO1xudmFyIERFTEFZX0tFWSA9ICdEZWxheSc7XG52YXIgVElNSU5HX0tFWSA9ICdUaW1pbmdGdW5jdGlvbic7XG52YXIgQU5JTUFUSU9OX0lURVJBVElPTl9DT1VOVF9LRVkgPSAnSXRlcmF0aW9uQ291bnQnO1xudmFyIEFOSU1BVElPTl9QTEFZU1RBVEVfS0VZID0gJ1BsYXlTdGF0ZSc7XG52YXIgU0FGRV9GQVNUX0ZPUldBUkRfRFVSQVRJT05fVkFMVUUgPSA5OTk5O1xuXG52YXIgQU5JTUFUSU9OX0RFTEFZX1BST1AgPSBBTklNQVRJT05fUFJPUCArIERFTEFZX0tFWTtcbnZhciBBTklNQVRJT05fRFVSQVRJT05fUFJPUCA9IEFOSU1BVElPTl9QUk9QICsgRFVSQVRJT05fS0VZO1xudmFyIFRSQU5TSVRJT05fREVMQVlfUFJPUCA9IFRSQU5TSVRJT05fUFJPUCArIERFTEFZX0tFWTtcbnZhciBUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AgPSBUUkFOU0lUSU9OX1BST1AgKyBEVVJBVElPTl9LRVk7XG5cbnZhciBuZ01pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIoJ25nJyk7XG5mdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHtcbiAgaWYgKCFhcmcpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYXJlcScsICdBcmd1bWVudCBcXCd7MH1cXCcgaXMgezF9JywgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCAncmVxdWlyZWQnKSk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy50byB8fCBvcHRpb25zLmZyb20pKSB7XG4gICAgc3R5bGVzLnRvID0gb3B0aW9ucy50bztcbiAgICBzdHlsZXMuZnJvbSA9IG9wdGlvbnMuZnJvbTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBwZW5kQ2xhc3NlcyhjbGFzc2VzLCBmaXgsIGlzUHJlZml4KSB7XG4gIHZhciBjbGFzc05hbWUgPSAnJztcbiAgY2xhc3NlcyA9IGlzQXJyYXkoY2xhc3NlcylcbiAgICAgID8gY2xhc3Nlc1xuICAgICAgOiBjbGFzc2VzICYmIGlzU3RyaW5nKGNsYXNzZXMpICYmIGNsYXNzZXMubGVuZ3RoXG4gICAgICAgICAgPyBjbGFzc2VzLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICA6IFtdO1xuICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGtsYXNzLCBpKSB7XG4gICAgaWYgKGtsYXNzICYmIGtsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYXNzTmFtZSArPSAoaSA+IDApID8gJyAnIDogJyc7XG4gICAgICBjbGFzc05hbWUgKz0gaXNQcmVmaXggPyBmaXggKyBrbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoga2xhc3MgKyBmaXg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRnJvbUFycmF5KGFyciwgdmFsKSB7XG4gIHZhciBpbmRleCA9IGFyci5pbmRleE9mKHZhbCk7XG4gIGlmICh2YWwgPj0gMCkge1xuICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YganFMaXRlKSB7XG4gICAgc3dpdGNoIChlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZWxlbWVudDtcblxuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyB0aGVyZSBpcyBubyBwb2ludCBvZiBzdHJpcHBpbmcgYW55dGhpbmcgaWYgdGhlIGVsZW1lbnRcbiAgICAgICAgLy8gaXMgdGhlIG9ubHkgZWxlbWVudCB3aXRoaW4gdGhlIGpxTGl0ZSB3cmFwcGVyLlxuICAgICAgICAvLyAoaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSByZXRhaW4gdGhlIGVsZW1lbnQgaW5zdGFuY2UuKVxuICAgICAgICBpZiAoZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBqcUxpdGUoZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIGpxTGl0ZShlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnRbMF0pIHJldHVybiBlbGVtZW50O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBlbG07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uICQkYWRkQ2xhc3MoJCRqcUxpdGUsIGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsbSkge1xuICAgICQkanFMaXRlLmFkZENsYXNzKGVsbSwgY2xhc3NOYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uICQkcmVtb3ZlQ2xhc3MoJCRqcUxpdGUsIGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsbSkge1xuICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsbSwgY2xhc3NOYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgJCRhZGRDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcyk7XG4gICAgICBvcHRpb25zLmFkZENsYXNzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICQkcmVtb3ZlQ2xhc3MoJCRqcUxpdGUsIGVsZW1lbnQsIG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyhvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIW9wdGlvbnMuJCRwcmVwYXJlZCkge1xuICAgIHZhciBkb21PcGVyYXRpb24gPSBvcHRpb25zLmRvbU9wZXJhdGlvbiB8fCBub29wO1xuICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICBvcHRpb25zLiQkZG9tT3BlcmF0aW9uRmlyZWQgPSB0cnVlO1xuICAgICAgZG9tT3BlcmF0aW9uKCk7XG4gICAgICBkb21PcGVyYXRpb24gPSBub29wO1xuICAgIH07XG4gICAgb3B0aW9ucy4kJHByZXBhcmVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xuICBhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gIGFwcGx5QW5pbWF0aW9uVG9TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Ub1N0eWxlcyhlbGVtZW50LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnRvKSB7XG4gICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgb3B0aW9ucy50byA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIG9sZEFuaW1hdGlvbiwgbmV3QW5pbWF0aW9uKSB7XG4gIHZhciB0YXJnZXQgPSBvbGRBbmltYXRpb24ub3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5ld09wdGlvbnMgPSBuZXdBbmltYXRpb24ub3B0aW9ucyB8fCB7fTtcblxuICB2YXIgdG9BZGQgPSAodGFyZ2V0LmFkZENsYXNzIHx8ICcnKSArICcgJyArIChuZXdPcHRpb25zLmFkZENsYXNzIHx8ICcnKTtcbiAgdmFyIHRvUmVtb3ZlID0gKHRhcmdldC5yZW1vdmVDbGFzcyB8fCAnJykgKyAnICcgKyAobmV3T3B0aW9ucy5yZW1vdmVDbGFzcyB8fCAnJyk7XG4gIHZhciBjbGFzc2VzID0gcmVzb2x2ZUVsZW1lbnRDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSwgdG9BZGQsIHRvUmVtb3ZlKTtcblxuICBpZiAobmV3T3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpIHtcbiAgICB0YXJnZXQucHJlcGFyYXRpb25DbGFzc2VzID0gY29uY2F0V2l0aFNwYWNlKG5ld09wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzLCB0YXJnZXQucHJlcGFyYXRpb25DbGFzc2VzKTtcbiAgICBkZWxldGUgbmV3T3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXM7XG4gIH1cblxuICAvLyBub29wIGlzIGJhc2ljYWxseSB3aGVuIHRoZXJlIGlzIG5vIGNhbGxiYWNrOyBvdGhlcndpc2Ugc29tZXRoaW5nIGhhcyBiZWVuIHNldFxuICB2YXIgcmVhbERvbU9wZXJhdGlvbiA9IHRhcmdldC5kb21PcGVyYXRpb24gIT09IG5vb3AgPyB0YXJnZXQuZG9tT3BlcmF0aW9uIDogbnVsbDtcblxuICBleHRlbmQodGFyZ2V0LCBuZXdPcHRpb25zKTtcblxuICAvLyBUT0RPKG1hdHNrbyBvciBzcmVlcmFtdSk6IHByb3BlciBmaXggaXMgdG8gbWFpbnRhaW4gYWxsIGFuaW1hdGlvbiBjYWxsYmFjayBpbiBhcnJheSBhbmQgY2FsbCBhdCBsYXN0LGJ1dCBub3cgb25seSBsZWF2ZSBoYXMgdGhlIGNhbGxiYWNrIHNvIG5vIGlzc3VlIHdpdGggdGhpcy5cbiAgaWYgKHJlYWxEb21PcGVyYXRpb24pIHtcbiAgICB0YXJnZXQuZG9tT3BlcmF0aW9uID0gcmVhbERvbU9wZXJhdGlvbjtcbiAgfVxuXG4gIGlmIChjbGFzc2VzLmFkZENsYXNzKSB7XG4gICAgdGFyZ2V0LmFkZENsYXNzID0gY2xhc3Nlcy5hZGRDbGFzcztcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuYWRkQ2xhc3MgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNsYXNzZXMucmVtb3ZlQ2xhc3MpIHtcbiAgICB0YXJnZXQucmVtb3ZlQ2xhc3MgPSBjbGFzc2VzLnJlbW92ZUNsYXNzO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5yZW1vdmVDbGFzcyA9IG51bGw7XG4gIH1cblxuICBvbGRBbmltYXRpb24uYWRkQ2xhc3MgPSB0YXJnZXQuYWRkQ2xhc3M7XG4gIG9sZEFuaW1hdGlvbi5yZW1vdmVDbGFzcyA9IHRhcmdldC5yZW1vdmVDbGFzcztcblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRWxlbWVudENsYXNzZXMoZXhpc3RpbmcsIHRvQWRkLCB0b1JlbW92ZSkge1xuICB2YXIgQUREX0NMQVNTID0gMTtcbiAgdmFyIFJFTU9WRV9DTEFTUyA9IC0xO1xuXG4gIHZhciBmbGFncyA9IHt9O1xuICBleGlzdGluZyA9IHNwbGl0Q2xhc3Nlc1RvTG9va3VwKGV4aXN0aW5nKTtcblxuICB0b0FkZCA9IHNwbGl0Q2xhc3Nlc1RvTG9va3VwKHRvQWRkKTtcbiAgZm9yRWFjaCh0b0FkZCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGZsYWdzW2tleV0gPSBBRERfQ0xBU1M7XG4gIH0pO1xuXG4gIHRvUmVtb3ZlID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAodG9SZW1vdmUpO1xuICBmb3JFYWNoKHRvUmVtb3ZlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgZmxhZ3Nba2V5XSA9IGZsYWdzW2tleV0gPT09IEFERF9DTEFTUyA/IG51bGwgOiBSRU1PVkVfQ0xBU1M7XG4gIH0pO1xuXG4gIHZhciBjbGFzc2VzID0ge1xuICAgIGFkZENsYXNzOiAnJyxcbiAgICByZW1vdmVDbGFzczogJydcbiAgfTtcblxuICBmb3JFYWNoKGZsYWdzLCBmdW5jdGlvbih2YWwsIGtsYXNzKSB7XG4gICAgdmFyIHByb3AsIGFsbG93O1xuICAgIGlmICh2YWwgPT09IEFERF9DTEFTUykge1xuICAgICAgcHJvcCA9ICdhZGRDbGFzcyc7XG4gICAgICBhbGxvdyA9ICFleGlzdGluZ1trbGFzc10gfHwgZXhpc3Rpbmdba2xhc3MgKyBSRU1PVkVfQ0xBU1NfU1VGRklYXTtcbiAgICB9IGVsc2UgaWYgKHZhbCA9PT0gUkVNT1ZFX0NMQVNTKSB7XG4gICAgICBwcm9wID0gJ3JlbW92ZUNsYXNzJztcbiAgICAgIGFsbG93ID0gZXhpc3Rpbmdba2xhc3NdIHx8IGV4aXN0aW5nW2tsYXNzICsgQUREX0NMQVNTX1NVRkZJWF07XG4gICAgfVxuICAgIGlmIChhbGxvdykge1xuICAgICAgaWYgKGNsYXNzZXNbcHJvcF0ubGVuZ3RoKSB7XG4gICAgICAgIGNsYXNzZXNbcHJvcF0gKz0gJyAnO1xuICAgICAgfVxuICAgICAgY2xhc3Nlc1twcm9wXSArPSBrbGFzcztcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNwbGl0Q2xhc3Nlc1RvTG9va3VwKGNsYXNzZXMpIHtcbiAgICBpZiAoaXNTdHJpbmcoY2xhc3NlcykpIHtcbiAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgfVxuXG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAgIC8vIHNvbWV0aW1lcyB0aGUgc3BsaXQgbGVhdmVzIGVtcHR5IHN0cmluZyB2YWx1ZXNcbiAgICAgIC8vIGluY2FzZSBleHRyYSBzcGFjZXMgd2VyZSBhcHBsaWVkIHRvIHRoZSBvcHRpb25zXG4gICAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICAgIG9ialtrbGFzc10gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuZnVuY3Rpb24gZ2V0RG9tTm9kZShlbGVtZW50KSB7XG4gIHJldHVybiAoZWxlbWVudCBpbnN0YW5jZW9mIGpxTGl0ZSkgPyBlbGVtZW50WzBdIDogZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gYXBwbHlHZW5lcmF0ZWRQcmVwYXJhdGlvbkNsYXNzZXMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMpIHtcbiAgdmFyIGNsYXNzZXMgPSAnJztcbiAgaWYgKGV2ZW50KSB7XG4gICAgY2xhc3NlcyA9IHBlbmRDbGFzc2VzKGV2ZW50LCBFVkVOVF9DTEFTU19QUkVGSVgsIHRydWUpO1xuICB9XG4gIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgY2xhc3NlcyA9IGNvbmNhdFdpdGhTcGFjZShjbGFzc2VzLCBwZW5kQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBBRERfQ0xBU1NfU1VGRklYKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICBjbGFzc2VzID0gY29uY2F0V2l0aFNwYWNlKGNsYXNzZXMsIHBlbmRDbGFzc2VzKG9wdGlvbnMucmVtb3ZlQ2xhc3MsIFJFTU9WRV9DTEFTU19TVUZGSVgpKTtcbiAgfVxuICBpZiAoY2xhc3Nlcy5sZW5ndGgpIHtcbiAgICBvcHRpb25zLnByZXBhcmF0aW9uQ2xhc3NlcyA9IGNsYXNzZXM7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc2VzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhckdlbmVyYXRlZENsYXNzZXMoZWxlbWVudCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpIHtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzKTtcbiAgICBvcHRpb25zLnByZXBhcmF0aW9uQ2xhc3NlcyA9IG51bGw7XG4gIH1cbiAgaWYgKG9wdGlvbnMuYWN0aXZlQ2xhc3Nlcykge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3Mob3B0aW9ucy5hY3RpdmVDbGFzc2VzKTtcbiAgICBvcHRpb25zLmFjdGl2ZUNsYXNzZXMgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZHVyYXRpb24pIHtcbiAgLy8gd2UgdXNlIGEgbmVnYXRpdmUgZGVsYXkgdmFsdWUgc2luY2UgaXQgcGVyZm9ybXMgYmxvY2tpbmdcbiAgLy8geWV0IGl0IGRvZXNuJ3Qga2lsbCBhbnkgZXhpc3RpbmcgdHJhbnNpdGlvbnMgcnVubmluZyBvbiB0aGVcbiAgLy8gc2FtZSBlbGVtZW50IHdoaWNoIG1ha2VzIHRoaXMgc2FmZSBmb3IgY2xhc3MtYmFzZWQgYW5pbWF0aW9uc1xuICB2YXIgdmFsdWUgPSBkdXJhdGlvbiA/ICctJyArIGR1cmF0aW9uICsgJ3MnIDogJyc7XG4gIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgW1RSQU5TSVRJT05fREVMQVlfUFJPUCwgdmFsdWVdKTtcbiAgcmV0dXJuIFtUUkFOU0lUSU9OX0RFTEFZX1BST1AsIHZhbHVlXTtcbn1cblxuZnVuY3Rpb24gYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMobm9kZSwgYXBwbHlCbG9jaykge1xuICB2YXIgdmFsdWUgPSBhcHBseUJsb2NrID8gJ3BhdXNlZCcgOiAnJztcbiAgdmFyIGtleSA9IEFOSU1BVElPTl9QUk9QICsgQU5JTUFUSU9OX1BMQVlTVEFURV9LRVk7XG4gIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgW2tleSwgdmFsdWVdKTtcbiAgcmV0dXJuIFtrZXksIHZhbHVlXTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbmxpbmVTdHlsZShub2RlLCBzdHlsZVR1cGxlKSB7XG4gIHZhciBwcm9wID0gc3R5bGVUdXBsZVswXTtcbiAgdmFyIHZhbHVlID0gc3R5bGVUdXBsZVsxXTtcbiAgbm9kZS5zdHlsZVtwcm9wXSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjb25jYXRXaXRoU3BhY2UoYSxiKSB7XG4gIGlmICghYSkgcmV0dXJuIGI7XG4gIGlmICghYikgcmV0dXJuIGE7XG4gIHJldHVybiBhICsgJyAnICsgYjtcbn1cblxudmFyICQkckFGU2NoZWR1bGVyRmFjdG9yeSA9IFsnJCRyQUYnLCBmdW5jdGlvbigkJHJBRikge1xuICB2YXIgcXVldWUsIGNhbmNlbEZuO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlcih0YXNrcykge1xuICAgIC8vIHdlIG1ha2UgYSBjb3B5IHNpbmNlIFJBRlNjaGVkdWxlciBtdXRhdGVzIHRoZSBzdGF0ZVxuICAgIC8vIG9mIHRoZSBwYXNzZWQgaW4gYXJyYXkgdmFyaWFibGUgYW5kIHRoaXMgd291bGQgYmUgZGlmZmljdWx0XG4gICAgLy8gdG8gdHJhY2sgZG93biBvbiB0aGUgb3V0c2lkZSBjb2RlXG4gICAgcXVldWUgPSBxdWV1ZS5jb25jYXQodGFza3MpO1xuICAgIG5leHRUaWNrKCk7XG4gIH1cblxuICBxdWV1ZSA9IHNjaGVkdWxlci5xdWV1ZSA9IFtdO1xuXG4gIC8qIHdhaXRVbnRpbFF1aWV0IGRvZXMgdHdvIHRoaW5nczpcbiAgICogMS4gSXQgd2lsbCBydW4gdGhlIEZJTkFMIGBmbmAgdmFsdWUgb25seSB3aGVuIGFuIHVuY2FuY2VsZWQgUkFGIGhhcyBwYXNzZWQgdGhyb3VnaFxuICAgKiAyLiBJdCB3aWxsIGRlbGF5IHRoZSBuZXh0IHdhdmUgb2YgdGFza3MgZnJvbSBydW5uaW5nIHVudGlsIHRoZSBxdWlldCBgZm5gIGhhcyBydW4uXG4gICAqXG4gICAqIFRoZSBtb3RpdmF0aW9uIGhlcmUgaXMgdGhhdCBhbmltYXRpb24gY29kZSBjYW4gcmVxdWVzdCBtb3JlIHRpbWUgZnJvbSB0aGUgc2NoZWR1bGVyXG4gICAqIGJlZm9yZSB0aGUgbmV4dCB3YXZlIHJ1bnMuIFRoaXMgYWxsb3dzIGZvciBjZXJ0YWluIERPTSBwcm9wZXJ0aWVzIHN1Y2ggYXMgY2xhc3NlcyB0b1xuICAgKiBiZSByZXNvbHZlZCBpbiB0aW1lIGZvciB0aGUgbmV4dCBhbmltYXRpb24gdG8gcnVuLlxuICAgKi9cbiAgc2NoZWR1bGVyLndhaXRVbnRpbFF1aWV0ID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAoY2FuY2VsRm4pIGNhbmNlbEZuKCk7XG5cbiAgICBjYW5jZWxGbiA9ICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgY2FuY2VsRm4gPSBudWxsO1xuICAgICAgZm4oKTtcbiAgICAgIG5leHRUaWNrKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjaGVkdWxlcjtcblxuICBmdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgICBpZiAoIXF1ZXVlLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgdmFyIGl0ZW1zID0gcXVldWUuc2hpZnQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVtc1tpXSgpO1xuICAgIH1cblxuICAgIGlmICghY2FuY2VsRm4pIHtcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIWNhbmNlbEZuKSBuZXh0VGljaygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FuaW1hdGVDaGlsZHJlblxuICogQHJlc3RyaWN0IEFFXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ0FuaW1hdGVDaGlsZHJlbiBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhhdCBjaGlsZHJlbiBvZiB0aGlzIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGUgZXZlbiBpZiBhbnlcbiAqIG9mIHRoZSBjaGlsZHJlbidzIHBhcmVudHMgYXJlIGN1cnJlbnRseSBhbmltYXRpbmcuIEJ5IGRlZmF1bHQsIHdoZW4gYW4gZWxlbWVudCBoYXMgYW4gYWN0aXZlIGBlbnRlcmAsIGBsZWF2ZWAsIG9yIGBtb3ZlYFxuICogKHN0cnVjdHVyYWwpIGFuaW1hdGlvbiwgY2hpbGQgZWxlbWVudHMgdGhhdCBhbHNvIGhhdmUgYW4gYWN0aXZlIHN0cnVjdHVyYWwgYW5pbWF0aW9uIGFyZSBub3QgYW5pbWF0ZWQuXG4gKlxuICogTm90ZSB0aGF0IGV2ZW4gaWYgYG5nQW5pbWF0ZUNoaWxkcmVuYCBpcyBzZXQsIG5vIGNoaWxkIGFuaW1hdGlvbnMgd2lsbCBydW4gd2hlbiB0aGUgcGFyZW50IGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gKGBsZWF2ZWAgYW5pbWF0aW9uKS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nQW5pbWF0ZUNoaWxkcmVuIElmIHRoZSB2YWx1ZSBpcyBlbXB0eSwgYHRydWVgIG9yIGBvbmAsXG4gKiAgICAgdGhlbiBjaGlsZCBhbmltYXRpb25zIGFyZSBhbGxvd2VkLiBJZiB0aGUgdmFsdWUgaXMgYGZhbHNlYCwgY2hpbGQgYW5pbWF0aW9ucyBhcmUgbm90IGFsbG93ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZUNoaWxkcmVuXCIgbmFtZT1cIm5nQW5pbWF0ZUNoaWxkcmVuXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgbWFpblwiPlxuICAgICAgICAgPGxhYmVsPlNob3cgY29udGFpbmVyPyA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYWluLmVudGVyRWxlbWVudFwiIC8+PC9sYWJlbD5cbiAgICAgICAgIDxsYWJlbD5BbmltYXRlIGNoaWxkcmVuPyA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYWluLmFuaW1hdGVDaGlsZHJlblwiIC8+PC9sYWJlbD5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDxkaXYgbmctYW5pbWF0ZS1jaGlsZHJlbj1cInt7bWFpbi5hbmltYXRlQ2hpbGRyZW59fVwiPlxuICAgICAgICAgICA8ZGl2IG5nLWlmPVwibWFpbi5lbnRlckVsZW1lbnRcIiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgIExpc3Qgb2YgaXRlbXM6XG4gICAgICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJpdGVtIGluIFswLCAxLCAyLCAzXVwiIGNsYXNzPVwiaXRlbVwiPkl0ZW0ge3tpdGVtfX08L2Rpdj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cblxuICAgICAgLmNvbnRhaW5lci5uZy1lbnRlcixcbiAgICAgIC5jb250YWluZXIubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgZWFzZSAxLjVzO1xuICAgICAgfVxuXG4gICAgICAuY29udGFpbmVyLm5nLWVudGVyLFxuICAgICAgLmNvbnRhaW5lci5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAuY29udGFpbmVyLm5nLWxlYXZlLFxuICAgICAgLmNvbnRhaW5lci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgfVxuXG4gICAgICAuaXRlbSB7XG4gICAgICAgIGJhY2tncm91bmQ6IGZpcmVicmljaztcbiAgICAgICAgY29sb3I6ICNGRkY7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5pdGVtLm5nLWVudGVyLFxuICAgICAgLml0ZW0ubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMS41cyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuaXRlbS5uZy1lbnRlciB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg1MHB4KTtcbiAgICAgIH1cblxuICAgICAgLml0ZW0ubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbmdBbmltYXRlQ2hpbGRyZW4nLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVDaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZW50ZXJFbGVtZW50ID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIHZhbCA9IGF0dHJzLm5nQW5pbWF0ZUNoaWxkcmVuO1xuICAgICAgaWYgKGlzU3RyaW5nKHZhbCkgJiYgdmFsLmxlbmd0aCA9PT0gMCkgeyAvL2VtcHR5IGF0dHJpYnV0ZVxuICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEludGVycG9sYXRlIGFuZCBzZXQgdGhlIHZhbHVlLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSB0b1xuICAgICAgICAvLyBhbmltYXRpb25zIHRoYXQgcnVuIHJpZ2h0IGFmdGVyIGNvbXBpbGF0aW9uXG4gICAgICAgIHNldERhdGEoJGludGVycG9sYXRlKHZhbCkoc2NvcGUpKTtcbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ25nQW5pbWF0ZUNoaWxkcmVuJywgc2V0RGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldERhdGEodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gJ29uJyB8fCB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbi8qIGV4cG9ydGVkICRBbmltYXRlQ3NzUHJvdmlkZXIgKi9cblxudmFyIEFOSU1BVEVfVElNRVJfS0VZID0gJyQkYW5pbWF0ZUNzcyc7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlQ3NzXG4gKiBAa2luZCBvYmplY3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2UgaXMgYSB1c2VmdWwgdXRpbGl0eSB0byB0cmlnZ2VyIGN1c3RvbWl6ZWQgQ1NTLWJhc2VkIHRyYW5zaXRpb25zL2tleWZyYW1lc1xuICogZnJvbSBhIEphdmFTY3JpcHQtYmFzZWQgYW5pbWF0aW9uIG9yIGRpcmVjdGx5IGZyb20gYSBkaXJlY3RpdmUuIFRoZSBwdXJwb3NlIG9mIGAkYW5pbWF0ZUNzc2AgaXMgTk9UXG4gKiB0byBzaWRlLXN0ZXAgaG93IGAkYW5pbWF0ZWAgYW5kIG5nQW5pbWF0ZSB3b3JrLCBidXQgdGhlIGdvYWwgaXMgdG8gYWxsb3cgcHJlLWV4aXN0aW5nIGFuaW1hdGlvbnMgb3JcbiAqIGRpcmVjdGl2ZXMgdG8gY3JlYXRlIG1vcmUgY29tcGxleCBhbmltYXRpb25zIHRoYXQgY2FuIGJlIHB1cmVseSBkcml2ZW4gdXNpbmcgQ1NTIGNvZGUuXG4gKlxuICogTm90ZSB0aGF0IG9ubHkgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucyBhbmQvb3Iga2V5ZnJhbWUgYW5pbWF0aW9ucyBhcmUgY2FwYWJsZSBvZlxuICogcmVuZGVyaW5nIGFuaW1hdGlvbnMgdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVDc3NgIChiYWQgbmV3cyBmb3IgSUU5IGFuZCBsb3dlcikuXG4gKlxuICogIyMgVXNhZ2VcbiAqIE9uY2UgYWdhaW4sIGAkYW5pbWF0ZUNzc2AgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBpbnNpZGUgb2YgYSByZWdpc3RlcmVkIEphdmFTY3JpcHQgYW5pbWF0aW9uIHRoYXRcbiAqIGlzIHBvd2VyZWQgYnkgbmdBbmltYXRlLiBJdCBpcyBwb3NzaWJsZSB0byB1c2UgYCRhbmltYXRlQ3NzYCBkaXJlY3RseSBpbnNpZGUgb2YgYSBkaXJlY3RpdmUsIGhvd2V2ZXIsXG4gKiBhbnkgYXV0b21hdGljIGNvbnRyb2wgb3ZlciBjYW5jZWxsaW5nIGFuaW1hdGlvbnMgYW5kL29yIHByZXZlbnRpbmcgYW5pbWF0aW9ucyBmcm9tIGJlaW5nIHJ1biBvblxuICogY2hpbGQgZWxlbWVudHMgd2lsbCBub3QgYmUgaGFuZGxlZCBieSBBbmd1bGFyLiBGb3IgdGhpcyB0byB3b3JrIGFzIGV4cGVjdGVkLCBwbGVhc2UgdXNlIGAkYW5pbWF0ZWAgdG9cbiAqIHRyaWdnZXIgdGhlIGFuaW1hdGlvbiBhbmQgdGhlbiBzZXR1cCBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIHRoYXQgaW5qZWN0cyBgJGFuaW1hdGVDc3NgIHRvIHRyaWdnZXJcbiAqIHRoZSBDU1MgYW5pbWF0aW9uLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHNob3dzIGhvdyB3ZSBjYW4gY3JlYXRlIGEgZm9sZGluZyBhbmltYXRpb24gb24gYW4gZWxlbWVudCB1c2luZyBgbmctaWZgOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gbm90aWNlIHRoZSBgZm9sZC1hbmltYXRpb25gIENTUyBjbGFzcyAtLT5cbiAqIDxkaXYgbmctaWY9XCJvbk9mZlwiIGNsYXNzPVwiZm9sZC1hbmltYXRpb25cIj5cbiAqICAgVGhpcyBlbGVtZW50IHdpbGwgZ28gQk9PTVxuICogPC9kaXY+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwib25PZmY9dHJ1ZVwiPkZvbGQgSW48L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIE5vdyB3ZSBjcmVhdGUgdGhlICoqSmF2YVNjcmlwdCBhbmltYXRpb24qKiB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgQ1NTIHRyYW5zaXRpb246XG4gKlxuICogYGBganNcbiAqIG5nTW9kdWxlLmFuaW1hdGlvbignLmZvbGQtYW5pbWF0aW9uJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0O1xuICogICAgICAgcmV0dXJuICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAqICAgICAgICAgZnJvbTogeyBoZWlnaHQ6JzBweCcgfSxcbiAqICAgICAgICAgdG86IHsgaGVpZ2h0OmhlaWdodCArICdweCcgfSxcbiAqICAgICAgICAgZHVyYXRpb246IDEgLy8gb25lIHNlY29uZFxuICogICAgICAgfSk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBNb3JlIEFkdmFuY2VkIFVzZXNcbiAqXG4gKiBgJGFuaW1hdGVDc3NgIGlzIHRoZSB1bmRlcmx5aW5nIGNvZGUgdGhhdCBuZ0FuaW1hdGUgdXNlcyB0byBwb3dlciAqKkNTUy1iYXNlZCBhbmltYXRpb25zKiogYmVoaW5kIHRoZSBzY2VuZXMuIFRoZXJlZm9yZSBDU1MgaG9va3NcbiAqIGxpa2UgYC5uZy1FVkVOVGAsIGAubmctRVZFTlQtYWN0aXZlYCwgYC5uZy1FVkVOVC1zdGFnZ2VyYCBhcmUgYWxsIGZlYXR1cmVzIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCB1c2luZyBgJGFuaW1hdGVDc3NgIHZpYSBKYXZhU2NyaXB0IGNvZGUuXG4gKlxuICogVGhpcyBhbHNvIG1lYW5zIHRoYXQganVzdCBhYm91dCBhbnkgY29tYmluYXRpb24gb2YgYWRkaW5nIGNsYXNzZXMsIHJlbW92aW5nIGNsYXNzZXMsIHNldHRpbmcgc3R5bGVzLCBkeW5hbWljYWxseSBzZXR0aW5nIGEga2V5ZnJhbWUgYW5pbWF0aW9uLFxuICogYXBwbHlpbmcgYSBoYXJkY29kZWQgZHVyYXRpb24gb3IgZGVsYXkgdmFsdWUsIGNoYW5naW5nIHRoZSBhbmltYXRpb24gZWFzaW5nIG9yIGFwcGx5aW5nIGEgc3RhZ2dlciBhbmltYXRpb24gYXJlIGFsbCBvcHRpb25zIHRoYXQgd29yayB3aXRoXG4gKiBgJGFuaW1hdGVDc3NgLiBUaGUgc2VydmljZSBpdHNlbGYgaXMgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgdGhlIGNvbWJpbmF0aW9uIG9mIG9wdGlvbnMgYW5kIGV4YW1pbmUgdGhlIGVsZW1lbnQgc3R5bGluZyBwcm9wZXJ0aWVzIGluIG9yZGVyXG4gKiB0byBwcm92aWRlIGEgd29ya2luZyBhbmltYXRpb24gdGhhdCB3aWxsIHJ1biBpbiBDU1MuXG4gKlxuICogVGhlIGV4YW1wbGUgYmVsb3cgc2hvd2Nhc2VzIGEgbW9yZSBhZHZhbmNlZCB2ZXJzaW9uIG9mIHRoZSBgLmZvbGQtYW5pbWF0aW9uYCBmcm9tIHRoZSBleGFtcGxlIGFib3ZlOlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5hbmltYXRpb24oJy5mb2xkLWFuaW1hdGlvbicsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xuICogICByZXR1cm4ge1xuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50WzBdLm9mZnNldEhlaWdodDtcbiAqICAgICAgIHJldHVybiAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGFkZENsYXNzOiAncmVkIGxhcmdlLXRleHQgcHVsc2UtdHdpY2UnLFxuICogICAgICAgICBlYXNpbmc6ICdlYXNlLW91dCcsXG4gKiAgICAgICAgIGZyb206IHsgaGVpZ2h0OicwcHgnIH0sXG4gKiAgICAgICAgIHRvOiB7IGhlaWdodDpoZWlnaHQgKyAncHgnIH0sXG4gKiAgICAgICAgIGR1cmF0aW9uOiAxIC8vIG9uZSBzZWNvbmRcbiAqICAgICAgIH0pO1xuICogICAgIH1cbiAqICAgfVxuICogfV0pO1xuICogYGBgXG4gKlxuICogU2luY2Ugd2UncmUgYWRkaW5nL3JlbW92aW5nIENTUyBjbGFzc2VzIHRoZW4gdGhlIENTUyB0cmFuc2l0aW9uIHdpbGwgYWxzbyBwaWNrIHRob3NlIHVwOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IHNpbmNlIGEgaGFyZGNvZGVkIGR1cmF0aW9uIHZhbHVlIG9mIDEgd2FzIHByb3ZpZGVkIGluIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbiBjb2RlLFxuICogdGhlIENTUyBjbGFzc2VzIGJlbG93IHdpbGwgYmUgdHJhbnNpdGlvbmVkIGRlc3BpdGUgdGhlbSBiZWluZyBkZWZpbmVkIGFzIHJlZ3VsYXIgQ1NTIGNsYXNzZXMgJiM0MjsvXG4gKiAucmVkIHsgYmFja2dyb3VuZDpyZWQ7IH1cbiAqIC5sYXJnZS10ZXh0IHsgZm9udC1zaXplOjIwcHg7IH1cbiAqXG4gKiAvJiM0Mjsgd2UgY2FuIGFsc28gdXNlIGEga2V5ZnJhbWUgYW5pbWF0aW9uIGFuZCAkYW5pbWF0ZUNzcyB3aWxsIG1ha2UgaXQgd29yayBhbG9uZ3NpZGUgdGhlIHRyYW5zaXRpb24gJiM0MjsvXG4gKiAucHVsc2UtdHdpY2Uge1xuICogICBhbmltYXRpb246IDAuNXMgcHVsc2UgbGluZWFyIDI7XG4gKiAgIC13ZWJraXQtYW5pbWF0aW9uOiAwLjVzIHB1bHNlIGxpbmVhciAyO1xuICogfVxuICpcbiAqIEBrZXlmcmFtZXMgcHVsc2Uge1xuICogICBmcm9tIHsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB9XG4gKiAgIHRvIHsgdHJhbnNmb3JtOiBzY2FsZSgxLjUpOyB9XG4gKiB9XG4gKlxuICogQC13ZWJraXQta2V5ZnJhbWVzIHB1bHNlIHtcbiAqICAgZnJvbSB7IC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB9XG4gKiAgIHRvIHsgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuNSk7IH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEdpdmVuIHRoaXMgY29tcGxleCBjb21iaW5hdGlvbiBvZiBDU1MgY2xhc3Nlcywgc3R5bGVzIGFuZCBvcHRpb25zLCBgJGFuaW1hdGVDc3NgIHdpbGwgZmlndXJlIGV2ZXJ5dGhpbmcgb3V0IGFuZCBtYWtlIHRoZSBhbmltYXRpb24gaGFwcGVuLlxuICpcbiAqICMjIEhvdyB0aGUgT3B0aW9ucyBhcmUgaGFuZGxlZFxuICpcbiAqIGAkYW5pbWF0ZUNzc2AgaXMgdmVyeSB2ZXJzYXRpbGUgYW5kIGludGVsbGlnZW50IHdoZW4gaXQgY29tZXMgdG8gZmlndXJpbmcgb3V0IHdoYXQgY29uZmlndXJhdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQgdG8gZW5zdXJlIHRoZSBhbmltYXRpb25cbiAqIHdvcmtzIHdpdGggdGhlIG9wdGlvbnMgcHJvdmlkZWQuIFNheSBmb3IgZXhhbXBsZSB3ZSB3ZXJlIGFkZGluZyBhIGNsYXNzIHRoYXQgY29udGFpbmVkIGEga2V5ZnJhbWUgdmFsdWUgYW5kIHdlIHdhbnRlZCB0byBhbHNvIGFuaW1hdGUgc29tZSBpbmxpbmVcbiAqIHN0eWxlcyB1c2luZyB0aGUgYGZyb21gIGFuZCBgdG9gIHByb3BlcnRpZXMuXG4gKlxuICogYGBganNcbiAqIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAqICAgZnJvbTogeyBiYWNrZ3JvdW5kOidyZWQnIH0sXG4gKiAgIHRvOiB7IGJhY2tncm91bmQ6J2JsdWUnIH1cbiAqIH0pO1xuICogYW5pbWF0b3Iuc3RhcnQoKTtcbiAqIGBgYFxuICpcbiAqIGBgYGNzc1xuICogLnJvdGF0aW5nLWFuaW1hdGlvbiB7XG4gKiAgIGFuaW1hdGlvbjowLjVzIHJvdGF0ZSBsaW5lYXI7XG4gKiAgIC13ZWJraXQtYW5pbWF0aW9uOjAuNXMgcm90YXRlIGxpbmVhcjtcbiAqIH1cbiAqXG4gKiBAa2V5ZnJhbWVzIHJvdGF0ZSB7XG4gKiAgIGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxuICogICB0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cbiAqIH1cbiAqXG4gKiBALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlIHtcbiAqICAgZnJvbSB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAqICAgdG8geyAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBtaXNzaW5nIHBpZWNlcyBoZXJlIGFyZSB0aGF0IHdlIGRvIG5vdCBoYXZlIGEgdHJhbnNpdGlvbiBzZXQgKHdpdGhpbiB0aGUgQ1NTIGNvZGUgbm9yIHdpdGhpbiB0aGUgYCRhbmltYXRlQ3NzYCBvcHRpb25zKSBhbmQgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24gaXNcbiAqIGdvaW5nIHRvIGJlIGRldGVjdGVkIGZyb20gd2hhdCB0aGUga2V5ZnJhbWUgc3R5bGVzIG9uIHRoZSBDU1MgY2xhc3MgYXJlLiBJbiB0aGlzIGV2ZW50LCBgJGFuaW1hdGVDc3NgIHdpbGwgYXV0b21hdGljYWxseSBjcmVhdGUgYW4gaW5saW5lIHRyYW5zaXRpb25cbiAqIHN0eWxlIG1hdGNoaW5nIHRoZSBkdXJhdGlvbiBkZXRlY3RlZCBmcm9tIHRoZSBrZXlmcmFtZSBzdHlsZSAod2hpY2ggaXMgcHJlc2VudCBpbiB0aGUgQ1NTIGNsYXNzIHRoYXQgaXMgYmVpbmcgYWRkZWQpIGFuZCB0aGVuIHByZXBhcmUgYm90aCB0aGUgdHJhbnNpdGlvblxuICogYW5kIGtleWZyYW1lIGFuaW1hdGlvbnMgdG8gcnVuIGluIHBhcmFsbGVsIG9uIHRoZSBlbGVtZW50LiBUaGVuIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyB1bmRlcndheSB0aGUgcHJvdmlkZWQgYGZyb21gIGFuZCBgdG9gIENTUyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkXG4gKiBhbmQgc3ByZWFkIGFjcm9zcyB0aGUgdHJhbnNpdGlvbiBhbmQga2V5ZnJhbWUgYW5pbWF0aW9uLlxuICpcbiAqICMjIFdoYXQgaXMgcmV0dXJuZWRcbiAqXG4gKiBgJGFuaW1hdGVDc3NgIHdvcmtzIGluIHR3byBzdGFnZXM6IGEgcHJlcGFyYXRpb24gcGhhc2UgYW5kIGFuIGFuaW1hdGlvbiBwaGFzZS4gVGhlcmVmb3JlIHdoZW4gYCRhbmltYXRlQ3NzYCBpcyBmaXJzdCBjYWxsZWQgaXQgd2lsbCBOT1QgYWN0dWFsbHlcbiAqIHN0YXJ0IHRoZSBhbmltYXRpb24uIEFsbCB0aGF0IGlzIGdvaW5nIG9uIGhlcmUgaXMgdGhhdCB0aGUgZWxlbWVudCBpcyBiZWluZyBwcmVwYXJlZCBmb3IgdGhlIGFuaW1hdGlvbiAod2hpY2ggbWVhbnMgdGhhdCB0aGUgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZVxuICogYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGVsZW1lbnQpLiBPbmNlIGAkYW5pbWF0ZUNzc2AgaXMgY2FsbGVkIGl0IHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiBgYGBqc1xuICogdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoZWxlbWVudCwgeyAuLi4gfSk7XG4gKiBgYGBcbiAqXG4gKiBOb3cgd2hhdCBkbyB0aGUgY29udGVudHMgb2Ygb3VyIGBhbmltYXRvcmAgdmFyaWFibGUgbG9vayBsaWtlOlxuICpcbiAqIGBgYGpzXG4gKiB7XG4gKiAgIC8vIHN0YXJ0cyB0aGUgYW5pbWF0aW9uXG4gKiAgIHN0YXJ0OiBGdW5jdGlvbixcbiAqXG4gKiAgIC8vIGVuZHMgKGFib3J0cykgdGhlIGFuaW1hdGlvblxuICogICBlbmQ6IEZ1bmN0aW9uXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUbyBhY3R1YWxseSBzdGFydCB0aGUgYW5pbWF0aW9uIHdlIG5lZWQgdG8gcnVuIGBhbmltYXRpb24uc3RhcnQoKWAgd2hpY2ggd2lsbCB0aGVuIHJldHVybiBhIHByb21pc2UgdGhhdCB3ZSBjYW4gaG9vayBpbnRvIHRvIGRldGVjdCB3aGVuIHRoZSBhbmltYXRpb24gZW5kcy5cbiAqIElmIHdlIGNob29zZSBub3QgdG8gcnVuIHRoZSBhbmltYXRpb24gdGhlbiB3ZSBNVVNUIHJ1biBgYW5pbWF0aW9uLmVuZCgpYCB0byBwZXJmb3JtIGEgY2xlYW51cCBvbiB0aGUgZWxlbWVudCAoc2luY2Ugc29tZSBDU1MgY2xhc3NlcyBhbmQgc3R5bGVzIG1heSBoYXZlIGJlZW5cbiAqIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgZHVyaW5nIHRoZSBwcmVwYXJhdGlvbiBwaGFzZSkuIE5vdGUgdGhhdCBhbGwgb3RoZXIgcHJvcGVydGllcyBzdWNoIGFzIGR1cmF0aW9uLCBkZWxheSwgdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lcyBhcmUganVzdCBwcm9wZXJ0aWVzXG4gKiBhbmQgdGhhdCBjaGFuZ2luZyB0aGVtIHdpbGwgbm90IHJlY29uZmlndXJlIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBhbmltYXRpb24uXG4gKlxuICogIyMjIHJ1bm5lci5kb25lKCkgdnMgcnVubmVyLnRoZW4oKVxuICogSXQgaXMgZG9jdW1lbnRlZCB0aGF0IGBhbmltYXRpb24uc3RhcnQoKWAgd2lsbCByZXR1cm4gYSBwcm9taXNlIG9iamVjdCBhbmQgdGhpcyBpcyB0cnVlLCBob3dldmVyLCB0aGVyZSBpcyBhbHNvIGFuIGFkZGl0aW9uYWwgbWV0aG9kIGF2YWlsYWJsZSBvbiB0aGVcbiAqIHJ1bm5lciBjYWxsZWQgYC5kb25lKGNhbGxiYWNrRm4pYC4gVGhlIGRvbmUgbWV0aG9kIHdvcmtzIHRoZSBzYW1lIGFzIGAuZmluYWxseShjYWxsYmFja0ZuKWAsIGhvd2V2ZXIsIGl0IGRvZXMgKipub3QgdHJpZ2dlciBhIGRpZ2VzdCB0byBvY2N1cioqLlxuICogVGhlcmVmb3JlLCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgaXQncyBhbHdheXMgYmVzdCB0byB1c2UgYHJ1bm5lci5kb25lKGNhbGxiYWNrKWAgaW5zdGVhZCBvZiBgcnVubmVyLnRoZW4oKWAsIGBydW5uZXIuY2F0Y2goKWAgb3IgYHJ1bm5lci5maW5hbGx5KClgXG4gKiB1bmxlc3MgeW91IHJlYWxseSBuZWVkIGEgZGlnZXN0IHRvIGtpY2sgb2ZmIGFmdGVyd2FyZHMuXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIHRvIG1ha2UgdGhpcyBlYXNpZXIsIG5nQW5pbWF0ZSBoYXMgdHdlYWtlZCB0aGUgSlMgYW5pbWF0aW9ucyBBUEkgdG8gcmVjb2duaXplIHdoZW4gYSBydW5uZXIgaW5zdGFuY2UgaXMgcmV0dXJuZWQgZnJvbSAkYW5pbWF0ZUNzc1xuICogKHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBgcnVubmVyLmRvbmUoZG9uZUZuKWAgaW5zaWRlIG9mIHlvdXIgSmF2YVNjcmlwdCBhbmltYXRpb24gY29kZSkuXG4gKiBDaGVjayB0aGUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZUNzcyN1c2FnZSBhbmltYXRpb24gY29kZSBhYm92ZX0gdG8gc2VlIGhvdyB0aGlzIHdvcmtzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgYW5pbWF0ZWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIHRoZSBhbmltYXRpb24tcmVsYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGR1cmluZyB0aGUgYW5pbWF0aW9uXG4gKlxuICogKiBgZXZlbnRgIC0gVGhlIERPTSBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUpLiBXaGVuIHVzZWQsIGEgZ2VuZXJhdGVkIENTUyBjbGFzcyBvZiBgbmctRVZFTlRgIGFuZCBgbmctRVZFTlQtYWN0aXZlYCB3aWxsIGJlIGFwcGxpZWRcbiAqIHRvIHRoZSBlbGVtZW50IGR1cmluZyB0aGUgYW5pbWF0aW9uLiBNdWx0aXBsZSBldmVudHMgY2FuIGJlIHByb3ZpZGVkIHdoZW4gc3BhY2VzIGFyZSB1c2VkIGFzIGEgc2VwYXJhdG9yLiAoTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgcGVyZm9ybSBhbnkgRE9NIG9wZXJhdGlvbi4pXG4gKiAqIGBzdHJ1Y3R1cmFsYCAtIEluZGljYXRlcyB0aGF0IHRoZSBgbmctYCBwcmVmaXggd2lsbCBiZSBhZGRlZCB0byB0aGUgZXZlbnQgY2xhc3MuIFNldHRpbmcgdG8gYGZhbHNlYCBvciBvbWl0dGluZyB3aWxsIHR1cm4gYG5nLUVWRU5UYCBhbmRcbiAqIGBuZy1FVkVOVC1hY3RpdmVgIGluIGBFVkVOVGAgYW5kIGBFVkVOVC1hY3RpdmVgLiBVbnVzZWQgaWYgYGV2ZW50YCBpcyBvbWl0dGVkLlxuICogKiBgZWFzaW5nYCAtIFRoZSBDU1MgZWFzaW5nIHZhbHVlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIG9yIGtleWZyYW1lIGFuaW1hdGlvbiAob3IgYm90aCkuXG4gKiAqIGB0cmFuc2l0aW9uU3R5bGVgIC0gVGhlIHJhdyBDU1MgdHJhbnNpdGlvbiBzdHlsZSB0aGF0IHdpbGwgYmUgdXNlZCAoZS5nLiBgMXMgbGluZWFyIGFsbGApLlxuICogKiBga2V5ZnJhbWVTdHlsZWAgLSBUaGUgcmF3IENTUyBrZXlmcmFtZSBhbmltYXRpb24gc3R5bGUgdGhhdCB3aWxsIGJlIHVzZWQgKGUuZy4gYDFzIG15X2FuaW1hdGlvbiBsaW5lYXJgKS5cbiAqICogYGZyb21gIC0gVGhlIHN0YXJ0aW5nIENTUyBzdHlsZXMgKGEga2V5L3ZhbHVlIG9iamVjdCkgdGhhdCB3aWxsIGJlIGFwcGxpZWQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhbmltYXRpb24uXG4gKiAqIGB0b2AgLSBUaGUgZW5kaW5nIENTUyBzdHlsZXMgKGEga2V5L3ZhbHVlIG9iamVjdCkgdGhhdCB3aWxsIGJlIGFwcGxpZWQgYWNyb3NzIHRoZSBhbmltYXRpb24gdmlhIGEgQ1NTIHRyYW5zaXRpb24uXG4gKiAqIGBhZGRDbGFzc2AgLSBBIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudCBhbmQgc3ByZWFkIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICogKiBgcmVtb3ZlQ2xhc3NgIC0gQSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50IGFuZCBzcHJlYWQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gKiAqIGBkdXJhdGlvbmAgLSBBIG51bWJlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHRvdGFsIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uIGFuZC9vciBrZXlmcmFtZSAobm90ZSB0aGF0IGEgdmFsdWUgb2YgMSBpcyAxMDAwbXMpLiBJZiBhIHZhbHVlIG9mIGAwYFxuICogaXMgcHJvdmlkZWQgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgYmUgc2tpcHBlZCBlbnRpcmVseS5cbiAqICogYGRlbGF5YCAtIEEgbnVtYmVyIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdG90YWwgZGVsYXkgb2YgdGhlIHRyYW5zaXRpb24gYW5kL29yIGtleWZyYW1lIChub3RlIHRoYXQgYSB2YWx1ZSBvZiAxIGlzIDEwMDBtcykuIElmIGEgdmFsdWUgb2YgYHRydWVgIGlzXG4gKiB1c2VkIHRoZW4gd2hhdGV2ZXIgZGVsYXkgdmFsdWUgaXMgZGV0ZWN0ZWQgZnJvbSB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBtaXJyb3JlZCBvbiB0aGUgZWxlbWVudHMgc3R5bGVzIChlLmcuIGJ5IHNldHRpbmcgZGVsYXkgdHJ1ZSB0aGVuIHRoZSBzdHlsZSB2YWx1ZVxuICogb2YgdGhlIGVsZW1lbnQgd2lsbCBiZSBgdHJhbnNpdGlvbi1kZWxheTogREVURUNURURfVkFMVUVgKS4gVXNpbmcgYHRydWVgIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRoZSBDU1MgY2xhc3NlcyBhbmQgaW5saW5lIHN0eWxlcyB0byBhbGwgc2hhcmUgdGhlIHNhbWVcbiAqIENTUyBkZWxheSB2YWx1ZS5cbiAqICogYHN0YWdnZXJgIC0gQSBudW1lcmljIHRpbWUgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBkZWxheSBiZXR3ZWVuIHN1Y2Nlc3NpdmVseSBhbmltYXRlZCBlbGVtZW50c1xuICogKHtAbGluayBuZ0FuaW1hdGUjY3NzLXN0YWdnZXJpbmctYW5pbWF0aW9ucyBDbGljayBoZXJlIHRvIGxlYXJuIGhvdyBDU1MtYmFzZWQgc3RhZ2dlcmluZyB3b3JrcyBpbiBuZ0FuaW1hdGUufSlcbiAqICogYHN0YWdnZXJJbmRleGAgLSBUaGUgbnVtZXJpYyBpbmRleCByZXByZXNlbnRpbmcgdGhlIHN0YWdnZXIgaXRlbSAoZS5nLiBhIHZhbHVlIG9mIDUgaXMgZXF1YWwgdG8gdGhlIHNpeHRoIGl0ZW0gaW4gdGhlIHN0YWdnZXI7IHRoZXJlZm9yZSB3aGVuIGFcbiAqICAgYHN0YWdnZXJgIG9wdGlvbiB2YWx1ZSBvZiBgMC4xYCBpcyB1c2VkIHRoZW4gdGhlcmUgd2lsbCBiZSBhIHN0YWdnZXIgZGVsYXkgb2YgYDYwMG1zYClcbiAqICogYGFwcGx5Q2xhc3Nlc0Vhcmx5YCAtIFdoZXRoZXIgb3Igbm90IHRoZSBjbGFzc2VzIGJlaW5nIGFkZGVkIG9yIHJlbW92ZWQgd2lsbCBiZSB1c2VkIHdoZW4gZGV0ZWN0aW5nIHRoZSBhbmltYXRpb24uIFRoaXMgaXMgc2V0IGJ5IGAkYW5pbWF0ZWAgd2hlbiBlbnRlci9sZWF2ZS9tb3ZlIGFuaW1hdGlvbnMgYXJlIGZpcmVkIHRvIGVuc3VyZSB0aGF0IHRoZSBDU1MgY2xhc3NlcyBhcmUgcmVzb2x2ZWQgaW4gdGltZS4gKE5vdGUgdGhhdCB0aGlzIHdpbGwgcHJldmVudCBhbnkgdHJhbnNpdGlvbnMgZnJvbSBvY2N1cnJpbmcgb24gdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQgYW5kIHJlbW92ZWQuKVxuICogKiBgY2xlYW51cFN0eWxlc2AgLSBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZWQgYGZyb21gIGFuZCBgdG9gIHN0eWxlcyB3aWxsIGJlIHJlbW92ZWQgb25jZVxuICogICAgdGhlIGFuaW1hdGlvbiBpcyBjbG9zZWQuIFRoaXMgaXMgdXNlZnVsIGZvciB3aGVuIHRoZSBzdHlsZXMgYXJlIHVzZWQgcHVyZWx5IGZvciB0aGUgc2FrZSBvZlxuICogICAgdGhlIGFuaW1hdGlvbiBhbmQgZG8gbm90IGhhdmUgYSBsYXN0aW5nIHZpc3VhbCBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgKGUuZy4gYSBjb2xsYXBzZSBhbmQgb3BlbiBhbmltYXRpb24pLlxuICogICAgQnkgZGVmYXVsdCB0aGlzIHZhbHVlIGlzIHNldCB0byBgZmFsc2VgLlxuICpcbiAqIEByZXR1cm4ge29iamVjdH0gYW4gb2JqZWN0IHdpdGggc3RhcnQgYW5kIGVuZCBtZXRob2RzIGFuZCBkZXRhaWxzIGFib3V0IHRoZSBhbmltYXRpb24uXG4gKlxuICogKiBgc3RhcnRgIC0gVGhlIG1ldGhvZCB0byBzdGFydCB0aGUgYW5pbWF0aW9uLiBUaGlzIHdpbGwgcmV0dXJuIGEgYFByb21pc2VgIHdoZW4gY2FsbGVkLlxuICogKiBgZW5kYCAtIFRoaXMgbWV0aG9kIHdpbGwgY2FuY2VsIHRoZSBhbmltYXRpb24gYW5kIHJlbW92ZSBhbGwgYXBwbGllZCBDU1MgY2xhc3NlcyBhbmQgc3R5bGVzLlxuICovXG52YXIgT05FX1NFQ09ORCA9IDEwMDA7XG5cbnZhciBFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTID0gMztcbnZhciBDTE9TSU5HX1RJTUVfQlVGRkVSID0gMS41O1xuXG52YXIgREVURUNUX0NTU19QUk9QRVJUSUVTID0ge1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICAgICAgVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QLFxuICB0cmFuc2l0aW9uRGVsYXk6ICAgICAgICAgVFJBTlNJVElPTl9ERUxBWV9QUk9QLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICAgICAgVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZLFxuICBhbmltYXRpb25EdXJhdGlvbjogICAgICAgQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AsXG4gIGFuaW1hdGlvbkRlbGF5OiAgICAgICAgICBBTklNQVRJT05fREVMQVlfUFJPUCxcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IEFOSU1BVElPTl9QUk9QICsgQU5JTUFUSU9OX0lURVJBVElPTl9DT1VOVF9LRVlcbn07XG5cbnZhciBERVRFQ1RfU1RBR0dFUl9DU1NfUFJPUEVSVElFUyA9IHtcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAgICAgIFRSQU5TSVRJT05fRFVSQVRJT05fUFJPUCxcbiAgdHJhbnNpdGlvbkRlbGF5OiAgICAgICAgIFRSQU5TSVRJT05fREVMQVlfUFJPUCxcbiAgYW5pbWF0aW9uRHVyYXRpb246ICAgICAgIEFOSU1BVElPTl9EVVJBVElPTl9QUk9QLFxuICBhbmltYXRpb25EZWxheTogICAgICAgICAgQU5JTUFUSU9OX0RFTEFZX1BST1Bcbn07XG5cbmZ1bmN0aW9uIGdldENzc0tleWZyYW1lRHVyYXRpb25TdHlsZShkdXJhdGlvbikge1xuICByZXR1cm4gW0FOSU1BVElPTl9EVVJBVElPTl9QUk9QLCBkdXJhdGlvbiArICdzJ107XG59XG5cbmZ1bmN0aW9uIGdldENzc0RlbGF5U3R5bGUoZGVsYXksIGlzS2V5ZnJhbWVBbmltYXRpb24pIHtcbiAgdmFyIHByb3AgPSBpc0tleWZyYW1lQW5pbWF0aW9uID8gQU5JTUFUSU9OX0RFTEFZX1BST1AgOiBUUkFOU0lUSU9OX0RFTEFZX1BST1A7XG4gIHJldHVybiBbcHJvcCwgZGVsYXkgKyAncyddO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlQ3NzU3R5bGVzKCR3aW5kb3csIGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgdmFyIHN0eWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBkZXRlY3RlZFN0eWxlcyA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB8fCB7fTtcbiAgZm9yRWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihmb3JtYWxTdHlsZU5hbWUsIGFjdHVhbFN0eWxlTmFtZSkge1xuICAgIHZhciB2YWwgPSBkZXRlY3RlZFN0eWxlc1tmb3JtYWxTdHlsZU5hbWVdO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHZhciBjID0gdmFsLmNoYXJBdCgwKTtcblxuICAgICAgLy8gb25seSBudW1lcmljYWwtYmFzZWQgdmFsdWVzIGhhdmUgYSBuZWdhdGl2ZSBzaWduIG9yIGRpZ2l0IGFzIHRoZSBmaXJzdCB2YWx1ZVxuICAgICAgaWYgKGMgPT09ICctJyB8fCBjID09PSAnKycgfHwgYyA+PSAwKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlTWF4VGltZSh2YWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBieSBzZXR0aW5nIHRoaXMgdG8gbnVsbCBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZGVsYXkgaXMgbm90IHNldCBvciBpcyBzZXQgZGlyZWN0bHkgYXMgMFxuICAgICAgLy8gdGhlbiB3ZSBjYW4gc3RpbGwgYWxsb3cgZm9yIG5lZ2F0aXZlIHZhbHVlcyB0byBiZSB1c2VkIGxhdGVyIG9uIGFuZCBub3QgbWlzdGFrZSB0aGlzXG4gICAgICAvLyB2YWx1ZSBmb3IgYmVpbmcgZ3JlYXRlciB0aGFuIGFueSBvdGhlciBuZWdhdGl2ZSB2YWx1ZS5cbiAgICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgICAgdmFsID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN0eWxlc1thY3R1YWxTdHlsZU5hbWVdID0gdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gcGFyc2VNYXhUaW1lKHN0cikge1xuICB2YXIgbWF4VmFsdWUgPSAwO1xuICB2YXIgdmFsdWVzID0gc3RyLnNwbGl0KC9cXHMqLFxccyovKTtcbiAgZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gaXQncyBhbHdheXMgc2FmZSB0byBjb25zaWRlciBvbmx5IHNlY29uZCB2YWx1ZXMgYW5kIG9taXQgYG1zYCB2YWx1ZXMgc2luY2VcbiAgICAvLyBnZXRDb21wdXRlZFN0eWxlIHdpbGwgYWx3YXlzIGhhbmRsZSB0aGUgY29udmVyc2lvbiBmb3IgdXNcbiAgICBpZiAodmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09PSAncycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG4gICAgbWF4VmFsdWUgPSBtYXhWYWx1ZSA/IE1hdGgubWF4KHZhbHVlLCBtYXhWYWx1ZSkgOiB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBtYXhWYWx1ZTtcbn1cblxuZnVuY3Rpb24gdHJ1dGh5VGltaW5nVmFsdWUodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IDAgfHwgdmFsICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlKGR1cmF0aW9uLCBhcHBseU9ubHlEdXJhdGlvbikge1xuICB2YXIgc3R5bGUgPSBUUkFOU0lUSU9OX1BST1A7XG4gIHZhciB2YWx1ZSA9IGR1cmF0aW9uICsgJ3MnO1xuICBpZiAoYXBwbHlPbmx5RHVyYXRpb24pIHtcbiAgICBzdHlsZSArPSBEVVJBVElPTl9LRVk7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgKz0gJyBsaW5lYXIgYWxsJztcbiAgfVxuICByZXR1cm4gW3N0eWxlLCB2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsQ2FjaGVMb29rdXAoKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgZmx1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH0sXG5cbiAgICBjb3VudDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnkudG90YWwgOiAwO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICB9LFxuXG4gICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoIWNhY2hlW2tleV0pIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHsgdG90YWw6IDEsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XS50b3RhbCsrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLy8gd2UgZG8gbm90IHJlYXNzaWduIGFuIGFscmVhZHkgcHJlc2VudCBzdHlsZSB2YWx1ZSBzaW5jZVxuLy8gaWYgd2UgZGV0ZWN0IHRoZSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZSBhZ2FpbiB3ZSBtYXkgYmVcbi8vIGRldGVjdGluZyBzdHlsZXMgdGhhdCB3ZXJlIGFkZGVkIHZpYSB0aGUgYGZyb21gIHN0eWxlcy5cbi8vIFdlIG1ha2UgdXNlIG9mIGBpc0RlZmluZWRgIGhlcmUgc2luY2UgYW4gZW1wdHkgc3RyaW5nXG4vLyBvciBudWxsIHZhbHVlICh3aGljaCBpcyB3aGF0IGdldFByb3BlcnR5VmFsdWUgd2lsbCByZXR1cm5cbi8vIGZvciBhIG5vbi1leGlzdGluZyBzdHlsZSkgd2lsbCBzdGlsbCBiZSBtYXJrZWQgYXMgYSB2YWxpZFxuLy8gdmFsdWUgZm9yIHRoZSBzdHlsZSAoYSBmYWxzeSB2YWx1ZSBpbXBsaWVzIHRoYXQgdGhlIHN0eWxlXG4vLyBpcyB0byBiZSByZW1vdmVkIGF0IHRoZSBlbmQgb2YgdGhlIGFuaW1hdGlvbikuIElmIHdlIGhhZCBhIHNpbXBsZVxuLy8gXCJPUlwiIHN0YXRlbWVudCB0aGVuIGl0IHdvdWxkIG5vdCBiZSBlbm91Z2ggdG8gY2F0Y2ggdGhhdC5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVzdG9yYWJsZVN0eWxlcyhiYWNrdXAsIG5vZGUsIHByb3BlcnRpZXMpIHtcbiAgZm9yRWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgYmFja3VwW3Byb3BdID0gaXNEZWZpbmVkKGJhY2t1cFtwcm9wXSlcbiAgICAgICAgPyBiYWNrdXBbcHJvcF1cbiAgICAgICAgOiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0pO1xufVxuXG52YXIgJEFuaW1hdGVDc3NQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigkYW5pbWF0ZVByb3ZpZGVyKSB7XG4gIHZhciBnY3NMb29rdXAgPSBjcmVhdGVMb2NhbENhY2hlTG9va3VwKCk7XG4gIHZhciBnY3NTdGFnZ2VyTG9va3VwID0gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpO1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckJGpxTGl0ZScsICckJEFuaW1hdGVSdW5uZXInLCAnJHRpbWVvdXQnLFxuICAgICAgICAgICAgICAgJyQkZm9yY2VSZWZsb3cnLCAnJHNuaWZmZXInLCAnJCRyQUZTY2hlZHVsZXInLCAnJCRhbmltYXRlUXVldWUnLFxuICAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICAgJCRqcUxpdGUsICAgJCRBbmltYXRlUnVubmVyLCAgICR0aW1lb3V0LFxuICAgICAgICAgICAgICAgICQkZm9yY2VSZWZsb3csICAgJHNuaWZmZXIsICAgJCRyQUZTY2hlZHVsZXIsICQkYW5pbWF0ZVF1ZXVlKSB7XG5cbiAgICB2YXIgYXBwbHlBbmltYXRpb25DbGFzc2VzID0gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSk7XG5cbiAgICB2YXIgcGFyZW50Q291bnRlciA9IDA7XG4gICAgZnVuY3Rpb24gZ2NzSGFzaEZuKG5vZGUsIGV4dHJhQ2xhc3Nlcykge1xuICAgICAgdmFyIEtFWSA9ICckJG5nQW5pbWF0ZVBhcmVudEtleSc7XG4gICAgICB2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwYXJlbnRJRCA9IHBhcmVudE5vZGVbS0VZXSB8fCAocGFyZW50Tm9kZVtLRVldID0gKytwYXJlbnRDb3VudGVyKTtcbiAgICAgIHJldHVybiBwYXJlbnRJRCArICctJyArIG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJy0nICsgZXh0cmFDbGFzc2VzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVDYWNoZWRDc3NTdHlsZXMobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHRpbWluZ3MgPSBnY3NMb29rdXAuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgaWYgKCF0aW1pbmdzKSB7XG4gICAgICAgIHRpbWluZ3MgPSBjb21wdXRlQ3NzU3R5bGVzKCR3aW5kb3csIG5vZGUsIHByb3BlcnRpZXMpO1xuICAgICAgICBpZiAodGltaW5ncy5hbmltYXRpb25JdGVyYXRpb25Db3VudCA9PT0gJ2luZmluaXRlJykge1xuICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGtlZXAgcHV0dGluZyB0aGlzIGluIG11bHRpcGxlIHRpbWVzIGV2ZW4gdGhvdWdoIHRoZSB2YWx1ZSBhbmQgdGhlIGNhY2hlS2V5IGFyZSB0aGUgc2FtZVxuICAgICAgLy8gYmVjYXVzZSB3ZSdyZSBrZWVwaW5nIGFuIGludGVybmFsIHRhbGx5IG9mIGhvdyBtYW55IGR1cGxpY2F0ZSBhbmltYXRpb25zIGFyZSBkZXRlY3RlZC5cbiAgICAgIGdjc0xvb2t1cC5wdXQoY2FjaGVLZXksIHRpbWluZ3MpO1xuICAgICAgcmV0dXJuIHRpbWluZ3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUNhY2hlZENzc1N0YWdnZXJTdHlsZXMobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHN0YWdnZXI7XG5cbiAgICAgIC8vIGlmIHdlIGhhdmUgb25lIG9yIG1vcmUgZXhpc3RpbmcgbWF0Y2hlcyBvZiBtYXRjaGluZyBlbGVtZW50c1xuICAgICAgLy8gY29udGFpbmluZyB0aGUgc2FtZSBwYXJlbnQgKyBDU1Mgc3R5bGVzICh3aGljaCBpcyBob3cgY2FjaGVLZXkgd29ya3MpXG4gICAgICAvLyB0aGVuIHN0YWdnZXJpbmcgaXMgcG9zc2libGVcbiAgICAgIGlmIChnY3NMb29rdXAuY291bnQoY2FjaGVLZXkpID4gMCkge1xuICAgICAgICBzdGFnZ2VyID0gZ2NzU3RhZ2dlckxvb2t1cC5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgIGlmICghc3RhZ2dlcikge1xuICAgICAgICAgIHZhciBzdGFnZ2VyQ2xhc3NOYW1lID0gcGVuZENsYXNzZXMoY2xhc3NOYW1lLCAnLXN0YWdnZXInKTtcblxuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKG5vZGUsIHN0YWdnZXJDbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3RhZ2dlciA9IGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgbm9kZSwgcHJvcGVydGllcyk7XG5cbiAgICAgICAgICAvLyBmb3JjZSB0aGUgY29udmVyc2lvbiBvZiBhIG51bGwgdmFsdWUgdG8gemVybyBpbmNhc2Ugbm90IHNldFxuICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLm1heChzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uLCAwKTtcbiAgICAgICAgICBzdGFnZ2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9IE1hdGgubWF4KHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uLCAwKTtcblxuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKG5vZGUsIHN0YWdnZXJDbGFzc05hbWUpO1xuXG4gICAgICAgICAgZ2NzU3RhZ2dlckxvb2t1cC5wdXQoY2FjaGVLZXksIHN0YWdnZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFnZ2VyIHx8IHt9O1xuICAgIH1cblxuICAgIHZhciByYWZXYWl0UXVldWUgPSBbXTtcbiAgICBmdW5jdGlvbiB3YWl0VW50aWxRdWlldChjYWxsYmFjaykge1xuICAgICAgcmFmV2FpdFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgICAgJCRyQUZTY2hlZHVsZXIud2FpdFVudGlsUXVpZXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGdjc0xvb2t1cC5mbHVzaCgpO1xuICAgICAgICBnY3NTdGFnZ2VyTG9va3VwLmZsdXNoKCk7XG5cbiAgICAgICAgLy8gRE8gTk9UIFJFTU9WRSBUSElTIExJTkUgT1IgUkVGQUNUT1IgT1VUIFRIRSBgcGFnZVdpZHRoYCB2YXJpYWJsZS5cbiAgICAgICAgLy8gUExFQVNFIEVYQU1JTkUgVEhFIGAkJGZvcmNlUmVmbG93YCBzZXJ2aWNlIHRvIHVuZGVyc3RhbmQgd2h5LlxuICAgICAgICB2YXIgcGFnZVdpZHRoID0gJCRmb3JjZVJlZmxvdygpO1xuXG4gICAgICAgIC8vIHdlIHVzZSBhIGZvciBsb29wIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBxdWV1ZSBpcyBjaGFuZ2VkXG4gICAgICAgIC8vIGR1cmluZyB0aGlzIGxvb3BpbmcgdGhlbiBpdCB3aWxsIGNvbnNpZGVyIG5ldyByZXF1ZXN0c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZldhaXRRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJhZldhaXRRdWV1ZVtpXShwYWdlV2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJhZldhaXRRdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVRpbWluZ3Mobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSkge1xuICAgICAgdmFyIHRpbWluZ3MgPSBjb21wdXRlQ2FjaGVkQ3NzU3R5bGVzKG5vZGUsIGNsYXNzTmFtZSwgY2FjaGVLZXksIERFVEVDVF9DU1NfUFJPUEVSVElFUyk7XG4gICAgICB2YXIgYUQgPSB0aW1pbmdzLmFuaW1hdGlvbkRlbGF5O1xuICAgICAgdmFyIHREID0gdGltaW5ncy50cmFuc2l0aW9uRGVsYXk7XG4gICAgICB0aW1pbmdzLm1heERlbGF5ID0gYUQgJiYgdERcbiAgICAgICAgICA/IE1hdGgubWF4KGFELCB0RClcbiAgICAgICAgICA6IChhRCB8fCB0RCk7XG4gICAgICB0aW1pbmdzLm1heER1cmF0aW9uID0gTWF0aC5tYXgoXG4gICAgICAgICAgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiAqIHRpbWluZ3MuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQsXG4gICAgICAgICAgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24pO1xuXG4gICAgICByZXR1cm4gdGltaW5ncztcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdChlbGVtZW50LCBpbml0aWFsT3B0aW9ucykge1xuICAgICAgLy8gYWxsIG9mIHRoZSBhbmltYXRpb24gZnVuY3Rpb25zIHNob3VsZCBjcmVhdGVcbiAgICAgIC8vIGEgY29weSBvZiB0aGUgb3B0aW9ucyBkYXRhLCBob3dldmVyLCBpZiBhXG4gICAgICAvLyBwYXJlbnQgc2VydmljZSBoYXMgYWxyZWFkeSBjcmVhdGVkIGEgY29weSB0aGVuXG4gICAgICAvLyB3ZSBzaG91bGQgc3RpY2sgdG8gdXNpbmcgdGhhdFxuICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghb3B0aW9ucy4kJHByZXBhcmVkKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyhjb3B5KG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3RvcmVTdHlsZXMgPSB7fTtcbiAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcbiAgICAgIGlmICghbm9kZVxuICAgICAgICAgIHx8ICFub2RlLnBhcmVudE5vZGVcbiAgICAgICAgICB8fCAhJCRhbmltYXRlUXVldWUuZW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGVtcG9yYXJ5U3R5bGVzID0gW107XG4gICAgICB2YXIgY2xhc3NlcyA9IGVsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICAgIHZhciBzdHlsZXMgPSBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpO1xuICAgICAgdmFyIGFuaW1hdGlvbkNsb3NlZDtcbiAgICAgIHZhciBhbmltYXRpb25QYXVzZWQ7XG4gICAgICB2YXIgYW5pbWF0aW9uQ29tcGxldGVkO1xuICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgIHZhciBydW5uZXJIb3N0O1xuICAgICAgdmFyIG1heERlbGF5O1xuICAgICAgdmFyIG1heERlbGF5VGltZTtcbiAgICAgIHZhciBtYXhEdXJhdGlvbjtcbiAgICAgIHZhciBtYXhEdXJhdGlvblRpbWU7XG4gICAgICB2YXIgc3RhcnRUaW1lO1xuICAgICAgdmFyIGV2ZW50cyA9IFtdO1xuXG4gICAgICBpZiAob3B0aW9ucy5kdXJhdGlvbiA9PT0gMCB8fCAoISRzbmlmZmVyLmFuaW1hdGlvbnMgJiYgISRzbmlmZmVyLnRyYW5zaXRpb25zKSkge1xuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMuZXZlbnQgJiYgaXNBcnJheShvcHRpb25zLmV2ZW50KVxuICAgICAgICAgICAgPyBvcHRpb25zLmV2ZW50LmpvaW4oJyAnKVxuICAgICAgICAgICAgOiBvcHRpb25zLmV2ZW50O1xuXG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gbWV0aG9kICYmIG9wdGlvbnMuc3RydWN0dXJhbDtcbiAgICAgIHZhciBzdHJ1Y3R1cmFsQ2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgYWRkUmVtb3ZlQ2xhc3NOYW1lID0gJyc7XG5cbiAgICAgIGlmIChpc1N0cnVjdHVyYWwpIHtcbiAgICAgICAgc3RydWN0dXJhbENsYXNzTmFtZSA9IHBlbmRDbGFzc2VzKG1ldGhvZCwgRVZFTlRfQ0xBU1NfUFJFRklYLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICAgIHN0cnVjdHVyYWxDbGFzc05hbWUgPSBtZXRob2Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSBwZW5kQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBBRERfQ0xBU1NfU1VGRklYKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgaWYgKGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc05hbWUgKz0gJyAnO1xuICAgICAgICB9XG4gICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSBwZW5kQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBSRU1PVkVfQ0xBU1NfU1VGRklYKTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhlcmUgbWF5IGJlIGEgc2l0dWF0aW9uIHdoZXJlIGEgc3RydWN0dXJhbCBhbmltYXRpb24gaXMgY29tYmluZWQgdG9nZXRoZXJcbiAgICAgIC8vIHdpdGggQ1NTIGNsYXNzZXMgdGhhdCBuZWVkIHRvIHJlc29sdmUgYmVmb3JlIHRoZSBhbmltYXRpb24gaXMgY29tcHV0ZWQuXG4gICAgICAvLyBIb3dldmVyIHRoaXMgbWVhbnMgdGhhdCB0aGVyZSBpcyBubyBleHBsaWNpdCBDU1MgY29kZSB0byBibG9jayB0aGUgYW5pbWF0aW9uXG4gICAgICAvLyBmcm9tIGhhcHBlbmluZyAoYnkgc2V0dGluZyAwcyBub25lIGluIHRoZSBjbGFzcyBuYW1lKS4gSWYgdGhpcyBpcyB0aGUgY2FzZVxuICAgICAgLy8gd2UgbmVlZCB0byBhcHBseSB0aGUgY2xhc3NlcyBiZWZvcmUgdGhlIGZpcnN0IHJBRiBzbyB3ZSBrbm93IHRvIGNvbnRpbnVlIGlmXG4gICAgICAvLyB0aGVyZSBhY3R1YWxseSBpcyBhIGRldGVjdGVkIHRyYW5zaXRpb24gb3Iga2V5ZnJhbWUgYW5pbWF0aW9uXG4gICAgICBpZiAob3B0aW9ucy5hcHBseUNsYXNzZXNFYXJseSAmJiBhZGRSZW1vdmVDbGFzc05hbWUubGVuZ3RoKSB7XG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXBhcmF0aW9uQ2xhc3NlcyA9IFtzdHJ1Y3R1cmFsQ2xhc3NOYW1lLCBhZGRSZW1vdmVDbGFzc05hbWVdLmpvaW4oJyAnKS50cmltKCk7XG4gICAgICB2YXIgZnVsbENsYXNzTmFtZSA9IGNsYXNzZXMgKyAnICcgKyBwcmVwYXJhdGlvbkNsYXNzZXM7XG4gICAgICB2YXIgYWN0aXZlQ2xhc3NlcyA9IHBlbmRDbGFzc2VzKHByZXBhcmF0aW9uQ2xhc3NlcywgQUNUSVZFX0NMQVNTX1NVRkZJWCk7XG4gICAgICB2YXIgaGFzVG9TdHlsZXMgPSBzdHlsZXMudG8gJiYgT2JqZWN0LmtleXMoc3R5bGVzLnRvKS5sZW5ndGggPiAwO1xuICAgICAgdmFyIGNvbnRhaW5zS2V5ZnJhbWVBbmltYXRpb24gPSAob3B0aW9ucy5rZXlmcmFtZVN0eWxlIHx8ICcnKS5sZW5ndGggPiAwO1xuXG4gICAgICAvLyB0aGVyZSBpcyBubyB3YXkgd2UgY2FuIHRyaWdnZXIgYW4gYW5pbWF0aW9uIGlmIG5vIHN0eWxlcyBhbmRcbiAgICAgIC8vIG5vIGNsYXNzZXMgYXJlIGJlaW5nIGFwcGxpZWQgd2hpY2ggd291bGQgdGhlbiB0cmlnZ2VyIGEgdHJhbnNpdGlvbixcbiAgICAgIC8vIHVubGVzcyB0aGVyZSBhIGlzIHJhdyBrZXlmcmFtZSB2YWx1ZSB0aGF0IGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICBpZiAoIWNvbnRhaW5zS2V5ZnJhbWVBbmltYXRpb25cbiAgICAgICAgICAgJiYgIWhhc1RvU3R5bGVzXG4gICAgICAgICAgICYmICFwcmVwYXJhdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWNoZUtleSwgc3RhZ2dlcjtcbiAgICAgIGlmIChvcHRpb25zLnN0YWdnZXIgPiAwKSB7XG4gICAgICAgIHZhciBzdGFnZ2VyVmFsID0gcGFyc2VGbG9hdChvcHRpb25zLnN0YWdnZXIpO1xuICAgICAgICBzdGFnZ2VyID0ge1xuICAgICAgICAgIHRyYW5zaXRpb25EZWxheTogc3RhZ2dlclZhbCxcbiAgICAgICAgICBhbmltYXRpb25EZWxheTogc3RhZ2dlclZhbCxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAsXG4gICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDBcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlS2V5ID0gZ2NzSGFzaEZuKG5vZGUsIGZ1bGxDbGFzc05hbWUpO1xuICAgICAgICBzdGFnZ2VyID0gY29tcHV0ZUNhY2hlZENzc1N0YWdnZXJTdHlsZXMobm9kZSwgcHJlcGFyYXRpb25DbGFzc2VzLCBjYWNoZUtleSwgREVURUNUX1NUQUdHRVJfQ1NTX1BST1BFUlRJRVMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMuJCRza2lwUHJlcGFyYXRpb25DbGFzc2VzKSB7XG4gICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHByZXBhcmF0aW9uQ2xhc3Nlcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcHBseU9ubHlEdXJhdGlvbjtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvblN0eWxlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uU3R5bGUgPSBbVFJBTlNJVElPTl9QUk9QLCBvcHRpb25zLnRyYW5zaXRpb25TdHlsZV07XG4gICAgICAgIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgdHJhbnNpdGlvblN0eWxlKTtcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2godHJhbnNpdGlvblN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24gPj0gMCkge1xuICAgICAgICBhcHBseU9ubHlEdXJhdGlvbiA9IG5vZGUuc3R5bGVbVFJBTlNJVElPTl9QUk9QXS5sZW5ndGggPiAwO1xuICAgICAgICB2YXIgZHVyYXRpb25TdHlsZSA9IGdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlKG9wdGlvbnMuZHVyYXRpb24sIGFwcGx5T25seUR1cmF0aW9uKTtcblxuICAgICAgICAvLyB3ZSBzZXQgdGhlIGR1cmF0aW9uIHNvIHRoYXQgaXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgZ2V0Q29tcHV0ZWRTdHlsZSBsYXRlclxuICAgICAgICBhcHBseUlubGluZVN0eWxlKG5vZGUsIGR1cmF0aW9uU3R5bGUpO1xuICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChkdXJhdGlvblN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMua2V5ZnJhbWVTdHlsZSkge1xuICAgICAgICB2YXIga2V5ZnJhbWVTdHlsZSA9IFtBTklNQVRJT05fUFJPUCwgb3B0aW9ucy5rZXlmcmFtZVN0eWxlXTtcbiAgICAgICAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCBrZXlmcmFtZVN0eWxlKTtcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goa2V5ZnJhbWVTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtSW5kZXggPSBzdGFnZ2VyXG4gICAgICAgICAgPyBvcHRpb25zLnN0YWdnZXJJbmRleCA+PSAwXG4gICAgICAgICAgICAgID8gb3B0aW9ucy5zdGFnZ2VySW5kZXhcbiAgICAgICAgICAgICAgOiBnY3NMb29rdXAuY291bnQoY2FjaGVLZXkpXG4gICAgICAgICAgOiAwO1xuXG4gICAgICB2YXIgaXNGaXJzdCA9IGl0ZW1JbmRleCA9PT0gMDtcblxuICAgICAgLy8gdGhpcyBpcyBhIHByZS1lbXB0aXZlIHdheSBvZiBmb3JjaW5nIHRoZSBzZXR1cCBjbGFzc2VzIHRvIGJlIGFkZGVkIGFuZCBhcHBsaWVkIElOU1RBTlRMWVxuICAgICAgLy8gd2l0aG91dCBjYXVzaW5nIGFueSBjb21iaW5hdGlvbiBvZiB0cmFuc2l0aW9ucyB0byBraWNrIGluLiBCeSBhZGRpbmcgYSBuZWdhdGl2ZSBkZWxheSB2YWx1ZVxuICAgICAgLy8gaXQgZm9yY2VzIHRoZSBzZXR1cCBjbGFzcycgdHJhbnNpdGlvbiB0byBlbmQgaW1tZWRpYXRlbHkuIFdlIGxhdGVyIHRoZW4gcmVtb3ZlIHRoZSBuZWdhdGl2ZVxuICAgICAgLy8gdHJhbnNpdGlvbiBkZWxheSB0byBhbGxvdyBmb3IgdGhlIHRyYW5zaXRpb24gdG8gbmF0dXJhbGx5IGRvIGl0J3MgdGhpbmcuIFRoZSBiZWF1dHkgaGVyZSBpc1xuICAgICAgLy8gdGhhdCBpZiB0aGVyZSBpcyBubyB0cmFuc2l0aW9uIGRlZmluZWQgdGhlbiBub3RoaW5nIHdpbGwgaGFwcGVuIGFuZCB0aGlzIHdpbGwgYWxzbyBhbGxvd1xuICAgICAgLy8gb3RoZXIgdHJhbnNpdGlvbnMgdG8gYmUgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlciB3aXRob3V0IGFueSBjaG9wcGluZyB0aGVtIG91dC5cbiAgICAgIGlmIChpc0ZpcnN0ICYmICFvcHRpb25zLnNraXBCbG9ja2luZykge1xuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIFNBRkVfRkFTVF9GT1JXQVJEX0RVUkFUSU9OX1ZBTFVFKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWluZ3MgPSBjb21wdXRlVGltaW5ncyhub2RlLCBmdWxsQ2xhc3NOYW1lLCBjYWNoZUtleSk7XG4gICAgICB2YXIgcmVsYXRpdmVEZWxheSA9IHRpbWluZ3MubWF4RGVsYXk7XG4gICAgICBtYXhEZWxheSA9IE1hdGgubWF4KHJlbGF0aXZlRGVsYXksIDApO1xuICAgICAgbWF4RHVyYXRpb24gPSB0aW1pbmdzLm1heER1cmF0aW9uO1xuXG4gICAgICB2YXIgZmxhZ3MgPSB7fTtcbiAgICAgIGZsYWdzLmhhc1RyYW5zaXRpb25zICAgICAgICAgID0gdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgZmxhZ3MuaGFzQW5pbWF0aW9ucyAgICAgICAgICAgPSB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uID4gMDtcbiAgICAgIGZsYWdzLmhhc1RyYW5zaXRpb25BbGwgICAgICAgID0gZmxhZ3MuaGFzVHJhbnNpdGlvbnMgJiYgdGltaW5ncy50cmFuc2l0aW9uUHJvcGVydHkgPT09ICdhbGwnO1xuICAgICAgZmxhZ3MuYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24gPSBoYXNUb1N0eWxlcyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZsYWdzLmhhc1RyYW5zaXRpb25zICYmICFmbGFncy5oYXNUcmFuc2l0aW9uQWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAoZmxhZ3MuaGFzQW5pbWF0aW9ucyAmJiAhZmxhZ3MuaGFzVHJhbnNpdGlvbnMpKTtcbiAgICAgIGZsYWdzLmFwcGx5QW5pbWF0aW9uRHVyYXRpb24gID0gb3B0aW9ucy5kdXJhdGlvbiAmJiBmbGFncy5oYXNBbmltYXRpb25zO1xuICAgICAgZmxhZ3MuYXBwbHlUcmFuc2l0aW9uRGVsYXkgICAgPSB0cnV0aHlUaW1pbmdWYWx1ZShvcHRpb25zLmRlbGF5KSAmJiAoZmxhZ3MuYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24gfHwgZmxhZ3MuaGFzVHJhbnNpdGlvbnMpO1xuICAgICAgZmxhZ3MuYXBwbHlBbmltYXRpb25EZWxheSAgICAgPSB0cnV0aHlUaW1pbmdWYWx1ZShvcHRpb25zLmRlbGF5KSAmJiBmbGFncy5oYXNBbmltYXRpb25zO1xuICAgICAgZmxhZ3MucmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMgPSBhZGRSZW1vdmVDbGFzc05hbWUubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIHx8IGZsYWdzLmFwcGx5QW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgbWF4RHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uID8gcGFyc2VGbG9hdChvcHRpb25zLmR1cmF0aW9uKSA6IG1heER1cmF0aW9uO1xuXG4gICAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbikge1xuICAgICAgICAgIGZsYWdzLmhhc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA9IG1heER1cmF0aW9uO1xuICAgICAgICAgIGFwcGx5T25seUR1cmF0aW9uID0gbm9kZS5zdHlsZVtUUkFOU0lUSU9OX1BST1AgKyBQUk9QRVJUWV9LRVldLmxlbmd0aCA+IDA7XG4gICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZ2V0Q3NzVHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUobWF4RHVyYXRpb24sIGFwcGx5T25seUR1cmF0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmxhZ3MuYXBwbHlBbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgICAgIGZsYWdzLmhhc0FuaW1hdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPSBtYXhEdXJhdGlvbjtcbiAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChnZXRDc3NLZXlmcmFtZUR1cmF0aW9uU3R5bGUobWF4RHVyYXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF4RHVyYXRpb24gPT09IDAgJiYgIWZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzKSB7XG4gICAgICAgIHJldHVybiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBkZWxheVN0eWxlO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVsYXkgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIGRlbGF5U3R5bGUgPSBwYXJzZUZsb2F0KG9wdGlvbnMuZGVsYXkpO1xuICAgICAgICAgIC8vIG51bWJlciBpbiBvcHRpb25zLmRlbGF5IG1lYW5zIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhlIGRlbGF5IGZvciB0aGUgY2xvc2luZyB0aW1lb3V0XG4gICAgICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChkZWxheVN0eWxlLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EZWxheSkge1xuICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGdldENzc0RlbGF5U3R5bGUoZGVsYXlTdHlsZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZsYWdzLmFwcGx5QW5pbWF0aW9uRGVsYXkpIHtcbiAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChnZXRDc3NEZWxheVN0eWxlKGRlbGF5U3R5bGUsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoZSBkZWxheSB2YWx1ZSBzaW5jZSB3ZSB1c2VkIGEgcHJlLWVtcHRpdmUgbmVnYXRpdmVcbiAgICAgIC8vIGRlbGF5IHZhbHVlIGFuZCB0aGUgZGVsYXkgdmFsdWUgaXMgcmVxdWlyZWQgZm9yIHRoZSBmaW5hbCBldmVudCBjaGVja2luZy4gVGhpc1xuICAgICAgLy8gcHJvcGVydHkgd2lsbCBlbnN1cmUgdGhhdCB0aGlzIHdpbGwgaGFwcGVuIGFmdGVyIHRoZSBSQUYgcGhhc2UgaGFzIHBhc3NlZC5cbiAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uID09IG51bGwgJiYgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwKSB7XG4gICAgICAgIGZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzID0gZmxhZ3MucmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMgfHwgaXNGaXJzdDtcbiAgICAgIH1cblxuICAgICAgbWF4RGVsYXlUaW1lID0gbWF4RGVsYXkgKiBPTkVfU0VDT05EO1xuICAgICAgbWF4RHVyYXRpb25UaW1lID0gbWF4RHVyYXRpb24gKiBPTkVfU0VDT05EO1xuICAgICAgaWYgKCFvcHRpb25zLnNraXBCbG9ja2luZykge1xuICAgICAgICBmbGFncy5ibG9ja1RyYW5zaXRpb24gPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICAgIGZsYWdzLmJsb2NrS2V5ZnJhbWVBbmltYXRpb24gPSB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EZWxheSA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24gPT09IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2xlYW51cFN0eWxlcykge1xuICAgICAgICAgIHJlZ2lzdGVyUmVzdG9yYWJsZVN0eWxlcyhyZXN0b3JlU3R5bGVzLCBub2RlLCBPYmplY3Qua2V5cyhvcHRpb25zLmZyb20pKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGFncy5ibG9ja1RyYW5zaXRpb24gfHwgZmxhZ3MuYmxvY2tLZXlmcmFtZUFuaW1hdGlvbikge1xuICAgICAgICBhcHBseUJsb2NraW5nKG1heER1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc2tpcEJsb2NraW5nKSB7XG4gICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGZvciAxLjUgY2hhbmdlIHRoaXMgY29kZSB0byBoYXZlIGFuIGFuaW1hdG9yIG9iamVjdCBmb3IgYmV0dGVyIGRlYnVnZ2luZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJCR3aWxsQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgZW5kOiBlbmRGbixcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhbmltYXRpb25DbG9zZWQpIHJldHVybjtcblxuICAgICAgICAgIHJ1bm5lckhvc3QgPSB7XG4gICAgICAgICAgICBlbmQ6IGVuZEZuLFxuICAgICAgICAgICAgY2FuY2VsOiBjYW5jZWxGbixcbiAgICAgICAgICAgIHJlc3VtZTogbnVsbCwgLy90aGlzIHdpbGwgYmUgc2V0IGR1cmluZyB0aGUgc3RhcnQoKSBwaGFzZVxuICAgICAgICAgICAgcGF1c2U6IG51bGxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcihydW5uZXJIb3N0KTtcblxuICAgICAgICAgIHdhaXRVbnRpbFF1aWV0KHN0YXJ0KTtcblxuICAgICAgICAgIC8vIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHBhdXNlL3Jlc3VtZSB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgLy8gc2luY2UgaXQgaGFzbid0IHJ1biB5ZXQuIEFuaW1hdGVSdW5uZXIgd2lsbCB0aGVyZWZvcmVcbiAgICAgICAgICAvLyBzZXQgbm9vcCBmdW5jdGlvbnMgZm9yIHJlc3VtZSBhbmQgcGF1c2UgYW5kIHRoZXkgd2lsbFxuICAgICAgICAgIC8vIGxhdGVyIGJlIG92ZXJyaWRkZW4gb25jZSB0aGUgYW5pbWF0aW9uIGlzIHRyaWdnZXJlZFxuICAgICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGVuZEZuKCkge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWxGbigpIHtcbiAgICAgICAgY2xvc2UodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKHJlamVjdGVkKSB7XG4gICAgICAgIC8vIGlmIHRoZSBwcm9taXNlIGhhcyBiZWVuIGNhbGxlZCBhbHJlYWR5IHRoZW4gd2Ugc2hvdWxkbid0IGNsb3NlXG4gICAgICAgIC8vIHRoZSBhbmltYXRpb24gYWdhaW5cbiAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCB8fCAoYW5pbWF0aW9uQ29tcGxldGVkICYmIGFuaW1hdGlvblBhdXNlZCkpIHJldHVybjtcbiAgICAgICAgYW5pbWF0aW9uQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgYW5pbWF0aW9uUGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLiQkc2tpcFByZXBhcmF0aW9uQ2xhc3Nlcykge1xuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHByZXBhcmF0aW9uQ2xhc3Nlcyk7XG4gICAgICAgIH1cbiAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3Nlcyk7XG5cbiAgICAgICAgYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMobm9kZSwgZmFsc2UpO1xuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcblxuICAgICAgICBmb3JFYWNoKHRlbXBvcmFyeVN0eWxlcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSB3YXkgdG8gcmVtb3ZlIGlubGluZSBzdHlsZSBwcm9wZXJ0aWVzIGVudGlyZWx5IGZyb20gZWxlbWVudHMuXG4gICAgICAgICAgLy8gQnkgdXNpbmcgYHJlbW92ZVByb3BlcnR5YCB0aGlzIHdvcmtzLCBidXQgd2UgbmVlZCB0byBjb252ZXJ0IGNhbWVsLWNhc2VkIENTU1xuICAgICAgICAgIC8vIHN0eWxlcyBkb3duIHRvIGh5cGhlbmF0ZWQgdmFsdWVzLlxuICAgICAgICAgIG5vZGUuc3R5bGVbZW50cnlbMF1dID0gJyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc3RvcmVTdHlsZXMpLmxlbmd0aCkge1xuICAgICAgICAgIGZvckVhY2gocmVzdG9yZVN0eWxlcywgZnVuY3Rpb24odmFsdWUsIHByb3ApIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgcmVhc29uIHdoeSB3ZSBoYXZlIHRoaXMgb3B0aW9uIGlzIHRvIGFsbG93IGEgc3luY2hyb25vdXMgY2xvc2luZyBjYWxsYmFja1xuICAgICAgICAvLyB0aGF0IGlzIGZpcmVkIGFzIFNPT04gYXMgdGhlIGFuaW1hdGlvbiBlbmRzICh3aGVuIHRoZSBDU1MgaXMgcmVtb3ZlZCkgb3IgaWZcbiAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiBuZXZlciB0YWtlcyBvZmYgYXQgYWxsLiBBIGdvb2QgZXhhbXBsZSBpcyBhIGxlYXZlIGFuaW1hdGlvbiBzaW5jZVxuICAgICAgICAvLyB0aGUgZWxlbWVudCBtdXN0IGJlIHJlbW92ZWQganVzdCBhZnRlciB0aGUgYW5pbWF0aW9uIGlzIG92ZXIgb3IgZWxzZSB0aGUgZWxlbWVudFxuICAgICAgICAvLyB3aWxsIGFwcGVhciBvbiBzY3JlZW4gZm9yIG9uZSBhbmltYXRpb24gZnJhbWUgY2F1c2luZyBhbiBvdmVyYmVhcmluZyBmbGlja2VyLlxuICAgICAgICBpZiAob3B0aW9ucy5vbkRvbmUpIHtcbiAgICAgICAgICBvcHRpb25zLm9uRG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSB0cmFuc2l0aW9uZW5kIC8gYW5pbWF0aW9uZW5kIGxpc3RlbmVyKHMpXG4gICAgICAgICAgZWxlbWVudC5vZmYoZXZlbnRzLmpvaW4oJyAnKSwgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0NhbmNlbCB0aGUgZmFsbGJhY2sgY2xvc2luZyB0aW1lb3V0IGFuZCByZW1vdmUgdGhlIHRpbWVyIGRhdGFcbiAgICAgICAgdmFyIGFuaW1hdGlvblRpbWVyRGF0YSA9IGVsZW1lbnQuZGF0YShBTklNQVRFX1RJTUVSX0tFWSk7XG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lckRhdGEpIHtcbiAgICAgICAgICAkdGltZW91dC5jYW5jZWwoYW5pbWF0aW9uVGltZXJEYXRhWzBdLnRpbWVyKTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoQU5JTUFURV9USU1FUl9LRVkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlIHByZXBhcmF0aW9uIGZ1bmN0aW9uIGZhaWxzIHRoZW4gdGhlIHByb21pc2UgaXMgbm90IHNldHVwXG4gICAgICAgIGlmIChydW5uZXIpIHtcbiAgICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUJsb2NraW5nKGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChmbGFncy5ibG9ja1RyYW5zaXRpb24pIHtcbiAgICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmbGFncy5ibG9ja0tleWZyYW1lQW5pbWF0aW9uKSB7XG4gICAgICAgICAgYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMobm9kZSwgISFkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKSB7XG4gICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgIGVuZDogZW5kRm4sXG4gICAgICAgICAgY2FuY2VsOiBjYW5jZWxGblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBzaG91bGQgZmx1c2ggdGhlIGNhY2hlIGFuaW1hdGlvblxuICAgICAgICB3YWl0VW50aWxRdWlldChub29wKTtcbiAgICAgICAgY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICQkd2lsbEFuaW1hdGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmQ6IGVuZEZuXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHZhciBldiA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XG5cbiAgICAgICAgLy8gd2Ugbm93IGFsd2F5cyB1c2UgYERhdGUubm93KClgIGR1ZSB0byB0aGUgcmVjZW50IGNoYW5nZXMgd2l0aFxuICAgICAgICAvLyBldmVudC50aW1lU3RhbXAgaW4gRmlyZWZveCwgV2Via2l0IGFuZCBDaHJvbWUgKHNlZSAjMTM0OTQgZm9yIG1vcmUgaW5mbylcbiAgICAgICAgdmFyIHRpbWVTdGFtcCA9IGV2LiRtYW51YWxUaW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuICAgICAgICAvKiBGaXJlZm94IChvciBwb3NzaWJseSBqdXN0IEdlY2tvKSBsaWtlcyB0byBub3Qgcm91bmQgdmFsdWVzIHVwXG4gICAgICAgICAqIHdoZW4gYSBtcyBtZWFzdXJlbWVudCBpcyB1c2VkIGZvciB0aGUgYW5pbWF0aW9uICovXG4gICAgICAgIHZhciBlbGFwc2VkVGltZSA9IHBhcnNlRmxvYXQoZXYuZWxhcHNlZFRpbWUudG9GaXhlZChFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTKSk7XG5cbiAgICAgICAgLyogJG1hbnVhbFRpbWVTdGFtcCBpcyBhIG1vY2tlZCB0aW1lU3RhbXAgdmFsdWUgd2hpY2ggaXMgc2V0XG4gICAgICAgICAqIHdpdGhpbiBicm93c2VyVHJpZ2dlcigpLiBUaGlzIGlzIG9ubHkgaGVyZSBzbyB0aGF0IHRlc3RzIGNhblxuICAgICAgICAgKiBtb2NrIGFuaW1hdGlvbnMgcHJvcGVybHkuIFJlYWwgZXZlbnRzIGZhbGxiYWNrIHRvIGV2ZW50LnRpbWVTdGFtcCxcbiAgICAgICAgICogb3IsIGlmIHRoZXkgZG9uJ3QsIHRoZW4gYSB0aW1lU3RhbXAgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGZvciB0aGVtLlxuICAgICAgICAgKiBXZSdyZSBjaGVja2luZyB0byBzZWUgaWYgdGhlIHRpbWVTdGFtcCBzdXJwYXNzZXMgdGhlIGV4cGVjdGVkIGRlbGF5LFxuICAgICAgICAgKiBidXQgd2UncmUgdXNpbmcgZWxhcHNlZFRpbWUgaW5zdGVhZCBvZiB0aGUgdGltZVN0YW1wIG9uIHRoZSAybmRcbiAgICAgICAgICogcHJlLWNvbmRpdGlvbiBzaW5jZSBhbmltYXRpb25QYXVzZWRzIHNvbWV0aW1lcyBjbG9zZSBvZmYgZWFybHkgKi9cbiAgICAgICAgaWYgKE1hdGgubWF4KHRpbWVTdGFtcCAtIHN0YXJ0VGltZSwgMCkgPj0gbWF4RGVsYXlUaW1lICYmIGVsYXBzZWRUaW1lID49IG1heER1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gd2Ugc2V0IHRoaXMgZmxhZyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgdHJhbnNpdGlvbiBpcyBwYXVzZWQgdGhlbiwgd2hlbiByZXN1bWVkLFxuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsb3NlIGl0c2VsZiBzaW5jZSB0cmFuc2l0aW9ucyBjYW5ub3QgYmUgcGF1c2VkLlxuICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXZlbiB0aG91Z2ggd2Ugb25seSBwYXVzZSBrZXlmcmFtZSBhbmltYXRpb25zIGhlcmUgdGhlIHBhdXNlIGZsYWdcbiAgICAgICAgLy8gd2lsbCBzdGlsbCBoYXBwZW4gd2hlbiB0cmFuc2l0aW9ucyBhcmUgdXNlZC4gT25seSB0aGUgdHJhbnNpdGlvbiB3aWxsXG4gICAgICAgIC8vIG5vdCBiZSBwYXVzZWQgc2luY2UgdGhhdCBpcyBub3QgcG9zc2libGUuIElmIHRoZSBhbmltYXRpb24gZW5kcyB3aGVuXG4gICAgICAgIC8vIHBhdXNlZCB0aGVuIGl0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHVucGF1c2VkIG9yIGNhbmNlbGxlZC5cbiAgICAgICAgdmFyIHBsYXlQYXVzZSA9IGZ1bmN0aW9uKHBsYXlBbmltYXRpb24pIHtcbiAgICAgICAgICBpZiAoIWFuaW1hdGlvbkNvbXBsZXRlZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uUGF1c2VkID0gIXBsYXlBbmltYXRpb247XG4gICAgICAgICAgICBpZiAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBibG9ja0tleWZyYW1lQW5pbWF0aW9ucyhub2RlLCBhbmltYXRpb25QYXVzZWQpO1xuICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uUGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh0ZW1wb3JhcnlTdHlsZXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uUGF1c2VkICYmIHBsYXlBbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2tpbmcgdGhlIHN0YWdnZXIgZHVyYXRpb24gcHJldmVudHMgYW4gYWNjaWRlbnRhbGx5IGNhc2NhZGUgb2YgdGhlIENTUyBkZWxheSBzdHlsZVxuICAgICAgICAvLyBiZWluZyBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50LiBJZiB0aGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyB6ZXJvIHRoZW4gd2UgY2FuIHNhZmVseVxuICAgICAgICAvLyByZWx5IHRoYXQgdGhlIGRlbGF5IHZhbHVlIGlzIGFuIGludGVudGlvbmFsIHN0YWdnZXIgZGVsYXkgc3R5bGUuXG4gICAgICAgIHZhciBtYXhTdGFnZ2VyID0gaXRlbUluZGV4ID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICYmICgodGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gJiYgc3RhZ2dlci50cmFuc2l0aW9uRHVyYXRpb24gPT09IDApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gJiYgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgJiYgTWF0aC5tYXgoc3RhZ2dlci5hbmltYXRpb25EZWxheSwgc3RhZ2dlci50cmFuc2l0aW9uRGVsYXkpO1xuICAgICAgICBpZiAobWF4U3RhZ2dlcikge1xuICAgICAgICAgICR0aW1lb3V0KHRyaWdnZXJBbmltYXRpb25TdGFydCxcbiAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKG1heFN0YWdnZXIgKiBpdGVtSW5kZXggKiBPTkVfU0VDT05EKSxcbiAgICAgICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJpZ2dlckFuaW1hdGlvblN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIHdpbGwgZGVjb3JhdGUgdGhlIGV4aXN0aW5nIHByb21pc2UgcnVubmVyIHdpdGggcGF1c2UvcmVzdW1lIG1ldGhvZHNcbiAgICAgICAgcnVubmVySG9zdC5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwbGF5UGF1c2UodHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcnVubmVySG9zdC5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBsYXlQYXVzZShmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpZ2dlckFuaW1hdGlvblN0YXJ0KCkge1xuICAgICAgICAgIC8vIGp1c3QgaW5jYXNlIGEgc3RhZ2dlciBhbmltYXRpb24ga2lja3MgaW4gd2hlbiB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgLy8gaXRzZWxmIHdhcyBjYW5jZWxsZWQgZW50aXJlbHlcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uQ2xvc2VkKSByZXR1cm47XG5cbiAgICAgICAgICBhcHBseUJsb2NraW5nKGZhbHNlKTtcblxuICAgICAgICAgIGZvckVhY2godGVtcG9yYXJ5U3R5bGVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgICAgICBub2RlLnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCBhY3RpdmVDbGFzc2VzKTtcblxuICAgICAgICAgIGlmIChmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcykge1xuICAgICAgICAgICAgZnVsbENsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJyAnICsgcHJlcGFyYXRpb25DbGFzc2VzO1xuICAgICAgICAgICAgY2FjaGVLZXkgPSBnY3NIYXNoRm4obm9kZSwgZnVsbENsYXNzTmFtZSk7XG5cbiAgICAgICAgICAgIHRpbWluZ3MgPSBjb21wdXRlVGltaW5ncyhub2RlLCBmdWxsQ2xhc3NOYW1lLCBjYWNoZUtleSk7XG4gICAgICAgICAgICByZWxhdGl2ZURlbGF5ID0gdGltaW5ncy5tYXhEZWxheTtcbiAgICAgICAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XG4gICAgICAgICAgICBtYXhEdXJhdGlvbiA9IHRpbWluZ3MubWF4RHVyYXRpb247XG5cbiAgICAgICAgICAgIGlmIChtYXhEdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZsYWdzLmhhc1RyYW5zaXRpb25zID0gdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgICAgICAgZmxhZ3MuaGFzQW5pbWF0aW9ucyA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmbGFncy5hcHBseUFuaW1hdGlvbkRlbGF5KSB7XG4gICAgICAgICAgICByZWxhdGl2ZURlbGF5ID0gdHlwZW9mIG9wdGlvbnMuZGVsYXkgIT09ICdib29sZWFuJyAmJiB0cnV0aHlUaW1pbmdWYWx1ZShvcHRpb25zLmRlbGF5KVxuICAgICAgICAgICAgICAgICAgPyBwYXJzZUZsb2F0KG9wdGlvbnMuZGVsYXkpXG4gICAgICAgICAgICAgICAgICA6IHJlbGF0aXZlRGVsYXk7XG5cbiAgICAgICAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XG4gICAgICAgICAgICB0aW1pbmdzLmFuaW1hdGlvbkRlbGF5ID0gcmVsYXRpdmVEZWxheTtcbiAgICAgICAgICAgIGRlbGF5U3R5bGUgPSBnZXRDc3NEZWxheVN0eWxlKHJlbGF0aXZlRGVsYXksIHRydWUpO1xuICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZGVsYXlTdHlsZSk7XG4gICAgICAgICAgICBub2RlLnN0eWxlW2RlbGF5U3R5bGVbMF1dID0gZGVsYXlTdHlsZVsxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXhEZWxheVRpbWUgPSBtYXhEZWxheSAqIE9ORV9TRUNPTkQ7XG4gICAgICAgICAgbWF4RHVyYXRpb25UaW1lID0gbWF4RHVyYXRpb24gKiBPTkVfU0VDT05EO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZWFzaW5nKSB7XG4gICAgICAgICAgICB2YXIgZWFzZVByb3AsIGVhc2VWYWwgPSBvcHRpb25zLmVhc2luZztcbiAgICAgICAgICAgIGlmIChmbGFncy5oYXNUcmFuc2l0aW9ucykge1xuICAgICAgICAgICAgICBlYXNlUHJvcCA9IFRSQU5TSVRJT05fUFJPUCArIFRJTUlOR19LRVk7XG4gICAgICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKFtlYXNlUHJvcCwgZWFzZVZhbF0pO1xuICAgICAgICAgICAgICBub2RlLnN0eWxlW2Vhc2VQcm9wXSA9IGVhc2VWYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MuaGFzQW5pbWF0aW9ucykge1xuICAgICAgICAgICAgICBlYXNlUHJvcCA9IEFOSU1BVElPTl9QUk9QICsgVElNSU5HX0tFWTtcbiAgICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goW2Vhc2VQcm9wLCBlYXNlVmFsXSk7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGVbZWFzZVByb3BdID0gZWFzZVZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50cy5wdXNoKFRSQU5TSVRJT05FTkRfRVZFTlQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICBldmVudHMucHVzaChBTklNQVRJT05FTkRfRVZFTlQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgdmFyIHRpbWVyVGltZSA9IG1heERlbGF5VGltZSArIENMT1NJTkdfVElNRV9CVUZGRVIgKiBtYXhEdXJhdGlvblRpbWU7XG4gICAgICAgICAgdmFyIGVuZFRpbWUgPSBzdGFydFRpbWUgKyB0aW1lclRpbWU7XG5cbiAgICAgICAgICB2YXIgYW5pbWF0aW9uc0RhdGEgPSBlbGVtZW50LmRhdGEoQU5JTUFURV9USU1FUl9LRVkpIHx8IFtdO1xuICAgICAgICAgIHZhciBzZXR1cEZhbGxiYWNrVGltZXIgPSB0cnVlO1xuICAgICAgICAgIGlmIChhbmltYXRpb25zRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXJEYXRhID0gYW5pbWF0aW9uc0RhdGFbMF07XG4gICAgICAgICAgICBzZXR1cEZhbGxiYWNrVGltZXIgPSBlbmRUaW1lID4gY3VycmVudFRpbWVyRGF0YS5leHBlY3RlZEVuZFRpbWU7XG4gICAgICAgICAgICBpZiAoc2V0dXBGYWxsYmFja1RpbWVyKSB7XG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChjdXJyZW50VGltZXJEYXRhLnRpbWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbnNEYXRhLnB1c2goY2xvc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZXR1cEZhbGxiYWNrVGltZXIpIHtcbiAgICAgICAgICAgIHZhciB0aW1lciA9ICR0aW1lb3V0KG9uQW5pbWF0aW9uRXhwaXJlZCwgdGltZXJUaW1lLCBmYWxzZSk7XG4gICAgICAgICAgICBhbmltYXRpb25zRGF0YVswXSA9IHtcbiAgICAgICAgICAgICAgdGltZXI6IHRpbWVyLFxuICAgICAgICAgICAgICBleHBlY3RlZEVuZFRpbWU6IGVuZFRpbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhbmltYXRpb25zRGF0YS5wdXNoKGNsb3NlKTtcbiAgICAgICAgICAgIGVsZW1lbnQuZGF0YShBTklNQVRFX1RJTUVSX0tFWSwgYW5pbWF0aW9uc0RhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50cy5qb2luKCcgJyksIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVzdG9yYWJsZVN0eWxlcyhyZXN0b3JlU3R5bGVzLCBub2RlLCBPYmplY3Qua2V5cyhvcHRpb25zLnRvKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uQW5pbWF0aW9uRXhwaXJlZCgpIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uc0RhdGEgPSBlbGVtZW50LmRhdGEoQU5JTUFURV9USU1FUl9LRVkpO1xuXG4gICAgICAgICAgLy8gdGhpcyB3aWxsIGJlIGZhbHNlIGluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IHdhc1xuICAgICAgICAgIC8vIHJlbW92ZWQgZnJvbSB0aGUgRE9NICh2aWEgYSBsZWF2ZSBhbmltYXRpb24gb3Igc29tZXRoaW5nXG4gICAgICAgICAgLy8gc2ltaWxhcilcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uc0RhdGEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYW5pbWF0aW9uc0RhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uc0RhdGFbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShBTklNQVRFX1RJTUVSX0tFWSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59XTtcblxudmFyICQkQW5pbWF0ZUNzc0RyaXZlclByb3ZpZGVyID0gWyckJGFuaW1hdGlvblByb3ZpZGVyJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCQkYW5pbWF0aW9uUHJvdmlkZXIpIHtcbiAgJCRhbmltYXRpb25Qcm92aWRlci5kcml2ZXJzLnB1c2goJyQkYW5pbWF0ZUNzc0RyaXZlcicpO1xuXG4gIHZhciBOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSA9ICduZy1hbmltYXRlLXNoaW0nO1xuICB2YXIgTkdfQU5JTUFURV9BTkNIT1JfQ0xBU1NfTkFNRSA9ICduZy1hbmNob3InO1xuXG4gIHZhciBOR19PVVRfQU5DSE9SX0NMQVNTX05BTUUgPSAnbmctYW5jaG9yLW91dCc7XG4gIHZhciBOR19JTl9BTkNIT1JfQ0xBU1NfTkFNRSA9ICduZy1hbmNob3ItaW4nO1xuXG4gIGZ1bmN0aW9uIGlzRG9jdW1lbnRGcmFnbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExO1xuICB9XG5cbiAgdGhpcy4kZ2V0ID0gWyckYW5pbWF0ZUNzcycsICckcm9vdFNjb3BlJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckcm9vdEVsZW1lbnQnLCAnJHNuaWZmZXInLCAnJCRqcUxpdGUnLCAnJGRvY3VtZW50JyxcbiAgICAgICBmdW5jdGlvbigkYW5pbWF0ZUNzcywgICAkcm9vdFNjb3BlLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkcm9vdEVsZW1lbnQsICAgJHNuaWZmZXIsICAgJCRqcUxpdGUsICAgJGRvY3VtZW50KSB7XG5cbiAgICAvLyBvbmx5IGJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0aGVzZSBwcm9wZXJ0aWVzIGNhbiByZW5kZXIgYW5pbWF0aW9uc1xuICAgIGlmICghJHNuaWZmZXIuYW5pbWF0aW9ucyAmJiAhJHNuaWZmZXIudHJhbnNpdGlvbnMpIHJldHVybiBub29wO1xuXG4gICAgdmFyIGJvZHlOb2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgdmFyIHJvb3ROb2RlID0gZ2V0RG9tTm9kZSgkcm9vdEVsZW1lbnQpO1xuXG4gICAgdmFyIHJvb3RCb2R5RWxlbWVudCA9IGpxTGl0ZShcbiAgICAgIC8vIHRoaXMgaXMgdG8gYXZvaWQgdXNpbmcgc29tZXRoaW5nIHRoYXQgZXhpc3RzIG91dHNpZGUgb2YgdGhlIGJvZHlcbiAgICAgIC8vIHdlIGFsc28gc3BlY2lhbCBjYXNlIHRoZSBkb2MgZnJhZ21lbnQgY2FzZSBiZWNhdXNlIG91ciB1bml0IHRlc3QgY29kZVxuICAgICAgLy8gYXBwZW5kcyB0aGUgJHJvb3RFbGVtZW50IHRvIHRoZSBib2R5IGFmdGVyIHRoZSBhcHAgaGFzIGJlZW4gYm9vdHN0cmFwcGVkXG4gICAgICBpc0RvY3VtZW50RnJhZ21lbnQocm9vdE5vZGUpIHx8IGJvZHlOb2RlLmNvbnRhaW5zKHJvb3ROb2RlKSA/IHJvb3ROb2RlIDogYm9keU5vZGVcbiAgICApO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGluaXREcml2ZXJGbihhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICByZXR1cm4gYW5pbWF0aW9uRGV0YWlscy5mcm9tICYmIGFuaW1hdGlvbkRldGFpbHMudG9cbiAgICAgICAgICA/IHByZXBhcmVGcm9tVG9BbmNob3JBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscy5mcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLnRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLmNsYXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMuYW5jaG9ycylcbiAgICAgICAgICA6IHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJDc3NDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgIC8vcmVtb3ZlIGFsbCB0aGUgYG5nLWAgc3R1ZmZcbiAgICAgIHJldHVybiBjbGFzc2VzLnJlcGxhY2UoL1xcYm5nLVxcUytcXGIvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuaXF1ZVZhbHVlcyhhLCBiKSB7XG4gICAgICBpZiAoaXNTdHJpbmcoYSkpIGEgPSBhLnNwbGl0KCcgJyk7XG4gICAgICBpZiAoaXNTdHJpbmcoYikpIGIgPSBiLnNwbGl0KCcgJyk7XG4gICAgICByZXR1cm4gYS5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiBiLmluZGV4T2YodmFsKSA9PT0gLTE7XG4gICAgICB9KS5qb2luKCcgJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUFuY2hvcmVkQW5pbWF0aW9uKGNsYXNzZXMsIG91dEFuY2hvciwgaW5BbmNob3IpIHtcbiAgICAgIHZhciBjbG9uZSA9IGpxTGl0ZShnZXREb21Ob2RlKG91dEFuY2hvcikuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgIHZhciBzdGFydGluZ0NsYXNzZXMgPSBmaWx0ZXJDc3NDbGFzc2VzKGdldENsYXNzVmFsKGNsb25lKSk7XG5cbiAgICAgIG91dEFuY2hvci5hZGRDbGFzcyhOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSk7XG4gICAgICBpbkFuY2hvci5hZGRDbGFzcyhOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSk7XG5cbiAgICAgIGNsb25lLmFkZENsYXNzKE5HX0FOSU1BVEVfQU5DSE9SX0NMQVNTX05BTUUpO1xuXG4gICAgICByb290Qm9keUVsZW1lbnQuYXBwZW5kKGNsb25lKTtcblxuICAgICAgdmFyIGFuaW1hdG9ySW4sIGFuaW1hdG9yT3V0ID0gcHJlcGFyZU91dEFuaW1hdGlvbigpO1xuXG4gICAgICAvLyB0aGUgdXNlciBtYXkgbm90IGVuZCB1cCB1c2luZyB0aGUgYG91dGAgYW5pbWF0aW9uIGFuZFxuICAgICAgLy8gb25seSBtYWtpbmcgdXNlIG9mIHRoZSBgaW5gIGFuaW1hdGlvbiBvciB2aWNlLXZlcnNhLlxuICAgICAgLy8gSW4gZWl0aGVyIGNhc2Ugd2Ugc2hvdWxkIGFsbG93IHRoaXMgYW5kIG5vdCBhc3N1bWUgdGhlXG4gICAgICAvLyBhbmltYXRpb24gaXMgb3ZlciB1bmxlc3MgYm90aCBhbmltYXRpb25zIGFyZSBub3QgdXNlZC5cbiAgICAgIGlmICghYW5pbWF0b3JPdXQpIHtcbiAgICAgICAgYW5pbWF0b3JJbiA9IHByZXBhcmVJbkFuaW1hdGlvbigpO1xuICAgICAgICBpZiAoIWFuaW1hdG9ySW4pIHtcbiAgICAgICAgICByZXR1cm4gZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0aW5nQW5pbWF0b3IgPSBhbmltYXRvck91dCB8fCBhbmltYXRvckluO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJ1bm5lcjtcblxuICAgICAgICAgIHZhciBjdXJyZW50QW5pbWF0aW9uID0gc3RhcnRpbmdBbmltYXRvci5zdGFydCgpO1xuICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24uZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFhbmltYXRvckluKSB7XG4gICAgICAgICAgICAgIGFuaW1hdG9ySW4gPSBwcmVwYXJlSW5BbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdG9ySW4pIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uID0gYW5pbWF0b3JJbi5zdGFydCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24uZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgICAgICAgICAgICBydW5uZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlcmUgaXMgbm8gYGluYCBhbmltYXRpb25cbiAgICAgICAgICAgIGVuZCgpO1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgICAgIGVuZDogZW5kRm4sXG4gICAgICAgICAgICBjYW5jZWw6IGVuZEZuXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uLmVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlQW5jaG9yU3R5bGVzKGFuY2hvcikge1xuICAgICAgICB2YXIgc3R5bGVzID0ge307XG5cbiAgICAgICAgdmFyIGNvb3JkcyA9IGdldERvbU5vZGUoYW5jaG9yKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAvLyB3ZSBpdGVyYXRlIGRpcmVjdGx5IHNpbmNlIHNhZmFyaSBtZXNzZXMgdXAgYW5kIGRvZXNuJ3QgcmV0dXJuXG4gICAgICAgIC8vIGFsbCB0aGUga2V5cyBmb3IgdGhlIGNvb3JkcyBvYmplY3Qgd2hlbiBpdGVyYXRlZFxuICAgICAgICBmb3JFYWNoKFsnd2lkdGgnLCdoZWlnaHQnLCd0b3AnLCdsZWZ0J10sIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvb3Jkc1trZXldO1xuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICB2YWx1ZSArPSBib2R5Tm9kZS5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgIHZhbHVlICs9IGJvZHlOb2RlLnNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZXNba2V5XSA9IE1hdGguZmxvb3IodmFsdWUpICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByZXBhcmVPdXRBbmltYXRpb24oKSB7XG4gICAgICAgIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGNsb25lLCB7XG4gICAgICAgICAgYWRkQ2xhc3M6IE5HX09VVF9BTkNIT1JfQ0xBU1NfTkFNRSxcbiAgICAgICAgICBkZWxheTogdHJ1ZSxcbiAgICAgICAgICBmcm9tOiBjYWxjdWxhdGVBbmNob3JTdHlsZXMob3V0QW5jaG9yKVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZWFkIHRoZSBjb21tZW50IHdpdGhpbiBgcHJlcGFyZVJlZ3VsYXJBbmltYXRpb25gIHRvIHVuZGVyc3RhbmRcbiAgICAgICAgLy8gd2h5IHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5XG4gICAgICAgIHJldHVybiBhbmltYXRvci4kJHdpbGxBbmltYXRlID8gYW5pbWF0b3IgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDbGFzc1ZhbChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJyc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHByZXBhcmVJbkFuaW1hdGlvbigpIHtcbiAgICAgICAgdmFyIGVuZGluZ0NsYXNzZXMgPSBmaWx0ZXJDc3NDbGFzc2VzKGdldENsYXNzVmFsKGluQW5jaG9yKSk7XG4gICAgICAgIHZhciB0b0FkZCA9IGdldFVuaXF1ZVZhbHVlcyhlbmRpbmdDbGFzc2VzLCBzdGFydGluZ0NsYXNzZXMpO1xuICAgICAgICB2YXIgdG9SZW1vdmUgPSBnZXRVbmlxdWVWYWx1ZXMoc3RhcnRpbmdDbGFzc2VzLCBlbmRpbmdDbGFzc2VzKTtcblxuICAgICAgICB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhjbG9uZSwge1xuICAgICAgICAgIHRvOiBjYWxjdWxhdGVBbmNob3JTdHlsZXMoaW5BbmNob3IpLFxuICAgICAgICAgIGFkZENsYXNzOiBOR19JTl9BTkNIT1JfQ0xBU1NfTkFNRSArICcgJyArIHRvQWRkLFxuICAgICAgICAgIHJlbW92ZUNsYXNzOiBOR19PVVRfQU5DSE9SX0NMQVNTX05BTUUgKyAnICcgKyB0b1JlbW92ZSxcbiAgICAgICAgICBkZWxheTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZWFkIHRoZSBjb21tZW50IHdpdGhpbiBgcHJlcGFyZVJlZ3VsYXJBbmltYXRpb25gIHRvIHVuZGVyc3RhbmRcbiAgICAgICAgLy8gd2h5IHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5XG4gICAgICAgIHJldHVybiBhbmltYXRvci4kJHdpbGxBbmltYXRlID8gYW5pbWF0b3IgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgIGNsb25lLnJlbW92ZSgpO1xuICAgICAgICBvdXRBbmNob3IucmVtb3ZlQ2xhc3MoTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUpO1xuICAgICAgICBpbkFuY2hvci5yZW1vdmVDbGFzcyhOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUZyb21Ub0FuY2hvckFuaW1hdGlvbihmcm9tLCB0bywgY2xhc3NlcywgYW5jaG9ycykge1xuICAgICAgdmFyIGZyb21BbmltYXRpb24gPSBwcmVwYXJlUmVndWxhckFuaW1hdGlvbihmcm9tLCBub29wKTtcbiAgICAgIHZhciB0b0FuaW1hdGlvbiA9IHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKHRvLCBub29wKTtcblxuICAgICAgdmFyIGFuY2hvckFuaW1hdGlvbnMgPSBbXTtcbiAgICAgIGZvckVhY2goYW5jaG9ycywgZnVuY3Rpb24oYW5jaG9yKSB7XG4gICAgICAgIHZhciBvdXRFbGVtZW50ID0gYW5jaG9yWydvdXQnXTtcbiAgICAgICAgdmFyIGluRWxlbWVudCA9IGFuY2hvclsnaW4nXTtcbiAgICAgICAgdmFyIGFuaW1hdG9yID0gcHJlcGFyZUFuY2hvcmVkQW5pbWF0aW9uKGNsYXNzZXMsIG91dEVsZW1lbnQsIGluRWxlbWVudCk7XG4gICAgICAgIGlmIChhbmltYXRvcikge1xuICAgICAgICAgIGFuY2hvckFuaW1hdGlvbnMucHVzaChhbmltYXRvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBubyBwb2ludCBpbiBkb2luZyBhbnl0aGluZyB3aGVuIHRoZXJlIGFyZSBubyBlbGVtZW50cyB0byBhbmltYXRlXG4gICAgICBpZiAoIWZyb21BbmltYXRpb24gJiYgIXRvQW5pbWF0aW9uICYmIGFuY2hvckFuaW1hdGlvbnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uUnVubmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKGZyb21BbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaChmcm9tQW5pbWF0aW9uLnN0YXJ0KCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0b0FuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKHRvQW5pbWF0aW9uLnN0YXJ0KCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2goYW5jaG9yQW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2goYW5pbWF0aW9uLnN0YXJ0KCkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgZW5kOiBlbmRGbixcbiAgICAgICAgICAgIGNhbmNlbDogZW5kRm4gLy8gQ1NTLWRyaXZlbiBhbmltYXRpb25zIGNhbm5vdCBiZSBjYW5jZWxsZWQsIG9ubHkgZW5kZWRcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5hbGwoYW5pbWF0aW9uUnVubmVycywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICBydW5uZXIuY29tcGxldGUoc3RhdHVzKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgICAgICBmdW5jdGlvbiBlbmRGbigpIHtcbiAgICAgICAgICAgIGZvckVhY2goYW5pbWF0aW9uUnVubmVycywgZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlUmVndWxhckFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGFuaW1hdGlvbkRldGFpbHMuZWxlbWVudDtcbiAgICAgIHZhciBvcHRpb25zID0gYW5pbWF0aW9uRGV0YWlscy5vcHRpb25zIHx8IHt9O1xuXG4gICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscy5zdHJ1Y3R1cmFsKSB7XG4gICAgICAgIG9wdGlvbnMuZXZlbnQgPSBhbmltYXRpb25EZXRhaWxzLmV2ZW50O1xuICAgICAgICBvcHRpb25zLnN0cnVjdHVyYWwgPSB0cnVlO1xuICAgICAgICBvcHRpb25zLmFwcGx5Q2xhc3Nlc0Vhcmx5ID0gdHJ1ZTtcblxuICAgICAgICAvLyB3ZSBzcGVjaWFsIGNhc2UgdGhlIGxlYXZlIGFuaW1hdGlvbiBzaW5jZSB3ZSB3YW50IHRvIGVuc3VyZSB0aGF0XG4gICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgYXMgc29vbiBhcyB0aGUgYW5pbWF0aW9uIGlzIG92ZXIuIE90aGVyd2lzZVxuICAgICAgICAvLyBhIGZsaWNrZXIgbWlnaHQgYXBwZWFyIG9yIHRoZSBlbGVtZW50IG1heSBub3QgYmUgcmVtb3ZlZCBhdCBhbGxcbiAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuZXZlbnQgPT09ICdsZWF2ZScpIHtcbiAgICAgICAgICBvcHRpb25zLm9uRG9uZSA9IG9wdGlvbnMuZG9tT3BlcmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFzc2lnbiB0aGUgcHJlcGFyYXRpb25DbGFzc2VzIGFzIHRoZSBhY3R1YWwgYW5pbWF0aW9uIGV2ZW50IHNpbmNlXG4gICAgICAvLyB0aGUgaW50ZXJuYWxzIG9mICRhbmltYXRlQ3NzIHdpbGwganVzdCBzdWZmaXggdGhlIGV2ZW50IHRva2VuIHZhbHVlc1xuICAgICAgLy8gd2l0aCBgLWFjdGl2ZWAgdG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uLlxuICAgICAgaWYgKG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzKSB7XG4gICAgICAgIG9wdGlvbnMuZXZlbnQgPSBjb25jYXRXaXRoU3BhY2Uob3B0aW9ucy5ldmVudCwgb3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCBvcHRpb25zKTtcblxuICAgICAgLy8gdGhlIGRyaXZlciBsb29rdXAgY29kZSBpbnNpZGUgb2YgJCRhbmltYXRpb24gYXR0ZW1wdHMgdG8gc3Bhd24gYVxuICAgICAgLy8gZHJpdmVyIG9uZSBieSBvbmUgdW50aWwgYSBkcml2ZXIgcmV0dXJucyBhLiQkd2lsbEFuaW1hdGUgYW5pbWF0b3Igb2JqZWN0LlxuICAgICAgLy8gJGFuaW1hdGVDc3Mgd2lsbCBhbHdheXMgcmV0dXJuIGFuIG9iamVjdCwgaG93ZXZlciwgaXQgd2lsbCBwYXNzIGluXG4gICAgICAvLyBhIGZsYWcgYXMgYSBoaW50IGFzIHRvIHdoZXRoZXIgYW4gYW5pbWF0aW9uIHdhcyBkZXRlY3RlZCBvciBub3RcbiAgICAgIHJldHVybiBhbmltYXRvci4kJHdpbGxBbmltYXRlID8gYW5pbWF0b3IgOiBudWxsO1xuICAgIH1cbiAgfV07XG59XTtcblxuLy8gVE9ETyhtYXRza28pOiB1c2UgY2FjaGluZyBoZXJlIHRvIHNwZWVkIHRoaW5ncyB1cCBmb3IgZGV0ZWN0aW9uXG4vLyBUT0RPKG1hdHNrbyk6IGFkZCBkb2N1bWVudGF0aW9uXG4vLyAgYnkgdGhlIHRpbWUuLi5cblxudmFyICQkQW5pbWF0ZUpzUHJvdmlkZXIgPSBbJyRhbmltYXRlUHJvdmlkZXInLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJGFuaW1hdGVQcm92aWRlcikge1xuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckJEFuaW1hdGVSdW5uZXInLCAnJCRqcUxpdGUnLFxuICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkJEFuaW1hdGVSdW5uZXIsICAgJCRqcUxpdGUpIHtcblxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcbiAgICAgICAgIC8vICRhbmltYXRlSnMoZWxlbWVudCwgJ2VudGVyJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBjbGFzc2VzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYW5pbWF0aW9uQ2xvc2VkID0gZmFsc2U7XG5cbiAgICAgIC8vIHRoZSBgY2xhc3Nlc2AgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGlmIGl0IGlzIG5vdCB1c2VkXG4gICAgICAvLyB0aGVuIHRoZSBjbGFzc2VzIHdpbGwgYmUgcmVzb2x2ZWQgZnJvbSB0aGUgZWxlbWVudCdzIGNsYXNzTmFtZVxuICAgICAgLy8gcHJvcGVydHkgYXMgd2VsbCBhcyBvcHRpb25zLmFkZENsYXNzL29wdGlvbnMucmVtb3ZlQ2xhc3MuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiBpc09iamVjdChjbGFzc2VzKSkge1xuICAgICAgICBvcHRpb25zID0gY2xhc3NlcztcbiAgICAgICAgY2xhc3NlcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGlmICghY2xhc3Nlcykge1xuICAgICAgICBjbGFzc2VzID0gZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnO1xuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgIGNsYXNzZXMgKz0gJyAnICsgb3B0aW9ucy5hZGRDbGFzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgICAgIGNsYXNzZXMgKz0gJyAnICsgb3B0aW9ucy5yZW1vdmVDbGFzcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3Nlc1RvQWRkID0gb3B0aW9ucy5hZGRDbGFzcztcbiAgICAgIHZhciBjbGFzc2VzVG9SZW1vdmUgPSBvcHRpb25zLnJlbW92ZUNsYXNzO1xuXG4gICAgICAvLyB0aGUgbG9va3VwQW5pbWF0aW9ucyBmdW5jdGlvbiByZXR1cm5zIGEgc2VyaWVzIG9mIGFuaW1hdGlvbiBvYmplY3RzIHRoYXQgYXJlXG4gICAgICAvLyBtYXRjaGVkIHVwIHdpdGggb25lIG9yIG1vcmUgb2YgdGhlIENTUyBjbGFzc2VzLiBUaGVzZSBhbmltYXRpb24gb2JqZWN0cyBhcmVcbiAgICAgIC8vIGRlZmluZWQgdmlhIHRoZSBtb2R1bGUuYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIElmIG5vdGhpbmcgaXMgZGV0ZWN0ZWQgdGhlblxuICAgICAgLy8gd2UgZG9uJ3QgcmV0dXJuIGFueXRoaW5nIHdoaWNoIHRoZW4gbWFrZXMgJGFuaW1hdGlvbiBxdWVyeSB0aGUgbmV4dCBkcml2ZXIuXG4gICAgICB2YXIgYW5pbWF0aW9ucyA9IGxvb2t1cEFuaW1hdGlvbnMoY2xhc3Nlcyk7XG4gICAgICB2YXIgYmVmb3JlLCBhZnRlcjtcbiAgICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgICB2YXIgYWZ0ZXJGbiwgYmVmb3JlRm47XG4gICAgICAgIGlmIChldmVudCA9PT0gJ2xlYXZlJykge1xuICAgICAgICAgIGJlZm9yZUZuID0gJ2xlYXZlJztcbiAgICAgICAgICBhZnRlckZuID0gJ2FmdGVyTGVhdmUnOyAvLyBUT0RPKG1hdHNrbyk6IGdldCByaWQgb2YgdGhpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZUZuID0gJ2JlZm9yZScgKyBldmVudC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGV2ZW50LnN1YnN0cigxKTtcbiAgICAgICAgICBhZnRlckZuID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgIT09ICdlbnRlcicgJiYgZXZlbnQgIT09ICdtb3ZlJykge1xuICAgICAgICAgIGJlZm9yZSA9IHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBiZWZvcmVGbik7XG4gICAgICAgIH1cbiAgICAgICAgYWZ0ZXIgID0gcGFja2FnZUFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGFmdGVyRm4pO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBtYXRjaGluZyBhbmltYXRpb25zXG4gICAgICBpZiAoIWJlZm9yZSAmJiAhYWZ0ZXIpIHJldHVybjtcblxuICAgICAgZnVuY3Rpb24gYXBwbHlPcHRpb25zKCkge1xuICAgICAgICBvcHRpb25zLmRvbU9wZXJhdGlvbigpO1xuICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBhbmltYXRpb25DbG9zZWQgPSB0cnVlO1xuICAgICAgICBhcHBseU9wdGlvbnMoKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBydW5uZXI7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICQkd2lsbEFuaW1hdGU6IHRydWUsXG4gICAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHJ1bm5lcikge1xuICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHJ1bm5lcikge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG4gICAgICAgICAgdmFyIGNsb3NlQWN0aXZlQW5pbWF0aW9ucztcbiAgICAgICAgICB2YXIgY2hhaW4gPSBbXTtcblxuICAgICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgIGNoYWluLnB1c2goZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgY2xvc2VBY3RpdmVBbmltYXRpb25zID0gYmVmb3JlKGZuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYWluLnB1c2goZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgYXBwbHlPcHRpb25zKCk7XG4gICAgICAgICAgICAgIGZuKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcGx5T3B0aW9ucygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhZnRlcikge1xuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgICBjbG9zZUFjdGl2ZUFuaW1hdGlvbnMgPSBhZnRlcihmbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBydW5uZXIuc2V0SG9zdCh7XG4gICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbmRBbmltYXRpb25zKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZW5kQW5pbWF0aW9ucyh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5jaGFpbihjaGFpbiwgb25Db21wbGV0ZSk7XG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcblxuICAgICAgICAgIGZ1bmN0aW9uIG9uQ29tcGxldGUoc3VjY2Vzcykge1xuICAgICAgICAgICAgY2xvc2Uoc3VjY2Vzcyk7XG4gICAgICAgICAgICBydW5uZXIuY29tcGxldGUoc3VjY2Vzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZW5kQW5pbWF0aW9ucyhjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uQ2xvc2VkKSB7XG4gICAgICAgICAgICAgIChjbG9zZUFjdGl2ZUFuaW1hdGlvbnMgfHwgbm9vcCkoY2FuY2VsbGVkKTtcbiAgICAgICAgICAgICAgb25Db21wbGV0ZShjYW5jZWxsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZXhlY3V0ZUFuaW1hdGlvbkZuKGZuLCBlbGVtZW50LCBldmVudCwgb3B0aW9ucywgb25Eb25lKSB7XG4gICAgICAgIHZhciBhcmdzO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAgICAgY2FzZSAnYW5pbWF0ZSc6XG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIG9wdGlvbnMuZnJvbSwgb3B0aW9ucy50bywgb25Eb25lXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnc2V0Q2xhc3MnOlxuICAgICAgICAgICAgYXJncyA9IFtlbGVtZW50LCBjbGFzc2VzVG9BZGQsIGNsYXNzZXNUb1JlbW92ZSwgb25Eb25lXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnYWRkQ2xhc3MnOlxuICAgICAgICAgICAgYXJncyA9IFtlbGVtZW50LCBjbGFzc2VzVG9BZGQsIG9uRG9uZV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3JlbW92ZUNsYXNzJzpcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgY2xhc3Nlc1RvUmVtb3ZlLCBvbkRvbmVdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYXJncyA9IFtlbGVtZW50LCBvbkRvbmVdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzLnB1c2gob3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIHZhbHVlID0gZm4uYXBwbHkoZm4sIGFyZ3MpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZS5zdGFydCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3RhcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiAkJEFuaW1hdGVSdW5uZXIpIHtcbiAgICAgICAgICAgIHZhbHVlLmRvbmUob25Eb25lKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICAvLyBvcHRpb25hbCBvbkVuZCAvIG9uQ2FuY2VsIGNhbGxiYWNrXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGZuTmFtZSkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaSkge1xuICAgICAgICAgIHZhciBhbmltYXRpb24gPSBhbmlbZm5OYW1lXTtcbiAgICAgICAgICBpZiAoIWFuaW1hdGlvbikgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gbm90ZSB0aGF0IGFsbCBvZiB0aGVzZSBhbmltYXRpb25zIHdpbGwgcnVuIGluIHBhcmFsbGVsXG4gICAgICAgICAgb3BlcmF0aW9ucy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgICAgICAgIHZhciBlbmRQcm9ncmVzc0NiO1xuXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBvbkFuaW1hdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24ocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoZW5kUHJvZ3Jlc3NDYiB8fCBub29wKShyZWplY3RlZCk7XG4gICAgICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCFyZWplY3RlZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZW5kUHJvZ3Jlc3NDYiA9IGV4ZWN1dGVBbmltYXRpb25GbihhbmltYXRpb24sIGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbmNlbGxlZCA9IHJlc3VsdCA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGUoY2FuY2VsbGVkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb3BlcmF0aW9ucztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFja2FnZUFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGZuTmFtZSkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGZuTmFtZSk7XG4gICAgICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHZhciBhLCBiO1xuICAgICAgICAgIGlmIChmbk5hbWUgPT09ICdiZWZvcmVTZXRDbGFzcycpIHtcbiAgICAgICAgICAgIGEgPSBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsICdyZW1vdmVDbGFzcycsIG9wdGlvbnMsIGFuaW1hdGlvbnMsICdiZWZvcmVSZW1vdmVDbGFzcycpO1xuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2JlZm9yZUFkZENsYXNzJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdzZXRDbGFzcycpIHtcbiAgICAgICAgICAgIGEgPSBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsICdyZW1vdmVDbGFzcycsIG9wdGlvbnMsIGFuaW1hdGlvbnMsICdyZW1vdmVDbGFzcycpO1xuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2FkZENsYXNzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zLmNvbmNhdChhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zLmNvbmNhdChiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IGFkZCBkb2N1bWVudGF0aW9uXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBydW5uZXJzID0gW107XG4gICAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3JFYWNoKG9wZXJhdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGVGbikge1xuICAgICAgICAgICAgICBydW5uZXJzLnB1c2goYW5pbWF0ZUZuKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJ1bm5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAkJEFuaW1hdGVSdW5uZXIuYWxsKHJ1bm5lcnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZuKHJlamVjdCkge1xuICAgICAgICAgICAgZm9yRWFjaChydW5uZXJzLCBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHJ1bm5lci5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvb2t1cEFuaW1hdGlvbnMoY2xhc3Nlcykge1xuICAgICAgY2xhc3NlcyA9IGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXSwgZmxhZ01hcCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrbGFzcyA9IGNsYXNzZXNbaV0sXG4gICAgICAgICAgICBhbmltYXRpb25GYWN0b3J5ID0gJGFuaW1hdGVQcm92aWRlci4kJHJlZ2lzdGVyZWRBbmltYXRpb25zW2tsYXNzXTtcbiAgICAgICAgaWYgKGFuaW1hdGlvbkZhY3RvcnkgJiYgIWZsYWdNYXBba2xhc3NdKSB7XG4gICAgICAgICAgbWF0Y2hlcy5wdXNoKCRpbmplY3Rvci5nZXQoYW5pbWF0aW9uRmFjdG9yeSkpO1xuICAgICAgICAgIGZsYWdNYXBba2xhc3NdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICB9XTtcbn1dO1xuXG52YXIgJCRBbmltYXRlSnNEcml2ZXJQcm92aWRlciA9IFsnJCRhbmltYXRpb25Qcm92aWRlcicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigkJGFuaW1hdGlvblByb3ZpZGVyKSB7XG4gICQkYW5pbWF0aW9uUHJvdmlkZXIuZHJpdmVycy5wdXNoKCckJGFuaW1hdGVKc0RyaXZlcicpO1xuICB0aGlzLiRnZXQgPSBbJyQkYW5pbWF0ZUpzJywgJyQkQW5pbWF0ZVJ1bm5lcicsIGZ1bmN0aW9uKCQkYW5pbWF0ZUpzLCAkJEFuaW1hdGVSdW5uZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdERyaXZlckZuKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgIGlmIChhbmltYXRpb25EZXRhaWxzLmZyb20gJiYgYW5pbWF0aW9uRGV0YWlscy50bykge1xuICAgICAgICB2YXIgZnJvbUFuaW1hdGlvbiA9IHByZXBhcmVBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscy5mcm9tKTtcbiAgICAgICAgdmFyIHRvQW5pbWF0aW9uID0gcHJlcGFyZUFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzLnRvKTtcbiAgICAgICAgaWYgKCFmcm9tQW5pbWF0aW9uICYmICF0b0FuaW1hdGlvbikgcmV0dXJuO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvblJ1bm5lcnMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGZyb21BbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKGZyb21BbmltYXRpb24uc3RhcnQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0b0FuaW1hdGlvbikge1xuICAgICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2godG9BbmltYXRpb24uc3RhcnQoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5hbGwoYW5pbWF0aW9uUnVubmVycywgZG9uZSk7XG5cbiAgICAgICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgICAgICAgZW5kOiBlbmRGbkZhY3RvcnkoKSxcbiAgICAgICAgICAgICAgY2FuY2VsOiBlbmRGbkZhY3RvcnkoKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVuZEZuRmFjdG9yeSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvckVhY2goYW5pbWF0aW9uUnVubmVycywgZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IHdlIGNhbm5vdCBjYW5jZWwgYW5pbWF0aW9ucyBmb3IgZ3JvdXBzIGp1c3QgeWV0LiAxLjUrXG4gICAgICAgICAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZShzdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogbWFrZSBzdXJlIHRvIGNoZWNrIGZvciBncm91cGVkIGFuaW1hdGlvbnMgYW5kIGRlbGVnYXRlIGRvd24gdG8gbm9ybWFsIGFuaW1hdGlvbnNcbiAgICAgIHZhciBlbGVtZW50ID0gYW5pbWF0aW9uRGV0YWlscy5lbGVtZW50O1xuICAgICAgdmFyIGV2ZW50ID0gYW5pbWF0aW9uRGV0YWlscy5ldmVudDtcbiAgICAgIHZhciBvcHRpb25zID0gYW5pbWF0aW9uRGV0YWlscy5vcHRpb25zO1xuICAgICAgdmFyIGNsYXNzZXMgPSBhbmltYXRpb25EZXRhaWxzLmNsYXNzZXM7XG4gICAgICByZXR1cm4gJCRhbmltYXRlSnMoZWxlbWVudCwgZXZlbnQsIGNsYXNzZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfV07XG59XTtcblxudmFyIE5HX0FOSU1BVEVfQVRUUl9OQU1FID0gJ2RhdGEtbmctYW5pbWF0ZSc7XG52YXIgTkdfQU5JTUFURV9QSU5fREFUQSA9ICckbmdBbmltYXRlUGluJztcbnZhciAkJEFuaW1hdGVRdWV1ZVByb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgLyoqIEB0aGlzICovIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcbiAgdmFyIFBSRV9ESUdFU1RfU1RBVEUgPSAxO1xuICB2YXIgUlVOTklOR19TVEFURSA9IDI7XG4gIHZhciBPTkVfU1BBQ0UgPSAnICc7XG5cbiAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcyA9IHtcbiAgICBza2lwOiBbXSxcbiAgICBjYW5jZWw6IFtdLFxuICAgIGpvaW46IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZVRydXRoeUNzc0NsYXNzTWFwKGNsYXNzU3RyaW5nKSB7XG4gICAgaWYgKCFjbGFzc1N0cmluZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBjbGFzc1N0cmluZy5zcGxpdChPTkVfU1BBQ0UpO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yRWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIG1hcFtrZXldID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzTWF0Y2hpbmdDbGFzc2VzKG5ld0NsYXNzU3RyaW5nLCBjdXJyZW50Q2xhc3NTdHJpbmcpIHtcbiAgICBpZiAobmV3Q2xhc3NTdHJpbmcgJiYgY3VycmVudENsYXNzU3RyaW5nKSB7XG4gICAgICB2YXIgY3VycmVudENsYXNzTWFwID0gbWFrZVRydXRoeUNzc0NsYXNzTWFwKGN1cnJlbnRDbGFzc1N0cmluZyk7XG4gICAgICByZXR1cm4gbmV3Q2xhc3NTdHJpbmcuc3BsaXQoT05FX1NQQUNFKS5zb21lKGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudENsYXNzTWFwW2NsYXNzTmFtZV07XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0FsbG93ZWQocnVsZVR5cGUsIGN1cnJlbnRBbmltYXRpb24sIHByZXZpb3VzQW5pbWF0aW9uKSB7XG4gICAgcmV0dXJuIHJ1bGVzW3J1bGVUeXBlXS5zb21lKGZ1bmN0aW9uKGZuKSB7XG4gICAgICByZXR1cm4gZm4oY3VycmVudEFuaW1hdGlvbiwgcHJldmlvdXNBbmltYXRpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQW5pbWF0aW9uQ2xhc3NlcyhhbmltYXRpb24sIGFuZCkge1xuICAgIHZhciBhID0gKGFuaW1hdGlvbi5hZGRDbGFzcyB8fCAnJykubGVuZ3RoID4gMDtcbiAgICB2YXIgYiA9IChhbmltYXRpb24ucmVtb3ZlQ2xhc3MgfHwgJycpLmxlbmd0aCA+IDA7XG4gICAgcmV0dXJuIGFuZCA/IGEgJiYgYiA6IGEgfHwgYjtcbiAgfVxuXG4gIHJ1bGVzLmpvaW4ucHVzaChmdW5jdGlvbihuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyBpZiB0aGUgbmV3IGFuaW1hdGlvbiBpcyBjbGFzcy1iYXNlZCB0aGVuIHdlIGNhbiBqdXN0IHRhY2sgdGhhdCBvblxuICAgIHJldHVybiAhbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgaGFzQW5pbWF0aW9uQ2xhc3NlcyhuZXdBbmltYXRpb24pO1xuICB9KTtcblxuICBydWxlcy5za2lwLnB1c2goZnVuY3Rpb24obmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBhbmltYXRlIGFueXRoaW5nIGlmIG5vIGNsYXNzZXMgYXJlIGJlaW5nIGFkZGVkIGFuZFxuICAgIC8vIHRoZXJlIGlzIG5vIHN0cnVjdHVyYWwgYW5pbWF0aW9uIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWRcbiAgICByZXR1cm4gIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmICFoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbik7XG4gIH0pO1xuXG4gIHJ1bGVzLnNraXAucHVzaChmdW5jdGlvbihuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyB3aHkgc2hvdWxkIHdlIHRyaWdnZXIgYSBuZXcgc3RydWN0dXJhbCBhbmltYXRpb24gaWYgdGhlIGVsZW1lbnQgd2lsbFxuICAgIC8vIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIGFueXdheT9cbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5ldmVudCA9PT0gJ2xlYXZlJyAmJiBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcbiAgfSk7XG5cbiAgcnVsZXMuc2tpcC5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIG9uZ29pbmcgY3VycmVudCBhbmltYXRpb24gdGhlbiBkb24ndCBldmVuIGJvdGhlciBydW5uaW5nIHRoZSBjbGFzcy1iYXNlZCBhbmltYXRpb25cbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmIGN1cnJlbnRBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUgJiYgIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xuICB9KTtcblxuICBydWxlcy5jYW5jZWwucHVzaChmdW5jdGlvbihuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyB0aGVyZSBjYW4gbmV2ZXIgYmUgdHdvIHN0cnVjdHVyYWwgYW5pbWF0aW9ucyBydW5uaW5nIGF0IHRoZSBzYW1lIHRpbWVcbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmIG5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xuICB9KTtcblxuICBydWxlcy5jYW5jZWwucHVzaChmdW5jdGlvbihuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyBpZiB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIGlzIGFscmVhZHkgcnVubmluZywgYnV0IHRoZSBuZXcgYW5pbWF0aW9uIHdpbGxcbiAgICAvLyBiZSB0cmlnZ2VyZWQsIGJ1dCB0aGUgbmV3IGFuaW1hdGlvbiBpcyBzdHJ1Y3R1cmFsXG4gICAgcmV0dXJuIGN1cnJlbnRBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUgJiYgbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLmNhbmNlbC5wdXNoKGZ1bmN0aW9uKG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIGNhbmNlbCB0aGUgYW5pbWF0aW9uIGlmIGNsYXNzZXMgYWRkZWQgLyByZW1vdmVkIGluIGJvdGggYW5pbWF0aW9uIGNhbmNlbCBlYWNoIG90aGVyIG91dCxcbiAgICAvLyBidXQgb25seSBpZiB0aGUgY3VycmVudCBhbmltYXRpb24gaXNuJ3Qgc3RydWN0dXJhbFxuXG4gICAgaWYgKGN1cnJlbnRBbmltYXRpb24uc3RydWN0dXJhbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIG5BID0gbmV3QW5pbWF0aW9uLmFkZENsYXNzO1xuICAgIHZhciBuUiA9IG5ld0FuaW1hdGlvbi5yZW1vdmVDbGFzcztcbiAgICB2YXIgY0EgPSBjdXJyZW50QW5pbWF0aW9uLmFkZENsYXNzO1xuICAgIHZhciBjUiA9IGN1cnJlbnRBbmltYXRpb24ucmVtb3ZlQ2xhc3M7XG5cbiAgICAvLyBlYXJseSBkZXRlY3Rpb24gdG8gc2F2ZSB0aGUgZ2xvYmFsIENQVSBzaG9ydGFnZSA6KVxuICAgIGlmICgoaXNVbmRlZmluZWQobkEpICYmIGlzVW5kZWZpbmVkKG5SKSkgfHwgKGlzVW5kZWZpbmVkKGNBKSAmJiBpc1VuZGVmaW5lZChjUikpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc01hdGNoaW5nQ2xhc3NlcyhuQSwgY1IpIHx8IGhhc01hdGNoaW5nQ2xhc3NlcyhuUiwgY0EpO1xuICB9KTtcblxuICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRkb2N1bWVudCcsICckJE1hcCcsXG4gICAgICAgICAgICAgICAnJCRhbmltYXRpb24nLCAnJCRBbmltYXRlUnVubmVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJCRqcUxpdGUnLCAnJCRmb3JjZVJlZmxvdycsXG4gICAgICAgICAgICAgICAnJCRpc0RvY3VtZW50SGlkZGVuJyxcbiAgICAgICBmdW5jdGlvbigkJHJBRiwgICAkcm9vdFNjb3BlLCAgICRyb290RWxlbWVudCwgICAkZG9jdW1lbnQsICAgJCRNYXAsXG4gICAgICAgICAgICAgICAgJCRhbmltYXRpb24sICAgJCRBbmltYXRlUnVubmVyLCAgICR0ZW1wbGF0ZVJlcXVlc3QsICAgJCRqcUxpdGUsICAgJCRmb3JjZVJlZmxvdyxcbiAgICAgICAgICAgICAgICAkJGlzRG9jdW1lbnRIaWRkZW4pIHtcblxuICAgIHZhciBhY3RpdmVBbmltYXRpb25zTG9va3VwID0gbmV3ICQkTWFwKCk7XG4gICAgdmFyIGRpc2FibGVkRWxlbWVudHNMb29rdXAgPSBuZXcgJCRNYXAoKTtcbiAgICB2YXIgYW5pbWF0aW9uc0VuYWJsZWQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcG9zdERpZ2VzdFRhc2tGYWN0b3J5KCkge1xuICAgICAgdmFyIHBvc3REaWdlc3RDYWxsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihmbikge1xuICAgICAgICAvLyB3ZSBvbmx5IGlzc3VlIGEgY2FsbCB0byBwb3N0RGlnZXN0IGJlZm9yZVxuICAgICAgICAvLyBpdCBoYXMgZmlyc3QgcGFzc2VkLiBUaGlzIHByZXZlbnRzIGFueSBjYWxsYmFja3NcbiAgICAgICAgLy8gZnJvbSBub3QgZmlyaW5nIG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkXG4gICAgICAgIC8vIHNpbmNlIGl0IHdpbGwgYmUgb3V0IG9mIHRoZSBkaWdlc3QgY3ljbGUuXG4gICAgICAgIGlmIChwb3N0RGlnZXN0Q2FsbGVkKSB7XG4gICAgICAgICAgZm4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXYWl0IHVudGlsIGFsbCBkaXJlY3RpdmUgYW5kIHJvdXRlLXJlbGF0ZWQgdGVtcGxhdGVzIGFyZSBkb3dubG9hZGVkIGFuZFxuICAgIC8vIGNvbXBpbGVkLiBUaGUgJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0cyB2YXJpYWJsZSBrZWVwcyB0cmFjayBvZlxuICAgIC8vIGFsbCBvZiB0aGUgcmVtb3RlIHRlbXBsYXRlcyBiZWluZyBjdXJyZW50bHkgZG93bmxvYWRlZC4gSWYgdGhlcmUgYXJlIG5vXG4gICAgLy8gdGVtcGxhdGVzIGN1cnJlbnRseSBkb3dubG9hZGluZyB0aGVuIHRoZSB3YXRjaGVyIHdpbGwgc3RpbGwgZmlyZSBhbnl3YXkuXG4gICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKFxuICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiAkdGVtcGxhdGVSZXF1ZXN0LnRvdGFsUGVuZGluZ1JlcXVlc3RzID09PSAwOyB9LFxuICAgICAgZnVuY3Rpb24oaXNFbXB0eSkge1xuICAgICAgICBpZiAoIWlzRW1wdHkpIHJldHVybjtcbiAgICAgICAgZGVyZWdpc3RlcldhdGNoKCk7XG5cbiAgICAgICAgLy8gTm93IHRoYXQgYWxsIHRlbXBsYXRlcyBoYXZlIGJlZW4gZG93bmxvYWRlZCwgJGFuaW1hdGUgd2lsbCB3YWl0IHVudGlsXG4gICAgICAgIC8vIHRoZSBwb3N0IGRpZ2VzdCBxdWV1ZSBpcyBlbXB0eSBiZWZvcmUgZW5hYmxpbmcgYW5pbWF0aW9ucy4gQnkgaGF2aW5nIHR3b1xuICAgICAgICAvLyBjYWxscyB0byAkcG9zdERpZ2VzdCBjYWxscyB3ZSBjYW4gZW5zdXJlIHRoYXQgdGhlIGZsYWcgaXMgZW5hYmxlZCBhdCB0aGVcbiAgICAgICAgLy8gdmVyeSBlbmQgb2YgdGhlIHBvc3QgZGlnZXN0IHF1ZXVlLiBTaW5jZSBhbGwgb2YgdGhlIGFuaW1hdGlvbnMgaW4gJGFuaW1hdGVcbiAgICAgICAgLy8gdXNlICRwb3N0RGlnZXN0LCBpdCdzIGltcG9ydGFudCB0aGF0IHRoZSBjb2RlIGJlbG93IGV4ZWN1dGVzIGF0IHRoZSBlbmQuXG4gICAgICAgIC8vIFRoaXMgYmFzaWNhbGx5IG1lYW5zIHRoYXQgdGhlIHBhZ2UgaXMgZnVsbHkgZG93bmxvYWRlZCBhbmQgY29tcGlsZWQgYmVmb3JlXG4gICAgICAgIC8vIGFueSBhbmltYXRpb25zIGFyZSB0cmlnZ2VyZWQuXG4gICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gd2UgY2hlY2sgZm9yIG51bGwgZGlyZWN0bHkgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGFwcGxpY2F0aW9uIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAvLyAuZW5hYmxlZCgpIHdpdGggd2hhdGV2ZXIgYXJndW1lbnRzIHRoYXQgaXQgcHJvdmlkZWQgaXQgd2l0aFxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbnNFbmFibGVkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHZhciBjYWxsYmFja1JlZ2lzdHJ5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhlIGNsYXNzTmFtZUZpbHRlciBpcyBzZXQgZHVyaW5nIHRoZSBwcm92aWRlci9jb25maWdcbiAgICAvLyBzdGFnZSB0aGVyZWZvcmUgd2UgY2FuIG9wdGltaXplIGhlcmUgYW5kIHNldHVwIGEgaGVscGVyIGZ1bmN0aW9uXG4gICAgdmFyIGNsYXNzTmFtZUZpbHRlciA9ICRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKCk7XG4gICAgdmFyIGlzQW5pbWF0YWJsZUNsYXNzTmFtZSA9ICFjbGFzc05hbWVGaWx0ZXJcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lRmlsdGVyLnRlc3QoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgYW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm4gbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGFuaW1hdGlvbiwge30pO1xuICAgIH1cblxuICAgIC8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG4gICAgdmFyIGNvbnRhaW5zID0gd2luZG93Lk5vZGUucHJvdG90eXBlLmNvbnRhaW5zIHx8IC8qKiBAdGhpcyAqLyBmdW5jdGlvbihhcmcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICByZXR1cm4gdGhpcyA9PT0gYXJnIHx8ICEhKHRoaXMuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYXJnKSAmIDE2KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZmluZENhbGxiYWNrcyh0YXJnZXRQYXJlbnROb2RlLCB0YXJnZXROb2RlLCBldmVudCkge1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIHZhciBlbnRyaWVzID0gY2FsbGJhY2tSZWdpc3RyeVtldmVudF07XG4gICAgICBpZiAoZW50cmllcykge1xuICAgICAgICBmb3JFYWNoKGVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgaWYgKGNvbnRhaW5zLmNhbGwoZW50cnkubm9kZSwgdGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChlbnRyeS5jYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIGlmIChldmVudCA9PT0gJ2xlYXZlJyAmJiBjb250YWlucy5jYWxsKGVudHJ5Lm5vZGUsIHRhcmdldFBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICBtYXRjaGVzLnB1c2goZW50cnkuY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlckZyb21SZWdpc3RyeShsaXN0LCBtYXRjaENvbnRhaW5lciwgbWF0Y2hDYWxsYmFjaykge1xuICAgICAgdmFyIGNvbnRhaW5lck5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUobWF0Y2hDb250YWluZXIpO1xuICAgICAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgIHZhciBpc01hdGNoID0gZW50cnkubm9kZSA9PT0gY29udGFpbmVyTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFtYXRjaENhbGxiYWNrIHx8IGVudHJ5LmNhbGxiYWNrID09PSBtYXRjaENhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICFpc01hdGNoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cEV2ZW50TGlzdGVuZXJzKHBoYXNlLCBub2RlKSB7XG4gICAgICBpZiAocGhhc2UgPT09ICdjbG9zZScgJiYgIW5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYXR0YWNoZWQgdG8gYSBwYXJlbnROb2RlLCBpdCBoYXMgYmVlbiByZW1vdmVkIGJ5XG4gICAgICAgIC8vIHRoZSBkb21PcGVyYXRpb24sIGFuZCB3ZSBjYW4gc2FmZWx5IHJlbW92ZSB0aGUgZXZlbnQgY2FsbGJhY2tzXG4gICAgICAgICRhbmltYXRlLm9mZihub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgJGFuaW1hdGUgPSB7XG4gICAgICBvbjogZnVuY3Rpb24oZXZlbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgY2FsbGJhY2tSZWdpc3RyeVtldmVudF0gPSBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XSB8fCBbXTtcbiAgICAgICAgY2FsbGJhY2tSZWdpc3RyeVtldmVudF0ucHVzaCh7XG4gICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYWxsYmFjayB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgIGpxTGl0ZShjb250YWluZXIpLm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhbmltYXRpb25EZXRhaWxzID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSk7XG5cbiAgICAgICAgICBpZiAoIWFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gYW5pbWF0aW9uIG9uZ29pbmcsIHRoZSBjYWxsYmFjayBjYWxsaW5nIGNvZGUgd2lsbCByZW1vdmVcbiAgICAgICAgICAgIC8vIHRoZSBldmVudCBsaXN0ZW5lcnMuIElmIHdlJ2QgcmVtb3ZlIGhlcmUsIHRoZSBjYWxsYmFja3Mgd291bGQgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgLy8gYmVmb3JlIHRoZSBhbmltYXRpb24gZW5kc1xuICAgICAgICAgICAgJGFuaW1hdGUub2ZmKGV2ZW50LCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgb2ZmOiBmdW5jdGlvbihldmVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiAhaXNTdHJpbmcoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgIGNvbnRhaW5lciA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICBmb3IgKHZhciBldmVudFR5cGUgaW4gY2FsbGJhY2tSZWdpc3RyeSkge1xuICAgICAgICAgICAgY2FsbGJhY2tSZWdpc3RyeVtldmVudFR5cGVdID0gZmlsdGVyRnJvbVJlZ2lzdHJ5KGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRUeXBlXSwgY29udGFpbmVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW50cmllcyA9IGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdO1xuICAgICAgICBpZiAoIWVudHJpZXMpIHJldHVybjtcblxuICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBmaWx0ZXJGcm9tUmVnaXN0cnkoZW50cmllcywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICBwaW46IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgYXNzZXJ0QXJnKGlzRWxlbWVudChlbGVtZW50KSwgJ2VsZW1lbnQnLCAnbm90IGFuIGVsZW1lbnQnKTtcbiAgICAgICAgYXNzZXJ0QXJnKGlzRWxlbWVudChwYXJlbnRFbGVtZW50KSwgJ3BhcmVudEVsZW1lbnQnLCAnbm90IGFuIGVsZW1lbnQnKTtcbiAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfUElOX0RBVEEsIHBhcmVudEVsZW1lbnQpO1xuICAgICAgfSxcblxuICAgICAgcHVzaDogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGRvbU9wZXJhdGlvbikge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24gPSBkb21PcGVyYXRpb247XG4gICAgICAgIHJldHVybiBxdWV1ZUFuaW1hdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvLyB0aGlzIG1ldGhvZCBoYXMgZm91ciBzaWduYXR1cmVzOlxuICAgICAgLy8gICgpIC0gZ2xvYmFsIGdldHRlclxuICAgICAgLy8gIChib29sKSAtIGdsb2JhbCBzZXR0ZXJcbiAgICAgIC8vICAoZWxlbWVudCkgLSBlbGVtZW50IGdldHRlclxuICAgICAgLy8gIChlbGVtZW50LCBib29sKSAtIGVsZW1lbnQgc2V0dGVyPEYzNz5cbiAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGJvb2wpIHtcbiAgICAgICAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgICAgICBpZiAoYXJnQ291bnQgPT09IDApIHtcbiAgICAgICAgICAvLyAoKSAtIEdsb2JhbCBnZXR0ZXJcbiAgICAgICAgICBib29sID0gISFhbmltYXRpb25zRW5hYmxlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaGFzRWxlbWVudCA9IGlzRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIGlmICghaGFzRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gKGJvb2wpIC0gR2xvYmFsIHNldHRlclxuICAgICAgICAgICAgYm9vbCA9IGFuaW1hdGlvbnNFbmFibGVkID0gISFlbGVtZW50O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmIChhcmdDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyAoZWxlbWVudCkgLSBFbGVtZW50IGdldHRlclxuICAgICAgICAgICAgICBib29sID0gIWRpc2FibGVkRWxlbWVudHNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gKGVsZW1lbnQsIGJvb2wpIC0gRWxlbWVudCBzZXR0ZXJcbiAgICAgICAgICAgICAgZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5zZXQobm9kZSwgIWJvb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib29sO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gJGFuaW1hdGU7XG5cbiAgICBmdW5jdGlvbiBxdWV1ZUFuaW1hdGlvbihvcmlnaW5hbEVsZW1lbnQsIGV2ZW50LCBpbml0aWFsT3B0aW9ucykge1xuICAgICAgLy8gd2UgYWx3YXlzIG1ha2UgYSBjb3B5IG9mIHRoZSBvcHRpb25zIHNpbmNlXG4gICAgICAvLyB0aGVyZSBzaG91bGQgbmV2ZXIgYmUgYW55IHNpZGUgZWZmZWN0cyBvblxuICAgICAgLy8gdGhlIGlucHV0IGRhdGEgd2hlbiBydW5uaW5nIGAkYW5pbWF0ZUNzc2AuXG4gICAgICB2YXIgb3B0aW9ucyA9IGNvcHkoaW5pdGlhbE9wdGlvbnMpO1xuXG4gICAgICB2YXIgZWxlbWVudCA9IHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChvcmlnaW5hbEVsZW1lbnQpO1xuICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgdmFyIHBhcmVudE5vZGUgPSBub2RlICYmIG5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAvLyB3ZSBjcmVhdGUgYSBmYWtlIHJ1bm5lciB3aXRoIGEgd29ya2luZyBwcm9taXNlLlxuICAgICAgLy8gVGhlc2UgbWV0aG9kcyB3aWxsIGJlY29tZSBhdmFpbGFibGUgYWZ0ZXIgdGhlIGRpZ2VzdCBoYXMgcGFzc2VkXG4gICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xuXG4gICAgICAvLyB0aGlzIGlzIHVzZWQgdG8gdHJpZ2dlciBjYWxsYmFja3MgaW4gcG9zdERpZ2VzdCBtb2RlXG4gICAgICB2YXIgcnVuSW5OZXh0UG9zdERpZ2VzdE9yTm93ID0gcG9zdERpZ2VzdFRhc2tGYWN0b3J5KCk7XG5cbiAgICAgIGlmIChpc0FycmF5KG9wdGlvbnMuYWRkQ2xhc3MpKSB7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBvcHRpb25zLmFkZENsYXNzLmpvaW4oJyAnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MgJiYgIWlzU3RyaW5nKG9wdGlvbnMuYWRkQ2xhc3MpKSB7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheShvcHRpb25zLnJlbW92ZUNsYXNzKSkge1xuICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gb3B0aW9ucy5yZW1vdmVDbGFzcy5qb2luKCcgJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzICYmICFpc1N0cmluZyhvcHRpb25zLnJlbW92ZUNsYXNzKSkge1xuICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSAmJiAhaXNPYmplY3Qob3B0aW9ucy5mcm9tKSkge1xuICAgICAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50byAmJiAhaXNPYmplY3Qob3B0aW9ucy50bykpIHtcbiAgICAgICAgb3B0aW9ucy50byA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZXJlIGFyZSBzaXR1YXRpb25zIHdoZXJlIGEgZGlyZWN0aXZlIGlzc3VlcyBhbiBhbmltYXRpb24gZm9yXG4gICAgICAvLyBhIGpxTGl0ZSB3cmFwcGVyIHRoYXQgY29udGFpbnMgb25seSBjb21tZW50IG5vZGVzLi4uIElmIHRoaXNcbiAgICAgIC8vIGhhcHBlbnMgdGhlbiB0aGVyZSBpcyBubyB3YXkgd2UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uXG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IFtub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzc10uam9pbignICcpO1xuICAgICAgaWYgKCFpc0FuaW1hdGFibGVDbGFzc05hbWUoY2xhc3NOYW1lKSkge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gWydlbnRlcicsICdtb3ZlJywgJ2xlYXZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcblxuICAgICAgdmFyIGRvY3VtZW50SGlkZGVuID0gJCRpc0RvY3VtZW50SGlkZGVuKCk7XG5cbiAgICAgIC8vIHRoaXMgaXMgYSBoYXJkIGRpc2FibGUgb2YgYWxsIGFuaW1hdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbiBvciBvblxuICAgICAgLy8gdGhlIGVsZW1lbnQgaXRzZWxmLCB0aGVyZWZvcmUgIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29udGludWUgZnVydGhlclxuICAgICAgLy8gcGFzdCB0aGlzIHBvaW50IGlmIG5vdCBlbmFibGVkXG4gICAgICAvLyBBbmltYXRpb25zIGFyZSBhbHNvIGRpc2FibGVkIGlmIHRoZSBkb2N1bWVudCBpcyBjdXJyZW50bHkgaGlkZGVuIChwYWdlIGlzIG5vdCB2aXNpYmxlXG4gICAgICAvLyB0byB0aGUgdXNlciksIGJlY2F1c2UgYnJvd3NlcnMgc2xvdyBkb3duIG9yIGRvIG5vdCBmbHVzaCBjYWxscyB0byByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgIHZhciBza2lwQW5pbWF0aW9ucyA9ICFhbmltYXRpb25zRW5hYmxlZCB8fCBkb2N1bWVudEhpZGRlbiB8fCBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChub2RlKTtcbiAgICAgIHZhciBleGlzdGluZ0FuaW1hdGlvbiA9ICghc2tpcEFuaW1hdGlvbnMgJiYgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSkpIHx8IHt9O1xuICAgICAgdmFyIGhhc0V4aXN0aW5nQW5pbWF0aW9uID0gISFleGlzdGluZ0FuaW1hdGlvbi5zdGF0ZTtcblxuICAgICAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgaW4gdHJhdmVyc2luZyB0aGUgc2FtZSBjb2xsZWN0aW9uIG9mIHBhcmVudCBhbmNlc3RvcnMgaWYgYSBmb2xsb3d1cFxuICAgICAgLy8gYW5pbWF0aW9uIHdpbGwgYmUgcnVuIG9uIHRoZSBzYW1lIGVsZW1lbnQgdGhhdCBhbHJlYWR5IGRpZCBhbGwgdGhhdCBjaGVja2luZyB3b3JrXG4gICAgICBpZiAoIXNraXBBbmltYXRpb25zICYmICghaGFzRXhpc3RpbmdBbmltYXRpb24gfHwgZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgIT09IFBSRV9ESUdFU1RfU1RBVEUpKSB7XG4gICAgICAgIHNraXBBbmltYXRpb25zID0gIWFyZUFuaW1hdGlvbnNBbGxvd2VkKG5vZGUsIHBhcmVudE5vZGUsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNraXBBbmltYXRpb25zKSB7XG4gICAgICAgIC8vIENhbGxiYWNrcyBzaG91bGQgZmlyZSBldmVuIGlmIHRoZSBkb2N1bWVudCBpcyBoaWRkZW4gKHJlZ3Jlc3Npb24gZml4IGZvciBpc3N1ZSAjMTQxMjApXG4gICAgICAgIGlmIChkb2N1bWVudEhpZGRlbikgbm90aWZ5UHJvZ3Jlc3MocnVubmVyLCBldmVudCwgJ3N0YXJ0Jyk7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIGlmIChkb2N1bWVudEhpZGRlbikgbm90aWZ5UHJvZ3Jlc3MocnVubmVyLCBldmVudCwgJ2Nsb3NlJyk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cnVjdHVyYWwpIHtcbiAgICAgICAgY2xvc2VDaGlsZEFuaW1hdGlvbnMobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdBbmltYXRpb24gPSB7XG4gICAgICAgIHN0cnVjdHVyYWw6IGlzU3RydWN0dXJhbCxcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBhZGRDbGFzczogb3B0aW9ucy5hZGRDbGFzcyxcbiAgICAgICAgcmVtb3ZlQ2xhc3M6IG9wdGlvbnMucmVtb3ZlQ2xhc3MsXG4gICAgICAgIGNsb3NlOiBjbG9zZSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgcnVubmVyOiBydW5uZXJcbiAgICAgIH07XG5cbiAgICAgIGlmIChoYXNFeGlzdGluZ0FuaW1hdGlvbikge1xuICAgICAgICB2YXIgc2tpcEFuaW1hdGlvbkZsYWcgPSBpc0FsbG93ZWQoJ3NraXAnLCBuZXdBbmltYXRpb24sIGV4aXN0aW5nQW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKHNraXBBbmltYXRpb25GbGFnKSB7XG4gICAgICAgICAgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFKSB7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGV4aXN0aW5nQW5pbWF0aW9uLCBuZXdBbmltYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQW5pbWF0aW9uLnJ1bm5lcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbmNlbEFuaW1hdGlvbkZsYWcgPSBpc0FsbG93ZWQoJ2NhbmNlbCcsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xuICAgICAgICBpZiAoY2FuY2VsQW5pbWF0aW9uRmxhZykge1xuICAgICAgICAgIGlmIChleGlzdGluZ0FuaW1hdGlvbi5zdGF0ZSA9PT0gUlVOTklOR19TVEFURSkge1xuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGVuZCB0aGUgYW5pbWF0aW9uIHJpZ2h0IGF3YXkgYW5kIGl0IGlzIHNhZmVcbiAgICAgICAgICAgIC8vIHRvIGRvIHNvIHNpbmNlIHRoZSBhbmltYXRpb24gaXMgYWxyZWFkeSBydW5uaW5nIGFuZCB0aGVcbiAgICAgICAgICAgIC8vIHJ1bm5lciBjYWxsYmFjayBjb2RlIHdpbGwgcnVuIGluIGFzeW5jXG4gICAgICAgICAgICBleGlzdGluZ0FuaW1hdGlvbi5ydW5uZXIuZW5kKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChleGlzdGluZ0FuaW1hdGlvbi5zdHJ1Y3R1cmFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgdGhlIGFuaW1hdGlvbiBpcyBxdWV1ZWQgaW50byBhIGRpZ2VzdCwgYnV0XG4gICAgICAgICAgICAvLyBoYXNuJ3Qgc3RhcnRlZCB5ZXQuIFRoZXJlZm9yZSBpdCBpcyBzYWZlIHRvIHJ1biB0aGUgY2xvc2VcbiAgICAgICAgICAgIC8vIG1ldGhvZCB3aGljaCB3aWxsIGNhbGwgdGhlIHJ1bm5lciBtZXRob2RzIGluIGFzeW5jLlxuICAgICAgICAgICAgZXhpc3RpbmdBbmltYXRpb24uY2xvc2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIG1lcmdlIHRoZSBuZXcgYW5pbWF0aW9uIG9wdGlvbnMgaW50byBleGlzdGluZyBhbmltYXRpb24gb3B0aW9uc1xuICAgICAgICAgICAgbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGV4aXN0aW5nQW5pbWF0aW9uLCBuZXdBbmltYXRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBbmltYXRpb24ucnVubmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhIGpvaW5lZCBhbmltYXRpb24gbWVhbnMgdGhhdCB0aGlzIGFuaW1hdGlvbiB3aWxsIHRha2Ugb3ZlciB0aGUgZXhpc3Rpbmcgb25lXG4gICAgICAgICAgLy8gc28gYW4gZXhhbXBsZSB3b3VsZCBpbnZvbHZlIGEgbGVhdmUgYW5pbWF0aW9uIHRha2luZyBvdmVyIGFuIGVudGVyLiBUaGVuIHdoZW5cbiAgICAgICAgICAvLyB0aGUgcG9zdERpZ2VzdCBraWNrcyBpbiB0aGUgZW50ZXIgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAgICAgIHZhciBqb2luQW5pbWF0aW9uRmxhZyA9IGlzQWxsb3dlZCgnam9pbicsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xuICAgICAgICAgIGlmIChqb2luQW5pbWF0aW9uRmxhZykge1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFKSB7XG4gICAgICAgICAgICAgIG5vcm1hbGl6ZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgbmV3QW5pbWF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFwcGx5R2VuZXJhdGVkUHJlcGFyYXRpb25DbGFzc2VzKGVsZW1lbnQsIGlzU3RydWN0dXJhbCA/IGV2ZW50IDogbnVsbCwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgZXZlbnQgPSBuZXdBbmltYXRpb24uZXZlbnQgPSBleGlzdGluZ0FuaW1hdGlvbi5ldmVudDtcbiAgICAgICAgICAgICAgb3B0aW9ucyA9IG1lcmdlQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBleGlzdGluZ0FuaW1hdGlvbiwgbmV3QW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgICAvL3dlIHJldHVybiB0aGUgc2FtZSBydW5uZXIgc2luY2Ugb25seSB0aGUgb3B0aW9uIHZhbHVlcyBvZiB0aGlzIGFuaW1hdGlvbiB3aWxsXG4gICAgICAgICAgICAgIC8vYmUgZmVkIGludG8gdGhlIGBleGlzdGluZ0FuaW1hdGlvbmAuXG4gICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0FuaW1hdGlvbi5ydW5uZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub3JtYWxpemF0aW9uIGluIHRoaXMgY2FzZSBtZWFucyB0aGF0IGl0IHJlbW92ZXMgcmVkdW5kYW50IENTUyBjbGFzc2VzIHRoYXRcbiAgICAgICAgLy8gYWxyZWFkeSBleGlzdCAoYWRkQ2xhc3MpIG9yIGRvIG5vdCBleGlzdCAocmVtb3ZlQ2xhc3MpIG9uIHRoZSBlbGVtZW50XG4gICAgICAgIG5vcm1hbGl6ZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgbmV3QW5pbWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiB0aGUgb3B0aW9ucyBhcmUgbWVyZ2VkIGFuZCBjbGVhbmVkIHVwIHdlIG1heSBlbmQgdXAgbm90IGhhdmluZyB0byBkb1xuICAgICAgLy8gYW4gYW5pbWF0aW9uIGF0IGFsbCwgdGhlcmVmb3JlIHdlIHNob3VsZCBjaGVjayB0aGlzIGJlZm9yZSBpc3N1aW5nIGEgcG9zdFxuICAgICAgLy8gZGlnZXN0IGNhbGxiYWNrLiBTdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgd2lsbCBhbHdheXMgcnVuIG5vIG1hdHRlciB3aGF0LlxuICAgICAgdmFyIGlzVmFsaWRBbmltYXRpb24gPSBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcbiAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xuICAgICAgICAvLyBhbmltYXRlIChmcm9tL3RvKSBjYW4gYmUgcXVpY2tseSBjaGVja2VkIGZpcnN0LCBvdGhlcndpc2Ugd2UgY2hlY2sgaWYgYW55IGNsYXNzZXMgYXJlIHByZXNlbnRcbiAgICAgICAgaXNWYWxpZEFuaW1hdGlvbiA9IChuZXdBbmltYXRpb24uZXZlbnQgPT09ICdhbmltYXRlJyAmJiBPYmplY3Qua2V5cyhuZXdBbmltYXRpb24ub3B0aW9ucy50byB8fCB7fSkubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgICBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgLy8gdGhlIGNvdW50ZXIga2VlcHMgdHJhY2sgb2YgY2FuY2VsbGVkIGFuaW1hdGlvbnNcbiAgICAgIHZhciBjb3VudGVyID0gKGV4aXN0aW5nQW5pbWF0aW9uLmNvdW50ZXIgfHwgMCkgKyAxO1xuICAgICAgbmV3QW5pbWF0aW9uLmNvdW50ZXIgPSBjb3VudGVyO1xuXG4gICAgICBtYXJrRWxlbWVudEFuaW1hdGlvblN0YXRlKG5vZGUsIFBSRV9ESUdFU1RfU1RBVEUsIG5ld0FuaW1hdGlvbik7XG5cbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBET00gbm9kZXMgaW5zaWRlIGBvcmlnaW5hbEVsZW1lbnRgIGhhdmUgYmVlbiByZXBsYWNlZC4gVGhpcyBjYW5cbiAgICAgICAgLy8gaGFwcGVuIGlmIHRoZSBhbmltYXRlZCBlbGVtZW50IGlzIGEgdHJhbnNjbHVkZWQgY2xvbmUgYW5kIGFsc28gaGFzIGEgYHRlbXBsYXRlVXJsYFxuICAgICAgICAvLyBkaXJlY3RpdmUgb24gaXQuIFRoZXJlZm9yZSwgd2UgbXVzdCByZWNyZWF0ZSBgZWxlbWVudGAgaW4gb3JkZXIgdG8gaW50ZXJhY3Qgd2l0aCB0aGVcbiAgICAgICAgLy8gYWN0dWFsIERPTSBub2Rlcy5cbiAgICAgICAgLy8gTm90ZTogV2Ugc3RpbGwgbmVlZCB0byB1c2UgdGhlIG9sZCBgbm9kZWAgZm9yIGNlcnRhaW4gdGhpbmdzLCBzdWNoIGFzIGxvb2tpbmcgdXAgaW5cbiAgICAgICAgLy8gICAgICAgSGFzaE1hcHMgd2hlcmUgaXQgd2FzIHVzZWQgYXMgdGhlIGtleS5cblxuICAgICAgICBlbGVtZW50ID0gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KG9yaWdpbmFsRWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGFuaW1hdGlvbkRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChub2RlKTtcbiAgICAgICAgdmFyIGFuaW1hdGlvbkNhbmNlbGxlZCA9ICFhbmltYXRpb25EZXRhaWxzO1xuICAgICAgICBhbmltYXRpb25EZXRhaWxzID0gYW5pbWF0aW9uRGV0YWlscyB8fCB7fTtcblxuICAgICAgICAvLyBpZiBhZGRDbGFzcy9yZW1vdmVDbGFzcyBpcyBjYWxsZWQgYmVmb3JlIHNvbWV0aGluZyBsaWtlIGVudGVyIHRoZW4gdGhlXG4gICAgICAgIC8vIHJlZ2lzdGVyZWQgcGFyZW50IGVsZW1lbnQgbWF5IG5vdCBiZSBwcmVzZW50LiBUaGUgY29kZSBiZWxvdyB3aWxsIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IGEgZmluYWwgdmFsdWUgZm9yIHBhcmVudCBlbGVtZW50IGlzIG9idGFpbmVkXG4gICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKSB8fCBbXTtcblxuICAgICAgICAvLyBhbmltYXRlL3N0cnVjdHVyYWwvY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhbGwgaGF2ZSByZXF1aXJlbWVudHMuIE90aGVyd2lzZSB0aGVyZVxuICAgICAgICAvLyBpcyBubyBwb2ludCBpbiBwZXJmb3JtaW5nIGFuIGFuaW1hdGlvbi4gVGhlIHBhcmVudCBub2RlIG11c3QgYWxzbyBiZSBzZXQuXG4gICAgICAgIHZhciBpc1ZhbGlkQW5pbWF0aW9uID0gcGFyZW50RWxlbWVudC5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChhbmltYXRpb25EZXRhaWxzLmV2ZW50ID09PSAnYW5pbWF0ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaGFzQW5pbWF0aW9uQ2xhc3NlcyhhbmltYXRpb25EZXRhaWxzKSk7XG5cbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBwcmV2aW91cyBhbmltYXRpb24gd2FzIGNhbmNlbGxlZFxuICAgICAgICAvLyBldmVuIGlmIHRoZSBmb2xsb3ctdXAgYW5pbWF0aW9uIGlzIHRoZSBzYW1lIGV2ZW50XG4gICAgICAgIGlmIChhbmltYXRpb25DYW5jZWxsZWQgfHwgYW5pbWF0aW9uRGV0YWlscy5jb3VudGVyICE9PSBjb3VudGVyIHx8ICFpc1ZhbGlkQW5pbWF0aW9uKSB7XG4gICAgICAgICAgLy8gaWYgYW5vdGhlciBhbmltYXRpb24gZGlkIG5vdCB0YWtlIG92ZXIgdGhlbiB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGRvbU9wZXJhdGlvbiBhbmQgb3B0aW9ucyBhcmVcbiAgICAgICAgICAvLyBoYW5kbGVkIGFjY29yZGluZ2x5XG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNhbmNlbGxlZCkge1xuICAgICAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgdGhlIGV2ZW50IGNoYW5nZWQgZnJvbSBzb21ldGhpbmcgbGlrZSBlbnRlciB0byBsZWF2ZSB0aGVuIHdlIGRvXG4gICAgICAgICAgLy8gaXQsIG90aGVyd2lzZSBpZiBpdCdzIHRoZSBzYW1lIHRoZW4gdGhlIGVuZCByZXN1bHQgd2lsbCBiZSB0aGUgc2FtZSB0b29cbiAgICAgICAgICBpZiAoYW5pbWF0aW9uQ2FuY2VsbGVkIHx8IChpc1N0cnVjdHVyYWwgJiYgYW5pbWF0aW9uRGV0YWlscy5ldmVudCAhPT0gZXZlbnQpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRvbU9wZXJhdGlvbigpO1xuICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IGFuaW1hdGlvbiB3YXMgbm90IGNhbmNlbGxlZCBvciBhIGZvbGxvdy11cCBhbmltYXRpb25cbiAgICAgICAgICAvLyBpc24ndCBhbGxvd2VkIHRvIGFuaW1hdGUgZnJvbSBoZXJlIHRoZW4gd2UgbmVlZCB0byBjbGVhciB0aGUgc3RhdGUgb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgICAvLyBzbyB0aGF0IGFueSBmdXR1cmUgYW5pbWF0aW9ucyB3b24ndCByZWFkIHRoZSBleHBpcmVkIGFuaW1hdGlvbiBkYXRhLlxuICAgICAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xuICAgICAgICAgICAgY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUobm9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcyBjb21iaW5lZCBtdWx0aXBsZSBjbGFzcyB0byBhZGRDbGFzcyAvIHJlbW92ZUNsYXNzIGludG8gYSBzZXRDbGFzcyBldmVudFxuICAgICAgICAvLyBzbyBsb25nIGFzIGEgc3RydWN0dXJhbCBldmVudCBkaWQgbm90IHRha2Ugb3ZlciB0aGUgYW5pbWF0aW9uXG4gICAgICAgIGV2ZW50ID0gIWFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbCAmJiBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbkRldGFpbHMsIHRydWUpXG4gICAgICAgICAgICA/ICdzZXRDbGFzcydcbiAgICAgICAgICAgIDogYW5pbWF0aW9uRGV0YWlscy5ldmVudDtcblxuICAgICAgICBtYXJrRWxlbWVudEFuaW1hdGlvblN0YXRlKG5vZGUsIFJVTk5JTkdfU1RBVEUpO1xuICAgICAgICB2YXIgcmVhbFJ1bm5lciA9ICQkYW5pbWF0aW9uKGVsZW1lbnQsIGV2ZW50LCBhbmltYXRpb25EZXRhaWxzLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHRoaXMgd2lsbCB1cGRhdGUgdGhlIHJ1bm5lcidzIGZsb3ctY29udHJvbCBldmVudHMgYmFzZWQgb25cbiAgICAgICAgLy8gdGhlIGByZWFsUnVubmVyYCBvYmplY3QuXG4gICAgICAgIHJ1bm5lci5zZXRIb3N0KHJlYWxSdW5uZXIpO1xuICAgICAgICBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCAnc3RhcnQnLCB7fSk7XG5cbiAgICAgICAgcmVhbFJ1bm5lci5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgIGNsb3NlKCFzdGF0dXMpO1xuICAgICAgICAgIHZhciBhbmltYXRpb25EZXRhaWxzID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSk7XG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMgJiYgYW5pbWF0aW9uRGV0YWlscy5jb3VudGVyID09PSBjb3VudGVyKSB7XG4gICAgICAgICAgICBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm90aWZ5UHJvZ3Jlc3MocnVubmVyLCBldmVudCwgJ2Nsb3NlJywge30pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICBmdW5jdGlvbiBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCBwaGFzZSwgZGF0YSkge1xuICAgICAgICBydW5Jbk5leHRQb3N0RGlnZXN0T3JOb3coZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGZpbmRDYWxsYmFja3MocGFyZW50Tm9kZSwgbm9kZSwgZXZlbnQpO1xuICAgICAgICAgIGlmIChjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBkbyBub3Qgb3B0aW1pemUgdGhpcyBjYWxsIGhlcmUgdG8gUkFGIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IGtub3cgaG93IGhlYXZ5IHRoZSBjYWxsYmFjayBjb2RlIGhlcmUgd2lsbFxuICAgICAgICAgICAgLy8gYmUgYW5kIGlmIHRoaXMgY29kZSBpcyBidWZmZXJlZCB0aGVuIHRoaXMgY2FuXG4gICAgICAgICAgICAvLyBsZWFkIHRvIGEgcGVyZm9ybWFuY2UgcmVncmVzc2lvbi5cbiAgICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBmb3JFYWNoKGNhbGxiYWNrcywgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlbGVtZW50LCBwaGFzZSwgZGF0YSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBjbGVhbnVwRXZlbnRMaXN0ZW5lcnMocGhhc2UsIG5vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBFdmVudExpc3RlbmVycyhwaGFzZSwgbm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcnVubmVyLnByb2dyZXNzKGV2ZW50LCBwaGFzZSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKHJlamVjdCkge1xuICAgICAgICBjbGVhckdlbmVyYXRlZENsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgIHJ1bm5lci5jb21wbGV0ZSghcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZUNoaWxkQW5pbWF0aW9ucyhub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgTkdfQU5JTUFURV9BVFRSX05BTUUgKyAnXScpO1xuICAgICAgZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gcGFyc2VJbnQoY2hpbGQuZ2V0QXR0cmlidXRlKE5HX0FOSU1BVEVfQVRUUl9OQU1FKSwgMTApO1xuICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KGNoaWxkKTtcbiAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFJVTk5JTkdfU1RBVEU6XG4gICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMucnVubmVyLmVuZCgpO1xuICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlIFBSRV9ESUdFU1RfU1RBVEU6XG4gICAgICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZGVsZXRlKGNoaWxkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShOR19BTklNQVRFX0FUVFJfTkFNRSk7XG4gICAgICBhY3RpdmVBbmltYXRpb25zTG9va3VwLmRlbGV0ZShub2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZuIHJldHVybnMgZmFsc2UgaWYgYW55IG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAgICAgKiBhKSBhbmltYXRpb25zIG9uIGFueSBwYXJlbnQgZWxlbWVudCBhcmUgZGlzYWJsZWQsIGFuZCBhbmltYXRpb25zIG9uIHRoZSBlbGVtZW50IGFyZW4ndCBleHBsaWNpdGx5IGFsbG93ZWRcbiAgICAgKiBiKSBhIHBhcmVudCBlbGVtZW50IGhhcyBhbiBvbmdvaW5nIHN0cnVjdHVyYWwgYW5pbWF0aW9uLCBhbmQgYW5pbWF0ZUNoaWxkcmVuIGlzIGZhbHNlXG4gICAgICogYykgdGhlIGVsZW1lbnQgaXMgbm90IGEgY2hpbGQgb2YgdGhlIGJvZHlcbiAgICAgKiBkKSB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiB0aGUgJHJvb3RFbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJlQW5pbWF0aW9uc0FsbG93ZWQobm9kZSwgcGFyZW50Tm9kZSwgZXZlbnQpIHtcbiAgICAgIHZhciBib2R5Tm9kZSA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgdmFyIHJvb3ROb2RlID0gZ2V0RG9tTm9kZSgkcm9vdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgYm9keU5vZGVEZXRlY3RlZCA9IChub2RlID09PSBib2R5Tm9kZSkgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICAgICAgdmFyIHJvb3ROb2RlRGV0ZWN0ZWQgPSAobm9kZSA9PT0gcm9vdE5vZGUpO1xuICAgICAgdmFyIHBhcmVudEFuaW1hdGlvbkRldGVjdGVkID0gZmFsc2U7XG4gICAgICB2YXIgZWxlbWVudERpc2FibGVkID0gZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5nZXQobm9kZSk7XG4gICAgICB2YXIgYW5pbWF0ZUNoaWxkcmVuO1xuXG4gICAgICB2YXIgcGFyZW50SG9zdCA9IGpxTGl0ZS5kYXRhKG5vZGUsIE5HX0FOSU1BVEVfUElOX0RBVEEpO1xuICAgICAgaWYgKHBhcmVudEhvc3QpIHtcbiAgICAgICAgcGFyZW50Tm9kZSA9IGdldERvbU5vZGUocGFyZW50SG9zdCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChwYXJlbnROb2RlKSB7XG4gICAgICAgIGlmICghcm9vdE5vZGVEZXRlY3RlZCkge1xuICAgICAgICAgIC8vIGFuZ3VsYXIgZG9lc24ndCB3YW50IHRvIGF0dGVtcHQgdG8gYW5pbWF0ZSBlbGVtZW50cyBvdXRzaWRlIG9mIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHRoZSByb290RWxlbWVudCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgICAgICAgcm9vdE5vZGVEZXRlY3RlZCA9IChwYXJlbnROb2RlID09PSByb290Tm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgLy8gbm8gcG9pbnQgaW4gaW5zcGVjdGluZyB0aGUgI2RvY3VtZW50IGVsZW1lbnRcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXRhaWxzID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQocGFyZW50Tm9kZSkgfHwge307XG4gICAgICAgIC8vIGVpdGhlciBhbiBlbnRlciwgbGVhdmUgb3IgbW92ZSBhbmltYXRpb24gd2lsbCBjb21tZW5jZVxuICAgICAgICAvLyB0aGVyZWZvcmUgd2UgY2FuJ3QgYWxsb3cgYW55IGFuaW1hdGlvbnMgdG8gdGFrZSBwbGFjZVxuICAgICAgICAvLyBidXQgaWYgYSBwYXJlbnQgYW5pbWF0aW9uIGlzIGNsYXNzLWJhc2VkIHRoZW4gdGhhdCdzIG9rXG4gICAgICAgIGlmICghcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgcGFyZW50Tm9kZURpc2FibGVkID0gZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5nZXQocGFyZW50Tm9kZSk7XG5cbiAgICAgICAgICBpZiAocGFyZW50Tm9kZURpc2FibGVkID09PSB0cnVlICYmIGVsZW1lbnREaXNhYmxlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIGRpc2FibGUgYW5pbWF0aW9ucyBpZiB0aGUgdXNlciBoYXNuJ3QgZXhwbGljaXRseSBlbmFibGVkIGFuaW1hdGlvbnMgb24gdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IGVsZW1lbnRcbiAgICAgICAgICAgIGVsZW1lbnREaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIGRpc2FibGVkIHZpYSBwYXJlbnQgZWxlbWVudCwgbm8gbmVlZCB0byBjaGVjayBhbnl0aGluZyBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcmVudE5vZGVEaXNhYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGVsZW1lbnREaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnRBbmltYXRpb25EZXRlY3RlZCA9IGRldGFpbHMuc3RydWN0dXJhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChhbmltYXRlQ2hpbGRyZW4pIHx8IGFuaW1hdGVDaGlsZHJlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGpxTGl0ZS5kYXRhKHBhcmVudE5vZGUsIE5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSk7XG4gICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGFuaW1hdGVDaGlsZHJlbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29udGludWUgdHJhdmVyc2luZyBhdCB0aGlzIHBvaW50XG4gICAgICAgIGlmIChwYXJlbnRBbmltYXRpb25EZXRlY3RlZCAmJiBhbmltYXRlQ2hpbGRyZW4gPT09IGZhbHNlKSBicmVhaztcblxuICAgICAgICBpZiAoIWJvZHlOb2RlRGV0ZWN0ZWQpIHtcbiAgICAgICAgICAvLyB3ZSBhbHNvIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIGVsZW1lbnQgaXMgb3Igd2lsbCBiZSBhIHBhcnQgb2YgdGhlIGJvZHkgZWxlbWVudFxuICAgICAgICAgIC8vIG90aGVyd2lzZSBpdCBpcyBwb2ludGxlc3MgdG8gZXZlbiBpc3N1ZSBhbiBhbmltYXRpb24gdG8gYmUgcmVuZGVyZWRcbiAgICAgICAgICBib2R5Tm9kZURldGVjdGVkID0gKHBhcmVudE5vZGUgPT09IGJvZHlOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5Tm9kZURldGVjdGVkICYmIHJvb3ROb2RlRGV0ZWN0ZWQpIHtcbiAgICAgICAgICAvLyBJZiBib3RoIGJvZHkgYW5kIHJvb3QgaGF2ZSBiZWVuIGZvdW5kLCBhbnkgb3RoZXIgY2hlY2tzIGFyZSBwb2ludGxlc3MsXG4gICAgICAgICAgLy8gYXMgbm8gYW5pbWF0aW9uIGRhdGEgc2hvdWxkIGxpdmUgb3V0c2lkZSB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcm9vdE5vZGVEZXRlY3RlZCkge1xuICAgICAgICAgIC8vIElmIGByb290Tm9kZWAgaXMgbm90IGRldGVjdGVkLCBjaGVjayBpZiBgcGFyZW50Tm9kZWAgaXMgcGlubmVkIHRvIGFub3RoZXIgZWxlbWVudFxuICAgICAgICAgIHBhcmVudEhvc3QgPSBqcUxpdGUuZGF0YShwYXJlbnROb2RlLCBOR19BTklNQVRFX1BJTl9EQVRBKTtcbiAgICAgICAgICBpZiAocGFyZW50SG9zdCkge1xuICAgICAgICAgICAgLy8gVGhlIHBpbiB0YXJnZXQgZWxlbWVudCBiZWNvbWVzIHRoZSBuZXh0IHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgICBwYXJlbnROb2RlID0gZ2V0RG9tTm9kZShwYXJlbnRIb3N0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbGxvd0FuaW1hdGlvbiA9ICghcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgfHwgYW5pbWF0ZUNoaWxkcmVuKSAmJiBlbGVtZW50RGlzYWJsZWQgIT09IHRydWU7XG4gICAgICByZXR1cm4gYWxsb3dBbmltYXRpb24gJiYgcm9vdE5vZGVEZXRlY3RlZCAmJiBib2R5Tm9kZURldGVjdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUobm9kZSwgc3RhdGUsIGRldGFpbHMpIHtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzIHx8IHt9O1xuICAgICAgZGV0YWlscy5zdGF0ZSA9IHN0YXRlO1xuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShOR19BTklNQVRFX0FUVFJfTkFNRSwgc3RhdGUpO1xuXG4gICAgICB2YXIgb2xkVmFsdWUgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChub2RlKTtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IG9sZFZhbHVlXG4gICAgICAgICAgPyBleHRlbmQob2xkVmFsdWUsIGRldGFpbHMpXG4gICAgICAgICAgOiBkZXRhaWxzO1xuICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5zZXQobm9kZSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfV07XG59XTtcblxuLyogZXhwb3J0ZWQgJCRBbmltYXRpb25Qcm92aWRlciAqL1xuXG52YXIgJCRBbmltYXRpb25Qcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbigkYW5pbWF0ZVByb3ZpZGVyKSB7XG4gIHZhciBOR19BTklNQVRFX1JFRl9BVFRSID0gJ25nLWFuaW1hdGUtcmVmJztcblxuICB2YXIgZHJpdmVycyA9IHRoaXMuZHJpdmVycyA9IFtdO1xuXG4gIHZhciBSVU5ORVJfU1RPUkFHRV9LRVkgPSAnJCRhbmltYXRpb25SdW5uZXInO1xuXG4gIGZ1bmN0aW9uIHNldFJ1bm5lcihlbGVtZW50LCBydW5uZXIpIHtcbiAgICBlbGVtZW50LmRhdGEoUlVOTkVSX1NUT1JBR0VfS0VZLCBydW5uZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlUnVubmVyKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnJlbW92ZURhdGEoUlVOTkVSX1NUT1JBR0VfS0VZKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJ1bm5lcihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZGF0YShSVU5ORVJfU1RPUkFHRV9LRVkpO1xuICB9XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGpxTGl0ZScsICckcm9vdFNjb3BlJywgJyRpbmplY3RvcicsICckJEFuaW1hdGVSdW5uZXInLCAnJCRNYXAnLCAnJCRyQUZTY2hlZHVsZXInLFxuICAgICAgIGZ1bmN0aW9uKCQkanFMaXRlLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkJE1hcCwgICAkJHJBRlNjaGVkdWxlcikge1xuXG4gICAgdmFyIGFuaW1hdGlvblF1ZXVlID0gW107XG4gICAgdmFyIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyA9IGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpO1xuXG4gICAgZnVuY3Rpb24gc29ydEFuaW1hdGlvbnMoYW5pbWF0aW9ucykge1xuICAgICAgdmFyIHRyZWUgPSB7IGNoaWxkcmVuOiBbXSB9O1xuICAgICAgdmFyIGksIGxvb2t1cCA9IG5ldyAkJE1hcCgpO1xuXG4gICAgICAvLyB0aGlzIGlzIGRvbmUgZmlyc3QgYmVmb3JlaGFuZCBzbyB0aGF0IHRoZSBtYXBcbiAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIGEgbGlzdCBvZiB0aGUgZWxlbWVudHMgdGhhdCB3aWxsIGJlIGFuaW1hdGVkXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0gYW5pbWF0aW9uc1tpXTtcbiAgICAgICAgbG9va3VwLnNldChhbmltYXRpb24uZG9tTm9kZSwgYW5pbWF0aW9uc1tpXSA9IHtcbiAgICAgICAgICBkb21Ob2RlOiBhbmltYXRpb24uZG9tTm9kZSxcbiAgICAgICAgICBmbjogYW5pbWF0aW9uLmZuLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJvY2Vzc05vZGUoYW5pbWF0aW9uc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbGF0dGVuKHRyZWUpO1xuXG4gICAgICBmdW5jdGlvbiBwcm9jZXNzTm9kZShlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkucHJvY2Vzc2VkKSByZXR1cm4gZW50cnk7XG4gICAgICAgIGVudHJ5LnByb2Nlc3NlZCA9IHRydWU7XG5cbiAgICAgICAgdmFyIGVsZW1lbnROb2RlID0gZW50cnkuZG9tTm9kZTtcbiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBlbGVtZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBsb29rdXAuc2V0KGVsZW1lbnROb2RlLCBlbnRyeSk7XG5cbiAgICAgICAgdmFyIHBhcmVudEVudHJ5O1xuICAgICAgICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgICAgICAgIHBhcmVudEVudHJ5ID0gbG9va3VwLmdldChwYXJlbnROb2RlKTtcbiAgICAgICAgICBpZiAocGFyZW50RW50cnkpIHtcbiAgICAgICAgICAgIGlmICghcGFyZW50RW50cnkucHJvY2Vzc2VkKSB7XG4gICAgICAgICAgICAgIHBhcmVudEVudHJ5ID0gcHJvY2Vzc05vZGUocGFyZW50RW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAocGFyZW50RW50cnkgfHwgdHJlZSkuY2hpbGRyZW4ucHVzaChlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmxhdHRlbih0cmVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmVlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcXVldWUucHVzaCh0cmVlLmNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZW1haW5pbmdMZXZlbEVudHJpZXMgPSBxdWV1ZS5sZW5ndGg7XG4gICAgICAgIHZhciBuZXh0TGV2ZWxFbnRyaWVzID0gMDtcbiAgICAgICAgdmFyIHJvdyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHF1ZXVlW2ldO1xuICAgICAgICAgIGlmIChyZW1haW5pbmdMZXZlbEVudHJpZXMgPD0gMCkge1xuICAgICAgICAgICAgcmVtYWluaW5nTGV2ZWxFbnRyaWVzID0gbmV4dExldmVsRW50cmllcztcbiAgICAgICAgICAgIG5leHRMZXZlbEVudHJpZXMgPSAwO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocm93KTtcbiAgICAgICAgICAgIHJvdyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByb3cucHVzaChlbnRyeS5mbik7XG4gICAgICAgICAgZW50cnkuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZEVudHJ5KSB7XG4gICAgICAgICAgICBuZXh0TGV2ZWxFbnRyaWVzKys7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGNoaWxkRW50cnkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlbWFpbmluZ0xldmVsRW50cmllcy0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdy5sZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPKG1hdHNrbyk6IGRvY3VtZW50IHRoZSBzaWduYXR1cmUgaW4gYSBiZXR0ZXIgd2F5XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gWydlbnRlcicsICdtb3ZlJywgJ2xlYXZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcblxuICAgICAgLy8gdGhlcmUgaXMgbm8gYW5pbWF0aW9uIGF0IHRoZSBjdXJyZW50IG1vbWVudCwgaG93ZXZlclxuICAgICAgLy8gdGhlc2UgcnVubmVyIG1ldGhvZHMgd2lsbCBnZXQgbGF0ZXIgdXBkYXRlZCB3aXRoIHRoZVxuICAgICAgLy8gbWV0aG9kcyBsZWFkaW5nIGludG8gdGhlIGRyaXZlcidzIGVuZC9jYW5jZWwgbWV0aG9kc1xuICAgICAgLy8gZm9yIG5vdyB0aGV5IGp1c3Qgc3RvcCB0aGUgYW5pbWF0aW9uIGZyb20gc3RhcnRpbmdcbiAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgZW5kOiBmdW5jdGlvbigpIHsgY2xvc2UoKTsgfSxcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHsgY2xvc2UodHJ1ZSk7IH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWRyaXZlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIHNldFJ1bm5lcihlbGVtZW50LCBydW5uZXIpO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJyksIG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKSk7XG4gICAgICB2YXIgdGVtcENsYXNzZXMgPSBvcHRpb25zLnRlbXBDbGFzc2VzO1xuICAgICAgaWYgKHRlbXBDbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgKz0gJyAnICsgdGVtcENsYXNzZXM7XG4gICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlcGFyZUNsYXNzTmFtZTtcbiAgICAgIGlmIChpc1N0cnVjdHVyYWwpIHtcbiAgICAgICAgcHJlcGFyZUNsYXNzTmFtZSA9ICduZy0nICsgZXZlbnQgKyBQUkVQQVJFX0NMQVNTX1NVRkZJWDtcbiAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgcHJlcGFyZUNsYXNzTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvblF1ZXVlLnB1c2goe1xuICAgICAgICAvLyB0aGlzIGRhdGEgaXMgdXNlZCBieSB0aGUgcG9zdERpZ2VzdCBjb2RlIGFuZCBwYXNzZWQgaW50b1xuICAgICAgICAvLyB0aGUgZHJpdmVyIHN0ZXAgZnVuY3Rpb25cbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBzdHJ1Y3R1cmFsOiBpc1N0cnVjdHVyYWwsXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIGJlZm9yZVN0YXJ0OiBiZWZvcmVTdGFydCxcbiAgICAgICAgY2xvc2U6IGNsb3NlXG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBoYW5kbGVEZXN0cm95ZWRFbGVtZW50KTtcblxuICAgICAgLy8gd2Ugb25seSB3YW50IHRoZXJlIHRvIGJlIG9uZSBmdW5jdGlvbiBjYWxsZWQgd2l0aGluIHRoZSBwb3N0IGRpZ2VzdFxuICAgICAgLy8gYmxvY2suIFRoaXMgd2F5IHdlIGNhbiBncm91cCBhbmltYXRpb25zIGZvciBhbGwgdGhlIGFuaW1hdGlvbnMgdGhhdFxuICAgICAgLy8gd2VyZSBhcGFydCBvZiB0aGUgc2FtZSBwb3N0RGlnZXN0IGZsdXNoIGNhbGwuXG4gICAgICBpZiAoYW5pbWF0aW9uUXVldWUubGVuZ3RoID4gMSkgcmV0dXJuIHJ1bm5lcjtcblxuICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgICAgIGZvckVhY2goYW5pbWF0aW9uUXVldWUsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgLy8gdGhlIGVsZW1lbnQgd2FzIGRlc3Ryb3llZCBlYXJseSBvbiB3aGljaCByZW1vdmVkIHRoZSBydW5uZXJcbiAgICAgICAgICAvLyBmb3JtIGl0cyBzdG9yYWdlLiBUaGlzIG1lYW5zIHdlIGNhbid0IGFuaW1hdGUgdGhpcyBlbGVtZW50XG4gICAgICAgICAgLy8gYXQgYWxsIGFuZCBpdCBhbHJlYWR5IGhhcyBiZWVuIGNsb3NlZCBkdWUgdG8gZGVzdHJ1Y3Rpb24uXG4gICAgICAgICAgaWYgKGdldFJ1bm5lcihlbnRyeS5lbGVtZW50KSkge1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50cnkuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG5vdyBhbnkgZnV0dXJlIGFuaW1hdGlvbnMgd2lsbCBiZSBpbiBhbm90aGVyIHBvc3REaWdlc3RcbiAgICAgICAgYW5pbWF0aW9uUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgICB2YXIgZ3JvdXBlZEFuaW1hdGlvbnMgPSBncm91cEFuaW1hdGlvbnMoYW5pbWF0aW9ucyk7XG4gICAgICAgIHZhciB0b0JlU29ydGVkQW5pbWF0aW9ucyA9IFtdO1xuXG4gICAgICAgIGZvckVhY2goZ3JvdXBlZEFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbkVudHJ5KSB7XG4gICAgICAgICAgdG9CZVNvcnRlZEFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBkb21Ob2RlOiBnZXREb21Ob2RlKGFuaW1hdGlvbkVudHJ5LmZyb20gPyBhbmltYXRpb25FbnRyeS5mcm9tLmVsZW1lbnQgOiBhbmltYXRpb25FbnRyeS5lbGVtZW50KSxcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKSB7XG4gICAgICAgICAgICAgIC8vIGl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYXBwbHkgdGhlIGBuZy1hbmltYXRlYCBDU1MgY2xhc3MgYW5kIHRoZVxuICAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgY2xhc3NlcyBiZWZvcmUgd2UgZG8gYW55IGRyaXZlciBpbnZva2luZyBzaW5jZSB0aGVzZVxuICAgICAgICAgICAgICAvLyBDU1MgY2xhc3NlcyBtYXkgYmUgcmVxdWlyZWQgZm9yIHByb3BlciBDU1MgZGV0ZWN0aW9uLlxuICAgICAgICAgICAgICBhbmltYXRpb25FbnRyeS5iZWZvcmVTdGFydCgpO1xuXG4gICAgICAgICAgICAgIHZhciBzdGFydEFuaW1hdGlvbkZuLCBjbG9zZUZuID0gYW5pbWF0aW9uRW50cnkuY2xvc2U7XG5cbiAgICAgICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgd2FzIHJlbW92ZWQgYmVmb3JlIHRoZSBkaWdlc3QgcnVucyBvclxuICAgICAgICAgICAgICAvLyBkdXJpbmcgdGhlIFJBRiBzZXF1ZW5jaW5nIHRoZW4gd2Ugc2hvdWxkIG5vdCB0cmlnZ2VyIHRoZSBhbmltYXRpb24uXG4gICAgICAgICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gYW5pbWF0aW9uRW50cnkuYW5jaG9yc1xuICAgICAgICAgICAgICAgICAgPyAoYW5pbWF0aW9uRW50cnkuZnJvbS5lbGVtZW50IHx8IGFuaW1hdGlvbkVudHJ5LnRvLmVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICA6IGFuaW1hdGlvbkVudHJ5LmVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKGdldFJ1bm5lcih0YXJnZXRFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBpbnZva2VGaXJzdERyaXZlcihhbmltYXRpb25FbnRyeSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgc3RhcnRBbmltYXRpb25GbiA9IG9wZXJhdGlvbi5zdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXN0YXJ0QW5pbWF0aW9uRm4pIHtcbiAgICAgICAgICAgICAgICBjbG9zZUZuKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblJ1bm5lciA9IHN0YXJ0QW5pbWF0aW9uRm4oKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25SdW5uZXIuZG9uZShmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlRm4oIXN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uUnVubmVycyhhbmltYXRpb25FbnRyeSwgYW5pbWF0aW9uUnVubmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgZWFjaCBvZiB0aGUgYW5pbWF0aW9ucyBpbiBvcmRlciBvZiBwYXJlbnQgdG8gY2hpbGRcbiAgICAgICAgLy8gcmVsYXRpb25zaGlwcy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGNoaWxkIGNsYXNzZXMgYXJlIGFwcGxpZWQgYXQgdGhlXG4gICAgICAgIC8vIHJpZ2h0IHRpbWUuXG4gICAgICAgICQkckFGU2NoZWR1bGVyKHNvcnRBbmltYXRpb25zKHRvQmVTb3J0ZWRBbmltYXRpb25zKSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJ1bm5lcjtcblxuICAgICAgLy8gVE9ETyhtYXRza28pOiBjaGFuZ2UgdG8gcmVmZXJlbmNlIG5vZGVzXG4gICAgICBmdW5jdGlvbiBnZXRBbmNob3JOb2Rlcyhub2RlKSB7XG4gICAgICAgIHZhciBTRUxFQ1RPUiA9ICdbJyArIE5HX0FOSU1BVEVfUkVGX0FUVFIgKyAnXSc7XG4gICAgICAgIHZhciBpdGVtcyA9IG5vZGUuaGFzQXR0cmlidXRlKE5HX0FOSU1BVEVfUkVGX0FUVFIpXG4gICAgICAgICAgICAgID8gW25vZGVdXG4gICAgICAgICAgICAgIDogbm9kZS5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SKTtcbiAgICAgICAgdmFyIGFuY2hvcnMgPSBbXTtcbiAgICAgICAgZm9yRWFjaChpdGVtcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHZhciBhdHRyID0gbm9kZS5nZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9SRUZfQVRUUik7XG4gICAgICAgICAgaWYgKGF0dHIgJiYgYXR0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuY2hvcnMucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYW5jaG9ycztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ3JvdXBBbmltYXRpb25zKGFuaW1hdGlvbnMpIHtcbiAgICAgICAgdmFyIHByZXBhcmVkQW5pbWF0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgcmVmTG9va3VwID0ge307XG4gICAgICAgIGZvckVhY2goYW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pbWF0aW9uLCBpbmRleCkge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5pbWF0aW9uLmVsZW1lbnQ7XG4gICAgICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgICAgIHZhciBldmVudCA9IGFuaW1hdGlvbi5ldmVudDtcbiAgICAgICAgICB2YXIgZW50ZXJPck1vdmUgPSBbJ2VudGVyJywgJ21vdmUnXS5pbmRleE9mKGV2ZW50KSA+PSAwO1xuICAgICAgICAgIHZhciBhbmNob3JOb2RlcyA9IGFuaW1hdGlvbi5zdHJ1Y3R1cmFsID8gZ2V0QW5jaG9yTm9kZXMobm9kZSkgOiBbXTtcblxuICAgICAgICAgIGlmIChhbmNob3JOb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbnRlck9yTW92ZSA/ICd0bycgOiAnZnJvbSc7XG5cbiAgICAgICAgICAgIGZvckVhY2goYW5jaG9yTm9kZXMsIGZ1bmN0aW9uKGFuY2hvcikge1xuICAgICAgICAgICAgICB2YXIga2V5ID0gYW5jaG9yLmdldEF0dHJpYnV0ZShOR19BTklNQVRFX1JFRl9BVFRSKTtcbiAgICAgICAgICAgICAgcmVmTG9va3VwW2tleV0gPSByZWZMb29rdXBba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgcmVmTG9va3VwW2tleV1bZGlyZWN0aW9uXSA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25JRDogaW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDoganFMaXRlKGFuY2hvcilcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHVzZWRJbmRpY2VzTG9va3VwID0ge307XG4gICAgICAgIHZhciBhbmNob3JHcm91cHMgPSB7fTtcbiAgICAgICAgZm9yRWFjaChyZWZMb29rdXAsIGZ1bmN0aW9uKG9wZXJhdGlvbnMsIGtleSkge1xuICAgICAgICAgIHZhciBmcm9tID0gb3BlcmF0aW9ucy5mcm9tO1xuICAgICAgICAgIHZhciB0byA9IG9wZXJhdGlvbnMudG87XG5cbiAgICAgICAgICBpZiAoIWZyb20gfHwgIXRvKSB7XG4gICAgICAgICAgICAvLyBvbmx5IG9uZSBvZiB0aGVzZSBpcyBzZXQgdGhlcmVmb3JlIHdlIGNhbid0IGhhdmUgYW5cbiAgICAgICAgICAgIC8vIGFuY2hvciBhbmltYXRpb24gc2luY2UgYWxsIHRocmVlIHBpZWNlcyBhcmUgcmVxdWlyZWRcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGZyb20gPyBmcm9tLmFuaW1hdGlvbklEIDogdG8uYW5pbWF0aW9uSUQ7XG4gICAgICAgICAgICB2YXIgaW5kZXhLZXkgPSBpbmRleC50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKCF1c2VkSW5kaWNlc0xvb2t1cFtpbmRleEtleV0pIHtcbiAgICAgICAgICAgICAgdXNlZEluZGljZXNMb29rdXBbaW5kZXhLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goYW5pbWF0aW9uc1tpbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmcm9tQW5pbWF0aW9uID0gYW5pbWF0aW9uc1tmcm9tLmFuaW1hdGlvbklEXTtcbiAgICAgICAgICB2YXIgdG9BbmltYXRpb24gPSBhbmltYXRpb25zW3RvLmFuaW1hdGlvbklEXTtcbiAgICAgICAgICB2YXIgbG9va3VwS2V5ID0gZnJvbS5hbmltYXRpb25JRC50b1N0cmluZygpO1xuICAgICAgICAgIGlmICghYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0pIHtcbiAgICAgICAgICAgIHZhciBncm91cCA9IGFuY2hvckdyb3Vwc1tsb29rdXBLZXldID0ge1xuICAgICAgICAgICAgICBzdHJ1Y3R1cmFsOiB0cnVlLFxuICAgICAgICAgICAgICBiZWZvcmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZnJvbUFuaW1hdGlvbi5iZWZvcmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIHRvQW5pbWF0aW9uLmJlZm9yZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmcm9tQW5pbWF0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdG9BbmltYXRpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2xhc3NlczogY3NzQ2xhc3Nlc0ludGVyc2VjdGlvbihmcm9tQW5pbWF0aW9uLmNsYXNzZXMsIHRvQW5pbWF0aW9uLmNsYXNzZXMpLFxuICAgICAgICAgICAgICBmcm9tOiBmcm9tQW5pbWF0aW9uLFxuICAgICAgICAgICAgICB0bzogdG9BbmltYXRpb24sXG4gICAgICAgICAgICAgIGFuY2hvcnM6IFtdIC8vIFRPRE8obWF0c2tvKTogY2hhbmdlIHRvIHJlZmVyZW5jZSBub2Rlc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gdGhlIGFuY2hvciBhbmltYXRpb25zIHJlcXVpcmUgdGhhdCB0aGUgZnJvbSBhbmQgdG8gZWxlbWVudHMgYm90aCBoYXZlIGF0IGxlYXN0XG4gICAgICAgICAgICAvLyBvbmUgc2hhcmVkIENTUyBjbGFzcyB3aGljaCBlZmZlY3RpdmVseSBtYXJyaWVzIHRoZSB0d28gZWxlbWVudHMgdG9nZXRoZXIgdG8gdXNlXG4gICAgICAgICAgICAvLyB0aGUgc2FtZSBhbmltYXRpb24gZHJpdmVyIGFuZCB0byBwcm9wZXJseSBzZXF1ZW5jZSB0aGUgYW5jaG9yIGFuaW1hdGlvbi5cbiAgICAgICAgICAgIGlmIChncm91cC5jbGFzc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChncm91cCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChmcm9tQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2godG9BbmltYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuY2hvckdyb3Vwc1tsb29rdXBLZXldLmFuY2hvcnMucHVzaCh7XG4gICAgICAgICAgICAnb3V0JzogZnJvbS5lbGVtZW50LCAnaW4nOiB0by5lbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcmVwYXJlZEFuaW1hdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNzc0NsYXNzZXNJbnRlcnNlY3Rpb24oYSxiKSB7XG4gICAgICAgIGEgPSBhLnNwbGl0KCcgJyk7XG4gICAgICAgIGIgPSBiLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciBtYXRjaGVzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGFhID0gYVtpXTtcbiAgICAgICAgICBpZiAoYWEuc3Vic3RyaW5nKDAsMykgPT09ICduZy0nKSBjb250aW51ZTtcblxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGFhID09PSBiW2pdKSB7XG4gICAgICAgICAgICAgIG1hdGNoZXMucHVzaChhYSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaGVzLmpvaW4oJyAnKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRmlyc3REcml2ZXIoYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgICAvLyB3ZSBsb29wIGluIHJldmVyc2Ugb3JkZXIgc2luY2UgdGhlIG1vcmUgZ2VuZXJhbCBkcml2ZXJzIChsaWtlIENTUyBhbmQgSlMpXG4gICAgICAgIC8vIG1heSBhdHRlbXB0IG1vcmUgZWxlbWVudHMsIGJ1dCBjdXN0b20gZHJpdmVycyBhcmUgbW9yZSBwYXJ0aWN1bGFyXG4gICAgICAgIGZvciAodmFyIGkgPSBkcml2ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXJzW2ldO1xuICAgICAgICAgIHZhciBmYWN0b3J5ID0gJGluamVjdG9yLmdldChkcml2ZXJOYW1lKTtcbiAgICAgICAgICB2YXIgZHJpdmVyID0gZmFjdG9yeShhbmltYXRpb25EZXRhaWxzKTtcbiAgICAgICAgICBpZiAoZHJpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZHJpdmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBiZWZvcmVTdGFydCgpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhOR19BTklNQVRFX0NMQVNTTkFNRSk7XG4gICAgICAgIGlmICh0ZW1wQ2xhc3Nlcykge1xuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHRlbXBDbGFzc2VzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlcGFyZUNsYXNzTmFtZSkge1xuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHByZXBhcmVDbGFzc05hbWUpO1xuICAgICAgICAgIHByZXBhcmVDbGFzc05hbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFuaW1hdGlvblJ1bm5lcnMoYW5pbWF0aW9uLCBuZXdSdW5uZXIpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbi5mcm9tICYmIGFuaW1hdGlvbi50bykge1xuICAgICAgICAgIHVwZGF0ZShhbmltYXRpb24uZnJvbS5lbGVtZW50KTtcbiAgICAgICAgICB1cGRhdGUoYW5pbWF0aW9uLnRvLmVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZShhbmltYXRpb24uZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoZWxlbWVudCkge1xuICAgICAgICAgIHZhciBydW5uZXIgPSBnZXRSdW5uZXIoZWxlbWVudCk7XG4gICAgICAgICAgaWYgKHJ1bm5lcikgcnVubmVyLnNldEhvc3QobmV3UnVubmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVEZXN0cm95ZWRFbGVtZW50KCkge1xuICAgICAgICB2YXIgcnVubmVyID0gZ2V0UnVubmVyKGVsZW1lbnQpO1xuICAgICAgICBpZiAocnVubmVyICYmIChldmVudCAhPT0gJ2xlYXZlJyB8fCAhb3B0aW9ucy4kJGRvbU9wZXJhdGlvbkZpcmVkKSkge1xuICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbG9zZShyZWplY3RlZCkge1xuICAgICAgICBlbGVtZW50Lm9mZignJGRlc3Ryb3knLCBoYW5kbGVEZXN0cm95ZWRFbGVtZW50KTtcbiAgICAgICAgcmVtb3ZlUnVubmVyKGVsZW1lbnQpO1xuXG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uKCk7XG5cbiAgICAgICAgaWYgKHRlbXBDbGFzc2VzKSB7XG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdGVtcENsYXNzZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhOR19BTklNQVRFX0NMQVNTTkFNRSk7XG4gICAgICAgIHJ1bm5lci5jb21wbGV0ZSghcmVqZWN0ZWQpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBbmltYXRlU3dhcFxuICogQHJlc3RyaWN0IEFcbiAqIEBzY29wZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nQW5pbWF0ZVN3YXAgaXMgYSBhbmltYXRpb24tb3JpZW50ZWQgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGZvciB0aGUgY29udGFpbmVyIHRvXG4gKiBiZSByZW1vdmVkIGFuZCBlbnRlcmVkIGluIHdoZW5ldmVyIHRoZSBhc3NvY2lhdGVkIGV4cHJlc3Npb24gY2hhbmdlcy4gQVxuICogY29tbW9uIHVzZWNhc2UgZm9yIHRoaXMgZGlyZWN0aXZlIGlzIGEgcm90YXRpbmcgYmFubmVyIG9yIHNsaWRlciBjb21wb25lbnQgd2hpY2hcbiAqIGNvbnRhaW5zIG9uZSBpbWFnZSBiZWluZyBwcmVzZW50IGF0IGEgdGltZS4gV2hlbiB0aGUgYWN0aXZlIGltYWdlIGNoYW5nZXNcbiAqIHRoZW4gdGhlIG9sZCBpbWFnZSB3aWxsIHBlcmZvcm0gYSBgbGVhdmVgIGFuaW1hdGlvbiBhbmQgdGhlIG5ldyBlbGVtZW50XG4gKiB3aWxsIGJlIGluc2VydGVkIHZpYSBhbiBgZW50ZXJgIGFuaW1hdGlvbi5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2VudGVyIGVudGVyfSAgfCB3aGVuIHRoZSBuZXcgZWxlbWVudCBpcyBpbnNlcnRlZCB0byB0aGUgRE9NICB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gIHwgd2hlbiB0aGUgb2xkIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gfFxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdBbmltYXRlU3dhcC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ0FuaW1hdGVTd2FwRXhhbXBsZVwiXG4gKiAgICAgICAgICBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCJcbiAqICAgICAgICAgIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCIgbmctY29udHJvbGxlcj1cIkFwcEN0cmxcIj5cbiAqICAgICAgIDxkaXYgbmctYW5pbWF0ZS1zd2FwPVwibnVtYmVyXCIgY2xhc3M9XCJjZWxsIHN3YXAtYW5pbWF0aW9uXCIgbmctY2xhc3M9XCJjb2xvckNsYXNzKG51bWJlcilcIj5cbiAqICAgICAgICAge3sgbnVtYmVyIH19XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZVN3YXBFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdBcHBDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpIHtcbiAqICAgICAgICAgJHNjb3BlLm51bWJlciA9IDA7XG4gKiAgICAgICAgICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAkc2NvcGUubnVtYmVyKys7XG4gKiAgICAgICAgIH0sIDEwMDApO1xuICpcbiAqICAgICAgICAgdmFyIGNvbG9ycyA9IFsncmVkJywnYmx1ZScsJ2dyZWVuJywneWVsbG93Jywnb3JhbmdlJ107XG4gKiAgICAgICAgICRzY29wZS5jb2xvckNsYXNzID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gKiAgICAgICAgICAgcmV0dXJuIGNvbG9yc1tudW1iZXIgJSBjb2xvcnMubGVuZ3RoXTtcbiAqICAgICAgICAgfTtcbiAqICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICogIC5jb250YWluZXIge1xuICogICAgaGVpZ2h0OjI1MHB4O1xuICogICAgd2lkdGg6MjUwcHg7XG4gKiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAqICAgIG92ZXJmbG93OmhpZGRlbjtcbiAqICAgIGJvcmRlcjoycHggc29saWQgYmxhY2s7XG4gKiAgfVxuICogIC5jb250YWluZXIgLmNlbGwge1xuICogICAgZm9udC1zaXplOjE1MHB4O1xuICogICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gKiAgICBsaW5lLWhlaWdodDoyNTBweDtcbiAqICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICogICAgdG9wOjA7XG4gKiAgICBsZWZ0OjA7XG4gKiAgICByaWdodDowO1xuICogICAgYm9yZGVyLWJvdHRvbToycHggc29saWQgYmxhY2s7XG4gKiAgfVxuICogIC5zd2FwLWFuaW1hdGlvbi5uZy1lbnRlciwgLnN3YXAtYW5pbWF0aW9uLm5nLWxlYXZlIHtcbiAqICAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogIH1cbiAqICAuc3dhcC1hbmltYXRpb24ubmctZW50ZXIge1xuICogICAgdG9wOi0yNTBweDtcbiAqICB9XG4gKiAgLnN3YXAtYW5pbWF0aW9uLm5nLWVudGVyLWFjdGl2ZSB7XG4gKiAgICB0b3A6MHB4O1xuICogIH1cbiAqICAuc3dhcC1hbmltYXRpb24ubmctbGVhdmUge1xuICogICAgdG9wOjBweDtcbiAqICB9XG4gKiAgLnN3YXAtYW5pbWF0aW9uLm5nLWxlYXZlLWFjdGl2ZSB7XG4gKiAgICB0b3A6MjUwcHg7XG4gKiAgfVxuICogIC5yZWQgeyBiYWNrZ3JvdW5kOnJlZDsgfVxuICogIC5ncmVlbiB7IGJhY2tncm91bmQ6Z3JlZW47IH1cbiAqICAuYmx1ZSB7IGJhY2tncm91bmQ6Ymx1ZTsgfVxuICogIC55ZWxsb3cgeyBiYWNrZ3JvdW5kOnllbGxvdzsgfVxuICogIC5vcmFuZ2UgeyBiYWNrZ3JvdW5kOm9yYW5nZTsgfVxuICogIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQW5pbWF0ZVN3YXBEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkYW5pbWF0ZSwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHByaW9yaXR5OiA2MDAsIC8vIHdlIHVzZSA2MDAgaGVyZSB0byBlbnN1cmUgdGhhdCB0aGUgZGlyZWN0aXZlIGlzIGNhdWdodCBiZWZvcmUgb3RoZXJzXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgIHZhciBwcmV2aW91c0VsZW1lbnQsIHByZXZpb3VzU2NvcGU7XG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGF0dHJzLm5nQW5pbWF0ZVN3YXAgfHwgYXR0cnNbJ2ZvciddLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldmlvdXNTY29wZSkge1xuICAgICAgICAgIHByZXZpb3VzU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICBwcmV2aW91c1Njb3BlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICBwcmV2aW91c1Njb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICR0cmFuc2NsdWRlKHByZXZpb3VzU2NvcGUsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBudWxsLCAkZWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nQW5pbWF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBwcm92aWRlcyBzdXBwb3J0IGZvciBDU1MtYmFzZWQgYW5pbWF0aW9ucyAoa2V5ZnJhbWVzIGFuZCB0cmFuc2l0aW9ucykgYXMgd2VsbCBhcyBKYXZhU2NyaXB0LWJhc2VkIGFuaW1hdGlvbnMgdmlhXG4gKiBjYWxsYmFjayBob29rcy4gQW5pbWF0aW9ucyBhcmUgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCwgaG93ZXZlciwgYnkgaW5jbHVkaW5nIGBuZ0FuaW1hdGVgIHRoZSBhbmltYXRpb24gaG9va3MgYXJlIGVuYWJsZWQgZm9yIGFuIEFuZ3VsYXIgYXBwLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdBbmltYXRlXCI+PC9kaXY+XG4gKlxuICogIyBVc2FnZVxuICogU2ltcGx5IHB1dCwgdGhlcmUgYXJlIHR3byB3YXlzIHRvIG1ha2UgdXNlIG9mIGFuaW1hdGlvbnMgd2hlbiBuZ0FuaW1hdGUgaXMgdXNlZDogYnkgdXNpbmcgKipDU1MqKiBhbmQgKipKYXZhU2NyaXB0KiouIFRoZSBmb3JtZXIgd29ya3MgcHVyZWx5IGJhc2VkXG4gKiB1c2luZyBDU1MgKGJ5IHVzaW5nIG1hdGNoaW5nIENTUyBzZWxlY3RvcnMvc3R5bGVzKSBhbmQgdGhlIGxhdHRlciB0cmlnZ2VycyBhbmltYXRpb25zIHRoYXQgYXJlIHJlZ2lzdGVyZWQgdmlhIGBtb2R1bGUuYW5pbWF0aW9uKClgLiBGb3JcbiAqIGJvdGggQ1NTIGFuZCBKUyBhbmltYXRpb25zIHRoZSBzb2xlIHJlcXVpcmVtZW50IGlzIHRvIGhhdmUgYSBtYXRjaGluZyBgQ1NTIGNsYXNzYCB0aGF0IGV4aXN0cyBib3RoIGluIHRoZSByZWdpc3RlcmVkIGFuaW1hdGlvbiBhbmQgd2l0aGluXG4gKiB0aGUgSFRNTCBlbGVtZW50IHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBvbi5cbiAqXG4gKiAjIyBEaXJlY3RpdmUgU3VwcG9ydFxuICogVGhlIGZvbGxvd2luZyBkaXJlY3RpdmVzIGFyZSBcImFuaW1hdGlvbiBhd2FyZVwiOlxuICpcbiAqIHwgRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQgQW5pbWF0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQjYW5pbWF0aW9ucyBuZ1JlcGVhdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIsIGxlYXZlIGFuZCBtb3ZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyNhbmltYXRpb25zIG5nVmlld30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSNhbmltYXRpb25zIG5nSW5jbHVkZX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTd2l0Y2gjYW5pbWF0aW9ucyBuZ1N3aXRjaH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0lmI2FuaW1hdGlvbnMgbmdJZn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MjYW5pbWF0aW9ucyBuZ0NsYXNzfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlICh0aGUgQ1NTIGNsYXNzKGVzKSBwcmVzZW50KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTaG93I2FuaW1hdGlvbnMgbmdTaG93fSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdIaWRlI2FuaW1hdGlvbnMgbmdIaWRlfSAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKHRoZSBuZy1oaWRlIGNsYXNzIHZhbHVlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtI2FuaW1hdGlvbi1ob29rcyBmb3JtfSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbCNhbmltYXRpb24taG9va3MgbmdNb2RlbH0gICAgfCBhZGQgYW5kIHJlbW92ZSAoZGlydHksIHByaXN0aW5lLCB2YWxpZCwgaW52YWxpZCAmIGFsbCBvdGhlciB2YWxpZGF0aW9ucykgfFxuICogfCB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMjYW5pbWF0aW9ucyBuZ01lc3NhZ2VzfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlIChuZy1hY3RpdmUgJiBuZy1pbmFjdGl2ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyNhbmltYXRpb25zIG5nTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiAoTW9yZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgYnkgdmlzaXRpbmcgZWFjaCB0aGUgZG9jdW1lbnRhdGlvbiBhc3NvY2lhdGVkIHdpdGggZWFjaCBkaXJlY3RpdmUuKVxuICpcbiAqICMjIENTUy1iYXNlZCBBbmltYXRpb25zXG4gKlxuICogQ1NTLWJhc2VkIGFuaW1hdGlvbnMgd2l0aCBuZ0FuaW1hdGUgYXJlIHVuaXF1ZSBzaW5jZSB0aGV5IHJlcXVpcmUgbm8gSmF2YVNjcmlwdCBjb2RlIGF0IGFsbC4gQnkgdXNpbmcgYSBDU1MgY2xhc3MgdGhhdCB3ZSByZWZlcmVuY2UgYmV0d2VlbiBvdXIgSFRNTFxuICogYW5kIENTUyBjb2RlIHdlIGNhbiBjcmVhdGUgYW4gYW5pbWF0aW9uIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgQW5ndWxhciB3aGVuIGFuIHVuZGVybHlpbmcgZGlyZWN0aXZlIHBlcmZvcm1zIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyBob3cgYW4gYGVudGVyYCBhbmltYXRpb24gY2FuIGJlIG1hZGUgcG9zc2libGUgb24gYW4gZWxlbWVudCB1c2luZyBgbmctaWZgOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaWY9XCJib29sXCIgY2xhc3M9XCJmYWRlXCI+XG4gKiAgICBGYWRlIG1lIGluIG91dFxuICogPC9kaXY+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiYm9vbD10cnVlXCI+RmFkZSBJbiE8L2J1dHRvbj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJib29sPWZhbHNlXCI+RmFkZSBPdXQhPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhlIENTUyBjbGFzcyAqKmZhZGUqKj8gV2UgY2FuIG5vdyBjcmVhdGUgdGhlIENTUyB0cmFuc2l0aW9uIGNvZGUgdGhhdCByZWZlcmVuY2VzIHRoaXMgY2xhc3M6XG4gKlxuICogYGBgY3NzXG4gKiAvJiM0MjsgVGhlIHN0YXJ0aW5nIENTUyBzdHlsZXMgZm9yIHRoZSBlbnRlciBhbmltYXRpb24gJiM0MjsvXG4gKiAuZmFkZS5uZy1lbnRlciB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBvcGFjaXR5OjA7XG4gKiB9XG4gKlxuICogLyYjNDI7IFRoZSBmaW5pc2hpbmcgQ1NTIHN0eWxlcyBmb3IgdGhlIGVudGVyIGFuaW1hdGlvbiAmIzQyOy9cbiAqIC5mYWRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6MTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBrZXkgdGhpbmcgdG8gcmVtZW1iZXIgaGVyZSBpcyB0aGF0LCBkZXBlbmRpbmcgb24gdGhlIGFuaW1hdGlvbiBldmVudCAod2hpY2ggZWFjaCBvZiB0aGUgZGlyZWN0aXZlcyBhYm92ZSB0cmlnZ2VyIGRlcGVuZGluZyBvbiB3aGF0J3MgZ29pbmcgb24pIHR3b1xuICogZ2VuZXJhdGVkIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudDsgaW4gdGhlIGV4YW1wbGUgYWJvdmUgd2UgaGF2ZSBgLm5nLWVudGVyYCBhbmQgYC5uZy1lbnRlci1hY3RpdmVgLiBGb3IgQ1NTIHRyYW5zaXRpb25zLCB0aGUgdHJhbnNpdGlvblxuICogY29kZSAqKm11c3QqKiBiZSBkZWZpbmVkIHdpdGhpbiB0aGUgc3RhcnRpbmcgQ1NTIGNsYXNzIChpbiB0aGlzIGNhc2UgYC5uZy1lbnRlcmApLiBUaGUgZGVzdGluYXRpb24gY2xhc3MgaXMgd2hhdCB0aGUgdHJhbnNpdGlvbiB3aWxsIGFuaW1hdGUgdG93YXJkcy5cbiAqXG4gKiBJZiBmb3IgZXhhbXBsZSB3ZSB3YW50ZWQgdG8gY3JlYXRlIGFuaW1hdGlvbnMgZm9yIGBsZWF2ZWAgYW5kIGBtb3ZlYCAobmdSZXBlYXQgdHJpZ2dlcnMgbW92ZSkgdGhlbiB3ZSBjYW4gZG8gc28gdXNpbmcgdGhlIHNhbWUgQ1NTIG5hbWluZyBjb252ZW50aW9uczpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBub3cgdGhlIGVsZW1lbnQgd2lsbCBmYWRlIG91dCBiZWZvcmUgaXQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gJiM0MjsvXG4gKiAuZmFkZS5uZy1sZWF2ZSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiAuZmFkZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICogICBvcGFjaXR5OjA7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXZSBjYW4gYWxzbyBtYWtlIHVzZSBvZiAqKkNTUyBLZXlmcmFtZXMqKiBieSByZWZlcmVuY2luZyB0aGUga2V5ZnJhbWUgYW5pbWF0aW9uIHdpdGhpbiB0aGUgc3RhcnRpbmcgQ1NTIGNsYXNzOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IHRoZXJlIGlzIG5vIG5lZWQgdG8gZGVmaW5lIGFueXRoaW5nIGluc2lkZSBvZiB0aGUgZGVzdGluYXRpb25cbiAqIENTUyBjbGFzcyBzaW5jZSB0aGUga2V5ZnJhbWUgd2lsbCB0YWtlIGNoYXJnZSBvZiB0aGUgYW5pbWF0aW9uICYjNDI7L1xuICogLmZhZGUubmctbGVhdmUge1xuICogICBhbmltYXRpb246IG15X2ZhZGVfYW5pbWF0aW9uIDAuNXMgbGluZWFyO1xuICogICAtd2Via2l0LWFuaW1hdGlvbjogbXlfZmFkZV9hbmltYXRpb24gMC41cyBsaW5lYXI7XG4gKiB9XG4gKlxuICogQGtleWZyYW1lcyBteV9mYWRlX2FuaW1hdGlvbiB7XG4gKiAgIGZyb20geyBvcGFjaXR5OjE7IH1cbiAqICAgdG8geyBvcGFjaXR5OjA7IH1cbiAqIH1cbiAqXG4gKiBALXdlYmtpdC1rZXlmcmFtZXMgbXlfZmFkZV9hbmltYXRpb24ge1xuICogICBmcm9tIHsgb3BhY2l0eToxOyB9XG4gKiAgIHRvIHsgb3BhY2l0eTowOyB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBGZWVsIGZyZWUgYWxzbyBtaXggdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lcyB0b2dldGhlciBhcyB3ZWxsIGFzIGFueSBvdGhlciBDU1MgY2xhc3NlcyBvbiB0aGUgc2FtZSBlbGVtZW50LlxuICpcbiAqICMjIyBDU1MgQ2xhc3MtYmFzZWQgQW5pbWF0aW9uc1xuICpcbiAqIENsYXNzLWJhc2VkIGFuaW1hdGlvbnMgKGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHZpYSBgbmdDbGFzc2AsIGBuZ1Nob3dgLCBgbmdIaWRlYCBhbmQgc29tZSBvdGhlciBkaXJlY3RpdmVzKSBoYXZlIGEgc2xpZ2h0bHkgZGlmZmVyZW50XG4gKiBuYW1pbmcgY29udmVudGlvbi4gQ2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgYmFzaWMgZW5vdWdoIHRoYXQgYSBzdGFuZGFyZCB0cmFuc2l0aW9uIG9yIGtleWZyYW1lIGNhbiBiZSByZWZlcmVuY2VkIG9uIHRoZSBjbGFzcyBiZWluZyBhZGRlZFxuICogYW5kIHJlbW92ZWQuXG4gKlxuICogRm9yIGV4YW1wbGUgaWYgd2Ugd2FudGVkIHRvIGRvIGEgQ1NTIGFuaW1hdGlvbiBmb3IgYG5nSGlkZWAgdGhlbiB3ZSBwbGFjZSBhbiBhbmltYXRpb24gb24gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctc2hvdz1cImJvb2xcIiBjbGFzcz1cImZhZGVcIj5cbiAqICAgU2hvdyBhbmQgaGlkZSBtZVxuICogPC9kaXY+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiYm9vbD0hYm9vbFwiPlRvZ2dsZTwvYnV0dG9uPlxuICpcbiAqIDxzdHlsZT5cbiAqIC5mYWRlLm5nLWhpZGUge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogPC9zdHlsZT5cbiAqIGBgYFxuICpcbiAqIEFsbCB0aGF0IGlzIGdvaW5nIG9uIGhlcmUgd2l0aCBuZ1Nob3cvbmdIaWRlIGJlaGluZCB0aGUgc2NlbmVzIGlzIHRoZSBgLm5nLWhpZGVgIGNsYXNzIGlzIGFkZGVkL3JlbW92ZWQgKHdoZW4gdGhlIGhpZGRlbiBzdGF0ZSBpcyB2YWxpZCkuIFNpbmNlXG4gKiBuZ1Nob3cgYW5kIG5nSGlkZSBhcmUgYW5pbWF0aW9uIGF3YXJlIHRoZW4gd2UgY2FuIG1hdGNoIHVwIGEgdHJhbnNpdGlvbiBhbmQgbmdBbmltYXRlIGhhbmRsZXMgdGhlIHJlc3QuXG4gKlxuICogSW4gYWRkaXRpb24gdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSBDU1MgY2xhc3MsIG5nQW5pbWF0ZSBhbHNvIHByb3ZpZGVzIHR3byBoZWxwZXIgbWV0aG9kcyB0aGF0IHdlIGNhbiB1c2UgdG8gZnVydGhlciBkZWNvcmF0ZSB0aGUgYW5pbWF0aW9uXG4gKiB3aXRoIENTUyBzdHlsZXMuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1jbGFzcz1cIntvbjpvbk9mZn1cIiBjbGFzcz1cImhpZ2hsaWdodFwiPlxuICogICBIaWdobGlnaHQgdGhpcyBib3hcbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cIm9uT2ZmPSFvbk9mZlwiPlRvZ2dsZTwvYnV0dG9uPlxuICpcbiAqIDxzdHlsZT5cbiAqIC5oaWdobGlnaHQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqIC5oaWdobGlnaHQub24tYWRkIHtcbiAqICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAqIH1cbiAqIC5oaWdobGlnaHQub24ge1xuICogICBiYWNrZ3JvdW5kOnllbGxvdztcbiAqIH1cbiAqIC5oaWdobGlnaHQub24tcmVtb3ZlIHtcbiAqICAgYmFja2dyb3VuZDpibGFjaztcbiAqIH1cbiAqIDwvc3R5bGU+XG4gKiBgYGBcbiAqXG4gKiBXZSBjYW4gYWxzbyBtYWtlIHVzZSBvZiBDU1Mga2V5ZnJhbWVzIGJ5IHBsYWNpbmcgdGhlbSB3aXRoaW4gdGhlIENTUyBjbGFzc2VzLlxuICpcbiAqXG4gKiAjIyMgQ1NTIFN0YWdnZXJpbmcgQW5pbWF0aW9uc1xuICogQSBTdGFnZ2VyaW5nIGFuaW1hdGlvbiBpcyBhIGNvbGxlY3Rpb24gb2YgYW5pbWF0aW9ucyB0aGF0IGFyZSBpc3N1ZWQgd2l0aCBhIHNsaWdodCBkZWxheSBpbiBiZXR3ZWVuIGVhY2ggc3VjY2Vzc2l2ZSBvcGVyYXRpb24gcmVzdWx0aW5nIGluIGFcbiAqIGN1cnRhaW4tbGlrZSBlZmZlY3QuIFRoZSBuZ0FuaW1hdGUgbW9kdWxlICh2ZXJzaW9ucyA+PTEuMikgc3VwcG9ydHMgc3RhZ2dlcmluZyBhbmltYXRpb25zIGFuZCB0aGUgc3RhZ2dlciBlZmZlY3QgY2FuIGJlXG4gKiBwZXJmb3JtZWQgYnkgY3JlYXRpbmcgYSAqKm5nLUVWRU5ULXN0YWdnZXIqKiBDU1MgY2xhc3MgYW5kIGF0dGFjaGluZyB0aGF0IGNsYXNzIHRvIHRoZSBiYXNlIENTUyBjbGFzcyB1c2VkIGZvclxuICogdGhlIGFuaW1hdGlvbi4gVGhlIHN0eWxlIHByb3BlcnR5IGV4cGVjdGVkIHdpdGhpbiB0aGUgc3RhZ2dlciBjbGFzcyBjYW4gZWl0aGVyIGJlIGEgKip0cmFuc2l0aW9uLWRlbGF5Kiogb3IgYW5cbiAqICoqYW5pbWF0aW9uLWRlbGF5KiogcHJvcGVydHkgKG9yIGJvdGggaWYgeW91ciBhbmltYXRpb24gY29udGFpbnMgYm90aCB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWUgYW5pbWF0aW9ucykuXG4gKlxuICogYGBgY3NzXG4gKiAubXktYW5pbWF0aW9uLm5nLWVudGVyIHtcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gY29kZSAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci1zdGFnZ2VyIHtcbiAqICAgLyYjNDI7IHRoaXMgd2lsbCBoYXZlIGEgMTAwbXMgZGVsYXkgYmV0d2VlbiBlYWNoIHN1Y2Nlc3NpdmUgbGVhdmUgYW5pbWF0aW9uICYjNDI7L1xuICogICB0cmFuc2l0aW9uLWRlbGF5OiAwLjFzO1xuICpcbiAqICAgLyYjNDI7IEFzIG9mIDEuNC40LCB0aGlzIG11c3QgYWx3YXlzIGJlIHNldDogaXQgc2lnbmFscyBuZ0FuaW1hdGVcbiAqICAgICB0byBub3QgYWNjaWRlbnRhbGx5IGluaGVyaXQgYSBkZWxheSBwcm9wZXJ0eSBmcm9tIGFub3RoZXIgQ1NTIGNsYXNzICYjNDI7L1xuICogICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcbiAqXG4gKiAgIC8mIzQyOyBpZiB5b3UgYXJlIHVzaW5nIGFuaW1hdGlvbnMgaW5zdGVhZCBvZiB0cmFuc2l0aW9ucyB5b3Ugc2hvdWxkIGNvbmZpZ3VyZSBhcyBmb2xsb3dzOlxuICogICAgIGFuaW1hdGlvbi1kZWxheTogMC4xcztcbiAqICAgICBhbmltYXRpb24tZHVyYXRpb246IDBzOyAmIzQyOy9cbiAqIH1cbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gc3R5bGVzICYjNDI7L1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBTdGFnZ2VyaW5nIGFuaW1hdGlvbnMgd29yayBieSBkZWZhdWx0IGluIG5nUmVwZWF0IChzbyBsb25nIGFzIHRoZSBDU1MgY2xhc3MgaXMgZGVmaW5lZCkuIE91dHNpZGUgb2YgbmdSZXBlYXQsIHRvIHVzZSBzdGFnZ2VyaW5nIGFuaW1hdGlvbnNcbiAqIG9uIHlvdXIgb3duLCB0aGV5IGNhbiBiZSB0cmlnZ2VyZWQgYnkgZmlyaW5nIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBzYW1lIGV2ZW50IG9uICRhbmltYXRlLiBIb3dldmVyLCB0aGUgcmVzdHJpY3Rpb25zIHN1cnJvdW5kaW5nIHRoaXNcbiAqIGFyZSB0aGF0IGVhY2ggb2YgdGhlIGVsZW1lbnRzIG11c3QgaGF2ZSB0aGUgc2FtZSBDU1MgY2xhc3NOYW1lIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQuIEEgc3RhZ2dlciBvcGVyYXRpb25cbiAqIHdpbGwgYWxzbyBiZSByZXNldCBpZiBvbmUgb3IgbW9yZSBhbmltYXRpb24gZnJhbWVzIGhhdmUgcGFzc2VkIHNpbmNlIHRoZSBtdWx0aXBsZSBjYWxscyB0byBgJGFuaW1hdGVgIHdlcmUgZmlyZWQuXG4gKlxuICogVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgaXNzdWUgdGhlICoqbmctbGVhdmUtc3RhZ2dlcioqIGV2ZW50IG9uIHRoZSBlbGVtZW50IHByb3ZpZGVkOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIga2lkcyA9IHBhcmVudC5jaGlsZHJlbigpO1xuICpcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMF0pOyAvL3N0YWdnZXIgaW5kZXg9MFxuICogJGFuaW1hdGUubGVhdmUoa2lkc1sxXSk7IC8vc3RhZ2dlciBpbmRleD0xXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzJdKTsgLy9zdGFnZ2VyIGluZGV4PTJcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbM10pOyAvL3N0YWdnZXIgaW5kZXg9M1xuICogJGFuaW1hdGUubGVhdmUoa2lkc1s0XSk7IC8vc3RhZ2dlciBpbmRleD00XG4gKlxuICogd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAqICAgLy9zdGFnZ2VyIGhhcyByZXNldCBpdHNlbGZcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s1XSk7IC8vc3RhZ2dlciBpbmRleD0wXG4gKiAgICRhbmltYXRlLmxlYXZlKGtpZHNbNl0pOyAvL3N0YWdnZXIgaW5kZXg9MVxuICpcbiAqICAgJHNjb3BlLiRkaWdlc3QoKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogU3RhZ2dlciBhbmltYXRpb25zIGFyZSBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgd2l0aGluIENTUy1kZWZpbmVkIGFuaW1hdGlvbnMuXG4gKlxuICogIyMjIFRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzXG4gKlxuICogV2hlbiBuZ0FuaW1hdGUgaXMgYW5pbWF0aW5nIGFuIGVsZW1lbnQgaXQgd2lsbCBhcHBseSB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyB0byB0aGUgZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24uXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IENTUyBjbGFzcyBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBvdmVyIChmb3IgYm90aCBKYXZhU2NyaXB0IGFuZCBDU1MtYmFzZWQgYW5pbWF0aW9ucykuXG4gKlxuICogVGhlcmVmb3JlLCBhbmltYXRpb25zIGNhbiBiZSBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgdXNpbmcgdGhpcyB0ZW1wb3JhcnkgY2xhc3MgZGlyZWN0bHkgdmlhIENTUy5cbiAqXG4gKiBgYGBjc3NcbiAqIC56aXBwZXIubmctYW5pbWF0ZSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogfVxuICogLnppcHBlci5uZy1lbnRlciB7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIC56aXBwZXIubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogLnppcHBlci5uZy1sZWF2ZSB7XG4gKiAgIG9wYWNpdHk6MTtcbiAqIH1cbiAqIC56aXBwZXIubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogYGBgXG4gKlxuICogKE5vdGUgdGhhdCB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyBpcyByZXNlcnZlZCBhbmQgaXQgY2Fubm90IGJlIGFwcGxpZWQgb24gYW4gZWxlbWVudCBkaXJlY3RseSBzaW5jZSBuZ0FuaW1hdGUgd2lsbCBhbHdheXMgcmVtb3ZlXG4gKiB0aGUgQ1NTIGNsYXNzIG9uY2UgYW4gYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuKVxuICpcbiAqXG4gKiAjIyMgVGhlIGBuZy1bZXZlbnRdLXByZXBhcmVgIGNsYXNzXG4gKlxuICogVGhpcyBpcyBhIHNwZWNpYWwgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCB0byBwcmV2ZW50IHVud2FudGVkIGZsaWNrZXJpbmcgLyBmbGFzaCBvZiBjb250ZW50IGJlZm9yZVxuICogdGhlIGFjdHVhbCBhbmltYXRpb24gc3RhcnRzLiBUaGUgY2xhc3MgaXMgYWRkZWQgYXMgc29vbiBhcyBhbiBhbmltYXRpb24gaXMgaW5pdGlhbGl6ZWQsIGJ1dCByZW1vdmVkXG4gKiBiZWZvcmUgdGhlIGFjdHVhbCBhbmltYXRpb24gc3RhcnRzIChhZnRlciB3YWl0aW5nIGZvciBhICRkaWdlc3QpLlxuICogSXQgaXMgYWxzbyBvbmx5IGFkZGVkIGZvciAqc3RydWN0dXJhbCogYW5pbWF0aW9ucyAoYGVudGVyYCwgYG1vdmVgLCBhbmQgYGxlYXZlYCkuXG4gKlxuICogSW4gcHJhY3RpY2UsIGZsaWNrZXJpbmcgY2FuIGFwcGVhciB3aGVuIG5lc3RpbmcgZWxlbWVudHMgd2l0aCBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgc3VjaCBhcyBgbmdJZmBcbiAqIGludG8gZWxlbWVudHMgdGhhdCBoYXZlIGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgc3VjaCBhcyBgbmdDbGFzc2AuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1jbGFzcz1cIntyZWQ6IG15UHJvcH1cIj5cbiAqICAgPGRpdiBuZy1jbGFzcz1cIntibHVlOiBteVByb3B9XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VcIiBuZy1pZj1cIm15UHJvcFwiPjwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogSXQgaXMgcG9zc2libGUgdGhhdCBkdXJpbmcgdGhlIGBlbnRlcmAgYW5pbWF0aW9uLCB0aGUgYC5tZXNzYWdlYCBkaXYgd2lsbCBiZSBicmllZmx5IHZpc2libGUgYmVmb3JlIGl0IHN0YXJ0cyBhbmltYXRpbmcuXG4gKiBJbiB0aGF0IGNhc2UsIHlvdSBjYW4gYWRkIHN0eWxlcyB0byB0aGUgQ1NTIHRoYXQgbWFrZSBzdXJlIHRoZSBlbGVtZW50IHN0YXlzIGhpZGRlbiBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHM6XG4gKlxuICogYGBgY3NzXG4gKiAubWVzc2FnZS5uZy1lbnRlci1wcmVwYXJlIHtcbiAqICAgb3BhY2l0eTogMDtcbiAqIH1cbiAqXG4gKiBgYGBcbiAqXG4gKiAjIyBKYXZhU2NyaXB0LWJhc2VkIEFuaW1hdGlvbnNcbiAqXG4gKiBuZ0FuaW1hdGUgYWxzbyBhbGxvd3MgZm9yIGFuaW1hdGlvbnMgdG8gYmUgY29uc3VtZWQgYnkgSmF2YVNjcmlwdCBjb2RlLiBUaGUgYXBwcm9hY2ggaXMgc2ltaWxhciB0byBDU1MtYmFzZWQgYW5pbWF0aW9ucyAod2hlcmUgdGhlcmUgaXMgYSBzaGFyZWRcbiAqIENTUyBjbGFzcyB0aGF0IGlzIHJlZmVyZW5jZWQgaW4gb3VyIEhUTUwgY29kZSkgYnV0IGluIGFkZGl0aW9uIHdlIG5lZWQgdG8gcmVnaXN0ZXIgdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIG9uIHRoZSBtb2R1bGUuIEJ5IG1ha2luZyB1c2Ugb2YgdGhlXG4gKiBgbW9kdWxlLmFuaW1hdGlvbigpYCBtb2R1bGUgZnVuY3Rpb24gd2UgY2FuIHJlZ2lzdGVyIHRoZSBhbmltYXRpb24uXG4gKlxuICogTGV0J3Mgc2VlIGFuIGV4YW1wbGUgb2YgYSBlbnRlci9sZWF2ZSBhbmltYXRpb24gdXNpbmcgYG5nUmVwZWF0YDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIml0ZW0gaW4gaXRlbXNcIiBjbGFzcz1cInNsaWRlXCI+XG4gKiAgIHt7IGl0ZW0gfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogU2VlIHRoZSAqKnNsaWRlKiogQ1NTIGNsYXNzPyBMZXQncyB1c2UgdGhhdCBjbGFzcyB0byBkZWZpbmUgYW4gYW5pbWF0aW9uIHRoYXQgd2UnbGwgc3RydWN0dXJlIGluIG91ciBtb2R1bGUgY29kZSBieSB1c2luZyBgbW9kdWxlLmFuaW1hdGlvbmA6XG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgW2Z1bmN0aW9uKCkge1xuICogICByZXR1cm4ge1xuICogICAgIC8vIG1ha2Ugbm90ZSB0aGF0IG90aGVyIGV2ZW50cyAobGlrZSBhZGRDbGFzcy9yZW1vdmVDbGFzcylcbiAqICAgICAvLyBoYXZlIGRpZmZlcmVudCBmdW5jdGlvbiBpbnB1dCBwYXJhbWV0ZXJzXG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgalF1ZXJ5KGVsZW1lbnQpLmZhZGVJbigxMDAwLCBkb25lRm4pO1xuICpcbiAqICAgICAgIC8vIHJlbWVtYmVyIHRvIGNhbGwgZG9uZUZuIHNvIHRoYXQgYW5ndWxhclxuICogICAgICAgLy8ga25vd3MgdGhhdCB0aGUgYW5pbWF0aW9uIGhhcyBjb25jbHVkZWRcbiAqICAgICB9LFxuICpcbiAqICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIGpRdWVyeShlbGVtZW50KS5mYWRlSW4oMTAwMCwgZG9uZUZuKTtcbiAqICAgICB9LFxuICpcbiAqICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZU91dCgxMDAwLCBkb25lRm4pO1xuICogICAgIH1cbiAqICAgfVxuICogfV0pO1xuICogYGBgXG4gKlxuICogVGhlIG5pY2UgdGhpbmcgYWJvdXQgSlMtYmFzZWQgYW5pbWF0aW9ucyBpcyB0aGF0IHdlIGNhbiBpbmplY3Qgb3RoZXIgc2VydmljZXMgYW5kIG1ha2UgdXNlIG9mIGFkdmFuY2VkIGFuaW1hdGlvbiBsaWJyYXJpZXMgc3VjaCBhc1xuICogZ3JlZW5zb2NrLmpzIGFuZCB2ZWxvY2l0eS5qcy5cbiAqXG4gKiBJZiBvdXIgYW5pbWF0aW9uIGNvZGUgY2xhc3MtYmFzZWQgKG1lYW5pbmcgdGhhdCBzb21ldGhpbmcgbGlrZSBgbmdDbGFzc2AsIGBuZ0hpZGVgIGFuZCBgbmdTaG93YCB0cmlnZ2VycyBpdCkgdGhlbiB3ZSBjYW4gc3RpbGwgZGVmaW5lXG4gKiBvdXIgYW5pbWF0aW9ucyBpbnNpZGUgb2YgdGhlIHNhbWUgcmVnaXN0ZXJlZCBhbmltYXRpb24sIGhvd2V2ZXIsIHRoZSBmdW5jdGlvbiBpbnB1dCBhcmd1bWVudHMgYXJlIGEgYml0IGRpZmZlcmVudDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWNsYXNzPVwiY29sb3JcIiBjbGFzcz1cImNvbG9yZnVsXCI+XG4gKiAgIHRoaXMgYm94IGlzIG1vb2R5XG4gKiA8L2Rpdj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcj0ncmVkJ1wiPkNoYW5nZSB0byByZWQ8L2J1dHRvbj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcj0nYmx1ZSdcIj5DaGFuZ2UgdG8gYmx1ZTwvYnV0dG9uPlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9yPSdncmVlbidcIj5DaGFuZ2UgdG8gZ3JlZW48L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5jb2xvcmZ1bCcsIFtmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lRm4pIHtcbiAqICAgICAgIC8vIGRvIHNvbWUgY29vbCBhbmltYXRpb24gYW5kIGNhbGwgdGhlIGRvbmVGblxuICogICAgIH0sXG4gKiAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZUZuKSB7XG4gKiAgICAgICAvLyBkbyBzb21lIGNvb2wgYW5pbWF0aW9uIGFuZCBjYWxsIHRoZSBkb25lRm5cbiAqICAgICB9LFxuICogICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzLCByZW1vdmVkQ2xhc3MsIGRvbmVGbikge1xuICogICAgICAgLy8gZG8gc29tZSBjb29sIGFuaW1hdGlvbiBhbmQgY2FsbCB0aGUgZG9uZUZuXG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBDU1MgKyBKUyBBbmltYXRpb25zIFRvZ2V0aGVyXG4gKlxuICogQW5ndWxhckpTIDEuNCBhbmQgaGlnaGVyIGhhcyB0YWtlbiBzdGVwcyB0byBtYWtlIHRoZSBhbWFsZ2FtYXRpb24gb2YgQ1NTIGFuZCBKUyBhbmltYXRpb25zIG1vcmUgZmxleGlibGUuIEhvd2V2ZXIsIHVubGlrZSBlYXJsaWVyIHZlcnNpb25zIG9mIEFuZ3VsYXIsXG4gKiBkZWZpbmluZyBDU1MgYW5kIEpTIGFuaW1hdGlvbnMgdG8gd29yayBvZmYgb2YgdGhlIHNhbWUgQ1NTIGNsYXNzIHdpbGwgbm90IHdvcmsgYW55bW9yZS4gVGhlcmVmb3JlIHRoZSBleGFtcGxlIGJlbG93IHdpbGwgb25seSByZXN1bHQgaW4gKipKUyBhbmltYXRpb25zIHRha2luZ1xuICogY2hhcmdlIG9mIHRoZSBhbmltYXRpb24qKjpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWlmPVwiYm9vbFwiIGNsYXNzPVwic2xpZGVcIj5cbiAqICAgU2xpZGUgaW4gYW5kIG91dFxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogbXlNb2R1bGUuYW5pbWF0aW9uKCcuc2xpZGUnLCBbZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgalF1ZXJ5KGVsZW1lbnQpLnNsaWRlSW4oMTAwMCwgZG9uZUZuKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqIGBgYGNzc1xuICogLnNsaWRlLm5nLWVudGVyIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDBweCk7XG4gKiB9XG4gKiAuc2xpZGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBEb2VzIHRoaXMgbWVhbiB0aGF0IENTUyBhbmQgSlMgYW5pbWF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcj8gRG8gSlMtYmFzZWQgYW5pbWF0aW9ucyBhbHdheXMgaGF2ZSBoaWdoZXIgcHJpb3JpdHk/IFdlIGNhbiBtYWtlIHVwIGZvciB0aGVcbiAqIGxhY2sgb2YgQ1NTIGFuaW1hdGlvbnMgYnkgdXNpbmcgdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB0byB0cmlnZ2VyIG91ciBvd24gdHdlYWtlZC1vdXQsIENTUy1iYXNlZCBhbmltYXRpb25zIGRpcmVjdGx5IGZyb21cbiAqIG91ciBvd24gSlMtYmFzZWQgYW5pbWF0aW9uIGNvZGU6XG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiogICAgICAgIC8vIHRoaXMgd2lsbCB0cmlnZ2VyIGAuc2xpZGUubmctZW50ZXJgIGFuZCBgLnNsaWRlLm5nLWVudGVyLWFjdGl2ZWAuXG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICogICAgICAgICBldmVudDogJ2VudGVyJyxcbiAqICAgICAgICAgc3RydWN0dXJhbDogdHJ1ZVxuICogICAgICAgfSk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgbmljZSB0aGluZyBoZXJlIGlzIHRoYXQgd2UgY2FuIHNhdmUgYmFuZHdpZHRoIGJ5IHN0aWNraW5nIHRvIG91ciBDU1MtYmFzZWQgYW5pbWF0aW9uIGNvZGUgYW5kIHdlIGRvbid0IG5lZWQgdG8gcmVseSBvbiBhIDNyZC1wYXJ0eSBhbmltYXRpb24gZnJhbWV3b3JrLlxuICpcbiAqIFRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2UgaXMgdmVyeSBwb3dlcmZ1bCBzaW5jZSB3ZSBjYW4gZmVlZCBpbiBhbGwga2luZHMgb2YgZXh0cmEgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkIGFuZCBmZWQgaW50byBhIENTUyB0cmFuc2l0aW9uIG9yXG4gKiBrZXlmcmFtZSBhbmltYXRpb24uIEZvciBleGFtcGxlIGlmIHdlIHdhbnRlZCB0byBhbmltYXRlIHRoZSBoZWlnaHQgb2YgYW4gZWxlbWVudCB3aGlsZSBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMgdGhlbiB3ZSBjYW4gZG8gc28gYnkgcHJvdmlkaW5nIHRoYXRcbiAqIGRhdGEgaW50byBgJGFuaW1hdGVDc3NgIGRpcmVjdGx5OlxuICpcbiAqIGBgYGpzXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xuICogICByZXR1cm4ge1xuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICogICAgICAgICBldmVudDogJ2VudGVyJyxcbiAqICAgICAgICAgc3RydWN0dXJhbDogdHJ1ZSxcbiAqICAgICAgICAgYWRkQ2xhc3M6ICdtYXJvb24tc2V0dGluZycsXG4gKiAgICAgICAgIGZyb206IHsgaGVpZ2h0OjAgfSxcbiAqICAgICAgICAgdG86IHsgaGVpZ2h0OiAyMDAgfVxuICogICAgICAgfSk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBOb3cgd2UgY2FuIGZpbGwgaW4gdGhlIHJlc3QgdmlhIG91ciB0cmFuc2l0aW9uIENTUyBjb2RlOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IHRoZSB0cmFuc2l0aW9uIHRlbGxzIG5nQW5pbWF0ZSB0byBtYWtlIHRoZSBhbmltYXRpb24gaGFwcGVuICYjNDI7L1xuICogLnNsaWRlLm5nLWVudGVyIHsgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7IH1cbiAqXG4gKiAvJiM0MjsgdGhpcyBleHRyYSBDU1MgY2xhc3Mgd2lsbCBiZSBhYnNvcmJlZCBpbnRvIHRoZSB0cmFuc2l0aW9uXG4gKiBzaW5jZSB0aGUgJGFuaW1hdGVDc3MgY29kZSBpcyBhZGRpbmcgdGhlIGNsYXNzICYjNDI7L1xuICogLm1hcm9vbi1zZXR0aW5nIHsgYmFja2dyb3VuZDpyZWQ7IH1cbiAqIGBgYFxuICpcbiAqIEFuZCBgJGFuaW1hdGVDc3NgIHdpbGwgZmlndXJlIG91dCB0aGUgcmVzdC4gSnVzdCBtYWtlIHN1cmUgdG8gaGF2ZSB0aGUgYGRvbmUoKWAgY2FsbGJhY2sgZmlyZSB0aGUgYGRvbmVGbmAgZnVuY3Rpb24gdG8gc2lnbmFsIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBvdmVyLlxuICpcbiAqIFRvIGxlYXJuIG1vcmUgYWJvdXQgd2hhdCdzIHBvc3NpYmxlIGJlIHN1cmUgdG8gdmlzaXQgdGhlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgJGFuaW1hdGVDc3Mgc2VydmljZX0uXG4gKlxuICogIyMgQW5pbWF0aW9uIEFuY2hvcmluZyAodmlhIGBuZy1hbmltYXRlLXJlZmApXG4gKlxuICogbmdBbmltYXRlIGluIEFuZ3VsYXJKUyAxLjQgY29tZXMgcGFja2VkIHdpdGggdGhlIGFiaWxpdHkgdG8gY3Jvc3MtYW5pbWF0ZSBlbGVtZW50cyBiZXR3ZWVuXG4gKiBzdHJ1Y3R1cmFsIGFyZWFzIG9mIGFuIGFwcGxpY2F0aW9uIChsaWtlIHZpZXdzKSBieSBwYWlyaW5nIHVwIGVsZW1lbnRzIHVzaW5nIGFuIGF0dHJpYnV0ZVxuICogY2FsbGVkIGBuZy1hbmltYXRlLXJlZmAuXG4gKlxuICogTGV0J3Mgc2F5IGZvciBleGFtcGxlIHdlIGhhdmUgdHdvIHZpZXdzIHRoYXQgYXJlIG1hbmFnZWQgYnkgYG5nLXZpZXdgIGFuZCB3ZSB3YW50IHRvIHNob3dcbiAqIHRoYXQgdGhlcmUgaXMgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0d28gY29tcG9uZW50cyBzaXR1YXRlZCBpbiB3aXRoaW4gdGhlc2Ugdmlld3MuIEJ5IHVzaW5nIHRoZVxuICogYG5nLWFuaW1hdGUtcmVmYCBhdHRyaWJ1dGUgd2UgY2FuIGlkZW50aWZ5IHRoYXQgdGhlIHR3byBjb21wb25lbnRzIGFyZSBwYWlyZWQgdG9nZXRoZXIgYW5kIHdlXG4gKiBjYW4gdGhlbiBhdHRhY2ggYW4gYW5pbWF0aW9uLCB3aGljaCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdmlldyBjaGFuZ2VzLlxuICpcbiAqIFNheSBmb3IgZXhhbXBsZSB3ZSBoYXZlIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUgY29kZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIGluZGV4Lmh0bWwgLS0+XG4gKiA8ZGl2IG5nLXZpZXcgY2xhc3M9XCJ2aWV3LWFuaW1hdGlvblwiPlxuICogPC9kaXY+XG4gKlxuICogPCEtLSBob21lLmh0bWwgLS0+XG4gKiA8YSBocmVmPVwiIy9iYW5uZXItcGFnZVwiPlxuICogICA8aW1nIHNyYz1cIi4vYmFubmVyLmpwZ1wiIGNsYXNzPVwiYmFubmVyXCIgbmctYW5pbWF0ZS1yZWY9XCJiYW5uZXJcIj5cbiAqIDwvYT5cbiAqXG4gKiA8IS0tIGJhbm5lci1wYWdlLmh0bWwgLS0+XG4gKiA8aW1nIHNyYz1cIi4vYmFubmVyLmpwZ1wiIGNsYXNzPVwiYmFubmVyXCIgbmctYW5pbWF0ZS1yZWY9XCJiYW5uZXJcIj5cbiAqIGBgYFxuICpcbiAqIE5vdywgd2hlbiB0aGUgdmlldyBjaGFuZ2VzIChvbmNlIHRoZSBsaW5rIGlzIGNsaWNrZWQpLCBuZ0FuaW1hdGUgd2lsbCBleGFtaW5lIHRoZVxuICogSFRNTCBjb250ZW50cyB0byBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaCByZWZlcmVuY2UgYmV0d2VlbiBhbnkgY29tcG9uZW50cyBpbiB0aGUgdmlld1xuICogdGhhdCBpcyBsZWF2aW5nIGFuZCB0aGUgdmlldyB0aGF0IGlzIGVudGVyaW5nLiBJdCB3aWxsIHNjYW4gYm90aCB0aGUgdmlldyB3aGljaCBpcyBiZWluZ1xuICogcmVtb3ZlZCAobGVhdmUpIGFuZCBpbnNlcnRlZCAoZW50ZXIpIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55IHBhaXJlZCBET00gZWxlbWVudHMgdGhhdFxuICogY29udGFpbiBhIG1hdGNoaW5nIHJlZiB2YWx1ZS5cbiAqXG4gKiBUaGUgdHdvIGltYWdlcyBtYXRjaCBzaW5jZSB0aGV5IHNoYXJlIHRoZSBzYW1lIHJlZiB2YWx1ZS4gbmdBbmltYXRlIHdpbGwgbm93IGNyZWF0ZSBhXG4gKiB0cmFuc3BvcnQgZWxlbWVudCAod2hpY2ggaXMgYSBjbG9uZSBvZiB0aGUgZmlyc3QgaW1hZ2UgZWxlbWVudCkgYW5kIGl0IHdpbGwgdGhlbiBhdHRlbXB0XG4gKiB0byBhbmltYXRlIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2Vjb25kIGltYWdlIGVsZW1lbnQgaW4gdGhlIG5leHQgdmlldy4gRm9yIHRoZSBhbmltYXRpb24gdG9cbiAqIHdvcmsgYSBzcGVjaWFsIENTUyBjbGFzcyBjYWxsZWQgYG5nLWFuY2hvcmAgd2lsbCBiZSBhZGRlZCB0byB0aGUgdHJhbnNwb3J0ZWQgZWxlbWVudC5cbiAqXG4gKiBXZSBjYW4gbm93IGF0dGFjaCBhIHRyYW5zaXRpb24gb250byB0aGUgYC5iYW5uZXIubmctYW5jaG9yYCBDU1MgY2xhc3MgYW5kIHRoZW5cbiAqIG5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgZW50aXJlIHRyYW5zaXRpb24gZm9yIHVzIGFzIHdlbGwgYXMgdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mXG4gKiBhbnkgY2hhbmdlcyBvZiBDU1MgY2xhc3NlcyBiZXR3ZWVuIHRoZSBlbGVtZW50czpcbiAqXG4gKiBgYGBjc3NcbiAqIC5iYW5uZXIubmctYW5jaG9yIHtcbiAqICAgLyYjNDI7IHRoaXMgYW5pbWF0aW9uIHdpbGwgbGFzdCBmb3IgMSBzZWNvbmQgc2luY2UgdGhlcmUgYXJlXG4gKiAgICAgICAgICB0d28gcGhhc2VzIHRvIHRoZSBhbmltYXRpb24gKGFuIGBpbmAgYW5kIGFuIGBvdXRgIHBoYXNlKSAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXZSBhbHNvICoqbXVzdCoqIGluY2x1ZGUgYW5pbWF0aW9ucyBmb3IgdGhlIHZpZXdzIHRoYXQgYXJlIGJlaW5nIGVudGVyZWQgYW5kIHJlbW92ZWRcbiAqIChvdGhlcndpc2UgYW5jaG9yaW5nIHdvdWxkbid0IGJlIHBvc3NpYmxlIHNpbmNlIHRoZSBuZXcgdmlldyB3b3VsZCBiZSBpbnNlcnRlZCByaWdodCBhd2F5KS5cbiAqXG4gKiBgYGBjc3NcbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1lbnRlciwgLnZpZXctYW5pbWF0aW9uLm5nLWxlYXZlIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIHBvc2l0aW9uOmZpeGVkO1xuICogICBsZWZ0OjA7XG4gKiAgIHRvcDowO1xuICogICB3aWR0aDoxMDAlO1xuICogfVxuICogLnZpZXctYW5pbWF0aW9uLm5nLWVudGVyIHtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSk7XG4gKiB9XG4gKiAudmlldy1hbmltYXRpb24ubmctbGVhdmUsXG4gKiAudmlldy1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO1xuICogfVxuICogLnZpZXctYW5pbWF0aW9uLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIE5vdyB3ZSBjYW4ganVtcCBiYWNrIHRvIHRoZSBhbmNob3IgYW5pbWF0aW9uLiBXaGVuIHRoZSBhbmltYXRpb24gaGFwcGVucywgdGhlcmUgYXJlIHR3byBzdGFnZXMgdGhhdCBvY2N1cjpcbiAqIGFuIGBvdXRgIGFuZCBhbiBgaW5gIHN0YWdlLiBUaGUgYG91dGAgc3RhZ2UgaGFwcGVucyBmaXJzdCBhbmQgdGhhdCBpcyB3aGVuIHRoZSBlbGVtZW50IGlzIGFuaW1hdGVkIGF3YXlcbiAqIGZyb20gaXRzIG9yaWdpbi4gT25jZSB0aGF0IGFuaW1hdGlvbiBpcyBvdmVyIHRoZW4gdGhlIGBpbmAgc3RhZ2Ugb2NjdXJzIHdoaWNoIGFuaW1hdGVzIHRoZVxuICogZWxlbWVudCB0byBpdHMgZGVzdGluYXRpb24uIFRoZSByZWFzb24gd2h5IHRoZXJlIGFyZSB0d28gYW5pbWF0aW9ucyBpcyB0byBnaXZlIGVub3VnaCB0aW1lXG4gKiBmb3IgdGhlIGVudGVyIGFuaW1hdGlvbiBvbiB0aGUgbmV3IGVsZW1lbnQgdG8gYmUgcmVhZHkuXG4gKlxuICogVGhlIGV4YW1wbGUgYWJvdmUgc2V0cyB1cCBhIHRyYW5zaXRpb24gZm9yIGJvdGggdGhlIGluIGFuZCBvdXQgcGhhc2VzLCBidXQgd2UgY2FuIGFsc28gdGFyZ2V0IHRoZSBvdXQgb3JcbiAqIGluIHBoYXNlcyBkaXJlY3RseSB2aWEgYG5nLWFuY2hvci1vdXRgIGFuZCBgbmctYW5jaG9yLWluYC5cbiAqXG4gKiBgYGBjc3NcbiAqIC5iYW5uZXIubmctYW5jaG9yLW91dCB7XG4gKiAgIHRyYW5zaXRpb246IDAuNXMgbGluZWFyIGFsbDtcbiAqXG4gKiAgIC8mIzQyOyB0aGUgc2NhbGUgd2lsbCBiZSBhcHBsaWVkIGR1cmluZyB0aGUgb3V0IGFuaW1hdGlvbixcbiAqICAgICAgICAgIGJ1dCB3aWxsIGJlIGFuaW1hdGVkIGF3YXkgd2hlbiB0aGUgaW4gYW5pbWF0aW9uIHJ1bnMgJiM0MjsvXG4gKiAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcbiAqIH1cbiAqXG4gKiAuYmFubmVyLm5nLWFuY2hvci1pbiB7XG4gKiAgIHRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqXG4gKiAjIyMgQW5jaG9yaW5nIERlbW9cbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvcmluZ0V4YW1wbGVcIlxuICAgICAgICAgICBuYW1lPVwiYW5jaG9yaW5nRXhhbXBsZVwiXG4gICAgICAgICAgIGlkPVwiYW5jaG9yaW5nRXhhbXBsZVwiXG4gICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanM7YW5ndWxhci1yb3V0ZS5qc1wiXG4gICAgICAgICAgIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxhIGhyZWY9XCIjIS9cIj5Ib21lPC9hPlxuICAgICAgPGhyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwidmlldy1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBuZy12aWV3IGNsYXNzPVwidmlld1wiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JpbmdFeGFtcGxlJywgWyduZ0FuaW1hdGUnLCAnbmdSb3V0ZSddKVxuICAgICAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2hvbWUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXIgYXMgaG9tZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvcHJvZmlsZS86aWQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2ZpbGUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHJvZmlsZUNvbnRyb2xsZXIgYXMgcHJvZmlsZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfV0pXG4gICAgICAgIC5ydW4oWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICAgICAgICAgICRyb290U2NvcGUucmVjb3JkcyA9IFtcbiAgICAgICAgICAgIHsgaWQ6IDEsIHRpdGxlOiAnTWlzcyBCZXVsYWggUm9vYicgfSxcbiAgICAgICAgICAgIHsgaWQ6IDIsIHRpdGxlOiAnVHJlbnQgTW9yaXNzZXR0ZScgfSxcbiAgICAgICAgICAgIHsgaWQ6IDMsIHRpdGxlOiAnTWlzcyBBdmEgUG91cm9zJyB9LFxuICAgICAgICAgICAgeyBpZDogNCwgdGl0bGU6ICdSb2QgUG91cm9zJyB9LFxuICAgICAgICAgICAgeyBpZDogNSwgdGl0bGU6ICdBYmR1bCBSaWNlJyB9LFxuICAgICAgICAgICAgeyBpZDogNiwgdGl0bGU6ICdMYXVyaWUgUnV0aGVyZm9yZCBTci4nIH0sXG4gICAgICAgICAgICB7IGlkOiA3LCB0aXRsZTogJ05ha2lhIE1jTGF1Z2hsaW4nIH0sXG4gICAgICAgICAgICB7IGlkOiA4LCB0aXRsZTogJ0pvcmRvbiBCbGFuZGEgRFZNJyB9LFxuICAgICAgICAgICAgeyBpZDogOSwgdGl0bGU6ICdSaG9kYSBIYW5kJyB9LFxuICAgICAgICAgICAgeyBpZDogMTAsIHRpdGxlOiAnQWxleGFuZHJlYSBTYXVlcicgfVxuICAgICAgICAgIF07XG4gICAgICAgIH1dKVxuICAgICAgICAuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBbZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy9lbXB0eVxuICAgICAgICB9XSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDb250cm9sbGVyJywgWyckcm9vdFNjb3BlJywgJyRyb3V0ZVBhcmFtcycsXG4gICAgICAgICAgICBmdW5jdGlvbiBQcm9maWxlQ29udHJvbGxlcigkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCgkcm91dGVQYXJhbXMuaWQsIDEwKTtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gJHJvb3RTY29wZS5yZWNvcmRzW2luZGV4IC0gMV07XG5cbiAgICAgICAgICB0aGlzLnRpdGxlID0gcmVjb3JkLnRpdGxlO1xuICAgICAgICAgIHRoaXMuaWQgPSByZWNvcmQuaWQ7XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImhvbWUuaHRtbFwiPlxuICAgICAgPGgyPldlbGNvbWUgdG8gdGhlIGhvbWUgcGFnZTwvaDE+XG4gICAgICA8cD5QbGVhc2UgY2xpY2sgb24gYW4gZWxlbWVudDwvcD5cbiAgICAgIDxhIGNsYXNzPVwicmVjb3JkXCJcbiAgICAgICAgIG5nLWhyZWY9XCIjIS9wcm9maWxlL3t7IHJlY29yZC5pZCB9fVwiXG4gICAgICAgICBuZy1hbmltYXRlLXJlZj1cInt7IHJlY29yZC5pZCB9fVwiXG4gICAgICAgICBuZy1yZXBlYXQ9XCJyZWNvcmQgaW4gcmVjb3Jkc1wiPlxuICAgICAgICB7eyByZWNvcmQudGl0bGUgfX1cbiAgICAgIDwvYT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb2ZpbGUuaHRtbFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInByb2ZpbGUgcmVjb3JkXCIgbmctYW5pbWF0ZS1yZWY9XCJ7eyBwcm9maWxlLmlkIH19XCI+XG4gICAgICAgIHt7IHByb2ZpbGUudGl0bGUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5yZWNvcmQge1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBmb250LXNpemU6MjBweDtcbiAgICAgIH1cbiAgICAgIC5wcm9maWxlIHtcbiAgICAgICAgYmFja2dyb3VuZDpibGFjaztcbiAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgIGZvbnQtc2l6ZToxMDBweDtcbiAgICAgIH1cbiAgICAgIC52aWV3LWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgfVxuICAgICAgLnZpZXctY29udGFpbmVyID4gLnZpZXcubmctYW5pbWF0ZSB7XG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICB3aWR0aDoxMDAlO1xuICAgICAgICBtaW4taGVpZ2h0OjUwMHB4O1xuICAgICAgfVxuICAgICAgLnZpZXcubmctZW50ZXIsIC52aWV3Lm5nLWxlYXZlLFxuICAgICAgLnJlY29yZC5uZy1hbmNob3Ige1xuICAgICAgICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAgICAgIH1cbiAgICAgIC52aWV3Lm5nLWVudGVyIHtcbiAgICAgICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSk7XG4gICAgICB9XG4gICAgICAudmlldy5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUsIC52aWV3Lm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO1xuICAgICAgfVxuICAgICAgLnZpZXcubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpO1xuICAgICAgfVxuICAgICAgLnJlY29yZC5uZy1hbmNob3Itb3V0IHtcbiAgICAgICAgYmFja2dyb3VuZDpyZWQ7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKlxuICogIyMjIEhvdyBpcyB0aGUgZWxlbWVudCB0cmFuc3BvcnRlZD9cbiAqXG4gKiBXaGVuIGFuIGFuY2hvciBhbmltYXRpb24gb2NjdXJzLCBuZ0FuaW1hdGUgd2lsbCBjbG9uZSB0aGUgc3RhcnRpbmcgZWxlbWVudCBhbmQgcG9zaXRpb24gaXQgZXhhY3RseSB3aGVyZSB0aGUgc3RhcnRpbmdcbiAqIGVsZW1lbnQgaXMgbG9jYXRlZCBvbiBzY3JlZW4gdmlhIGFic29sdXRlIHBvc2l0aW9uaW5nLiBUaGUgY2xvbmVkIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5zaWRlIG9mIHRoZSByb290IGVsZW1lbnRcbiAqIG9mIHRoZSBhcHBsaWNhdGlvbiAod2hlcmUgbmctYXBwIHdhcyBkZWZpbmVkKSBhbmQgYWxsIG9mIHRoZSBDU1MgY2xhc3NlcyBvZiB0aGUgc3RhcnRpbmcgZWxlbWVudCB3aWxsIGJlIGFwcGxpZWQuIFRoZVxuICogZWxlbWVudCB3aWxsIHRoZW4gYW5pbWF0ZSBpbnRvIHRoZSBgb3V0YCBhbmQgYGluYCBhbmltYXRpb25zIGFuZCB3aWxsIGV2ZW50dWFsbHkgcmVhY2ggdGhlIGNvb3JkaW5hdGVzIGFuZCBtYXRjaFxuICogdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnQuIER1cmluZyB0aGUgZW50aXJlIGFuaW1hdGlvbiBhIENTUyBjbGFzcyBvZiBgLm5nLWFuaW1hdGUtc2hpbWAgd2lsbCBiZSBhcHBsaWVkXG4gKiB0byBib3RoIHRoZSBzdGFydGluZyBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgaW4gb3JkZXIgdG8gaGlkZSB0aGVtIGZyb20gYmVpbmcgdmlzaWJsZSAodGhlIENTUyBzdHlsaW5nIGZvciB0aGUgY2xhc3NcbiAqIGlzOiBgdmlzaWJpbGl0eTpoaWRkZW5gKS4gT25jZSB0aGUgYW5jaG9yIHJlYWNoZXMgaXRzIGRlc3RpbmF0aW9uIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkIGFuZCB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICogd2lsbCBiZWNvbWUgdmlzaWJsZSBzaW5jZSB0aGUgc2hpbSBjbGFzcyB3aWxsIGJlIHJlbW92ZWQuXG4gKlxuICogIyMjIEhvdyBpcyB0aGUgbW9ycGhpbmcgaGFuZGxlZD9cbiAqXG4gKiBDU1MgQW5jaG9yaW5nIHJlbGllcyBvbiB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWVzIGFuZCB0aGUgaW50ZXJuYWwgY29kZSBpcyBpbnRlbGxpZ2VudCBlbm91Z2ggdG8gZmlndXJlIG91dFxuICogd2hhdCBDU1MgY2xhc3NlcyBkaWZmZXIgYmV0d2VlbiB0aGUgc3RhcnRpbmcgZWxlbWVudCBhbmQgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnQuIFRoZXNlIGRpZmZlcmVudCBDU1MgY2xhc3Nlc1xuICogd2lsbCBiZSBhZGRlZC9yZW1vdmVkIG9uIHRoZSBhbmNob3IgZWxlbWVudCBhbmQgYSB0cmFuc2l0aW9uIHdpbGwgYmUgYXBwbGllZCAodGhlIHRyYW5zaXRpb24gdGhhdCBpcyBwcm92aWRlZFxuICogaW4gdGhlIGFuY2hvciBjbGFzcykuIExvbmcgc3Rvcnkgc2hvcnQsIG5nQW5pbWF0ZSB3aWxsIGZpZ3VyZSBvdXQgd2hhdCBjbGFzc2VzIHRvIGFkZCBhbmQgcmVtb3ZlIHdoaWNoIHdpbGxcbiAqIG1ha2UgdGhlIHRyYW5zaXRpb24gb2YgdGhlIGVsZW1lbnQgYXMgc21vb3RoIGFuZCBhdXRvbWF0aWMgYXMgcG9zc2libGUuIEJlIHN1cmUgdG8gdXNlIHNpbXBsZSBDU1MgY2xhc3NlcyB0aGF0XG4gKiBkbyBub3QgcmVseSBvbiBET00gbmVzdGluZyBzdHJ1Y3R1cmUgc28gdGhhdCB0aGUgYW5jaG9yIGVsZW1lbnQgYXBwZWFycyB0aGUgc2FtZSBhcyB0aGUgc3RhcnRpbmcgZWxlbWVudCAoc2luY2VcbiAqIHRoZSBjbG9uZWQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIG9mIHJvb3QgZWxlbWVudCB3aGljaCBpcyBsaWtlbHkgY2xvc2UgdG8gdGhlIGJvZHkgZWxlbWVudCkuXG4gKlxuICogTm90ZSB0aGF0IGlmIHRoZSByb290IGVsZW1lbnQgaXMgb24gdGhlIGA8aHRtbD5gIGVsZW1lbnQgdGhlbiB0aGUgY2xvbmVkIG5vZGUgd2lsbCBiZSBwbGFjZWQgaW5zaWRlIG9mIGJvZHkuXG4gKlxuICpcbiAqICMjIFVzaW5nICRhbmltYXRlIGluIHlvdXIgZGlyZWN0aXZlIGNvZGVcbiAqXG4gKiBTbyBmYXIgd2UndmUgZXhwbG9yZWQgaG93IHRvIGZlZWQgaW4gYW5pbWF0aW9ucyBpbnRvIGFuIEFuZ3VsYXIgYXBwbGljYXRpb24sIGJ1dCBob3cgZG8gd2UgdHJpZ2dlciBhbmltYXRpb25zIHdpdGhpbiBvdXIgb3duIGRpcmVjdGl2ZXMgaW4gb3VyIGFwcGxpY2F0aW9uP1xuICogQnkgaW5qZWN0aW5nIHRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgaW50byBvdXIgZGlyZWN0aXZlIGNvZGUsIHdlIGNhbiB0cmlnZ2VyIHN0cnVjdHVyYWwgYW5kIGNsYXNzLWJhc2VkIGhvb2tzIHdoaWNoIGNhbiB0aGVuIGJlIGNvbnN1bWVkIGJ5IGFuaW1hdGlvbnMuIExldCdzXG4gKiBpbWFnaW5lIHdlIGhhdmUgYSBncmVldGluZyBib3ggdGhhdCBzaG93cyBhbmQgaGlkZXMgaXRzZWxmIHdoZW4gdGhlIGRhdGEgY2hhbmdlc1xuICpcbiAqIGBgYGh0bWxcbiAqIDxncmVldGluZy1ib3ggYWN0aXZlPVwib25Pck9mZlwiPkhpIHRoZXJlPC9ncmVldGluZy1ib3g+XG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogbmdNb2R1bGUuZGlyZWN0aXZlKCdncmVldGluZ0JveCcsIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gKiAgICAgYXR0cnMuJG9ic2VydmUoJ2FjdGl2ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgICB2YWx1ZSA/ICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdvbicpIDogJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ29uJyk7XG4gKiAgICAgfSk7XG4gKiAgIH0pO1xuICogfV0pO1xuICogYGBgXG4gKlxuICogTm93IHRoZSBgb25gIENTUyBjbGFzcyBpcyBhZGRlZCBhbmQgcmVtb3ZlZCBvbiB0aGUgZ3JlZXRpbmcgYm94IGNvbXBvbmVudC4gTm93IGlmIHdlIGFkZCBhIENTUyBjbGFzcyBvbiB0b3Agb2YgdGhlIGdyZWV0aW5nIGJveCBlbGVtZW50XG4gKiBpbiBvdXIgSFRNTCBjb2RlIHRoZW4gd2UgY2FuIHRyaWdnZXIgYSBDU1Mgb3IgSlMgYW5pbWF0aW9uIHRvIGhhcHBlbi5cbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBub3JtYWxseSB3ZSB3b3VsZCBjcmVhdGUgYSBDU1MgY2xhc3MgdG8gcmVmZXJlbmNlIG9uIHRoZSBlbGVtZW50ICYjNDI7L1xuICogZ3JlZXRpbmctYm94Lm9uIHsgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7IGJhY2tncm91bmQ6Z3JlZW47IGNvbG9yOndoaXRlOyB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRhbmltYXRlYCBzZXJ2aWNlIGNvbnRhaW5zIGEgdmFyaWV0eSBvZiBvdGhlciBtZXRob2RzIGxpa2UgYGVudGVyYCwgYGxlYXZlYCwgYGFuaW1hdGVgIGFuZCBgc2V0Q2xhc3NgLiBUbyBsZWFybiBtb3JlIGFib3V0IHdoYXQnc1xuICogcG9zc2libGUgYmUgc3VyZSB0byB2aXNpdCB0aGUge0BsaW5rIG5nLiRhbmltYXRlICRhbmltYXRlIHNlcnZpY2UgQVBJIHBhZ2V9LlxuICpcbiAqXG4gKiAjIyBDYWxsYmFja3MgYW5kIFByb21pc2VzXG4gKlxuICogV2hlbiBgJGFuaW1hdGVgIGlzIGNhbGxlZCBpdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgd2hlbiB0aGUgYW5pbWF0aW9uIGhhcyBlbmRlZC4gVGhlcmVmb3JlIGlmIHdlIHdlcmUgdG8gdHJpZ2dlclxuICogYW4gYW5pbWF0aW9uICh3aXRoaW4gb3VyIGRpcmVjdGl2ZSBjb2RlKSB0aGVuIHdlIGNhbiBjb250aW51ZSBwZXJmb3JtaW5nIGRpcmVjdGl2ZSBhbmQgc2NvcGUgcmVsYXRlZCBhY3Rpdml0aWVzIGFmdGVyIHRoZSBhbmltYXRpb24gaGFzXG4gKiBlbmRlZCBieSBjaGFpbmluZyBvbnRvIHRoZSByZXR1cm5lZCBwcm9taXNlIHRoYXQgYW5pbWF0aW9uIG1ldGhvZCByZXR1cm5zLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBzb21ld2hlcmUgd2l0aGluIHRoZSBkZXB0aHMgb2YgdGhlIGRpcmVjdGl2ZVxuICogJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgcGFyZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICogICAvL3RoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAoTm90ZSB0aGF0IGVhcmxpZXIgdmVyc2lvbnMgb2YgQW5ndWxhciBwcmlvciB0byB2MS40IHJlcXVpcmVkIHRoZSBwcm9taXNlIGNvZGUgdG8gYmUgd3JhcHBlZCB1c2luZyBgJHNjb3BlLiRhcHBseSguLi4pYC4gVGhpcyBpcyBub3QgdGhlIGNhc2VcbiAqIGFueW1vcmUuKVxuICpcbiAqIEluIGFkZGl0aW9uIHRvIHRoZSBhbmltYXRpb24gcHJvbWlzZSwgd2UgY2FuIGFsc28gbWFrZSB1c2Ugb2YgYW5pbWF0aW9uLXJlbGF0ZWQgY2FsbGJhY2tzIHdpdGhpbiBvdXIgZGlyZWN0aXZlcyBhbmQgY29udHJvbGxlciBjb2RlIGJ5IHJlZ2lzdGVyaW5nXG4gKiBhbiBldmVudCBsaXN0ZW5lciB1c2luZyB0aGUgYCRhbmltYXRlYCBzZXJ2aWNlLiBMZXQncyBzYXkgZm9yIGV4YW1wbGUgdGhhdCBhbiBhbmltYXRpb24gd2FzIHRyaWdnZXJlZCBvbiBvdXIgdmlld1xuICogcm91dGluZyBjb250cm9sbGVyIHRvIGhvb2sgaW50byB0aGF0OlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5jb250cm9sbGVyKCdIb21lUGFnZUNvbnRyb2xsZXInLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAqICAgJGFuaW1hdGUub24oJ2VudGVyJywgbmdWaWV3RWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICogICAgIC8vIHRoZSBhbmltYXRpb24gZm9yIHRoaXMgcm91dGUgaGFzIGNvbXBsZXRlZFxuICogICB9XSk7XG4gKiB9XSlcbiAqIGBgYFxuICpcbiAqIChOb3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byB0cmlnZ2VyIGEgZGlnZXN0IHdpdGhpbiB0aGUgY2FsbGJhY2sgdG8gZ2V0IGFuZ3VsYXIgdG8gbm90aWNlIGFueSBzY29wZS1yZWxhdGVkIGNoYW5nZXMuKVxuICovXG5cbnZhciBjb3B5O1xudmFyIGV4dGVuZDtcbnZhciBmb3JFYWNoO1xudmFyIGlzQXJyYXk7XG52YXIgaXNEZWZpbmVkO1xudmFyIGlzRWxlbWVudDtcbnZhciBpc0Z1bmN0aW9uO1xudmFyIGlzT2JqZWN0O1xudmFyIGlzU3RyaW5nO1xudmFyIGlzVW5kZWZpbmVkO1xudmFyIGpxTGl0ZTtcbnZhciBub29wO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkYW5pbWF0ZVxuICogQGtpbmQgb2JqZWN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdBbmltYXRlIGAkYW5pbWF0ZWAgc2VydmljZSBkb2N1bWVudGF0aW9uIGlzIHRoZSBzYW1lIGZvciB0aGUgY29yZSBgJGFuaW1hdGVgIHNlcnZpY2UuXG4gKlxuICogQ2xpY2sgaGVyZSB7QGxpbmsgbmcuJGFuaW1hdGUgdG8gbGVhcm4gbW9yZSBhYm91dCBhbmltYXRpb25zIHdpdGggYCRhbmltYXRlYH0uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ0FuaW1hdGUnLCBbXSwgZnVuY3Rpb24gaW5pdEFuZ3VsYXJIZWxwZXJzKCkge1xuICAvLyBBY2Nlc3MgaGVscGVycyBmcm9tIGFuZ3VsYXIgY29yZS5cbiAgLy8gRG8gaXQgaW5zaWRlIGEgYGNvbmZpZ2AgYmxvY2sgdG8gZW5zdXJlIGB3aW5kb3cuYW5ndWxhcmAgaXMgYXZhaWxhYmxlLlxuICBub29wICAgICAgICA9IGFuZ3VsYXIubm9vcDtcbiAgY29weSAgICAgICAgPSBhbmd1bGFyLmNvcHk7XG4gIGV4dGVuZCAgICAgID0gYW5ndWxhci5leHRlbmQ7XG4gIGpxTGl0ZSAgICAgID0gYW5ndWxhci5lbGVtZW50O1xuICBmb3JFYWNoICAgICA9IGFuZ3VsYXIuZm9yRWFjaDtcbiAgaXNBcnJheSAgICAgPSBhbmd1bGFyLmlzQXJyYXk7XG4gIGlzU3RyaW5nICAgID0gYW5ndWxhci5pc1N0cmluZztcbiAgaXNPYmplY3QgICAgPSBhbmd1bGFyLmlzT2JqZWN0O1xuICBpc1VuZGVmaW5lZCA9IGFuZ3VsYXIuaXNVbmRlZmluZWQ7XG4gIGlzRGVmaW5lZCAgID0gYW5ndWxhci5pc0RlZmluZWQ7XG4gIGlzRnVuY3Rpb24gID0gYW5ndWxhci5pc0Z1bmN0aW9uO1xuICBpc0VsZW1lbnQgICA9IGFuZ3VsYXIuaXNFbGVtZW50O1xufSlcbiAgLmluZm8oeyBhbmd1bGFyVmVyc2lvbjogJzEuNi40JyB9KVxuICAuZGlyZWN0aXZlKCduZ0FuaW1hdGVTd2FwJywgbmdBbmltYXRlU3dhcERpcmVjdGl2ZSlcblxuICAuZGlyZWN0aXZlKCduZ0FuaW1hdGVDaGlsZHJlbicsICQkQW5pbWF0ZUNoaWxkcmVuRGlyZWN0aXZlKVxuICAuZmFjdG9yeSgnJCRyQUZTY2hlZHVsZXInLCAkJHJBRlNjaGVkdWxlckZhY3RvcnkpXG5cbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVRdWV1ZScsICQkQW5pbWF0ZVF1ZXVlUHJvdmlkZXIpXG4gIC5wcm92aWRlcignJCRhbmltYXRpb24nLCAkJEFuaW1hdGlvblByb3ZpZGVyKVxuXG4gIC5wcm92aWRlcignJGFuaW1hdGVDc3MnLCAkQW5pbWF0ZUNzc1Byb3ZpZGVyKVxuICAucHJvdmlkZXIoJyQkYW5pbWF0ZUNzc0RyaXZlcicsICQkQW5pbWF0ZUNzc0RyaXZlclByb3ZpZGVyKVxuXG4gIC5wcm92aWRlcignJCRhbmltYXRlSnMnLCAkJEFuaW1hdGVKc1Byb3ZpZGVyKVxuICAucHJvdmlkZXIoJyQkYW5pbWF0ZUpzRHJpdmVyJywgJCRBbmltYXRlSnNEcml2ZXJQcm92aWRlcik7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG5cbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjYuNFxuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24od2luZG93LCBhbmd1bGFyKSB7J3VzZSBzdHJpY3QnO1xuXG52YXIgZm9yRWFjaDtcbnZhciBpc0FycmF5O1xudmFyIGlzU3RyaW5nO1xudmFyIGpxTGl0ZTtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ01lc3NhZ2VzXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nTWVzc2FnZXNgIG1vZHVsZSBwcm92aWRlcyBlbmhhbmNlZCBzdXBwb3J0IGZvciBkaXNwbGF5aW5nIG1lc3NhZ2VzIHdpdGhpbiB0ZW1wbGF0ZXNcbiAqICh0eXBpY2FsbHkgd2l0aGluIGZvcm1zIG9yIHdoZW4gcmVuZGVyaW5nIG1lc3NhZ2Ugb2JqZWN0cyB0aGF0IHJldHVybiBrZXkvdmFsdWUgZGF0YSkuXG4gKiBJbnN0ZWFkIG9mIHJlbHlpbmcgb24gSmF2YVNjcmlwdCBjb2RlIGFuZC9vciBjb21wbGV4IG5nLWlmIHN0YXRlbWVudHMgd2l0aGluIHlvdXIgZm9ybSB0ZW1wbGF0ZSB0b1xuICogc2hvdyBhbmQgaGlkZSBlcnJvciBtZXNzYWdlcyBzcGVjaWZpYyB0byB0aGUgc3RhdGUgb2YgYW4gaW5wdXQgZmllbGQsIHRoZSBgbmdNZXNzYWdlc2AgYW5kXG4gKiBgbmdNZXNzYWdlYCBkaXJlY3RpdmVzIGFyZSBkZXNpZ25lZCB0byBoYW5kbGUgdGhlIGNvbXBsZXhpdHksIGluaGVyaXRhbmNlIGFuZCBwcmlvcml0eVxuICogc2VxdWVuY2luZyBiYXNlZCBvbiB0aGUgb3JkZXIgb2YgaG93IHRoZSBtZXNzYWdlcyBhcmUgZGVmaW5lZCBpbiB0aGUgdGVtcGxhdGUuXG4gKlxuICogQ3VycmVudGx5LCB0aGUgbmdNZXNzYWdlcyBtb2R1bGUgb25seSBjb250YWlucyB0aGUgY29kZSBmb3IgdGhlIGBuZ01lc3NhZ2VzYCwgYG5nTWVzc2FnZXNJbmNsdWRlYFxuICogYG5nTWVzc2FnZWAgYW5kIGBuZ01lc3NhZ2VFeHBgIGRpcmVjdGl2ZXMuXG4gKlxuICogIyBVc2FnZVxuICogVGhlIGBuZ01lc3NhZ2VzYCBkaXJlY3RpdmUgYWxsb3dzIGtleXMgaW4gYSBrZXkvdmFsdWUgY29sbGVjdGlvbiB0byBiZSBhc3NvY2lhdGVkIHdpdGggYSBjaGlsZCBlbGVtZW50XG4gKiAob3IgJ21lc3NhZ2UnKSB0aGF0IHdpbGwgc2hvdyBvciBoaWRlIGJhc2VkIG9uIHRoZSB0cnV0aGluZXNzIG9mIHRoYXQga2V5J3MgdmFsdWUgaW4gdGhlIGNvbGxlY3Rpb24uIEEgY29tbW9uIHVzZVxuICogY2FzZSBmb3IgYG5nTWVzc2FnZXNgIGlzIHRvIGRpc3BsYXkgZXJyb3IgbWVzc2FnZXMgZm9yIGlucHV0cyB1c2luZyB0aGUgYCRlcnJvcmAgb2JqZWN0IGV4cG9zZWQgYnkgdGhlXG4gKiB7QGxpbmsgbmdNb2RlbCBuZ01vZGVsfSBkaXJlY3RpdmUuXG4gKlxuICogVGhlIGNoaWxkIGVsZW1lbnRzIG9mIHRoZSBgbmdNZXNzYWdlc2AgZGlyZWN0aXZlIGFyZSBtYXRjaGVkIHRvIHRoZSBjb2xsZWN0aW9uIGtleXMgYnkgYSBgbmdNZXNzYWdlYCBvclxuICogYG5nTWVzc2FnZUV4cGAgZGlyZWN0aXZlLiBUaGUgdmFsdWUgb2YgdGhlc2UgYXR0cmlidXRlcyBtdXN0IG1hdGNoIGEga2V5IGluIHRoZSBjb2xsZWN0aW9uIHRoYXQgaXMgcHJvdmlkZWQgYnlcbiAqIHRoZSBgbmdNZXNzYWdlc2AgZGlyZWN0aXZlLlxuICpcbiAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSwgd2hpY2ggaWxsdXN0cmF0ZXMgYSB0eXBpY2FsIHVzZSBjYXNlIG9mIGBuZ01lc3NhZ2VzYC4gV2l0aGluIHRoZSBmb3JtIGBteUZvcm1gIHdlXG4gKiBoYXZlIGEgdGV4dCBpbnB1dCBuYW1lZCBgbXlGaWVsZGAgd2hpY2ggaXMgYm91bmQgdG8gdGhlIHNjb3BlIHZhcmlhYmxlIGBmaWVsZGAgdXNpbmcgdGhlIHtAbGluayBuZ01vZGVsIG5nTW9kZWx9XG4gKiBkaXJlY3RpdmUuXG4gKlxuICogVGhlIGBteUZpZWxkYCBmaWVsZCBpcyBhIHJlcXVpcmVkIGlucHV0IG9mIHR5cGUgYGVtYWlsYCB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgMTUgY2hhcmFjdGVycy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgIDxsYWJlbD5cbiAqICAgICBFbnRlciB0ZXh0OlxuICogICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIiBuZy1tb2RlbD1cImZpZWxkXCIgbmFtZT1cIm15RmllbGRcIiByZXF1aXJlZCBtYXhsZW5ndGg9XCIxNVwiIC8+XG4gKiAgIDwvbGFiZWw+XG4gKiAgIDxkaXYgbmctbWVzc2FnZXM9XCJteUZvcm0ubXlGaWVsZC4kZXJyb3JcIiByb2xlPVwiYWxlcnRcIj5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlBsZWFzZSBlbnRlciBhIHZhbHVlIGZvciB0aGlzIGZpZWxkLjwvZGl2PlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cImVtYWlsXCI+VGhpcyBmaWVsZCBtdXN0IGJlIGEgdmFsaWQgZW1haWwgYWRkcmVzcy48L2Rpdj5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJtYXhsZW5ndGhcIj5UaGlzIGZpZWxkIGNhbiBiZSBhdCBtb3N0IDE1IGNoYXJhY3RlcnMgbG9uZy48L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Zvcm0+XG4gKiBgYGBcbiAqXG4gKiBJbiBvcmRlciB0byBzaG93IGVycm9yIG1lc3NhZ2VzIGNvcnJlc3BvbmRpbmcgdG8gYG15RmllbGRgIHdlIGZpcnN0IGNyZWF0ZSBhbiBlbGVtZW50IHdpdGggYW4gYG5nTWVzc2FnZXNgIGF0dHJpYnV0ZVxuICogc2V0IHRvIHRoZSBgJGVycm9yYCBvYmplY3Qgb3duZWQgYnkgdGhlIGBteUZpZWxkYCBpbnB1dCBpbiBvdXIgYG15Rm9ybWAgZm9ybS5cbiAqXG4gKiBXaXRoaW4gdGhpcyBlbGVtZW50IHdlIHRoZW4gY3JlYXRlIHNlcGFyYXRlIGVsZW1lbnRzIGZvciBlYWNoIG9mIHRoZSBwb3NzaWJsZSBlcnJvcnMgdGhhdCBgbXlGaWVsZGAgY291bGQgaGF2ZS5cbiAqIFRoZSBgbmdNZXNzYWdlYCBhdHRyaWJ1dGUgaXMgdXNlZCB0byBkZWNsYXJlIHdoaWNoIGVsZW1lbnQocykgd2lsbCBhcHBlYXIgZm9yIHdoaWNoIGVycm9yIC0gZm9yIGV4YW1wbGUsXG4gKiBzZXR0aW5nIGBuZy1tZXNzYWdlPVwicmVxdWlyZWRcImAgc3BlY2lmaWVzIHRoYXQgdGhpcyBwYXJ0aWN1bGFyIGVsZW1lbnQgc2hvdWxkIGJlIGRpc3BsYXllZCB3aGVuIHRoZXJlXG4gKiBpcyBubyB2YWx1ZSBwcmVzZW50IGZvciB0aGUgcmVxdWlyZWQgZmllbGQgYG15RmllbGRgIChiZWNhdXNlIHRoZSBrZXkgYHJlcXVpcmVkYCB3aWxsIGJlIGB0cnVlYCBpbiB0aGUgb2JqZWN0XG4gKiBgbXlGb3JtLm15RmllbGQuJGVycm9yYCkuXG4gKlxuICogIyMjIE1lc3NhZ2Ugb3JkZXJcbiAqXG4gKiBCeSBkZWZhdWx0LCBgbmdNZXNzYWdlc2Agd2lsbCBvbmx5IGRpc3BsYXkgb25lIG1lc3NhZ2UgZm9yIGEgcGFydGljdWxhciBrZXkvdmFsdWUgY29sbGVjdGlvbiBhdCBhbnkgdGltZS4gSWYgbW9yZVxuICogdGhhbiBvbmUgbWVzc2FnZSAob3IgZXJyb3IpIGtleSBpcyBjdXJyZW50bHkgdHJ1ZSwgdGhlbiB3aGljaCBtZXNzYWdlIGlzIHNob3duIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIG9mIG1lc3NhZ2VzXG4gKiBpbiB0aGUgSFRNTCB0ZW1wbGF0ZSBjb2RlIChtZXNzYWdlcyBkZWNsYXJlZCBmaXJzdCBhcmUgcHJpb3JpdGlzZWQpLiBUaGlzIG1lY2hhbmlzbSBtZWFucyB0aGUgZGV2ZWxvcGVyIGRvZXMgbm90IGhhdmVcbiAqIHRvIHByaW9yaXRpemUgbWVzc2FnZXMgdXNpbmcgY3VzdG9tIEphdmFTY3JpcHQgY29kZS5cbiAqXG4gKiBHaXZlbiB0aGUgZm9sbG93aW5nIGVycm9yIG9iamVjdCBmb3Igb3VyIGV4YW1wbGUgKHdoaWNoIGluZm9ybXMgdXMgdGhhdCB0aGUgZmllbGQgYG15RmllbGRgIGN1cnJlbnRseSBoYXMgYm90aCB0aGVcbiAqIGByZXF1aXJlZGAgYW5kIGBlbWFpbGAgZXJyb3JzKTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiA8IS0tIGtlZXAgaW4gbWluZCB0aGF0IG5nTW9kZWwgYXV0b21hdGljYWxseSBzZXRzIHRoZXNlIGVycm9yIGZsYWdzIC0tPlxuICogbXlGaWVsZC4kZXJyb3IgPSB7IHJlcXVpcmVkIDogdHJ1ZSwgZW1haWw6IHRydWUsIG1heGxlbmd0aDogZmFsc2UgfTtcbiAqIGBgYFxuICogVGhlIGByZXF1aXJlZGAgbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXllZCB0byB0aGUgdXNlciBzaW5jZSBpdCBhcHBlYXJzIGJlZm9yZSB0aGUgYGVtYWlsYCBtZXNzYWdlIGluIHRoZSBET00uXG4gKiBPbmNlIHRoZSB1c2VyIHR5cGVzIGEgc2luZ2xlIGNoYXJhY3RlciwgdGhlIGByZXF1aXJlZGAgbWVzc2FnZSB3aWxsIGRpc2FwcGVhciAoc2luY2UgdGhlIGZpZWxkIG5vdyBoYXMgYSB2YWx1ZSlcbiAqIGJ1dCB0aGUgYGVtYWlsYCBtZXNzYWdlIHdpbGwgYmUgdmlzaWJsZSBiZWNhdXNlIGl0IGlzIHN0aWxsIGFwcGxpY2FibGUuXG4gKlxuICogIyMjIERpc3BsYXlpbmcgbXVsdGlwbGUgbWVzc2FnZXMgYXQgdGhlIHNhbWUgdGltZVxuICpcbiAqIFdoaWxlIGBuZ01lc3NhZ2VzYCB3aWxsIGJ5IGRlZmF1bHQgb25seSBkaXNwbGF5IG9uZSBlcnJvciBlbGVtZW50IGF0IGEgdGltZSwgdGhlIGBuZy1tZXNzYWdlcy1tdWx0aXBsZWAgYXR0cmlidXRlIGNhblxuICogYmUgYXBwbGllZCB0byB0aGUgYG5nTWVzc2FnZXNgIGNvbnRhaW5lciBlbGVtZW50IHRvIGNhdXNlIGl0IHRvIGRpc3BsYXkgYWxsIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZXMgYXQgb25jZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIGF0dHJpYnV0ZS1zdHlsZSB1c2FnZSAtLT5cbiAqIDxkaXYgbmctbWVzc2FnZXM9XCJteUZvcm0ubXlGaWVsZC4kZXJyb3JcIiBuZy1tZXNzYWdlcy1tdWx0aXBsZT4uLi48L2Rpdj5cbiAqXG4gKiA8IS0tIGVsZW1lbnQtc3R5bGUgdXNhZ2UgLS0+XG4gKiA8bmctbWVzc2FnZXMgZm9yPVwibXlGb3JtLm15RmllbGQuJGVycm9yXCIgbXVsdGlwbGU+Li4uPC9uZy1tZXNzYWdlcz5cbiAqIGBgYFxuICpcbiAqICMjIFJldXNpbmcgYW5kIE92ZXJyaWRpbmcgTWVzc2FnZXNcbiAqIEluIGFkZGl0aW9uIHRvIHByaW9yaXRpemF0aW9uLCBuZ01lc3NhZ2VzIGFsc28gYWxsb3dzIGZvciBpbmNsdWRpbmcgbWVzc2FnZXMgZnJvbSBhIHJlbW90ZSBvciBhbiBpbmxpbmVcbiAqIHRlbXBsYXRlLiBUaGlzIGFsbG93cyBmb3IgZ2VuZXJpYyBjb2xsZWN0aW9uIG9mIG1lc3NhZ2VzIHRvIGJlIHJldXNlZCBhY3Jvc3MgbXVsdGlwbGUgcGFydHMgb2YgYW5cbiAqIGFwcGxpY2F0aW9uLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cImVycm9yLW1lc3NhZ2VzXCI+XG4gKiAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+VGhpcyBmaWVsZCBpcyByZXF1aXJlZDwvZGl2PlxuICogICA8ZGl2IG5nLW1lc3NhZ2U9XCJtaW5sZW5ndGhcIj5UaGlzIGZpZWxkIGlzIHRvbyBzaG9ydDwvZGl2PlxuICogPC9zY3JpcHQ+XG4gKlxuICogPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUZpZWxkLiRlcnJvclwiIHJvbGU9XCJhbGVydFwiPlxuICogICA8ZGl2IG5nLW1lc3NhZ2VzLWluY2x1ZGU9XCJlcnJvci1tZXNzYWdlc1wiPjwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBIb3dldmVyLCBpbmNsdWRpbmcgZ2VuZXJpYyBtZXNzYWdlcyBtYXkgbm90IGJlIHVzZWZ1bCBlbm91Z2ggdG8gbWF0Y2ggYWxsIGlucHV0IGZpZWxkcywgdGhlcmVmb3JlLFxuICogYG5nTWVzc2FnZXNgIHByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIG92ZXJyaWRlIG1lc3NhZ2VzIGRlZmluZWQgaW4gdGhlIHJlbW90ZSB0ZW1wbGF0ZSBieSByZWRlZmluaW5nXG4gKiB0aGVtIHdpdGhpbiB0aGUgZGlyZWN0aXZlIGNvbnRhaW5lci5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIGEgZ2VuZXJpYyB0ZW1wbGF0ZSBvZiBlcnJvciBtZXNzYWdlcyBrbm93biBhcyBcIm15LWN1c3RvbS1tZXNzYWdlc1wiIC0tPlxuICogPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwibXktY3VzdG9tLW1lc3NhZ2VzXCI+XG4gKiAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+VGhpcyBmaWVsZCBpcyByZXF1aXJlZDwvZGl2PlxuICogICA8ZGl2IG5nLW1lc3NhZ2U9XCJtaW5sZW5ndGhcIj5UaGlzIGZpZWxkIGlzIHRvbyBzaG9ydDwvZGl2PlxuICogPC9zY3JpcHQ+XG4gKlxuICogPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICA8bGFiZWw+XG4gKiAgICAgRW1haWwgYWRkcmVzc1xuICogICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIlxuICogICAgICAgICAgICBpZD1cImVtYWlsXCJcbiAqICAgICAgICAgICAgbmFtZT1cIm15RW1haWxcIlxuICogICAgICAgICAgICBuZy1tb2RlbD1cImVtYWlsXCJcbiAqICAgICAgICAgICAgbWlubGVuZ3RoPVwiNVwiXG4gKiAgICAgICAgICAgIHJlcXVpcmVkIC8+XG4gKiAgIDwvbGFiZWw+XG4gKiAgIDwhLS0gYW55IG5nLW1lc3NhZ2UgZWxlbWVudHMgdGhhdCBhcHBlYXIgQkVGT1JFIHRoZSBuZy1tZXNzYWdlcy1pbmNsdWRlIHdpbGxcbiAqICAgICAgICBvdmVycmlkZSB0aGUgbWVzc2FnZXMgcHJlc2VudCBpbiB0aGUgbmctbWVzc2FnZXMtaW5jbHVkZSB0ZW1wbGF0ZSAtLT5cbiAqICAgPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUVtYWlsLiRlcnJvclwiIHJvbGU9XCJhbGVydFwiPlxuICogICAgIDwhLS0gdGhpcyByZXF1aXJlZCBtZXNzYWdlIGhhcyBvdmVycmlkZGVuIHRoZSB0ZW1wbGF0ZSBtZXNzYWdlIC0tPlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+WW91IGRpZCBub3QgZW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzPC9kaXY+XG4gKlxuICogICAgIDwhLS0gdGhpcyBpcyBhIGJyYW5kIG5ldyBtZXNzYWdlIGFuZCB3aWxsIGFwcGVhciBsYXN0IGluIHRoZSBwcmlvcml0aXphdGlvbiAtLT5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJlbWFpbFwiPllvdXIgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkPC9kaXY+XG4gKlxuICogICAgIDwhLS0gYW5kIGhlcmUgYXJlIHRoZSBnZW5lcmljIGVycm9yIG1lc3NhZ2VzIC0tPlxuICogICAgIDxkaXYgbmctbWVzc2FnZXMtaW5jbHVkZT1cIm15LWN1c3RvbS1tZXNzYWdlc1wiPjwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZm9ybT5cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBleGFtcGxlIEhUTUwgY29kZSBhYm92ZSB0aGUgbWVzc2FnZSB0aGF0IGlzIHNldCBvbiByZXF1aXJlZCB3aWxsIG92ZXJyaWRlIHRoZSBjb3JyZXNwb25kaW5nXG4gKiByZXF1aXJlZCBtZXNzYWdlIGRlZmluZWQgd2l0aGluIHRoZSByZW1vdGUgdGVtcGxhdGUuIFRoZXJlZm9yZSwgd2l0aCBwYXJ0aWN1bGFyIGlucHV0IGZpZWxkcyAoc3VjaFxuICogZW1haWwgYWRkcmVzc2VzLCBkYXRlIGZpZWxkcywgYXV0b2NvbXBsZXRlIGlucHV0cywgZXRjLi4uKSwgc3BlY2lhbGl6ZWQgZXJyb3IgbWVzc2FnZXMgY2FuIGJlIGFwcGxpZWRcbiAqIHdoaWxlIG1vcmUgZ2VuZXJpYyBtZXNzYWdlcyBjYW4gYmUgdXNlZCB0byBoYW5kbGUgb3RoZXIsIG1vcmUgZ2VuZXJhbCBpbnB1dCBlcnJvcnMuXG4gKlxuICogIyMgRHluYW1pYyBNZXNzYWdpbmdcbiAqIG5nTWVzc2FnZXMgYWxzbyBzdXBwb3J0cyB1c2luZyBleHByZXNzaW9ucyB0byBkeW5hbWljYWxseSBjaGFuZ2Uga2V5IHZhbHVlcy4gVXNpbmcgYXJyYXlzIGFuZFxuICogcmVwZWF0ZXJzIHRvIGxpc3QgbWVzc2FnZXMgaXMgYWxzbyBzdXBwb3J0ZWQuIFRoaXMgbWVhbnMgdGhhdCB0aGUgY29kZSBiZWxvdyB3aWxsIGJlIGFibGUgdG9cbiAqIGZ1bGx5IGFkYXB0IGl0c2VsZiBhbmQgZGlzcGxheSB0aGUgYXBwcm9wcmlhdGUgbWVzc2FnZSB3aGVuIGFueSBvZiB0aGUgZXhwcmVzc2lvbiBkYXRhIGNoYW5nZXM6XG4gKlxuICogYGBgaHRtbFxuICogPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICA8bGFiZWw+XG4gKiAgICAgRW1haWwgYWRkcmVzc1xuICogICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIlxuICogICAgICAgICAgICBuYW1lPVwibXlFbWFpbFwiXG4gKiAgICAgICAgICAgIG5nLW1vZGVsPVwiZW1haWxcIlxuICogICAgICAgICAgICBtaW5sZW5ndGg9XCI1XCJcbiAqICAgICAgICAgICAgcmVxdWlyZWQgLz5cbiAqICAgPC9sYWJlbD5cbiAqICAgPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUVtYWlsLiRlcnJvclwiIHJvbGU9XCJhbGVydFwiPlxuICogICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+WW91IGRpZCBub3QgZW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzPC9kaXY+XG4gKiAgICAgPGRpdiBuZy1yZXBlYXQ9XCJlcnJvck1lc3NhZ2UgaW4gZXJyb3JNZXNzYWdlc1wiPlxuICogICAgICAgPCEtLSB1c2UgbmctbWVzc2FnZS1leHAgZm9yIGEgbWVzc2FnZSB3aG9zZSBrZXkgaXMgZ2l2ZW4gYnkgYW4gZXhwcmVzc2lvbiAtLT5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZS1leHA9XCJlcnJvck1lc3NhZ2UudHlwZVwiPnt7IGVycm9yTWVzc2FnZS50ZXh0IH19PC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9mb3JtPlxuICogYGBgXG4gKlxuICogVGhlIGBlcnJvck1lc3NhZ2UudHlwZWAgZXhwcmVzc2lvbiBjYW4gYmUgYSBzdHJpbmcgdmFsdWUgb3IgaXQgY2FuIGJlIGFuIGFycmF5IHNvXG4gKiB0aGF0IG11bHRpcGxlIGVycm9ycyBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoIGEgc2luZ2xlIGVycm9yIG1lc3NhZ2U6XG4gKlxuICogYGBgaHRtbFxuICogICA8bGFiZWw+XG4gKiAgICAgRW1haWwgYWRkcmVzc1xuICogICAgIDxpbnB1dCB0eXBlPVwiZW1haWxcIlxuICogICAgICAgICAgICBuZy1tb2RlbD1cImRhdGEuZW1haWxcIlxuICogICAgICAgICAgICBuYW1lPVwibXlFbWFpbFwiXG4gKiAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjVcIlxuICogICAgICAgICAgICBuZy1tYXhsZW5ndGg9XCIxMDBcIlxuICogICAgICAgICAgICByZXF1aXJlZCAvPlxuICogICA8L2xhYmVsPlxuICogICA8ZGl2IG5nLW1lc3NhZ2VzPVwibXlGb3JtLm15RW1haWwuJGVycm9yXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlLWV4cD1cIidyZXF1aXJlZCdcIj5Zb3UgZGlkIG5vdCBlbnRlciB5b3VyIGVtYWlsIGFkZHJlc3M8L2Rpdj5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2UtZXhwPVwiWydtaW5sZW5ndGgnLCAnbWF4bGVuZ3RoJ11cIj5cbiAqICAgICAgIFlvdXIgZW1haWwgbXVzdCBiZSBiZXR3ZWVuIDUgYW5kIDEwMCBjaGFyYWN0ZXJzIGxvbmdcbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBGZWVsIGZyZWUgdG8gdXNlIG90aGVyIHN0cnVjdHVyYWwgZGlyZWN0aXZlcyBzdWNoIGFzIG5nLWlmIGFuZCBuZy1zd2l0Y2ggdG8gZnVydGhlciBjb250cm9sXG4gKiB3aGF0IG1lc3NhZ2VzIGFyZSBhY3RpdmUgYW5kIHdoZW4uIEJlIGNhcmVmdWwsIGlmIHlvdSBwbGFjZSBuZy1tZXNzYWdlIG9uIHRoZSBzYW1lIGVsZW1lbnRcbiAqIGFzIHRoZXNlIHN0cnVjdHVyYWwgZGlyZWN0aXZlcywgQW5ndWxhciBtYXkgbm90IGJlIGFibGUgdG8gZGV0ZXJtaW5lIGlmIGEgbWVzc2FnZSBpcyBhY3RpdmVcbiAqIG9yIG5vdC4gVGhlcmVmb3JlIGl0IGlzIGJlc3QgdG8gcGxhY2UgdGhlIG5nLW1lc3NhZ2Ugb24gYSBjaGlsZCBlbGVtZW50IG9mIHRoZSBzdHJ1Y3R1cmFsXG4gKiBkaXJlY3RpdmUuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teUVtYWlsLiRlcnJvclwiIHJvbGU9XCJhbGVydFwiPlxuICogICA8ZGl2IG5nLWlmPVwic2hvd1JlcXVpcmVkRXJyb3JcIj5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlBsZWFzZSBlbnRlciBzb21ldGhpbmc8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqICMjIEFuaW1hdGlvbnNcbiAqIElmIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgYWN0aXZlIHdpdGhpbiB0aGUgYXBwbGljYXRpb24gdGhlbiB0aGUgYG5nTWVzc2FnZXNgLCBgbmdNZXNzYWdlYCBhbmRcbiAqIGBuZ01lc3NhZ2VFeHBgIGRpcmVjdGl2ZXMgd2lsbCB0cmlnZ2VyIGFuaW1hdGlvbnMgd2hlbmV2ZXIgYW55IG1lc3NhZ2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZCBmcm9tXG4gKiB0aGUgRE9NIGJ5IHRoZSBgbmdNZXNzYWdlc2AgZGlyZWN0aXZlLlxuICpcbiAqIFdoZW5ldmVyIHRoZSBgbmdNZXNzYWdlc2AgZGlyZWN0aXZlIGNvbnRhaW5zIG9uZSBvciBtb3JlIHZpc2libGUgbWVzc2FnZXMgdGhlbiB0aGUgYC5uZy1hY3RpdmVgIENTU1xuICogY2xhc3Mgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudC4gVGhlIGAubmctaW5hY3RpdmVgIENTUyBjbGFzcyB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGVyZSBhcmUgbm9cbiAqIG1lc3NhZ2VzIHByZXNlbnQuIFRoZXJlZm9yZSwgQ1NTIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYXMgd2VsbCBhcyBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgY2FuXG4gKiBob29rIGludG8gdGhlIGFuaW1hdGlvbnMgd2hlbmV2ZXIgdGhlc2UgY2xhc3NlcyBhcmUgYWRkZWQvcmVtb3ZlZC5cbiAqXG4gKiBMZXQncyBzYXkgdGhhdCBvdXIgSFRNTCBjb2RlIGZvciBvdXIgbWVzc2FnZXMgY29udGFpbmVyIGxvb2tzIGxpa2Ugc286XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1tZXNzYWdlcz1cIm15TWVzc2FnZXNcIiBjbGFzcz1cIm15LW1lc3NhZ2VzXCIgcm9sZT1cImFsZXJ0XCI+XG4gKiAgIDxkaXYgbmctbWVzc2FnZT1cImFsZXJ0XCIgY2xhc3M9XCJzb21lLW1lc3NhZ2VcIj4uLi48L2Rpdj5cbiAqICAgPGRpdiBuZy1tZXNzYWdlPVwiZmFpbFwiIGNsYXNzPVwic29tZS1tZXNzYWdlXCI+Li4uPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZW4gdGhlIENTUyBhbmltYXRpb24gY29kZSBmb3IgdGhlIG1lc3NhZ2UgY29udGFpbmVyIGxvb2tzIGxpa2Ugc286XG4gKlxuICogYGBgY3NzXG4gKiAubXktbWVzc2FnZXMge1xuICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKiAubXktbWVzc2FnZXMubmctYWN0aXZlIHtcbiAqICAgLy8gbWVzc2FnZXMgYXJlIHZpc2libGVcbiAqIH1cbiAqIC5teS1tZXNzYWdlcy5uZy1pbmFjdGl2ZSB7XG4gKiAgIC8vIG1lc3NhZ2VzIGFyZSBoaWRkZW5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW5ldmVyIGFuIGlubmVyIG1lc3NhZ2UgaXMgYXR0YWNoZWQgKGJlY29tZXMgdmlzaWJsZSkgb3IgcmVtb3ZlZCAoYmVjb21lcyBoaWRkZW4pIHRoZW4gdGhlIGVudGVyXG4gKiBhbmQgbGVhdmUgYW5pbWF0aW9uIGlzIHRyaWdnZXJlZCBmb3IgZWFjaCBwYXJ0aWN1bGFyIGVsZW1lbnQgYm91bmQgdG8gdGhlIGBuZ01lc3NhZ2VgIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGVyZWZvcmUsIHRoZSBDU1MgY29kZSBmb3IgdGhlIGlubmVyIG1lc3NhZ2VzIGxvb2tzIGxpa2Ugc286XG4gKlxuICogYGBgY3NzXG4gKiAuc29tZS1tZXNzYWdlIHtcbiAqICAgdHJhbnNpdGlvbjoxcyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5zb21lLW1lc3NhZ2UubmctZW50ZXIge31cbiAqIC5zb21lLW1lc3NhZ2UubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHt9XG4gKlxuICogLnNvbWUtbWVzc2FnZS5uZy1sZWF2ZSB7fVxuICogLnNvbWUtbWVzc2FnZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge31cbiAqIGBgYFxuICpcbiAqIHtAbGluayBuZ0FuaW1hdGUgQ2xpY2sgaGVyZX0gdG8gbGVhcm4gaG93IHRvIHVzZSBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgb3IgdG8gbGVhcm4gbW9yZSBhYm91dCBuZ0FuaW1hdGUuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ01lc3NhZ2VzJywgW10sIGZ1bmN0aW9uIGluaXRBbmd1bGFySGVscGVycygpIHtcbiAgLy8gQWNjZXNzIGhlbHBlcnMgZnJvbSBhbmd1bGFyIGNvcmUuXG4gIC8vIERvIGl0IGluc2lkZSBhIGBjb25maWdgIGJsb2NrIHRvIGVuc3VyZSBgd2luZG93LmFuZ3VsYXJgIGlzIGF2YWlsYWJsZS5cbiAgZm9yRWFjaCA9IGFuZ3VsYXIuZm9yRWFjaDtcbiAgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheTtcbiAgaXNTdHJpbmcgPSBhbmd1bGFyLmlzU3RyaW5nO1xuICBqcUxpdGUgPSBhbmd1bGFyLmVsZW1lbnQ7XG59KVxuICAuaW5mbyh7IGFuZ3VsYXJWZXJzaW9uOiAnMS42LjQnIH0pXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG1vZHVsZSBuZ01lc3NhZ2VzXG4gICAqIEBuYW1lIG5nTWVzc2FnZXNcbiAgICogQHJlc3RyaWN0IEFFXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgbmdNZXNzYWdlc2AgaXMgYSBkaXJlY3RpdmUgdGhhdCBpcyBkZXNpZ25lZCB0byBzaG93IGFuZCBoaWRlIG1lc3NhZ2VzIGJhc2VkIG9uIHRoZSBzdGF0ZVxuICAgKiBvZiBhIGtleS92YWx1ZSBvYmplY3QgdGhhdCBpdCBsaXN0ZW5zIG9uLiBUaGUgZGlyZWN0aXZlIGl0c2VsZiBjb21wbGVtZW50cyBlcnJvciBtZXNzYWdlXG4gICAqIHJlcG9ydGluZyB3aXRoIHRoZSBgbmdNb2RlbGAgJGVycm9yIG9iamVjdCAod2hpY2ggc3RvcmVzIGEga2V5L3ZhbHVlIHN0YXRlIG9mIHZhbGlkYXRpb24gZXJyb3JzKS5cbiAgICpcbiAgICogYG5nTWVzc2FnZXNgIG1hbmFnZXMgdGhlIHN0YXRlIG9mIGludGVybmFsIG1lc3NhZ2VzIHdpdGhpbiBpdHMgY29udGFpbmVyIGVsZW1lbnQuIFRoZSBpbnRlcm5hbFxuICAgKiBtZXNzYWdlcyB1c2UgdGhlIGBuZ01lc3NhZ2VgIGRpcmVjdGl2ZSBhbmQgd2lsbCBiZSBpbnNlcnRlZC9yZW1vdmVkIGZyb20gdGhlIHBhZ2UgZGVwZW5kaW5nXG4gICAqIG9uIGlmIHRoZXkncmUgcHJlc2VudCB3aXRoaW4gdGhlIGtleS92YWx1ZSBvYmplY3QuIEJ5IGRlZmF1bHQsIG9ubHkgb25lIG1lc3NhZ2Ugd2lsbCBiZSBkaXNwbGF5ZWRcbiAgICogYXQgYSB0aW1lIGFuZCB0aGlzIGRlcGVuZHMgb24gdGhlIHByaW9yaXRpemF0aW9uIG9mIHRoZSBtZXNzYWdlcyB3aXRoaW4gdGhlIHRlbXBsYXRlLiAoVGhpcyBjYW5cbiAgICogYmUgY2hhbmdlZCBieSB1c2luZyB0aGUgYG5nLW1lc3NhZ2VzLW11bHRpcGxlYCBvciBgbXVsdGlwbGVgIGF0dHJpYnV0ZSBvbiB0aGUgZGlyZWN0aXZlIGNvbnRhaW5lci4pXG4gICAqXG4gICAqIEEgcmVtb3RlIHRlbXBsYXRlIGNhbiBhbHNvIGJlIHVzZWQgdG8gcHJvbW90ZSBtZXNzYWdlIHJldXNhYmlsaXR5IGFuZCBtZXNzYWdlcyBjYW4gYWxzbyBiZVxuICAgKiBvdmVycmlkZGVuLlxuICAgKlxuICAgKiB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMgQ2xpY2sgaGVyZX0gdG8gbGVhcm4gbW9yZSBhYm91dCBgbmdNZXNzYWdlc2AgYW5kIGBuZ01lc3NhZ2VgLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgaHRtbFxuICAgKiA8IS0tIHVzaW5nIGF0dHJpYnV0ZSBkaXJlY3RpdmVzIC0tPlxuICAgKiA8QU5ZIG5nLW1lc3NhZ2VzPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZT1cInN0cmluZ1ZhbHVlXCI+Li4uPC9BTlk+XG4gICAqICAgPEFOWSBuZy1tZXNzYWdlPVwic3RyaW5nVmFsdWUxLCBzdHJpbmdWYWx1ZTIsIC4uLlwiPi4uLjwvQU5ZPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZS1leHA9XCJleHByZXNzaW9uVmFsdWVcIj4uLi48L0FOWT5cbiAgICogPC9BTlk+XG4gICAqXG4gICAqIDwhLS0gb3IgYnkgdXNpbmcgZWxlbWVudCBkaXJlY3RpdmVzIC0tPlxuICAgKiA8bmctbWVzc2FnZXMgZm9yPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW49XCJzdHJpbmdWYWx1ZVwiPi4uLjwvbmctbWVzc2FnZT5cbiAgICogICA8bmctbWVzc2FnZSB3aGVuPVwic3RyaW5nVmFsdWUxLCBzdHJpbmdWYWx1ZTIsIC4uLlwiPi4uLjwvbmctbWVzc2FnZT5cbiAgICogICA8bmctbWVzc2FnZSB3aGVuLWV4cD1cImV4cHJlc3Npb25WYWx1ZVwiPi4uLjwvbmctbWVzc2FnZT5cbiAgICogPC9uZy1tZXNzYWdlcz5cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01lc3NhZ2VzIGFuIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIGEga2V5L3ZhbHVlIG9iamVjdFxuICAgKiAgICAgICAgICAgICAgICAgKHRoaXMgaXMgdHlwaWNhbGx5IHRoZSAkZXJyb3Igb2JqZWN0IG9uIGFuIG5nTW9kZWwgaW5zdGFuY2UpLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nTWVzc2FnZXNNdWx0aXBsZXxtdWx0aXBsZSB3aGVuIHNldCwgYWxsIG1lc3NhZ2VzIHdpbGwgYmUgZGlzcGxheWVkIHdpdGggdHJ1ZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmdNZXNzYWdlcy1kaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01lc3NhZ2VzRXhhbXBsZVwiXG4gICAqICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLW1lc3NhZ2VzLmpzXCJcbiAgICogICAgICAgICAgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAqICAgICAgIDxsYWJlbD5cbiAgICogICAgICAgICBFbnRlciB5b3VyIG5hbWU6XG4gICAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICogICAgICAgICAgICAgICAgbmFtZT1cIm15TmFtZVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwibmFtZVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjVcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1tYXhsZW5ndGg9XCIyMFwiXG4gICAqICAgICAgICAgICAgICAgIHJlcXVpcmVkIC8+XG4gICAqICAgICAgIDwvbGFiZWw+XG4gICAqICAgICAgIDxwcmU+bXlGb3JtLm15TmFtZS4kZXJyb3IgPSB7eyBteUZvcm0ubXlOYW1lLiRlcnJvciB8IGpzb24gfX08L3ByZT5cbiAgICpcbiAgICogICAgICAgPGRpdiBuZy1tZXNzYWdlcz1cIm15Rm9ybS5teU5hbWUuJGVycm9yXCIgc3R5bGU9XCJjb2xvcjptYXJvb25cIiByb2xlPVwiYWxlcnRcIj5cbiAgICogICAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPllvdSBkaWQgbm90IGVudGVyIGEgZmllbGQ8L2Rpdj5cbiAgICogICAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJtaW5sZW5ndGhcIj5Zb3VyIGZpZWxkIGlzIHRvbyBzaG9ydDwvZGl2PlxuICAgKiAgICAgICAgIDxkaXYgbmctbWVzc2FnZT1cIm1heGxlbmd0aFwiPllvdXIgZmllbGQgaXMgdG9vIGxvbmc8L2Rpdj5cbiAgICogICAgICAgPC9kaXY+XG4gICAqICAgICA8L2Zvcm0+XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCduZ01lc3NhZ2VzRXhhbXBsZScsIFsnbmdNZXNzYWdlcyddKTtcbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIC5kaXJlY3RpdmUoJ25nTWVzc2FnZXMnLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgICB2YXIgQUNUSVZFX0NMQVNTID0gJ25nLWFjdGl2ZSc7XG4gICAgdmFyIElOQUNUSVZFX0NMQVNTID0gJ25nLWluYWN0aXZlJztcblxuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlOiAnbmdNZXNzYWdlcycsXG4gICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uIE5nTWVzc2FnZXNDdHJsKCRlbGVtZW50LCAkc2NvcGUsICRhdHRycykge1xuICAgICAgICB2YXIgY3RybCA9IHRoaXM7XG4gICAgICAgIHZhciBsYXRlc3RLZXkgPSAwO1xuICAgICAgICB2YXIgbmV4dEF0dGFjaElkID0gMDtcblxuICAgICAgICB0aGlzLmdldEF0dGFjaElkID0gZnVuY3Rpb24gZ2V0QXR0YWNoSWQoKSB7IHJldHVybiBuZXh0QXR0YWNoSWQrKzsgfTtcblxuICAgICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzID0ge307XG4gICAgICAgIHZhciByZW5kZXJMYXRlciwgY2FjaGVkQ29sbGVjdGlvbjtcblxuICAgICAgICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBjb2xsZWN0aW9uID0gY29sbGVjdGlvbiB8fCB7fTtcblxuICAgICAgICAgIHJlbmRlckxhdGVyID0gZmFsc2U7XG4gICAgICAgICAgY2FjaGVkQ29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cbiAgICAgICAgICAvLyB0aGlzIGlzIHRydWUgaWYgdGhlIGF0dHJpYnV0ZSBpcyBlbXB0eSBvciBpZiB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRydXRoeVxuICAgICAgICAgIHZhciBtdWx0aXBsZSA9IGlzQXR0clRydXRoeSgkc2NvcGUsICRhdHRycy5uZ01lc3NhZ2VzTXVsdGlwbGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgaXNBdHRyVHJ1dGh5KCRzY29wZSwgJGF0dHJzLm11bHRpcGxlKTtcblxuICAgICAgICAgIHZhciB1bm1hdGNoZWRNZXNzYWdlcyA9IFtdO1xuICAgICAgICAgIHZhciBtYXRjaGVkS2V5cyA9IHt9O1xuICAgICAgICAgIHZhciBtZXNzYWdlSXRlbSA9IGN0cmwuaGVhZDtcbiAgICAgICAgICB2YXIgbWVzc2FnZUZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgdmFyIHRvdGFsTWVzc2FnZXMgPSAwO1xuXG4gICAgICAgICAgLy8gd2UgdXNlICE9IGluc3RlYWQgb2YgIT09IHRvIGFsbG93IGZvciBib3RoIHVuZGVmaW5lZCBhbmQgbnVsbCB2YWx1ZXNcbiAgICAgICAgICB3aGlsZSAobWVzc2FnZUl0ZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdG90YWxNZXNzYWdlcysrO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2VDdHJsID0gbWVzc2FnZUl0ZW0ubWVzc2FnZTtcblxuICAgICAgICAgICAgdmFyIG1lc3NhZ2VVc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2VGb3VuZCkge1xuICAgICAgICAgICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2VVc2VkICYmIHRydXRoeSh2YWx1ZSkgJiYgbWVzc2FnZUN0cmwudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIHRvIHByZXZlbnQgdGhlIHNhbWUgZXJyb3IgbmFtZSBmcm9tIHNob3dpbmcgdXAgdHdpY2VcbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkS2V5c1trZXldKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICBtYXRjaGVkS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgbWVzc2FnZVVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZUN0cmwuYXR0YWNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1lc3NhZ2VVc2VkKSB7XG4gICAgICAgICAgICAgIC8vIHVubGVzcyB3ZSB3YW50IHRvIGRpc3BsYXkgbXVsdGlwbGUgbWVzc2FnZXMgdGhlbiB3ZSBzaG91bGRcbiAgICAgICAgICAgICAgLy8gc2V0IGEgZmxhZyBoZXJlIHRvIGF2b2lkIGRpc3BsYXlpbmcgdGhlIG5leHQgbWVzc2FnZSBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgICBtZXNzYWdlRm91bmQgPSAhbXVsdGlwbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bm1hdGNoZWRNZXNzYWdlcy5wdXNoKG1lc3NhZ2VDdHJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWVzc2FnZUl0ZW0gPSBtZXNzYWdlSXRlbS5uZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2godW5tYXRjaGVkTWVzc2FnZXMsIGZ1bmN0aW9uKG1lc3NhZ2VDdHJsKSB7XG4gICAgICAgICAgICBtZXNzYWdlQ3RybC5kZXRhY2goKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICh1bm1hdGNoZWRNZXNzYWdlcy5sZW5ndGggIT09IHRvdGFsTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBBQ1RJVkVfQ0xBU1MsIElOQUNUSVZFX0NMQVNTKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIElOQUNUSVZFX0NMQVNTLCBBQ1RJVkVfQ0xBU1MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbigkYXR0cnMubmdNZXNzYWdlcyB8fCAkYXR0cnNbJ2ZvciddLCBjdHJsLnJlbmRlcik7XG5cbiAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgZGVzdHJveWVkLCBwcm9hY3RpdmVseSBkZXN0cm95IGFsbCB0aGUgY3VycmVudGx5IHZpc2libGUgbWVzc2FnZXNcbiAgICAgICAgJGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yRWFjaChtZXNzYWdlcywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgaXRlbS5tZXNzYWdlLmRldGFjaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlUmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFyZW5kZXJMYXRlcikge1xuICAgICAgICAgICAgcmVuZGVyTGF0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChyZW5kZXJMYXRlciAmJiBjYWNoZWRDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY3RybC5yZW5kZXIoY2FjaGVkQ29sbGVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24oY29tbWVudCwgbWVzc2FnZUN0cmwpIHtcbiAgICAgICAgICB2YXIgbmV4dEtleSA9IGxhdGVzdEtleS50b1N0cmluZygpO1xuICAgICAgICAgIG1lc3NhZ2VzW25leHRLZXldID0ge1xuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZUN0cmxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGluc2VydE1lc3NhZ2VOb2RlKCRlbGVtZW50WzBdLCBjb21tZW50LCBuZXh0S2V5KTtcbiAgICAgICAgICBjb21tZW50LiQkbmdNZXNzYWdlTm9kZSA9IG5leHRLZXk7XG4gICAgICAgICAgbGF0ZXN0S2V5Kys7XG5cbiAgICAgICAgICBjdHJsLnJlUmVuZGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kZXJlZ2lzdGVyID0gZnVuY3Rpb24oY29tbWVudCkge1xuICAgICAgICAgIHZhciBrZXkgPSBjb21tZW50LiQkbmdNZXNzYWdlTm9kZTtcbiAgICAgICAgICBkZWxldGUgY29tbWVudC4kJG5nTWVzc2FnZU5vZGU7XG4gICAgICAgICAgcmVtb3ZlTWVzc2FnZU5vZGUoJGVsZW1lbnRbMF0sIGNvbW1lbnQsIGtleSk7XG4gICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW2tleV07XG4gICAgICAgICAgY3RybC5yZVJlbmRlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRQcmV2aW91c01lc3NhZ2UocGFyZW50LCBjb21tZW50KSB7XG4gICAgICAgICAgdmFyIHByZXZOb2RlID0gY29tbWVudDtcbiAgICAgICAgICB2YXIgcGFyZW50TG9va3VwID0gW107XG5cbiAgICAgICAgICB3aGlsZSAocHJldk5vZGUgJiYgcHJldk5vZGUgIT09IHBhcmVudCkge1xuICAgICAgICAgICAgdmFyIHByZXZLZXkgPSBwcmV2Tm9kZS4kJG5nTWVzc2FnZU5vZGU7XG4gICAgICAgICAgICBpZiAocHJldktleSAmJiBwcmV2S2V5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZXNbcHJldktleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRpdmUgZGVlcGVyIGludG8gdGhlIERPTSBhbmQgZXhhbWluZSBpdHMgY2hpbGRyZW4gZm9yIGFueSBuZ01lc3NhZ2VcbiAgICAgICAgICAgIC8vIGNvbW1lbnRzIHRoYXQgbWF5IGJlIGluIGFuIGVsZW1lbnQgdGhhdCBhcHBlYXJzIGRlZXBlciBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgaWYgKHByZXZOb2RlLmNoaWxkTm9kZXMubGVuZ3RoICYmIHBhcmVudExvb2t1cC5pbmRleE9mKHByZXZOb2RlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcGFyZW50TG9va3VwLnB1c2gocHJldk5vZGUpO1xuICAgICAgICAgICAgICBwcmV2Tm9kZSA9IHByZXZOb2RlLmNoaWxkTm9kZXNbcHJldk5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldk5vZGUucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgICAgICAgIHByZXZOb2RlID0gcHJldk5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJldk5vZGUgPSBwcmV2Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICBwYXJlbnRMb29rdXAucHVzaChwcmV2Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0TWVzc2FnZU5vZGUocGFyZW50LCBjb21tZW50LCBrZXkpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZU5vZGUgPSBtZXNzYWdlc1trZXldO1xuICAgICAgICAgIGlmICghY3RybC5oZWFkKSB7XG4gICAgICAgICAgICBjdHJsLmhlYWQgPSBtZXNzYWdlTm9kZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gZmluZFByZXZpb3VzTWVzc2FnZShwYXJlbnQsIGNvbW1lbnQpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VOb2RlLm5leHQgPSBtYXRjaC5uZXh0O1xuICAgICAgICAgICAgICBtYXRjaC5uZXh0ID0gbWVzc2FnZU5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZXNzYWdlTm9kZS5uZXh0ID0gY3RybC5oZWFkO1xuICAgICAgICAgICAgICBjdHJsLmhlYWQgPSBtZXNzYWdlTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVNZXNzYWdlTm9kZShwYXJlbnQsIGNvbW1lbnQsIGtleSkge1xuICAgICAgICAgIHZhciBtZXNzYWdlTm9kZSA9IG1lc3NhZ2VzW2tleV07XG5cbiAgICAgICAgICB2YXIgbWF0Y2ggPSBmaW5kUHJldmlvdXNNZXNzYWdlKHBhcmVudCwgY29tbWVudCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBtYXRjaC5uZXh0ID0gbWVzc2FnZU5vZGUubmV4dDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3RybC5oZWFkID0gbWVzc2FnZU5vZGUubmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzQXR0clRydXRoeShzY29wZSwgYXR0cikge1xuICAgICByZXR1cm4gKGlzU3RyaW5nKGF0dHIpICYmIGF0dHIubGVuZ3RoID09PSAwKSB8fCAvL2VtcHR5IGF0dHJpYnV0ZVxuICAgICAgICAgICAgdHJ1dGh5KHNjb3BlLiRldmFsKGF0dHIpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cnV0aHkodmFsKSB7XG4gICAgICByZXR1cm4gaXNTdHJpbmcodmFsKSA/IHZhbC5sZW5ndGggOiAhIXZhbDtcbiAgICB9XG4gIH1dKVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG5nTWVzc2FnZXNJbmNsdWRlXG4gICAqIEByZXN0cmljdCBBRVxuICAgKiBAc2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIGBuZ01lc3NhZ2VzSW5jbHVkZWAgaXMgYSBkaXJlY3RpdmUgd2l0aCB0aGUgcHVycG9zZSB0byBpbXBvcnQgZXhpc3RpbmcgbmdNZXNzYWdlIHRlbXBsYXRlXG4gICAqIGNvZGUgZnJvbSBhIHJlbW90ZSB0ZW1wbGF0ZSBhbmQgcGxhY2UgdGhlIGRvd25sb2FkZWQgdGVtcGxhdGUgY29kZSBpbnRvIHRoZSBleGFjdCBzcG90XG4gICAqIHRoYXQgdGhlIG5nTWVzc2FnZXNJbmNsdWRlIGRpcmVjdGl2ZSBpcyBwbGFjZWQgd2l0aGluIHRoZSBuZ01lc3NhZ2VzIGNvbnRhaW5lci4gVGhpcyBhbGxvd3NcbiAgICogZm9yIGEgc2VyaWVzIG9mIHByZS1kZWZpbmVkIG1lc3NhZ2VzIHRvIGJlIHJldXNlZCBhbmQgYWxzbyBhbGxvd3MgZm9yIHRoZSBkZXZlbG9wZXIgdG9cbiAgICogZGV0ZXJtaW5lIHdoYXQgbWVzc2FnZXMgYXJlIG92ZXJyaWRkZW4gZHVlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIG5nTWVzc2FnZXNJbmNsdWRlIGRpcmVjdGl2ZS5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYGh0bWxcbiAgICogPCEtLSB1c2luZyBhdHRyaWJ1dGUgZGlyZWN0aXZlcyAtLT5cbiAgICogPEFOWSBuZy1tZXNzYWdlcz1cImV4cHJlc3Npb25cIiByb2xlPVwiYWxlcnRcIj5cbiAgICogICA8QU5ZIG5nLW1lc3NhZ2VzLWluY2x1ZGU9XCJyZW1vdGVUcGxTdHJpbmdcIj4uLi48L0FOWT5cbiAgICogPC9BTlk+XG4gICAqXG4gICAqIDwhLS0gb3IgYnkgdXNpbmcgZWxlbWVudCBkaXJlY3RpdmVzIC0tPlxuICAgKiA8bmctbWVzc2FnZXMgZm9yPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxuZy1tZXNzYWdlcy1pbmNsdWRlIHNyYz1cImV4cHJlc3Npb25WYWx1ZTFcIj4uLi48L25nLW1lc3NhZ2VzLWluY2x1ZGU+XG4gICAqIDwvbmctbWVzc2FnZXM+XG4gICAqIGBgYFxuICAgKlxuICAgKiB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMgQ2xpY2sgaGVyZX0gdG8gbGVhcm4gbW9yZSBhYm91dCBgbmdNZXNzYWdlc2AgYW5kIGBuZ01lc3NhZ2VgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNZXNzYWdlc0luY2x1ZGV8c3JjIGEgc3RyaW5nIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJlbW90ZSB0ZW1wbGF0ZS5cbiAgICovXG4gIC5kaXJlY3RpdmUoJ25nTWVzc2FnZXNJbmNsdWRlJyxcbiAgICBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGRvY3VtZW50JywgJyRjb21waWxlJywgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgJGRvY3VtZW50LCAkY29tcGlsZSkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgcmVxdWlyZTogJ15ebmdNZXNzYWdlcycsIC8vIHdlIG9ubHkgcmVxdWlyZSB0aGlzIGZvciB2YWxpZGF0aW9uIHNha2VcbiAgICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIHNyYyA9IGF0dHJzLm5nTWVzc2FnZXNJbmNsdWRlIHx8IGF0dHJzLnNyYztcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMpLnRoZW4oZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgIGlmICgkc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgIGlmIChpc1N0cmluZyhodG1sKSAmJiAhaHRtbC50cmltKCkpIHtcbiAgICAgICAgICAgIC8vIEVtcHR5IHRlbXBsYXRlIC0gbm90aGluZyB0byBjb21waWxlXG4gICAgICAgICAgICByZXBsYWNlRWxlbWVudFdpdGhNYXJrZXIoZWxlbWVudCwgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTm9uLWVtcHR5IHRlbXBsYXRlIC0gY29tcGlsZSBhbmQgbGlua1xuICAgICAgICAgICAgJGNvbXBpbGUoaHRtbCkoJHNjb3BlLCBmdW5jdGlvbihjb250ZW50cykge1xuICAgICAgICAgICAgICBlbGVtZW50LmFmdGVyKGNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgcmVwbGFjZUVsZW1lbnRXaXRoTWFya2VyKGVsZW1lbnQsIHNyYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBIZWxwZXJzXG4gICAgZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnRXaXRoTWFya2VyKGVsZW1lbnQsIHNyYykge1xuICAgICAgLy8gQSBjb21tZW50IG1hcmtlciBpcyBwbGFjZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAgdmFyIGNvbW1lbnQgPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQgP1xuICAgICAgICAgICRjb21waWxlLiQkY3JlYXRlQ29tbWVudCgnbmdNZXNzYWdlc0luY2x1ZGUnLCBzcmMpIDpcbiAgICAgICAgICAkZG9jdW1lbnRbMF0uY3JlYXRlQ29tbWVudCgnIG5nTWVzc2FnZXNJbmNsdWRlOiAnICsgc3JjICsgJyAnKTtcbiAgICAgIHZhciBtYXJrZXIgPSBqcUxpdGUoY29tbWVudCk7XG4gICAgICBlbGVtZW50LmFmdGVyKG1hcmtlcik7XG5cbiAgICAgIC8vIERvbid0IHBvbGx1dGUgdGhlIERPTSBhbnltb3JlIGJ5IGtlZXBpbmcgYW4gZW1wdHkgZGlyZWN0aXZlIGVsZW1lbnRcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuICB9XSlcblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01lc3NhZ2VcbiAgICogQHJlc3RyaWN0IEFFXG4gICAqIEBzY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYG5nTWVzc2FnZWAgaXMgYSBkaXJlY3RpdmUgd2l0aCB0aGUgcHVycG9zZSB0byBzaG93IGFuZCBoaWRlIGEgcGFydGljdWxhciBtZXNzYWdlLlxuICAgKiBGb3IgYG5nTWVzc2FnZWAgdG8gb3BlcmF0ZSwgYSBwYXJlbnQgYG5nTWVzc2FnZXNgIGRpcmVjdGl2ZSBvbiBhIHBhcmVudCBET00gZWxlbWVudFxuICAgKiBtdXN0IGJlIHNpdHVhdGVkIHNpbmNlIGl0IGRldGVybWluZXMgd2hpY2ggbWVzc2FnZXMgYXJlIHZpc2libGUgYmFzZWQgb24gdGhlIHN0YXRlXG4gICAqIG9mIHRoZSBwcm92aWRlZCBrZXkvdmFsdWUgbWFwIHRoYXQgYG5nTWVzc2FnZXNgIGxpc3RlbnMgb24uXG4gICAqXG4gICAqIE1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgYG5nTWVzc2FnZWAgY2FuIGJlIGZvdW5kIGluIHRoZVxuICAgKiB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMgYG5nTWVzc2FnZXNgIG1vZHVsZSBkb2N1bWVudGF0aW9ufS5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIGBgYGh0bWxcbiAgICogPCEtLSB1c2luZyBhdHRyaWJ1dGUgZGlyZWN0aXZlcyAtLT5cbiAgICogPEFOWSBuZy1tZXNzYWdlcz1cImV4cHJlc3Npb25cIiByb2xlPVwiYWxlcnRcIj5cbiAgICogICA8QU5ZIG5nLW1lc3NhZ2U9XCJzdHJpbmdWYWx1ZVwiPi4uLjwvQU5ZPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZT1cInN0cmluZ1ZhbHVlMSwgc3RyaW5nVmFsdWUyLCAuLi5cIj4uLi48L0FOWT5cbiAgICogPC9BTlk+XG4gICAqXG4gICAqIDwhLS0gb3IgYnkgdXNpbmcgZWxlbWVudCBkaXJlY3RpdmVzIC0tPlxuICAgKiA8bmctbWVzc2FnZXMgZm9yPVwiZXhwcmVzc2lvblwiIHJvbGU9XCJhbGVydFwiPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW49XCJzdHJpbmdWYWx1ZVwiPi4uLjwvbmctbWVzc2FnZT5cbiAgICogICA8bmctbWVzc2FnZSB3aGVuPVwic3RyaW5nVmFsdWUxLCBzdHJpbmdWYWx1ZTIsIC4uLlwiPi4uLjwvbmctbWVzc2FnZT5cbiAgICogPC9uZy1tZXNzYWdlcz5cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNZXNzYWdlfHdoZW4gYSBzdHJpbmcgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgbWVzc2FnZSBrZXkuXG4gICAqL1xuICAuZGlyZWN0aXZlKCduZ01lc3NhZ2UnLCBuZ01lc3NhZ2VEaXJlY3RpdmVGYWN0b3J5KCkpXG5cblxuICAvKipcbiAgICogQG5nZG9jIGRpcmVjdGl2ZVxuICAgKiBAbmFtZSBuZ01lc3NhZ2VFeHBcbiAgICogQHJlc3RyaWN0IEFFXG4gICAqIEBwcmlvcml0eSAxXG4gICAqIEBzY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYG5nTWVzc2FnZUV4cGAgaXMgdGhlIHNhbWUgYXMge0BsaW5rIGRpcmVjdGl2ZTpuZ01lc3NhZ2UgYG5nTWVzc2FnZWB9LCBidXQgaW5zdGVhZCBvZiBhIHN0YXRpY1xuICAgKiB2YWx1ZSwgaXQgYWNjZXB0cyBhbiBleHByZXNzaW9uIHRvIGJlIGV2YWx1YXRlZCBmb3IgdGhlIG1lc3NhZ2Uga2V5LlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICogYGBgaHRtbFxuICAgKiA8IS0tIHVzaW5nIGF0dHJpYnV0ZSBkaXJlY3RpdmVzIC0tPlxuICAgKiA8QU5ZIG5nLW1lc3NhZ2VzPVwiZXhwcmVzc2lvblwiPlxuICAgKiAgIDxBTlkgbmctbWVzc2FnZS1leHA9XCJleHByZXNzaW9uVmFsdWVcIj4uLi48L0FOWT5cbiAgICogPC9BTlk+XG4gICAqXG4gICAqIDwhLS0gb3IgYnkgdXNpbmcgZWxlbWVudCBkaXJlY3RpdmVzIC0tPlxuICAgKiA8bmctbWVzc2FnZXMgZm9yPVwiZXhwcmVzc2lvblwiPlxuICAgKiAgIDxuZy1tZXNzYWdlIHdoZW4tZXhwPVwiZXhwcmVzc2lvblZhbHVlXCI+Li4uPC9uZy1tZXNzYWdlPlxuICAgKiA8L25nLW1lc3NhZ2VzPlxuICAgKiBgYGBcbiAgICpcbiAgICoge0BsaW5rIG1vZHVsZTpuZ01lc3NhZ2VzIENsaWNrIGhlcmV9IHRvIGxlYXJuIG1vcmUgYWJvdXQgYG5nTWVzc2FnZXNgIGFuZCBgbmdNZXNzYWdlYC5cbiAgICpcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01lc3NhZ2VFeHB8d2hlbkV4cCBhbiBleHByZXNzaW9uIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1lc3NhZ2Uga2V5LlxuICAgKi9cbiAgLmRpcmVjdGl2ZSgnbmdNZXNzYWdlRXhwJywgbmdNZXNzYWdlRGlyZWN0aXZlRmFjdG9yeSgpKTtcblxuZnVuY3Rpb24gbmdNZXNzYWdlRGlyZWN0aXZlRmFjdG9yeSgpIHtcbiAgcmV0dXJuIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICAgIHByaW9yaXR5OiAxLCAvLyBtdXN0IHJ1biBiZWZvcmUgbmdCaW5kLCBvdGhlcndpc2UgdGhlIHRleHQgaXMgc2V0IG9uIHRoZSBjb21tZW50XG4gICAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAgIHJlcXVpcmU6ICdeXm5nTWVzc2FnZXMnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01lc3NhZ2VzQ3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGNvbW1lbnROb2RlID0gZWxlbWVudFswXTtcblxuICAgICAgICB2YXIgcmVjb3JkcztcbiAgICAgICAgdmFyIHN0YXRpY0V4cCA9IGF0dHJzLm5nTWVzc2FnZSB8fCBhdHRycy53aGVuO1xuICAgICAgICB2YXIgZHluYW1pY0V4cCA9IGF0dHJzLm5nTWVzc2FnZUV4cCB8fCBhdHRycy53aGVuRXhwO1xuICAgICAgICB2YXIgYXNzaWduUmVjb3JkcyA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgICAgICAgcmVjb3JkcyA9IGl0ZW1zXG4gICAgICAgICAgICAgID8gKGlzQXJyYXkoaXRlbXMpXG4gICAgICAgICAgICAgICAgICA/IGl0ZW1zXG4gICAgICAgICAgICAgICAgICA6IGl0ZW1zLnNwbGl0KC9bXFxzLF0rLykpXG4gICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICBuZ01lc3NhZ2VzQ3RybC5yZVJlbmRlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChkeW5hbWljRXhwKSB7XG4gICAgICAgICAgYXNzaWduUmVjb3JkcyhzY29wZS4kZXZhbChkeW5hbWljRXhwKSk7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihkeW5hbWljRXhwLCBhc3NpZ25SZWNvcmRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25SZWNvcmRzKHN0YXRpY0V4cCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3VycmVudEVsZW1lbnQsIG1lc3NhZ2VDdHJsO1xuICAgICAgICBuZ01lc3NhZ2VzQ3RybC5yZWdpc3Rlcihjb21tZW50Tm9kZSwgbWVzc2FnZUN0cmwgPSB7XG4gICAgICAgICAgdGVzdDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5zKHJlY29yZHMsIG5hbWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYXR0YWNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oZWxtLCBuZXdTY29wZSkge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGVsbSwgbnVsbCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBlbG07XG5cbiAgICAgICAgICAgICAgICAvLyBFYWNoIHRpbWUgd2UgYXR0YWNoIHRoaXMgbm9kZSB0byBhIG1lc3NhZ2Ugd2UgZ2V0IGEgbmV3IGlkIHRoYXQgd2UgY2FuIG1hdGNoXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSBhcmUgZGVzdHJveWluZyB0aGUgbm9kZSBsYXRlci5cbiAgICAgICAgICAgICAgICB2YXIgJCRhdHRhY2hJZCA9IGN1cnJlbnRFbGVtZW50LiQkYXR0YWNoSWQgPSBuZ01lc3NhZ2VzQ3RybC5nZXRBdHRhY2hJZCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgb3IgYSBwYXJlbnQgZWxlbWVudCBpcyBkZXN0cm95ZWRcbiAgICAgICAgICAgICAgICAvLyBieSBhbm90aGVyIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHRoZW4gaXQncyB0aW1lXG4gICAgICAgICAgICAgICAgLy8gdG8gZGVyZWdpc3RlciB0aGUgbWVzc2FnZSBmcm9tIHRoZSBjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQgJiYgY3VycmVudEVsZW1lbnQuJCRhdHRhY2hJZCA9PT0gJCRhdHRhY2hJZCkge1xuICAgICAgICAgICAgICAgICAgICBuZ01lc3NhZ2VzQ3RybC5kZXJlZ2lzdGVyKGNvbW1lbnROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUN0cmwuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBuZXdTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGVsbSA9IGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuICBmdW5jdGlvbiBjb250YWlucyhjb2xsZWN0aW9uLCBrZXkpIHtcbiAgICBpZiAoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGlzQXJyYXkoY29sbGVjdGlvbilcbiAgICAgICAgICA/IGNvbGxlY3Rpb24uaW5kZXhPZihrZXkpID49IDBcbiAgICAgICAgICA6IGNvbGxlY3Rpb24uaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICB9XG4gIH1cbn1cblxuXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTtcblxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnS3VsZXInLCBbJ3VpLnJvdXRlcicsICduZ1Jlc291cmNlJywgJ3NhdGVsbGl6ZXInLCAnY2hlY2tsaXN0LW1vZGVsJywgJ3VpLmJvb3RzdHJhcCcsICduZ0FuaW1hdGUnLCAnbmdNZXNzYWdlcyddKS5jb25zdGFudCgnQVBJX1VSTCcsICdodHRwczovL3Byb3RlY3RlZC1lc2NhcnBtZW50LTI1NTk4Lmhlcm9rdWFwcC5jb20nKS5jb25maWcoZnVuY3Rpb24gKCkge1xuICBTdHJpcGUuc2V0UHVibGlzaGFibGVLZXkoJ3BrX3Rlc3RfNnBSTkFTQ29CT0t0SXNoRmVRZDRYTVVoJyk7XG59KTtcbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0t1bGVyJykuY29uZmlnKEF1dGgpO1xuXG5BdXRoLiRpbmplY3QgPSBbJyRhdXRoUHJvdmlkZXInLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gQXV0aCgkYXV0aFByb3ZpZGVyLCBBUElfVVJMKSB7XG4gICRhdXRoUHJvdmlkZXIuc2lnbnVwVXJsID0gQVBJX1VSTCArICcvcmVnaXN0ZXInO1xuICAkYXV0aFByb3ZpZGVyLmxvZ2luVXJsID0gQVBJX1VSTCArICcvbG9naW4nO1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnS3VsZXInKS5jb25maWcoUm91dGVyKTtcblxuUm91dGVyLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuZnVuY3Rpb24gUm91dGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcblxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaG9tZScsIHtcbiAgICB1cmw6ICcvJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3N0YXRpYy9ob21lLmh0bWwnXG4gIH0pLnN0YXRlKCdwcmludHNJbmRleCcsIHtcbiAgICB1cmw6ICcvcHJpbnRzJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3ByaW50cy9pbmRleC5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJpbnRzSW5kZXhDdHJsIGFzIHByaW50c0luZGV4J1xuICB9KS5zdGF0ZSgncHJpbnRzTmV3Jywge1xuICAgIHVybDogJy9wcmludHMvbmV3JyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3ByaW50cy9uZXcuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1ByaW50c05ld0N0cmwgYXMgcHJpbnRzTmV3J1xuICB9KS5zdGF0ZSgncHJpbnRzU2hvdycsIHtcbiAgICB1cmw6ICcvcHJpbnRzLzppZCcsXG4gICAgdGVtcGxhdGVVcmw6ICdqcy92aWV3cy9wcmludHMvc2hvdy5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJpbnRzU2hvd0N0cmwgYXMgcHJpbnRzU2hvdydcbiAgfSkuc3RhdGUoJ3ByaW50c0VkaXQnLCB7XG4gICAgdXJsOiAnL3ByaW50cy86aWQvZWRpdCcsXG4gICAgdGVtcGxhdGVVcmw6ICdqcy92aWV3cy9wcmludHMvZWRpdC5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnUHJpbnRzRWRpdEN0cmwgYXMgcHJpbnRzRWRpdCdcbiAgfSkuc3RhdGUoJ3VzZXJzU2hvdycsIHtcbiAgICB1cmw6ICcvdXNlcnMvOmlkJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL3VzZXJzL3Nob3cuaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ1VzZXJzU2hvd0N0cmwgYXMgdXNlcnNTaG93J1xuICB9KS5zdGF0ZSgnbG9naW4nLCB7XG4gICAgdXJsOiAnL2xvZ2luJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2pzL3ZpZXdzL2F1dGgvbG9naW4uaHRtbCcsXG4gICAgY29udHJvbGxlcjogJ0F1dGhDdHJsIGFzIGF1dGgnXG4gIH0pLnN0YXRlKCdyZWdpc3RlcicsIHtcbiAgICB1cmw6ICcvcmVnaXN0ZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnanMvdmlld3MvYXV0aC9yZWdpc3Rlci5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnQXV0aEN0cmwgYXMgYXV0aCdcbiAgfSk7XG5cbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnS3VsZXInKS5jb250cm9sbGVyKCdBdXRoQ3RybCcsIEF1dGhDdHJsKTtcblxuQXV0aEN0cmwuJGluamVjdCA9IFsnJGF1dGgnLCAnJHN0YXRlJ107XG5mdW5jdGlvbiBBdXRoQ3RybCgkYXV0aCwgJHN0YXRlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgJGF1dGguc2lnbnVwKHZtLnVzZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZtLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgZnVuY3Rpb24gbG9naW4oKSB7XG4gICAgJGF1dGgubG9naW4odm0uY3JlZGVudGlhbHMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbygncHJpbnRzSW5kZXgnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZtLmxvZ2luID0gbG9naW47XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdLdWxlcicpLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgTWFpbkN0cmwpO1xuXG5NYWluQ3RybC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICckYXV0aCddO1xuZnVuY3Rpb24gTWFpbkN0cmwoJHJvb3RTY29wZSwgJHN0YXRlLCAkYXV0aCkge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh2bS5zdGF0ZUhhc0NoYW5nZWQpIHZtLm1lc3NhZ2UgPSBudWxsO1xuICAgIGlmICghdm0uc3RhdGVIYXNDaGFuZ2VkKSB2bS5zdGF0ZUhhc0NoYW5nZWQgPSB0cnVlO1xuICAgIHZtLmlzTmF2Q29sbGFwc2VkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgdm0uaXNBdXRoZW50aWNhdGVkID0gJGF1dGguaXNBdXRoZW50aWNhdGVkO1xuXG4gICRyb290U2NvcGUuJG9uKCdlcnJvcicsIGZ1bmN0aW9uIChlLCBlcnIpIHtcbiAgICB2bS5zdGF0ZUhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2bS5tZXNzYWdlID0gZXJyLmRhdGEubWVzc2FnZTtcbiAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XG4gIH0pO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh2bS5zdGF0ZUhhc0NoYW5nZWQpIHZtLm1lc3NhZ2UgPSBudWxsO1xuICAgIGlmICghdm0uc3RhdGVIYXNDaGFuZ2VkKSB2bS5zdGF0ZUhhc0NoYW5nZWQgPSB0cnVlO1xuICAgIGlmICgkYXV0aC5nZXRQYXlsb2FkKCkpIHZtLmN1cnJlbnRVc2VyID0gJGF1dGguZ2V0UGF5bG9hZCgpO1xuICB9KTtcblxuICB2YXIgcHJvdGVjdGVkU3RhdGVzID0gWydwcmludHNOZXcnLCAncHJpbnRzRWRpdCddO1xuXG4gICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChlLCB0b1N0YXRlKSB7XG4gICAgaWYgKCEkYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSAmJiBwcm90ZWN0ZWRTdGF0ZXMuaW5jbHVkZXModG9TdGF0ZS5uYW1lKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJHN0YXRlLmdvKCdsb2dpbicpO1xuICAgICAgdm0ubWVzc2FnZSA9ICdZb3UgbXVzdCBiZSBsb2dnZWQgaW4gdG8gYWNjZXNzIHRoaXMgcGFnZS4nO1xuICAgIH1cbiAgICB2bS5wYWdlTmFtZSA9IHRvU3RhdGUubmFtZTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gbG9nb3V0KCkge1xuICAgICRhdXRoLmxvZ291dCgpO1xuICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICB9XG5cbiAgdm0ubG9nb3V0ID0gbG9nb3V0O1xufVxuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnS3VsZXInKS5jb250cm9sbGVyKCdQYXltZW50Q29udHJvbGxlcicsIFBheW1lbnRDb250cm9sbGVyKTtcblxuUGF5bWVudENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGh0dHAnLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gUGF5bWVudENvbnRyb2xsZXIoJGh0dHAsIEFQSV9VUkwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHNlbGYuY2FyZCA9IHt9O1xuICBzZWxmLnBheWVlID0gbnVsbDtcbiAgc2VsZi5hbW91bnQgPSBudWxsO1xuICBzZWxmLmN1cnJlbmN5ID0gXCJnYnBcIjtcbiAgc2VsZi5wYXltZW50U3VjY2Vzc2Z1bCA9IGZhbHNlO1xuXG4gIHNlbGYucGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIFN0cmlwZS5jYXJkLmNyZWF0ZVRva2VuKHNlbGYuY2FyZCwgZnVuY3Rpb24gKHN0YXR1cywgcmVzcG9uc2UpIHtcbiAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICBjYXJkOiBzZWxmLmNhcmQsXG4gICAgICAgICAgdG9rZW46IHJlc3BvbnNlLmlkLFxuICAgICAgICAgIGFtb3VudDogc2VsZi5hbW91bnQsXG4gICAgICAgICAgY3VycmVuY3k6IHNlbGYuY3VycmVuY3ksXG4gICAgICAgICAgcGF5ZWU6IHNlbGYucGF5ZWVcbiAgICAgICAgfTtcblxuICAgICAgICAkaHR0cC5wb3N0KEFQSV9VUkwgKyAnL3BheW1lbnQnLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBzZWxmLnBheW1lbnRTdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXltZW50X21vZGFsJykuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYucGF5bWVudFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHNlbGYucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5jYXJkID0ge307XG4gICAgc2VsZi5wYXllZSA9IFwiXCI7XG4gICAgc2VsZi5hbW91bnQgPSBudWxsO1xuICAgIHNlbGYucGF5bWVudFN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBzZWxmLkZvcm0uJHNldFByaXN0aW5lKHRydWUpO1xuICAgIC8vIHVzZSB2YW5pbGxhIEpTIHRvIHJlc2V0IGZvcm0gdG8gcmVtb3ZlIGJyb3dzZXIncyBuYXRpdmUgYXV0b2NvbXBsZXRlIGhpZ2hsaWdodGluZ1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdmb3JtJylbMF0ucmVzZXQoKTtcbiAgfTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0t1bGVyJykuY29udHJvbGxlcignUHJpbnRzSW5kZXhDdHJsJywgUHJpbnRzSW5kZXhDdHJsKS5jb250cm9sbGVyKCdQcmludHNOZXdDdHJsJywgUHJpbnRzTmV3Q3RybCkuY29udHJvbGxlcignUHJpbnRzU2hvd0N0cmwnLCBQcmludHNTaG93Q3RybCkuY29udHJvbGxlcignUHJpbnRzRWRpdEN0cmwnLCBQcmludHNFZGl0Q3RybCk7XG5cblByaW50c0luZGV4Q3RybC4kaW5qZWN0ID0gWydQcmludCcsICdmaWx0ZXJGaWx0ZXInLCAnJHNjb3BlJ107XG5mdW5jdGlvbiBQcmludHNJbmRleEN0cmwoUHJpbnQsIGZpbHRlckZpbHRlciwgJHNjb3BlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZtLmFsbCA9IFByaW50LnF1ZXJ5KCk7XG59XG5cblByaW50c05ld0N0cmwuJGluamVjdCA9IFsnUHJpbnQnLCAnVXNlcicsICckc3RhdGUnXTtcbmZ1bmN0aW9uIFByaW50c05ld0N0cmwoUHJpbnQsIFVzZXIsICRzdGF0ZSkge1xuICB2YXIgdm0gPSB0aGlzO1xuICB2bS5wcmludCA9IHtcbiAgICBcIm1lZGl1bVwiOiBcIlByaW50XCJcbiAgfTtcbiAgdm0udXNlcnMgPSBVc2VyLnF1ZXJ5KCk7XG5cbiAgZnVuY3Rpb24gcHJpbnRzQ3JlYXRlKCkge1xuICAgIFByaW50LnNhdmUoeyBwcmludDogdm0ucHJpbnQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLmdvKCdwcmludHNJbmRleCcpO1xuICAgIH0pO1xuICB9XG5cbiAgdm0uY3JlYXRlID0gcHJpbnRzQ3JlYXRlO1xufVxuXG5QcmludHNTaG93Q3RybC4kaW5qZWN0ID0gWydQcmludCcsICdVc2VyJywgJ0NvbW1lbnQnLCAnJHN0YXRlUGFyYW1zJywgJyRzdGF0ZScsICckYXV0aCddO1xuZnVuY3Rpb24gUHJpbnRzU2hvd0N0cmwoUHJpbnQsIFVzZXIsIENvbW1lbnQsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCAkYXV0aCkge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gIGlmICgkYXV0aC5nZXRQYXlsb2FkKCkpIHZtLmN1cnJlbnRVc2VyID0gVXNlci5nZXQoeyBpZDogJGF1dGguZ2V0UGF5bG9hZCgpLmlkIH0pO1xuXG4gIHZtLnByaW50ID0gUHJpbnQuZ2V0KCRzdGF0ZVBhcmFtcyk7XG4gIHZtLmNvbW1lbnQgPSB7fTtcblxuICBmdW5jdGlvbiBwcmludHNEZWxldGUoKSB7XG4gICAgdm0ucHJpbnQuJHJlbW92ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbygncHJpbnRzSW5kZXgnKTtcbiAgICB9KTtcbiAgfVxuICB2bS5kZWxldGUgPSBwcmludHNEZWxldGU7XG5cbiAgZnVuY3Rpb24gYWRkQ29tbWVudCgpIHtcbiAgICB2bS5jb21tZW50LnByaW50X2lkID0gdm0ucHJpbnQuaWQ7XG4gICAgdm0uY29tbWVudC51c2VyX2lkID0gdm0uY3VycmVudFVzZXIuaWQ7XG4gICAgQ29tbWVudC5zYXZlKHsgY29tbWVudDogdm0uY29tbWVudCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjb21tZW50KSB7XG4gICAgICB2bS5wcmludC5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgdm0uY29tbWVudCA9IHt9O1xuICAgIH0pO1xuICB9XG5cbiAgdm0uYWRkQ29tbWVudCA9IGFkZENvbW1lbnQ7XG5cbiAgZnVuY3Rpb24gZGVsZXRlQ29tbWVudChjb21tZW50KSB7XG4gICAgQ29tbWVudC5kZWxldGUoeyBpZDogY29tbWVudC5pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbmRleCA9IHZtLnByaW50LmNvbW1lbnRzLmluZGV4T2YoY29tbWVudCk7XG4gICAgICB2bS5wcmludC5jb21tZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0pO1xuICB9XG5cbiAgdm0uZGVsZXRlQ29tbWVudCA9IGRlbGV0ZUNvbW1lbnQ7XG59XG5cblByaW50c0VkaXRDdHJsLiRpbmplY3QgPSBbJ1ByaW50JywgJ1VzZXInLCAnJHN0YXRlUGFyYW1zJywgJyRzdGF0ZSddO1xuZnVuY3Rpb24gUHJpbnRzRWRpdEN0cmwoUHJpbnQsIFVzZXIsICRzdGF0ZVBhcmFtcywgJHN0YXRlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG5cbiAgUHJpbnQuZ2V0KCRzdGF0ZVBhcmFtcykuJHByb21pc2UudGhlbihmdW5jdGlvbiAocHJpbnQpIHtcbiAgICB2bS5wcmludCA9IHByaW50O1xuICB9KTtcblxuICB2bS51c2VycyA9IFVzZXIucXVlcnkoKTtcblxuICBmdW5jdGlvbiBwcmludHNVcGRhdGUoKSB7XG4gICAgUHJpbnQudXBkYXRlKHsgaWQ6IHZtLnByaW50LmlkLCBwcmludDogdm0ucHJpbnQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJHN0YXRlLmdvKCdwcmludHNTaG93JywgeyBpZDogdm0ucHJpbnQuaWQgfSk7XG4gICAgfSk7XG4gIH1cblxuICB2bS51cGRhdGUgPSBwcmludHNVcGRhdGU7XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdLdWxlcicpLmNvbnRyb2xsZXIoJ1VzZXJzSW5kZXhDdHJsJywgVXNlcnNJbmRleEN0cmwpLmNvbnRyb2xsZXIoJ1VzZXJzU2hvd0N0cmwnLCBVc2Vyc1Nob3dDdHJsKTtcblxuVXNlcnNJbmRleEN0cmwuJGluamVjdCA9IFsnVXNlciddO1xuZnVuY3Rpb24gVXNlcnNJbmRleEN0cmwoVXNlcikge1xuICB2YXIgdm0gPSB0aGlzO1xuXG4gIHZtLmFsbCA9IFVzZXIucXVlcnkoKTtcbn1cblxuVXNlcnNTaG93Q3RybC4kaW5qZWN0ID0gWydVc2VyJywgJyRzdGF0ZVBhcmFtcycsICckc3RhdGUnLCAnJGF1dGgnXTtcbmZ1bmN0aW9uIFVzZXJzU2hvd0N0cmwoVXNlciwgJHN0YXRlUGFyYW1zLCAkc3RhdGUsICRhdXRoKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZtLnVzZXIgPSBVc2VyLmdldCgkc3RhdGVQYXJhbXMpO1xuXG4gIGZ1bmN0aW9uIHVzZXJzRGVsZXRlKCkge1xuXG4gICAgdm0udXNlci4kcmVtb3ZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAkYXV0aC5sb2dvdXQoKTtcbiAgICAgICRzdGF0ZS5nbygncmVnaXN0ZXInKTtcbiAgICB9KTtcbiAgfVxuICB2bS5kZWxldGUgPSB1c2Vyc0RlbGV0ZTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0t1bGVyJykuZGlyZWN0aXZlKCdiYXNlNjQnLCBiYXNlNjQpO1xuXG5mdW5jdGlvbiBiYXNlNjQoKSB7XG4gIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKCRzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcblxuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiBmaWxlTG9hZGVkKCkge1xuICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZmlsZVJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGZpbGUgPSAoZS50YXJnZXQuZmlsZXMgfHwgZS5kYXRhVHJhbnNmZXIuZmlsZXMpWzBdO1xuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdLdWxlcicpLmZhY3RvcnkoJ0NvbW1lbnQnLCBDb21tZW50KTtcblxuQ29tbWVudC4kaW5qZWN0ID0gWyckcmVzb3VyY2UnLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gQ29tbWVudCgkcmVzb3VyY2UsIEFQSV9VUkwpIHtcbiAgcmV0dXJuIG5ldyAkcmVzb3VyY2UoQVBJX1VSTCArICcvY29tbWVudHMvOmlkJywgeyBpZDogJ0BpZCcgfSwge1xuICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnIH1cbiAgfSk7XG59XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdLdWxlcicpLmZhY3RvcnkoJ1ByaW50JywgUHJpbnQpO1xuXG5QcmludC4kaW5qZWN0ID0gWyckcmVzb3VyY2UnLCAnQVBJX1VSTCddO1xuZnVuY3Rpb24gUHJpbnQoJHJlc291cmNlLCBBUElfVVJMKSB7XG4gIHJldHVybiBuZXcgJHJlc291cmNlKEFQSV9VUkwgKyAnL3ByaW50cy86aWQnLCB7IGlkOiAnQGlkJyB9LCB7XG4gICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcgfVxuICB9KTtcbn1cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ0t1bGVyJykuZmFjdG9yeSgnVXNlcicsIFVzZXIpO1xuXG5Vc2VyLiRpbmplY3QgPSBbJyRyZXNvdXJjZScsICdBUElfVVJMJ107XG5mdW5jdGlvbiBVc2VyKCRyZXNvdXJjZSwgQVBJX1VSTCkge1xuICByZXR1cm4gbmV3ICRyZXNvdXJjZShBUElfVVJMICsgJy91c2Vycy86aWQnLCB7IGlkOiAnQGlkJyB9LCB7XG4gICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcgfVxuICB9KTtcbn0iXX0=
